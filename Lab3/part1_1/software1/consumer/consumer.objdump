
consumer.elf:     file format elf32-littlenios2
consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000c21c memsz 0x0000c21c flags r-x
    LOAD off    0x0000d398 vaddr 0x00028398 paddr 0x0001c23c align 2**12
         filesz 0x00001a58 memsz 0x00001d60 flags rw-
    LOAD off    0x0000f000 vaddr 0x00028000 paddr 0x00028000 align 2**12
         filesz 0x00000398 memsz 0x00000398 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c084  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000398  00028000  00028000  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  00028398  0001c23c  0000d398  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  00029df0  0001dc94  0000edf0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000f398  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d98  00000000  00000000  0000f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022c88  00000000  00000000  00010158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009036  00000000  00000000  00032de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a174  00000000  00000000  0003be16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001880  00000000  00000000  00045f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002de3  00000000  00000000  0004780c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010609  00000000  00000000  0004a5ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0005abf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0005ac18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005e7bf  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0005e7c2  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005e7c6  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005e7c7  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005e7c8  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005e7cc  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005e7d0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0005e7d4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0005e7df  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0005e7ea  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  0005e7f5  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000058  00000000  00000000  0005e7f8  2**0
                  CONTENTS, READONLY
 28 .jdi          00008508  00000000  00000000  0005e850  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0006eaee  00000000  00000000  00066d58  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
00028000 l    d  .rodata	00000000 .rodata
00028398 l    d  .rwdata	00000000 .rwdata
00029df0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../consumer_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000107cc l     F .text	00000034 __sprint_r
000280b6 l     O .rodata	00000010 blanks.3515
000280c6 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00012790 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000141cc l     F .text	00000008 __fp_lock
000141d4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00028398 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
000280fc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00028244 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00018514 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00019254 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00019910 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019a28 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00019a54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00019b50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00019c40 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00019d2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00019f04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00029de0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a154 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001a290 l     F .text	00000038 alt_dev_reg
00028d54 l     O .rwdata	00001060 jtag_uart_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001a5a8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0001a7ac l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001ade8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b180 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001b620 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001b758 l     F .text	00000050 alt_get_errno
0001b7a8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00016b24 g     F .text	00000074 _mprec_log10
00016c14 g     F .text	00000084 __any_on
00017884 g     F .text	00000064 _isatty_r
0002812c g     O .rodata	00000028 __mprec_tinytens
00019e4c g     F .text	00000078 alt_main
00010000 g       *ABS*	00000000 __alt_mem_ins_mem1
000198cc g     F .text	00000044 __ashldi3
000106a8 g     F .text	00000084 _puts_r
00029df0 g     O .bss	00000004 writep
00029e68 g     O .bss	00000100 alt_irq
000178e8 g     F .text	0000006c _lseek_r
0001c23c g       *ABS*	00000000 __flash_rwdata_start
00018db4 g     F .text	0000005c __eqdf2
000104e0 g     F .text	00000048 FIFO_1_INIT
0002a0f8 g       *ABS*	00000000 __alt_heap_start
0001066c g     F .text	0000003c printf
00017438 g     F .text	0000005c __sseek
0001425c g     F .text	0000010c __sinit
00014ef4 g     F .text	0000009c _setlocale_r
000141e8 g     F .text	00000064 __sfmoreglue
00019ee4 g     F .text	00000020 __malloc_unlock
00029df4 g     O .bss	00000004 readp
00029e30 g     O .bss	00000004 altera_avalon_timer_ts_freq
00015aec g     F .text	00000128 memmove
0001424c g     F .text	00000010 _cleanup
00015cf0 g     F .text	000000a8 _Balloc
00018e6c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001781c g     F .text	00000068 _fstat_r
00029e1c g     O .bss	00000004 errno
00029e24 g     O .bss	00000004 alt_argv
00031db4 g       *ABS*	00000000 _gp
00028bd4 g     O .rwdata	00000180 alt_fd_list
0001bb84 g     F .text	00000090 alt_find_dev
000159f4 g     F .text	000000f8 memcpy
000141dc g     F .text	0000000c _cleanup_r
00018f90 g     F .text	000000d4 __floatsidf
0001b6e0 g     F .text	00000078 alt_io_redirect
00018f34 g     F .text	0000005c __ltdf2
0001c23c g       *ABS*	00000000 __DTOR_END__
0001072c g     F .text	00000014 puts
00016a80 g     F .text	000000a4 __ratio
0001a9ac g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010640 g     F .text	0000002c _printf_r
00019374 g     F .text	00000008 __udivsi3
00019ba0 g     F .text	000000a0 isatty
0002817c g     O .rodata	000000c8 __mprec_tens
00014f90 g     F .text	0000000c __locale_charset
0001bddc g     F .text	0000008c alt_icache_flush
00029e18 g     O .bss	00000004 __malloc_top_pad
00029dbc g     O .rwdata	00000004 __mb_cur_max
00014f9c g     F .text	0000000c _localeconv_r
000160f0 g     F .text	0000003c __i2b
000148b0 g     F .text	000004e4 __sfvwrite_r
000172f8 g     F .text	00000064 _sbrk_r
0001056c g     F .text	00000094 consumer
00029df8 g     O .bss	00000004 fullp
00017954 g     F .text	0000006c _read_r
00028798 g     O .rwdata	0000000c __lc_ctype
00029dd8 g     O .rwdata	00000004 alt_max_fd
000196b4 g     F .text	00000104 __unpack_d
000176cc g     F .text	0000013c _fclose_r
0001419c g     F .text	00000030 fflush
00029e14 g     O .bss	00000004 __malloc_max_sbrked_mem
00018868 g     F .text	00000054 __adddf3
000167f4 g     F .text	00000148 __b2d
00017f88 g     F .text	0000058c __umoddi3
00019d7c g     F .text	000000d0 lseek
00029db4 g     O .rwdata	00000004 _global_impure_ptr
00016c98 g     F .text	000005fc _realloc_r
0002a0f8 g       *ABS*	00000000 __bss_end
0001b530 g     F .text	000000f0 alt_iic_isr_register
0001ba60 g     F .text	00000104 alt_tick
000179c0 g     F .text	000005c8 __udivdi3
00028154 g     O .rodata	00000028 __mprec_bigtens
00015ed4 g     F .text	00000104 __s2b
00019138 g     F .text	0000011c __floatunsidf
00016594 g     F .text	00000058 __mcmp
00014474 g     F .text	00000018 __fp_lock_all
0001b4e4 g     F .text	0000004c alt_ic_irq_enabled
0001b9c8 g     F .text	00000098 alt_alarm_stop
00029e34 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000cc alt_irq_handler
00028bac g     O .rwdata	00000028 alt_dev_null
0001b164 g     F .text	0000001c alt_dcache_flush_all
00015fd8 g     F .text	00000068 __hi0bits
00019064 g     F .text	000000d4 __fixdfsi
00029df0 g       *ABS*	00000000 __ram_rwdata_end
00029dd0 g     O .rwdata	00000008 alt_dev_list
0001a1a4 g     F .text	000000ec write
0001affc g     F .text	00000028 alt_timestamp_freq
00028398 g       *ABS*	00000000 __ram_rodata_end
00019aa4 g     F .text	000000ac fstat
00019888 g     F .text	00000044 __lshrdi3
0001630c g     F .text	0000012c __pow5mult
00029e0c g     O .bss	00000004 __nlocale_changed
0001937c g     F .text	00000008 __umodsi3
0002a0f8 g       *ABS*	00000000 end
0001a4e8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0001c23c g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
0001ae5c g     F .text	00000088 alt_avalon_timer_sc_init
000193e4 g     F .text	000000ac __clzsi2
0001abc4 g     F .text	00000224 altera_avalon_jtag_uart_write
00014464 g     F .text	00000004 __sfp_lock_acquire
000158fc g     F .text	000000f8 memchr
00010800 g     F .text	00001df8 ___vfprintf_internal_r
000145e0 g     F .text	000002d0 _free_r
0001c060 g     F .text	000001a0 __call_exitprocs
00029e08 g     O .bss	00000004 __mlocale_changed
00029dc0 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
00029e38 g     O .bss	00000004 _alt_tick_rate
00016438 g     F .text	0000015c __lshift
00029e3c g     O .bss	00000004 _alt_nticks
00019f54 g     F .text	000000f0 read
0001a2fc g     F .text	00000088 alt_sys_init
0001bf30 g     F .text	00000130 __register_exitproc
0001612c g     F .text	000001e0 __multiply
0001a850 g     F .text	00000068 altera_avalon_jtag_uart_close
00028398 g       *ABS*	00000000 __ram_rwdata_start
00028000 g       *ABS*	00000000 __ram_rodata_start
00029e40 g     O .bss	00000028 __malloc_current_mallinfo
0001693c g     F .text	00000144 __d2b
0001a384 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001bd28 g     F .text	000000b4 alt_get_fd
000197b8 g     F .text	000000d0 __fpcmp_parts_d
00017668 g     F .text	00000064 _close_r
0001beb4 g     F .text	0000007c memcmp
0001a444 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a0f8 g       *ABS*	00000000 __alt_stack_base
0001a494 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001261c g     F .text	00000174 __swsetup_r
00018c00 g     F .text	000001b4 __divdf3
00014368 g     F .text	000000fc __sfp
00016b98 g     F .text	0000007c __copybits
000287a4 g     O .rwdata	00000408 __malloc_av_
00014470 g     F .text	00000004 __sinit_lock_release
0001891c g     F .text	000002e4 __muldf3
0001735c g     F .text	00000054 __sread
0001bc14 g     F .text	00000114 alt_find_file
0001b1d0 g     F .text	000000a0 alt_dev_llist_insert
00019ec4 g     F .text	00000020 __malloc_lock
0001a0a4 g     F .text	000000b0 sbrk
00013fb4 g     F .text	000001e8 _fflush_r
000175ac g     F .text	000000bc _calloc_r
00029df0 g       *ABS*	00000000 __bss_start
00015c14 g     F .text	000000dc memset
00010528 g     F .text	00000044 main
00029e28 g     O .bss	00000004 alt_envp
00029e10 g     O .bss	00000004 __malloc_max_total_mem
0001a3e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00017494 g     F .text	00000008 __sclose
00030000 g       *ABS*	00000000 __alt_heap_limit
00017808 g     F .text	00000014 fclose
00028000 g       *ABS*	00000000 __alt_mem_data_mem1
0001aee4 g     F .text	00000088 alt_timestamp_start
00029f68 g     O .bss	00000190 _atexit0
00012998 g     F .text	0000161c _dtoa_r
00015178 g     F .text	00000784 _malloc_r
00029ddc g     O .rwdata	00000004 alt_errno
00014d94 g     F .text	000000a8 _fwalk
000101f4 g     F .text	00000180 WRITE_FIFO_1
000192c8 g     F .text	00000050 __divsi3
00028250 g     O .rodata	00000014 __thenan_df
000144a4 g     F .text	0000013c _malloc_trim_r
0001c23c g       *ABS*	00000000 __CTOR_END__
0001749c g     F .text	000000a4 strcmp
00028000 g       *ABS*	00000000 __flash_rodata_start
0001c23c g       *ABS*	00000000 __DTOR_LIST__
00010600 g     F .text	00000040 delay
00018e10 g     F .text	0000005c __nedf2
0001a2c8 g     F .text	00000034 alt_irq_init
0001a044 g     F .text	00000060 alt_release_fd
00028264 g     O .rodata	00000100 __clz_tab
00029e04 g     O .bss	00000004 _PathLocale
0001be68 g     F .text	00000014 atexit
00017540 g     F .text	0000006c _write_r
00014fa8 g     F .text	0000001c setlocale
00029db8 g     O .rwdata	00000004 _impure_ptr
00029e20 g     O .bss	00000004 alt_argc
00029e2c g     O .bss	00000004 altera_avalon_timer_ts_base
0001b2cc g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00016794 g     F .text	00000060 __ulp
00017294 g     F .text	00000038 __isinfd
0001448c g     F .text	00000018 __fp_unlock_all
00029dc8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014fc4 g     F .text	0000000c localeconv
0001af6c g     F .text	00000090 alt_timestamp
0001b358 g     F .text	00000050 alt_ic_isr_register
00029df0 g       *ABS*	00000000 _edata
0002a0f8 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
0001a8b8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001b444 g     F .text	000000a0 alt_ic_irq_disable
000173b0 g     F .text	00000088 __swrite
00029dc4 g     O .rwdata	00000004 __malloc_trim_threshold
0001bb64 g     F .text	00000020 altera_nios2_qsys_irq_init
0001be7c g     F .text	00000038 exit
00014e3c g     F .text	000000b8 _fwalk_reent
000165ec g     F .text	000001a8 __mdiff
00019318 g     F .text	0000005c __modsi3
00030000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00014468 g     F .text	00000004 __sfp_lock_release
0001c200 g     F .text	0000003c _exit
000172cc g     F .text	0000002c __isnand
0001b024 g     F .text	00000140 alt_alarm_start
00019384 g     F .text	00000060 __muldi3
00014fd0 g     F .text	000001a8 __smakebuf_r
00010740 g     F .text	0000008c strlen
0001b874 g     F .text	00000154 open
00018ed0 g     F .text	00000064 __gedf2
00010374 g     F .text	0000016c READ_FIFO_1
0001b328 g     F .text	00000030 alt_icache_flush_all
00029de4 g     O .rwdata	00000004 alt_priority_mask
00029dfc g     O .bss	00000004 emptyp
0001b3a8 g     F .text	0000009c alt_ic_irq_enable
000125f8 g     F .text	00000024 __vfprintf_internal
000188bc g     F .text	00000060 __subdf3
00016040 g     F .text	000000b0 __lo0bits
00029de8 g     O .rwdata	00000008 alt_alarm_list
0001b270 g     F .text	0000005c _do_ctors
00029e00 g     O .bss	00000004 countp
00019960 g     F .text	000000c8 close
00019cac g     F .text	00000080 alt_load
00019490 g     F .text	00000224 __pack_d
00030000 g       *ABS*	00000000 __alt_mem_shared_mem
00000000  w      *UND*	00000000 free
0001446c g     F .text	00000004 __sinit_lock_acquire
00015dc0 g     F .text	00000114 __multadd
00015d98 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406e14 	ori	at,at,440
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_ins_mem1-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000f4 	movhi	r3,3
   10130:	18e79a04 	addi	r3,r3,-24984
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000f4 	movhi	r4,3
   10148:	21279a04 	addi	r4,r4,-24984
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   101c4:	d6876d14 	ori	gp,gp,7604
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   101cc:	10a77c14 	ori	r2,r2,40432

    movhi r3, %hi(__bss_end)
   101d0:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   101d4:	18e83e14 	ori	r3,r3,41208

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	0019cac0 	call	19cac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	0019e4c0 	call	19e4c <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <WRITE_FIFO_1>:


#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   101f4:	defffe04 	addi	sp,sp,-8
   101f8:	df000115 	stw	fp,4(sp)
   101fc:	df000104 	addi	fp,sp,4
   10200:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1){}
   10204:	0001883a 	nop
   10208:	d0a01117 	ldw	r2,-32700(gp)
   1020c:	1007883a 	mov	r3,r2
   10210:	008000f4 	movhi	r2,3
   10214:	10801204 	addi	r2,r2,72
   10218:	1885883a 	add	r2,r3,r2
   1021c:	10800037 	ldwio	r2,0(r2)
   10220:	10800060 	cmpeqi	r2,r2,1
   10224:	103ff81e 	bne	r2,zero,10208 <WRITE_FIFO_1+0x14>

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,*buffer);
   10228:	d0a00f17 	ldw	r2,-32708(gp)
   1022c:	1007883a 	mov	r3,r2
   10230:	008000f4 	movhi	r2,3
   10234:	10801204 	addi	r2,r2,72
   10238:	1885883a 	add	r2,r3,r2
   1023c:	e0ffff17 	ldw	r3,-4(fp)
   10240:	18c00017 	ldw	r3,0(r3)
   10244:	10c00035 	stwio	r3,0(r2)
	//printf("Producer sent [%i]\t%x\t%i\n",*buffer,writep,IORD_32DIRECT(MEM_BASE,writep));
	// Update the write pointer
	writep += UNIT_SIZE;
   10248:	d0a00f17 	ldw	r2,-32708(gp)
   1024c:	10800104 	addi	r2,r2,4
   10250:	d0a00f15 	stw	r2,-32708(gp)

	writep = writep%(CAPACITY*UNIT_SIZE);
   10254:	d0e00f17 	ldw	r3,-32708(gp)
   10258:	00a00034 	movhi	r2,32768
   1025c:	10800fc4 	addi	r2,r2,63
   10260:	1884703a 	and	r2,r3,r2
   10264:	1000040e 	bge	r2,zero,10278 <WRITE_FIFO_1+0x84>
   10268:	10bfffc4 	addi	r2,r2,-1
   1026c:	00fff004 	movi	r3,-64
   10270:	10c4b03a 	or	r2,r2,r3
   10274:	10800044 	addi	r2,r2,1
   10278:	d0a00f15 	stw	r2,-32708(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) + 0x1);
   1027c:	d0a01317 	ldw	r2,-32692(gp)
   10280:	1007883a 	mov	r3,r2
   10284:	008000f4 	movhi	r2,3
   10288:	10801204 	addi	r2,r2,72
   1028c:	1885883a 	add	r2,r3,r2
   10290:	d0e01317 	ldw	r3,-32692(gp)
   10294:	1809883a 	mov	r4,r3
   10298:	00c000f4 	movhi	r3,3
   1029c:	18c01204 	addi	r3,r3,72
   102a0:	20c7883a 	add	r3,r4,r3
   102a4:	18c00037 	ldwio	r3,0(r3)
   102a8:	18c00044 	addi	r3,r3,1
   102ac:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   102b0:	d0a01317 	ldw	r2,-32692(gp)
   102b4:	1007883a 	mov	r3,r2
   102b8:	008000f4 	movhi	r2,3
   102bc:	10801204 	addi	r2,r2,72
   102c0:	1885883a 	add	r2,r3,r2
   102c4:	10800037 	ldwio	r2,0(r2)
   102c8:	10800418 	cmpnei	r2,r2,16
   102cc:	1000081e 	bne	r2,zero,102f0 <WRITE_FIFO_1+0xfc>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   102d0:	d0a01117 	ldw	r2,-32700(gp)
   102d4:	1007883a 	mov	r3,r2
   102d8:	008000f4 	movhi	r2,3
   102dc:	10801204 	addi	r2,r2,72
   102e0:	1885883a 	add	r2,r3,r2
   102e4:	00c00044 	movi	r3,1
   102e8:	10c00035 	stwio	r3,0(r2)
   102ec:	00000706 	br	1030c <WRITE_FIFO_1+0x118>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   102f0:	d0a01117 	ldw	r2,-32700(gp)
   102f4:	1007883a 	mov	r3,r2
   102f8:	008000f4 	movhi	r2,3
   102fc:	10801204 	addi	r2,r2,72
   10300:	1885883a 	add	r2,r3,r2
   10304:	0007883a 	mov	r3,zero
   10308:	10c00035 	stwio	r3,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   1030c:	d0a01317 	ldw	r2,-32692(gp)
   10310:	1007883a 	mov	r3,r2
   10314:	008000f4 	movhi	r2,3
   10318:	10801204 	addi	r2,r2,72
   1031c:	1885883a 	add	r2,r3,r2
   10320:	10800037 	ldwio	r2,0(r2)
   10324:	1000081e 	bne	r2,zero,10348 <WRITE_FIFO_1+0x154>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   10328:	d0a01217 	ldw	r2,-32696(gp)
   1032c:	1007883a 	mov	r3,r2
   10330:	008000f4 	movhi	r2,3
   10334:	10801204 	addi	r2,r2,72
   10338:	1885883a 	add	r2,r3,r2
   1033c:	00c00044 	movi	r3,1
   10340:	10c00035 	stwio	r3,0(r2)
   10344:	00000706 	br	10364 <WRITE_FIFO_1+0x170>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   10348:	d0a01217 	ldw	r2,-32696(gp)
   1034c:	1007883a 	mov	r3,r2
   10350:	008000f4 	movhi	r2,3
   10354:	10801204 	addi	r2,r2,72
   10358:	1885883a 	add	r2,r3,r2
   1035c:	0007883a 	mov	r3,zero
   10360:	10c00035 	stwio	r3,0(r2)
	}
}
   10364:	e037883a 	mov	sp,fp
   10368:	df000017 	ldw	fp,0(sp)
   1036c:	dec00104 	addi	sp,sp,4
   10370:	f800283a 	ret

00010374 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   10374:	defffe04 	addi	sp,sp,-8
   10378:	df000115 	stw	fp,4(sp)
   1037c:	df000104 	addi	fp,sp,4
   10380:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1){}
   10384:	0001883a 	nop
   10388:	d0a01217 	ldw	r2,-32696(gp)
   1038c:	1007883a 	mov	r3,r2
   10390:	008000f4 	movhi	r2,3
   10394:	10801204 	addi	r2,r2,72
   10398:	1885883a 	add	r2,r3,r2
   1039c:	10800037 	ldwio	r2,0(r2)
   103a0:	10800060 	cmpeqi	r2,r2,1
   103a4:	103ff81e 	bne	r2,zero,10388 <READ_FIFO_1+0x14>

	// Read the data
	*buffer = IORD_32DIRECT(MEM_BASE,readp);
   103a8:	d0a01017 	ldw	r2,-32704(gp)
   103ac:	1007883a 	mov	r3,r2
   103b0:	008000f4 	movhi	r2,3
   103b4:	10801204 	addi	r2,r2,72
   103b8:	1885883a 	add	r2,r3,r2
   103bc:	10c00037 	ldwio	r3,0(r2)
   103c0:	e0bfff17 	ldw	r2,-4(fp)
   103c4:	10c00015 	stw	r3,0(r2)

	// Update the read pointer
	readp += UNIT_SIZE;
   103c8:	d0a01017 	ldw	r2,-32704(gp)
   103cc:	10800104 	addi	r2,r2,4
   103d0:	d0a01015 	stw	r2,-32704(gp)
	if(readp==(CAPACITY*UNIT_SIZE)+STARTP){
   103d4:	d0a01017 	ldw	r2,-32704(gp)
   103d8:	10801318 	cmpnei	r2,r2,76
   103dc:	1000021e 	bne	r2,zero,103e8 <READ_FIFO_1+0x74>
		readp = STARTP;
   103e0:	00800304 	movi	r2,12
   103e4:	d0a01015 	stw	r2,-32704(gp)
	}

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - 0x1);
   103e8:	d0a01317 	ldw	r2,-32692(gp)
   103ec:	1007883a 	mov	r3,r2
   103f0:	008000f4 	movhi	r2,3
   103f4:	10801204 	addi	r2,r2,72
   103f8:	1885883a 	add	r2,r3,r2
   103fc:	d0e01317 	ldw	r3,-32692(gp)
   10400:	1809883a 	mov	r4,r3
   10404:	00c000f4 	movhi	r3,3
   10408:	18c01204 	addi	r3,r3,72
   1040c:	20c7883a 	add	r3,r4,r3
   10410:	18c00037 	ldwio	r3,0(r3)
   10414:	18ffffc4 	addi	r3,r3,-1
   10418:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   1041c:	d0a01317 	ldw	r2,-32692(gp)
   10420:	1007883a 	mov	r3,r2
   10424:	008000f4 	movhi	r2,3
   10428:	10801204 	addi	r2,r2,72
   1042c:	1885883a 	add	r2,r3,r2
   10430:	10800037 	ldwio	r2,0(r2)
   10434:	10800418 	cmpnei	r2,r2,16
   10438:	1000081e 	bne	r2,zero,1045c <READ_FIFO_1+0xe8>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   1043c:	d0a01117 	ldw	r2,-32700(gp)
   10440:	1007883a 	mov	r3,r2
   10444:	008000f4 	movhi	r2,3
   10448:	10801204 	addi	r2,r2,72
   1044c:	1885883a 	add	r2,r3,r2
   10450:	00c00044 	movi	r3,1
   10454:	10c00035 	stwio	r3,0(r2)
   10458:	00000706 	br	10478 <READ_FIFO_1+0x104>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   1045c:	d0a01117 	ldw	r2,-32700(gp)
   10460:	1007883a 	mov	r3,r2
   10464:	008000f4 	movhi	r2,3
   10468:	10801204 	addi	r2,r2,72
   1046c:	1885883a 	add	r2,r3,r2
   10470:	0007883a 	mov	r3,zero
   10474:	10c00035 	stwio	r3,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   10478:	d0a01317 	ldw	r2,-32692(gp)
   1047c:	1007883a 	mov	r3,r2
   10480:	008000f4 	movhi	r2,3
   10484:	10801204 	addi	r2,r2,72
   10488:	1885883a 	add	r2,r3,r2
   1048c:	10800037 	ldwio	r2,0(r2)
   10490:	1000081e 	bne	r2,zero,104b4 <READ_FIFO_1+0x140>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   10494:	d0a01217 	ldw	r2,-32696(gp)
   10498:	1007883a 	mov	r3,r2
   1049c:	008000f4 	movhi	r2,3
   104a0:	10801204 	addi	r2,r2,72
   104a4:	1885883a 	add	r2,r3,r2
   104a8:	00c00044 	movi	r3,1
   104ac:	10c00035 	stwio	r3,0(r2)
   104b0:	00000706 	br	104d0 <READ_FIFO_1+0x15c>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   104b4:	d0a01217 	ldw	r2,-32696(gp)
   104b8:	1007883a 	mov	r3,r2
   104bc:	008000f4 	movhi	r2,3
   104c0:	10801204 	addi	r2,r2,72
   104c4:	1885883a 	add	r2,r3,r2
   104c8:	0007883a 	mov	r3,zero
   104cc:	10c00035 	stwio	r3,0(r2)
	}
}
   104d0:	e037883a 	mov	sp,fp
   104d4:	df000017 	ldw	fp,0(sp)
   104d8:	dec00104 	addi	sp,sp,4
   104dc:	f800283a 	ret

000104e0 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
   104e0:	deffff04 	addi	sp,sp,-4
   104e4:	df000015 	stw	fp,0(sp)
   104e8:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   104ec:	00800304 	movi	r2,12
   104f0:	d0a00f15 	stw	r2,-32708(gp)
	readp  = STARTP;
   104f4:	00800304 	movi	r2,12
   104f8:	d0a01015 	stw	r2,-32704(gp)
	fullp   = 0x0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   104fc:	d0201115 	stw	zero,-32700(gp)
	emptyp   = fullp + UNIT_SIZE;
   10500:	d0a01117 	ldw	r2,-32700(gp)
   10504:	10800104 	addi	r2,r2,4
   10508:	d0a01215 	stw	r2,-32696(gp)
	countp  = emptyp + UNIT_SIZE;
   1050c:	d0a01217 	ldw	r2,-32696(gp)
   10510:	10800104 	addi	r2,r2,4
   10514:	d0a01315 	stw	r2,-32692(gp)
	// Assigning values for the flags.
	//IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
	//IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
	//IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start

}
   10518:	e037883a 	mov	sp,fp
   1051c:	df000017 	ldw	fp,0(sp)
   10520:	dec00104 	addi	sp,sp,4
   10524:	f800283a 	ret

00010528 <main>:
void delay(int n);
int consumer();


int main()
{
   10528:	defffc04 	addi	sp,sp,-16
   1052c:	dfc00315 	stw	ra,12(sp)
   10530:	df000215 	stw	fp,8(sp)
   10534:	df000204 	addi	fp,sp,8
	alt_u32 sw_fast_timeA, sw_fast_timeB;
	sw_fast_timeA = alt_timestamp();
   10538:	001af6c0 	call	1af6c <alt_timestamp>
   1053c:	e0bffe15 	stw	r2,-8(fp)
	consumer();
   10540:	001056c0 	call	1056c <consumer>
	sw_fast_timeB = alt_timestamp();
   10544:	001af6c0 	call	1af6c <alt_timestamp>
   10548:	e0bfff15 	stw	r2,-4(fp)

	printf("Time for Read operation: %lu\n",(unsigned long)(sw_fast_timeB-sw_fast_timeA));
   1054c:	e0ffff17 	ldw	r3,-4(fp)
   10550:	e0bffe17 	ldw	r2,-8(fp)
   10554:	1885c83a 	sub	r2,r3,r2
   10558:	010000f4 	movhi	r4,3
   1055c:	21200004 	addi	r4,r4,-32768
   10560:	100b883a 	mov	r5,r2
   10564:	001066c0 	call	1066c <printf>
	
	while(1) { }
   10568:	003fff06 	br	10568 <main+0x40>

0001056c <consumer>:
	return 0;
}


int consumer()
{
   1056c:	defffc04 	addi	sp,sp,-16
   10570:	dfc00315 	stw	ra,12(sp)
   10574:	df000215 	stw	fp,8(sp)
   10578:	df000204 	addi	fp,sp,8
	alt_u32 hw_fast_timeA, hw_fast_timeB;
	printf("Consumer starting..\n");
   1057c:	010000f4 	movhi	r4,3
   10580:	21200804 	addi	r4,r4,-32736
   10584:	001072c0 	call	1072c <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
   10588:	00104e00 	call	104e0 <FIFO_1_INIT>

	int j = 0;
   1058c:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   10590:	00800144 	movi	r2,5
   10594:	e0bffe15 	stw	r2,-8(fp)
	while(k<500)
   10598:	00000d06 	br	105d0 <consumer+0x64>
	{
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
   1059c:	e0bfff04 	addi	r2,fp,-4
   105a0:	1009883a 	mov	r4,r2
   105a4:	00103740 	call	10374 <READ_FIFO_1>
		/*if(j==k)*/
			printf("Consumer succefully received [%i]\t%x\n",j,readp);
   105a8:	e0ffff17 	ldw	r3,-4(fp)
   105ac:	d0a01017 	ldw	r2,-32704(gp)
   105b0:	010000f4 	movhi	r4,3
   105b4:	21200d04 	addi	r4,r4,-32716
   105b8:	180b883a 	mov	r5,r3
   105bc:	100d883a 	mov	r6,r2
   105c0:	001066c0 	call	1066c <printf>


		k+=10;
   105c4:	e0bffe17 	ldw	r2,-8(fp)
   105c8:	10800284 	addi	r2,r2,10
   105cc:	e0bffe15 	stw	r2,-8(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
   105d0:	e0bffe17 	ldw	r2,-8(fp)
   105d4:	10807d10 	cmplti	r2,r2,500
   105d8:	103ff01e 	bne	r2,zero,1059c <consumer+0x30>
			printf("Consumer succefully received [%i]\t%x\n",j,readp);


		k+=10;
	}
	printf("Consumer finished..\n");
   105dc:	010000f4 	movhi	r4,3
   105e0:	21201704 	addi	r4,r4,-32676
   105e4:	001072c0 	call	1072c <puts>
	return 0;
   105e8:	0005883a 	mov	r2,zero
}
   105ec:	e037883a 	mov	sp,fp
   105f0:	dfc00117 	ldw	ra,4(sp)
   105f4:	df000017 	ldw	fp,0(sp)
   105f8:	dec00204 	addi	sp,sp,8
   105fc:	f800283a 	ret

00010600 <delay>:


void delay(int n)
{
   10600:	defffd04 	addi	sp,sp,-12
   10604:	df000215 	stw	fp,8(sp)
   10608:	df000204 	addi	fp,sp,8
   1060c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   10610:	e0bfff17 	ldw	r2,-4(fp)
   10614:	e0bffe15 	stw	r2,-8(fp)
   10618:	00000306 	br	10628 <delay+0x28>
   1061c:	e0bffe17 	ldw	r2,-8(fp)
   10620:	10bfffc4 	addi	r2,r2,-1
   10624:	e0bffe15 	stw	r2,-8(fp)
   10628:	e0bffe17 	ldw	r2,-8(fp)
   1062c:	00bffb16 	blt	zero,r2,1061c <delay+0x1c>
	{
		continue;
	}
}
   10630:	e037883a 	mov	sp,fp
   10634:	df000017 	ldw	fp,0(sp)
   10638:	dec00104 	addi	sp,sp,4
   1063c:	f800283a 	ret

00010640 <_printf_r>:
   10640:	defffd04 	addi	sp,sp,-12
   10644:	dfc00015 	stw	ra,0(sp)
   10648:	d9800115 	stw	r6,4(sp)
   1064c:	d9c00215 	stw	r7,8(sp)
   10650:	280d883a 	mov	r6,r5
   10654:	21400217 	ldw	r5,8(r4)
   10658:	d9c00104 	addi	r7,sp,4
   1065c:	00108000 	call	10800 <___vfprintf_internal_r>
   10660:	dfc00017 	ldw	ra,0(sp)
   10664:	dec00304 	addi	sp,sp,12
   10668:	f800283a 	ret

0001066c <printf>:
   1066c:	defffc04 	addi	sp,sp,-16
   10670:	dfc00015 	stw	ra,0(sp)
   10674:	d9400115 	stw	r5,4(sp)
   10678:	d9800215 	stw	r6,8(sp)
   1067c:	d9c00315 	stw	r7,12(sp)
   10680:	008000f4 	movhi	r2,3
   10684:	10a76e04 	addi	r2,r2,-25160
   10688:	10800017 	ldw	r2,0(r2)
   1068c:	200b883a 	mov	r5,r4
   10690:	d9800104 	addi	r6,sp,4
   10694:	11000217 	ldw	r4,8(r2)
   10698:	00125f80 	call	125f8 <__vfprintf_internal>
   1069c:	dfc00017 	ldw	ra,0(sp)
   106a0:	dec00404 	addi	sp,sp,16
   106a4:	f800283a 	ret

000106a8 <_puts_r>:
   106a8:	defff604 	addi	sp,sp,-40
   106ac:	dc400815 	stw	r17,32(sp)
   106b0:	2023883a 	mov	r17,r4
   106b4:	2809883a 	mov	r4,r5
   106b8:	dc000715 	stw	r16,28(sp)
   106bc:	dfc00915 	stw	ra,36(sp)
   106c0:	2821883a 	mov	r16,r5
   106c4:	00107400 	call	10740 <strlen>
   106c8:	10c00044 	addi	r3,r2,1
   106cc:	d8800115 	stw	r2,4(sp)
   106d0:	89400217 	ldw	r5,8(r17)
   106d4:	008000f4 	movhi	r2,3
   106d8:	10a01c04 	addi	r2,r2,-32656
   106dc:	d8800215 	stw	r2,8(sp)
   106e0:	00800044 	movi	r2,1
   106e4:	d8800315 	stw	r2,12(sp)
   106e8:	8809883a 	mov	r4,r17
   106ec:	00800084 	movi	r2,2
   106f0:	d9800404 	addi	r6,sp,16
   106f4:	dc000015 	stw	r16,0(sp)
   106f8:	d8c00615 	stw	r3,24(sp)
   106fc:	dec00415 	stw	sp,16(sp)
   10700:	d8800515 	stw	r2,20(sp)
   10704:	00148b00 	call	148b0 <__sfvwrite_r>
   10708:	1000061e 	bne	r2,zero,10724 <_puts_r+0x7c>
   1070c:	00800284 	movi	r2,10
   10710:	dfc00917 	ldw	ra,36(sp)
   10714:	dc400817 	ldw	r17,32(sp)
   10718:	dc000717 	ldw	r16,28(sp)
   1071c:	dec00a04 	addi	sp,sp,40
   10720:	f800283a 	ret
   10724:	00bfffc4 	movi	r2,-1
   10728:	003ff906 	br	10710 <_puts_r+0x68>

0001072c <puts>:
   1072c:	008000f4 	movhi	r2,3
   10730:	10a76e04 	addi	r2,r2,-25160
   10734:	200b883a 	mov	r5,r4
   10738:	11000017 	ldw	r4,0(r2)
   1073c:	00106a81 	jmpi	106a8 <_puts_r>

00010740 <strlen>:
   10740:	208000cc 	andi	r2,r4,3
   10744:	10001f1e 	bne	r2,zero,107c4 <strlen+0x84>
   10748:	20800017 	ldw	r2,0(r4)
   1074c:	01ffbff4 	movhi	r7,65279
   10750:	39ffbfc4 	addi	r7,r7,-257
   10754:	01a02074 	movhi	r6,32897
   10758:	31a02004 	addi	r6,r6,-32640
   1075c:	11c7883a 	add	r3,r2,r7
   10760:	0084303a 	nor	r2,zero,r2
   10764:	1886703a 	and	r3,r3,r2
   10768:	1986703a 	and	r3,r3,r6
   1076c:	2005883a 	mov	r2,r4
   10770:	1800101e 	bne	r3,zero,107b4 <strlen+0x74>
   10774:	10800104 	addi	r2,r2,4
   10778:	10c00017 	ldw	r3,0(r2)
   1077c:	19cb883a 	add	r5,r3,r7
   10780:	00c6303a 	nor	r3,zero,r3
   10784:	28c6703a 	and	r3,r5,r3
   10788:	1986703a 	and	r3,r3,r6
   1078c:	1800091e 	bne	r3,zero,107b4 <strlen+0x74>
   10790:	10800104 	addi	r2,r2,4
   10794:	10c00017 	ldw	r3,0(r2)
   10798:	19cb883a 	add	r5,r3,r7
   1079c:	00c6303a 	nor	r3,zero,r3
   107a0:	28c6703a 	and	r3,r5,r3
   107a4:	1986703a 	and	r3,r3,r6
   107a8:	183ff226 	beq	r3,zero,10774 <strlen+0x34>
   107ac:	00000106 	br	107b4 <strlen+0x74>
   107b0:	10800044 	addi	r2,r2,1
   107b4:	10c00007 	ldb	r3,0(r2)
   107b8:	183ffd1e 	bne	r3,zero,107b0 <strlen+0x70>
   107bc:	1105c83a 	sub	r2,r2,r4
   107c0:	f800283a 	ret
   107c4:	2005883a 	mov	r2,r4
   107c8:	003ffa06 	br	107b4 <strlen+0x74>

000107cc <__sprint_r>:
   107cc:	30800217 	ldw	r2,8(r6)
   107d0:	defffe04 	addi	sp,sp,-8
   107d4:	dc000015 	stw	r16,0(sp)
   107d8:	dfc00115 	stw	ra,4(sp)
   107dc:	3021883a 	mov	r16,r6
   107e0:	10000226 	beq	r2,zero,107ec <__sprint_r+0x20>
   107e4:	00148b00 	call	148b0 <__sfvwrite_r>
   107e8:	80000215 	stw	zero,8(r16)
   107ec:	80000115 	stw	zero,4(r16)
   107f0:	dfc00117 	ldw	ra,4(sp)
   107f4:	dc000017 	ldw	r16,0(sp)
   107f8:	dec00204 	addi	sp,sp,8
   107fc:	f800283a 	ret

00010800 <___vfprintf_internal_r>:
   10800:	defeb904 	addi	sp,sp,-1308
   10804:	dc013d15 	stw	r16,1268(sp)
   10808:	d9013015 	stw	r4,1216(sp)
   1080c:	dfc14615 	stw	ra,1304(sp)
   10810:	df014515 	stw	fp,1300(sp)
   10814:	ddc14415 	stw	r23,1296(sp)
   10818:	dd814315 	stw	r22,1292(sp)
   1081c:	dd414215 	stw	r21,1288(sp)
   10820:	dd014115 	stw	r20,1284(sp)
   10824:	dcc14015 	stw	r19,1280(sp)
   10828:	dc813f15 	stw	r18,1276(sp)
   1082c:	dc413e15 	stw	r17,1272(sp)
   10830:	d9412915 	stw	r5,1188(sp)
   10834:	3021883a 	mov	r16,r6
   10838:	d9c12d15 	stw	r7,1204(sp)
   1083c:	0014f9c0 	call	14f9c <_localeconv_r>
   10840:	10800017 	ldw	r2,0(r2)
   10844:	d9013017 	ldw	r4,1216(sp)
   10848:	d8013315 	stw	zero,1228(sp)
   1084c:	d8813715 	stw	r2,1244(sp)
   10850:	d8013415 	stw	zero,1232(sp)
   10854:	20000226 	beq	r4,zero,10860 <___vfprintf_internal_r+0x60>
   10858:	20800e17 	ldw	r2,56(r4)
   1085c:	10019826 	beq	r2,zero,10ec0 <___vfprintf_internal_r+0x6c0>
   10860:	da012917 	ldw	r8,1188(sp)
   10864:	4080030b 	ldhu	r2,12(r8)
   10868:	10c0020c 	andi	r3,r2,8
   1086c:	18ffffcc 	andi	r3,r3,65535
   10870:	18e0001c 	xori	r3,r3,32768
   10874:	18e00004 	addi	r3,r3,-32768
   10878:	18013a26 	beq	r3,zero,10d64 <___vfprintf_internal_r+0x564>
   1087c:	40c00417 	ldw	r3,16(r8)
   10880:	18013826 	beq	r3,zero,10d64 <___vfprintf_internal_r+0x564>
   10884:	1100068c 	andi	r4,r2,26
   10888:	00c00284 	movi	r3,10
   1088c:	20c13e26 	beq	r4,r3,10d88 <___vfprintf_internal_r+0x588>
   10890:	da010dc4 	addi	r8,sp,1079
   10894:	d8800404 	addi	r2,sp,16
   10898:	da012615 	stw	r8,1176(sp)
   1089c:	d8811b15 	stw	r2,1132(sp)
   108a0:	1013883a 	mov	r9,r2
   108a4:	d8812617 	ldw	r2,1176(sp)
   108a8:	da010e04 	addi	r8,sp,1080
   108ac:	dc413017 	ldw	r17,1216(sp)
   108b0:	da012715 	stw	r8,1180(sp)
   108b4:	4091c83a 	sub	r8,r8,r2
   108b8:	d8011d15 	stw	zero,1140(sp)
   108bc:	d8011c15 	stw	zero,1136(sp)
   108c0:	802b883a 	mov	r21,r16
   108c4:	d8013215 	stw	zero,1224(sp)
   108c8:	d8013615 	stw	zero,1240(sp)
   108cc:	d8013515 	stw	zero,1236(sp)
   108d0:	d8012c15 	stw	zero,1200(sp)
   108d4:	da013915 	stw	r8,1252(sp)
   108d8:	a8800007 	ldb	r2,0(r21)
   108dc:	1002ec26 	beq	r2,zero,11490 <___vfprintf_internal_r+0xc90>
   108e0:	00c00944 	movi	r3,37
   108e4:	a825883a 	mov	r18,r21
   108e8:	10c0021e 	bne	r2,r3,108f4 <___vfprintf_internal_r+0xf4>
   108ec:	00001406 	br	10940 <___vfprintf_internal_r+0x140>
   108f0:	10c00326 	beq	r2,r3,10900 <___vfprintf_internal_r+0x100>
   108f4:	94800044 	addi	r18,r18,1
   108f8:	90800007 	ldb	r2,0(r18)
   108fc:	103ffc1e 	bne	r2,zero,108f0 <___vfprintf_internal_r+0xf0>
   10900:	9561c83a 	sub	r16,r18,r21
   10904:	80000e26 	beq	r16,zero,10940 <___vfprintf_internal_r+0x140>
   10908:	da011d17 	ldw	r8,1140(sp)
   1090c:	d8c11c17 	ldw	r3,1136(sp)
   10910:	4d400015 	stw	r21,0(r9)
   10914:	4c000115 	stw	r16,4(r9)
   10918:	4411883a 	add	r8,r8,r16
   1091c:	18c00044 	addi	r3,r3,1
   10920:	da011d15 	stw	r8,1140(sp)
   10924:	d8c11c15 	stw	r3,1136(sp)
   10928:	008001c4 	movi	r2,7
   1092c:	10c15d16 	blt	r2,r3,10ea4 <___vfprintf_internal_r+0x6a4>
   10930:	4a400204 	addi	r9,r9,8
   10934:	d8812c17 	ldw	r2,1200(sp)
   10938:	1405883a 	add	r2,r2,r16
   1093c:	d8812c15 	stw	r2,1200(sp)
   10940:	90800007 	ldb	r2,0(r18)
   10944:	10013b26 	beq	r2,zero,10e34 <___vfprintf_internal_r+0x634>
   10948:	95400044 	addi	r21,r18,1
   1094c:	94800047 	ldb	r18,1(r18)
   10950:	d8012585 	stb	zero,1174(sp)
   10954:	073fffc4 	movi	fp,-1
   10958:	d8012e15 	stw	zero,1208(sp)
   1095c:	0021883a 	mov	r16,zero
   10960:	00c01604 	movi	r3,88
   10964:	01400244 	movi	r5,9
   10968:	02800a84 	movi	r10,42
   1096c:	01c01b04 	movi	r7,108
   10970:	01800ac4 	movi	r6,43
   10974:	02c00804 	movi	r11,32
   10978:	ad400044 	addi	r21,r21,1
   1097c:	90bff804 	addi	r2,r18,-32
   10980:	1880092e 	bgeu	r3,r2,109a8 <___vfprintf_internal_r+0x1a8>
   10984:	90012b26 	beq	r18,zero,10e34 <___vfprintf_internal_r+0x634>
   10988:	00c00044 	movi	r3,1
   1098c:	d8c12815 	stw	r3,1184(sp)
   10990:	dc810405 	stb	r18,1040(sp)
   10994:	d8012585 	stb	zero,1174(sp)
   10998:	d8c12b15 	stw	r3,1196(sp)
   1099c:	dcc10404 	addi	r19,sp,1040
   109a0:	d8013115 	stw	zero,1220(sp)
   109a4:	00008806 	br	10bc8 <___vfprintf_internal_r+0x3c8>
   109a8:	1085883a 	add	r2,r2,r2
   109ac:	1085883a 	add	r2,r2,r2
   109b0:	01000074 	movhi	r4,1
   109b4:	21027104 	addi	r4,r4,2500
   109b8:	1105883a 	add	r2,r2,r4
   109bc:	10800017 	ldw	r2,0(r2)
   109c0:	1000683a 	jmp	r2
   109c4:	00010f78 	rdprs	zero,zero,1085
   109c8:	00010984 	movi	zero,1062
   109cc:	00010984 	movi	zero,1062
   109d0:	00010f8c 	andi	zero,zero,1086
   109d4:	00010984 	movi	zero,1062
   109d8:	00010984 	movi	zero,1062
   109dc:	00010984 	movi	zero,1062
   109e0:	00010984 	movi	zero,1062
   109e4:	00010984 	movi	zero,1062
   109e8:	00010984 	movi	zero,1062
   109ec:	00011074 	movhi	zero,1089
   109f0:	00010f30 	cmpltui	zero,zero,1084
   109f4:	00010984 	movi	zero,1062
   109f8:	00010d58 	cmpnei	zero,zero,1077
   109fc:	00010f3c 	xorhi	zero,zero,1084
   10a00:	00010984 	movi	zero,1062
   10a04:	00010f98 	cmpnei	zero,zero,1086
   10a08:	00011098 	cmpnei	zero,zero,1090
   10a0c:	00011098 	cmpnei	zero,zero,1090
   10a10:	00011098 	cmpnei	zero,zero,1090
   10a14:	00011098 	cmpnei	zero,zero,1090
   10a18:	00011098 	cmpnei	zero,zero,1090
   10a1c:	00011098 	cmpnei	zero,zero,1090
   10a20:	00011098 	cmpnei	zero,zero,1090
   10a24:	00011098 	cmpnei	zero,zero,1090
   10a28:	00011098 	cmpnei	zero,zero,1090
   10a2c:	00010984 	movi	zero,1062
   10a30:	00010984 	movi	zero,1062
   10a34:	00010984 	movi	zero,1062
   10a38:	00010984 	movi	zero,1062
   10a3c:	00010984 	movi	zero,1062
   10a40:	00010984 	movi	zero,1062
   10a44:	00010984 	movi	zero,1062
   10a48:	00010984 	movi	zero,1062
   10a4c:	00010984 	movi	zero,1062
   10a50:	00010984 	movi	zero,1062
   10a54:	00010cf4 	movhi	zero,1075
   10a58:	000110c0 	call	110c <__alt_mem_ins_mem1-0xeef4>
   10a5c:	00010984 	movi	zero,1062
   10a60:	000110c0 	call	110c <__alt_mem_ins_mem1-0xeef4>
   10a64:	00010984 	movi	zero,1062
   10a68:	00010984 	movi	zero,1062
   10a6c:	00010984 	movi	zero,1062
   10a70:	00010984 	movi	zero,1062
   10a74:	00011230 	cmpltui	zero,zero,1096
   10a78:	00010984 	movi	zero,1062
   10a7c:	00010984 	movi	zero,1062
   10a80:	00010cbc 	xorhi	zero,zero,1074
   10a84:	00010984 	movi	zero,1062
   10a88:	00010984 	movi	zero,1062
   10a8c:	00010984 	movi	zero,1062
   10a90:	00010984 	movi	zero,1062
   10a94:	00010984 	movi	zero,1062
   10a98:	00010b28 	cmpgeui	zero,zero,1068
   10a9c:	00010984 	movi	zero,1062
   10aa0:	00010984 	movi	zero,1062
   10aa4:	00010fa4 	muli	zero,zero,1086
   10aa8:	00010984 	movi	zero,1062
   10aac:	00010984 	movi	zero,1062
   10ab0:	00010984 	movi	zero,1062
   10ab4:	00010984 	movi	zero,1062
   10ab8:	00010984 	movi	zero,1062
   10abc:	00010984 	movi	zero,1062
   10ac0:	00010984 	movi	zero,1062
   10ac4:	00010984 	movi	zero,1062
   10ac8:	00010984 	movi	zero,1062
   10acc:	00010984 	movi	zero,1062
   10ad0:	00011018 	cmpnei	zero,zero,1088
   10ad4:	00010cf8 	rdprs	zero,zero,1075
   10ad8:	000110c0 	call	110c <__alt_mem_ins_mem1-0xeef4>
   10adc:	000110c0 	call	110c <__alt_mem_ins_mem1-0xeef4>
   10ae0:	000110c0 	call	110c <__alt_mem_ins_mem1-0xeef4>
   10ae4:	00010ff8 	rdprs	zero,zero,1087
   10ae8:	00010cf8 	rdprs	zero,zero,1075
   10aec:	00010984 	movi	zero,1062
   10af0:	00010984 	movi	zero,1062
   10af4:	00011004 	movi	zero,1088
   10af8:	00010984 	movi	zero,1062
   10afc:	00011048 	cmpgei	zero,zero,1089
   10b00:	00010cc0 	call	10cc <__alt_mem_ins_mem1-0xef34>
   10b04:	00011148 	cmpgei	zero,zero,1093
   10b08:	00011194 	movui	zero,1094
   10b0c:	00010984 	movi	zero,1062
   10b10:	000111a0 	cmpeqi	zero,zero,1094
   10b14:	00010984 	movi	zero,1062
   10b18:	00010b2c 	andhi	zero,zero,1068
   10b1c:	00010984 	movi	zero,1062
   10b20:	00010984 	movi	zero,1062
   10b24:	000111fc 	xorhi	zero,zero,1095
   10b28:	84000414 	ori	r16,r16,16
   10b2c:	8080080c 	andi	r2,r16,32
   10b30:	1000f51e 	bne	r2,zero,10f08 <___vfprintf_internal_r+0x708>
   10b34:	8080040c 	andi	r2,r16,16
   10b38:	10042c26 	beq	r2,zero,11bec <___vfprintf_internal_r+0x13ec>
   10b3c:	da012d17 	ldw	r8,1204(sp)
   10b40:	002d883a 	mov	r22,zero
   10b44:	00c00044 	movi	r3,1
   10b48:	45c00017 	ldw	r23,0(r8)
   10b4c:	42000104 	addi	r8,r8,4
   10b50:	da012d15 	stw	r8,1204(sp)
   10b54:	b805883a 	mov	r2,r23
   10b58:	d8012585 	stb	zero,1174(sp)
   10b5c:	e0000216 	blt	fp,zero,10b68 <___vfprintf_internal_r+0x368>
   10b60:	013fdfc4 	movi	r4,-129
   10b64:	8120703a 	and	r16,r16,r4
   10b68:	1002671e 	bne	r2,zero,11508 <___vfprintf_internal_r+0xd08>
   10b6c:	e002661e 	bne	fp,zero,11508 <___vfprintf_internal_r+0xd08>
   10b70:	18c03fcc 	andi	r3,r3,255
   10b74:	1803561e 	bne	r3,zero,118d0 <___vfprintf_internal_r+0x10d0>
   10b78:	8080004c 	andi	r2,r16,1
   10b7c:	10035426 	beq	r2,zero,118d0 <___vfprintf_internal_r+0x10d0>
   10b80:	da013917 	ldw	r8,1252(sp)
   10b84:	00800c04 	movi	r2,48
   10b88:	d8810dc5 	stb	r2,1079(sp)
   10b8c:	da012b15 	stw	r8,1196(sp)
   10b90:	dcc10dc4 	addi	r19,sp,1079
   10b94:	d8812b17 	ldw	r2,1196(sp)
   10b98:	d8812815 	stw	r2,1184(sp)
   10b9c:	1700010e 	bge	r2,fp,10ba4 <___vfprintf_internal_r+0x3a4>
   10ba0:	df012815 	stw	fp,1184(sp)
   10ba4:	d8812583 	ldbu	r2,1174(sp)
   10ba8:	df013115 	stw	fp,1220(sp)
   10bac:	10803fcc 	andi	r2,r2,255
   10bb0:	1080201c 	xori	r2,r2,128
   10bb4:	10bfe004 	addi	r2,r2,-128
   10bb8:	10000326 	beq	r2,zero,10bc8 <___vfprintf_internal_r+0x3c8>
   10bbc:	da012817 	ldw	r8,1184(sp)
   10bc0:	42000044 	addi	r8,r8,1
   10bc4:	da012815 	stw	r8,1184(sp)
   10bc8:	80c0008c 	andi	r3,r16,2
   10bcc:	d8c12a15 	stw	r3,1192(sp)
   10bd0:	18000326 	beq	r3,zero,10be0 <___vfprintf_internal_r+0x3e0>
   10bd4:	da012817 	ldw	r8,1184(sp)
   10bd8:	42000084 	addi	r8,r8,2
   10bdc:	da012815 	stw	r8,1184(sp)
   10be0:	80c0210c 	andi	r3,r16,132
   10be4:	d8c12f15 	stw	r3,1212(sp)
   10be8:	1801941e 	bne	r3,zero,1123c <___vfprintf_internal_r+0xa3c>
   10bec:	da012e17 	ldw	r8,1208(sp)
   10bf0:	d8c12817 	ldw	r3,1184(sp)
   10bf4:	40edc83a 	sub	r22,r8,r3
   10bf8:	0581900e 	bge	zero,r22,1123c <___vfprintf_internal_r+0xa3c>
   10bfc:	02800404 	movi	r10,16
   10c00:	da011d17 	ldw	r8,1140(sp)
   10c04:	d8c11c17 	ldw	r3,1136(sp)
   10c08:	05c000f4 	movhi	r23,3
   10c0c:	bde02d84 	addi	r23,r23,-32586
   10c10:	5580200e 	bge	r10,r22,10c94 <___vfprintf_internal_r+0x494>
   10c14:	dc813815 	stw	r18,1248(sp)
   10c18:	5039883a 	mov	fp,r10
   10c1c:	b825883a 	mov	r18,r23
   10c20:	050001c4 	movi	r20,7
   10c24:	b02f883a 	mov	r23,r22
   10c28:	802d883a 	mov	r22,r16
   10c2c:	dc012917 	ldw	r16,1188(sp)
   10c30:	00000306 	br	10c40 <___vfprintf_internal_r+0x440>
   10c34:	bdfffc04 	addi	r23,r23,-16
   10c38:	4a400204 	addi	r9,r9,8
   10c3c:	e5c0110e 	bge	fp,r23,10c84 <___vfprintf_internal_r+0x484>
   10c40:	4c800015 	stw	r18,0(r9)
   10c44:	4f000115 	stw	fp,4(r9)
   10c48:	42000404 	addi	r8,r8,16
   10c4c:	18c00044 	addi	r3,r3,1
   10c50:	da011d15 	stw	r8,1140(sp)
   10c54:	d8c11c15 	stw	r3,1136(sp)
   10c58:	a0fff60e 	bge	r20,r3,10c34 <___vfprintf_internal_r+0x434>
   10c5c:	8809883a 	mov	r4,r17
   10c60:	800b883a 	mov	r5,r16
   10c64:	d9811b04 	addi	r6,sp,1132
   10c68:	00107cc0 	call	107cc <__sprint_r>
   10c6c:	1000771e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   10c70:	bdfffc04 	addi	r23,r23,-16
   10c74:	da011d17 	ldw	r8,1140(sp)
   10c78:	d8c11c17 	ldw	r3,1136(sp)
   10c7c:	da400404 	addi	r9,sp,16
   10c80:	e5ffef16 	blt	fp,r23,10c40 <___vfprintf_internal_r+0x440>
   10c84:	b021883a 	mov	r16,r22
   10c88:	b82d883a 	mov	r22,r23
   10c8c:	902f883a 	mov	r23,r18
   10c90:	dc813817 	ldw	r18,1248(sp)
   10c94:	4dc00015 	stw	r23,0(r9)
   10c98:	4d800115 	stw	r22,4(r9)
   10c9c:	4591883a 	add	r8,r8,r22
   10ca0:	18c00044 	addi	r3,r3,1
   10ca4:	da011d15 	stw	r8,1140(sp)
   10ca8:	d8c11c15 	stw	r3,1136(sp)
   10cac:	008001c4 	movi	r2,7
   10cb0:	10c36d16 	blt	r2,r3,11a68 <___vfprintf_internal_r+0x1268>
   10cb4:	4a400204 	addi	r9,r9,8
   10cb8:	00016206 	br	11244 <___vfprintf_internal_r+0xa44>
   10cbc:	84000414 	ori	r16,r16,16
   10cc0:	8080080c 	andi	r2,r16,32
   10cc4:	1000801e 	bne	r2,zero,10ec8 <___vfprintf_internal_r+0x6c8>
   10cc8:	8080040c 	andi	r2,r16,16
   10ccc:	1003da26 	beq	r2,zero,11c38 <___vfprintf_internal_r+0x1438>
   10cd0:	d8c12d17 	ldw	r3,1204(sp)
   10cd4:	002d883a 	mov	r22,zero
   10cd8:	1dc00017 	ldw	r23,0(r3)
   10cdc:	18c00104 	addi	r3,r3,4
   10ce0:	d8c12d15 	stw	r3,1204(sp)
   10ce4:	b805883a 	mov	r2,r23
   10ce8:	0007883a 	mov	r3,zero
   10cec:	d8012585 	stb	zero,1174(sp)
   10cf0:	003f9a06 	br	10b5c <___vfprintf_internal_r+0x35c>
   10cf4:	84000414 	ori	r16,r16,16
   10cf8:	8080080c 	andi	r2,r16,32
   10cfc:	10007b1e 	bne	r2,zero,10eec <___vfprintf_internal_r+0x6ec>
   10d00:	8080040c 	andi	r2,r16,16
   10d04:	1003ed26 	beq	r2,zero,11cbc <___vfprintf_internal_r+0x14bc>
   10d08:	d9012d17 	ldw	r4,1204(sp)
   10d0c:	25c00017 	ldw	r23,0(r4)
   10d10:	21000104 	addi	r4,r4,4
   10d14:	d9012d15 	stw	r4,1204(sp)
   10d18:	b82dd7fa 	srai	r22,r23,31
   10d1c:	b005883a 	mov	r2,r22
   10d20:	1003230e 	bge	r2,zero,119b0 <___vfprintf_internal_r+0x11b0>
   10d24:	05efc83a 	sub	r23,zero,r23
   10d28:	b804c03a 	cmpne	r2,r23,zero
   10d2c:	05adc83a 	sub	r22,zero,r22
   10d30:	b0adc83a 	sub	r22,r22,r2
   10d34:	00800b44 	movi	r2,45
   10d38:	d8812585 	stb	r2,1174(sp)
   10d3c:	00c00044 	movi	r3,1
   10d40:	bd84b03a 	or	r2,r23,r22
   10d44:	003f8506 	br	10b5c <___vfprintf_internal_r+0x35c>
   10d48:	da012e17 	ldw	r8,1208(sp)
   10d4c:	d8812d15 	stw	r2,1204(sp)
   10d50:	0211c83a 	sub	r8,zero,r8
   10d54:	da012e15 	stw	r8,1208(sp)
   10d58:	84000114 	ori	r16,r16,4
   10d5c:	ac800007 	ldb	r18,0(r21)
   10d60:	003f0506 	br	10978 <___vfprintf_internal_r+0x178>
   10d64:	d9013017 	ldw	r4,1216(sp)
   10d68:	d9412917 	ldw	r5,1188(sp)
   10d6c:	001261c0 	call	1261c <__swsetup_r>
   10d70:	10003d1e 	bne	r2,zero,10e68 <___vfprintf_internal_r+0x668>
   10d74:	d8c12917 	ldw	r3,1188(sp)
   10d78:	1880030b 	ldhu	r2,12(r3)
   10d7c:	00c00284 	movi	r3,10
   10d80:	1100068c 	andi	r4,r2,26
   10d84:	20fec21e 	bne	r4,r3,10890 <___vfprintf_internal_r+0x90>
   10d88:	d9012917 	ldw	r4,1188(sp)
   10d8c:	20c0038b 	ldhu	r3,14(r4)
   10d90:	193fffcc 	andi	r4,r3,65535
   10d94:	2120001c 	xori	r4,r4,32768
   10d98:	21200004 	addi	r4,r4,-32768
   10d9c:	203ebc16 	blt	r4,zero,10890 <___vfprintf_internal_r+0x90>
   10da0:	da012917 	ldw	r8,1188(sp)
   10da4:	d9013017 	ldw	r4,1216(sp)
   10da8:	d9c12d17 	ldw	r7,1204(sp)
   10dac:	42800717 	ldw	r10,28(r8)
   10db0:	42400917 	ldw	r9,36(r8)
   10db4:	10bfff4c 	andi	r2,r2,65533
   10db8:	02010004 	movi	r8,1024
   10dbc:	d881070d 	sth	r2,1052(sp)
   10dc0:	d9410404 	addi	r5,sp,1040
   10dc4:	d8800404 	addi	r2,sp,16
   10dc8:	800d883a 	mov	r6,r16
   10dcc:	d8c1078d 	sth	r3,1054(sp)
   10dd0:	da810b15 	stw	r10,1068(sp)
   10dd4:	da410d15 	stw	r9,1076(sp)
   10dd8:	d8810415 	stw	r2,1040(sp)
   10ddc:	d8810815 	stw	r2,1056(sp)
   10de0:	da010615 	stw	r8,1048(sp)
   10de4:	da010915 	stw	r8,1060(sp)
   10de8:	d8010a15 	stw	zero,1064(sp)
   10dec:	00108000 	call	10800 <___vfprintf_internal_r>
   10df0:	d8812c15 	stw	r2,1200(sp)
   10df4:	10000416 	blt	r2,zero,10e08 <___vfprintf_internal_r+0x608>
   10df8:	d9013017 	ldw	r4,1216(sp)
   10dfc:	d9410404 	addi	r5,sp,1040
   10e00:	0013fb40 	call	13fb4 <_fflush_r>
   10e04:	1005d81e 	bne	r2,zero,12568 <___vfprintf_internal_r+0x1d68>
   10e08:	d881070b 	ldhu	r2,1052(sp)
   10e0c:	1080100c 	andi	r2,r2,64
   10e10:	10bfffcc 	andi	r2,r2,65535
   10e14:	10a0001c 	xori	r2,r2,32768
   10e18:	10a00004 	addi	r2,r2,-32768
   10e1c:	10001426 	beq	r2,zero,10e70 <___vfprintf_internal_r+0x670>
   10e20:	d8c12917 	ldw	r3,1188(sp)
   10e24:	1880030b 	ldhu	r2,12(r3)
   10e28:	10801014 	ori	r2,r2,64
   10e2c:	1880030d 	sth	r2,12(r3)
   10e30:	00000f06 	br	10e70 <___vfprintf_internal_r+0x670>
   10e34:	d8811d17 	ldw	r2,1140(sp)
   10e38:	10000426 	beq	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   10e3c:	d9013017 	ldw	r4,1216(sp)
   10e40:	d9412917 	ldw	r5,1188(sp)
   10e44:	d9811b04 	addi	r6,sp,1132
   10e48:	00107cc0 	call	107cc <__sprint_r>
   10e4c:	d8c12917 	ldw	r3,1188(sp)
   10e50:	1880030b 	ldhu	r2,12(r3)
   10e54:	1080100c 	andi	r2,r2,64
   10e58:	10bfffcc 	andi	r2,r2,65535
   10e5c:	10a0001c 	xori	r2,r2,32768
   10e60:	10a00004 	addi	r2,r2,-32768
   10e64:	10000226 	beq	r2,zero,10e70 <___vfprintf_internal_r+0x670>
   10e68:	00bfffc4 	movi	r2,-1
   10e6c:	d8812c15 	stw	r2,1200(sp)
   10e70:	d8812c17 	ldw	r2,1200(sp)
   10e74:	dfc14617 	ldw	ra,1304(sp)
   10e78:	df014517 	ldw	fp,1300(sp)
   10e7c:	ddc14417 	ldw	r23,1296(sp)
   10e80:	dd814317 	ldw	r22,1292(sp)
   10e84:	dd414217 	ldw	r21,1288(sp)
   10e88:	dd014117 	ldw	r20,1284(sp)
   10e8c:	dcc14017 	ldw	r19,1280(sp)
   10e90:	dc813f17 	ldw	r18,1276(sp)
   10e94:	dc413e17 	ldw	r17,1272(sp)
   10e98:	dc013d17 	ldw	r16,1268(sp)
   10e9c:	dec14704 	addi	sp,sp,1308
   10ea0:	f800283a 	ret
   10ea4:	d9412917 	ldw	r5,1188(sp)
   10ea8:	8809883a 	mov	r4,r17
   10eac:	d9811b04 	addi	r6,sp,1132
   10eb0:	00107cc0 	call	107cc <__sprint_r>
   10eb4:	103fe51e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   10eb8:	da400404 	addi	r9,sp,16
   10ebc:	003e9d06 	br	10934 <___vfprintf_internal_r+0x134>
   10ec0:	001425c0 	call	1425c <__sinit>
   10ec4:	003e6606 	br	10860 <___vfprintf_internal_r+0x60>
   10ec8:	d8812d17 	ldw	r2,1204(sp)
   10ecc:	0007883a 	mov	r3,zero
   10ed0:	15c00017 	ldw	r23,0(r2)
   10ed4:	15800117 	ldw	r22,4(r2)
   10ed8:	10800204 	addi	r2,r2,8
   10edc:	d8812d15 	stw	r2,1204(sp)
   10ee0:	d8012585 	stb	zero,1174(sp)
   10ee4:	bd84b03a 	or	r2,r23,r22
   10ee8:	003f1c06 	br	10b5c <___vfprintf_internal_r+0x35c>
   10eec:	d8c12d17 	ldw	r3,1204(sp)
   10ef0:	18800117 	ldw	r2,4(r3)
   10ef4:	1dc00017 	ldw	r23,0(r3)
   10ef8:	18c00204 	addi	r3,r3,8
   10efc:	d8c12d15 	stw	r3,1204(sp)
   10f00:	102d883a 	mov	r22,r2
   10f04:	003f8606 	br	10d20 <___vfprintf_internal_r+0x520>
   10f08:	d8c12d17 	ldw	r3,1204(sp)
   10f0c:	d9012d17 	ldw	r4,1204(sp)
   10f10:	1dc00017 	ldw	r23,0(r3)
   10f14:	1d800117 	ldw	r22,4(r3)
   10f18:	21000204 	addi	r4,r4,8
   10f1c:	00c00044 	movi	r3,1
   10f20:	d9012d15 	stw	r4,1204(sp)
   10f24:	bd84b03a 	or	r2,r23,r22
   10f28:	d8012585 	stb	zero,1174(sp)
   10f2c:	003f0b06 	br	10b5c <___vfprintf_internal_r+0x35c>
   10f30:	d9812585 	stb	r6,1174(sp)
   10f34:	ac800007 	ldb	r18,0(r21)
   10f38:	003e8f06 	br	10978 <___vfprintf_internal_r+0x178>
   10f3c:	ac800007 	ldb	r18,0(r21)
   10f40:	a9000044 	addi	r4,r21,1
   10f44:	92857d26 	beq	r18,r10,1253c <___vfprintf_internal_r+0x1d3c>
   10f48:	90bff404 	addi	r2,r18,-48
   10f4c:	0039883a 	mov	fp,zero
   10f50:	28800736 	bltu	r5,r2,10f70 <___vfprintf_internal_r+0x770>
   10f54:	24800007 	ldb	r18,0(r4)
   10f58:	e70002a4 	muli	fp,fp,10
   10f5c:	21000044 	addi	r4,r4,1
   10f60:	1739883a 	add	fp,r2,fp
   10f64:	90bff404 	addi	r2,r18,-48
   10f68:	28bffa2e 	bgeu	r5,r2,10f54 <___vfprintf_internal_r+0x754>
   10f6c:	e0044216 	blt	fp,zero,12078 <___vfprintf_internal_r+0x1878>
   10f70:	202b883a 	mov	r21,r4
   10f74:	003e8106 	br	1097c <___vfprintf_internal_r+0x17c>
   10f78:	d8812587 	ldb	r2,1174(sp)
   10f7c:	1003581e 	bne	r2,zero,11ce0 <___vfprintf_internal_r+0x14e0>
   10f80:	dac12585 	stb	r11,1174(sp)
   10f84:	ac800007 	ldb	r18,0(r21)
   10f88:	003e7b06 	br	10978 <___vfprintf_internal_r+0x178>
   10f8c:	84000054 	ori	r16,r16,1
   10f90:	ac800007 	ldb	r18,0(r21)
   10f94:	003e7806 	br	10978 <___vfprintf_internal_r+0x178>
   10f98:	84002014 	ori	r16,r16,128
   10f9c:	ac800007 	ldb	r18,0(r21)
   10fa0:	003e7506 	br	10978 <___vfprintf_internal_r+0x178>
   10fa4:	020000f4 	movhi	r8,3
   10fa8:	42202104 	addi	r8,r8,-32636
   10fac:	da013615 	stw	r8,1240(sp)
   10fb0:	8080080c 	andi	r2,r16,32
   10fb4:	10009626 	beq	r2,zero,11210 <___vfprintf_internal_r+0xa10>
   10fb8:	d8812d17 	ldw	r2,1204(sp)
   10fbc:	15c00017 	ldw	r23,0(r2)
   10fc0:	15800117 	ldw	r22,4(r2)
   10fc4:	10800204 	addi	r2,r2,8
   10fc8:	d8812d15 	stw	r2,1204(sp)
   10fcc:	8080004c 	andi	r2,r16,1
   10fd0:	1002ae26 	beq	r2,zero,11a8c <___vfprintf_internal_r+0x128c>
   10fd4:	bd84b03a 	or	r2,r23,r22
   10fd8:	10032a26 	beq	r2,zero,11c84 <___vfprintf_internal_r+0x1484>
   10fdc:	00c00c04 	movi	r3,48
   10fe0:	d8c12505 	stb	r3,1172(sp)
   10fe4:	dc812545 	stb	r18,1173(sp)
   10fe8:	84000094 	ori	r16,r16,2
   10fec:	00c00084 	movi	r3,2
   10ff0:	d8012585 	stb	zero,1174(sp)
   10ff4:	003ed906 	br	10b5c <___vfprintf_internal_r+0x35c>
   10ff8:	84001014 	ori	r16,r16,64
   10ffc:	ac800007 	ldb	r18,0(r21)
   11000:	003e5d06 	br	10978 <___vfprintf_internal_r+0x178>
   11004:	ac800007 	ldb	r18,0(r21)
   11008:	a805883a 	mov	r2,r21
   1100c:	91c43226 	beq	r18,r7,120d8 <___vfprintf_internal_r+0x18d8>
   11010:	84000414 	ori	r16,r16,16
   11014:	003e5806 	br	10978 <___vfprintf_internal_r+0x178>
   11018:	d8c12d17 	ldw	r3,1204(sp)
   1101c:	02000044 	movi	r8,1
   11020:	da012815 	stw	r8,1184(sp)
   11024:	18800017 	ldw	r2,0(r3)
   11028:	18c00104 	addi	r3,r3,4
   1102c:	d8012585 	stb	zero,1174(sp)
   11030:	d8810405 	stb	r2,1040(sp)
   11034:	d8c12d15 	stw	r3,1204(sp)
   11038:	da012b15 	stw	r8,1196(sp)
   1103c:	dcc10404 	addi	r19,sp,1040
   11040:	d8013115 	stw	zero,1220(sp)
   11044:	003ee006 	br	10bc8 <___vfprintf_internal_r+0x3c8>
   11048:	8080080c 	andi	r2,r16,32
   1104c:	10031026 	beq	r2,zero,11c90 <___vfprintf_internal_r+0x1490>
   11050:	d9012d17 	ldw	r4,1204(sp)
   11054:	da012c17 	ldw	r8,1200(sp)
   11058:	20800017 	ldw	r2,0(r4)
   1105c:	4007d7fa 	srai	r3,r8,31
   11060:	21000104 	addi	r4,r4,4
   11064:	d9012d15 	stw	r4,1204(sp)
   11068:	12000015 	stw	r8,0(r2)
   1106c:	10c00115 	stw	r3,4(r2)
   11070:	003e1906 	br	108d8 <___vfprintf_internal_r+0xd8>
   11074:	da012d17 	ldw	r8,1204(sp)
   11078:	d9012d17 	ldw	r4,1204(sp)
   1107c:	42000017 	ldw	r8,0(r8)
   11080:	20800104 	addi	r2,r4,4
   11084:	da012e15 	stw	r8,1208(sp)
   11088:	403f2f16 	blt	r8,zero,10d48 <___vfprintf_internal_r+0x548>
   1108c:	d8812d15 	stw	r2,1204(sp)
   11090:	ac800007 	ldb	r18,0(r21)
   11094:	003e3806 	br	10978 <___vfprintf_internal_r+0x178>
   11098:	0009883a 	mov	r4,zero
   1109c:	90bff404 	addi	r2,r18,-48
   110a0:	ac800007 	ldb	r18,0(r21)
   110a4:	210002a4 	muli	r4,r4,10
   110a8:	ad400044 	addi	r21,r21,1
   110ac:	2089883a 	add	r4,r4,r2
   110b0:	90bff404 	addi	r2,r18,-48
   110b4:	28bffa2e 	bgeu	r5,r2,110a0 <___vfprintf_internal_r+0x8a0>
   110b8:	d9012e15 	stw	r4,1208(sp)
   110bc:	003e2f06 	br	1097c <___vfprintf_internal_r+0x17c>
   110c0:	8080020c 	andi	r2,r16,8
   110c4:	1002d426 	beq	r2,zero,11c18 <___vfprintf_internal_r+0x1418>
   110c8:	d8c12d17 	ldw	r3,1204(sp)
   110cc:	1d800017 	ldw	r22,0(r3)
   110d0:	1d000117 	ldw	r20,4(r3)
   110d4:	18c00204 	addi	r3,r3,8
   110d8:	d8c12d15 	stw	r3,1204(sp)
   110dc:	dd813315 	stw	r22,1228(sp)
   110e0:	dd013415 	stw	r20,1232(sp)
   110e4:	b009883a 	mov	r4,r22
   110e8:	a00b883a 	mov	r5,r20
   110ec:	da413c15 	stw	r9,1264(sp)
   110f0:	00172940 	call	17294 <__isinfd>
   110f4:	da413c17 	ldw	r9,1264(sp)
   110f8:	b009883a 	mov	r4,r22
   110fc:	a00b883a 	mov	r5,r20
   11100:	10035726 	beq	r2,zero,11e60 <___vfprintf_internal_r+0x1660>
   11104:	000d883a 	mov	r6,zero
   11108:	000f883a 	mov	r7,zero
   1110c:	0018f340 	call	18f34 <__ltdf2>
   11110:	da413c17 	ldw	r9,1264(sp)
   11114:	10041b16 	blt	r2,zero,12184 <___vfprintf_internal_r+0x1984>
   11118:	d8812583 	ldbu	r2,1174(sp)
   1111c:	00c011c4 	movi	r3,71
   11120:	1c830b16 	blt	r3,r18,11d50 <___vfprintf_internal_r+0x1550>
   11124:	04c000f4 	movhi	r19,3
   11128:	9ce01d04 	addi	r19,r19,-32652
   1112c:	020000c4 	movi	r8,3
   11130:	00ffdfc4 	movi	r3,-129
   11134:	da012815 	stw	r8,1184(sp)
   11138:	80e0703a 	and	r16,r16,r3
   1113c:	da012b15 	stw	r8,1196(sp)
   11140:	d8013115 	stw	zero,1220(sp)
   11144:	003e9906 	br	10bac <___vfprintf_internal_r+0x3ac>
   11148:	d8812d17 	ldw	r2,1204(sp)
   1114c:	d8c12d17 	ldw	r3,1204(sp)
   11150:	020000f4 	movhi	r8,3
   11154:	42202604 	addi	r8,r8,-32616
   11158:	15c00017 	ldw	r23,0(r2)
   1115c:	00800c04 	movi	r2,48
   11160:	18c00104 	addi	r3,r3,4
   11164:	d8812505 	stb	r2,1172(sp)
   11168:	00801e04 	movi	r2,120
   1116c:	d8812545 	stb	r2,1173(sp)
   11170:	d8c12d15 	stw	r3,1204(sp)
   11174:	002d883a 	mov	r22,zero
   11178:	84000094 	ori	r16,r16,2
   1117c:	da013615 	stw	r8,1240(sp)
   11180:	00c00084 	movi	r3,2
   11184:	04801e04 	movi	r18,120
   11188:	b805883a 	mov	r2,r23
   1118c:	d8012585 	stb	zero,1174(sp)
   11190:	003e7206 	br	10b5c <___vfprintf_internal_r+0x35c>
   11194:	84000814 	ori	r16,r16,32
   11198:	ac800007 	ldb	r18,0(r21)
   1119c:	003df606 	br	10978 <___vfprintf_internal_r+0x178>
   111a0:	d8812d17 	ldw	r2,1204(sp)
   111a4:	d8012585 	stb	zero,1174(sp)
   111a8:	14c00017 	ldw	r19,0(r2)
   111ac:	15c00104 	addi	r23,r2,4
   111b0:	98040126 	beq	r19,zero,121b8 <___vfprintf_internal_r+0x19b8>
   111b4:	9809883a 	mov	r4,r19
   111b8:	e003dd16 	blt	fp,zero,12130 <___vfprintf_internal_r+0x1930>
   111bc:	000b883a 	mov	r5,zero
   111c0:	e00d883a 	mov	r6,fp
   111c4:	da413c15 	stw	r9,1264(sp)
   111c8:	00158fc0 	call	158fc <memchr>
   111cc:	da413c17 	ldw	r9,1264(sp)
   111d0:	10042e26 	beq	r2,zero,1228c <___vfprintf_internal_r+0x1a8c>
   111d4:	14c5c83a 	sub	r2,r2,r19
   111d8:	d8812b15 	stw	r2,1196(sp)
   111dc:	e083790e 	bge	fp,r2,11fc4 <___vfprintf_internal_r+0x17c4>
   111e0:	df012815 	stw	fp,1184(sp)
   111e4:	e0049516 	blt	fp,zero,1243c <___vfprintf_internal_r+0x1c3c>
   111e8:	d8812583 	ldbu	r2,1174(sp)
   111ec:	df012b15 	stw	fp,1196(sp)
   111f0:	ddc12d15 	stw	r23,1204(sp)
   111f4:	d8013115 	stw	zero,1220(sp)
   111f8:	003e6c06 	br	10bac <___vfprintf_internal_r+0x3ac>
   111fc:	020000f4 	movhi	r8,3
   11200:	42202604 	addi	r8,r8,-32616
   11204:	da013615 	stw	r8,1240(sp)
   11208:	8080080c 	andi	r2,r16,32
   1120c:	103f6a1e 	bne	r2,zero,10fb8 <___vfprintf_internal_r+0x7b8>
   11210:	8080040c 	andi	r2,r16,16
   11214:	10029326 	beq	r2,zero,11c64 <___vfprintf_internal_r+0x1464>
   11218:	d8c12d17 	ldw	r3,1204(sp)
   1121c:	002d883a 	mov	r22,zero
   11220:	1dc00017 	ldw	r23,0(r3)
   11224:	18c00104 	addi	r3,r3,4
   11228:	d8c12d15 	stw	r3,1204(sp)
   1122c:	003f6706 	br	10fcc <___vfprintf_internal_r+0x7cc>
   11230:	84000214 	ori	r16,r16,8
   11234:	ac800007 	ldb	r18,0(r21)
   11238:	003dcf06 	br	10978 <___vfprintf_internal_r+0x178>
   1123c:	da011d17 	ldw	r8,1140(sp)
   11240:	d8c11c17 	ldw	r3,1136(sp)
   11244:	d8812587 	ldb	r2,1174(sp)
   11248:	10000b26 	beq	r2,zero,11278 <___vfprintf_internal_r+0xa78>
   1124c:	d8812584 	addi	r2,sp,1174
   11250:	48800015 	stw	r2,0(r9)
   11254:	00800044 	movi	r2,1
   11258:	48800115 	stw	r2,4(r9)
   1125c:	4091883a 	add	r8,r8,r2
   11260:	1887883a 	add	r3,r3,r2
   11264:	da011d15 	stw	r8,1140(sp)
   11268:	d8c11c15 	stw	r3,1136(sp)
   1126c:	008001c4 	movi	r2,7
   11270:	10c18516 	blt	r2,r3,11888 <___vfprintf_internal_r+0x1088>
   11274:	4a400204 	addi	r9,r9,8
   11278:	d9012a17 	ldw	r4,1192(sp)
   1127c:	20000b26 	beq	r4,zero,112ac <___vfprintf_internal_r+0xaac>
   11280:	d8812504 	addi	r2,sp,1172
   11284:	48800015 	stw	r2,0(r9)
   11288:	00800084 	movi	r2,2
   1128c:	48800115 	stw	r2,4(r9)
   11290:	4091883a 	add	r8,r8,r2
   11294:	18c00044 	addi	r3,r3,1
   11298:	da011d15 	stw	r8,1140(sp)
   1129c:	d8c11c15 	stw	r3,1136(sp)
   112a0:	008001c4 	movi	r2,7
   112a4:	10c18116 	blt	r2,r3,118ac <___vfprintf_internal_r+0x10ac>
   112a8:	4a400204 	addi	r9,r9,8
   112ac:	d9012f17 	ldw	r4,1212(sp)
   112b0:	00802004 	movi	r2,128
   112b4:	2080fc26 	beq	r4,r2,116a8 <___vfprintf_internal_r+0xea8>
   112b8:	d8813117 	ldw	r2,1220(sp)
   112bc:	d9012b17 	ldw	r4,1196(sp)
   112c0:	112fc83a 	sub	r23,r2,r4
   112c4:	05c02a0e 	bge	zero,r23,11370 <___vfprintf_internal_r+0xb70>
   112c8:	07000404 	movi	fp,16
   112cc:	050000f4 	movhi	r20,3
   112d0:	a5203184 	addi	r20,r20,-32570
   112d4:	e5c01d0e 	bge	fp,r23,1134c <___vfprintf_internal_r+0xb4c>
   112d8:	dc812a15 	stw	r18,1192(sp)
   112dc:	058001c4 	movi	r22,7
   112e0:	a025883a 	mov	r18,r20
   112e4:	8029883a 	mov	r20,r16
   112e8:	dc012917 	ldw	r16,1188(sp)
   112ec:	00000306 	br	112fc <___vfprintf_internal_r+0xafc>
   112f0:	bdfffc04 	addi	r23,r23,-16
   112f4:	4a400204 	addi	r9,r9,8
   112f8:	e5c0110e 	bge	fp,r23,11340 <___vfprintf_internal_r+0xb40>
   112fc:	4c800015 	stw	r18,0(r9)
   11300:	4f000115 	stw	fp,4(r9)
   11304:	42000404 	addi	r8,r8,16
   11308:	18c00044 	addi	r3,r3,1
   1130c:	da011d15 	stw	r8,1140(sp)
   11310:	d8c11c15 	stw	r3,1136(sp)
   11314:	b0fff60e 	bge	r22,r3,112f0 <___vfprintf_internal_r+0xaf0>
   11318:	8809883a 	mov	r4,r17
   1131c:	800b883a 	mov	r5,r16
   11320:	d9811b04 	addi	r6,sp,1132
   11324:	00107cc0 	call	107cc <__sprint_r>
   11328:	103ec81e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   1132c:	bdfffc04 	addi	r23,r23,-16
   11330:	da011d17 	ldw	r8,1140(sp)
   11334:	d8c11c17 	ldw	r3,1136(sp)
   11338:	da400404 	addi	r9,sp,16
   1133c:	e5ffef16 	blt	fp,r23,112fc <___vfprintf_internal_r+0xafc>
   11340:	a021883a 	mov	r16,r20
   11344:	9029883a 	mov	r20,r18
   11348:	dc812a17 	ldw	r18,1192(sp)
   1134c:	4d000015 	stw	r20,0(r9)
   11350:	4dc00115 	stw	r23,4(r9)
   11354:	45d1883a 	add	r8,r8,r23
   11358:	18c00044 	addi	r3,r3,1
   1135c:	da011d15 	stw	r8,1140(sp)
   11360:	d8c11c15 	stw	r3,1136(sp)
   11364:	008001c4 	movi	r2,7
   11368:	10c13e16 	blt	r2,r3,11864 <___vfprintf_internal_r+0x1064>
   1136c:	4a400204 	addi	r9,r9,8
   11370:	8080400c 	andi	r2,r16,256
   11374:	1000831e 	bne	r2,zero,11584 <___vfprintf_internal_r+0xd84>
   11378:	d8812b17 	ldw	r2,1196(sp)
   1137c:	4cc00015 	stw	r19,0(r9)
   11380:	48800115 	stw	r2,4(r9)
   11384:	4091883a 	add	r8,r8,r2
   11388:	18c00044 	addi	r3,r3,1
   1138c:	da011d15 	stw	r8,1140(sp)
   11390:	d8c11c15 	stw	r3,1136(sp)
   11394:	008001c4 	movi	r2,7
   11398:	10c05316 	blt	r2,r3,114e8 <___vfprintf_internal_r+0xce8>
   1139c:	4a400204 	addi	r9,r9,8
   113a0:	8400010c 	andi	r16,r16,4
   113a4:	80002e26 	beq	r16,zero,11460 <___vfprintf_internal_r+0xc60>
   113a8:	d8812e17 	ldw	r2,1208(sp)
   113ac:	d8c12817 	ldw	r3,1184(sp)
   113b0:	10e1c83a 	sub	r16,r2,r3
   113b4:	04002a0e 	bge	zero,r16,11460 <___vfprintf_internal_r+0xc60>
   113b8:	04800404 	movi	r18,16
   113bc:	d8c11c17 	ldw	r3,1136(sp)
   113c0:	05c000f4 	movhi	r23,3
   113c4:	bde02d84 	addi	r23,r23,-32586
   113c8:	9400170e 	bge	r18,r16,11428 <___vfprintf_internal_r+0xc28>
   113cc:	04c001c4 	movi	r19,7
   113d0:	dd012917 	ldw	r20,1188(sp)
   113d4:	00000306 	br	113e4 <___vfprintf_internal_r+0xbe4>
   113d8:	843ffc04 	addi	r16,r16,-16
   113dc:	4a400204 	addi	r9,r9,8
   113e0:	9400110e 	bge	r18,r16,11428 <___vfprintf_internal_r+0xc28>
   113e4:	4dc00015 	stw	r23,0(r9)
   113e8:	4c800115 	stw	r18,4(r9)
   113ec:	42000404 	addi	r8,r8,16
   113f0:	18c00044 	addi	r3,r3,1
   113f4:	da011d15 	stw	r8,1140(sp)
   113f8:	d8c11c15 	stw	r3,1136(sp)
   113fc:	98fff60e 	bge	r19,r3,113d8 <___vfprintf_internal_r+0xbd8>
   11400:	8809883a 	mov	r4,r17
   11404:	a00b883a 	mov	r5,r20
   11408:	d9811b04 	addi	r6,sp,1132
   1140c:	00107cc0 	call	107cc <__sprint_r>
   11410:	103e8e1e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11414:	843ffc04 	addi	r16,r16,-16
   11418:	da011d17 	ldw	r8,1140(sp)
   1141c:	d8c11c17 	ldw	r3,1136(sp)
   11420:	da400404 	addi	r9,sp,16
   11424:	943fef16 	blt	r18,r16,113e4 <___vfprintf_internal_r+0xbe4>
   11428:	4dc00015 	stw	r23,0(r9)
   1142c:	4c000115 	stw	r16,4(r9)
   11430:	8211883a 	add	r8,r16,r8
   11434:	18c00044 	addi	r3,r3,1
   11438:	da011d15 	stw	r8,1140(sp)
   1143c:	d8c11c15 	stw	r3,1136(sp)
   11440:	008001c4 	movi	r2,7
   11444:	10c0060e 	bge	r2,r3,11460 <___vfprintf_internal_r+0xc60>
   11448:	d9412917 	ldw	r5,1188(sp)
   1144c:	8809883a 	mov	r4,r17
   11450:	d9811b04 	addi	r6,sp,1132
   11454:	00107cc0 	call	107cc <__sprint_r>
   11458:	103e7c1e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   1145c:	da011d17 	ldw	r8,1140(sp)
   11460:	dd012817 	ldw	r20,1184(sp)
   11464:	d9012e17 	ldw	r4,1208(sp)
   11468:	a100010e 	bge	r20,r4,11470 <___vfprintf_internal_r+0xc70>
   1146c:	2029883a 	mov	r20,r4
   11470:	d8812c17 	ldw	r2,1200(sp)
   11474:	1505883a 	add	r2,r2,r20
   11478:	d8812c15 	stw	r2,1200(sp)
   1147c:	4000b91e 	bne	r8,zero,11764 <___vfprintf_internal_r+0xf64>
   11480:	d8011c15 	stw	zero,1136(sp)
   11484:	a8800007 	ldb	r2,0(r21)
   11488:	da400404 	addi	r9,sp,16
   1148c:	103d141e 	bne	r2,zero,108e0 <___vfprintf_internal_r+0xe0>
   11490:	a825883a 	mov	r18,r21
   11494:	003d2a06 	br	10940 <___vfprintf_internal_r+0x140>
   11498:	d9412917 	ldw	r5,1188(sp)
   1149c:	8809883a 	mov	r4,r17
   114a0:	d9811b04 	addi	r6,sp,1132
   114a4:	00107cc0 	call	107cc <__sprint_r>
   114a8:	103e681e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   114ac:	da011d17 	ldw	r8,1140(sp)
   114b0:	da400404 	addi	r9,sp,16
   114b4:	8080004c 	andi	r2,r16,1
   114b8:	103fb926 	beq	r2,zero,113a0 <___vfprintf_internal_r+0xba0>
   114bc:	d8c11c17 	ldw	r3,1136(sp)
   114c0:	d9013717 	ldw	r4,1244(sp)
   114c4:	00800044 	movi	r2,1
   114c8:	48800115 	stw	r2,4(r9)
   114cc:	49000015 	stw	r4,0(r9)
   114d0:	4091883a 	add	r8,r8,r2
   114d4:	1887883a 	add	r3,r3,r2
   114d8:	da011d15 	stw	r8,1140(sp)
   114dc:	d8c11c15 	stw	r3,1136(sp)
   114e0:	008001c4 	movi	r2,7
   114e4:	10ffad0e 	bge	r2,r3,1139c <___vfprintf_internal_r+0xb9c>
   114e8:	d9412917 	ldw	r5,1188(sp)
   114ec:	8809883a 	mov	r4,r17
   114f0:	d9811b04 	addi	r6,sp,1132
   114f4:	00107cc0 	call	107cc <__sprint_r>
   114f8:	103e541e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   114fc:	da400404 	addi	r9,sp,16
   11500:	da011d17 	ldw	r8,1140(sp)
   11504:	003fa606 	br	113a0 <___vfprintf_internal_r+0xba0>
   11508:	18803fcc 	andi	r2,r3,255
   1150c:	00c00044 	movi	r3,1
   11510:	10c10126 	beq	r2,r3,11918 <___vfprintf_internal_r+0x1118>
   11514:	00c00084 	movi	r3,2
   11518:	10c0f026 	beq	r2,r3,118dc <___vfprintf_internal_r+0x10dc>
   1151c:	d8c10dc4 	addi	r3,sp,1079
   11520:	b808d0fa 	srli	r4,r23,3
   11524:	b00a977a 	slli	r5,r22,29
   11528:	b02cd0fa 	srli	r22,r22,3
   1152c:	bdc001cc 	andi	r23,r23,7
   11530:	b8800c04 	addi	r2,r23,48
   11534:	292eb03a 	or	r23,r5,r4
   11538:	18800005 	stb	r2,0(r3)
   1153c:	bd88b03a 	or	r4,r23,r22
   11540:	1827883a 	mov	r19,r3
   11544:	18ffffc4 	addi	r3,r3,-1
   11548:	203ff51e 	bne	r4,zero,11520 <___vfprintf_internal_r+0xd20>
   1154c:	8100004c 	andi	r4,r16,1
   11550:	980b883a 	mov	r5,r19
   11554:	20000726 	beq	r4,zero,11574 <___vfprintf_internal_r+0xd74>
   11558:	10803fcc 	andi	r2,r2,255
   1155c:	1080201c 	xori	r2,r2,128
   11560:	10bfe004 	addi	r2,r2,-128
   11564:	01000c04 	movi	r4,48
   11568:	11000226 	beq	r2,r4,11574 <___vfprintf_internal_r+0xd74>
   1156c:	1827883a 	mov	r19,r3
   11570:	293fffc5 	stb	r4,-1(r5)
   11574:	d8812717 	ldw	r2,1180(sp)
   11578:	14c5c83a 	sub	r2,r2,r19
   1157c:	d8812b15 	stw	r2,1196(sp)
   11580:	003d8406 	br	10b94 <___vfprintf_internal_r+0x394>
   11584:	00801944 	movi	r2,101
   11588:	14807c0e 	bge	r2,r18,1177c <___vfprintf_internal_r+0xf7c>
   1158c:	d9013317 	ldw	r4,1228(sp)
   11590:	d9413417 	ldw	r5,1232(sp)
   11594:	000d883a 	mov	r6,zero
   11598:	000f883a 	mov	r7,zero
   1159c:	d8c13b15 	stw	r3,1260(sp)
   115a0:	da013a15 	stw	r8,1256(sp)
   115a4:	da413c15 	stw	r9,1264(sp)
   115a8:	0018db40 	call	18db4 <__eqdf2>
   115ac:	d8c13b17 	ldw	r3,1260(sp)
   115b0:	da013a17 	ldw	r8,1256(sp)
   115b4:	da413c17 	ldw	r9,1264(sp)
   115b8:	1001001e 	bne	r2,zero,119bc <___vfprintf_internal_r+0x11bc>
   115bc:	008000f4 	movhi	r2,3
   115c0:	10a02d04 	addi	r2,r2,-32588
   115c4:	48800015 	stw	r2,0(r9)
   115c8:	00800044 	movi	r2,1
   115cc:	48800115 	stw	r2,4(r9)
   115d0:	4091883a 	add	r8,r8,r2
   115d4:	1887883a 	add	r3,r3,r2
   115d8:	da011d15 	stw	r8,1140(sp)
   115dc:	d8c11c15 	stw	r3,1136(sp)
   115e0:	008001c4 	movi	r2,7
   115e4:	10c1dd16 	blt	r2,r3,11d5c <___vfprintf_internal_r+0x155c>
   115e8:	4a400204 	addi	r9,r9,8
   115ec:	d8812417 	ldw	r2,1168(sp)
   115f0:	d8c13217 	ldw	r3,1224(sp)
   115f4:	10c00216 	blt	r2,r3,11600 <___vfprintf_internal_r+0xe00>
   115f8:	8080004c 	andi	r2,r16,1
   115fc:	103f6826 	beq	r2,zero,113a0 <___vfprintf_internal_r+0xba0>
   11600:	d8c11c17 	ldw	r3,1136(sp)
   11604:	d9013717 	ldw	r4,1244(sp)
   11608:	00800044 	movi	r2,1
   1160c:	48800115 	stw	r2,4(r9)
   11610:	49000015 	stw	r4,0(r9)
   11614:	4091883a 	add	r8,r8,r2
   11618:	1887883a 	add	r3,r3,r2
   1161c:	da011d15 	stw	r8,1140(sp)
   11620:	d8c11c15 	stw	r3,1136(sp)
   11624:	008001c4 	movi	r2,7
   11628:	10c2af16 	blt	r2,r3,120e8 <___vfprintf_internal_r+0x18e8>
   1162c:	4a400204 	addi	r9,r9,8
   11630:	d8813217 	ldw	r2,1224(sp)
   11634:	14bfffc4 	addi	r18,r2,-1
   11638:	04bf590e 	bge	zero,r18,113a0 <___vfprintf_internal_r+0xba0>
   1163c:	04c00404 	movi	r19,16
   11640:	d8c11c17 	ldw	r3,1136(sp)
   11644:	050000f4 	movhi	r20,3
   11648:	a5203184 	addi	r20,r20,-32570
   1164c:	9c81630e 	bge	r19,r18,11bdc <___vfprintf_internal_r+0x13dc>
   11650:	058001c4 	movi	r22,7
   11654:	ddc12917 	ldw	r23,1188(sp)
   11658:	00000306 	br	11668 <___vfprintf_internal_r+0xe68>
   1165c:	4a400204 	addi	r9,r9,8
   11660:	94bffc04 	addi	r18,r18,-16
   11664:	9c815d0e 	bge	r19,r18,11bdc <___vfprintf_internal_r+0x13dc>
   11668:	4d000015 	stw	r20,0(r9)
   1166c:	4cc00115 	stw	r19,4(r9)
   11670:	42000404 	addi	r8,r8,16
   11674:	18c00044 	addi	r3,r3,1
   11678:	da011d15 	stw	r8,1140(sp)
   1167c:	d8c11c15 	stw	r3,1136(sp)
   11680:	b0fff60e 	bge	r22,r3,1165c <___vfprintf_internal_r+0xe5c>
   11684:	8809883a 	mov	r4,r17
   11688:	b80b883a 	mov	r5,r23
   1168c:	d9811b04 	addi	r6,sp,1132
   11690:	00107cc0 	call	107cc <__sprint_r>
   11694:	103ded1e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11698:	da011d17 	ldw	r8,1140(sp)
   1169c:	d8c11c17 	ldw	r3,1136(sp)
   116a0:	da400404 	addi	r9,sp,16
   116a4:	003fee06 	br	11660 <___vfprintf_internal_r+0xe60>
   116a8:	d8812e17 	ldw	r2,1208(sp)
   116ac:	d9012817 	ldw	r4,1184(sp)
   116b0:	112fc83a 	sub	r23,r2,r4
   116b4:	05ff000e 	bge	zero,r23,112b8 <___vfprintf_internal_r+0xab8>
   116b8:	07000404 	movi	fp,16
   116bc:	050000f4 	movhi	r20,3
   116c0:	a5203184 	addi	r20,r20,-32570
   116c4:	e5c01d0e 	bge	fp,r23,1173c <___vfprintf_internal_r+0xf3c>
   116c8:	dc812a15 	stw	r18,1192(sp)
   116cc:	058001c4 	movi	r22,7
   116d0:	a025883a 	mov	r18,r20
   116d4:	8029883a 	mov	r20,r16
   116d8:	dc012917 	ldw	r16,1188(sp)
   116dc:	00000306 	br	116ec <___vfprintf_internal_r+0xeec>
   116e0:	bdfffc04 	addi	r23,r23,-16
   116e4:	4a400204 	addi	r9,r9,8
   116e8:	e5c0110e 	bge	fp,r23,11730 <___vfprintf_internal_r+0xf30>
   116ec:	4c800015 	stw	r18,0(r9)
   116f0:	4f000115 	stw	fp,4(r9)
   116f4:	42000404 	addi	r8,r8,16
   116f8:	18c00044 	addi	r3,r3,1
   116fc:	da011d15 	stw	r8,1140(sp)
   11700:	d8c11c15 	stw	r3,1136(sp)
   11704:	b0fff60e 	bge	r22,r3,116e0 <___vfprintf_internal_r+0xee0>
   11708:	8809883a 	mov	r4,r17
   1170c:	800b883a 	mov	r5,r16
   11710:	d9811b04 	addi	r6,sp,1132
   11714:	00107cc0 	call	107cc <__sprint_r>
   11718:	103dcc1e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   1171c:	bdfffc04 	addi	r23,r23,-16
   11720:	da011d17 	ldw	r8,1140(sp)
   11724:	d8c11c17 	ldw	r3,1136(sp)
   11728:	da400404 	addi	r9,sp,16
   1172c:	e5ffef16 	blt	fp,r23,116ec <___vfprintf_internal_r+0xeec>
   11730:	a021883a 	mov	r16,r20
   11734:	9029883a 	mov	r20,r18
   11738:	dc812a17 	ldw	r18,1192(sp)
   1173c:	4d000015 	stw	r20,0(r9)
   11740:	4dc00115 	stw	r23,4(r9)
   11744:	45d1883a 	add	r8,r8,r23
   11748:	18c00044 	addi	r3,r3,1
   1174c:	da011d15 	stw	r8,1140(sp)
   11750:	d8c11c15 	stw	r3,1136(sp)
   11754:	008001c4 	movi	r2,7
   11758:	10c11716 	blt	r2,r3,11bb8 <___vfprintf_internal_r+0x13b8>
   1175c:	4a400204 	addi	r9,r9,8
   11760:	003ed506 	br	112b8 <___vfprintf_internal_r+0xab8>
   11764:	d9412917 	ldw	r5,1188(sp)
   11768:	8809883a 	mov	r4,r17
   1176c:	d9811b04 	addi	r6,sp,1132
   11770:	00107cc0 	call	107cc <__sprint_r>
   11774:	103f4226 	beq	r2,zero,11480 <___vfprintf_internal_r+0xc80>
   11778:	003db406 	br	10e4c <___vfprintf_internal_r+0x64c>
   1177c:	d9013217 	ldw	r4,1224(sp)
   11780:	00800044 	movi	r2,1
   11784:	4cc00015 	stw	r19,0(r9)
   11788:	1100e10e 	bge	r2,r4,11b10 <___vfprintf_internal_r+0x1310>
   1178c:	00800044 	movi	r2,1
   11790:	48800115 	stw	r2,4(r9)
   11794:	4091883a 	add	r8,r8,r2
   11798:	1887883a 	add	r3,r3,r2
   1179c:	da011d15 	stw	r8,1140(sp)
   117a0:	d8c11c15 	stw	r3,1136(sp)
   117a4:	008001c4 	movi	r2,7
   117a8:	10c0ed16 	blt	r2,r3,11b60 <___vfprintf_internal_r+0x1360>
   117ac:	4a400204 	addi	r9,r9,8
   117b0:	d8813717 	ldw	r2,1244(sp)
   117b4:	48800015 	stw	r2,0(r9)
   117b8:	00800044 	movi	r2,1
   117bc:	48800115 	stw	r2,4(r9)
   117c0:	4091883a 	add	r8,r8,r2
   117c4:	1887883a 	add	r3,r3,r2
   117c8:	da011d15 	stw	r8,1140(sp)
   117cc:	d8c11c15 	stw	r3,1136(sp)
   117d0:	008001c4 	movi	r2,7
   117d4:	10c0eb16 	blt	r2,r3,11b84 <___vfprintf_internal_r+0x1384>
   117d8:	4c800204 	addi	r18,r9,8
   117dc:	d9013317 	ldw	r4,1228(sp)
   117e0:	d9413417 	ldw	r5,1232(sp)
   117e4:	000d883a 	mov	r6,zero
   117e8:	000f883a 	mov	r7,zero
   117ec:	d8c13b15 	stw	r3,1260(sp)
   117f0:	da013a15 	stw	r8,1256(sp)
   117f4:	0018e100 	call	18e10 <__nedf2>
   117f8:	d8c13b17 	ldw	r3,1260(sp)
   117fc:	da013a17 	ldw	r8,1256(sp)
   11800:	1000a626 	beq	r2,zero,11a9c <___vfprintf_internal_r+0x129c>
   11804:	d9013217 	ldw	r4,1224(sp)
   11808:	9cc00044 	addi	r19,r19,1
   1180c:	94c00015 	stw	r19,0(r18)
   11810:	20bfffc4 	addi	r2,r4,-1
   11814:	90800115 	stw	r2,4(r18)
   11818:	4091883a 	add	r8,r8,r2
   1181c:	18c00044 	addi	r3,r3,1
   11820:	da011d15 	stw	r8,1140(sp)
   11824:	d8c11c15 	stw	r3,1136(sp)
   11828:	008001c4 	movi	r2,7
   1182c:	10c0c316 	blt	r2,r3,11b3c <___vfprintf_internal_r+0x133c>
   11830:	94800204 	addi	r18,r18,8
   11834:	d9013517 	ldw	r4,1236(sp)
   11838:	d8811fc4 	addi	r2,sp,1151
   1183c:	90800015 	stw	r2,0(r18)
   11840:	91000115 	stw	r4,4(r18)
   11844:	4111883a 	add	r8,r8,r4
   11848:	18c00044 	addi	r3,r3,1
   1184c:	da011d15 	stw	r8,1140(sp)
   11850:	d8c11c15 	stw	r3,1136(sp)
   11854:	008001c4 	movi	r2,7
   11858:	10ff2316 	blt	r2,r3,114e8 <___vfprintf_internal_r+0xce8>
   1185c:	92400204 	addi	r9,r18,8
   11860:	003ecf06 	br	113a0 <___vfprintf_internal_r+0xba0>
   11864:	d9412917 	ldw	r5,1188(sp)
   11868:	8809883a 	mov	r4,r17
   1186c:	d9811b04 	addi	r6,sp,1132
   11870:	00107cc0 	call	107cc <__sprint_r>
   11874:	103d751e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11878:	da011d17 	ldw	r8,1140(sp)
   1187c:	d8c11c17 	ldw	r3,1136(sp)
   11880:	da400404 	addi	r9,sp,16
   11884:	003eba06 	br	11370 <___vfprintf_internal_r+0xb70>
   11888:	d9412917 	ldw	r5,1188(sp)
   1188c:	8809883a 	mov	r4,r17
   11890:	d9811b04 	addi	r6,sp,1132
   11894:	00107cc0 	call	107cc <__sprint_r>
   11898:	103d6c1e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   1189c:	da011d17 	ldw	r8,1140(sp)
   118a0:	d8c11c17 	ldw	r3,1136(sp)
   118a4:	da400404 	addi	r9,sp,16
   118a8:	003e7306 	br	11278 <___vfprintf_internal_r+0xa78>
   118ac:	d9412917 	ldw	r5,1188(sp)
   118b0:	8809883a 	mov	r4,r17
   118b4:	d9811b04 	addi	r6,sp,1132
   118b8:	00107cc0 	call	107cc <__sprint_r>
   118bc:	103d631e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   118c0:	da011d17 	ldw	r8,1140(sp)
   118c4:	d8c11c17 	ldw	r3,1136(sp)
   118c8:	da400404 	addi	r9,sp,16
   118cc:	003e7706 	br	112ac <___vfprintf_internal_r+0xaac>
   118d0:	d8012b15 	stw	zero,1196(sp)
   118d4:	dcc10e04 	addi	r19,sp,1080
   118d8:	003cae06 	br	10b94 <___vfprintf_internal_r+0x394>
   118dc:	d9413617 	ldw	r5,1240(sp)
   118e0:	d8810dc4 	addi	r2,sp,1079
   118e4:	b8c003cc 	andi	r3,r23,15
   118e8:	b008973a 	slli	r4,r22,28
   118ec:	28c7883a 	add	r3,r5,r3
   118f0:	b82ed13a 	srli	r23,r23,4
   118f4:	18c00003 	ldbu	r3,0(r3)
   118f8:	b02cd13a 	srli	r22,r22,4
   118fc:	25eeb03a 	or	r23,r4,r23
   11900:	10c00005 	stb	r3,0(r2)
   11904:	bd86b03a 	or	r3,r23,r22
   11908:	1027883a 	mov	r19,r2
   1190c:	10bfffc4 	addi	r2,r2,-1
   11910:	183ff41e 	bne	r3,zero,118e4 <___vfprintf_internal_r+0x10e4>
   11914:	003f1706 	br	11574 <___vfprintf_internal_r+0xd74>
   11918:	b0025826 	beq	r22,zero,1227c <___vfprintf_internal_r+0x1a7c>
   1191c:	b807883a 	mov	r3,r23
   11920:	d8810dc4 	addi	r2,sp,1079
   11924:	882f883a 	mov	r23,r17
   11928:	04c00244 	movi	r19,9
   1192c:	8023883a 	mov	r17,r16
   11930:	da412815 	stw	r9,1184(sp)
   11934:	1821883a 	mov	r16,r3
   11938:	8009883a 	mov	r4,r16
   1193c:	b00b883a 	mov	r5,r22
   11940:	01800284 	movi	r6,10
   11944:	000f883a 	mov	r7,zero
   11948:	1029883a 	mov	r20,r2
   1194c:	0017f880 	call	17f88 <__umoddi3>
   11950:	10800c04 	addi	r2,r2,48
   11954:	8009883a 	mov	r4,r16
   11958:	b00b883a 	mov	r5,r22
   1195c:	a0800005 	stb	r2,0(r20)
   11960:	01800284 	movi	r6,10
   11964:	000f883a 	mov	r7,zero
   11968:	00179c00 	call	179c0 <__udivdi3>
   1196c:	1021883a 	mov	r16,r2
   11970:	182d883a 	mov	r22,r3
   11974:	a0bfffc4 	addi	r2,r20,-1
   11978:	183fef1e 	bne	r3,zero,11938 <___vfprintf_internal_r+0x1138>
   1197c:	9c3fee36 	bltu	r19,r16,11938 <___vfprintf_internal_r+0x1138>
   11980:	da412817 	ldw	r9,1184(sp)
   11984:	8005883a 	mov	r2,r16
   11988:	8821883a 	mov	r16,r17
   1198c:	b823883a 	mov	r17,r23
   11990:	102f883a 	mov	r23,r2
   11994:	d8812717 	ldw	r2,1180(sp)
   11998:	a4ffffc4 	addi	r19,r20,-1
   1199c:	bdc00c04 	addi	r23,r23,48
   119a0:	14c5c83a 	sub	r2,r2,r19
   119a4:	a5ffffc5 	stb	r23,-1(r20)
   119a8:	d8812b15 	stw	r2,1196(sp)
   119ac:	003c7906 	br	10b94 <___vfprintf_internal_r+0x394>
   119b0:	00c00044 	movi	r3,1
   119b4:	bd84b03a 	or	r2,r23,r22
   119b8:	003c6806 	br	10b5c <___vfprintf_internal_r+0x35c>
   119bc:	dc812417 	ldw	r18,1168(sp)
   119c0:	0480ee0e 	bge	zero,r18,11d7c <___vfprintf_internal_r+0x157c>
   119c4:	d9013217 	ldw	r4,1224(sp)
   119c8:	4cc00015 	stw	r19,0(r9)
   119cc:	9100c616 	blt	r18,r4,11ce8 <___vfprintf_internal_r+0x14e8>
   119d0:	49000115 	stw	r4,4(r9)
   119d4:	4111883a 	add	r8,r8,r4
   119d8:	18c00044 	addi	r3,r3,1
   119dc:	da011d15 	stw	r8,1140(sp)
   119e0:	d8c11c15 	stw	r3,1136(sp)
   119e4:	008001c4 	movi	r2,7
   119e8:	10c20916 	blt	r2,r3,12210 <___vfprintf_internal_r+0x1a10>
   119ec:	4a400204 	addi	r9,r9,8
   119f0:	d8813217 	ldw	r2,1224(sp)
   119f4:	90a5c83a 	sub	r18,r18,r2
   119f8:	04beae0e 	bge	zero,r18,114b4 <___vfprintf_internal_r+0xcb4>
   119fc:	04c00404 	movi	r19,16
   11a00:	d8c11c17 	ldw	r3,1136(sp)
   11a04:	050000f4 	movhi	r20,3
   11a08:	a5203184 	addi	r20,r20,-32570
   11a0c:	9c81be0e 	bge	r19,r18,12108 <___vfprintf_internal_r+0x1908>
   11a10:	058001c4 	movi	r22,7
   11a14:	ddc12917 	ldw	r23,1188(sp)
   11a18:	00000306 	br	11a28 <___vfprintf_internal_r+0x1228>
   11a1c:	4a400204 	addi	r9,r9,8
   11a20:	94bffc04 	addi	r18,r18,-16
   11a24:	9c81b80e 	bge	r19,r18,12108 <___vfprintf_internal_r+0x1908>
   11a28:	4d000015 	stw	r20,0(r9)
   11a2c:	4cc00115 	stw	r19,4(r9)
   11a30:	42000404 	addi	r8,r8,16
   11a34:	18c00044 	addi	r3,r3,1
   11a38:	da011d15 	stw	r8,1140(sp)
   11a3c:	d8c11c15 	stw	r3,1136(sp)
   11a40:	b0fff60e 	bge	r22,r3,11a1c <___vfprintf_internal_r+0x121c>
   11a44:	8809883a 	mov	r4,r17
   11a48:	b80b883a 	mov	r5,r23
   11a4c:	d9811b04 	addi	r6,sp,1132
   11a50:	00107cc0 	call	107cc <__sprint_r>
   11a54:	103cfd1e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11a58:	da011d17 	ldw	r8,1140(sp)
   11a5c:	d8c11c17 	ldw	r3,1136(sp)
   11a60:	da400404 	addi	r9,sp,16
   11a64:	003fee06 	br	11a20 <___vfprintf_internal_r+0x1220>
   11a68:	d9412917 	ldw	r5,1188(sp)
   11a6c:	8809883a 	mov	r4,r17
   11a70:	d9811b04 	addi	r6,sp,1132
   11a74:	00107cc0 	call	107cc <__sprint_r>
   11a78:	103cf41e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11a7c:	da011d17 	ldw	r8,1140(sp)
   11a80:	d8c11c17 	ldw	r3,1136(sp)
   11a84:	da400404 	addi	r9,sp,16
   11a88:	003dee06 	br	11244 <___vfprintf_internal_r+0xa44>
   11a8c:	00c00084 	movi	r3,2
   11a90:	bd84b03a 	or	r2,r23,r22
   11a94:	d8012585 	stb	zero,1174(sp)
   11a98:	003c3006 	br	10b5c <___vfprintf_internal_r+0x35c>
   11a9c:	d8813217 	ldw	r2,1224(sp)
   11aa0:	14ffffc4 	addi	r19,r2,-1
   11aa4:	04ff630e 	bge	zero,r19,11834 <___vfprintf_internal_r+0x1034>
   11aa8:	05800404 	movi	r22,16
   11aac:	050000f4 	movhi	r20,3
   11ab0:	a5203184 	addi	r20,r20,-32570
   11ab4:	b4c03c0e 	bge	r22,r19,11ba8 <___vfprintf_internal_r+0x13a8>
   11ab8:	05c001c4 	movi	r23,7
   11abc:	df012917 	ldw	fp,1188(sp)
   11ac0:	00000306 	br	11ad0 <___vfprintf_internal_r+0x12d0>
   11ac4:	94800204 	addi	r18,r18,8
   11ac8:	9cfffc04 	addi	r19,r19,-16
   11acc:	b4c0360e 	bge	r22,r19,11ba8 <___vfprintf_internal_r+0x13a8>
   11ad0:	95000015 	stw	r20,0(r18)
   11ad4:	95800115 	stw	r22,4(r18)
   11ad8:	42000404 	addi	r8,r8,16
   11adc:	18c00044 	addi	r3,r3,1
   11ae0:	da011d15 	stw	r8,1140(sp)
   11ae4:	d8c11c15 	stw	r3,1136(sp)
   11ae8:	b8fff60e 	bge	r23,r3,11ac4 <___vfprintf_internal_r+0x12c4>
   11aec:	8809883a 	mov	r4,r17
   11af0:	e00b883a 	mov	r5,fp
   11af4:	d9811b04 	addi	r6,sp,1132
   11af8:	00107cc0 	call	107cc <__sprint_r>
   11afc:	103cd31e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11b00:	da011d17 	ldw	r8,1140(sp)
   11b04:	d8c11c17 	ldw	r3,1136(sp)
   11b08:	dc800404 	addi	r18,sp,16
   11b0c:	003fee06 	br	11ac8 <___vfprintf_internal_r+0x12c8>
   11b10:	8088703a 	and	r4,r16,r2
   11b14:	203f1d1e 	bne	r4,zero,1178c <___vfprintf_internal_r+0xf8c>
   11b18:	48800115 	stw	r2,4(r9)
   11b1c:	42000044 	addi	r8,r8,1
   11b20:	18c00044 	addi	r3,r3,1
   11b24:	da011d15 	stw	r8,1140(sp)
   11b28:	d8c11c15 	stw	r3,1136(sp)
   11b2c:	008001c4 	movi	r2,7
   11b30:	10c00216 	blt	r2,r3,11b3c <___vfprintf_internal_r+0x133c>
   11b34:	4c800204 	addi	r18,r9,8
   11b38:	003f3e06 	br	11834 <___vfprintf_internal_r+0x1034>
   11b3c:	d9412917 	ldw	r5,1188(sp)
   11b40:	8809883a 	mov	r4,r17
   11b44:	d9811b04 	addi	r6,sp,1132
   11b48:	00107cc0 	call	107cc <__sprint_r>
   11b4c:	103cbf1e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11b50:	dc800404 	addi	r18,sp,16
   11b54:	da011d17 	ldw	r8,1140(sp)
   11b58:	d8c11c17 	ldw	r3,1136(sp)
   11b5c:	003f3506 	br	11834 <___vfprintf_internal_r+0x1034>
   11b60:	d9412917 	ldw	r5,1188(sp)
   11b64:	8809883a 	mov	r4,r17
   11b68:	d9811b04 	addi	r6,sp,1132
   11b6c:	00107cc0 	call	107cc <__sprint_r>
   11b70:	103cb61e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11b74:	da011d17 	ldw	r8,1140(sp)
   11b78:	d8c11c17 	ldw	r3,1136(sp)
   11b7c:	da400404 	addi	r9,sp,16
   11b80:	003f0b06 	br	117b0 <___vfprintf_internal_r+0xfb0>
   11b84:	d9412917 	ldw	r5,1188(sp)
   11b88:	8809883a 	mov	r4,r17
   11b8c:	d9811b04 	addi	r6,sp,1132
   11b90:	00107cc0 	call	107cc <__sprint_r>
   11b94:	103cad1e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11b98:	da011d17 	ldw	r8,1140(sp)
   11b9c:	d8c11c17 	ldw	r3,1136(sp)
   11ba0:	dc800404 	addi	r18,sp,16
   11ba4:	003f0d06 	br	117dc <___vfprintf_internal_r+0xfdc>
   11ba8:	95000015 	stw	r20,0(r18)
   11bac:	94c00115 	stw	r19,4(r18)
   11bb0:	44d1883a 	add	r8,r8,r19
   11bb4:	003f1906 	br	1181c <___vfprintf_internal_r+0x101c>
   11bb8:	d9412917 	ldw	r5,1188(sp)
   11bbc:	8809883a 	mov	r4,r17
   11bc0:	d9811b04 	addi	r6,sp,1132
   11bc4:	00107cc0 	call	107cc <__sprint_r>
   11bc8:	103ca01e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11bcc:	da011d17 	ldw	r8,1140(sp)
   11bd0:	d8c11c17 	ldw	r3,1136(sp)
   11bd4:	da400404 	addi	r9,sp,16
   11bd8:	003db706 	br	112b8 <___vfprintf_internal_r+0xab8>
   11bdc:	4d000015 	stw	r20,0(r9)
   11be0:	4c800115 	stw	r18,4(r9)
   11be4:	4491883a 	add	r8,r8,r18
   11be8:	003de706 	br	11388 <___vfprintf_internal_r+0xb88>
   11bec:	8080100c 	andi	r2,r16,64
   11bf0:	10010226 	beq	r2,zero,11ffc <___vfprintf_internal_r+0x17fc>
   11bf4:	d8812d17 	ldw	r2,1204(sp)
   11bf8:	002d883a 	mov	r22,zero
   11bfc:	00c00044 	movi	r3,1
   11c00:	15c0000b 	ldhu	r23,0(r2)
   11c04:	10800104 	addi	r2,r2,4
   11c08:	d8812d15 	stw	r2,1204(sp)
   11c0c:	d8012585 	stb	zero,1174(sp)
   11c10:	b805883a 	mov	r2,r23
   11c14:	003bd106 	br	10b5c <___vfprintf_internal_r+0x35c>
   11c18:	d9012d17 	ldw	r4,1204(sp)
   11c1c:	25800017 	ldw	r22,0(r4)
   11c20:	25000117 	ldw	r20,4(r4)
   11c24:	21000204 	addi	r4,r4,8
   11c28:	d9012d15 	stw	r4,1204(sp)
   11c2c:	dd813315 	stw	r22,1228(sp)
   11c30:	dd013415 	stw	r20,1232(sp)
   11c34:	003d2b06 	br	110e4 <___vfprintf_internal_r+0x8e4>
   11c38:	8080100c 	andi	r2,r16,64
   11c3c:	1000fe26 	beq	r2,zero,12038 <___vfprintf_internal_r+0x1838>
   11c40:	d9012d17 	ldw	r4,1204(sp)
   11c44:	002d883a 	mov	r22,zero
   11c48:	0007883a 	mov	r3,zero
   11c4c:	25c0000b 	ldhu	r23,0(r4)
   11c50:	21000104 	addi	r4,r4,4
   11c54:	d9012d15 	stw	r4,1204(sp)
   11c58:	b805883a 	mov	r2,r23
   11c5c:	d8012585 	stb	zero,1174(sp)
   11c60:	003bbe06 	br	10b5c <___vfprintf_internal_r+0x35c>
   11c64:	8080100c 	andi	r2,r16,64
   11c68:	1000ed26 	beq	r2,zero,12020 <___vfprintf_internal_r+0x1820>
   11c6c:	d9012d17 	ldw	r4,1204(sp)
   11c70:	002d883a 	mov	r22,zero
   11c74:	25c0000b 	ldhu	r23,0(r4)
   11c78:	21000104 	addi	r4,r4,4
   11c7c:	d9012d15 	stw	r4,1204(sp)
   11c80:	003cd206 	br	10fcc <___vfprintf_internal_r+0x7cc>
   11c84:	00c00084 	movi	r3,2
   11c88:	d8012585 	stb	zero,1174(sp)
   11c8c:	003bb306 	br	10b5c <___vfprintf_internal_r+0x35c>
   11c90:	8080040c 	andi	r2,r16,16
   11c94:	1000f11e 	bne	r2,zero,1205c <___vfprintf_internal_r+0x185c>
   11c98:	8400100c 	andi	r16,r16,64
   11c9c:	80015526 	beq	r16,zero,121f4 <___vfprintf_internal_r+0x19f4>
   11ca0:	da012d17 	ldw	r8,1204(sp)
   11ca4:	d8c12c17 	ldw	r3,1200(sp)
   11ca8:	40800017 	ldw	r2,0(r8)
   11cac:	42000104 	addi	r8,r8,4
   11cb0:	da012d15 	stw	r8,1204(sp)
   11cb4:	10c0000d 	sth	r3,0(r2)
   11cb8:	003b0706 	br	108d8 <___vfprintf_internal_r+0xd8>
   11cbc:	8080100c 	andi	r2,r16,64
   11cc0:	1000c726 	beq	r2,zero,11fe0 <___vfprintf_internal_r+0x17e0>
   11cc4:	da012d17 	ldw	r8,1204(sp)
   11cc8:	45c0000f 	ldh	r23,0(r8)
   11ccc:	42000104 	addi	r8,r8,4
   11cd0:	da012d15 	stw	r8,1204(sp)
   11cd4:	b82dd7fa 	srai	r22,r23,31
   11cd8:	b005883a 	mov	r2,r22
   11cdc:	003c1006 	br	10d20 <___vfprintf_internal_r+0x520>
   11ce0:	ac800007 	ldb	r18,0(r21)
   11ce4:	003b2406 	br	10978 <___vfprintf_internal_r+0x178>
   11ce8:	4c800115 	stw	r18,4(r9)
   11cec:	9211883a 	add	r8,r18,r8
   11cf0:	18c00044 	addi	r3,r3,1
   11cf4:	da011d15 	stw	r8,1140(sp)
   11cf8:	d8c11c15 	stw	r3,1136(sp)
   11cfc:	008001c4 	movi	r2,7
   11d00:	10c15416 	blt	r2,r3,12254 <___vfprintf_internal_r+0x1a54>
   11d04:	4a400204 	addi	r9,r9,8
   11d08:	d8813717 	ldw	r2,1244(sp)
   11d0c:	9ca7883a 	add	r19,r19,r18
   11d10:	48800015 	stw	r2,0(r9)
   11d14:	00800044 	movi	r2,1
   11d18:	48800115 	stw	r2,4(r9)
   11d1c:	4091883a 	add	r8,r8,r2
   11d20:	1887883a 	add	r3,r3,r2
   11d24:	da011d15 	stw	r8,1140(sp)
   11d28:	d8c11c15 	stw	r3,1136(sp)
   11d2c:	008001c4 	movi	r2,7
   11d30:	10c14016 	blt	r2,r3,12234 <___vfprintf_internal_r+0x1a34>
   11d34:	4a400204 	addi	r9,r9,8
   11d38:	d9013217 	ldw	r4,1224(sp)
   11d3c:	da011d17 	ldw	r8,1140(sp)
   11d40:	d8c11c17 	ldw	r3,1136(sp)
   11d44:	24a5c83a 	sub	r18,r4,r18
   11d48:	4cc00015 	stw	r19,0(r9)
   11d4c:	003fa406 	br	11be0 <___vfprintf_internal_r+0x13e0>
   11d50:	04c000f4 	movhi	r19,3
   11d54:	9ce01e04 	addi	r19,r19,-32648
   11d58:	003cf406 	br	1112c <___vfprintf_internal_r+0x92c>
   11d5c:	d9412917 	ldw	r5,1188(sp)
   11d60:	8809883a 	mov	r4,r17
   11d64:	d9811b04 	addi	r6,sp,1132
   11d68:	00107cc0 	call	107cc <__sprint_r>
   11d6c:	103c371e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11d70:	da011d17 	ldw	r8,1140(sp)
   11d74:	da400404 	addi	r9,sp,16
   11d78:	003e1c06 	br	115ec <___vfprintf_internal_r+0xdec>
   11d7c:	008000f4 	movhi	r2,3
   11d80:	10a02d04 	addi	r2,r2,-32588
   11d84:	48800015 	stw	r2,0(r9)
   11d88:	00800044 	movi	r2,1
   11d8c:	48800115 	stw	r2,4(r9)
   11d90:	4091883a 	add	r8,r8,r2
   11d94:	1887883a 	add	r3,r3,r2
   11d98:	da011d15 	stw	r8,1140(sp)
   11d9c:	d8c11c15 	stw	r3,1136(sp)
   11da0:	008001c4 	movi	r2,7
   11da4:	10c0c316 	blt	r2,r3,120b4 <___vfprintf_internal_r+0x18b4>
   11da8:	4a400204 	addi	r9,r9,8
   11dac:	9000041e 	bne	r18,zero,11dc0 <___vfprintf_internal_r+0x15c0>
   11db0:	d8c13217 	ldw	r3,1224(sp)
   11db4:	1800021e 	bne	r3,zero,11dc0 <___vfprintf_internal_r+0x15c0>
   11db8:	8080004c 	andi	r2,r16,1
   11dbc:	103d7826 	beq	r2,zero,113a0 <___vfprintf_internal_r+0xba0>
   11dc0:	d8c11c17 	ldw	r3,1136(sp)
   11dc4:	d9013717 	ldw	r4,1244(sp)
   11dc8:	00800044 	movi	r2,1
   11dcc:	48800115 	stw	r2,4(r9)
   11dd0:	49000015 	stw	r4,0(r9)
   11dd4:	4091883a 	add	r8,r8,r2
   11dd8:	1887883a 	add	r3,r3,r2
   11ddc:	da011d15 	stw	r8,1140(sp)
   11de0:	d8c11c15 	stw	r3,1136(sp)
   11de4:	008001c4 	movi	r2,7
   11de8:	10c12e16 	blt	r2,r3,122a4 <___vfprintf_internal_r+0x1aa4>
   11dec:	4a400204 	addi	r9,r9,8
   11df0:	04a5c83a 	sub	r18,zero,r18
   11df4:	0480de0e 	bge	zero,r18,12170 <___vfprintf_internal_r+0x1970>
   11df8:	05800404 	movi	r22,16
   11dfc:	050000f4 	movhi	r20,3
   11e00:	a5203184 	addi	r20,r20,-32570
   11e04:	b480e20e 	bge	r22,r18,12190 <___vfprintf_internal_r+0x1990>
   11e08:	05c001c4 	movi	r23,7
   11e0c:	df012917 	ldw	fp,1188(sp)
   11e10:	00000306 	br	11e20 <___vfprintf_internal_r+0x1620>
   11e14:	4a400204 	addi	r9,r9,8
   11e18:	94bffc04 	addi	r18,r18,-16
   11e1c:	b480dc0e 	bge	r22,r18,12190 <___vfprintf_internal_r+0x1990>
   11e20:	4d000015 	stw	r20,0(r9)
   11e24:	4d800115 	stw	r22,4(r9)
   11e28:	42000404 	addi	r8,r8,16
   11e2c:	18c00044 	addi	r3,r3,1
   11e30:	da011d15 	stw	r8,1140(sp)
   11e34:	d8c11c15 	stw	r3,1136(sp)
   11e38:	b8fff60e 	bge	r23,r3,11e14 <___vfprintf_internal_r+0x1614>
   11e3c:	8809883a 	mov	r4,r17
   11e40:	e00b883a 	mov	r5,fp
   11e44:	d9811b04 	addi	r6,sp,1132
   11e48:	00107cc0 	call	107cc <__sprint_r>
   11e4c:	103bff1e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   11e50:	da011d17 	ldw	r8,1140(sp)
   11e54:	d8c11c17 	ldw	r3,1136(sp)
   11e58:	da400404 	addi	r9,sp,16
   11e5c:	003fee06 	br	11e18 <___vfprintf_internal_r+0x1618>
   11e60:	da413c15 	stw	r9,1264(sp)
   11e64:	00172cc0 	call	172cc <__isnand>
   11e68:	da413c17 	ldw	r9,1264(sp)
   11e6c:	1000851e 	bne	r2,zero,12084 <___vfprintf_internal_r+0x1884>
   11e70:	00bfffc4 	movi	r2,-1
   11e74:	e0817626 	beq	fp,r2,12450 <___vfprintf_internal_r+0x1c50>
   11e78:	008019c4 	movi	r2,103
   11e7c:	90817126 	beq	r18,r2,12444 <___vfprintf_internal_r+0x1c44>
   11e80:	008011c4 	movi	r2,71
   11e84:	90816f26 	beq	r18,r2,12444 <___vfprintf_internal_r+0x1c44>
   11e88:	82004014 	ori	r8,r16,256
   11e8c:	da012a15 	stw	r8,1192(sp)
   11e90:	a0017116 	blt	r20,zero,12458 <___vfprintf_internal_r+0x1c58>
   11e94:	d8012f05 	stb	zero,1212(sp)
   11e98:	00801984 	movi	r2,102
   11e9c:	90811226 	beq	r18,r2,122e8 <___vfprintf_internal_r+0x1ae8>
   11ea0:	00801184 	movi	r2,70
   11ea4:	90811026 	beq	r18,r2,122e8 <___vfprintf_internal_r+0x1ae8>
   11ea8:	00801944 	movi	r2,101
   11eac:	90819b26 	beq	r18,r2,1251c <___vfprintf_internal_r+0x1d1c>
   11eb0:	00801144 	movi	r2,69
   11eb4:	90819926 	beq	r18,r2,1251c <___vfprintf_internal_r+0x1d1c>
   11eb8:	e02f883a 	mov	r23,fp
   11ebc:	d8812404 	addi	r2,sp,1168
   11ec0:	d8800115 	stw	r2,4(sp)
   11ec4:	d8812304 	addi	r2,sp,1164
   11ec8:	d8800215 	stw	r2,8(sp)
   11ecc:	d8812204 	addi	r2,sp,1160
   11ed0:	ddc00015 	stw	r23,0(sp)
   11ed4:	d8800315 	stw	r2,12(sp)
   11ed8:	8809883a 	mov	r4,r17
   11edc:	b00b883a 	mov	r5,r22
   11ee0:	a00d883a 	mov	r6,r20
   11ee4:	01c00084 	movi	r7,2
   11ee8:	da413c15 	stw	r9,1264(sp)
   11eec:	00129980 	call	12998 <_dtoa_r>
   11ef0:	1027883a 	mov	r19,r2
   11ef4:	008019c4 	movi	r2,103
   11ef8:	da413c17 	ldw	r9,1264(sp)
   11efc:	90818c1e 	bne	r18,r2,12530 <___vfprintf_internal_r+0x1d30>
   11f00:	8080004c 	andi	r2,r16,1
   11f04:	10017926 	beq	r2,zero,124ec <___vfprintf_internal_r+0x1cec>
   11f08:	00801184 	movi	r2,70
   11f0c:	9dc7883a 	add	r3,r19,r23
   11f10:	90810626 	beq	r18,r2,1232c <___vfprintf_internal_r+0x1b2c>
   11f14:	b009883a 	mov	r4,r22
   11f18:	a00b883a 	mov	r5,r20
   11f1c:	000d883a 	mov	r6,zero
   11f20:	000f883a 	mov	r7,zero
   11f24:	d8c13b15 	stw	r3,1260(sp)
   11f28:	da413c15 	stw	r9,1264(sp)
   11f2c:	0018db40 	call	18db4 <__eqdf2>
   11f30:	d8c13b17 	ldw	r3,1260(sp)
   11f34:	da413c17 	ldw	r9,1264(sp)
   11f38:	10000726 	beq	r2,zero,11f58 <___vfprintf_internal_r+0x1758>
   11f3c:	d8812217 	ldw	r2,1160(sp)
   11f40:	10c1962e 	bgeu	r2,r3,1259c <___vfprintf_internal_r+0x1d9c>
   11f44:	01000c04 	movi	r4,48
   11f48:	11000005 	stb	r4,0(r2)
   11f4c:	10800044 	addi	r2,r2,1
   11f50:	d8812215 	stw	r2,1160(sp)
   11f54:	10fffc1e 	bne	r2,r3,11f48 <___vfprintf_internal_r+0x1748>
   11f58:	1cc7c83a 	sub	r3,r3,r19
   11f5c:	d8c13215 	stw	r3,1224(sp)
   11f60:	008019c4 	movi	r2,103
   11f64:	90810626 	beq	r18,r2,12380 <___vfprintf_internal_r+0x1b80>
   11f68:	008011c4 	movi	r2,71
   11f6c:	90810426 	beq	r18,r2,12380 <___vfprintf_internal_r+0x1b80>
   11f70:	00801984 	movi	r2,102
   11f74:	90819a1e 	bne	r18,r2,125e0 <___vfprintf_internal_r+0x1de0>
   11f78:	d8812417 	ldw	r2,1168(sp)
   11f7c:	d8812b15 	stw	r2,1196(sp)
   11f80:	0081880e 	bge	zero,r2,125a4 <___vfprintf_internal_r+0x1da4>
   11f84:	e000021e 	bne	fp,zero,11f90 <___vfprintf_internal_r+0x1790>
   11f88:	8400004c 	andi	r16,r16,1
   11f8c:	80000426 	beq	r16,zero,11fa0 <___vfprintf_internal_r+0x17a0>
   11f90:	d8812b17 	ldw	r2,1196(sp)
   11f94:	e2000044 	addi	r8,fp,1
   11f98:	1205883a 	add	r2,r2,r8
   11f9c:	d8812b15 	stw	r2,1196(sp)
   11fa0:	d8812815 	stw	r2,1184(sp)
   11fa4:	10011716 	blt	r2,zero,12404 <___vfprintf_internal_r+0x1c04>
   11fa8:	ddc12f07 	ldb	r23,1212(sp)
   11fac:	b800ca26 	beq	r23,zero,122d8 <___vfprintf_internal_r+0x1ad8>
   11fb0:	00800b44 	movi	r2,45
   11fb4:	d8812585 	stb	r2,1174(sp)
   11fb8:	dc012a17 	ldw	r16,1192(sp)
   11fbc:	d8013115 	stw	zero,1220(sp)
   11fc0:	003afe06 	br	10bbc <___vfprintf_internal_r+0x3bc>
   11fc4:	d8812b17 	ldw	r2,1196(sp)
   11fc8:	d8812815 	stw	r2,1184(sp)
   11fcc:	10005e16 	blt	r2,zero,12148 <___vfprintf_internal_r+0x1948>
   11fd0:	d8812583 	ldbu	r2,1174(sp)
   11fd4:	ddc12d15 	stw	r23,1204(sp)
   11fd8:	d8013115 	stw	zero,1220(sp)
   11fdc:	003af306 	br	10bac <___vfprintf_internal_r+0x3ac>
   11fe0:	d8812d17 	ldw	r2,1204(sp)
   11fe4:	15c00017 	ldw	r23,0(r2)
   11fe8:	10800104 	addi	r2,r2,4
   11fec:	d8812d15 	stw	r2,1204(sp)
   11ff0:	b82dd7fa 	srai	r22,r23,31
   11ff4:	b005883a 	mov	r2,r22
   11ff8:	003b4906 	br	10d20 <___vfprintf_internal_r+0x520>
   11ffc:	d8c12d17 	ldw	r3,1204(sp)
   12000:	002d883a 	mov	r22,zero
   12004:	1dc00017 	ldw	r23,0(r3)
   12008:	18c00104 	addi	r3,r3,4
   1200c:	d8c12d15 	stw	r3,1204(sp)
   12010:	b805883a 	mov	r2,r23
   12014:	00c00044 	movi	r3,1
   12018:	d8012585 	stb	zero,1174(sp)
   1201c:	003acf06 	br	10b5c <___vfprintf_internal_r+0x35c>
   12020:	da012d17 	ldw	r8,1204(sp)
   12024:	002d883a 	mov	r22,zero
   12028:	45c00017 	ldw	r23,0(r8)
   1202c:	42000104 	addi	r8,r8,4
   12030:	da012d15 	stw	r8,1204(sp)
   12034:	003be506 	br	10fcc <___vfprintf_internal_r+0x7cc>
   12038:	da012d17 	ldw	r8,1204(sp)
   1203c:	002d883a 	mov	r22,zero
   12040:	0007883a 	mov	r3,zero
   12044:	45c00017 	ldw	r23,0(r8)
   12048:	42000104 	addi	r8,r8,4
   1204c:	da012d15 	stw	r8,1204(sp)
   12050:	b805883a 	mov	r2,r23
   12054:	d8012585 	stb	zero,1174(sp)
   12058:	003ac006 	br	10b5c <___vfprintf_internal_r+0x35c>
   1205c:	d8c12d17 	ldw	r3,1204(sp)
   12060:	d9012c17 	ldw	r4,1200(sp)
   12064:	18800017 	ldw	r2,0(r3)
   12068:	18c00104 	addi	r3,r3,4
   1206c:	d8c12d15 	stw	r3,1204(sp)
   12070:	11000015 	stw	r4,0(r2)
   12074:	003a1806 	br	108d8 <___vfprintf_internal_r+0xd8>
   12078:	073fffc4 	movi	fp,-1
   1207c:	202b883a 	mov	r21,r4
   12080:	003a3e06 	br	1097c <___vfprintf_internal_r+0x17c>
   12084:	008011c4 	movi	r2,71
   12088:	14809016 	blt	r2,r18,122cc <___vfprintf_internal_r+0x1acc>
   1208c:	04c000f4 	movhi	r19,3
   12090:	9ce01f04 	addi	r19,r19,-32644
   12094:	00c000c4 	movi	r3,3
   12098:	00bfdfc4 	movi	r2,-129
   1209c:	80a0703a 	and	r16,r16,r2
   120a0:	d8c12815 	stw	r3,1184(sp)
   120a4:	d8812583 	ldbu	r2,1174(sp)
   120a8:	d8c12b15 	stw	r3,1196(sp)
   120ac:	d8013115 	stw	zero,1220(sp)
   120b0:	003abe06 	br	10bac <___vfprintf_internal_r+0x3ac>
   120b4:	d9412917 	ldw	r5,1188(sp)
   120b8:	8809883a 	mov	r4,r17
   120bc:	d9811b04 	addi	r6,sp,1132
   120c0:	00107cc0 	call	107cc <__sprint_r>
   120c4:	103b611e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   120c8:	dc812417 	ldw	r18,1168(sp)
   120cc:	da011d17 	ldw	r8,1140(sp)
   120d0:	da400404 	addi	r9,sp,16
   120d4:	003f3506 	br	11dac <___vfprintf_internal_r+0x15ac>
   120d8:	ad400044 	addi	r21,r21,1
   120dc:	84000814 	ori	r16,r16,32
   120e0:	14800047 	ldb	r18,1(r2)
   120e4:	003a2406 	br	10978 <___vfprintf_internal_r+0x178>
   120e8:	d9412917 	ldw	r5,1188(sp)
   120ec:	8809883a 	mov	r4,r17
   120f0:	d9811b04 	addi	r6,sp,1132
   120f4:	00107cc0 	call	107cc <__sprint_r>
   120f8:	103b541e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   120fc:	da011d17 	ldw	r8,1140(sp)
   12100:	da400404 	addi	r9,sp,16
   12104:	003d4a06 	br	11630 <___vfprintf_internal_r+0xe30>
   12108:	4d000015 	stw	r20,0(r9)
   1210c:	4c800115 	stw	r18,4(r9)
   12110:	4491883a 	add	r8,r8,r18
   12114:	18c00044 	addi	r3,r3,1
   12118:	da011d15 	stw	r8,1140(sp)
   1211c:	d8c11c15 	stw	r3,1136(sp)
   12120:	008001c4 	movi	r2,7
   12124:	10fcdc16 	blt	r2,r3,11498 <___vfprintf_internal_r+0xc98>
   12128:	4a400204 	addi	r9,r9,8
   1212c:	003ce106 	br	114b4 <___vfprintf_internal_r+0xcb4>
   12130:	da413c15 	stw	r9,1264(sp)
   12134:	00107400 	call	10740 <strlen>
   12138:	d8812b15 	stw	r2,1196(sp)
   1213c:	d8812815 	stw	r2,1184(sp)
   12140:	da413c17 	ldw	r9,1264(sp)
   12144:	103fa20e 	bge	r2,zero,11fd0 <___vfprintf_internal_r+0x17d0>
   12148:	d8012815 	stw	zero,1184(sp)
   1214c:	003fa006 	br	11fd0 <___vfprintf_internal_r+0x17d0>
   12150:	d9412917 	ldw	r5,1188(sp)
   12154:	8809883a 	mov	r4,r17
   12158:	d9811b04 	addi	r6,sp,1132
   1215c:	00107cc0 	call	107cc <__sprint_r>
   12160:	103b3a1e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   12164:	da011d17 	ldw	r8,1140(sp)
   12168:	d8c11c17 	ldw	r3,1136(sp)
   1216c:	da400404 	addi	r9,sp,16
   12170:	d8813217 	ldw	r2,1224(sp)
   12174:	4cc00015 	stw	r19,0(r9)
   12178:	48800115 	stw	r2,4(r9)
   1217c:	4091883a 	add	r8,r8,r2
   12180:	003c8106 	br	11388 <___vfprintf_internal_r+0xb88>
   12184:	00800b44 	movi	r2,45
   12188:	d8812585 	stb	r2,1174(sp)
   1218c:	003be306 	br	1111c <___vfprintf_internal_r+0x91c>
   12190:	4d000015 	stw	r20,0(r9)
   12194:	4c800115 	stw	r18,4(r9)
   12198:	4491883a 	add	r8,r8,r18
   1219c:	18c00044 	addi	r3,r3,1
   121a0:	da011d15 	stw	r8,1140(sp)
   121a4:	d8c11c15 	stw	r3,1136(sp)
   121a8:	008001c4 	movi	r2,7
   121ac:	10ffe816 	blt	r2,r3,12150 <___vfprintf_internal_r+0x1950>
   121b0:	4a400204 	addi	r9,r9,8
   121b4:	003fee06 	br	12170 <___vfprintf_internal_r+0x1970>
   121b8:	df012b15 	stw	fp,1196(sp)
   121bc:	00800184 	movi	r2,6
   121c0:	1700072e 	bgeu	r2,fp,121e0 <___vfprintf_internal_r+0x19e0>
   121c4:	d8812b15 	stw	r2,1196(sp)
   121c8:	d8812815 	stw	r2,1184(sp)
   121cc:	ddc12d15 	stw	r23,1204(sp)
   121d0:	04c000f4 	movhi	r19,3
   121d4:	9ce02b04 	addi	r19,r19,-32596
   121d8:	d8013115 	stw	zero,1220(sp)
   121dc:	003a7a06 	br	10bc8 <___vfprintf_internal_r+0x3c8>
   121e0:	d8812b17 	ldw	r2,1196(sp)
   121e4:	d8812815 	stw	r2,1184(sp)
   121e8:	103ff80e 	bge	r2,zero,121cc <___vfprintf_internal_r+0x19cc>
   121ec:	d8012815 	stw	zero,1184(sp)
   121f0:	003ff606 	br	121cc <___vfprintf_internal_r+0x19cc>
   121f4:	d9012d17 	ldw	r4,1204(sp)
   121f8:	da012c17 	ldw	r8,1200(sp)
   121fc:	20800017 	ldw	r2,0(r4)
   12200:	21000104 	addi	r4,r4,4
   12204:	d9012d15 	stw	r4,1204(sp)
   12208:	12000015 	stw	r8,0(r2)
   1220c:	0039b206 	br	108d8 <___vfprintf_internal_r+0xd8>
   12210:	d9412917 	ldw	r5,1188(sp)
   12214:	8809883a 	mov	r4,r17
   12218:	d9811b04 	addi	r6,sp,1132
   1221c:	00107cc0 	call	107cc <__sprint_r>
   12220:	103b0a1e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   12224:	dc812417 	ldw	r18,1168(sp)
   12228:	da011d17 	ldw	r8,1140(sp)
   1222c:	da400404 	addi	r9,sp,16
   12230:	003def06 	br	119f0 <___vfprintf_internal_r+0x11f0>
   12234:	d9412917 	ldw	r5,1188(sp)
   12238:	8809883a 	mov	r4,r17
   1223c:	d9811b04 	addi	r6,sp,1132
   12240:	00107cc0 	call	107cc <__sprint_r>
   12244:	103b011e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   12248:	dc812417 	ldw	r18,1168(sp)
   1224c:	da400404 	addi	r9,sp,16
   12250:	003eb906 	br	11d38 <___vfprintf_internal_r+0x1538>
   12254:	d9412917 	ldw	r5,1188(sp)
   12258:	8809883a 	mov	r4,r17
   1225c:	d9811b04 	addi	r6,sp,1132
   12260:	00107cc0 	call	107cc <__sprint_r>
   12264:	103af91e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   12268:	dc812417 	ldw	r18,1168(sp)
   1226c:	da011d17 	ldw	r8,1140(sp)
   12270:	d8c11c17 	ldw	r3,1136(sp)
   12274:	da400404 	addi	r9,sp,16
   12278:	003ea306 	br	11d08 <___vfprintf_internal_r+0x1508>
   1227c:	00800244 	movi	r2,9
   12280:	15fda636 	bltu	r2,r23,1191c <___vfprintf_internal_r+0x111c>
   12284:	dd010e04 	addi	r20,sp,1080
   12288:	003dc206 	br	11994 <___vfprintf_internal_r+0x1194>
   1228c:	df012815 	stw	fp,1184(sp)
   12290:	d8812583 	ldbu	r2,1174(sp)
   12294:	df012b15 	stw	fp,1196(sp)
   12298:	ddc12d15 	stw	r23,1204(sp)
   1229c:	d8013115 	stw	zero,1220(sp)
   122a0:	003a4206 	br	10bac <___vfprintf_internal_r+0x3ac>
   122a4:	d9412917 	ldw	r5,1188(sp)
   122a8:	8809883a 	mov	r4,r17
   122ac:	d9811b04 	addi	r6,sp,1132
   122b0:	00107cc0 	call	107cc <__sprint_r>
   122b4:	103ae51e 	bne	r2,zero,10e4c <___vfprintf_internal_r+0x64c>
   122b8:	dc812417 	ldw	r18,1168(sp)
   122bc:	da011d17 	ldw	r8,1140(sp)
   122c0:	d8c11c17 	ldw	r3,1136(sp)
   122c4:	da400404 	addi	r9,sp,16
   122c8:	003ec906 	br	11df0 <___vfprintf_internal_r+0x15f0>
   122cc:	04c000f4 	movhi	r19,3
   122d0:	9ce02004 	addi	r19,r19,-32640
   122d4:	003f6f06 	br	12094 <___vfprintf_internal_r+0x1894>
   122d8:	d8812583 	ldbu	r2,1174(sp)
   122dc:	dc012a17 	ldw	r16,1192(sp)
   122e0:	d8013115 	stw	zero,1220(sp)
   122e4:	003a3106 	br	10bac <___vfprintf_internal_r+0x3ac>
   122e8:	d8812404 	addi	r2,sp,1168
   122ec:	d8800115 	stw	r2,4(sp)
   122f0:	d8812304 	addi	r2,sp,1164
   122f4:	d8800215 	stw	r2,8(sp)
   122f8:	d8812204 	addi	r2,sp,1160
   122fc:	df000015 	stw	fp,0(sp)
   12300:	d8800315 	stw	r2,12(sp)
   12304:	8809883a 	mov	r4,r17
   12308:	b00b883a 	mov	r5,r22
   1230c:	a00d883a 	mov	r6,r20
   12310:	01c000c4 	movi	r7,3
   12314:	da413c15 	stw	r9,1264(sp)
   12318:	00129980 	call	12998 <_dtoa_r>
   1231c:	da413c17 	ldw	r9,1264(sp)
   12320:	1027883a 	mov	r19,r2
   12324:	1707883a 	add	r3,r2,fp
   12328:	e02f883a 	mov	r23,fp
   1232c:	99000007 	ldb	r4,0(r19)
   12330:	00800c04 	movi	r2,48
   12334:	20800326 	beq	r4,r2,12344 <___vfprintf_internal_r+0x1b44>
   12338:	da812417 	ldw	r10,1168(sp)
   1233c:	1a87883a 	add	r3,r3,r10
   12340:	003ef406 	br	11f14 <___vfprintf_internal_r+0x1714>
   12344:	b009883a 	mov	r4,r22
   12348:	a00b883a 	mov	r5,r20
   1234c:	000d883a 	mov	r6,zero
   12350:	000f883a 	mov	r7,zero
   12354:	d8c13b15 	stw	r3,1260(sp)
   12358:	da413c15 	stw	r9,1264(sp)
   1235c:	0018e100 	call	18e10 <__nedf2>
   12360:	d8c13b17 	ldw	r3,1260(sp)
   12364:	da413c17 	ldw	r9,1264(sp)
   12368:	103ff326 	beq	r2,zero,12338 <___vfprintf_internal_r+0x1b38>
   1236c:	00800044 	movi	r2,1
   12370:	15d5c83a 	sub	r10,r2,r23
   12374:	da812415 	stw	r10,1168(sp)
   12378:	1a87883a 	add	r3,r3,r10
   1237c:	003ee506 	br	11f14 <___vfprintf_internal_r+0x1714>
   12380:	d8812417 	ldw	r2,1168(sp)
   12384:	d8812b15 	stw	r2,1196(sp)
   12388:	1029883a 	mov	r20,r2
   1238c:	00bfff44 	movi	r2,-3
   12390:	a0800116 	blt	r20,r2,12398 <___vfprintf_internal_r+0x1b98>
   12394:	e5001d0e 	bge	fp,r20,1240c <___vfprintf_internal_r+0x1c0c>
   12398:	94bfff84 	addi	r18,r18,-2
   1239c:	a53fffc4 	addi	r20,r20,-1
   123a0:	dd012415 	stw	r20,1168(sp)
   123a4:	dc811fc5 	stb	r18,1151(sp)
   123a8:	a0007816 	blt	r20,zero,1258c <___vfprintf_internal_r+0x1d8c>
   123ac:	00800ac4 	movi	r2,43
   123b0:	d8812005 	stb	r2,1152(sp)
   123b4:	00800244 	movi	r2,9
   123b8:	15002b16 	blt	r2,r20,12468 <___vfprintf_internal_r+0x1c68>
   123bc:	00800c04 	movi	r2,48
   123c0:	a5000c04 	addi	r20,r20,48
   123c4:	d8812045 	stb	r2,1153(sp)
   123c8:	dd012085 	stb	r20,1154(sp)
   123cc:	d8c120c4 	addi	r3,sp,1155
   123d0:	d8811fc4 	addi	r2,sp,1151
   123d4:	da013217 	ldw	r8,1224(sp)
   123d8:	1885c83a 	sub	r2,r3,r2
   123dc:	d8813515 	stw	r2,1236(sp)
   123e0:	4085883a 	add	r2,r8,r2
   123e4:	d8812b15 	stw	r2,1196(sp)
   123e8:	00800044 	movi	r2,1
   123ec:	1200610e 	bge	r2,r8,12574 <___vfprintf_internal_r+0x1d74>
   123f0:	d8812b17 	ldw	r2,1196(sp)
   123f4:	10800044 	addi	r2,r2,1
   123f8:	d8812b15 	stw	r2,1196(sp)
   123fc:	d8812815 	stw	r2,1184(sp)
   12400:	103ee90e 	bge	r2,zero,11fa8 <___vfprintf_internal_r+0x17a8>
   12404:	d8012815 	stw	zero,1184(sp)
   12408:	003ee706 	br	11fa8 <___vfprintf_internal_r+0x17a8>
   1240c:	d8812b17 	ldw	r2,1196(sp)
   12410:	da013217 	ldw	r8,1224(sp)
   12414:	12003716 	blt	r2,r8,124f4 <___vfprintf_internal_r+0x1cf4>
   12418:	8400004c 	andi	r16,r16,1
   1241c:	80000326 	beq	r16,zero,1242c <___vfprintf_internal_r+0x1c2c>
   12420:	d8812b17 	ldw	r2,1196(sp)
   12424:	10800044 	addi	r2,r2,1
   12428:	d8812b15 	stw	r2,1196(sp)
   1242c:	d8812815 	stw	r2,1184(sp)
   12430:	10003716 	blt	r2,zero,12510 <___vfprintf_internal_r+0x1d10>
   12434:	048019c4 	movi	r18,103
   12438:	003edb06 	br	11fa8 <___vfprintf_internal_r+0x17a8>
   1243c:	d8012815 	stw	zero,1184(sp)
   12440:	003b6906 	br	111e8 <___vfprintf_internal_r+0x9e8>
   12444:	e03e901e 	bne	fp,zero,11e88 <___vfprintf_internal_r+0x1688>
   12448:	07000044 	movi	fp,1
   1244c:	003e8e06 	br	11e88 <___vfprintf_internal_r+0x1688>
   12450:	07000184 	movi	fp,6
   12454:	003e8c06 	br	11e88 <___vfprintf_internal_r+0x1688>
   12458:	00c00b44 	movi	r3,45
   1245c:	a520003c 	xorhi	r20,r20,32768
   12460:	d8c12f05 	stb	r3,1212(sp)
   12464:	003e8c06 	br	11e98 <___vfprintf_internal_r+0x1698>
   12468:	d8c11f84 	addi	r3,sp,1150
   1246c:	102f883a 	mov	r23,r2
   12470:	4839883a 	mov	fp,r9
   12474:	a009883a 	mov	r4,r20
   12478:	01400284 	movi	r5,10
   1247c:	182d883a 	mov	r22,r3
   12480:	00193180 	call	19318 <__modsi3>
   12484:	10800c04 	addi	r2,r2,48
   12488:	a009883a 	mov	r4,r20
   1248c:	b0800005 	stb	r2,0(r22)
   12490:	01400284 	movi	r5,10
   12494:	00192c80 	call	192c8 <__divsi3>
   12498:	1029883a 	mov	r20,r2
   1249c:	b0ffffc4 	addi	r3,r22,-1
   124a0:	b8bff416 	blt	r23,r2,12474 <___vfprintf_internal_r+0x1c74>
   124a4:	11400c04 	addi	r5,r2,48
   124a8:	b17fffc5 	stb	r5,-1(r22)
   124ac:	d8811fc4 	addi	r2,sp,1151
   124b0:	e013883a 	mov	r9,fp
   124b4:	1880482e 	bgeu	r3,r2,125d8 <___vfprintf_internal_r+0x1dd8>
   124b8:	b007883a 	mov	r3,r22
   124bc:	d9012044 	addi	r4,sp,1153
   124c0:	00000206 	br	124cc <___vfprintf_internal_r+0x1ccc>
   124c4:	19400003 	ldbu	r5,0(r3)
   124c8:	18c00044 	addi	r3,r3,1
   124cc:	21400005 	stb	r5,0(r4)
   124d0:	21000044 	addi	r4,r4,1
   124d4:	10fffb1e 	bne	r2,r3,124c4 <___vfprintf_internal_r+0x1cc4>
   124d8:	d8c12004 	addi	r3,sp,1152
   124dc:	1d87c83a 	sub	r3,r3,r22
   124e0:	d9012044 	addi	r4,sp,1153
   124e4:	20c7883a 	add	r3,r4,r3
   124e8:	003fba06 	br	123d4 <___vfprintf_internal_r+0x1bd4>
   124ec:	d8c12217 	ldw	r3,1160(sp)
   124f0:	003e9906 	br	11f58 <___vfprintf_internal_r+0x1758>
   124f4:	05000b0e 	bge	zero,r20,12524 <___vfprintf_internal_r+0x1d24>
   124f8:	05000044 	movi	r20,1
   124fc:	da013217 	ldw	r8,1224(sp)
   12500:	a229883a 	add	r20,r20,r8
   12504:	dd012b15 	stw	r20,1196(sp)
   12508:	dd012815 	stw	r20,1184(sp)
   1250c:	a03fc90e 	bge	r20,zero,12434 <___vfprintf_internal_r+0x1c34>
   12510:	d8012815 	stw	zero,1184(sp)
   12514:	048019c4 	movi	r18,103
   12518:	003ea306 	br	11fa8 <___vfprintf_internal_r+0x17a8>
   1251c:	e5c00044 	addi	r23,fp,1
   12520:	003e6606 	br	11ebc <___vfprintf_internal_r+0x16bc>
   12524:	00800084 	movi	r2,2
   12528:	1529c83a 	sub	r20,r2,r20
   1252c:	003ff306 	br	124fc <___vfprintf_internal_r+0x1cfc>
   12530:	008011c4 	movi	r2,71
   12534:	90be7226 	beq	r18,r2,11f00 <___vfprintf_internal_r+0x1700>
   12538:	003e7306 	br	11f08 <___vfprintf_internal_r+0x1708>
   1253c:	d8812d17 	ldw	r2,1204(sp)
   12540:	ac800043 	ldbu	r18,1(r21)
   12544:	202b883a 	mov	r21,r4
   12548:	17000017 	ldw	fp,0(r2)
   1254c:	10800104 	addi	r2,r2,4
   12550:	d8812d15 	stw	r2,1204(sp)
   12554:	e0001b16 	blt	fp,zero,125c4 <___vfprintf_internal_r+0x1dc4>
   12558:	94803fcc 	andi	r18,r18,255
   1255c:	9480201c 	xori	r18,r18,128
   12560:	94bfe004 	addi	r18,r18,-128
   12564:	00390406 	br	10978 <___vfprintf_internal_r+0x178>
   12568:	00bfffc4 	movi	r2,-1
   1256c:	d8812c15 	stw	r2,1200(sp)
   12570:	003a2506 	br	10e08 <___vfprintf_internal_r+0x608>
   12574:	80a0703a 	and	r16,r16,r2
   12578:	803f9d1e 	bne	r16,zero,123f0 <___vfprintf_internal_r+0x1bf0>
   1257c:	d8812b17 	ldw	r2,1196(sp)
   12580:	d8812815 	stw	r2,1184(sp)
   12584:	103e880e 	bge	r2,zero,11fa8 <___vfprintf_internal_r+0x17a8>
   12588:	003f9e06 	br	12404 <___vfprintf_internal_r+0x1c04>
   1258c:	00800b44 	movi	r2,45
   12590:	0529c83a 	sub	r20,zero,r20
   12594:	d8812005 	stb	r2,1152(sp)
   12598:	003f8606 	br	123b4 <___vfprintf_internal_r+0x1bb4>
   1259c:	1007883a 	mov	r3,r2
   125a0:	003e6d06 	br	11f58 <___vfprintf_internal_r+0x1758>
   125a4:	e000021e 	bne	fp,zero,125b0 <___vfprintf_internal_r+0x1db0>
   125a8:	8400004c 	andi	r16,r16,1
   125ac:	80000e26 	beq	r16,zero,125e8 <___vfprintf_internal_r+0x1de8>
   125b0:	e7000084 	addi	fp,fp,2
   125b4:	df012b15 	stw	fp,1196(sp)
   125b8:	df012815 	stw	fp,1184(sp)
   125bc:	e03e7a0e 	bge	fp,zero,11fa8 <___vfprintf_internal_r+0x17a8>
   125c0:	003f9006 	br	12404 <___vfprintf_internal_r+0x1c04>
   125c4:	94803fcc 	andi	r18,r18,255
   125c8:	9480201c 	xori	r18,r18,128
   125cc:	073fffc4 	movi	fp,-1
   125d0:	94bfe004 	addi	r18,r18,-128
   125d4:	0038e806 	br	10978 <___vfprintf_internal_r+0x178>
   125d8:	d8c12044 	addi	r3,sp,1153
   125dc:	003f7d06 	br	123d4 <___vfprintf_internal_r+0x1bd4>
   125e0:	dd012417 	ldw	r20,1168(sp)
   125e4:	003f6d06 	br	1239c <___vfprintf_internal_r+0x1b9c>
   125e8:	00c00044 	movi	r3,1
   125ec:	d8c12815 	stw	r3,1184(sp)
   125f0:	d8c12b15 	stw	r3,1196(sp)
   125f4:	003e6c06 	br	11fa8 <___vfprintf_internal_r+0x17a8>

000125f8 <__vfprintf_internal>:
   125f8:	008000f4 	movhi	r2,3
   125fc:	10a76e04 	addi	r2,r2,-25160
   12600:	2007883a 	mov	r3,r4
   12604:	11000017 	ldw	r4,0(r2)
   12608:	2805883a 	mov	r2,r5
   1260c:	300f883a 	mov	r7,r6
   12610:	180b883a 	mov	r5,r3
   12614:	100d883a 	mov	r6,r2
   12618:	00108001 	jmpi	10800 <___vfprintf_internal_r>

0001261c <__swsetup_r>:
   1261c:	008000f4 	movhi	r2,3
   12620:	10a76e04 	addi	r2,r2,-25160
   12624:	10800017 	ldw	r2,0(r2)
   12628:	defffd04 	addi	sp,sp,-12
   1262c:	dc400115 	stw	r17,4(sp)
   12630:	dc000015 	stw	r16,0(sp)
   12634:	dfc00215 	stw	ra,8(sp)
   12638:	2023883a 	mov	r17,r4
   1263c:	2821883a 	mov	r16,r5
   12640:	10000226 	beq	r2,zero,1264c <__swsetup_r+0x30>
   12644:	10c00e17 	ldw	r3,56(r2)
   12648:	18003d26 	beq	r3,zero,12740 <__swsetup_r+0x124>
   1264c:	8080030b 	ldhu	r2,12(r16)
   12650:	10c0020c 	andi	r3,r2,8
   12654:	18ffffcc 	andi	r3,r3,65535
   12658:	18e0001c 	xori	r3,r3,32768
   1265c:	18e00004 	addi	r3,r3,-32768
   12660:	18001226 	beq	r3,zero,126ac <__swsetup_r+0x90>
   12664:	80c00417 	ldw	r3,16(r16)
   12668:	18001f26 	beq	r3,zero,126e8 <__swsetup_r+0xcc>
   1266c:	1100004c 	andi	r4,r2,1
   12670:	2000261e 	bne	r4,zero,1270c <__swsetup_r+0xf0>
   12674:	1080008c 	andi	r2,r2,2
   12678:	10bfffcc 	andi	r2,r2,65535
   1267c:	10a0001c 	xori	r2,r2,32768
   12680:	10a00004 	addi	r2,r2,-32768
   12684:	1000311e 	bne	r2,zero,1274c <__swsetup_r+0x130>
   12688:	80800517 	ldw	r2,20(r16)
   1268c:	80800215 	stw	r2,8(r16)
   12690:	18002326 	beq	r3,zero,12720 <__swsetup_r+0x104>
   12694:	0005883a 	mov	r2,zero
   12698:	dfc00217 	ldw	ra,8(sp)
   1269c:	dc400117 	ldw	r17,4(sp)
   126a0:	dc000017 	ldw	r16,0(sp)
   126a4:	dec00304 	addi	sp,sp,12
   126a8:	f800283a 	ret
   126ac:	10c0040c 	andi	r3,r2,16
   126b0:	18ffffcc 	andi	r3,r3,65535
   126b4:	18e0001c 	xori	r3,r3,32768
   126b8:	18e00004 	addi	r3,r3,-32768
   126bc:	18001e26 	beq	r3,zero,12738 <__swsetup_r+0x11c>
   126c0:	10c0010c 	andi	r3,r2,4
   126c4:	18ffffcc 	andi	r3,r3,65535
   126c8:	18e0001c 	xori	r3,r3,32768
   126cc:	18e00004 	addi	r3,r3,-32768
   126d0:	1800211e 	bne	r3,zero,12758 <__swsetup_r+0x13c>
   126d4:	80c00417 	ldw	r3,16(r16)
   126d8:	11400214 	ori	r5,r2,8
   126dc:	8140030d 	sth	r5,12(r16)
   126e0:	2805883a 	mov	r2,r5
   126e4:	183fe11e 	bne	r3,zero,1266c <__swsetup_r+0x50>
   126e8:	1140a00c 	andi	r5,r2,640
   126ec:	01008004 	movi	r4,512
   126f0:	293fde26 	beq	r5,r4,1266c <__swsetup_r+0x50>
   126f4:	8809883a 	mov	r4,r17
   126f8:	800b883a 	mov	r5,r16
   126fc:	0014fd00 	call	14fd0 <__smakebuf_r>
   12700:	8080030b 	ldhu	r2,12(r16)
   12704:	80c00417 	ldw	r3,16(r16)
   12708:	003fd806 	br	1266c <__swsetup_r+0x50>
   1270c:	80800517 	ldw	r2,20(r16)
   12710:	80000215 	stw	zero,8(r16)
   12714:	0085c83a 	sub	r2,zero,r2
   12718:	80800615 	stw	r2,24(r16)
   1271c:	183fdd1e 	bne	r3,zero,12694 <__swsetup_r+0x78>
   12720:	8080030b 	ldhu	r2,12(r16)
   12724:	1080200c 	andi	r2,r2,128
   12728:	10bfffcc 	andi	r2,r2,65535
   1272c:	10a0001c 	xori	r2,r2,32768
   12730:	10a00004 	addi	r2,r2,-32768
   12734:	103fd826 	beq	r2,zero,12698 <__swsetup_r+0x7c>
   12738:	00bfffc4 	movi	r2,-1
   1273c:	003fd606 	br	12698 <__swsetup_r+0x7c>
   12740:	1009883a 	mov	r4,r2
   12744:	001425c0 	call	1425c <__sinit>
   12748:	003fc006 	br	1264c <__swsetup_r+0x30>
   1274c:	0005883a 	mov	r2,zero
   12750:	80800215 	stw	r2,8(r16)
   12754:	003fce06 	br	12690 <__swsetup_r+0x74>
   12758:	81400c17 	ldw	r5,48(r16)
   1275c:	28000626 	beq	r5,zero,12778 <__swsetup_r+0x15c>
   12760:	80c01004 	addi	r3,r16,64
   12764:	28c00326 	beq	r5,r3,12774 <__swsetup_r+0x158>
   12768:	8809883a 	mov	r4,r17
   1276c:	00145e00 	call	145e0 <_free_r>
   12770:	8080030b 	ldhu	r2,12(r16)
   12774:	80000c15 	stw	zero,48(r16)
   12778:	80c00417 	ldw	r3,16(r16)
   1277c:	013ff6c4 	movi	r4,-37
   12780:	2084703a 	and	r2,r4,r2
   12784:	80000115 	stw	zero,4(r16)
   12788:	80c00015 	stw	r3,0(r16)
   1278c:	003fd206 	br	126d8 <__swsetup_r+0xbc>

00012790 <quorem>:
   12790:	defff704 	addi	sp,sp,-36
   12794:	dc400115 	stw	r17,4(sp)
   12798:	20800417 	ldw	r2,16(r4)
   1279c:	2c400417 	ldw	r17,16(r5)
   127a0:	dd800615 	stw	r22,24(sp)
   127a4:	dd400515 	stw	r21,20(sp)
   127a8:	dfc00815 	stw	ra,32(sp)
   127ac:	ddc00715 	stw	r23,28(sp)
   127b0:	dd000415 	stw	r20,16(sp)
   127b4:	dcc00315 	stw	r19,12(sp)
   127b8:	dc800215 	stw	r18,8(sp)
   127bc:	dc000015 	stw	r16,0(sp)
   127c0:	202b883a 	mov	r21,r4
   127c4:	282d883a 	mov	r22,r5
   127c8:	14407116 	blt	r2,r17,12990 <quorem+0x200>
   127cc:	88800104 	addi	r2,r17,4
   127d0:	1085883a 	add	r2,r2,r2
   127d4:	1085883a 	add	r2,r2,r2
   127d8:	28a7883a 	add	r19,r5,r2
   127dc:	2085883a 	add	r2,r4,r2
   127e0:	15c00017 	ldw	r23,0(r2)
   127e4:	99400017 	ldw	r5,0(r19)
   127e8:	8c7fffc4 	addi	r17,r17,-1
   127ec:	b809883a 	mov	r4,r23
   127f0:	29400044 	addi	r5,r5,1
   127f4:	00193740 	call	19374 <__udivsi3>
   127f8:	1025883a 	mov	r18,r2
   127fc:	b4000504 	addi	r16,r22,20
   12800:	ad000504 	addi	r20,r21,20
   12804:	10002d26 	beq	r2,zero,128bc <quorem+0x12c>
   12808:	800d883a 	mov	r6,r16
   1280c:	a007883a 	mov	r3,r20
   12810:	000f883a 	mov	r7,zero
   12814:	0005883a 	mov	r2,zero
   12818:	32c00017 	ldw	r11,0(r6)
   1281c:	1a400017 	ldw	r9,0(r3)
   12820:	31800104 	addi	r6,r6,4
   12824:	5abfffcc 	andi	r10,r11,65535
   12828:	5495383a 	mul	r10,r10,r18
   1282c:	5816d43a 	srli	r11,r11,16
   12830:	4a3fffcc 	andi	r8,r9,65535
   12834:	3a95883a 	add	r10,r7,r10
   12838:	500ed43a 	srli	r7,r10,16
   1283c:	5c97383a 	mul	r11,r11,r18
   12840:	4085883a 	add	r2,r8,r2
   12844:	52bfffcc 	andi	r10,r10,65535
   12848:	1291c83a 	sub	r8,r2,r10
   1284c:	4804d43a 	srli	r2,r9,16
   12850:	3acf883a 	add	r7,r7,r11
   12854:	4015d43a 	srai	r10,r8,16
   12858:	393fffcc 	andi	r4,r7,65535
   1285c:	1105c83a 	sub	r2,r2,r4
   12860:	1285883a 	add	r2,r2,r10
   12864:	1880008d 	sth	r2,2(r3)
   12868:	1a00000d 	sth	r8,0(r3)
   1286c:	380ed43a 	srli	r7,r7,16
   12870:	1005d43a 	srai	r2,r2,16
   12874:	18c00104 	addi	r3,r3,4
   12878:	99bfe72e 	bgeu	r19,r6,12818 <quorem+0x88>
   1287c:	b8000f1e 	bne	r23,zero,128bc <quorem+0x12c>
   12880:	88800144 	addi	r2,r17,5
   12884:	1085883a 	add	r2,r2,r2
   12888:	1085883a 	add	r2,r2,r2
   1288c:	a887883a 	add	r3,r21,r2
   12890:	18bfff04 	addi	r2,r3,-4
   12894:	a080082e 	bgeu	r20,r2,128b8 <quorem+0x128>
   12898:	18ffff17 	ldw	r3,-4(r3)
   1289c:	18000326 	beq	r3,zero,128ac <quorem+0x11c>
   128a0:	00000506 	br	128b8 <quorem+0x128>
   128a4:	10c00017 	ldw	r3,0(r2)
   128a8:	1800031e 	bne	r3,zero,128b8 <quorem+0x128>
   128ac:	10bfff04 	addi	r2,r2,-4
   128b0:	8c7fffc4 	addi	r17,r17,-1
   128b4:	a0bffb36 	bltu	r20,r2,128a4 <quorem+0x114>
   128b8:	ac400415 	stw	r17,16(r21)
   128bc:	a809883a 	mov	r4,r21
   128c0:	b00b883a 	mov	r5,r22
   128c4:	00165940 	call	16594 <__mcmp>
   128c8:	10002516 	blt	r2,zero,12960 <quorem+0x1d0>
   128cc:	94800044 	addi	r18,r18,1
   128d0:	a007883a 	mov	r3,r20
   128d4:	000b883a 	mov	r5,zero
   128d8:	1a000017 	ldw	r8,0(r3)
   128dc:	81c00017 	ldw	r7,0(r16)
   128e0:	84000104 	addi	r16,r16,4
   128e4:	41bfffcc 	andi	r6,r8,65535
   128e8:	38bfffcc 	andi	r2,r7,65535
   128ec:	314b883a 	add	r5,r6,r5
   128f0:	288dc83a 	sub	r6,r5,r2
   128f4:	380ed43a 	srli	r7,r7,16
   128f8:	400ad43a 	srli	r5,r8,16
   128fc:	3005d43a 	srai	r2,r6,16
   12900:	1980000d 	sth	r6,0(r3)
   12904:	29cbc83a 	sub	r5,r5,r7
   12908:	288b883a 	add	r5,r5,r2
   1290c:	1940008d 	sth	r5,2(r3)
   12910:	280bd43a 	srai	r5,r5,16
   12914:	18c00104 	addi	r3,r3,4
   12918:	9c3fef2e 	bgeu	r19,r16,128d8 <quorem+0x148>
   1291c:	88800144 	addi	r2,r17,5
   12920:	1085883a 	add	r2,r2,r2
   12924:	1085883a 	add	r2,r2,r2
   12928:	a885883a 	add	r2,r21,r2
   1292c:	10c00017 	ldw	r3,0(r2)
   12930:	18000b1e 	bne	r3,zero,12960 <quorem+0x1d0>
   12934:	10ffff04 	addi	r3,r2,-4
   12938:	a0c0082e 	bgeu	r20,r3,1295c <quorem+0x1cc>
   1293c:	10bfff17 	ldw	r2,-4(r2)
   12940:	10000326 	beq	r2,zero,12950 <quorem+0x1c0>
   12944:	00000506 	br	1295c <quorem+0x1cc>
   12948:	18800017 	ldw	r2,0(r3)
   1294c:	1000031e 	bne	r2,zero,1295c <quorem+0x1cc>
   12950:	18ffff04 	addi	r3,r3,-4
   12954:	8c7fffc4 	addi	r17,r17,-1
   12958:	a0fffb36 	bltu	r20,r3,12948 <quorem+0x1b8>
   1295c:	ac400415 	stw	r17,16(r21)
   12960:	9005883a 	mov	r2,r18
   12964:	dfc00817 	ldw	ra,32(sp)
   12968:	ddc00717 	ldw	r23,28(sp)
   1296c:	dd800617 	ldw	r22,24(sp)
   12970:	dd400517 	ldw	r21,20(sp)
   12974:	dd000417 	ldw	r20,16(sp)
   12978:	dcc00317 	ldw	r19,12(sp)
   1297c:	dc800217 	ldw	r18,8(sp)
   12980:	dc400117 	ldw	r17,4(sp)
   12984:	dc000017 	ldw	r16,0(sp)
   12988:	dec00904 	addi	sp,sp,36
   1298c:	f800283a 	ret
   12990:	0005883a 	mov	r2,zero
   12994:	003ff306 	br	12964 <quorem+0x1d4>

00012998 <_dtoa_r>:
   12998:	20801017 	ldw	r2,64(r4)
   1299c:	deffdf04 	addi	sp,sp,-132
   129a0:	dcc01a15 	stw	r19,104(sp)
   129a4:	dc801915 	stw	r18,100(sp)
   129a8:	dc401815 	stw	r17,96(sp)
   129ac:	dc001715 	stw	r16,92(sp)
   129b0:	dfc02015 	stw	ra,128(sp)
   129b4:	df001f15 	stw	fp,124(sp)
   129b8:	ddc01e15 	stw	r23,120(sp)
   129bc:	dd801d15 	stw	r22,116(sp)
   129c0:	dd401c15 	stw	r21,112(sp)
   129c4:	dd001b15 	stw	r20,108(sp)
   129c8:	d9400315 	stw	r5,12(sp)
   129cc:	d9c00415 	stw	r7,16(sp)
   129d0:	2021883a 	mov	r16,r4
   129d4:	3025883a 	mov	r18,r6
   129d8:	dcc02317 	ldw	r19,140(sp)
   129dc:	3023883a 	mov	r17,r6
   129e0:	10000826 	beq	r2,zero,12a04 <_dtoa_r+0x6c>
   129e4:	20c01117 	ldw	r3,68(r4)
   129e8:	01800044 	movi	r6,1
   129ec:	100b883a 	mov	r5,r2
   129f0:	30cc983a 	sll	r6,r6,r3
   129f4:	10c00115 	stw	r3,4(r2)
   129f8:	11800215 	stw	r6,8(r2)
   129fc:	0015d980 	call	15d98 <_Bfree>
   12a00:	80001015 	stw	zero,64(r16)
   12a04:	90002f16 	blt	r18,zero,12ac4 <_dtoa_r+0x12c>
   12a08:	98000015 	stw	zero,0(r19)
   12a0c:	90dffc2c 	andhi	r3,r18,32752
   12a10:	009ffc34 	movhi	r2,32752
   12a14:	18801c26 	beq	r3,r2,12a88 <_dtoa_r+0xf0>
   12a18:	d9000317 	ldw	r4,12(sp)
   12a1c:	880b883a 	mov	r5,r17
   12a20:	000d883a 	mov	r6,zero
   12a24:	000f883a 	mov	r7,zero
   12a28:	0018db40 	call	18db4 <__eqdf2>
   12a2c:	10002c1e 	bne	r2,zero,12ae0 <_dtoa_r+0x148>
   12a30:	d9002217 	ldw	r4,136(sp)
   12a34:	d9c02417 	ldw	r7,144(sp)
   12a38:	00800044 	movi	r2,1
   12a3c:	20800015 	stw	r2,0(r4)
   12a40:	38019426 	beq	r7,zero,13094 <_dtoa_r+0x6fc>
   12a44:	008000f4 	movhi	r2,3
   12a48:	10a02d44 	addi	r2,r2,-32587
   12a4c:	38800015 	stw	r2,0(r7)
   12a50:	15ffffc4 	addi	r23,r2,-1
   12a54:	b805883a 	mov	r2,r23
   12a58:	dfc02017 	ldw	ra,128(sp)
   12a5c:	df001f17 	ldw	fp,124(sp)
   12a60:	ddc01e17 	ldw	r23,120(sp)
   12a64:	dd801d17 	ldw	r22,116(sp)
   12a68:	dd401c17 	ldw	r21,112(sp)
   12a6c:	dd001b17 	ldw	r20,108(sp)
   12a70:	dcc01a17 	ldw	r19,104(sp)
   12a74:	dc801917 	ldw	r18,100(sp)
   12a78:	dc401817 	ldw	r17,96(sp)
   12a7c:	dc001717 	ldw	r16,92(sp)
   12a80:	dec02104 	addi	sp,sp,132
   12a84:	f800283a 	ret
   12a88:	d8c02217 	ldw	r3,136(sp)
   12a8c:	d9000317 	ldw	r4,12(sp)
   12a90:	0089c3c4 	movi	r2,9999
   12a94:	18800015 	stw	r2,0(r3)
   12a98:	20016c26 	beq	r4,zero,1304c <_dtoa_r+0x6b4>
   12a9c:	05c000f4 	movhi	r23,3
   12aa0:	bde03904 	addi	r23,r23,-32540
   12aa4:	d9c02417 	ldw	r7,144(sp)
   12aa8:	383fea26 	beq	r7,zero,12a54 <_dtoa_r+0xbc>
   12aac:	b88000c7 	ldb	r2,3(r23)
   12ab0:	10016d1e 	bne	r2,zero,13068 <_dtoa_r+0x6d0>
   12ab4:	b88000c4 	addi	r2,r23,3
   12ab8:	d8c02417 	ldw	r3,144(sp)
   12abc:	18800015 	stw	r2,0(r3)
   12ac0:	003fe406 	br	12a54 <_dtoa_r+0xbc>
   12ac4:	04600034 	movhi	r17,32768
   12ac8:	8c7fffc4 	addi	r17,r17,-1
   12acc:	9462703a 	and	r17,r18,r17
   12ad0:	00800044 	movi	r2,1
   12ad4:	98800015 	stw	r2,0(r19)
   12ad8:	8825883a 	mov	r18,r17
   12adc:	003fcb06 	br	12a0c <_dtoa_r+0x74>
   12ae0:	d9400317 	ldw	r5,12(sp)
   12ae4:	9028d53a 	srli	r20,r18,20
   12ae8:	d8800204 	addi	r2,sp,8
   12aec:	d8800015 	stw	r2,0(sp)
   12af0:	8009883a 	mov	r4,r16
   12af4:	880d883a 	mov	r6,r17
   12af8:	d9c00104 	addi	r7,sp,4
   12afc:	001693c0 	call	1693c <__d2b>
   12b00:	a501ffcc 	andi	r20,r20,2047
   12b04:	1039883a 	mov	fp,r2
   12b08:	a001591e 	bne	r20,zero,13070 <_dtoa_r+0x6d8>
   12b0c:	dd400217 	ldw	r21,8(sp)
   12b10:	dd000117 	ldw	r20,4(sp)
   12b14:	00befbc4 	movi	r2,-1041
   12b18:	ad29883a 	add	r20,r21,r20
   12b1c:	a082d216 	blt	r20,r2,13668 <_dtoa_r+0xcd0>
   12b20:	d8c00317 	ldw	r3,12(sp)
   12b24:	013f0384 	movi	r4,-1010
   12b28:	2509c83a 	sub	r4,r4,r20
   12b2c:	a0810484 	addi	r2,r20,1042
   12b30:	9124983a 	sll	r18,r18,r4
   12b34:	1884d83a 	srl	r2,r3,r2
   12b38:	9088b03a 	or	r4,r18,r2
   12b3c:	00191380 	call	19138 <__floatunsidf>
   12b40:	1009883a 	mov	r4,r2
   12b44:	017f8434 	movhi	r5,65040
   12b48:	00800044 	movi	r2,1
   12b4c:	194b883a 	add	r5,r3,r5
   12b50:	a53fffc4 	addi	r20,r20,-1
   12b54:	d8800f15 	stw	r2,60(sp)
   12b58:	000d883a 	mov	r6,zero
   12b5c:	01cffe34 	movhi	r7,16376
   12b60:	00188bc0 	call	188bc <__subdf3>
   12b64:	1009883a 	mov	r4,r2
   12b68:	180b883a 	mov	r5,r3
   12b6c:	0198dbf4 	movhi	r6,25455
   12b70:	3190d844 	addi	r6,r6,17249
   12b74:	01cff4f4 	movhi	r7,16339
   12b78:	39e1e9c4 	addi	r7,r7,-30809
   12b7c:	001891c0 	call	1891c <__muldf3>
   12b80:	180b883a 	mov	r5,r3
   12b84:	01a2d874 	movhi	r6,35681
   12b88:	31b22cc4 	addi	r6,r6,-14157
   12b8c:	01cff1f4 	movhi	r7,16327
   12b90:	39e28a04 	addi	r7,r7,-30168
   12b94:	1009883a 	mov	r4,r2
   12b98:	00188680 	call	18868 <__adddf3>
   12b9c:	a009883a 	mov	r4,r20
   12ba0:	1027883a 	mov	r19,r2
   12ba4:	1825883a 	mov	r18,r3
   12ba8:	0018f900 	call	18f90 <__floatsidf>
   12bac:	1009883a 	mov	r4,r2
   12bb0:	180b883a 	mov	r5,r3
   12bb4:	019427f4 	movhi	r6,20639
   12bb8:	319e7ec4 	addi	r6,r6,31227
   12bbc:	01cff4f4 	movhi	r7,16339
   12bc0:	39d104c4 	addi	r7,r7,17427
   12bc4:	001891c0 	call	1891c <__muldf3>
   12bc8:	9809883a 	mov	r4,r19
   12bcc:	900b883a 	mov	r5,r18
   12bd0:	100d883a 	mov	r6,r2
   12bd4:	180f883a 	mov	r7,r3
   12bd8:	00188680 	call	18868 <__adddf3>
   12bdc:	1009883a 	mov	r4,r2
   12be0:	180b883a 	mov	r5,r3
   12be4:	1027883a 	mov	r19,r2
   12be8:	1825883a 	mov	r18,r3
   12bec:	00190640 	call	19064 <__fixdfsi>
   12bf0:	9809883a 	mov	r4,r19
   12bf4:	900b883a 	mov	r5,r18
   12bf8:	000d883a 	mov	r6,zero
   12bfc:	000f883a 	mov	r7,zero
   12c00:	d8800615 	stw	r2,24(sp)
   12c04:	0018f340 	call	18f34 <__ltdf2>
   12c08:	10027e16 	blt	r2,zero,13604 <_dtoa_r+0xc6c>
   12c0c:	d8c00617 	ldw	r3,24(sp)
   12c10:	00800584 	movi	r2,22
   12c14:	10c26c36 	bltu	r2,r3,135c8 <_dtoa_r+0xc30>
   12c18:	180490fa 	slli	r2,r3,3
   12c1c:	00c000f4 	movhi	r3,3
   12c20:	18e05f04 	addi	r3,r3,-32388
   12c24:	d9800317 	ldw	r6,12(sp)
   12c28:	1885883a 	add	r2,r3,r2
   12c2c:	11000017 	ldw	r4,0(r2)
   12c30:	11400117 	ldw	r5,4(r2)
   12c34:	880f883a 	mov	r7,r17
   12c38:	0018e6c0 	call	18e6c <__gtdf2>
   12c3c:	00828f0e 	bge	zero,r2,1367c <_dtoa_r+0xce4>
   12c40:	d8800617 	ldw	r2,24(sp)
   12c44:	d8000d15 	stw	zero,52(sp)
   12c48:	10bfffc4 	addi	r2,r2,-1
   12c4c:	d8800615 	stw	r2,24(sp)
   12c50:	ad29c83a 	sub	r20,r21,r20
   12c54:	a53fffc4 	addi	r20,r20,-1
   12c58:	a0026616 	blt	r20,zero,135f4 <_dtoa_r+0xc5c>
   12c5c:	dd000715 	stw	r20,28(sp)
   12c60:	d8000815 	stw	zero,32(sp)
   12c64:	d8800617 	ldw	r2,24(sp)
   12c68:	10025a16 	blt	r2,zero,135d4 <_dtoa_r+0xc3c>
   12c6c:	d8c00717 	ldw	r3,28(sp)
   12c70:	d8800b15 	stw	r2,44(sp)
   12c74:	d8000a15 	stw	zero,40(sp)
   12c78:	1887883a 	add	r3,r3,r2
   12c7c:	d8c00715 	stw	r3,28(sp)
   12c80:	d9c00417 	ldw	r7,16(sp)
   12c84:	00800244 	movi	r2,9
   12c88:	11c10536 	bltu	r2,r7,130a0 <_dtoa_r+0x708>
   12c8c:	00800144 	movi	r2,5
   12c90:	11c4c60e 	bge	r2,r7,13fac <_dtoa_r+0x1614>
   12c94:	39ffff04 	addi	r7,r7,-4
   12c98:	d9c00415 	stw	r7,16(sp)
   12c9c:	0027883a 	mov	r19,zero
   12ca0:	d9c00417 	ldw	r7,16(sp)
   12ca4:	008000c4 	movi	r2,3
   12ca8:	3883a226 	beq	r7,r2,13b34 <_dtoa_r+0x119c>
   12cac:	11c2bc16 	blt	r2,r7,137a0 <_dtoa_r+0xe08>
   12cb0:	00800084 	movi	r2,2
   12cb4:	3880fb1e 	bne	r7,r2,130a4 <_dtoa_r+0x70c>
   12cb8:	d8000c15 	stw	zero,48(sp)
   12cbc:	d9002117 	ldw	r4,132(sp)
   12cc0:	0103ae0e 	bge	zero,r4,13b7c <_dtoa_r+0x11e4>
   12cc4:	2025883a 	mov	r18,r4
   12cc8:	d9000e15 	stw	r4,56(sp)
   12ccc:	d9000915 	stw	r4,36(sp)
   12cd0:	80001115 	stw	zero,68(r16)
   12cd4:	008005c4 	movi	r2,23
   12cd8:	1484b22e 	bgeu	r2,r18,13fa4 <_dtoa_r+0x160c>
   12cdc:	00c00044 	movi	r3,1
   12ce0:	00800104 	movi	r2,4
   12ce4:	1085883a 	add	r2,r2,r2
   12ce8:	11000504 	addi	r4,r2,20
   12cec:	180b883a 	mov	r5,r3
   12cf0:	18c00044 	addi	r3,r3,1
   12cf4:	913ffb2e 	bgeu	r18,r4,12ce4 <_dtoa_r+0x34c>
   12cf8:	81401115 	stw	r5,68(r16)
   12cfc:	8009883a 	mov	r4,r16
   12d00:	0015cf00 	call	15cf0 <_Balloc>
   12d04:	102f883a 	mov	r23,r2
   12d08:	80801015 	stw	r2,64(r16)
   12d0c:	00800384 	movi	r2,14
   12d10:	1480f036 	bltu	r2,r18,130d4 <_dtoa_r+0x73c>
   12d14:	9800ef26 	beq	r19,zero,130d4 <_dtoa_r+0x73c>
   12d18:	d8800617 	ldw	r2,24(sp)
   12d1c:	00839c0e 	bge	zero,r2,13b90 <_dtoa_r+0x11f8>
   12d20:	d8c00617 	ldw	r3,24(sp)
   12d24:	108003cc 	andi	r2,r2,15
   12d28:	100490fa 	slli	r2,r2,3
   12d2c:	182bd13a 	srai	r21,r3,4
   12d30:	00c000f4 	movhi	r3,3
   12d34:	18e05f04 	addi	r3,r3,-32388
   12d38:	1885883a 	add	r2,r3,r2
   12d3c:	a8c0040c 	andi	r3,r21,16
   12d40:	12800017 	ldw	r10,0(r2)
   12d44:	15800117 	ldw	r22,4(r2)
   12d48:	18038726 	beq	r3,zero,13b68 <_dtoa_r+0x11d0>
   12d4c:	008000f4 	movhi	r2,3
   12d50:	10a05504 	addi	r2,r2,-32428
   12d54:	11800817 	ldw	r6,32(r2)
   12d58:	11c00917 	ldw	r7,36(r2)
   12d5c:	d9000317 	ldw	r4,12(sp)
   12d60:	880b883a 	mov	r5,r17
   12d64:	da801515 	stw	r10,84(sp)
   12d68:	0018c000 	call	18c00 <__divdf3>
   12d6c:	da801517 	ldw	r10,84(sp)
   12d70:	d8801015 	stw	r2,64(sp)
   12d74:	1829883a 	mov	r20,r3
   12d78:	ad4003cc 	andi	r21,r21,15
   12d7c:	048000c4 	movi	r18,3
   12d80:	a8001126 	beq	r21,zero,12dc8 <_dtoa_r+0x430>
   12d84:	04c000f4 	movhi	r19,3
   12d88:	9ce05504 	addi	r19,r19,-32428
   12d8c:	5005883a 	mov	r2,r10
   12d90:	b007883a 	mov	r3,r22
   12d94:	a980004c 	andi	r6,r21,1
   12d98:	1009883a 	mov	r4,r2
   12d9c:	a82bd07a 	srai	r21,r21,1
   12da0:	180b883a 	mov	r5,r3
   12da4:	30000426 	beq	r6,zero,12db8 <_dtoa_r+0x420>
   12da8:	99800017 	ldw	r6,0(r19)
   12dac:	99c00117 	ldw	r7,4(r19)
   12db0:	94800044 	addi	r18,r18,1
   12db4:	001891c0 	call	1891c <__muldf3>
   12db8:	9cc00204 	addi	r19,r19,8
   12dbc:	a83ff51e 	bne	r21,zero,12d94 <_dtoa_r+0x3fc>
   12dc0:	1015883a 	mov	r10,r2
   12dc4:	182d883a 	mov	r22,r3
   12dc8:	d9001017 	ldw	r4,64(sp)
   12dcc:	a00b883a 	mov	r5,r20
   12dd0:	500d883a 	mov	r6,r10
   12dd4:	b00f883a 	mov	r7,r22
   12dd8:	0018c000 	call	18c00 <__divdf3>
   12ddc:	1027883a 	mov	r19,r2
   12de0:	1829883a 	mov	r20,r3
   12de4:	d8c00d17 	ldw	r3,52(sp)
   12de8:	18000626 	beq	r3,zero,12e04 <_dtoa_r+0x46c>
   12dec:	9809883a 	mov	r4,r19
   12df0:	a00b883a 	mov	r5,r20
   12df4:	000d883a 	mov	r6,zero
   12df8:	01cffc34 	movhi	r7,16368
   12dfc:	0018f340 	call	18f34 <__ltdf2>
   12e00:	10040e16 	blt	r2,zero,13e3c <_dtoa_r+0x14a4>
   12e04:	9009883a 	mov	r4,r18
   12e08:	0018f900 	call	18f90 <__floatsidf>
   12e0c:	1009883a 	mov	r4,r2
   12e10:	180b883a 	mov	r5,r3
   12e14:	980d883a 	mov	r6,r19
   12e18:	a00f883a 	mov	r7,r20
   12e1c:	001891c0 	call	1891c <__muldf3>
   12e20:	1009883a 	mov	r4,r2
   12e24:	180b883a 	mov	r5,r3
   12e28:	000d883a 	mov	r6,zero
   12e2c:	01d00734 	movhi	r7,16412
   12e30:	00188680 	call	18868 <__adddf3>
   12e34:	057f3034 	movhi	r21,64704
   12e38:	1d6b883a 	add	r21,r3,r21
   12e3c:	d8c00917 	ldw	r3,36(sp)
   12e40:	1025883a 	mov	r18,r2
   12e44:	18031f26 	beq	r3,zero,13ac4 <_dtoa_r+0x112c>
   12e48:	d8800617 	ldw	r2,24(sp)
   12e4c:	dac00917 	ldw	r11,36(sp)
   12e50:	d8801315 	stw	r2,76(sp)
   12e54:	d8c00c17 	ldw	r3,48(sp)
   12e58:	18039026 	beq	r3,zero,13c9c <_dtoa_r+0x1304>
   12e5c:	58bfffc4 	addi	r2,r11,-1
   12e60:	100490fa 	slli	r2,r2,3
   12e64:	00c000f4 	movhi	r3,3
   12e68:	18e05f04 	addi	r3,r3,-32388
   12e6c:	0009883a 	mov	r4,zero
   12e70:	1885883a 	add	r2,r3,r2
   12e74:	11800017 	ldw	r6,0(r2)
   12e78:	11c00117 	ldw	r7,4(r2)
   12e7c:	014ff834 	movhi	r5,16352
   12e80:	dac01615 	stw	r11,88(sp)
   12e84:	0018c000 	call	18c00 <__divdf3>
   12e88:	900d883a 	mov	r6,r18
   12e8c:	a80f883a 	mov	r7,r21
   12e90:	1009883a 	mov	r4,r2
   12e94:	180b883a 	mov	r5,r3
   12e98:	00188bc0 	call	188bc <__subdf3>
   12e9c:	a00b883a 	mov	r5,r20
   12ea0:	9809883a 	mov	r4,r19
   12ea4:	182b883a 	mov	r21,r3
   12ea8:	d8801015 	stw	r2,64(sp)
   12eac:	00190640 	call	19064 <__fixdfsi>
   12eb0:	1009883a 	mov	r4,r2
   12eb4:	d8801515 	stw	r2,84(sp)
   12eb8:	0018f900 	call	18f90 <__floatsidf>
   12ebc:	9809883a 	mov	r4,r19
   12ec0:	a00b883a 	mov	r5,r20
   12ec4:	100d883a 	mov	r6,r2
   12ec8:	180f883a 	mov	r7,r3
   12ecc:	00188bc0 	call	188bc <__subdf3>
   12ed0:	da401517 	ldw	r9,84(sp)
   12ed4:	d9001017 	ldw	r4,64(sp)
   12ed8:	a80b883a 	mov	r5,r21
   12edc:	4d000c04 	addi	r20,r9,48
   12ee0:	bd000005 	stb	r20,0(r23)
   12ee4:	100d883a 	mov	r6,r2
   12ee8:	180f883a 	mov	r7,r3
   12eec:	bd800044 	addi	r22,r23,1
   12ef0:	1025883a 	mov	r18,r2
   12ef4:	1827883a 	mov	r19,r3
   12ef8:	0018e6c0 	call	18e6c <__gtdf2>
   12efc:	00842216 	blt	zero,r2,13f88 <_dtoa_r+0x15f0>
   12f00:	0009883a 	mov	r4,zero
   12f04:	014ffc34 	movhi	r5,16368
   12f08:	900d883a 	mov	r6,r18
   12f0c:	980f883a 	mov	r7,r19
   12f10:	00188bc0 	call	188bc <__subdf3>
   12f14:	d9001017 	ldw	r4,64(sp)
   12f18:	a80b883a 	mov	r5,r21
   12f1c:	100d883a 	mov	r6,r2
   12f20:	180f883a 	mov	r7,r3
   12f24:	0018e6c0 	call	18e6c <__gtdf2>
   12f28:	dac01617 	ldw	r11,88(sp)
   12f2c:	00841316 	blt	zero,r2,13f7c <_dtoa_r+0x15e4>
   12f30:	00800044 	movi	r2,1
   12f34:	12c0670e 	bge	r2,r11,130d4 <_dtoa_r+0x73c>
   12f38:	bad7883a 	add	r11,r23,r11
   12f3c:	df001115 	stw	fp,68(sp)
   12f40:	dc401215 	stw	r17,72(sp)
   12f44:	5839883a 	mov	fp,r11
   12f48:	dc401017 	ldw	r17,64(sp)
   12f4c:	00000806 	br	12f70 <_dtoa_r+0x5d8>
   12f50:	00188bc0 	call	188bc <__subdf3>
   12f54:	1009883a 	mov	r4,r2
   12f58:	180b883a 	mov	r5,r3
   12f5c:	880d883a 	mov	r6,r17
   12f60:	a80f883a 	mov	r7,r21
   12f64:	0018f340 	call	18f34 <__ltdf2>
   12f68:	1003ee16 	blt	r2,zero,13f24 <_dtoa_r+0x158c>
   12f6c:	b703f126 	beq	r22,fp,13f34 <_dtoa_r+0x159c>
   12f70:	8809883a 	mov	r4,r17
   12f74:	a80b883a 	mov	r5,r21
   12f78:	000d883a 	mov	r6,zero
   12f7c:	01d00934 	movhi	r7,16420
   12f80:	001891c0 	call	1891c <__muldf3>
   12f84:	000d883a 	mov	r6,zero
   12f88:	01d00934 	movhi	r7,16420
   12f8c:	9009883a 	mov	r4,r18
   12f90:	980b883a 	mov	r5,r19
   12f94:	1023883a 	mov	r17,r2
   12f98:	182b883a 	mov	r21,r3
   12f9c:	001891c0 	call	1891c <__muldf3>
   12fa0:	180b883a 	mov	r5,r3
   12fa4:	1009883a 	mov	r4,r2
   12fa8:	1825883a 	mov	r18,r3
   12fac:	1027883a 	mov	r19,r2
   12fb0:	00190640 	call	19064 <__fixdfsi>
   12fb4:	1009883a 	mov	r4,r2
   12fb8:	1029883a 	mov	r20,r2
   12fbc:	0018f900 	call	18f90 <__floatsidf>
   12fc0:	9809883a 	mov	r4,r19
   12fc4:	900b883a 	mov	r5,r18
   12fc8:	100d883a 	mov	r6,r2
   12fcc:	180f883a 	mov	r7,r3
   12fd0:	00188bc0 	call	188bc <__subdf3>
   12fd4:	a5000c04 	addi	r20,r20,48
   12fd8:	b5000005 	stb	r20,0(r22)
   12fdc:	1009883a 	mov	r4,r2
   12fe0:	180b883a 	mov	r5,r3
   12fe4:	880d883a 	mov	r6,r17
   12fe8:	a80f883a 	mov	r7,r21
   12fec:	1025883a 	mov	r18,r2
   12ff0:	1827883a 	mov	r19,r3
   12ff4:	0018f340 	call	18f34 <__ltdf2>
   12ff8:	b5800044 	addi	r22,r22,1
   12ffc:	0009883a 	mov	r4,zero
   13000:	014ffc34 	movhi	r5,16368
   13004:	900d883a 	mov	r6,r18
   13008:	980f883a 	mov	r7,r19
   1300c:	103fd00e 	bge	r2,zero,12f50 <_dtoa_r+0x5b8>
   13010:	d9001317 	ldw	r4,76(sp)
   13014:	df001117 	ldw	fp,68(sp)
   13018:	d9000615 	stw	r4,24(sp)
   1301c:	8009883a 	mov	r4,r16
   13020:	e00b883a 	mov	r5,fp
   13024:	0015d980 	call	15d98 <_Bfree>
   13028:	d9c00617 	ldw	r7,24(sp)
   1302c:	d8c02217 	ldw	r3,136(sp)
   13030:	d9002417 	ldw	r4,144(sp)
   13034:	b0000005 	stb	zero,0(r22)
   13038:	38800044 	addi	r2,r7,1
   1303c:	18800015 	stw	r2,0(r3)
   13040:	203e8426 	beq	r4,zero,12a54 <_dtoa_r+0xbc>
   13044:	25800015 	stw	r22,0(r4)
   13048:	003e8206 	br	12a54 <_dtoa_r+0xbc>
   1304c:	00800434 	movhi	r2,16
   13050:	10bfffc4 	addi	r2,r2,-1
   13054:	90a4703a 	and	r18,r18,r2
   13058:	903e901e 	bne	r18,zero,12a9c <_dtoa_r+0x104>
   1305c:	05c000f4 	movhi	r23,3
   13060:	bde03604 	addi	r23,r23,-32552
   13064:	003e8f06 	br	12aa4 <_dtoa_r+0x10c>
   13068:	b8800204 	addi	r2,r23,8
   1306c:	003e9206 	br	12ab8 <_dtoa_r+0x120>
   13070:	01400434 	movhi	r5,16
   13074:	297fffc4 	addi	r5,r5,-1
   13078:	894a703a 	and	r5,r17,r5
   1307c:	d9000317 	ldw	r4,12(sp)
   13080:	294ffc34 	orhi	r5,r5,16368
   13084:	a53f0044 	addi	r20,r20,-1023
   13088:	dd400217 	ldw	r21,8(sp)
   1308c:	d8000f15 	stw	zero,60(sp)
   13090:	003eb106 	br	12b58 <_dtoa_r+0x1c0>
   13094:	05c000f4 	movhi	r23,3
   13098:	bde02d04 	addi	r23,r23,-32588
   1309c:	003e6d06 	br	12a54 <_dtoa_r+0xbc>
   130a0:	d8000415 	stw	zero,16(sp)
   130a4:	80001115 	stw	zero,68(r16)
   130a8:	8009883a 	mov	r4,r16
   130ac:	000b883a 	mov	r5,zero
   130b0:	0015cf00 	call	15cf0 <_Balloc>
   130b4:	01ffffc4 	movi	r7,-1
   130b8:	102f883a 	mov	r23,r2
   130bc:	80801015 	stw	r2,64(r16)
   130c0:	00800044 	movi	r2,1
   130c4:	d9c00915 	stw	r7,36(sp)
   130c8:	d8002115 	stw	zero,132(sp)
   130cc:	d9c00e15 	stw	r7,56(sp)
   130d0:	d8800c15 	stw	r2,48(sp)
   130d4:	d8800117 	ldw	r2,4(sp)
   130d8:	10008b16 	blt	r2,zero,13308 <_dtoa_r+0x970>
   130dc:	d9000617 	ldw	r4,24(sp)
   130e0:	00c00384 	movi	r3,14
   130e4:	19008816 	blt	r3,r4,13308 <_dtoa_r+0x970>
   130e8:	200490fa 	slli	r2,r4,3
   130ec:	d9c02117 	ldw	r7,132(sp)
   130f0:	00c000f4 	movhi	r3,3
   130f4:	18e05f04 	addi	r3,r3,-32388
   130f8:	1885883a 	add	r2,r3,r2
   130fc:	14800017 	ldw	r18,0(r2)
   13100:	14c00117 	ldw	r19,4(r2)
   13104:	3801c916 	blt	r7,zero,1382c <_dtoa_r+0xe94>
   13108:	d9000317 	ldw	r4,12(sp)
   1310c:	900d883a 	mov	r6,r18
   13110:	980f883a 	mov	r7,r19
   13114:	880b883a 	mov	r5,r17
   13118:	0018c000 	call	18c00 <__divdf3>
   1311c:	180b883a 	mov	r5,r3
   13120:	1009883a 	mov	r4,r2
   13124:	00190640 	call	19064 <__fixdfsi>
   13128:	1009883a 	mov	r4,r2
   1312c:	102b883a 	mov	r21,r2
   13130:	0018f900 	call	18f90 <__floatsidf>
   13134:	1009883a 	mov	r4,r2
   13138:	180b883a 	mov	r5,r3
   1313c:	900d883a 	mov	r6,r18
   13140:	980f883a 	mov	r7,r19
   13144:	001891c0 	call	1891c <__muldf3>
   13148:	d9000317 	ldw	r4,12(sp)
   1314c:	880b883a 	mov	r5,r17
   13150:	100d883a 	mov	r6,r2
   13154:	180f883a 	mov	r7,r3
   13158:	00188bc0 	call	188bc <__subdf3>
   1315c:	d9c00917 	ldw	r7,36(sp)
   13160:	1009883a 	mov	r4,r2
   13164:	a8800c04 	addi	r2,r21,48
   13168:	b8800005 	stb	r2,0(r23)
   1316c:	01800044 	movi	r6,1
   13170:	180b883a 	mov	r5,r3
   13174:	2005883a 	mov	r2,r4
   13178:	bd800044 	addi	r22,r23,1
   1317c:	39803726 	beq	r7,r6,1325c <_dtoa_r+0x8c4>
   13180:	000d883a 	mov	r6,zero
   13184:	01d00934 	movhi	r7,16420
   13188:	001891c0 	call	1891c <__muldf3>
   1318c:	1009883a 	mov	r4,r2
   13190:	180b883a 	mov	r5,r3
   13194:	000d883a 	mov	r6,zero
   13198:	000f883a 	mov	r7,zero
   1319c:	1029883a 	mov	r20,r2
   131a0:	1823883a 	mov	r17,r3
   131a4:	0018db40 	call	18db4 <__eqdf2>
   131a8:	103f9c26 	beq	r2,zero,1301c <_dtoa_r+0x684>
   131ac:	dd400917 	ldw	r21,36(sp)
   131b0:	dc000415 	stw	r16,16(sp)
   131b4:	00000906 	br	131dc <_dtoa_r+0x844>
   131b8:	001891c0 	call	1891c <__muldf3>
   131bc:	1009883a 	mov	r4,r2
   131c0:	180b883a 	mov	r5,r3
   131c4:	000d883a 	mov	r6,zero
   131c8:	000f883a 	mov	r7,zero
   131cc:	1029883a 	mov	r20,r2
   131d0:	1823883a 	mov	r17,r3
   131d4:	0018db40 	call	18db4 <__eqdf2>
   131d8:	10022926 	beq	r2,zero,13a80 <_dtoa_r+0x10e8>
   131dc:	900d883a 	mov	r6,r18
   131e0:	980f883a 	mov	r7,r19
   131e4:	a009883a 	mov	r4,r20
   131e8:	880b883a 	mov	r5,r17
   131ec:	0018c000 	call	18c00 <__divdf3>
   131f0:	180b883a 	mov	r5,r3
   131f4:	1009883a 	mov	r4,r2
   131f8:	00190640 	call	19064 <__fixdfsi>
   131fc:	1009883a 	mov	r4,r2
   13200:	1021883a 	mov	r16,r2
   13204:	0018f900 	call	18f90 <__floatsidf>
   13208:	1009883a 	mov	r4,r2
   1320c:	180b883a 	mov	r5,r3
   13210:	900d883a 	mov	r6,r18
   13214:	980f883a 	mov	r7,r19
   13218:	001891c0 	call	1891c <__muldf3>
   1321c:	a009883a 	mov	r4,r20
   13220:	880b883a 	mov	r5,r17
   13224:	100d883a 	mov	r6,r2
   13228:	180f883a 	mov	r7,r3
   1322c:	00188bc0 	call	188bc <__subdf3>
   13230:	82400c04 	addi	r9,r16,48
   13234:	b2400005 	stb	r9,0(r22)
   13238:	b5800044 	addi	r22,r22,1
   1323c:	b5d3c83a 	sub	r9,r22,r23
   13240:	000d883a 	mov	r6,zero
   13244:	01d00934 	movhi	r7,16420
   13248:	1009883a 	mov	r4,r2
   1324c:	180b883a 	mov	r5,r3
   13250:	aa7fd91e 	bne	r21,r9,131b8 <_dtoa_r+0x820>
   13254:	802b883a 	mov	r21,r16
   13258:	dc000417 	ldw	r16,16(sp)
   1325c:	1009883a 	mov	r4,r2
   13260:	180b883a 	mov	r5,r3
   13264:	100d883a 	mov	r6,r2
   13268:	180f883a 	mov	r7,r3
   1326c:	00188680 	call	18868 <__adddf3>
   13270:	9009883a 	mov	r4,r18
   13274:	980b883a 	mov	r5,r19
   13278:	100d883a 	mov	r6,r2
   1327c:	180f883a 	mov	r7,r3
   13280:	1023883a 	mov	r17,r2
   13284:	1829883a 	mov	r20,r3
   13288:	0018f340 	call	18f34 <__ltdf2>
   1328c:	10000816 	blt	r2,zero,132b0 <_dtoa_r+0x918>
   13290:	9009883a 	mov	r4,r18
   13294:	980b883a 	mov	r5,r19
   13298:	880d883a 	mov	r6,r17
   1329c:	a00f883a 	mov	r7,r20
   132a0:	0018db40 	call	18db4 <__eqdf2>
   132a4:	103f5d1e 	bne	r2,zero,1301c <_dtoa_r+0x684>
   132a8:	ad40004c 	andi	r21,r21,1
   132ac:	a83f5b26 	beq	r21,zero,1301c <_dtoa_r+0x684>
   132b0:	b53fffc3 	ldbu	r20,-1(r22)
   132b4:	b0ffff84 	addi	r3,r22,-2
   132b8:	01400e44 	movi	r5,57
   132bc:	00000306 	br	132cc <_dtoa_r+0x934>
   132c0:	1d000003 	ldbu	r20,0(r3)
   132c4:	102d883a 	mov	r22,r2
   132c8:	18ffffc4 	addi	r3,r3,-1
   132cc:	a1003fcc 	andi	r4,r20,255
   132d0:	2100201c 	xori	r4,r4,128
   132d4:	213fe004 	addi	r4,r4,-128
   132d8:	b0bfffc4 	addi	r2,r22,-1
   132dc:	2142ca1e 	bne	r4,r5,13e08 <_dtoa_r+0x1470>
   132e0:	b8bff71e 	bne	r23,r2,132c0 <_dtoa_r+0x928>
   132e4:	d8800617 	ldw	r2,24(sp)
   132e8:	05000c44 	movi	r20,49
   132ec:	10800044 	addi	r2,r2,1
   132f0:	d8800615 	stw	r2,24(sp)
   132f4:	00800c04 	movi	r2,48
   132f8:	b8800005 	stb	r2,0(r23)
   132fc:	b805883a 	mov	r2,r23
   13300:	15000005 	stb	r20,0(r2)
   13304:	003f4506 	br	1301c <_dtoa_r+0x684>
   13308:	d9c00c17 	ldw	r7,48(sp)
   1330c:	3800c926 	beq	r7,zero,13634 <_dtoa_r+0xc9c>
   13310:	d9c00417 	ldw	r7,16(sp)
   13314:	00c00044 	movi	r3,1
   13318:	19c16c0e 	bge	r3,r7,138cc <_dtoa_r+0xf34>
   1331c:	d9000917 	ldw	r4,36(sp)
   13320:	d9c00a17 	ldw	r7,40(sp)
   13324:	24ffffc4 	addi	r19,r4,-1
   13328:	3cc20716 	blt	r7,r19,13b48 <_dtoa_r+0x11b0>
   1332c:	3ce7c83a 	sub	r19,r7,r19
   13330:	d9c00917 	ldw	r7,36(sp)
   13334:	3802ae16 	blt	r7,zero,13df0 <_dtoa_r+0x1458>
   13338:	dc800817 	ldw	r18,32(sp)
   1333c:	d8800917 	ldw	r2,36(sp)
   13340:	d8c00817 	ldw	r3,32(sp)
   13344:	d9c00717 	ldw	r7,28(sp)
   13348:	8009883a 	mov	r4,r16
   1334c:	1887883a 	add	r3,r3,r2
   13350:	388f883a 	add	r7,r7,r2
   13354:	01400044 	movi	r5,1
   13358:	d8c00815 	stw	r3,32(sp)
   1335c:	d9c00715 	stw	r7,28(sp)
   13360:	00160f00 	call	160f0 <__i2b>
   13364:	102b883a 	mov	r21,r2
   13368:	90000a26 	beq	r18,zero,13394 <_dtoa_r+0x9fc>
   1336c:	d8800717 	ldw	r2,28(sp)
   13370:	0080080e 	bge	zero,r2,13394 <_dtoa_r+0x9fc>
   13374:	90812b16 	blt	r18,r2,13824 <_dtoa_r+0xe8c>
   13378:	d8c00817 	ldw	r3,32(sp)
   1337c:	d9000717 	ldw	r4,28(sp)
   13380:	90a5c83a 	sub	r18,r18,r2
   13384:	1887c83a 	sub	r3,r3,r2
   13388:	2089c83a 	sub	r4,r4,r2
   1338c:	d8c00815 	stw	r3,32(sp)
   13390:	d9000715 	stw	r4,28(sp)
   13394:	d9c00a17 	ldw	r7,40(sp)
   13398:	01c0140e 	bge	zero,r7,133ec <_dtoa_r+0xa54>
   1339c:	d8800c17 	ldw	r2,48(sp)
   133a0:	1001de26 	beq	r2,zero,13b1c <_dtoa_r+0x1184>
   133a4:	04c00e0e 	bge	zero,r19,133e0 <_dtoa_r+0xa48>
   133a8:	a80b883a 	mov	r5,r21
   133ac:	8009883a 	mov	r4,r16
   133b0:	980d883a 	mov	r6,r19
   133b4:	001630c0 	call	1630c <__pow5mult>
   133b8:	e00d883a 	mov	r6,fp
   133bc:	8009883a 	mov	r4,r16
   133c0:	100b883a 	mov	r5,r2
   133c4:	102b883a 	mov	r21,r2
   133c8:	001612c0 	call	1612c <__multiply>
   133cc:	1029883a 	mov	r20,r2
   133d0:	e00b883a 	mov	r5,fp
   133d4:	8009883a 	mov	r4,r16
   133d8:	0015d980 	call	15d98 <_Bfree>
   133dc:	a039883a 	mov	fp,r20
   133e0:	d8c00a17 	ldw	r3,40(sp)
   133e4:	1ccdc83a 	sub	r6,r3,r19
   133e8:	3001291e 	bne	r6,zero,13890 <_dtoa_r+0xef8>
   133ec:	8009883a 	mov	r4,r16
   133f0:	01400044 	movi	r5,1
   133f4:	00160f00 	call	160f0 <__i2b>
   133f8:	d9000b17 	ldw	r4,44(sp)
   133fc:	1029883a 	mov	r20,r2
   13400:	0100050e 	bge	zero,r4,13418 <_dtoa_r+0xa80>
   13404:	d9800b17 	ldw	r6,44(sp)
   13408:	8009883a 	mov	r4,r16
   1340c:	100b883a 	mov	r5,r2
   13410:	001630c0 	call	1630c <__pow5mult>
   13414:	1029883a 	mov	r20,r2
   13418:	d9c00417 	ldw	r7,16(sp)
   1341c:	00800044 	movi	r2,1
   13420:	11c0f00e 	bge	r2,r7,137e4 <_dtoa_r+0xe4c>
   13424:	0023883a 	mov	r17,zero
   13428:	d8800b17 	ldw	r2,44(sp)
   1342c:	1001741e 	bne	r2,zero,13a00 <_dtoa_r+0x1068>
   13430:	00800044 	movi	r2,1
   13434:	d8c00717 	ldw	r3,28(sp)
   13438:	10c5883a 	add	r2,r2,r3
   1343c:	108007cc 	andi	r2,r2,31
   13440:	10008026 	beq	r2,zero,13644 <_dtoa_r+0xcac>
   13444:	01000804 	movi	r4,32
   13448:	2089c83a 	sub	r4,r4,r2
   1344c:	00c00104 	movi	r3,4
   13450:	1902d00e 	bge	r3,r4,13f94 <_dtoa_r+0x15fc>
   13454:	d9000817 	ldw	r4,32(sp)
   13458:	d9c00717 	ldw	r7,28(sp)
   1345c:	00c00704 	movi	r3,28
   13460:	1885c83a 	sub	r2,r3,r2
   13464:	2089883a 	add	r4,r4,r2
   13468:	388f883a 	add	r7,r7,r2
   1346c:	d9000815 	stw	r4,32(sp)
   13470:	90a5883a 	add	r18,r18,r2
   13474:	d9c00715 	stw	r7,28(sp)
   13478:	d9c00817 	ldw	r7,32(sp)
   1347c:	01c0050e 	bge	zero,r7,13494 <_dtoa_r+0xafc>
   13480:	e00b883a 	mov	r5,fp
   13484:	8009883a 	mov	r4,r16
   13488:	380d883a 	mov	r6,r7
   1348c:	00164380 	call	16438 <__lshift>
   13490:	1039883a 	mov	fp,r2
   13494:	d8800717 	ldw	r2,28(sp)
   13498:	0080050e 	bge	zero,r2,134b0 <_dtoa_r+0xb18>
   1349c:	a00b883a 	mov	r5,r20
   134a0:	8009883a 	mov	r4,r16
   134a4:	100d883a 	mov	r6,r2
   134a8:	00164380 	call	16438 <__lshift>
   134ac:	1029883a 	mov	r20,r2
   134b0:	d8c00d17 	ldw	r3,52(sp)
   134b4:	1801401e 	bne	r3,zero,139b8 <_dtoa_r+0x1020>
   134b8:	d8800917 	ldw	r2,36(sp)
   134bc:	00815a0e 	bge	zero,r2,13a28 <_dtoa_r+0x1090>
   134c0:	d8c00c17 	ldw	r3,48(sp)
   134c4:	18006f1e 	bne	r3,zero,13684 <_dtoa_r+0xcec>
   134c8:	b823883a 	mov	r17,r23
   134cc:	dc800917 	ldw	r18,36(sp)
   134d0:	00000206 	br	134dc <_dtoa_r+0xb44>
   134d4:	0015dc00 	call	15dc0 <__multadd>
   134d8:	1039883a 	mov	fp,r2
   134dc:	e009883a 	mov	r4,fp
   134e0:	a00b883a 	mov	r5,r20
   134e4:	00127900 	call	12790 <quorem>
   134e8:	10800c04 	addi	r2,r2,48
   134ec:	88800005 	stb	r2,0(r17)
   134f0:	8c400044 	addi	r17,r17,1
   134f4:	8dc7c83a 	sub	r3,r17,r23
   134f8:	8009883a 	mov	r4,r16
   134fc:	e00b883a 	mov	r5,fp
   13500:	01800284 	movi	r6,10
   13504:	000f883a 	mov	r7,zero
   13508:	1cbff216 	blt	r3,r18,134d4 <_dtoa_r+0xb3c>
   1350c:	dd800917 	ldw	r22,36(sp)
   13510:	1007883a 	mov	r3,r2
   13514:	05823a0e 	bge	zero,r22,13e00 <_dtoa_r+0x1468>
   13518:	bdad883a 	add	r22,r23,r22
   1351c:	0023883a 	mov	r17,zero
   13520:	e00b883a 	mov	r5,fp
   13524:	01800044 	movi	r6,1
   13528:	8009883a 	mov	r4,r16
   1352c:	d8c01515 	stw	r3,84(sp)
   13530:	00164380 	call	16438 <__lshift>
   13534:	1009883a 	mov	r4,r2
   13538:	a00b883a 	mov	r5,r20
   1353c:	1039883a 	mov	fp,r2
   13540:	00165940 	call	16594 <__mcmp>
   13544:	d8c01517 	ldw	r3,84(sp)
   13548:	0080d60e 	bge	zero,r2,138a4 <_dtoa_r+0xf0c>
   1354c:	b13fffc3 	ldbu	r4,-1(r22)
   13550:	b0ffff84 	addi	r3,r22,-2
   13554:	01800e44 	movi	r6,57
   13558:	00000306 	br	13568 <_dtoa_r+0xbd0>
   1355c:	19000003 	ldbu	r4,0(r3)
   13560:	102d883a 	mov	r22,r2
   13564:	18ffffc4 	addi	r3,r3,-1
   13568:	21403fcc 	andi	r5,r4,255
   1356c:	2940201c 	xori	r5,r5,128
   13570:	297fe004 	addi	r5,r5,-128
   13574:	b0bfffc4 	addi	r2,r22,-1
   13578:	2981a71e 	bne	r5,r6,13c18 <_dtoa_r+0x1280>
   1357c:	b8bff71e 	bne	r23,r2,1355c <_dtoa_r+0xbc4>
   13580:	d8800617 	ldw	r2,24(sp)
   13584:	10800044 	addi	r2,r2,1
   13588:	d8800615 	stw	r2,24(sp)
   1358c:	00800c44 	movi	r2,49
   13590:	b8800005 	stb	r2,0(r23)
   13594:	8009883a 	mov	r4,r16
   13598:	a00b883a 	mov	r5,r20
   1359c:	0015d980 	call	15d98 <_Bfree>
   135a0:	a83e9e26 	beq	r21,zero,1301c <_dtoa_r+0x684>
   135a4:	88000426 	beq	r17,zero,135b8 <_dtoa_r+0xc20>
   135a8:	8d400326 	beq	r17,r21,135b8 <_dtoa_r+0xc20>
   135ac:	8009883a 	mov	r4,r16
   135b0:	880b883a 	mov	r5,r17
   135b4:	0015d980 	call	15d98 <_Bfree>
   135b8:	8009883a 	mov	r4,r16
   135bc:	a80b883a 	mov	r5,r21
   135c0:	0015d980 	call	15d98 <_Bfree>
   135c4:	003e9506 	br	1301c <_dtoa_r+0x684>
   135c8:	00c00044 	movi	r3,1
   135cc:	d8c00d15 	stw	r3,52(sp)
   135d0:	003d9f06 	br	12c50 <_dtoa_r+0x2b8>
   135d4:	d9000817 	ldw	r4,32(sp)
   135d8:	d8800617 	ldw	r2,24(sp)
   135dc:	d8000b15 	stw	zero,44(sp)
   135e0:	2089c83a 	sub	r4,r4,r2
   135e4:	0087c83a 	sub	r3,zero,r2
   135e8:	d9000815 	stw	r4,32(sp)
   135ec:	d8c00a15 	stw	r3,40(sp)
   135f0:	003da306 	br	12c80 <_dtoa_r+0x2e8>
   135f4:	0529c83a 	sub	r20,zero,r20
   135f8:	dd000815 	stw	r20,32(sp)
   135fc:	d8000715 	stw	zero,28(sp)
   13600:	003d9806 	br	12c64 <_dtoa_r+0x2cc>
   13604:	d9000617 	ldw	r4,24(sp)
   13608:	0018f900 	call	18f90 <__floatsidf>
   1360c:	1009883a 	mov	r4,r2
   13610:	180b883a 	mov	r5,r3
   13614:	980d883a 	mov	r6,r19
   13618:	900f883a 	mov	r7,r18
   1361c:	0018e100 	call	18e10 <__nedf2>
   13620:	103d7a26 	beq	r2,zero,12c0c <_dtoa_r+0x274>
   13624:	d8800617 	ldw	r2,24(sp)
   13628:	10bfffc4 	addi	r2,r2,-1
   1362c:	d8800615 	stw	r2,24(sp)
   13630:	003d7606 	br	12c0c <_dtoa_r+0x274>
   13634:	dcc00a17 	ldw	r19,40(sp)
   13638:	dc800817 	ldw	r18,32(sp)
   1363c:	002b883a 	mov	r21,zero
   13640:	003f4906 	br	13368 <_dtoa_r+0x9d0>
   13644:	00800704 	movi	r2,28
   13648:	d8c00817 	ldw	r3,32(sp)
   1364c:	d9000717 	ldw	r4,28(sp)
   13650:	90a5883a 	add	r18,r18,r2
   13654:	1887883a 	add	r3,r3,r2
   13658:	2089883a 	add	r4,r4,r2
   1365c:	d8c00815 	stw	r3,32(sp)
   13660:	d9000715 	stw	r4,28(sp)
   13664:	003f8406 	br	13478 <_dtoa_r+0xae0>
   13668:	d9c00317 	ldw	r7,12(sp)
   1366c:	013efb84 	movi	r4,-1042
   13670:	2509c83a 	sub	r4,r4,r20
   13674:	3908983a 	sll	r4,r7,r4
   13678:	003d3006 	br	12b3c <_dtoa_r+0x1a4>
   1367c:	d8000d15 	stw	zero,52(sp)
   13680:	003d7306 	br	12c50 <_dtoa_r+0x2b8>
   13684:	0480050e 	bge	zero,r18,1369c <_dtoa_r+0xd04>
   13688:	a80b883a 	mov	r5,r21
   1368c:	8009883a 	mov	r4,r16
   13690:	900d883a 	mov	r6,r18
   13694:	00164380 	call	16438 <__lshift>
   13698:	102b883a 	mov	r21,r2
   1369c:	8801611e 	bne	r17,zero,13c24 <_dtoa_r+0x128c>
   136a0:	a827883a 	mov	r19,r21
   136a4:	d8c00317 	ldw	r3,12(sp)
   136a8:	d9000917 	ldw	r4,36(sp)
   136ac:	b8bfffc4 	addi	r2,r23,-1
   136b0:	18c0004c 	andi	r3,r3,1
   136b4:	1105883a 	add	r2,r2,r4
   136b8:	b825883a 	mov	r18,r23
   136bc:	d8800515 	stw	r2,20(sp)
   136c0:	a823883a 	mov	r17,r21
   136c4:	d8c00315 	stw	r3,12(sp)
   136c8:	ddc00715 	stw	r23,28(sp)
   136cc:	e009883a 	mov	r4,fp
   136d0:	a00b883a 	mov	r5,r20
   136d4:	00127900 	call	12790 <quorem>
   136d8:	e009883a 	mov	r4,fp
   136dc:	880b883a 	mov	r5,r17
   136e0:	102d883a 	mov	r22,r2
   136e4:	00165940 	call	16594 <__mcmp>
   136e8:	980d883a 	mov	r6,r19
   136ec:	8009883a 	mov	r4,r16
   136f0:	a00b883a 	mov	r5,r20
   136f4:	102b883a 	mov	r21,r2
   136f8:	00165ec0 	call	165ec <__mdiff>
   136fc:	100d883a 	mov	r6,r2
   13700:	10800317 	ldw	r2,12(r2)
   13704:	b5c00c04 	addi	r23,r22,48
   13708:	10008c26 	beq	r2,zero,1393c <_dtoa_r+0xfa4>
   1370c:	8009883a 	mov	r4,r16
   13710:	300b883a 	mov	r5,r6
   13714:	0015d980 	call	15d98 <_Bfree>
   13718:	00800044 	movi	r2,1
   1371c:	a8007116 	blt	r21,zero,138e4 <_dtoa_r+0xf4c>
   13720:	a800041e 	bne	r21,zero,13734 <_dtoa_r+0xd9c>
   13724:	d9c00417 	ldw	r7,16(sp)
   13728:	3800021e 	bne	r7,zero,13734 <_dtoa_r+0xd9c>
   1372c:	d8c00317 	ldw	r3,12(sp)
   13730:	18006c26 	beq	r3,zero,138e4 <_dtoa_r+0xf4c>
   13734:	00814c16 	blt	zero,r2,13c68 <_dtoa_r+0x12d0>
   13738:	d8c00517 	ldw	r3,20(sp)
   1373c:	95400044 	addi	r21,r18,1
   13740:	95c00005 	stb	r23,0(r18)
   13744:	a82d883a 	mov	r22,r21
   13748:	90c14d26 	beq	r18,r3,13c80 <_dtoa_r+0x12e8>
   1374c:	e00b883a 	mov	r5,fp
   13750:	8009883a 	mov	r4,r16
   13754:	01800284 	movi	r6,10
   13758:	000f883a 	mov	r7,zero
   1375c:	0015dc00 	call	15dc0 <__multadd>
   13760:	1039883a 	mov	fp,r2
   13764:	8cc08b26 	beq	r17,r19,13994 <_dtoa_r+0xffc>
   13768:	880b883a 	mov	r5,r17
   1376c:	01800284 	movi	r6,10
   13770:	000f883a 	mov	r7,zero
   13774:	8009883a 	mov	r4,r16
   13778:	0015dc00 	call	15dc0 <__multadd>
   1377c:	980b883a 	mov	r5,r19
   13780:	8009883a 	mov	r4,r16
   13784:	01800284 	movi	r6,10
   13788:	000f883a 	mov	r7,zero
   1378c:	1023883a 	mov	r17,r2
   13790:	0015dc00 	call	15dc0 <__multadd>
   13794:	1027883a 	mov	r19,r2
   13798:	a825883a 	mov	r18,r21
   1379c:	003fcb06 	br	136cc <_dtoa_r+0xd34>
   137a0:	d9c00417 	ldw	r7,16(sp)
   137a4:	00800104 	movi	r2,4
   137a8:	3880e426 	beq	r7,r2,13b3c <_dtoa_r+0x11a4>
   137ac:	00800144 	movi	r2,5
   137b0:	38be3c1e 	bne	r7,r2,130a4 <_dtoa_r+0x70c>
   137b4:	00c00044 	movi	r3,1
   137b8:	d8c00c15 	stw	r3,48(sp)
   137bc:	d9c02117 	ldw	r7,132(sp)
   137c0:	d8800617 	ldw	r2,24(sp)
   137c4:	388f883a 	add	r7,r7,r2
   137c8:	3c800044 	addi	r18,r7,1
   137cc:	d9c00e15 	stw	r7,56(sp)
   137d0:	dc800915 	stw	r18,36(sp)
   137d4:	04bd3e16 	blt	zero,r18,12cd0 <_dtoa_r+0x338>
   137d8:	80001115 	stw	zero,68(r16)
   137dc:	000b883a 	mov	r5,zero
   137e0:	003d4606 	br	12cfc <_dtoa_r+0x364>
   137e4:	d8c00317 	ldw	r3,12(sp)
   137e8:	183f0e1e 	bne	r3,zero,13424 <_dtoa_r+0xa8c>
   137ec:	00c00434 	movhi	r3,16
   137f0:	18ffffc4 	addi	r3,r3,-1
   137f4:	88c6703a 	and	r3,r17,r3
   137f8:	183f0a1e 	bne	r3,zero,13424 <_dtoa_r+0xa8c>
   137fc:	8c5ffc2c 	andhi	r17,r17,32752
   13800:	883f0826 	beq	r17,zero,13424 <_dtoa_r+0xa8c>
   13804:	d9000817 	ldw	r4,32(sp)
   13808:	d9c00717 	ldw	r7,28(sp)
   1380c:	1023883a 	mov	r17,r2
   13810:	2089883a 	add	r4,r4,r2
   13814:	388f883a 	add	r7,r7,r2
   13818:	d9000815 	stw	r4,32(sp)
   1381c:	d9c00715 	stw	r7,28(sp)
   13820:	003f0106 	br	13428 <_dtoa_r+0xa90>
   13824:	9005883a 	mov	r2,r18
   13828:	003ed306 	br	13378 <_dtoa_r+0x9e0>
   1382c:	d8800917 	ldw	r2,36(sp)
   13830:	00be3516 	blt	zero,r2,13108 <_dtoa_r+0x770>
   13834:	1000b61e 	bne	r2,zero,13b10 <_dtoa_r+0x1178>
   13838:	9009883a 	mov	r4,r18
   1383c:	980b883a 	mov	r5,r19
   13840:	000d883a 	mov	r6,zero
   13844:	01d00534 	movhi	r7,16404
   13848:	001891c0 	call	1891c <__muldf3>
   1384c:	d9800317 	ldw	r6,12(sp)
   13850:	1009883a 	mov	r4,r2
   13854:	180b883a 	mov	r5,r3
   13858:	880f883a 	mov	r7,r17
   1385c:	0018ed00 	call	18ed0 <__gedf2>
   13860:	0029883a 	mov	r20,zero
   13864:	002b883a 	mov	r21,zero
   13868:	10007e16 	blt	r2,zero,13a64 <_dtoa_r+0x10cc>
   1386c:	d8802117 	ldw	r2,132(sp)
   13870:	b82d883a 	mov	r22,r23
   13874:	0084303a 	nor	r2,zero,r2
   13878:	d8800615 	stw	r2,24(sp)
   1387c:	8009883a 	mov	r4,r16
   13880:	a00b883a 	mov	r5,r20
   13884:	0015d980 	call	15d98 <_Bfree>
   13888:	a83f4b1e 	bne	r21,zero,135b8 <_dtoa_r+0xc20>
   1388c:	003de306 	br	1301c <_dtoa_r+0x684>
   13890:	e00b883a 	mov	r5,fp
   13894:	8009883a 	mov	r4,r16
   13898:	001630c0 	call	1630c <__pow5mult>
   1389c:	1039883a 	mov	fp,r2
   138a0:	003ed206 	br	133ec <_dtoa_r+0xa54>
   138a4:	1000021e 	bne	r2,zero,138b0 <_dtoa_r+0xf18>
   138a8:	18c0004c 	andi	r3,r3,1
   138ac:	183f271e 	bne	r3,zero,1354c <_dtoa_r+0xbb4>
   138b0:	01000c04 	movi	r4,48
   138b4:	00000106 	br	138bc <_dtoa_r+0xf24>
   138b8:	102d883a 	mov	r22,r2
   138bc:	b0bfffc4 	addi	r2,r22,-1
   138c0:	10c00007 	ldb	r3,0(r2)
   138c4:	193ffc26 	beq	r3,r4,138b8 <_dtoa_r+0xf20>
   138c8:	003f3206 	br	13594 <_dtoa_r+0xbfc>
   138cc:	d8c00f17 	ldw	r3,60(sp)
   138d0:	18015026 	beq	r3,zero,13e14 <_dtoa_r+0x147c>
   138d4:	10810cc4 	addi	r2,r2,1075
   138d8:	dcc00a17 	ldw	r19,40(sp)
   138dc:	dc800817 	ldw	r18,32(sp)
   138e0:	003e9706 	br	13340 <_dtoa_r+0x9a8>
   138e4:	b807883a 	mov	r3,r23
   138e8:	182b883a 	mov	r21,r3
   138ec:	ddc00717 	ldw	r23,28(sp)
   138f0:	00800e0e 	bge	zero,r2,1392c <_dtoa_r+0xf94>
   138f4:	e00b883a 	mov	r5,fp
   138f8:	01800044 	movi	r6,1
   138fc:	8009883a 	mov	r4,r16
   13900:	d8c01515 	stw	r3,84(sp)
   13904:	00164380 	call	16438 <__lshift>
   13908:	1009883a 	mov	r4,r2
   1390c:	a00b883a 	mov	r5,r20
   13910:	1039883a 	mov	fp,r2
   13914:	00165940 	call	16594 <__mcmp>
   13918:	d8c01517 	ldw	r3,84(sp)
   1391c:	0081880e 	bge	zero,r2,13f40 <_dtoa_r+0x15a8>
   13920:	00800e44 	movi	r2,57
   13924:	b0c00c44 	addi	r3,r22,49
   13928:	a8816326 	beq	r21,r2,13eb8 <_dtoa_r+0x1520>
   1392c:	90c00005 	stb	r3,0(r18)
   13930:	95800044 	addi	r22,r18,1
   13934:	982b883a 	mov	r21,r19
   13938:	003f1606 	br	13594 <_dtoa_r+0xbfc>
   1393c:	300b883a 	mov	r5,r6
   13940:	e009883a 	mov	r4,fp
   13944:	d9801515 	stw	r6,84(sp)
   13948:	00165940 	call	16594 <__mcmp>
   1394c:	d9801517 	ldw	r6,84(sp)
   13950:	8009883a 	mov	r4,r16
   13954:	d8801515 	stw	r2,84(sp)
   13958:	300b883a 	mov	r5,r6
   1395c:	0015d980 	call	15d98 <_Bfree>
   13960:	d8801517 	ldw	r2,84(sp)
   13964:	103f6d1e 	bne	r2,zero,1371c <_dtoa_r+0xd84>
   13968:	d9c00417 	ldw	r7,16(sp)
   1396c:	383f6b1e 	bne	r7,zero,1371c <_dtoa_r+0xd84>
   13970:	d8c00317 	ldw	r3,12(sp)
   13974:	183f691e 	bne	r3,zero,1371c <_dtoa_r+0xd84>
   13978:	b807883a 	mov	r3,r23
   1397c:	00800e44 	movi	r2,57
   13980:	ddc00717 	ldw	r23,28(sp)
   13984:	18814c26 	beq	r3,r2,13eb8 <_dtoa_r+0x1520>
   13988:	057fe80e 	bge	zero,r21,1392c <_dtoa_r+0xf94>
   1398c:	b0c00c44 	addi	r3,r22,49
   13990:	003fe606 	br	1392c <_dtoa_r+0xf94>
   13994:	880b883a 	mov	r5,r17
   13998:	8009883a 	mov	r4,r16
   1399c:	01800284 	movi	r6,10
   139a0:	000f883a 	mov	r7,zero
   139a4:	0015dc00 	call	15dc0 <__multadd>
   139a8:	1023883a 	mov	r17,r2
   139ac:	1027883a 	mov	r19,r2
   139b0:	a825883a 	mov	r18,r21
   139b4:	003f4506 	br	136cc <_dtoa_r+0xd34>
   139b8:	e009883a 	mov	r4,fp
   139bc:	a00b883a 	mov	r5,r20
   139c0:	00165940 	call	16594 <__mcmp>
   139c4:	103ebc0e 	bge	r2,zero,134b8 <_dtoa_r+0xb20>
   139c8:	e00b883a 	mov	r5,fp
   139cc:	8009883a 	mov	r4,r16
   139d0:	01800284 	movi	r6,10
   139d4:	000f883a 	mov	r7,zero
   139d8:	0015dc00 	call	15dc0 <__multadd>
   139dc:	1039883a 	mov	fp,r2
   139e0:	d8800617 	ldw	r2,24(sp)
   139e4:	d8c00c17 	ldw	r3,48(sp)
   139e8:	10bfffc4 	addi	r2,r2,-1
   139ec:	d8800615 	stw	r2,24(sp)
   139f0:	1801571e 	bne	r3,zero,13f50 <_dtoa_r+0x15b8>
   139f4:	d9c00e17 	ldw	r7,56(sp)
   139f8:	d9c00915 	stw	r7,36(sp)
   139fc:	003eae06 	br	134b8 <_dtoa_r+0xb20>
   13a00:	a0800417 	ldw	r2,16(r20)
   13a04:	10800104 	addi	r2,r2,4
   13a08:	1085883a 	add	r2,r2,r2
   13a0c:	1085883a 	add	r2,r2,r2
   13a10:	a085883a 	add	r2,r20,r2
   13a14:	11000017 	ldw	r4,0(r2)
   13a18:	0015fd80 	call	15fd8 <__hi0bits>
   13a1c:	00c00804 	movi	r3,32
   13a20:	1885c83a 	sub	r2,r3,r2
   13a24:	003e8306 	br	13434 <_dtoa_r+0xa9c>
   13a28:	d9c00417 	ldw	r7,16(sp)
   13a2c:	00800084 	movi	r2,2
   13a30:	11fea30e 	bge	r2,r7,134c0 <_dtoa_r+0xb28>
   13a34:	d8800917 	ldw	r2,36(sp)
   13a38:	103f8c1e 	bne	r2,zero,1386c <_dtoa_r+0xed4>
   13a3c:	a00b883a 	mov	r5,r20
   13a40:	8009883a 	mov	r4,r16
   13a44:	01800144 	movi	r6,5
   13a48:	000f883a 	mov	r7,zero
   13a4c:	0015dc00 	call	15dc0 <__multadd>
   13a50:	e009883a 	mov	r4,fp
   13a54:	100b883a 	mov	r5,r2
   13a58:	1029883a 	mov	r20,r2
   13a5c:	00165940 	call	16594 <__mcmp>
   13a60:	00bf820e 	bge	zero,r2,1386c <_dtoa_r+0xed4>
   13a64:	00800c44 	movi	r2,49
   13a68:	b8800005 	stb	r2,0(r23)
   13a6c:	d8800617 	ldw	r2,24(sp)
   13a70:	bd800044 	addi	r22,r23,1
   13a74:	10800044 	addi	r2,r2,1
   13a78:	d8800615 	stw	r2,24(sp)
   13a7c:	003f7f06 	br	1387c <_dtoa_r+0xee4>
   13a80:	dc000417 	ldw	r16,16(sp)
   13a84:	003d6506 	br	1301c <_dtoa_r+0x684>
   13a88:	9009883a 	mov	r4,r18
   13a8c:	0018f900 	call	18f90 <__floatsidf>
   13a90:	1009883a 	mov	r4,r2
   13a94:	180b883a 	mov	r5,r3
   13a98:	980d883a 	mov	r6,r19
   13a9c:	a00f883a 	mov	r7,r20
   13aa0:	001891c0 	call	1891c <__muldf3>
   13aa4:	1009883a 	mov	r4,r2
   13aa8:	180b883a 	mov	r5,r3
   13aac:	000d883a 	mov	r6,zero
   13ab0:	01d00734 	movhi	r7,16412
   13ab4:	00188680 	call	18868 <__adddf3>
   13ab8:	057f3034 	movhi	r21,64704
   13abc:	1025883a 	mov	r18,r2
   13ac0:	1d6b883a 	add	r21,r3,r21
   13ac4:	9809883a 	mov	r4,r19
   13ac8:	a00b883a 	mov	r5,r20
   13acc:	000d883a 	mov	r6,zero
   13ad0:	01d00534 	movhi	r7,16404
   13ad4:	00188bc0 	call	188bc <__subdf3>
   13ad8:	1009883a 	mov	r4,r2
   13adc:	180b883a 	mov	r5,r3
   13ae0:	900d883a 	mov	r6,r18
   13ae4:	a80f883a 	mov	r7,r21
   13ae8:	1027883a 	mov	r19,r2
   13aec:	1829883a 	mov	r20,r3
   13af0:	0018e6c0 	call	18e6c <__gtdf2>
   13af4:	00806616 	blt	zero,r2,13c90 <_dtoa_r+0x12f8>
   13af8:	a9e0003c 	xorhi	r7,r21,32768
   13afc:	9809883a 	mov	r4,r19
   13b00:	a00b883a 	mov	r5,r20
   13b04:	900d883a 	mov	r6,r18
   13b08:	0018f340 	call	18f34 <__ltdf2>
   13b0c:	103d710e 	bge	r2,zero,130d4 <_dtoa_r+0x73c>
   13b10:	0029883a 	mov	r20,zero
   13b14:	002b883a 	mov	r21,zero
   13b18:	003f5406 	br	1386c <_dtoa_r+0xed4>
   13b1c:	d9800a17 	ldw	r6,40(sp)
   13b20:	e00b883a 	mov	r5,fp
   13b24:	8009883a 	mov	r4,r16
   13b28:	001630c0 	call	1630c <__pow5mult>
   13b2c:	1039883a 	mov	fp,r2
   13b30:	003e2e06 	br	133ec <_dtoa_r+0xa54>
   13b34:	d8000c15 	stw	zero,48(sp)
   13b38:	003f2006 	br	137bc <_dtoa_r+0xe24>
   13b3c:	00800044 	movi	r2,1
   13b40:	d8800c15 	stw	r2,48(sp)
   13b44:	003c5d06 	br	12cbc <_dtoa_r+0x324>
   13b48:	d8c00a17 	ldw	r3,40(sp)
   13b4c:	d9000b17 	ldw	r4,44(sp)
   13b50:	dcc00a15 	stw	r19,40(sp)
   13b54:	98c5c83a 	sub	r2,r19,r3
   13b58:	2089883a 	add	r4,r4,r2
   13b5c:	d9000b15 	stw	r4,44(sp)
   13b60:	0027883a 	mov	r19,zero
   13b64:	003df206 	br	13330 <_dtoa_r+0x998>
   13b68:	d9000317 	ldw	r4,12(sp)
   13b6c:	8829883a 	mov	r20,r17
   13b70:	04800084 	movi	r18,2
   13b74:	d9001015 	stw	r4,64(sp)
   13b78:	003c8106 	br	12d80 <_dtoa_r+0x3e8>
   13b7c:	04800044 	movi	r18,1
   13b80:	dc800e15 	stw	r18,56(sp)
   13b84:	dc800915 	stw	r18,36(sp)
   13b88:	dc802115 	stw	r18,132(sp)
   13b8c:	003f1206 	br	137d8 <_dtoa_r+0xe40>
   13b90:	d8800617 	ldw	r2,24(sp)
   13b94:	00abc83a 	sub	r21,zero,r2
   13b98:	a800a426 	beq	r21,zero,13e2c <_dtoa_r+0x1494>
   13b9c:	a88003cc 	andi	r2,r21,15
   13ba0:	100490fa 	slli	r2,r2,3
   13ba4:	00c000f4 	movhi	r3,3
   13ba8:	18e05f04 	addi	r3,r3,-32388
   13bac:	d9000317 	ldw	r4,12(sp)
   13bb0:	1885883a 	add	r2,r3,r2
   13bb4:	11800017 	ldw	r6,0(r2)
   13bb8:	11c00117 	ldw	r7,4(r2)
   13bbc:	a82bd13a 	srai	r21,r21,4
   13bc0:	880b883a 	mov	r5,r17
   13bc4:	001891c0 	call	1891c <__muldf3>
   13bc8:	1027883a 	mov	r19,r2
   13bcc:	1829883a 	mov	r20,r3
   13bd0:	a800e826 	beq	r21,zero,13f74 <_dtoa_r+0x15dc>
   13bd4:	058000f4 	movhi	r22,3
   13bd8:	b5a05504 	addi	r22,r22,-32428
   13bdc:	04800084 	movi	r18,2
   13be0:	a980004c 	andi	r6,r21,1
   13be4:	1009883a 	mov	r4,r2
   13be8:	a82bd07a 	srai	r21,r21,1
   13bec:	180b883a 	mov	r5,r3
   13bf0:	30000426 	beq	r6,zero,13c04 <_dtoa_r+0x126c>
   13bf4:	b1800017 	ldw	r6,0(r22)
   13bf8:	b1c00117 	ldw	r7,4(r22)
   13bfc:	94800044 	addi	r18,r18,1
   13c00:	001891c0 	call	1891c <__muldf3>
   13c04:	b5800204 	addi	r22,r22,8
   13c08:	a83ff51e 	bne	r21,zero,13be0 <_dtoa_r+0x1248>
   13c0c:	1027883a 	mov	r19,r2
   13c10:	1829883a 	mov	r20,r3
   13c14:	003c7306 	br	12de4 <_dtoa_r+0x44c>
   13c18:	21000044 	addi	r4,r4,1
   13c1c:	11000005 	stb	r4,0(r2)
   13c20:	003e5c06 	br	13594 <_dtoa_r+0xbfc>
   13c24:	a9400117 	ldw	r5,4(r21)
   13c28:	8009883a 	mov	r4,r16
   13c2c:	0015cf00 	call	15cf0 <_Balloc>
   13c30:	a9800417 	ldw	r6,16(r21)
   13c34:	11000304 	addi	r4,r2,12
   13c38:	a9400304 	addi	r5,r21,12
   13c3c:	31800084 	addi	r6,r6,2
   13c40:	318d883a 	add	r6,r6,r6
   13c44:	318d883a 	add	r6,r6,r6
   13c48:	1023883a 	mov	r17,r2
   13c4c:	00159f40 	call	159f4 <memcpy>
   13c50:	8009883a 	mov	r4,r16
   13c54:	880b883a 	mov	r5,r17
   13c58:	01800044 	movi	r6,1
   13c5c:	00164380 	call	16438 <__lshift>
   13c60:	1027883a 	mov	r19,r2
   13c64:	003e8f06 	br	136a4 <_dtoa_r+0xd0c>
   13c68:	b807883a 	mov	r3,r23
   13c6c:	00800e44 	movi	r2,57
   13c70:	ddc00717 	ldw	r23,28(sp)
   13c74:	18809026 	beq	r3,r2,13eb8 <_dtoa_r+0x1520>
   13c78:	18c00044 	addi	r3,r3,1
   13c7c:	003f2b06 	br	1392c <_dtoa_r+0xf94>
   13c80:	b807883a 	mov	r3,r23
   13c84:	982b883a 	mov	r21,r19
   13c88:	ddc00717 	ldw	r23,28(sp)
   13c8c:	003e2406 	br	13520 <_dtoa_r+0xb88>
   13c90:	0029883a 	mov	r20,zero
   13c94:	002b883a 	mov	r21,zero
   13c98:	003f7206 	br	13a64 <_dtoa_r+0x10cc>
   13c9c:	593fffc4 	addi	r4,r11,-1
   13ca0:	200490fa 	slli	r2,r4,3
   13ca4:	00c000f4 	movhi	r3,3
   13ca8:	18e05f04 	addi	r3,r3,-32388
   13cac:	d9001015 	stw	r4,64(sp)
   13cb0:	1885883a 	add	r2,r3,r2
   13cb4:	11000017 	ldw	r4,0(r2)
   13cb8:	11400117 	ldw	r5,4(r2)
   13cbc:	900d883a 	mov	r6,r18
   13cc0:	a80f883a 	mov	r7,r21
   13cc4:	dac01615 	stw	r11,88(sp)
   13cc8:	001891c0 	call	1891c <__muldf3>
   13ccc:	a00b883a 	mov	r5,r20
   13cd0:	9809883a 	mov	r4,r19
   13cd4:	d8c01215 	stw	r3,72(sp)
   13cd8:	d8801115 	stw	r2,68(sp)
   13cdc:	00190640 	call	19064 <__fixdfsi>
   13ce0:	1009883a 	mov	r4,r2
   13ce4:	1025883a 	mov	r18,r2
   13ce8:	0018f900 	call	18f90 <__floatsidf>
   13cec:	9809883a 	mov	r4,r19
   13cf0:	a00b883a 	mov	r5,r20
   13cf4:	100d883a 	mov	r6,r2
   13cf8:	180f883a 	mov	r7,r3
   13cfc:	94800c04 	addi	r18,r18,48
   13d00:	00188bc0 	call	188bc <__subdf3>
   13d04:	bc800005 	stb	r18,0(r23)
   13d08:	dac01617 	ldw	r11,88(sp)
   13d0c:	102b883a 	mov	r21,r2
   13d10:	00800044 	movi	r2,1
   13d14:	bd800044 	addi	r22,r23,1
   13d18:	1815883a 	mov	r10,r3
   13d1c:	58802226 	beq	r11,r2,13da8 <_dtoa_r+0x1410>
   13d20:	bad7883a 	add	r11,r23,r11
   13d24:	dc001415 	stw	r16,80(sp)
   13d28:	a805883a 	mov	r2,r21
   13d2c:	b027883a 	mov	r19,r22
   13d30:	5821883a 	mov	r16,r11
   13d34:	882b883a 	mov	r21,r17
   13d38:	000d883a 	mov	r6,zero
   13d3c:	01d00934 	movhi	r7,16420
   13d40:	1009883a 	mov	r4,r2
   13d44:	180b883a 	mov	r5,r3
   13d48:	001891c0 	call	1891c <__muldf3>
   13d4c:	180b883a 	mov	r5,r3
   13d50:	1009883a 	mov	r4,r2
   13d54:	1829883a 	mov	r20,r3
   13d58:	1023883a 	mov	r17,r2
   13d5c:	00190640 	call	19064 <__fixdfsi>
   13d60:	1009883a 	mov	r4,r2
   13d64:	1025883a 	mov	r18,r2
   13d68:	0018f900 	call	18f90 <__floatsidf>
   13d6c:	8809883a 	mov	r4,r17
   13d70:	a00b883a 	mov	r5,r20
   13d74:	100d883a 	mov	r6,r2
   13d78:	180f883a 	mov	r7,r3
   13d7c:	94800c04 	addi	r18,r18,48
   13d80:	00188bc0 	call	188bc <__subdf3>
   13d84:	9cc00044 	addi	r19,r19,1
   13d88:	9cbfffc5 	stb	r18,-1(r19)
   13d8c:	9c3fea1e 	bne	r19,r16,13d38 <_dtoa_r+0x13a0>
   13d90:	1815883a 	mov	r10,r3
   13d94:	d8c01017 	ldw	r3,64(sp)
   13d98:	dc001417 	ldw	r16,80(sp)
   13d9c:	a823883a 	mov	r17,r21
   13da0:	b0ed883a 	add	r22,r22,r3
   13da4:	102b883a 	mov	r21,r2
   13da8:	d9001117 	ldw	r4,68(sp)
   13dac:	d9401217 	ldw	r5,72(sp)
   13db0:	000d883a 	mov	r6,zero
   13db4:	01cff834 	movhi	r7,16352
   13db8:	da801515 	stw	r10,84(sp)
   13dbc:	00188680 	call	18868 <__adddf3>
   13dc0:	da801517 	ldw	r10,84(sp)
   13dc4:	1009883a 	mov	r4,r2
   13dc8:	180b883a 	mov	r5,r3
   13dcc:	500f883a 	mov	r7,r10
   13dd0:	a80d883a 	mov	r6,r21
   13dd4:	0018f340 	call	18f34 <__ltdf2>
   13dd8:	da801517 	ldw	r10,84(sp)
   13ddc:	10003b0e 	bge	r2,zero,13ecc <_dtoa_r+0x1534>
   13de0:	d9c01317 	ldw	r7,76(sp)
   13de4:	b53fffc3 	ldbu	r20,-1(r22)
   13de8:	d9c00615 	stw	r7,24(sp)
   13dec:	003d3106 	br	132b4 <_dtoa_r+0x91c>
   13df0:	d8800817 	ldw	r2,32(sp)
   13df4:	11e5c83a 	sub	r18,r2,r7
   13df8:	0005883a 	mov	r2,zero
   13dfc:	003d5006 	br	13340 <_dtoa_r+0x9a8>
   13e00:	05800044 	movi	r22,1
   13e04:	003dc406 	br	13518 <_dtoa_r+0xb80>
   13e08:	a5000044 	addi	r20,r20,1
   13e0c:	15000005 	stb	r20,0(r2)
   13e10:	003c8206 	br	1301c <_dtoa_r+0x684>
   13e14:	d8800217 	ldw	r2,8(sp)
   13e18:	00c00d84 	movi	r3,54
   13e1c:	dcc00a17 	ldw	r19,40(sp)
   13e20:	1885c83a 	sub	r2,r3,r2
   13e24:	dc800817 	ldw	r18,32(sp)
   13e28:	003d4506 	br	13340 <_dtoa_r+0x9a8>
   13e2c:	dcc00317 	ldw	r19,12(sp)
   13e30:	8829883a 	mov	r20,r17
   13e34:	04800084 	movi	r18,2
   13e38:	003bea06 	br	12de4 <_dtoa_r+0x44c>
   13e3c:	d9000917 	ldw	r4,36(sp)
   13e40:	203f1126 	beq	r4,zero,13a88 <_dtoa_r+0x10f0>
   13e44:	d9c00e17 	ldw	r7,56(sp)
   13e48:	01fca20e 	bge	zero,r7,130d4 <_dtoa_r+0x73c>
   13e4c:	a00b883a 	mov	r5,r20
   13e50:	9809883a 	mov	r4,r19
   13e54:	000d883a 	mov	r6,zero
   13e58:	01d00934 	movhi	r7,16420
   13e5c:	001891c0 	call	1891c <__muldf3>
   13e60:	91000044 	addi	r4,r18,1
   13e64:	1027883a 	mov	r19,r2
   13e68:	1829883a 	mov	r20,r3
   13e6c:	0018f900 	call	18f90 <__floatsidf>
   13e70:	9809883a 	mov	r4,r19
   13e74:	a00b883a 	mov	r5,r20
   13e78:	100d883a 	mov	r6,r2
   13e7c:	180f883a 	mov	r7,r3
   13e80:	001891c0 	call	1891c <__muldf3>
   13e84:	1009883a 	mov	r4,r2
   13e88:	180b883a 	mov	r5,r3
   13e8c:	000d883a 	mov	r6,zero
   13e90:	01d00734 	movhi	r7,16412
   13e94:	00188680 	call	18868 <__adddf3>
   13e98:	1025883a 	mov	r18,r2
   13e9c:	d8800617 	ldw	r2,24(sp)
   13ea0:	057f3034 	movhi	r21,64704
   13ea4:	1d6b883a 	add	r21,r3,r21
   13ea8:	10bfffc4 	addi	r2,r2,-1
   13eac:	d8801315 	stw	r2,76(sp)
   13eb0:	dac00e17 	ldw	r11,56(sp)
   13eb4:	003be706 	br	12e54 <_dtoa_r+0x4bc>
   13eb8:	01000e44 	movi	r4,57
   13ebc:	91000005 	stb	r4,0(r18)
   13ec0:	95800044 	addi	r22,r18,1
   13ec4:	982b883a 	mov	r21,r19
   13ec8:	003da106 	br	13550 <_dtoa_r+0xbb8>
   13ecc:	d9801117 	ldw	r6,68(sp)
   13ed0:	d9c01217 	ldw	r7,72(sp)
   13ed4:	0009883a 	mov	r4,zero
   13ed8:	014ff834 	movhi	r5,16352
   13edc:	da801515 	stw	r10,84(sp)
   13ee0:	00188bc0 	call	188bc <__subdf3>
   13ee4:	da801517 	ldw	r10,84(sp)
   13ee8:	1009883a 	mov	r4,r2
   13eec:	180b883a 	mov	r5,r3
   13ef0:	a80d883a 	mov	r6,r21
   13ef4:	500f883a 	mov	r7,r10
   13ef8:	0018e6c0 	call	18e6c <__gtdf2>
   13efc:	00bc750e 	bge	zero,r2,130d4 <_dtoa_r+0x73c>
   13f00:	01000c04 	movi	r4,48
   13f04:	00000106 	br	13f0c <_dtoa_r+0x1574>
   13f08:	102d883a 	mov	r22,r2
   13f0c:	b0bfffc4 	addi	r2,r22,-1
   13f10:	10c00007 	ldb	r3,0(r2)
   13f14:	193ffc26 	beq	r3,r4,13f08 <_dtoa_r+0x1570>
   13f18:	d8801317 	ldw	r2,76(sp)
   13f1c:	d8800615 	stw	r2,24(sp)
   13f20:	003c3e06 	br	1301c <_dtoa_r+0x684>
   13f24:	d9001317 	ldw	r4,76(sp)
   13f28:	df001117 	ldw	fp,68(sp)
   13f2c:	d9000615 	stw	r4,24(sp)
   13f30:	003ce006 	br	132b4 <_dtoa_r+0x91c>
   13f34:	df001117 	ldw	fp,68(sp)
   13f38:	dc401217 	ldw	r17,72(sp)
   13f3c:	003c6506 	br	130d4 <_dtoa_r+0x73c>
   13f40:	103e7a1e 	bne	r2,zero,1392c <_dtoa_r+0xf94>
   13f44:	1880004c 	andi	r2,r3,1
   13f48:	103e7826 	beq	r2,zero,1392c <_dtoa_r+0xf94>
   13f4c:	003e7406 	br	13920 <_dtoa_r+0xf88>
   13f50:	8009883a 	mov	r4,r16
   13f54:	a80b883a 	mov	r5,r21
   13f58:	01800284 	movi	r6,10
   13f5c:	000f883a 	mov	r7,zero
   13f60:	0015dc00 	call	15dc0 <__multadd>
   13f64:	d9000e17 	ldw	r4,56(sp)
   13f68:	102b883a 	mov	r21,r2
   13f6c:	d9000915 	stw	r4,36(sp)
   13f70:	003d5106 	br	134b8 <_dtoa_r+0xb20>
   13f74:	04800084 	movi	r18,2
   13f78:	003b9a06 	br	12de4 <_dtoa_r+0x44c>
   13f7c:	d8c01317 	ldw	r3,76(sp)
   13f80:	d8c00615 	stw	r3,24(sp)
   13f84:	003ccb06 	br	132b4 <_dtoa_r+0x91c>
   13f88:	d8c01317 	ldw	r3,76(sp)
   13f8c:	d8c00615 	stw	r3,24(sp)
   13f90:	003c2206 	br	1301c <_dtoa_r+0x684>
   13f94:	20fd3826 	beq	r4,r3,13478 <_dtoa_r+0xae0>
   13f98:	00c00f04 	movi	r3,60
   13f9c:	1885c83a 	sub	r2,r3,r2
   13fa0:	003da906 	br	13648 <_dtoa_r+0xcb0>
   13fa4:	000b883a 	mov	r5,zero
   13fa8:	003b5406 	br	12cfc <_dtoa_r+0x364>
   13fac:	04c00044 	movi	r19,1
   13fb0:	003b3b06 	br	12ca0 <_dtoa_r+0x308>

00013fb4 <_fflush_r>:
   13fb4:	defffb04 	addi	sp,sp,-20
   13fb8:	dcc00315 	stw	r19,12(sp)
   13fbc:	dc400115 	stw	r17,4(sp)
   13fc0:	dfc00415 	stw	ra,16(sp)
   13fc4:	dc800215 	stw	r18,8(sp)
   13fc8:	dc000015 	stw	r16,0(sp)
   13fcc:	2027883a 	mov	r19,r4
   13fd0:	2823883a 	mov	r17,r5
   13fd4:	20000226 	beq	r4,zero,13fe0 <_fflush_r+0x2c>
   13fd8:	20800e17 	ldw	r2,56(r4)
   13fdc:	10005726 	beq	r2,zero,1413c <_fflush_r+0x188>
   13fe0:	8880030b 	ldhu	r2,12(r17)
   13fe4:	10c0020c 	andi	r3,r2,8
   13fe8:	18ffffcc 	andi	r3,r3,65535
   13fec:	18e0001c 	xori	r3,r3,32768
   13ff0:	18e00004 	addi	r3,r3,-32768
   13ff4:	1800311e 	bne	r3,zero,140bc <_fflush_r+0x108>
   13ff8:	89000117 	ldw	r4,4(r17)
   13ffc:	10c20014 	ori	r3,r2,2048
   14000:	88c0030d 	sth	r3,12(r17)
   14004:	180b883a 	mov	r5,r3
   14008:	0100520e 	bge	zero,r4,14154 <_fflush_r+0x1a0>
   1400c:	88c00a17 	ldw	r3,40(r17)
   14010:	18002226 	beq	r3,zero,1409c <_fflush_r+0xe8>
   14014:	1084000c 	andi	r2,r2,4096
   14018:	10bfffcc 	andi	r2,r2,65535
   1401c:	10a0001c 	xori	r2,r2,32768
   14020:	10a00004 	addi	r2,r2,-32768
   14024:	10004e26 	beq	r2,zero,14160 <_fflush_r+0x1ac>
   14028:	8c001417 	ldw	r16,80(r17)
   1402c:	2940010c 	andi	r5,r5,4
   14030:	297fffcc 	andi	r5,r5,65535
   14034:	2960001c 	xori	r5,r5,32768
   14038:	29600004 	addi	r5,r5,-32768
   1403c:	28000626 	beq	r5,zero,14058 <_fflush_r+0xa4>
   14040:	89000117 	ldw	r4,4(r17)
   14044:	88800c17 	ldw	r2,48(r17)
   14048:	8121c83a 	sub	r16,r16,r4
   1404c:	10000226 	beq	r2,zero,14058 <_fflush_r+0xa4>
   14050:	88800f17 	ldw	r2,60(r17)
   14054:	80a1c83a 	sub	r16,r16,r2
   14058:	89400717 	ldw	r5,28(r17)
   1405c:	9809883a 	mov	r4,r19
   14060:	800d883a 	mov	r6,r16
   14064:	000f883a 	mov	r7,zero
   14068:	183ee83a 	callr	r3
   1406c:	8080281e 	bne	r16,r2,14110 <_fflush_r+0x15c>
   14070:	8880030b 	ldhu	r2,12(r17)
   14074:	88c00417 	ldw	r3,16(r17)
   14078:	88000115 	stw	zero,4(r17)
   1407c:	113dffcc 	andi	r4,r2,63487
   14080:	1084000c 	andi	r2,r2,4096
   14084:	10bfffcc 	andi	r2,r2,65535
   14088:	10a0001c 	xori	r2,r2,32768
   1408c:	8900030d 	sth	r4,12(r17)
   14090:	88c00015 	stw	r3,0(r17)
   14094:	10a00004 	addi	r2,r2,-32768
   14098:	10002c1e 	bne	r2,zero,1414c <_fflush_r+0x198>
   1409c:	0005883a 	mov	r2,zero
   140a0:	dfc00417 	ldw	ra,16(sp)
   140a4:	dcc00317 	ldw	r19,12(sp)
   140a8:	dc800217 	ldw	r18,8(sp)
   140ac:	dc400117 	ldw	r17,4(sp)
   140b0:	dc000017 	ldw	r16,0(sp)
   140b4:	dec00504 	addi	sp,sp,20
   140b8:	f800283a 	ret
   140bc:	8c800417 	ldw	r18,16(r17)
   140c0:	903ff626 	beq	r18,zero,1409c <_fflush_r+0xe8>
   140c4:	8c000017 	ldw	r16,0(r17)
   140c8:	108000cc 	andi	r2,r2,3
   140cc:	8c800015 	stw	r18,0(r17)
   140d0:	84a1c83a 	sub	r16,r16,r18
   140d4:	10001b1e 	bne	r2,zero,14144 <_fflush_r+0x190>
   140d8:	88800517 	ldw	r2,20(r17)
   140dc:	88800215 	stw	r2,8(r17)
   140e0:	04000316 	blt	zero,r16,140f0 <_fflush_r+0x13c>
   140e4:	003fed06 	br	1409c <_fflush_r+0xe8>
   140e8:	90a5883a 	add	r18,r18,r2
   140ec:	043feb0e 	bge	zero,r16,1409c <_fflush_r+0xe8>
   140f0:	88800917 	ldw	r2,36(r17)
   140f4:	89400717 	ldw	r5,28(r17)
   140f8:	800f883a 	mov	r7,r16
   140fc:	900d883a 	mov	r6,r18
   14100:	9809883a 	mov	r4,r19
   14104:	103ee83a 	callr	r2
   14108:	80a1c83a 	sub	r16,r16,r2
   1410c:	00bff616 	blt	zero,r2,140e8 <_fflush_r+0x134>
   14110:	88c0030b 	ldhu	r3,12(r17)
   14114:	00bfffc4 	movi	r2,-1
   14118:	18c01014 	ori	r3,r3,64
   1411c:	88c0030d 	sth	r3,12(r17)
   14120:	dfc00417 	ldw	ra,16(sp)
   14124:	dcc00317 	ldw	r19,12(sp)
   14128:	dc800217 	ldw	r18,8(sp)
   1412c:	dc400117 	ldw	r17,4(sp)
   14130:	dc000017 	ldw	r16,0(sp)
   14134:	dec00504 	addi	sp,sp,20
   14138:	f800283a 	ret
   1413c:	001425c0 	call	1425c <__sinit>
   14140:	003fa706 	br	13fe0 <_fflush_r+0x2c>
   14144:	0005883a 	mov	r2,zero
   14148:	003fe406 	br	140dc <_fflush_r+0x128>
   1414c:	8c001415 	stw	r16,80(r17)
   14150:	003fd206 	br	1409c <_fflush_r+0xe8>
   14154:	88c00f17 	ldw	r3,60(r17)
   14158:	00ffac16 	blt	zero,r3,1400c <_fflush_r+0x58>
   1415c:	003fcf06 	br	1409c <_fflush_r+0xe8>
   14160:	89400717 	ldw	r5,28(r17)
   14164:	9809883a 	mov	r4,r19
   14168:	000d883a 	mov	r6,zero
   1416c:	01c00044 	movi	r7,1
   14170:	183ee83a 	callr	r3
   14174:	1021883a 	mov	r16,r2
   14178:	00bfffc4 	movi	r2,-1
   1417c:	80800326 	beq	r16,r2,1418c <_fflush_r+0x1d8>
   14180:	8940030b 	ldhu	r5,12(r17)
   14184:	88c00a17 	ldw	r3,40(r17)
   14188:	003fa806 	br	1402c <_fflush_r+0x78>
   1418c:	98c00017 	ldw	r3,0(r19)
   14190:	00800744 	movi	r2,29
   14194:	18bfde1e 	bne	r3,r2,14110 <_fflush_r+0x15c>
   14198:	003fc006 	br	1409c <_fflush_r+0xe8>

0001419c <fflush>:
   1419c:	200b883a 	mov	r5,r4
   141a0:	20000426 	beq	r4,zero,141b4 <fflush+0x18>
   141a4:	008000f4 	movhi	r2,3
   141a8:	10a76e04 	addi	r2,r2,-25160
   141ac:	11000017 	ldw	r4,0(r2)
   141b0:	0013fb41 	jmpi	13fb4 <_fflush_r>
   141b4:	008000f4 	movhi	r2,3
   141b8:	10a76d04 	addi	r2,r2,-25164
   141bc:	11000017 	ldw	r4,0(r2)
   141c0:	01400074 	movhi	r5,1
   141c4:	294fed04 	addi	r5,r5,16308
   141c8:	0014e3c1 	jmpi	14e3c <_fwalk_reent>

000141cc <__fp_lock>:
   141cc:	0005883a 	mov	r2,zero
   141d0:	f800283a 	ret

000141d4 <__fp_unlock>:
   141d4:	0005883a 	mov	r2,zero
   141d8:	f800283a 	ret

000141dc <_cleanup_r>:
   141dc:	01400074 	movhi	r5,1
   141e0:	295e0204 	addi	r5,r5,30728
   141e4:	0014d941 	jmpi	14d94 <_fwalk>

000141e8 <__sfmoreglue>:
   141e8:	defffc04 	addi	sp,sp,-16
   141ec:	dc400115 	stw	r17,4(sp)
   141f0:	2c401724 	muli	r17,r5,92
   141f4:	dc800215 	stw	r18,8(sp)
   141f8:	2825883a 	mov	r18,r5
   141fc:	89400304 	addi	r5,r17,12
   14200:	dc000015 	stw	r16,0(sp)
   14204:	dfc00315 	stw	ra,12(sp)
   14208:	00151780 	call	15178 <_malloc_r>
   1420c:	1021883a 	mov	r16,r2
   14210:	10000726 	beq	r2,zero,14230 <__sfmoreglue+0x48>
   14214:	11000304 	addi	r4,r2,12
   14218:	10000015 	stw	zero,0(r2)
   1421c:	14800115 	stw	r18,4(r2)
   14220:	11000215 	stw	r4,8(r2)
   14224:	000b883a 	mov	r5,zero
   14228:	880d883a 	mov	r6,r17
   1422c:	0015c140 	call	15c14 <memset>
   14230:	8005883a 	mov	r2,r16
   14234:	dfc00317 	ldw	ra,12(sp)
   14238:	dc800217 	ldw	r18,8(sp)
   1423c:	dc400117 	ldw	r17,4(sp)
   14240:	dc000017 	ldw	r16,0(sp)
   14244:	dec00404 	addi	sp,sp,16
   14248:	f800283a 	ret

0001424c <_cleanup>:
   1424c:	008000f4 	movhi	r2,3
   14250:	10a76d04 	addi	r2,r2,-25164
   14254:	11000017 	ldw	r4,0(r2)
   14258:	00141dc1 	jmpi	141dc <_cleanup_r>

0001425c <__sinit>:
   1425c:	20800e17 	ldw	r2,56(r4)
   14260:	1000401e 	bne	r2,zero,14364 <__sinit+0x108>
   14264:	21400117 	ldw	r5,4(r4)
   14268:	01800074 	movhi	r6,1
   1426c:	31907704 	addi	r6,r6,16860
   14270:	20c00217 	ldw	r3,8(r4)
   14274:	21800f15 	stw	r6,60(r4)
   14278:	2080bb04 	addi	r2,r4,748
   1427c:	02400044 	movi	r9,1
   14280:	018000c4 	movi	r6,3
   14284:	2180b915 	stw	r6,740(r4)
   14288:	2080ba15 	stw	r2,744(r4)
   1428c:	22400e15 	stw	r9,56(r4)
   14290:	20800317 	ldw	r2,12(r4)
   14294:	2000b815 	stw	zero,736(r4)
   14298:	02000074 	movhi	r8,1
   1429c:	421cd704 	addi	r8,r8,29532
   142a0:	01c00074 	movhi	r7,1
   142a4:	39dcec04 	addi	r7,r7,29616
   142a8:	01800074 	movhi	r6,1
   142ac:	319d0e04 	addi	r6,r6,29752
   142b0:	01000074 	movhi	r4,1
   142b4:	211d2504 	addi	r4,r4,29844
   142b8:	02800104 	movi	r10,4
   142bc:	28000015 	stw	zero,0(r5)
   142c0:	28000115 	stw	zero,4(r5)
   142c4:	28000215 	stw	zero,8(r5)
   142c8:	2a80030d 	sth	r10,12(r5)
   142cc:	2800038d 	sth	zero,14(r5)
   142d0:	28000415 	stw	zero,16(r5)
   142d4:	28000515 	stw	zero,20(r5)
   142d8:	28000615 	stw	zero,24(r5)
   142dc:	29400715 	stw	r5,28(r5)
   142e0:	2a000815 	stw	r8,32(r5)
   142e4:	29c00915 	stw	r7,36(r5)
   142e8:	29800a15 	stw	r6,40(r5)
   142ec:	29000b15 	stw	r4,44(r5)
   142f0:	01400284 	movi	r5,10
   142f4:	18000015 	stw	zero,0(r3)
   142f8:	18000115 	stw	zero,4(r3)
   142fc:	18000215 	stw	zero,8(r3)
   14300:	1940030d 	sth	r5,12(r3)
   14304:	1a40038d 	sth	r9,14(r3)
   14308:	18000415 	stw	zero,16(r3)
   1430c:	18000515 	stw	zero,20(r3)
   14310:	18000615 	stw	zero,24(r3)
   14314:	18c00715 	stw	r3,28(r3)
   14318:	1a000815 	stw	r8,32(r3)
   1431c:	19c00915 	stw	r7,36(r3)
   14320:	19800a15 	stw	r6,40(r3)
   14324:	19000b15 	stw	r4,44(r3)
   14328:	00c00484 	movi	r3,18
   1432c:	10c0030d 	sth	r3,12(r2)
   14330:	00c00084 	movi	r3,2
   14334:	10000015 	stw	zero,0(r2)
   14338:	10000115 	stw	zero,4(r2)
   1433c:	10000215 	stw	zero,8(r2)
   14340:	10c0038d 	sth	r3,14(r2)
   14344:	10000415 	stw	zero,16(r2)
   14348:	10000515 	stw	zero,20(r2)
   1434c:	10000615 	stw	zero,24(r2)
   14350:	10800715 	stw	r2,28(r2)
   14354:	12000815 	stw	r8,32(r2)
   14358:	11c00915 	stw	r7,36(r2)
   1435c:	11800a15 	stw	r6,40(r2)
   14360:	11000b15 	stw	r4,44(r2)
   14364:	f800283a 	ret

00014368 <__sfp>:
   14368:	defffc04 	addi	sp,sp,-16
   1436c:	008000f4 	movhi	r2,3
   14370:	10a76d04 	addi	r2,r2,-25164
   14374:	dc400115 	stw	r17,4(sp)
   14378:	14400017 	ldw	r17,0(r2)
   1437c:	dc800215 	stw	r18,8(sp)
   14380:	dfc00315 	stw	ra,12(sp)
   14384:	88800e17 	ldw	r2,56(r17)
   14388:	dc000015 	stw	r16,0(sp)
   1438c:	2025883a 	mov	r18,r4
   14390:	10002826 	beq	r2,zero,14434 <__sfp+0xcc>
   14394:	8c40b804 	addi	r17,r17,736
   14398:	043fffc4 	movi	r16,-1
   1439c:	89400117 	ldw	r5,4(r17)
   143a0:	88800217 	ldw	r2,8(r17)
   143a4:	297fffc4 	addi	r5,r5,-1
   143a8:	28000a16 	blt	r5,zero,143d4 <__sfp+0x6c>
   143ac:	10c0030f 	ldh	r3,12(r2)
   143b0:	18000c26 	beq	r3,zero,143e4 <__sfp+0x7c>
   143b4:	10c01a04 	addi	r3,r2,104
   143b8:	00000206 	br	143c4 <__sfp+0x5c>
   143bc:	19bfe90f 	ldh	r6,-92(r3)
   143c0:	30000826 	beq	r6,zero,143e4 <__sfp+0x7c>
   143c4:	297fffc4 	addi	r5,r5,-1
   143c8:	18bffd04 	addi	r2,r3,-12
   143cc:	18c01704 	addi	r3,r3,92
   143d0:	2c3ffa1e 	bne	r5,r16,143bc <__sfp+0x54>
   143d4:	88800017 	ldw	r2,0(r17)
   143d8:	10001926 	beq	r2,zero,14440 <__sfp+0xd8>
   143dc:	1023883a 	mov	r17,r2
   143e0:	003fee06 	br	1439c <__sfp+0x34>
   143e4:	00ffffc4 	movi	r3,-1
   143e8:	10c0038d 	sth	r3,14(r2)
   143ec:	00c00044 	movi	r3,1
   143f0:	10c0030d 	sth	r3,12(r2)
   143f4:	10000015 	stw	zero,0(r2)
   143f8:	10000215 	stw	zero,8(r2)
   143fc:	10000115 	stw	zero,4(r2)
   14400:	10000415 	stw	zero,16(r2)
   14404:	10000515 	stw	zero,20(r2)
   14408:	10000615 	stw	zero,24(r2)
   1440c:	10000c15 	stw	zero,48(r2)
   14410:	10000d15 	stw	zero,52(r2)
   14414:	10001115 	stw	zero,68(r2)
   14418:	10001215 	stw	zero,72(r2)
   1441c:	dfc00317 	ldw	ra,12(sp)
   14420:	dc800217 	ldw	r18,8(sp)
   14424:	dc400117 	ldw	r17,4(sp)
   14428:	dc000017 	ldw	r16,0(sp)
   1442c:	dec00404 	addi	sp,sp,16
   14430:	f800283a 	ret
   14434:	8809883a 	mov	r4,r17
   14438:	001425c0 	call	1425c <__sinit>
   1443c:	003fd506 	br	14394 <__sfp+0x2c>
   14440:	9009883a 	mov	r4,r18
   14444:	01400104 	movi	r5,4
   14448:	00141e80 	call	141e8 <__sfmoreglue>
   1444c:	88800015 	stw	r2,0(r17)
   14450:	103fe21e 	bne	r2,zero,143dc <__sfp+0x74>
   14454:	00800304 	movi	r2,12
   14458:	90800015 	stw	r2,0(r18)
   1445c:	0005883a 	mov	r2,zero
   14460:	003fee06 	br	1441c <__sfp+0xb4>

00014464 <__sfp_lock_acquire>:
   14464:	f800283a 	ret

00014468 <__sfp_lock_release>:
   14468:	f800283a 	ret

0001446c <__sinit_lock_acquire>:
   1446c:	f800283a 	ret

00014470 <__sinit_lock_release>:
   14470:	f800283a 	ret

00014474 <__fp_lock_all>:
   14474:	008000f4 	movhi	r2,3
   14478:	10a76e04 	addi	r2,r2,-25160
   1447c:	11000017 	ldw	r4,0(r2)
   14480:	01400074 	movhi	r5,1
   14484:	29507304 	addi	r5,r5,16844
   14488:	0014d941 	jmpi	14d94 <_fwalk>

0001448c <__fp_unlock_all>:
   1448c:	008000f4 	movhi	r2,3
   14490:	10a76e04 	addi	r2,r2,-25160
   14494:	11000017 	ldw	r4,0(r2)
   14498:	01400074 	movhi	r5,1
   1449c:	29507504 	addi	r5,r5,16852
   144a0:	0014d941 	jmpi	14d94 <_fwalk>

000144a4 <_malloc_trim_r>:
   144a4:	defffb04 	addi	sp,sp,-20
   144a8:	dcc00315 	stw	r19,12(sp)
   144ac:	dc800215 	stw	r18,8(sp)
   144b0:	dc400115 	stw	r17,4(sp)
   144b4:	dc000015 	stw	r16,0(sp)
   144b8:	2827883a 	mov	r19,r5
   144bc:	dfc00415 	stw	ra,16(sp)
   144c0:	044000f4 	movhi	r17,3
   144c4:	8c61e904 	addi	r17,r17,-30812
   144c8:	2021883a 	mov	r16,r4
   144cc:	0019ec40 	call	19ec4 <__malloc_lock>
   144d0:	88800217 	ldw	r2,8(r17)
   144d4:	14800117 	ldw	r18,4(r2)
   144d8:	00bfff04 	movi	r2,-4
   144dc:	90a4703a 	and	r18,r18,r2
   144e0:	9083fbc4 	addi	r2,r18,4079
   144e4:	14e7c83a 	sub	r19,r2,r19
   144e8:	9826d33a 	srli	r19,r19,12
   144ec:	0083ffc4 	movi	r2,4095
   144f0:	9cffffc4 	addi	r19,r19,-1
   144f4:	9826933a 	slli	r19,r19,12
   144f8:	14c0060e 	bge	r2,r19,14514 <_malloc_trim_r+0x70>
   144fc:	8009883a 	mov	r4,r16
   14500:	000b883a 	mov	r5,zero
   14504:	00172f80 	call	172f8 <_sbrk_r>
   14508:	88c00217 	ldw	r3,8(r17)
   1450c:	1c87883a 	add	r3,r3,r18
   14510:	10c00a26 	beq	r2,r3,1453c <_malloc_trim_r+0x98>
   14514:	8009883a 	mov	r4,r16
   14518:	0019ee40 	call	19ee4 <__malloc_unlock>
   1451c:	0005883a 	mov	r2,zero
   14520:	dfc00417 	ldw	ra,16(sp)
   14524:	dcc00317 	ldw	r19,12(sp)
   14528:	dc800217 	ldw	r18,8(sp)
   1452c:	dc400117 	ldw	r17,4(sp)
   14530:	dc000017 	ldw	r16,0(sp)
   14534:	dec00504 	addi	sp,sp,20
   14538:	f800283a 	ret
   1453c:	8009883a 	mov	r4,r16
   14540:	04cbc83a 	sub	r5,zero,r19
   14544:	00172f80 	call	172f8 <_sbrk_r>
   14548:	00ffffc4 	movi	r3,-1
   1454c:	10c01326 	beq	r2,r3,1459c <_malloc_trim_r+0xf8>
   14550:	008000f4 	movhi	r2,3
   14554:	10a79004 	addi	r2,r2,-25024
   14558:	11000017 	ldw	r4,0(r2)
   1455c:	88c00217 	ldw	r3,8(r17)
   14560:	94e5c83a 	sub	r18,r18,r19
   14564:	94800054 	ori	r18,r18,1
   14568:	24e7c83a 	sub	r19,r4,r19
   1456c:	1c800115 	stw	r18,4(r3)
   14570:	8009883a 	mov	r4,r16
   14574:	14c00015 	stw	r19,0(r2)
   14578:	0019ee40 	call	19ee4 <__malloc_unlock>
   1457c:	00800044 	movi	r2,1
   14580:	dfc00417 	ldw	ra,16(sp)
   14584:	dcc00317 	ldw	r19,12(sp)
   14588:	dc800217 	ldw	r18,8(sp)
   1458c:	dc400117 	ldw	r17,4(sp)
   14590:	dc000017 	ldw	r16,0(sp)
   14594:	dec00504 	addi	sp,sp,20
   14598:	f800283a 	ret
   1459c:	8009883a 	mov	r4,r16
   145a0:	000b883a 	mov	r5,zero
   145a4:	00172f80 	call	172f8 <_sbrk_r>
   145a8:	88c00217 	ldw	r3,8(r17)
   145ac:	014003c4 	movi	r5,15
   145b0:	10c9c83a 	sub	r4,r2,r3
   145b4:	293fd70e 	bge	r5,r4,14514 <_malloc_trim_r+0x70>
   145b8:	014000f4 	movhi	r5,3
   145bc:	29677004 	addi	r5,r5,-25152
   145c0:	29400017 	ldw	r5,0(r5)
   145c4:	21000054 	ori	r4,r4,1
   145c8:	19000115 	stw	r4,4(r3)
   145cc:	1145c83a 	sub	r2,r2,r5
   145d0:	014000f4 	movhi	r5,3
   145d4:	29679004 	addi	r5,r5,-25024
   145d8:	28800015 	stw	r2,0(r5)
   145dc:	003fcd06 	br	14514 <_malloc_trim_r+0x70>

000145e0 <_free_r>:
   145e0:	defffd04 	addi	sp,sp,-12
   145e4:	dc400115 	stw	r17,4(sp)
   145e8:	dc000015 	stw	r16,0(sp)
   145ec:	dfc00215 	stw	ra,8(sp)
   145f0:	2821883a 	mov	r16,r5
   145f4:	2023883a 	mov	r17,r4
   145f8:	28004b26 	beq	r5,zero,14728 <_free_r+0x148>
   145fc:	0019ec40 	call	19ec4 <__malloc_lock>
   14600:	823fff17 	ldw	r8,-4(r16)
   14604:	00bfff84 	movi	r2,-2
   14608:	81bffe04 	addi	r6,r16,-8
   1460c:	4084703a 	and	r2,r8,r2
   14610:	3087883a 	add	r3,r6,r2
   14614:	014000f4 	movhi	r5,3
   14618:	2961e904 	addi	r5,r5,-30812
   1461c:	1a400117 	ldw	r9,4(r3)
   14620:	29000217 	ldw	r4,8(r5)
   14624:	01ffff04 	movi	r7,-4
   14628:	49ce703a 	and	r7,r9,r7
   1462c:	20c06526 	beq	r4,r3,147c4 <_free_r+0x1e4>
   14630:	19c00115 	stw	r7,4(r3)
   14634:	4200004c 	andi	r8,r8,1
   14638:	40003026 	beq	r8,zero,146fc <_free_r+0x11c>
   1463c:	0009883a 	mov	r4,zero
   14640:	19d1883a 	add	r8,r3,r7
   14644:	42000117 	ldw	r8,4(r8)
   14648:	4200004c 	andi	r8,r8,1
   1464c:	4000061e 	bne	r8,zero,14668 <_free_r+0x88>
   14650:	11c5883a 	add	r2,r2,r7
   14654:	19c00217 	ldw	r7,8(r3)
   14658:	20004e26 	beq	r4,zero,14794 <_free_r+0x1b4>
   1465c:	18c00317 	ldw	r3,12(r3)
   14660:	38c00315 	stw	r3,12(r7)
   14664:	19c00215 	stw	r7,8(r3)
   14668:	11c00054 	ori	r7,r2,1
   1466c:	3087883a 	add	r3,r6,r2
   14670:	31c00115 	stw	r7,4(r6)
   14674:	18800015 	stw	r2,0(r3)
   14678:	20001a1e 	bne	r4,zero,146e4 <_free_r+0x104>
   1467c:	00c07fc4 	movi	r3,511
   14680:	18802e2e 	bgeu	r3,r2,1473c <_free_r+0x15c>
   14684:	1006d27a 	srli	r3,r2,9
   14688:	01000104 	movi	r4,4
   1468c:	20c06636 	bltu	r4,r3,14828 <_free_r+0x248>
   14690:	1008d1ba 	srli	r4,r2,6
   14694:	21000e04 	addi	r4,r4,56
   14698:	210f883a 	add	r7,r4,r4
   1469c:	39cf883a 	add	r7,r7,r7
   146a0:	39cf883a 	add	r7,r7,r7
   146a4:	29cf883a 	add	r7,r5,r7
   146a8:	38c00217 	ldw	r3,8(r7)
   146ac:	014000f4 	movhi	r5,3
   146b0:	2961e904 	addi	r5,r5,-30812
   146b4:	19c06126 	beq	r3,r7,1483c <_free_r+0x25c>
   146b8:	013fff04 	movi	r4,-4
   146bc:	19400117 	ldw	r5,4(r3)
   146c0:	290a703a 	and	r5,r5,r4
   146c4:	1140022e 	bgeu	r2,r5,146d0 <_free_r+0xf0>
   146c8:	18c00217 	ldw	r3,8(r3)
   146cc:	38fffb1e 	bne	r7,r3,146bc <_free_r+0xdc>
   146d0:	18800317 	ldw	r2,12(r3)
   146d4:	30800315 	stw	r2,12(r6)
   146d8:	30c00215 	stw	r3,8(r6)
   146dc:	11800215 	stw	r6,8(r2)
   146e0:	19800315 	stw	r6,12(r3)
   146e4:	8809883a 	mov	r4,r17
   146e8:	dfc00217 	ldw	ra,8(sp)
   146ec:	dc400117 	ldw	r17,4(sp)
   146f0:	dc000017 	ldw	r16,0(sp)
   146f4:	dec00304 	addi	sp,sp,12
   146f8:	0019ee41 	jmpi	19ee4 <__malloc_unlock>
   146fc:	813ffe17 	ldw	r4,-8(r16)
   14700:	2a400204 	addi	r9,r5,8
   14704:	310dc83a 	sub	r6,r6,r4
   14708:	32000217 	ldw	r8,8(r6)
   1470c:	1105883a 	add	r2,r2,r4
   14710:	42404326 	beq	r8,r9,14820 <_free_r+0x240>
   14714:	32400317 	ldw	r9,12(r6)
   14718:	0009883a 	mov	r4,zero
   1471c:	42400315 	stw	r9,12(r8)
   14720:	4a000215 	stw	r8,8(r9)
   14724:	003fc606 	br	14640 <_free_r+0x60>
   14728:	dfc00217 	ldw	ra,8(sp)
   1472c:	dc400117 	ldw	r17,4(sp)
   14730:	dc000017 	ldw	r16,0(sp)
   14734:	dec00304 	addi	sp,sp,12
   14738:	f800283a 	ret
   1473c:	1004d0fa 	srli	r2,r2,3
   14740:	02000044 	movi	r8,1
   14744:	29c00117 	ldw	r7,4(r5)
   14748:	1087883a 	add	r3,r2,r2
   1474c:	18c7883a 	add	r3,r3,r3
   14750:	1005d0ba 	srai	r2,r2,2
   14754:	18c7883a 	add	r3,r3,r3
   14758:	28c7883a 	add	r3,r5,r3
   1475c:	19000217 	ldw	r4,8(r3)
   14760:	4084983a 	sll	r2,r8,r2
   14764:	30c00315 	stw	r3,12(r6)
   14768:	31000215 	stw	r4,8(r6)
   1476c:	11c4b03a 	or	r2,r2,r7
   14770:	21800315 	stw	r6,12(r4)
   14774:	8809883a 	mov	r4,r17
   14778:	28800115 	stw	r2,4(r5)
   1477c:	19800215 	stw	r6,8(r3)
   14780:	dfc00217 	ldw	ra,8(sp)
   14784:	dc400117 	ldw	r17,4(sp)
   14788:	dc000017 	ldw	r16,0(sp)
   1478c:	dec00304 	addi	sp,sp,12
   14790:	0019ee41 	jmpi	19ee4 <__malloc_unlock>
   14794:	020000f4 	movhi	r8,3
   14798:	4221eb04 	addi	r8,r8,-30804
   1479c:	3a3faf1e 	bne	r7,r8,1465c <_free_r+0x7c>
   147a0:	29800515 	stw	r6,20(r5)
   147a4:	29800415 	stw	r6,16(r5)
   147a8:	11000054 	ori	r4,r2,1
   147ac:	3087883a 	add	r3,r6,r2
   147b0:	31c00315 	stw	r7,12(r6)
   147b4:	31c00215 	stw	r7,8(r6)
   147b8:	31000115 	stw	r4,4(r6)
   147bc:	18800015 	stw	r2,0(r3)
   147c0:	003fc806 	br	146e4 <_free_r+0x104>
   147c4:	4200004c 	andi	r8,r8,1
   147c8:	3885883a 	add	r2,r7,r2
   147cc:	4000071e 	bne	r8,zero,147ec <_free_r+0x20c>
   147d0:	81fffe17 	ldw	r7,-8(r16)
   147d4:	31cdc83a 	sub	r6,r6,r7
   147d8:	30c00317 	ldw	r3,12(r6)
   147dc:	31000217 	ldw	r4,8(r6)
   147e0:	11c5883a 	add	r2,r2,r7
   147e4:	20c00315 	stw	r3,12(r4)
   147e8:	19000215 	stw	r4,8(r3)
   147ec:	00c000f4 	movhi	r3,3
   147f0:	18e77104 	addi	r3,r3,-25148
   147f4:	18c00017 	ldw	r3,0(r3)
   147f8:	11000054 	ori	r4,r2,1
   147fc:	31000115 	stw	r4,4(r6)
   14800:	29800215 	stw	r6,8(r5)
   14804:	10ffb736 	bltu	r2,r3,146e4 <_free_r+0x104>
   14808:	008000f4 	movhi	r2,3
   1480c:	10a78604 	addi	r2,r2,-25064
   14810:	11400017 	ldw	r5,0(r2)
   14814:	8809883a 	mov	r4,r17
   14818:	00144a40 	call	144a4 <_malloc_trim_r>
   1481c:	003fb106 	br	146e4 <_free_r+0x104>
   14820:	01000044 	movi	r4,1
   14824:	003f8606 	br	14640 <_free_r+0x60>
   14828:	01000504 	movi	r4,20
   1482c:	20c00b36 	bltu	r4,r3,1485c <_free_r+0x27c>
   14830:	190016c4 	addi	r4,r3,91
   14834:	210f883a 	add	r7,r4,r4
   14838:	003f9806 	br	1469c <_free_r+0xbc>
   1483c:	2009d0ba 	srai	r4,r4,2
   14840:	00800044 	movi	r2,1
   14844:	29c00117 	ldw	r7,4(r5)
   14848:	1108983a 	sll	r4,r2,r4
   1484c:	1805883a 	mov	r2,r3
   14850:	21c8b03a 	or	r4,r4,r7
   14854:	29000115 	stw	r4,4(r5)
   14858:	003f9e06 	br	146d4 <_free_r+0xf4>
   1485c:	01001504 	movi	r4,84
   14860:	20c00436 	bltu	r4,r3,14874 <_free_r+0x294>
   14864:	1008d33a 	srli	r4,r2,12
   14868:	21001b84 	addi	r4,r4,110
   1486c:	210f883a 	add	r7,r4,r4
   14870:	003f8a06 	br	1469c <_free_r+0xbc>
   14874:	01005504 	movi	r4,340
   14878:	20c00436 	bltu	r4,r3,1488c <_free_r+0x2ac>
   1487c:	1008d3fa 	srli	r4,r2,15
   14880:	21001dc4 	addi	r4,r4,119
   14884:	210f883a 	add	r7,r4,r4
   14888:	003f8406 	br	1469c <_free_r+0xbc>
   1488c:	01015504 	movi	r4,1364
   14890:	20c00436 	bltu	r4,r3,148a4 <_free_r+0x2c4>
   14894:	1008d4ba 	srli	r4,r2,18
   14898:	21001f04 	addi	r4,r4,124
   1489c:	210f883a 	add	r7,r4,r4
   148a0:	003f7e06 	br	1469c <_free_r+0xbc>
   148a4:	01c03f04 	movi	r7,252
   148a8:	01001f84 	movi	r4,126
   148ac:	003f7b06 	br	1469c <_free_r+0xbc>

000148b0 <__sfvwrite_r>:
   148b0:	30800217 	ldw	r2,8(r6)
   148b4:	defff504 	addi	sp,sp,-44
   148b8:	dd400615 	stw	r21,24(sp)
   148bc:	dd000515 	stw	r20,20(sp)
   148c0:	dc000115 	stw	r16,4(sp)
   148c4:	dfc00a15 	stw	ra,40(sp)
   148c8:	df000915 	stw	fp,36(sp)
   148cc:	ddc00815 	stw	r23,32(sp)
   148d0:	dd800715 	stw	r22,28(sp)
   148d4:	dcc00415 	stw	r19,16(sp)
   148d8:	dc800315 	stw	r18,12(sp)
   148dc:	dc400215 	stw	r17,8(sp)
   148e0:	3029883a 	mov	r20,r6
   148e4:	202b883a 	mov	r21,r4
   148e8:	2821883a 	mov	r16,r5
   148ec:	10002126 	beq	r2,zero,14974 <__sfvwrite_r+0xc4>
   148f0:	2880030b 	ldhu	r2,12(r5)
   148f4:	10c0020c 	andi	r3,r2,8
   148f8:	18ffffcc 	andi	r3,r3,65535
   148fc:	18e0001c 	xori	r3,r3,32768
   14900:	18e00004 	addi	r3,r3,-32768
   14904:	18002826 	beq	r3,zero,149a8 <__sfvwrite_r+0xf8>
   14908:	28c00417 	ldw	r3,16(r5)
   1490c:	18002626 	beq	r3,zero,149a8 <__sfvwrite_r+0xf8>
   14910:	10c0008c 	andi	r3,r2,2
   14914:	18ffffcc 	andi	r3,r3,65535
   14918:	18e0001c 	xori	r3,r3,32768
   1491c:	18e00004 	addi	r3,r3,-32768
   14920:	a4400017 	ldw	r17,0(r20)
   14924:	18002b26 	beq	r3,zero,149d4 <__sfvwrite_r+0x124>
   14928:	0027883a 	mov	r19,zero
   1492c:	0025883a 	mov	r18,zero
   14930:	05810004 	movi	r22,1024
   14934:	980d883a 	mov	r6,r19
   14938:	a809883a 	mov	r4,r21
   1493c:	90004f26 	beq	r18,zero,14a7c <__sfvwrite_r+0x1cc>
   14940:	900f883a 	mov	r7,r18
   14944:	81400717 	ldw	r5,28(r16)
   14948:	b480012e 	bgeu	r22,r18,14950 <__sfvwrite_r+0xa0>
   1494c:	01c10004 	movi	r7,1024
   14950:	80800917 	ldw	r2,36(r16)
   14954:	103ee83a 	callr	r2
   14958:	0080540e 	bge	zero,r2,14aac <__sfvwrite_r+0x1fc>
   1495c:	a0c00217 	ldw	r3,8(r20)
   14960:	98a7883a 	add	r19,r19,r2
   14964:	90a5c83a 	sub	r18,r18,r2
   14968:	1885c83a 	sub	r2,r3,r2
   1496c:	a0800215 	stw	r2,8(r20)
   14970:	103ff01e 	bne	r2,zero,14934 <__sfvwrite_r+0x84>
   14974:	0005883a 	mov	r2,zero
   14978:	dfc00a17 	ldw	ra,40(sp)
   1497c:	df000917 	ldw	fp,36(sp)
   14980:	ddc00817 	ldw	r23,32(sp)
   14984:	dd800717 	ldw	r22,28(sp)
   14988:	dd400617 	ldw	r21,24(sp)
   1498c:	dd000517 	ldw	r20,20(sp)
   14990:	dcc00417 	ldw	r19,16(sp)
   14994:	dc800317 	ldw	r18,12(sp)
   14998:	dc400217 	ldw	r17,8(sp)
   1499c:	dc000117 	ldw	r16,4(sp)
   149a0:	dec00b04 	addi	sp,sp,44
   149a4:	f800283a 	ret
   149a8:	a809883a 	mov	r4,r21
   149ac:	800b883a 	mov	r5,r16
   149b0:	001261c0 	call	1261c <__swsetup_r>
   149b4:	1000f01e 	bne	r2,zero,14d78 <__sfvwrite_r+0x4c8>
   149b8:	8080030b 	ldhu	r2,12(r16)
   149bc:	a4400017 	ldw	r17,0(r20)
   149c0:	10c0008c 	andi	r3,r2,2
   149c4:	18ffffcc 	andi	r3,r3,65535
   149c8:	18e0001c 	xori	r3,r3,32768
   149cc:	18e00004 	addi	r3,r3,-32768
   149d0:	183fd51e 	bne	r3,zero,14928 <__sfvwrite_r+0x78>
   149d4:	10c0004c 	andi	r3,r2,1
   149d8:	002d883a 	mov	r22,zero
   149dc:	1800381e 	bne	r3,zero,14ac0 <__sfvwrite_r+0x210>
   149e0:	0025883a 	mov	r18,zero
   149e4:	90002126 	beq	r18,zero,14a6c <__sfvwrite_r+0x1bc>
   149e8:	10c0800c 	andi	r3,r2,512
   149ec:	18ffffcc 	andi	r3,r3,65535
   149f0:	18e0001c 	xori	r3,r3,32768
   149f4:	18e00004 	addi	r3,r3,-32768
   149f8:	84c00217 	ldw	r19,8(r16)
   149fc:	18006b26 	beq	r3,zero,14bac <__sfvwrite_r+0x2fc>
   14a00:	980f883a 	mov	r7,r19
   14a04:	94c08636 	bltu	r18,r19,14c20 <__sfvwrite_r+0x370>
   14a08:	10c1200c 	andi	r3,r2,1152
   14a0c:	18009f1e 	bne	r3,zero,14c8c <__sfvwrite_r+0x3dc>
   14a10:	81000017 	ldw	r4,0(r16)
   14a14:	982f883a 	mov	r23,r19
   14a18:	9039883a 	mov	fp,r18
   14a1c:	9027883a 	mov	r19,r18
   14a20:	380d883a 	mov	r6,r7
   14a24:	b00b883a 	mov	r5,r22
   14a28:	d9c00015 	stw	r7,0(sp)
   14a2c:	0015aec0 	call	15aec <memmove>
   14a30:	d9c00017 	ldw	r7,0(sp)
   14a34:	81000217 	ldw	r4,8(r16)
   14a38:	80800017 	ldw	r2,0(r16)
   14a3c:	25efc83a 	sub	r23,r4,r23
   14a40:	11cf883a 	add	r7,r2,r7
   14a44:	85c00215 	stw	r23,8(r16)
   14a48:	81c00015 	stw	r7,0(r16)
   14a4c:	a0800217 	ldw	r2,8(r20)
   14a50:	b72d883a 	add	r22,r22,fp
   14a54:	9725c83a 	sub	r18,r18,fp
   14a58:	14e7c83a 	sub	r19,r2,r19
   14a5c:	a4c00215 	stw	r19,8(r20)
   14a60:	983fc426 	beq	r19,zero,14974 <__sfvwrite_r+0xc4>
   14a64:	8080030b 	ldhu	r2,12(r16)
   14a68:	903fdf1e 	bne	r18,zero,149e8 <__sfvwrite_r+0x138>
   14a6c:	8d800017 	ldw	r22,0(r17)
   14a70:	8c800117 	ldw	r18,4(r17)
   14a74:	8c400204 	addi	r17,r17,8
   14a78:	003fda06 	br	149e4 <__sfvwrite_r+0x134>
   14a7c:	8cc00017 	ldw	r19,0(r17)
   14a80:	8c800117 	ldw	r18,4(r17)
   14a84:	8c400204 	addi	r17,r17,8
   14a88:	003faa06 	br	14934 <__sfvwrite_r+0x84>
   14a8c:	0016c980 	call	16c98 <_realloc_r>
   14a90:	102f883a 	mov	r23,r2
   14a94:	10009f1e 	bne	r2,zero,14d14 <__sfvwrite_r+0x464>
   14a98:	81400417 	ldw	r5,16(r16)
   14a9c:	a809883a 	mov	r4,r21
   14aa0:	00145e00 	call	145e0 <_free_r>
   14aa4:	00800304 	movi	r2,12
   14aa8:	a8800015 	stw	r2,0(r21)
   14aac:	80c0030b 	ldhu	r3,12(r16)
   14ab0:	00bfffc4 	movi	r2,-1
   14ab4:	18c01014 	ori	r3,r3,64
   14ab8:	80c0030d 	sth	r3,12(r16)
   14abc:	003fae06 	br	14978 <__sfvwrite_r+0xc8>
   14ac0:	0007883a 	mov	r3,zero
   14ac4:	0039883a 	mov	fp,zero
   14ac8:	0025883a 	mov	r18,zero
   14acc:	90001e26 	beq	r18,zero,14b48 <__sfvwrite_r+0x298>
   14ad0:	18006526 	beq	r3,zero,14c68 <__sfvwrite_r+0x3b8>
   14ad4:	b02f883a 	mov	r23,r22
   14ad8:	9580012e 	bgeu	r18,r22,14ae0 <__sfvwrite_r+0x230>
   14adc:	902f883a 	mov	r23,r18
   14ae0:	81000017 	ldw	r4,0(r16)
   14ae4:	80800417 	ldw	r2,16(r16)
   14ae8:	84c00217 	ldw	r19,8(r16)
   14aec:	81c00517 	ldw	r7,20(r16)
   14af0:	1100022e 	bgeu	r2,r4,14afc <__sfvwrite_r+0x24c>
   14af4:	99e7883a 	add	r19,r19,r7
   14af8:	9dc01816 	blt	r19,r23,14b5c <__sfvwrite_r+0x2ac>
   14afc:	b9c03b16 	blt	r23,r7,14bec <__sfvwrite_r+0x33c>
   14b00:	80800917 	ldw	r2,36(r16)
   14b04:	81400717 	ldw	r5,28(r16)
   14b08:	a809883a 	mov	r4,r21
   14b0c:	d8c00015 	stw	r3,0(sp)
   14b10:	e00d883a 	mov	r6,fp
   14b14:	103ee83a 	callr	r2
   14b18:	1027883a 	mov	r19,r2
   14b1c:	d8c00017 	ldw	r3,0(sp)
   14b20:	00bfe20e 	bge	zero,r2,14aac <__sfvwrite_r+0x1fc>
   14b24:	b4edc83a 	sub	r22,r22,r19
   14b28:	b0001a26 	beq	r22,zero,14b94 <__sfvwrite_r+0x2e4>
   14b2c:	a0800217 	ldw	r2,8(r20)
   14b30:	e4f9883a 	add	fp,fp,r19
   14b34:	94e5c83a 	sub	r18,r18,r19
   14b38:	14e7c83a 	sub	r19,r2,r19
   14b3c:	a4c00215 	stw	r19,8(r20)
   14b40:	983f8c26 	beq	r19,zero,14974 <__sfvwrite_r+0xc4>
   14b44:	903fe21e 	bne	r18,zero,14ad0 <__sfvwrite_r+0x220>
   14b48:	8f000017 	ldw	fp,0(r17)
   14b4c:	8c800117 	ldw	r18,4(r17)
   14b50:	0007883a 	mov	r3,zero
   14b54:	8c400204 	addi	r17,r17,8
   14b58:	003fdc06 	br	14acc <__sfvwrite_r+0x21c>
   14b5c:	e00b883a 	mov	r5,fp
   14b60:	980d883a 	mov	r6,r19
   14b64:	d8c00015 	stw	r3,0(sp)
   14b68:	0015aec0 	call	15aec <memmove>
   14b6c:	80800017 	ldw	r2,0(r16)
   14b70:	a809883a 	mov	r4,r21
   14b74:	800b883a 	mov	r5,r16
   14b78:	14c5883a 	add	r2,r2,r19
   14b7c:	80800015 	stw	r2,0(r16)
   14b80:	0013fb40 	call	13fb4 <_fflush_r>
   14b84:	d8c00017 	ldw	r3,0(sp)
   14b88:	103fc81e 	bne	r2,zero,14aac <__sfvwrite_r+0x1fc>
   14b8c:	b4edc83a 	sub	r22,r22,r19
   14b90:	b03fe61e 	bne	r22,zero,14b2c <__sfvwrite_r+0x27c>
   14b94:	a809883a 	mov	r4,r21
   14b98:	800b883a 	mov	r5,r16
   14b9c:	0013fb40 	call	13fb4 <_fflush_r>
   14ba0:	103fc21e 	bne	r2,zero,14aac <__sfvwrite_r+0x1fc>
   14ba4:	0007883a 	mov	r3,zero
   14ba8:	003fe006 	br	14b2c <__sfvwrite_r+0x27c>
   14bac:	81000017 	ldw	r4,0(r16)
   14bb0:	80800417 	ldw	r2,16(r16)
   14bb4:	1100022e 	bgeu	r2,r4,14bc0 <__sfvwrite_r+0x310>
   14bb8:	9839883a 	mov	fp,r19
   14bbc:	9c806036 	bltu	r19,r18,14d40 <__sfvwrite_r+0x490>
   14bc0:	81c00517 	ldw	r7,20(r16)
   14bc4:	91c01c36 	bltu	r18,r7,14c38 <__sfvwrite_r+0x388>
   14bc8:	80800917 	ldw	r2,36(r16)
   14bcc:	81400717 	ldw	r5,28(r16)
   14bd0:	a809883a 	mov	r4,r21
   14bd4:	b00d883a 	mov	r6,r22
   14bd8:	103ee83a 	callr	r2
   14bdc:	1027883a 	mov	r19,r2
   14be0:	00bfb20e 	bge	zero,r2,14aac <__sfvwrite_r+0x1fc>
   14be4:	1039883a 	mov	fp,r2
   14be8:	003f9806 	br	14a4c <__sfvwrite_r+0x19c>
   14bec:	b80d883a 	mov	r6,r23
   14bf0:	e00b883a 	mov	r5,fp
   14bf4:	d8c00015 	stw	r3,0(sp)
   14bf8:	0015aec0 	call	15aec <memmove>
   14bfc:	80800217 	ldw	r2,8(r16)
   14c00:	81000017 	ldw	r4,0(r16)
   14c04:	b827883a 	mov	r19,r23
   14c08:	15c5c83a 	sub	r2,r2,r23
   14c0c:	25ef883a 	add	r23,r4,r23
   14c10:	80800215 	stw	r2,8(r16)
   14c14:	85c00015 	stw	r23,0(r16)
   14c18:	d8c00017 	ldw	r3,0(sp)
   14c1c:	003fc106 	br	14b24 <__sfvwrite_r+0x274>
   14c20:	81000017 	ldw	r4,0(r16)
   14c24:	902f883a 	mov	r23,r18
   14c28:	9039883a 	mov	fp,r18
   14c2c:	9027883a 	mov	r19,r18
   14c30:	900f883a 	mov	r7,r18
   14c34:	003f7a06 	br	14a20 <__sfvwrite_r+0x170>
   14c38:	b00b883a 	mov	r5,r22
   14c3c:	900d883a 	mov	r6,r18
   14c40:	0015aec0 	call	15aec <memmove>
   14c44:	80c00217 	ldw	r3,8(r16)
   14c48:	80800017 	ldw	r2,0(r16)
   14c4c:	9027883a 	mov	r19,r18
   14c50:	1c87c83a 	sub	r3,r3,r18
   14c54:	1485883a 	add	r2,r2,r18
   14c58:	80c00215 	stw	r3,8(r16)
   14c5c:	80800015 	stw	r2,0(r16)
   14c60:	9039883a 	mov	fp,r18
   14c64:	003f7906 	br	14a4c <__sfvwrite_r+0x19c>
   14c68:	e009883a 	mov	r4,fp
   14c6c:	01400284 	movi	r5,10
   14c70:	900d883a 	mov	r6,r18
   14c74:	00158fc0 	call	158fc <memchr>
   14c78:	10003c26 	beq	r2,zero,14d6c <__sfvwrite_r+0x4bc>
   14c7c:	15800044 	addi	r22,r2,1
   14c80:	b72dc83a 	sub	r22,r22,fp
   14c84:	00c00044 	movi	r3,1
   14c88:	003f9206 	br	14ad4 <__sfvwrite_r+0x224>
   14c8c:	81000517 	ldw	r4,20(r16)
   14c90:	81400417 	ldw	r5,16(r16)
   14c94:	80c00017 	ldw	r3,0(r16)
   14c98:	210d883a 	add	r6,r4,r4
   14c9c:	3109883a 	add	r4,r6,r4
   14ca0:	2026d7fa 	srli	r19,r4,31
   14ca4:	1979c83a 	sub	fp,r3,r5
   14ca8:	e1800044 	addi	r6,fp,1
   14cac:	9909883a 	add	r4,r19,r4
   14cb0:	2027d07a 	srai	r19,r4,1
   14cb4:	3489883a 	add	r4,r6,r18
   14cb8:	980d883a 	mov	r6,r19
   14cbc:	9900022e 	bgeu	r19,r4,14cc8 <__sfvwrite_r+0x418>
   14cc0:	2027883a 	mov	r19,r4
   14cc4:	200d883a 	mov	r6,r4
   14cc8:	1081000c 	andi	r2,r2,1024
   14ccc:	10bfffcc 	andi	r2,r2,65535
   14cd0:	10a0001c 	xori	r2,r2,32768
   14cd4:	10a00004 	addi	r2,r2,-32768
   14cd8:	a809883a 	mov	r4,r21
   14cdc:	103f6b26 	beq	r2,zero,14a8c <__sfvwrite_r+0x1dc>
   14ce0:	300b883a 	mov	r5,r6
   14ce4:	00151780 	call	15178 <_malloc_r>
   14ce8:	102f883a 	mov	r23,r2
   14cec:	103f6d26 	beq	r2,zero,14aa4 <__sfvwrite_r+0x1f4>
   14cf0:	81400417 	ldw	r5,16(r16)
   14cf4:	1009883a 	mov	r4,r2
   14cf8:	e00d883a 	mov	r6,fp
   14cfc:	00159f40 	call	159f4 <memcpy>
   14d00:	8080030b 	ldhu	r2,12(r16)
   14d04:	00fedfc4 	movi	r3,-1153
   14d08:	10c4703a 	and	r2,r2,r3
   14d0c:	10802014 	ori	r2,r2,128
   14d10:	8080030d 	sth	r2,12(r16)
   14d14:	bf09883a 	add	r4,r23,fp
   14d18:	9f07c83a 	sub	r3,r19,fp
   14d1c:	85c00415 	stw	r23,16(r16)
   14d20:	84c00515 	stw	r19,20(r16)
   14d24:	81000015 	stw	r4,0(r16)
   14d28:	902f883a 	mov	r23,r18
   14d2c:	80c00215 	stw	r3,8(r16)
   14d30:	9039883a 	mov	fp,r18
   14d34:	9027883a 	mov	r19,r18
   14d38:	900f883a 	mov	r7,r18
   14d3c:	003f3806 	br	14a20 <__sfvwrite_r+0x170>
   14d40:	b00b883a 	mov	r5,r22
   14d44:	980d883a 	mov	r6,r19
   14d48:	0015aec0 	call	15aec <memmove>
   14d4c:	80800017 	ldw	r2,0(r16)
   14d50:	a809883a 	mov	r4,r21
   14d54:	800b883a 	mov	r5,r16
   14d58:	14c5883a 	add	r2,r2,r19
   14d5c:	80800015 	stw	r2,0(r16)
   14d60:	0013fb40 	call	13fb4 <_fflush_r>
   14d64:	103f3926 	beq	r2,zero,14a4c <__sfvwrite_r+0x19c>
   14d68:	003f5006 	br	14aac <__sfvwrite_r+0x1fc>
   14d6c:	95800044 	addi	r22,r18,1
   14d70:	00c00044 	movi	r3,1
   14d74:	003f5706 	br	14ad4 <__sfvwrite_r+0x224>
   14d78:	80c0030b 	ldhu	r3,12(r16)
   14d7c:	00bfffc4 	movi	r2,-1
   14d80:	18c01014 	ori	r3,r3,64
   14d84:	80c0030d 	sth	r3,12(r16)
   14d88:	00c00244 	movi	r3,9
   14d8c:	a8c00015 	stw	r3,0(r21)
   14d90:	003ef906 	br	14978 <__sfvwrite_r+0xc8>

00014d94 <_fwalk>:
   14d94:	defff904 	addi	sp,sp,-28
   14d98:	dcc00315 	stw	r19,12(sp)
   14d9c:	24c0b804 	addi	r19,r4,736
   14da0:	dd400515 	stw	r21,20(sp)
   14da4:	dd000415 	stw	r20,16(sp)
   14da8:	dfc00615 	stw	ra,24(sp)
   14dac:	dc800215 	stw	r18,8(sp)
   14db0:	dc400115 	stw	r17,4(sp)
   14db4:	dc000015 	stw	r16,0(sp)
   14db8:	282b883a 	mov	r21,r5
   14dbc:	0029883a 	mov	r20,zero
   14dc0:	00144640 	call	14464 <__sfp_lock_acquire>
   14dc4:	98001226 	beq	r19,zero,14e10 <_fwalk+0x7c>
   14dc8:	04bfffc4 	movi	r18,-1
   14dcc:	9c400117 	ldw	r17,4(r19)
   14dd0:	9c000217 	ldw	r16,8(r19)
   14dd4:	8c7fffc4 	addi	r17,r17,-1
   14dd8:	88000b16 	blt	r17,zero,14e08 <_fwalk+0x74>
   14ddc:	84000304 	addi	r16,r16,12
   14de0:	80c0000f 	ldh	r3,0(r16)
   14de4:	8c7fffc4 	addi	r17,r17,-1
   14de8:	813ffd04 	addi	r4,r16,-12
   14dec:	18000426 	beq	r3,zero,14e00 <_fwalk+0x6c>
   14df0:	80c0008f 	ldh	r3,2(r16)
   14df4:	1c800226 	beq	r3,r18,14e00 <_fwalk+0x6c>
   14df8:	a83ee83a 	callr	r21
   14dfc:	a0a8b03a 	or	r20,r20,r2
   14e00:	84001704 	addi	r16,r16,92
   14e04:	8cbff61e 	bne	r17,r18,14de0 <_fwalk+0x4c>
   14e08:	9cc00017 	ldw	r19,0(r19)
   14e0c:	983fef1e 	bne	r19,zero,14dcc <_fwalk+0x38>
   14e10:	00144680 	call	14468 <__sfp_lock_release>
   14e14:	a005883a 	mov	r2,r20
   14e18:	dfc00617 	ldw	ra,24(sp)
   14e1c:	dd400517 	ldw	r21,20(sp)
   14e20:	dd000417 	ldw	r20,16(sp)
   14e24:	dcc00317 	ldw	r19,12(sp)
   14e28:	dc800217 	ldw	r18,8(sp)
   14e2c:	dc400117 	ldw	r17,4(sp)
   14e30:	dc000017 	ldw	r16,0(sp)
   14e34:	dec00704 	addi	sp,sp,28
   14e38:	f800283a 	ret

00014e3c <_fwalk_reent>:
   14e3c:	defff804 	addi	sp,sp,-32
   14e40:	dcc00315 	stw	r19,12(sp)
   14e44:	24c0b804 	addi	r19,r4,736
   14e48:	dd800615 	stw	r22,24(sp)
   14e4c:	dd400515 	stw	r21,20(sp)
   14e50:	dd000415 	stw	r20,16(sp)
   14e54:	dfc00715 	stw	ra,28(sp)
   14e58:	dc800215 	stw	r18,8(sp)
   14e5c:	dc400115 	stw	r17,4(sp)
   14e60:	dc000015 	stw	r16,0(sp)
   14e64:	2029883a 	mov	r20,r4
   14e68:	282b883a 	mov	r21,r5
   14e6c:	002d883a 	mov	r22,zero
   14e70:	00144640 	call	14464 <__sfp_lock_acquire>
   14e74:	98001326 	beq	r19,zero,14ec4 <_fwalk_reent+0x88>
   14e78:	04bfffc4 	movi	r18,-1
   14e7c:	9c400117 	ldw	r17,4(r19)
   14e80:	9c000217 	ldw	r16,8(r19)
   14e84:	8c7fffc4 	addi	r17,r17,-1
   14e88:	88000c16 	blt	r17,zero,14ebc <_fwalk_reent+0x80>
   14e8c:	84000304 	addi	r16,r16,12
   14e90:	80c0000f 	ldh	r3,0(r16)
   14e94:	8c7fffc4 	addi	r17,r17,-1
   14e98:	817ffd04 	addi	r5,r16,-12
   14e9c:	18000526 	beq	r3,zero,14eb4 <_fwalk_reent+0x78>
   14ea0:	80c0008f 	ldh	r3,2(r16)
   14ea4:	a009883a 	mov	r4,r20
   14ea8:	1c800226 	beq	r3,r18,14eb4 <_fwalk_reent+0x78>
   14eac:	a83ee83a 	callr	r21
   14eb0:	b0acb03a 	or	r22,r22,r2
   14eb4:	84001704 	addi	r16,r16,92
   14eb8:	8cbff51e 	bne	r17,r18,14e90 <_fwalk_reent+0x54>
   14ebc:	9cc00017 	ldw	r19,0(r19)
   14ec0:	983fee1e 	bne	r19,zero,14e7c <_fwalk_reent+0x40>
   14ec4:	00144680 	call	14468 <__sfp_lock_release>
   14ec8:	b005883a 	mov	r2,r22
   14ecc:	dfc00717 	ldw	ra,28(sp)
   14ed0:	dd800617 	ldw	r22,24(sp)
   14ed4:	dd400517 	ldw	r21,20(sp)
   14ed8:	dd000417 	ldw	r20,16(sp)
   14edc:	dcc00317 	ldw	r19,12(sp)
   14ee0:	dc800217 	ldw	r18,8(sp)
   14ee4:	dc400117 	ldw	r17,4(sp)
   14ee8:	dc000017 	ldw	r16,0(sp)
   14eec:	dec00804 	addi	sp,sp,32
   14ef0:	f800283a 	ret

00014ef4 <_setlocale_r>:
   14ef4:	defffc04 	addi	sp,sp,-16
   14ef8:	dc800215 	stw	r18,8(sp)
   14efc:	dc400115 	stw	r17,4(sp)
   14f00:	dc000015 	stw	r16,0(sp)
   14f04:	dfc00315 	stw	ra,12(sp)
   14f08:	3021883a 	mov	r16,r6
   14f0c:	2023883a 	mov	r17,r4
   14f10:	2825883a 	mov	r18,r5
   14f14:	30001626 	beq	r6,zero,14f70 <_setlocale_r+0x7c>
   14f18:	3009883a 	mov	r4,r6
   14f1c:	014000f4 	movhi	r5,3
   14f20:	29603a04 	addi	r5,r5,-32536
   14f24:	001749c0 	call	1749c <strcmp>
   14f28:	10000a1e 	bne	r2,zero,14f54 <_setlocale_r+0x60>
   14f2c:	8c800c15 	stw	r18,48(r17)
   14f30:	8c000d15 	stw	r16,52(r17)
   14f34:	008000f4 	movhi	r2,3
   14f38:	10a03a04 	addi	r2,r2,-32536
   14f3c:	dfc00317 	ldw	ra,12(sp)
   14f40:	dc800217 	ldw	r18,8(sp)
   14f44:	dc400117 	ldw	r17,4(sp)
   14f48:	dc000017 	ldw	r16,0(sp)
   14f4c:	dec00404 	addi	sp,sp,16
   14f50:	f800283a 	ret
   14f54:	8009883a 	mov	r4,r16
   14f58:	014000f4 	movhi	r5,3
   14f5c:	29602504 	addi	r5,r5,-32620
   14f60:	001749c0 	call	1749c <strcmp>
   14f64:	103ff126 	beq	r2,zero,14f2c <_setlocale_r+0x38>
   14f68:	0005883a 	mov	r2,zero
   14f6c:	003ff306 	br	14f3c <_setlocale_r+0x48>
   14f70:	008000f4 	movhi	r2,3
   14f74:	10a03a04 	addi	r2,r2,-32536
   14f78:	dfc00317 	ldw	ra,12(sp)
   14f7c:	dc800217 	ldw	r18,8(sp)
   14f80:	dc400117 	ldw	r17,4(sp)
   14f84:	dc000017 	ldw	r16,0(sp)
   14f88:	dec00404 	addi	sp,sp,16
   14f8c:	f800283a 	ret

00014f90 <__locale_charset>:
   14f90:	008000f4 	movhi	r2,3
   14f94:	10a03b04 	addi	r2,r2,-32532
   14f98:	f800283a 	ret

00014f9c <_localeconv_r>:
   14f9c:	008000f4 	movhi	r2,3
   14fa0:	10a03f04 	addi	r2,r2,-32516
   14fa4:	f800283a 	ret

00014fa8 <setlocale>:
   14fa8:	00c000f4 	movhi	r3,3
   14fac:	18e76e04 	addi	r3,r3,-25160
   14fb0:	2005883a 	mov	r2,r4
   14fb4:	19000017 	ldw	r4,0(r3)
   14fb8:	280d883a 	mov	r6,r5
   14fbc:	100b883a 	mov	r5,r2
   14fc0:	0014ef41 	jmpi	14ef4 <_setlocale_r>

00014fc4 <localeconv>:
   14fc4:	008000f4 	movhi	r2,3
   14fc8:	10a03f04 	addi	r2,r2,-32516
   14fcc:	f800283a 	ret

00014fd0 <__smakebuf_r>:
   14fd0:	2880030b 	ldhu	r2,12(r5)
   14fd4:	deffed04 	addi	sp,sp,-76
   14fd8:	dc401015 	stw	r17,64(sp)
   14fdc:	10c0008c 	andi	r3,r2,2
   14fe0:	18ffffcc 	andi	r3,r3,65535
   14fe4:	18e0001c 	xori	r3,r3,32768
   14fe8:	dc000f15 	stw	r16,60(sp)
   14fec:	dfc01215 	stw	ra,72(sp)
   14ff0:	dc801115 	stw	r18,68(sp)
   14ff4:	18e00004 	addi	r3,r3,-32768
   14ff8:	2821883a 	mov	r16,r5
   14ffc:	2023883a 	mov	r17,r4
   15000:	1800381e 	bne	r3,zero,150e4 <__smakebuf_r+0x114>
   15004:	2940038f 	ldh	r5,14(r5)
   15008:	28002d16 	blt	r5,zero,150c0 <__smakebuf_r+0xf0>
   1500c:	d80d883a 	mov	r6,sp
   15010:	001781c0 	call	1781c <_fstat_r>
   15014:	10002916 	blt	r2,zero,150bc <__smakebuf_r+0xec>
   15018:	d8800117 	ldw	r2,4(sp)
   1501c:	00e00014 	movui	r3,32768
   15020:	10bc000c 	andi	r2,r2,61440
   15024:	10c03c26 	beq	r2,r3,15118 <__smakebuf_r+0x148>
   15028:	80c0030b 	ldhu	r3,12(r16)
   1502c:	18c20014 	ori	r3,r3,2048
   15030:	80c0030d 	sth	r3,12(r16)
   15034:	00c80004 	movi	r3,8192
   15038:	10c00c1e 	bne	r2,r3,1506c <__smakebuf_r+0x9c>
   1503c:	8140038f 	ldh	r5,14(r16)
   15040:	8809883a 	mov	r4,r17
   15044:	00178840 	call	17884 <_isatty_r>
   15048:	10000826 	beq	r2,zero,1506c <__smakebuf_r+0x9c>
   1504c:	80c0030b 	ldhu	r3,12(r16)
   15050:	808010c4 	addi	r2,r16,67
   15054:	80800015 	stw	r2,0(r16)
   15058:	18c00054 	ori	r3,r3,1
   1505c:	80800415 	stw	r2,16(r16)
   15060:	00800044 	movi	r2,1
   15064:	80c0030d 	sth	r3,12(r16)
   15068:	80800515 	stw	r2,20(r16)
   1506c:	04810004 	movi	r18,1024
   15070:	8809883a 	mov	r4,r17
   15074:	900b883a 	mov	r5,r18
   15078:	00151780 	call	15178 <_malloc_r>
   1507c:	10003026 	beq	r2,zero,15140 <__smakebuf_r+0x170>
   15080:	80c0030b 	ldhu	r3,12(r16)
   15084:	01000074 	movhi	r4,1
   15088:	21107704 	addi	r4,r4,16860
   1508c:	89000f15 	stw	r4,60(r17)
   15090:	18c02014 	ori	r3,r3,128
   15094:	80c0030d 	sth	r3,12(r16)
   15098:	80800015 	stw	r2,0(r16)
   1509c:	80800415 	stw	r2,16(r16)
   150a0:	84800515 	stw	r18,20(r16)
   150a4:	dfc01217 	ldw	ra,72(sp)
   150a8:	dc801117 	ldw	r18,68(sp)
   150ac:	dc401017 	ldw	r17,64(sp)
   150b0:	dc000f17 	ldw	r16,60(sp)
   150b4:	dec01304 	addi	sp,sp,76
   150b8:	f800283a 	ret
   150bc:	8080030b 	ldhu	r2,12(r16)
   150c0:	10c0200c 	andi	r3,r2,128
   150c4:	18ffffcc 	andi	r3,r3,65535
   150c8:	18e0001c 	xori	r3,r3,32768
   150cc:	18e00004 	addi	r3,r3,-32768
   150d0:	18000f1e 	bne	r3,zero,15110 <__smakebuf_r+0x140>
   150d4:	04810004 	movi	r18,1024
   150d8:	10820014 	ori	r2,r2,2048
   150dc:	8080030d 	sth	r2,12(r16)
   150e0:	003fe306 	br	15070 <__smakebuf_r+0xa0>
   150e4:	288010c4 	addi	r2,r5,67
   150e8:	28800015 	stw	r2,0(r5)
   150ec:	28800415 	stw	r2,16(r5)
   150f0:	00800044 	movi	r2,1
   150f4:	28800515 	stw	r2,20(r5)
   150f8:	dfc01217 	ldw	ra,72(sp)
   150fc:	dc801117 	ldw	r18,68(sp)
   15100:	dc401017 	ldw	r17,64(sp)
   15104:	dc000f17 	ldw	r16,60(sp)
   15108:	dec01304 	addi	sp,sp,76
   1510c:	f800283a 	ret
   15110:	04801004 	movi	r18,64
   15114:	003ff006 	br	150d8 <__smakebuf_r+0x108>
   15118:	81000a17 	ldw	r4,40(r16)
   1511c:	00c00074 	movhi	r3,1
   15120:	18dd0e04 	addi	r3,r3,29752
   15124:	20ffc01e 	bne	r4,r3,15028 <__smakebuf_r+0x58>
   15128:	8080030b 	ldhu	r2,12(r16)
   1512c:	00c10004 	movi	r3,1024
   15130:	80c01315 	stw	r3,76(r16)
   15134:	10c4b03a 	or	r2,r2,r3
   15138:	8080030d 	sth	r2,12(r16)
   1513c:	003fcb06 	br	1506c <__smakebuf_r+0x9c>
   15140:	8080030b 	ldhu	r2,12(r16)
   15144:	10c0800c 	andi	r3,r2,512
   15148:	18ffffcc 	andi	r3,r3,65535
   1514c:	18e0001c 	xori	r3,r3,32768
   15150:	18e00004 	addi	r3,r3,-32768
   15154:	183fd31e 	bne	r3,zero,150a4 <__smakebuf_r+0xd4>
   15158:	10800094 	ori	r2,r2,2
   1515c:	80c010c4 	addi	r3,r16,67
   15160:	8080030d 	sth	r2,12(r16)
   15164:	00800044 	movi	r2,1
   15168:	80c00015 	stw	r3,0(r16)
   1516c:	80c00415 	stw	r3,16(r16)
   15170:	80800515 	stw	r2,20(r16)
   15174:	003fcb06 	br	150a4 <__smakebuf_r+0xd4>

00015178 <_malloc_r>:
   15178:	defff604 	addi	sp,sp,-40
   1517c:	dc800215 	stw	r18,8(sp)
   15180:	dfc00915 	stw	ra,36(sp)
   15184:	df000815 	stw	fp,32(sp)
   15188:	ddc00715 	stw	r23,28(sp)
   1518c:	dd800615 	stw	r22,24(sp)
   15190:	dd400515 	stw	r21,20(sp)
   15194:	dd000415 	stw	r20,16(sp)
   15198:	dcc00315 	stw	r19,12(sp)
   1519c:	dc400115 	stw	r17,4(sp)
   151a0:	dc000015 	stw	r16,0(sp)
   151a4:	288002c4 	addi	r2,r5,11
   151a8:	00c00584 	movi	r3,22
   151ac:	2025883a 	mov	r18,r4
   151b0:	18802b2e 	bgeu	r3,r2,15260 <_malloc_r+0xe8>
   151b4:	047ffe04 	movi	r17,-8
   151b8:	1462703a 	and	r17,r2,r17
   151bc:	88002a16 	blt	r17,zero,15268 <_malloc_r+0xf0>
   151c0:	89402936 	bltu	r17,r5,15268 <_malloc_r+0xf0>
   151c4:	9009883a 	mov	r4,r18
   151c8:	0019ec40 	call	19ec4 <__malloc_lock>
   151cc:	00807dc4 	movi	r2,503
   151d0:	14402936 	bltu	r2,r17,15278 <_malloc_r+0x100>
   151d4:	8808d0fa 	srli	r4,r17,3
   151d8:	04c000f4 	movhi	r19,3
   151dc:	9ce1e904 	addi	r19,r19,-30812
   151e0:	2105883a 	add	r2,r4,r4
   151e4:	1085883a 	add	r2,r2,r2
   151e8:	1085883a 	add	r2,r2,r2
   151ec:	9885883a 	add	r2,r19,r2
   151f0:	14000317 	ldw	r16,12(r2)
   151f4:	80815526 	beq	r16,r2,1574c <_malloc_r+0x5d4>
   151f8:	81000117 	ldw	r4,4(r16)
   151fc:	00bfff04 	movi	r2,-4
   15200:	80c00317 	ldw	r3,12(r16)
   15204:	2084703a 	and	r2,r4,r2
   15208:	8085883a 	add	r2,r16,r2
   1520c:	11800117 	ldw	r6,4(r2)
   15210:	81400217 	ldw	r5,8(r16)
   15214:	9009883a 	mov	r4,r18
   15218:	31800054 	ori	r6,r6,1
   1521c:	11800115 	stw	r6,4(r2)
   15220:	28c00315 	stw	r3,12(r5)
   15224:	19400215 	stw	r5,8(r3)
   15228:	0019ee40 	call	19ee4 <__malloc_unlock>
   1522c:	80800204 	addi	r2,r16,8
   15230:	dfc00917 	ldw	ra,36(sp)
   15234:	df000817 	ldw	fp,32(sp)
   15238:	ddc00717 	ldw	r23,28(sp)
   1523c:	dd800617 	ldw	r22,24(sp)
   15240:	dd400517 	ldw	r21,20(sp)
   15244:	dd000417 	ldw	r20,16(sp)
   15248:	dcc00317 	ldw	r19,12(sp)
   1524c:	dc800217 	ldw	r18,8(sp)
   15250:	dc400117 	ldw	r17,4(sp)
   15254:	dc000017 	ldw	r16,0(sp)
   15258:	dec00a04 	addi	sp,sp,40
   1525c:	f800283a 	ret
   15260:	04400404 	movi	r17,16
   15264:	897fd72e 	bgeu	r17,r5,151c4 <_malloc_r+0x4c>
   15268:	00800304 	movi	r2,12
   1526c:	90800015 	stw	r2,0(r18)
   15270:	0005883a 	mov	r2,zero
   15274:	003fee06 	br	15230 <_malloc_r+0xb8>
   15278:	8808d27a 	srli	r4,r17,9
   1527c:	20007126 	beq	r4,zero,15444 <_malloc_r+0x2cc>
   15280:	00800104 	movi	r2,4
   15284:	1100eb36 	bltu	r2,r4,15634 <_malloc_r+0x4bc>
   15288:	8808d1ba 	srli	r4,r17,6
   1528c:	21000e04 	addi	r4,r4,56
   15290:	210b883a 	add	r5,r4,r4
   15294:	294b883a 	add	r5,r5,r5
   15298:	294b883a 	add	r5,r5,r5
   1529c:	04c000f4 	movhi	r19,3
   152a0:	9ce1e904 	addi	r19,r19,-30812
   152a4:	994b883a 	add	r5,r19,r5
   152a8:	2c000317 	ldw	r16,12(r5)
   152ac:	2c000e26 	beq	r5,r16,152e8 <_malloc_r+0x170>
   152b0:	80c00117 	ldw	r3,4(r16)
   152b4:	01ffff04 	movi	r7,-4
   152b8:	018003c4 	movi	r6,15
   152bc:	19c6703a 	and	r3,r3,r7
   152c0:	1c45c83a 	sub	r2,r3,r17
   152c4:	30800716 	blt	r6,r2,152e4 <_malloc_r+0x16c>
   152c8:	1000610e 	bge	r2,zero,15450 <_malloc_r+0x2d8>
   152cc:	84000317 	ldw	r16,12(r16)
   152d0:	2c000526 	beq	r5,r16,152e8 <_malloc_r+0x170>
   152d4:	80c00117 	ldw	r3,4(r16)
   152d8:	19c6703a 	and	r3,r3,r7
   152dc:	1c45c83a 	sub	r2,r3,r17
   152e0:	30bff90e 	bge	r6,r2,152c8 <_malloc_r+0x150>
   152e4:	213fffc4 	addi	r4,r4,-1
   152e8:	21000044 	addi	r4,r4,1
   152ec:	9c000417 	ldw	r16,16(r19)
   152f0:	00c000f4 	movhi	r3,3
   152f4:	18e1e904 	addi	r3,r3,-30812
   152f8:	1a400204 	addi	r9,r3,8
   152fc:	8240ff26 	beq	r16,r9,156fc <_malloc_r+0x584>
   15300:	81400117 	ldw	r5,4(r16)
   15304:	00bfff04 	movi	r2,-4
   15308:	018003c4 	movi	r6,15
   1530c:	2884703a 	and	r2,r5,r2
   15310:	144bc83a 	sub	r5,r2,r17
   15314:	3140ea16 	blt	r6,r5,156c0 <_malloc_r+0x548>
   15318:	1a400515 	stw	r9,20(r3)
   1531c:	1a400415 	stw	r9,16(r3)
   15320:	2800570e 	bge	r5,zero,15480 <_malloc_r+0x308>
   15324:	01407fc4 	movi	r5,511
   15328:	2880ca36 	bltu	r5,r2,15654 <_malloc_r+0x4dc>
   1532c:	1004d0fa 	srli	r2,r2,3
   15330:	02000044 	movi	r8,1
   15334:	19c00117 	ldw	r7,4(r3)
   15338:	108b883a 	add	r5,r2,r2
   1533c:	294b883a 	add	r5,r5,r5
   15340:	1005d0ba 	srai	r2,r2,2
   15344:	294b883a 	add	r5,r5,r5
   15348:	28cb883a 	add	r5,r5,r3
   1534c:	29800217 	ldw	r6,8(r5)
   15350:	4084983a 	sll	r2,r8,r2
   15354:	81400315 	stw	r5,12(r16)
   15358:	81800215 	stw	r6,8(r16)
   1535c:	11c4b03a 	or	r2,r2,r7
   15360:	18800115 	stw	r2,4(r3)
   15364:	2c000215 	stw	r16,8(r5)
   15368:	34000315 	stw	r16,12(r6)
   1536c:	200bd0ba 	srai	r5,r4,2
   15370:	00c00044 	movi	r3,1
   15374:	194a983a 	sll	r5,r3,r5
   15378:	11404936 	bltu	r2,r5,154a0 <_malloc_r+0x328>
   1537c:	1146703a 	and	r3,r2,r5
   15380:	18000a1e 	bne	r3,zero,153ac <_malloc_r+0x234>
   15384:	00ffff04 	movi	r3,-4
   15388:	294b883a 	add	r5,r5,r5
   1538c:	20c8703a 	and	r4,r4,r3
   15390:	1146703a 	and	r3,r2,r5
   15394:	21000104 	addi	r4,r4,4
   15398:	1800041e 	bne	r3,zero,153ac <_malloc_r+0x234>
   1539c:	294b883a 	add	r5,r5,r5
   153a0:	1146703a 	and	r3,r2,r5
   153a4:	21000104 	addi	r4,r4,4
   153a8:	183ffc26 	beq	r3,zero,1539c <_malloc_r+0x224>
   153ac:	023fff04 	movi	r8,-4
   153b0:	01c003c4 	movi	r7,15
   153b4:	2105883a 	add	r2,r4,r4
   153b8:	1085883a 	add	r2,r2,r2
   153bc:	1085883a 	add	r2,r2,r2
   153c0:	9899883a 	add	r12,r19,r2
   153c4:	62800304 	addi	r10,r12,12
   153c8:	2017883a 	mov	r11,r4
   153cc:	54000017 	ldw	r16,0(r10)
   153d0:	51bffd04 	addi	r6,r10,-12
   153d4:	8180041e 	bne	r16,r6,153e8 <_malloc_r+0x270>
   153d8:	0000ca06 	br	15704 <_malloc_r+0x58c>
   153dc:	10001c0e 	bge	r2,zero,15450 <_malloc_r+0x2d8>
   153e0:	84000317 	ldw	r16,12(r16)
   153e4:	8180c726 	beq	r16,r6,15704 <_malloc_r+0x58c>
   153e8:	80c00117 	ldw	r3,4(r16)
   153ec:	1a06703a 	and	r3,r3,r8
   153f0:	1c45c83a 	sub	r2,r3,r17
   153f4:	38bff90e 	bge	r7,r2,153dc <_malloc_r+0x264>
   153f8:	81000317 	ldw	r4,12(r16)
   153fc:	81400217 	ldw	r5,8(r16)
   15400:	8447883a 	add	r3,r16,r17
   15404:	8c400054 	ori	r17,r17,1
   15408:	29000315 	stw	r4,12(r5)
   1540c:	21400215 	stw	r5,8(r4)
   15410:	84400115 	stw	r17,4(r16)
   15414:	1889883a 	add	r4,r3,r2
   15418:	11400054 	ori	r5,r2,1
   1541c:	98c00515 	stw	r3,20(r19)
   15420:	98c00415 	stw	r3,16(r19)
   15424:	20800015 	stw	r2,0(r4)
   15428:	1a400315 	stw	r9,12(r3)
   1542c:	1a400215 	stw	r9,8(r3)
   15430:	19400115 	stw	r5,4(r3)
   15434:	9009883a 	mov	r4,r18
   15438:	0019ee40 	call	19ee4 <__malloc_unlock>
   1543c:	80800204 	addi	r2,r16,8
   15440:	003f7b06 	br	15230 <_malloc_r+0xb8>
   15444:	8808d0fa 	srli	r4,r17,3
   15448:	210b883a 	add	r5,r4,r4
   1544c:	003f9106 	br	15294 <_malloc_r+0x11c>
   15450:	80c7883a 	add	r3,r16,r3
   15454:	19400117 	ldw	r5,4(r3)
   15458:	80800317 	ldw	r2,12(r16)
   1545c:	81000217 	ldw	r4,8(r16)
   15460:	29400054 	ori	r5,r5,1
   15464:	19400115 	stw	r5,4(r3)
   15468:	20800315 	stw	r2,12(r4)
   1546c:	11000215 	stw	r4,8(r2)
   15470:	9009883a 	mov	r4,r18
   15474:	0019ee40 	call	19ee4 <__malloc_unlock>
   15478:	80800204 	addi	r2,r16,8
   1547c:	003f6c06 	br	15230 <_malloc_r+0xb8>
   15480:	8085883a 	add	r2,r16,r2
   15484:	10c00117 	ldw	r3,4(r2)
   15488:	9009883a 	mov	r4,r18
   1548c:	18c00054 	ori	r3,r3,1
   15490:	10c00115 	stw	r3,4(r2)
   15494:	0019ee40 	call	19ee4 <__malloc_unlock>
   15498:	80800204 	addi	r2,r16,8
   1549c:	003f6406 	br	15230 <_malloc_r+0xb8>
   154a0:	9c000217 	ldw	r16,8(r19)
   154a4:	00bfff04 	movi	r2,-4
   154a8:	85400117 	ldw	r21,4(r16)
   154ac:	a8aa703a 	and	r21,r21,r2
   154b0:	ac400336 	bltu	r21,r17,154c0 <_malloc_r+0x348>
   154b4:	ac45c83a 	sub	r2,r21,r17
   154b8:	00c003c4 	movi	r3,15
   154bc:	18805316 	blt	r3,r2,1560c <_malloc_r+0x494>
   154c0:	d5e01917 	ldw	r23,-32668(gp)
   154c4:	d0e00317 	ldw	r3,-32756(gp)
   154c8:	00bfffc4 	movi	r2,-1
   154cc:	8579883a 	add	fp,r16,r21
   154d0:	8def883a 	add	r23,r17,r23
   154d4:	1880d226 	beq	r3,r2,15820 <_malloc_r+0x6a8>
   154d8:	bdc403c4 	addi	r23,r23,4111
   154dc:	00bc0004 	movi	r2,-4096
   154e0:	b8ae703a 	and	r23,r23,r2
   154e4:	9009883a 	mov	r4,r18
   154e8:	b80b883a 	mov	r5,r23
   154ec:	00172f80 	call	172f8 <_sbrk_r>
   154f0:	1029883a 	mov	r20,r2
   154f4:	00bfffc4 	movi	r2,-1
   154f8:	a080d126 	beq	r20,r2,15840 <_malloc_r+0x6c8>
   154fc:	a7009f36 	bltu	r20,fp,1577c <_malloc_r+0x604>
   15500:	058000f4 	movhi	r22,3
   15504:	b5a79004 	addi	r22,r22,-25024
   15508:	b0800017 	ldw	r2,0(r22)
   1550c:	b885883a 	add	r2,r23,r2
   15510:	b0800015 	stw	r2,0(r22)
   15514:	e500cf26 	beq	fp,r20,15854 <_malloc_r+0x6dc>
   15518:	d1200317 	ldw	r4,-32756(gp)
   1551c:	00ffffc4 	movi	r3,-1
   15520:	20c0e026 	beq	r4,r3,158a4 <_malloc_r+0x72c>
   15524:	a739c83a 	sub	fp,r20,fp
   15528:	1705883a 	add	r2,r2,fp
   1552c:	b0800015 	stw	r2,0(r22)
   15530:	a08001cc 	andi	r2,r20,7
   15534:	1000a526 	beq	r2,zero,157cc <_malloc_r+0x654>
   15538:	a0a9c83a 	sub	r20,r20,r2
   1553c:	00c40204 	movi	r3,4104
   15540:	a5000204 	addi	r20,r20,8
   15544:	1885c83a 	sub	r2,r3,r2
   15548:	a5c7883a 	add	r3,r20,r23
   1554c:	18c3ffcc 	andi	r3,r3,4095
   15550:	10efc83a 	sub	r23,r2,r3
   15554:	9009883a 	mov	r4,r18
   15558:	b80b883a 	mov	r5,r23
   1555c:	00172f80 	call	172f8 <_sbrk_r>
   15560:	00ffffc4 	movi	r3,-1
   15564:	10c0cc26 	beq	r2,r3,15898 <_malloc_r+0x720>
   15568:	1505c83a 	sub	r2,r2,r20
   1556c:	b887883a 	add	r3,r23,r2
   15570:	18c00054 	ori	r3,r3,1
   15574:	b0800017 	ldw	r2,0(r22)
   15578:	9d000215 	stw	r20,8(r19)
   1557c:	a0c00115 	stw	r3,4(r20)
   15580:	b885883a 	add	r2,r23,r2
   15584:	b0800015 	stw	r2,0(r22)
   15588:	84c00e26 	beq	r16,r19,155c4 <_malloc_r+0x44c>
   1558c:	00c003c4 	movi	r3,15
   15590:	1d40902e 	bgeu	r3,r21,157d4 <_malloc_r+0x65c>
   15594:	ad7ffd04 	addi	r21,r21,-12
   15598:	013ffe04 	movi	r4,-8
   1559c:	a908703a 	and	r4,r21,r4
   155a0:	810b883a 	add	r5,r16,r4
   155a4:	01800144 	movi	r6,5
   155a8:	29800115 	stw	r6,4(r5)
   155ac:	29800215 	stw	r6,8(r5)
   155b0:	81400117 	ldw	r5,4(r16)
   155b4:	2940004c 	andi	r5,r5,1
   155b8:	214ab03a 	or	r5,r4,r5
   155bc:	81400115 	stw	r5,4(r16)
   155c0:	1900ae36 	bltu	r3,r4,1587c <_malloc_r+0x704>
   155c4:	d0e01817 	ldw	r3,-32672(gp)
   155c8:	1880012e 	bgeu	r3,r2,155d0 <_malloc_r+0x458>
   155cc:	d0a01815 	stw	r2,-32672(gp)
   155d0:	d0e01717 	ldw	r3,-32676(gp)
   155d4:	9c000217 	ldw	r16,8(r19)
   155d8:	1880012e 	bgeu	r3,r2,155e0 <_malloc_r+0x468>
   155dc:	d0a01715 	stw	r2,-32676(gp)
   155e0:	80c00117 	ldw	r3,4(r16)
   155e4:	00bfff04 	movi	r2,-4
   155e8:	1886703a 	and	r3,r3,r2
   155ec:	1c45c83a 	sub	r2,r3,r17
   155f0:	1c400236 	bltu	r3,r17,155fc <_malloc_r+0x484>
   155f4:	00c003c4 	movi	r3,15
   155f8:	18800416 	blt	r3,r2,1560c <_malloc_r+0x494>
   155fc:	9009883a 	mov	r4,r18
   15600:	0019ee40 	call	19ee4 <__malloc_unlock>
   15604:	0005883a 	mov	r2,zero
   15608:	003f0906 	br	15230 <_malloc_r+0xb8>
   1560c:	88c00054 	ori	r3,r17,1
   15610:	10800054 	ori	r2,r2,1
   15614:	80c00115 	stw	r3,4(r16)
   15618:	8463883a 	add	r17,r16,r17
   1561c:	88800115 	stw	r2,4(r17)
   15620:	9009883a 	mov	r4,r18
   15624:	9c400215 	stw	r17,8(r19)
   15628:	0019ee40 	call	19ee4 <__malloc_unlock>
   1562c:	80800204 	addi	r2,r16,8
   15630:	003eff06 	br	15230 <_malloc_r+0xb8>
   15634:	00800504 	movi	r2,20
   15638:	1100492e 	bgeu	r2,r4,15760 <_malloc_r+0x5e8>
   1563c:	00801504 	movi	r2,84
   15640:	11005c36 	bltu	r2,r4,157b4 <_malloc_r+0x63c>
   15644:	8808d33a 	srli	r4,r17,12
   15648:	21001b84 	addi	r4,r4,110
   1564c:	210b883a 	add	r5,r4,r4
   15650:	003f1006 	br	15294 <_malloc_r+0x11c>
   15654:	1006d27a 	srli	r3,r2,9
   15658:	01400104 	movi	r5,4
   1565c:	28c0432e 	bgeu	r5,r3,1576c <_malloc_r+0x5f4>
   15660:	01400504 	movi	r5,20
   15664:	28c07036 	bltu	r5,r3,15828 <_malloc_r+0x6b0>
   15668:	194016c4 	addi	r5,r3,91
   1566c:	294d883a 	add	r6,r5,r5
   15670:	318d883a 	add	r6,r6,r6
   15674:	318d883a 	add	r6,r6,r6
   15678:	998d883a 	add	r6,r19,r6
   1567c:	30c00217 	ldw	r3,8(r6)
   15680:	01c000f4 	movhi	r7,3
   15684:	39e1e904 	addi	r7,r7,-30812
   15688:	19805726 	beq	r3,r6,157e8 <_malloc_r+0x670>
   1568c:	01ffff04 	movi	r7,-4
   15690:	19400117 	ldw	r5,4(r3)
   15694:	29ca703a 	and	r5,r5,r7
   15698:	1140022e 	bgeu	r2,r5,156a4 <_malloc_r+0x52c>
   1569c:	18c00217 	ldw	r3,8(r3)
   156a0:	30fffb1e 	bne	r6,r3,15690 <_malloc_r+0x518>
   156a4:	19400317 	ldw	r5,12(r3)
   156a8:	98800117 	ldw	r2,4(r19)
   156ac:	81400315 	stw	r5,12(r16)
   156b0:	80c00215 	stw	r3,8(r16)
   156b4:	2c000215 	stw	r16,8(r5)
   156b8:	1c000315 	stw	r16,12(r3)
   156bc:	003f2b06 	br	1536c <_malloc_r+0x1f4>
   156c0:	8445883a 	add	r2,r16,r17
   156c4:	8c400054 	ori	r17,r17,1
   156c8:	18800515 	stw	r2,20(r3)
   156cc:	18800415 	stw	r2,16(r3)
   156d0:	29000054 	ori	r4,r5,1
   156d4:	1147883a 	add	r3,r2,r5
   156d8:	84400115 	stw	r17,4(r16)
   156dc:	11000115 	stw	r4,4(r2)
   156e0:	12400315 	stw	r9,12(r2)
   156e4:	12400215 	stw	r9,8(r2)
   156e8:	19400015 	stw	r5,0(r3)
   156ec:	9009883a 	mov	r4,r18
   156f0:	0019ee40 	call	19ee4 <__malloc_unlock>
   156f4:	80800204 	addi	r2,r16,8
   156f8:	003ecd06 	br	15230 <_malloc_r+0xb8>
   156fc:	18800117 	ldw	r2,4(r3)
   15700:	003f1a06 	br	1536c <_malloc_r+0x1f4>
   15704:	5ac00044 	addi	r11,r11,1
   15708:	588000cc 	andi	r2,r11,3
   1570c:	52800204 	addi	r10,r10,8
   15710:	103f2e1e 	bne	r2,zero,153cc <_malloc_r+0x254>
   15714:	20c000cc 	andi	r3,r4,3
   15718:	60bffe04 	addi	r2,r12,-8
   1571c:	18006f26 	beq	r3,zero,158dc <_malloc_r+0x764>
   15720:	63000017 	ldw	r12,0(r12)
   15724:	213fffc4 	addi	r4,r4,-1
   15728:	60bffa26 	beq	r12,r2,15714 <_malloc_r+0x59c>
   1572c:	98800117 	ldw	r2,4(r19)
   15730:	294b883a 	add	r5,r5,r5
   15734:	117f5a36 	bltu	r2,r5,154a0 <_malloc_r+0x328>
   15738:	283f5926 	beq	r5,zero,154a0 <_malloc_r+0x328>
   1573c:	1146703a 	and	r3,r2,r5
   15740:	18001626 	beq	r3,zero,1579c <_malloc_r+0x624>
   15744:	5809883a 	mov	r4,r11
   15748:	003f1a06 	br	153b4 <_malloc_r+0x23c>
   1574c:	80800204 	addi	r2,r16,8
   15750:	84000517 	ldw	r16,20(r16)
   15754:	143ea81e 	bne	r2,r16,151f8 <_malloc_r+0x80>
   15758:	21000084 	addi	r4,r4,2
   1575c:	003ee306 	br	152ec <_malloc_r+0x174>
   15760:	210016c4 	addi	r4,r4,91
   15764:	210b883a 	add	r5,r4,r4
   15768:	003eca06 	br	15294 <_malloc_r+0x11c>
   1576c:	100ad1ba 	srli	r5,r2,6
   15770:	29400e04 	addi	r5,r5,56
   15774:	294d883a 	add	r6,r5,r5
   15778:	003fbd06 	br	15670 <_malloc_r+0x4f8>
   1577c:	84ff6026 	beq	r16,r19,15500 <_malloc_r+0x388>
   15780:	008000f4 	movhi	r2,3
   15784:	10a1e904 	addi	r2,r2,-30812
   15788:	14000217 	ldw	r16,8(r2)
   1578c:	00bfff04 	movi	r2,-4
   15790:	80c00117 	ldw	r3,4(r16)
   15794:	1886703a 	and	r3,r3,r2
   15798:	003f9406 	br	155ec <_malloc_r+0x474>
   1579c:	294b883a 	add	r5,r5,r5
   157a0:	1146703a 	and	r3,r2,r5
   157a4:	5ac00104 	addi	r11,r11,4
   157a8:	183ffc26 	beq	r3,zero,1579c <_malloc_r+0x624>
   157ac:	5809883a 	mov	r4,r11
   157b0:	003f0006 	br	153b4 <_malloc_r+0x23c>
   157b4:	00805504 	movi	r2,340
   157b8:	11001336 	bltu	r2,r4,15808 <_malloc_r+0x690>
   157bc:	8808d3fa 	srli	r4,r17,15
   157c0:	21001dc4 	addi	r4,r4,119
   157c4:	210b883a 	add	r5,r4,r4
   157c8:	003eb206 	br	15294 <_malloc_r+0x11c>
   157cc:	00840004 	movi	r2,4096
   157d0:	003f5d06 	br	15548 <_malloc_r+0x3d0>
   157d4:	00800044 	movi	r2,1
   157d8:	a0800115 	stw	r2,4(r20)
   157dc:	a021883a 	mov	r16,r20
   157e0:	0007883a 	mov	r3,zero
   157e4:	003f8106 	br	155ec <_malloc_r+0x474>
   157e8:	280bd0ba 	srai	r5,r5,2
   157ec:	01800044 	movi	r6,1
   157f0:	38800117 	ldw	r2,4(r7)
   157f4:	314c983a 	sll	r6,r6,r5
   157f8:	180b883a 	mov	r5,r3
   157fc:	3084b03a 	or	r2,r6,r2
   15800:	38800115 	stw	r2,4(r7)
   15804:	003fa906 	br	156ac <_malloc_r+0x534>
   15808:	00815504 	movi	r2,1364
   1580c:	11001836 	bltu	r2,r4,15870 <_malloc_r+0x6f8>
   15810:	8808d4ba 	srli	r4,r17,18
   15814:	21001f04 	addi	r4,r4,124
   15818:	210b883a 	add	r5,r4,r4
   1581c:	003e9d06 	br	15294 <_malloc_r+0x11c>
   15820:	bdc00404 	addi	r23,r23,16
   15824:	003f2f06 	br	154e4 <_malloc_r+0x36c>
   15828:	01401504 	movi	r5,84
   1582c:	28c01f36 	bltu	r5,r3,158ac <_malloc_r+0x734>
   15830:	100ad33a 	srli	r5,r2,12
   15834:	29401b84 	addi	r5,r5,110
   15838:	294d883a 	add	r6,r5,r5
   1583c:	003f8c06 	br	15670 <_malloc_r+0x4f8>
   15840:	9c000217 	ldw	r16,8(r19)
   15844:	00bfff04 	movi	r2,-4
   15848:	80c00117 	ldw	r3,4(r16)
   1584c:	1886703a 	and	r3,r3,r2
   15850:	003f6606 	br	155ec <_malloc_r+0x474>
   15854:	e0c3ffcc 	andi	r3,fp,4095
   15858:	183f2f1e 	bne	r3,zero,15518 <_malloc_r+0x3a0>
   1585c:	98c00217 	ldw	r3,8(r19)
   15860:	bd49883a 	add	r4,r23,r21
   15864:	21000054 	ori	r4,r4,1
   15868:	19000115 	stw	r4,4(r3)
   1586c:	003f5506 	br	155c4 <_malloc_r+0x44c>
   15870:	01403f04 	movi	r5,252
   15874:	01001f84 	movi	r4,126
   15878:	003e8606 	br	15294 <_malloc_r+0x11c>
   1587c:	9009883a 	mov	r4,r18
   15880:	81400204 	addi	r5,r16,8
   15884:	00145e00 	call	145e0 <_free_r>
   15888:	008000f4 	movhi	r2,3
   1588c:	10a79004 	addi	r2,r2,-25024
   15890:	10800017 	ldw	r2,0(r2)
   15894:	003f4b06 	br	155c4 <_malloc_r+0x44c>
   15898:	00c00044 	movi	r3,1
   1589c:	002f883a 	mov	r23,zero
   158a0:	003f3406 	br	15574 <_malloc_r+0x3fc>
   158a4:	d5200315 	stw	r20,-32756(gp)
   158a8:	003f2106 	br	15530 <_malloc_r+0x3b8>
   158ac:	01405504 	movi	r5,340
   158b0:	28c00436 	bltu	r5,r3,158c4 <_malloc_r+0x74c>
   158b4:	100ad3fa 	srli	r5,r2,15
   158b8:	29401dc4 	addi	r5,r5,119
   158bc:	294d883a 	add	r6,r5,r5
   158c0:	003f6b06 	br	15670 <_malloc_r+0x4f8>
   158c4:	01415504 	movi	r5,1364
   158c8:	28c00936 	bltu	r5,r3,158f0 <_malloc_r+0x778>
   158cc:	100ad4ba 	srli	r5,r2,18
   158d0:	29401f04 	addi	r5,r5,124
   158d4:	294d883a 	add	r6,r5,r5
   158d8:	003f6506 	br	15670 <_malloc_r+0x4f8>
   158dc:	98800117 	ldw	r2,4(r19)
   158e0:	0146303a 	nor	r3,zero,r5
   158e4:	1884703a 	and	r2,r3,r2
   158e8:	98800115 	stw	r2,4(r19)
   158ec:	003f9006 	br	15730 <_malloc_r+0x5b8>
   158f0:	01803f04 	movi	r6,252
   158f4:	01401f84 	movi	r5,126
   158f8:	003f5d06 	br	15670 <_malloc_r+0x4f8>

000158fc <memchr>:
   158fc:	008000c4 	movi	r2,3
   15900:	29403fcc 	andi	r5,r5,255
   15904:	1180282e 	bgeu	r2,r6,159a8 <memchr+0xac>
   15908:	2086703a 	and	r3,r4,r2
   1590c:	1800351e 	bne	r3,zero,159e4 <memchr+0xe8>
   15910:	2816923a 	slli	r11,r5,8
   15914:	2093883a 	add	r9,r4,r2
   15918:	22000084 	addi	r8,r4,2
   1591c:	5957883a 	add	r11,r11,r5
   15920:	5816923a 	slli	r11,r11,8
   15924:	20c00044 	addi	r3,r4,1
   15928:	037fbff4 	movhi	r13,65279
   1592c:	6b7fbfc4 	addi	r13,r13,-257
   15930:	5957883a 	add	r11,r11,r5
   15934:	5816923a 	slli	r11,r11,8
   15938:	03202074 	movhi	r12,32897
   1593c:	63202004 	addi	r12,r12,-32640
   15940:	101d883a 	mov	r14,r2
   15944:	5957883a 	add	r11,r11,r5
   15948:	21c00017 	ldw	r7,0(r4)
   1594c:	31bfff04 	addi	r6,r6,-4
   15950:	1805883a 	mov	r2,r3
   15954:	3acef03a 	xor	r7,r7,r11
   15958:	3b55883a 	add	r10,r7,r13
   1595c:	01ce303a 	nor	r7,zero,r7
   15960:	51ce703a 	and	r7,r10,r7
   15964:	3b0e703a 	and	r7,r7,r12
   15968:	38000a26 	beq	r7,zero,15994 <memchr+0x98>
   1596c:	21c00003 	ldbu	r7,0(r4)
   15970:	39401e26 	beq	r7,r5,159ec <memchr+0xf0>
   15974:	19c00003 	ldbu	r7,0(r3)
   15978:	39401926 	beq	r7,r5,159e0 <memchr+0xe4>
   1597c:	41c00003 	ldbu	r7,0(r8)
   15980:	4005883a 	mov	r2,r8
   15984:	39401626 	beq	r7,r5,159e0 <memchr+0xe4>
   15988:	49c00003 	ldbu	r7,0(r9)
   1598c:	4805883a 	mov	r2,r9
   15990:	39401326 	beq	r7,r5,159e0 <memchr+0xe4>
   15994:	21000104 	addi	r4,r4,4
   15998:	4a400104 	addi	r9,r9,4
   1599c:	42000104 	addi	r8,r8,4
   159a0:	18c00104 	addi	r3,r3,4
   159a4:	71bfe836 	bltu	r14,r6,15948 <memchr+0x4c>
   159a8:	2005883a 	mov	r2,r4
   159ac:	30000a26 	beq	r6,zero,159d8 <memchr+0xdc>
   159b0:	10c00003 	ldbu	r3,0(r2)
   159b4:	19400a26 	beq	r3,r5,159e0 <memchr+0xe4>
   159b8:	10c00044 	addi	r3,r2,1
   159bc:	118d883a 	add	r6,r2,r6
   159c0:	00000306 	br	159d0 <memchr+0xd4>
   159c4:	11000003 	ldbu	r4,0(r2)
   159c8:	18c00044 	addi	r3,r3,1
   159cc:	21400426 	beq	r4,r5,159e0 <memchr+0xe4>
   159d0:	1805883a 	mov	r2,r3
   159d4:	19bffb1e 	bne	r3,r6,159c4 <memchr+0xc8>
   159d8:	0005883a 	mov	r2,zero
   159dc:	f800283a 	ret
   159e0:	f800283a 	ret
   159e4:	2005883a 	mov	r2,r4
   159e8:	003ff106 	br	159b0 <memchr+0xb4>
   159ec:	2005883a 	mov	r2,r4
   159f0:	f800283a 	ret

000159f4 <memcpy>:
   159f4:	00c003c4 	movi	r3,15
   159f8:	2005883a 	mov	r2,r4
   159fc:	3009883a 	mov	r4,r6
   15a00:	1980032e 	bgeu	r3,r6,15a10 <memcpy+0x1c>
   15a04:	2886b03a 	or	r3,r5,r2
   15a08:	18c000cc 	andi	r3,r3,3
   15a0c:	18000926 	beq	r3,zero,15a34 <memcpy+0x40>
   15a10:	1007883a 	mov	r3,r2
   15a14:	290f883a 	add	r7,r5,r4
   15a18:	20000526 	beq	r4,zero,15a30 <memcpy+0x3c>
   15a1c:	29800003 	ldbu	r6,0(r5)
   15a20:	18c00044 	addi	r3,r3,1
   15a24:	29400044 	addi	r5,r5,1
   15a28:	19bfffc5 	stb	r6,-1(r3)
   15a2c:	29fffb1e 	bne	r5,r7,15a1c <memcpy+0x28>
   15a30:	f800283a 	ret
   15a34:	327ffc04 	addi	r9,r6,-16
   15a38:	4812d13a 	srli	r9,r9,4
   15a3c:	11000404 	addi	r4,r2,16
   15a40:	1007883a 	mov	r3,r2
   15a44:	4810913a 	slli	r8,r9,4
   15a48:	280f883a 	mov	r7,r5
   15a4c:	2209883a 	add	r4,r4,r8
   15a50:	3a000017 	ldw	r8,0(r7)
   15a54:	18c00404 	addi	r3,r3,16
   15a58:	39c00404 	addi	r7,r7,16
   15a5c:	1a3ffc15 	stw	r8,-16(r3)
   15a60:	3a3ffd17 	ldw	r8,-12(r7)
   15a64:	1a3ffd15 	stw	r8,-12(r3)
   15a68:	3a3ffe17 	ldw	r8,-8(r7)
   15a6c:	1a3ffe15 	stw	r8,-8(r3)
   15a70:	3a3fff17 	ldw	r8,-4(r7)
   15a74:	1a3fff15 	stw	r8,-4(r3)
   15a78:	193ff51e 	bne	r3,r4,15a50 <memcpy+0x5c>
   15a7c:	49c00044 	addi	r7,r9,1
   15a80:	380e913a 	slli	r7,r7,4
   15a84:	310003cc 	andi	r4,r6,15
   15a88:	018000c4 	movi	r6,3
   15a8c:	11c7883a 	add	r3,r2,r7
   15a90:	29cb883a 	add	r5,r5,r7
   15a94:	313fdf2e 	bgeu	r6,r4,15a14 <memcpy+0x20>
   15a98:	213fff04 	addi	r4,r4,-4
   15a9c:	2014d0ba 	srli	r10,r4,2
   15aa0:	1a400104 	addi	r9,r3,4
   15aa4:	180d883a 	mov	r6,r3
   15aa8:	528f883a 	add	r7,r10,r10
   15aac:	39cf883a 	add	r7,r7,r7
   15ab0:	49d3883a 	add	r9,r9,r7
   15ab4:	280f883a 	mov	r7,r5
   15ab8:	3a000017 	ldw	r8,0(r7)
   15abc:	31800104 	addi	r6,r6,4
   15ac0:	39c00104 	addi	r7,r7,4
   15ac4:	323fff15 	stw	r8,-4(r6)
   15ac8:	327ffb1e 	bne	r6,r9,15ab8 <memcpy+0xc4>
   15acc:	51800044 	addi	r6,r10,1
   15ad0:	52bfff24 	muli	r10,r10,-4
   15ad4:	318d883a 	add	r6,r6,r6
   15ad8:	318d883a 	add	r6,r6,r6
   15adc:	5109883a 	add	r4,r10,r4
   15ae0:	298b883a 	add	r5,r5,r6
   15ae4:	1987883a 	add	r3,r3,r6
   15ae8:	003fca06 	br	15a14 <memcpy+0x20>

00015aec <memmove>:
   15aec:	2005883a 	mov	r2,r4
   15af0:	300f883a 	mov	r7,r6
   15af4:	29000b2e 	bgeu	r5,r4,15b24 <memmove+0x38>
   15af8:	2987883a 	add	r3,r5,r6
   15afc:	20c0092e 	bgeu	r4,r3,15b24 <memmove+0x38>
   15b00:	218b883a 	add	r5,r4,r6
   15b04:	198fc83a 	sub	r7,r3,r6
   15b08:	30003f26 	beq	r6,zero,15c08 <memmove+0x11c>
   15b0c:	18ffffc4 	addi	r3,r3,-1
   15b10:	19000003 	ldbu	r4,0(r3)
   15b14:	297fffc4 	addi	r5,r5,-1
   15b18:	29000005 	stb	r4,0(r5)
   15b1c:	19fffb1e 	bne	r3,r7,15b0c <memmove+0x20>
   15b20:	f800283a 	ret
   15b24:	00c003c4 	movi	r3,15
   15b28:	1980382e 	bgeu	r3,r6,15c0c <memmove+0x120>
   15b2c:	2886b03a 	or	r3,r5,r2
   15b30:	18c000cc 	andi	r3,r3,3
   15b34:	1800351e 	bne	r3,zero,15c0c <memmove+0x120>
   15b38:	327ffc04 	addi	r9,r6,-16
   15b3c:	4812d13a 	srli	r9,r9,4
   15b40:	12000404 	addi	r8,r2,16
   15b44:	1007883a 	mov	r3,r2
   15b48:	4808913a 	slli	r4,r9,4
   15b4c:	280f883a 	mov	r7,r5
   15b50:	4111883a 	add	r8,r8,r4
   15b54:	39000017 	ldw	r4,0(r7)
   15b58:	18c00404 	addi	r3,r3,16
   15b5c:	39c00404 	addi	r7,r7,16
   15b60:	193ffc15 	stw	r4,-16(r3)
   15b64:	393ffd17 	ldw	r4,-12(r7)
   15b68:	193ffd15 	stw	r4,-12(r3)
   15b6c:	393ffe17 	ldw	r4,-8(r7)
   15b70:	193ffe15 	stw	r4,-8(r3)
   15b74:	393fff17 	ldw	r4,-4(r7)
   15b78:	193fff15 	stw	r4,-4(r3)
   15b7c:	1a3ff51e 	bne	r3,r8,15b54 <memmove+0x68>
   15b80:	49000044 	addi	r4,r9,1
   15b84:	2008913a 	slli	r4,r4,4
   15b88:	31c003cc 	andi	r7,r6,15
   15b8c:	1107883a 	add	r3,r2,r4
   15b90:	290b883a 	add	r5,r5,r4
   15b94:	010000c4 	movi	r4,3
   15b98:	21c0142e 	bgeu	r4,r7,15bec <memmove+0x100>
   15b9c:	39ffff04 	addi	r7,r7,-4
   15ba0:	3814d0ba 	srli	r10,r7,2
   15ba4:	1a400104 	addi	r9,r3,4
   15ba8:	180d883a 	mov	r6,r3
   15bac:	5289883a 	add	r4,r10,r10
   15bb0:	2109883a 	add	r4,r4,r4
   15bb4:	4913883a 	add	r9,r9,r4
   15bb8:	2809883a 	mov	r4,r5
   15bbc:	22000017 	ldw	r8,0(r4)
   15bc0:	31800104 	addi	r6,r6,4
   15bc4:	21000104 	addi	r4,r4,4
   15bc8:	323fff15 	stw	r8,-4(r6)
   15bcc:	327ffb1e 	bne	r6,r9,15bbc <memmove+0xd0>
   15bd0:	51000044 	addi	r4,r10,1
   15bd4:	52bfff24 	muli	r10,r10,-4
   15bd8:	2109883a 	add	r4,r4,r4
   15bdc:	2109883a 	add	r4,r4,r4
   15be0:	51cf883a 	add	r7,r10,r7
   15be4:	290b883a 	add	r5,r5,r4
   15be8:	1907883a 	add	r3,r3,r4
   15bec:	38000626 	beq	r7,zero,15c08 <memmove+0x11c>
   15bf0:	19cf883a 	add	r7,r3,r7
   15bf4:	29800003 	ldbu	r6,0(r5)
   15bf8:	18c00044 	addi	r3,r3,1
   15bfc:	29400044 	addi	r5,r5,1
   15c00:	19bfffc5 	stb	r6,-1(r3)
   15c04:	19fffb1e 	bne	r3,r7,15bf4 <memmove+0x108>
   15c08:	f800283a 	ret
   15c0c:	1007883a 	mov	r3,r2
   15c10:	003ff606 	br	15bec <memmove+0x100>

00015c14 <memset>:
   15c14:	00c000c4 	movi	r3,3
   15c18:	2005883a 	mov	r2,r4
   15c1c:	29403fcc 	andi	r5,r5,255
   15c20:	19802d2e 	bgeu	r3,r6,15cd8 <memset+0xc4>
   15c24:	20c6703a 	and	r3,r4,r3
   15c28:	18002e1e 	bne	r3,zero,15ce4 <memset+0xd0>
   15c2c:	2806923a 	slli	r3,r5,8
   15c30:	010003c4 	movi	r4,15
   15c34:	3011883a 	mov	r8,r6
   15c38:	1946b03a 	or	r3,r3,r5
   15c3c:	180e943a 	slli	r7,r3,16
   15c40:	38ceb03a 	or	r7,r7,r3
   15c44:	1007883a 	mov	r3,r2
   15c48:	21800f2e 	bgeu	r4,r6,15c88 <memset+0x74>
   15c4c:	19c00015 	stw	r7,0(r3)
   15c50:	19c00115 	stw	r7,4(r3)
   15c54:	19c00215 	stw	r7,8(r3)
   15c58:	19c00315 	stw	r7,12(r3)
   15c5c:	423ffc04 	addi	r8,r8,-16
   15c60:	18c00404 	addi	r3,r3,16
   15c64:	223ff936 	bltu	r4,r8,15c4c <memset+0x38>
   15c68:	30fffc04 	addi	r3,r6,-16
   15c6c:	1806d13a 	srli	r3,r3,4
   15c70:	318003cc 	andi	r6,r6,15
   15c74:	010000c4 	movi	r4,3
   15c78:	18c00044 	addi	r3,r3,1
   15c7c:	1806913a 	slli	r3,r3,4
   15c80:	10c7883a 	add	r3,r2,r3
   15c84:	21800e2e 	bgeu	r4,r6,15cc0 <memset+0xac>
   15c88:	1813883a 	mov	r9,r3
   15c8c:	3011883a 	mov	r8,r6
   15c90:	010000c4 	movi	r4,3
   15c94:	49c00015 	stw	r7,0(r9)
   15c98:	423fff04 	addi	r8,r8,-4
   15c9c:	4a400104 	addi	r9,r9,4
   15ca0:	223ffc36 	bltu	r4,r8,15c94 <memset+0x80>
   15ca4:	313fff04 	addi	r4,r6,-4
   15ca8:	2008d0ba 	srli	r4,r4,2
   15cac:	318000cc 	andi	r6,r6,3
   15cb0:	21000044 	addi	r4,r4,1
   15cb4:	2109883a 	add	r4,r4,r4
   15cb8:	2109883a 	add	r4,r4,r4
   15cbc:	1907883a 	add	r3,r3,r4
   15cc0:	30000a26 	beq	r6,zero,15cec <memset+0xd8>
   15cc4:	198d883a 	add	r6,r3,r6
   15cc8:	19400005 	stb	r5,0(r3)
   15ccc:	18c00044 	addi	r3,r3,1
   15cd0:	19bffd1e 	bne	r3,r6,15cc8 <memset+0xb4>
   15cd4:	f800283a 	ret
   15cd8:	2007883a 	mov	r3,r4
   15cdc:	303ff91e 	bne	r6,zero,15cc4 <memset+0xb0>
   15ce0:	00000206 	br	15cec <memset+0xd8>
   15ce4:	2007883a 	mov	r3,r4
   15ce8:	003ff606 	br	15cc4 <memset+0xb0>
   15cec:	f800283a 	ret

00015cf0 <_Balloc>:
   15cf0:	20801317 	ldw	r2,76(r4)
   15cf4:	defffc04 	addi	sp,sp,-16
   15cf8:	dc400115 	stw	r17,4(sp)
   15cfc:	dc000015 	stw	r16,0(sp)
   15d00:	dfc00315 	stw	ra,12(sp)
   15d04:	dc800215 	stw	r18,8(sp)
   15d08:	2023883a 	mov	r17,r4
   15d0c:	2821883a 	mov	r16,r5
   15d10:	10000f26 	beq	r2,zero,15d50 <_Balloc+0x60>
   15d14:	8407883a 	add	r3,r16,r16
   15d18:	18c7883a 	add	r3,r3,r3
   15d1c:	10c7883a 	add	r3,r2,r3
   15d20:	18800017 	ldw	r2,0(r3)
   15d24:	10001126 	beq	r2,zero,15d6c <_Balloc+0x7c>
   15d28:	11000017 	ldw	r4,0(r2)
   15d2c:	19000015 	stw	r4,0(r3)
   15d30:	10000415 	stw	zero,16(r2)
   15d34:	10000315 	stw	zero,12(r2)
   15d38:	dfc00317 	ldw	ra,12(sp)
   15d3c:	dc800217 	ldw	r18,8(sp)
   15d40:	dc400117 	ldw	r17,4(sp)
   15d44:	dc000017 	ldw	r16,0(sp)
   15d48:	dec00404 	addi	sp,sp,16
   15d4c:	f800283a 	ret
   15d50:	01400104 	movi	r5,4
   15d54:	01800404 	movi	r6,16
   15d58:	00175ac0 	call	175ac <_calloc_r>
   15d5c:	88801315 	stw	r2,76(r17)
   15d60:	103fec1e 	bne	r2,zero,15d14 <_Balloc+0x24>
   15d64:	0005883a 	mov	r2,zero
   15d68:	003ff306 	br	15d38 <_Balloc+0x48>
   15d6c:	01400044 	movi	r5,1
   15d70:	2c24983a 	sll	r18,r5,r16
   15d74:	8809883a 	mov	r4,r17
   15d78:	91800144 	addi	r6,r18,5
   15d7c:	318d883a 	add	r6,r6,r6
   15d80:	318d883a 	add	r6,r6,r6
   15d84:	00175ac0 	call	175ac <_calloc_r>
   15d88:	103ff626 	beq	r2,zero,15d64 <_Balloc+0x74>
   15d8c:	14000115 	stw	r16,4(r2)
   15d90:	14800215 	stw	r18,8(r2)
   15d94:	003fe606 	br	15d30 <_Balloc+0x40>

00015d98 <_Bfree>:
   15d98:	28000826 	beq	r5,zero,15dbc <_Bfree+0x24>
   15d9c:	28c00117 	ldw	r3,4(r5)
   15da0:	20801317 	ldw	r2,76(r4)
   15da4:	18c7883a 	add	r3,r3,r3
   15da8:	18c7883a 	add	r3,r3,r3
   15dac:	10c5883a 	add	r2,r2,r3
   15db0:	10c00017 	ldw	r3,0(r2)
   15db4:	28c00015 	stw	r3,0(r5)
   15db8:	11400015 	stw	r5,0(r2)
   15dbc:	f800283a 	ret

00015dc0 <__multadd>:
   15dc0:	defffa04 	addi	sp,sp,-24
   15dc4:	dc000115 	stw	r16,4(sp)
   15dc8:	2c000417 	ldw	r16,16(r5)
   15dcc:	dc800315 	stw	r18,12(sp)
   15dd0:	dc400215 	stw	r17,8(sp)
   15dd4:	dfc00515 	stw	ra,20(sp)
   15dd8:	dcc00415 	stw	r19,16(sp)
   15ddc:	2823883a 	mov	r17,r5
   15de0:	2025883a 	mov	r18,r4
   15de4:	28c00504 	addi	r3,r5,20
   15de8:	0011883a 	mov	r8,zero
   15dec:	1a800017 	ldw	r10,0(r3)
   15df0:	18c00104 	addi	r3,r3,4
   15df4:	42000044 	addi	r8,r8,1
   15df8:	527fffcc 	andi	r9,r10,65535
   15dfc:	4993383a 	mul	r9,r9,r6
   15e00:	5014d43a 	srli	r10,r10,16
   15e04:	49d3883a 	add	r9,r9,r7
   15e08:	480ed43a 	srli	r7,r9,16
   15e0c:	5195383a 	mul	r10,r10,r6
   15e10:	4a7fffcc 	andi	r9,r9,65535
   15e14:	3a8f883a 	add	r7,r7,r10
   15e18:	3814943a 	slli	r10,r7,16
   15e1c:	380ed43a 	srli	r7,r7,16
   15e20:	5253883a 	add	r9,r10,r9
   15e24:	1a7fff15 	stw	r9,-4(r3)
   15e28:	443ff016 	blt	r8,r16,15dec <__multadd+0x2c>
   15e2c:	38000926 	beq	r7,zero,15e54 <__multadd+0x94>
   15e30:	88800217 	ldw	r2,8(r17)
   15e34:	80800f0e 	bge	r16,r2,15e74 <__multadd+0xb4>
   15e38:	80800144 	addi	r2,r16,5
   15e3c:	1085883a 	add	r2,r2,r2
   15e40:	1085883a 	add	r2,r2,r2
   15e44:	8885883a 	add	r2,r17,r2
   15e48:	84000044 	addi	r16,r16,1
   15e4c:	11c00015 	stw	r7,0(r2)
   15e50:	8c000415 	stw	r16,16(r17)
   15e54:	8805883a 	mov	r2,r17
   15e58:	dfc00517 	ldw	ra,20(sp)
   15e5c:	dcc00417 	ldw	r19,16(sp)
   15e60:	dc800317 	ldw	r18,12(sp)
   15e64:	dc400217 	ldw	r17,8(sp)
   15e68:	dc000117 	ldw	r16,4(sp)
   15e6c:	dec00604 	addi	sp,sp,24
   15e70:	f800283a 	ret
   15e74:	89400117 	ldw	r5,4(r17)
   15e78:	9009883a 	mov	r4,r18
   15e7c:	d9c00015 	stw	r7,0(sp)
   15e80:	29400044 	addi	r5,r5,1
   15e84:	0015cf00 	call	15cf0 <_Balloc>
   15e88:	89800417 	ldw	r6,16(r17)
   15e8c:	89400304 	addi	r5,r17,12
   15e90:	11000304 	addi	r4,r2,12
   15e94:	31800084 	addi	r6,r6,2
   15e98:	318d883a 	add	r6,r6,r6
   15e9c:	318d883a 	add	r6,r6,r6
   15ea0:	1027883a 	mov	r19,r2
   15ea4:	00159f40 	call	159f4 <memcpy>
   15ea8:	88c00117 	ldw	r3,4(r17)
   15eac:	90801317 	ldw	r2,76(r18)
   15eb0:	d9c00017 	ldw	r7,0(sp)
   15eb4:	18c7883a 	add	r3,r3,r3
   15eb8:	18c7883a 	add	r3,r3,r3
   15ebc:	10c5883a 	add	r2,r2,r3
   15ec0:	10c00017 	ldw	r3,0(r2)
   15ec4:	88c00015 	stw	r3,0(r17)
   15ec8:	14400015 	stw	r17,0(r2)
   15ecc:	9823883a 	mov	r17,r19
   15ed0:	003fd906 	br	15e38 <__multadd+0x78>

00015ed4 <__s2b>:
   15ed4:	defff904 	addi	sp,sp,-28
   15ed8:	dd000415 	stw	r20,16(sp)
   15edc:	dc400115 	stw	r17,4(sp)
   15ee0:	2829883a 	mov	r20,r5
   15ee4:	2023883a 	mov	r17,r4
   15ee8:	01400244 	movi	r5,9
   15eec:	39000204 	addi	r4,r7,8
   15ef0:	dcc00315 	stw	r19,12(sp)
   15ef4:	dc800215 	stw	r18,8(sp)
   15ef8:	dfc00615 	stw	ra,24(sp)
   15efc:	dd400515 	stw	r21,20(sp)
   15f00:	dc000015 	stw	r16,0(sp)
   15f04:	3825883a 	mov	r18,r7
   15f08:	3027883a 	mov	r19,r6
   15f0c:	00192c80 	call	192c8 <__divsi3>
   15f10:	00c00044 	movi	r3,1
   15f14:	000b883a 	mov	r5,zero
   15f18:	1880030e 	bge	r3,r2,15f28 <__s2b+0x54>
   15f1c:	18c7883a 	add	r3,r3,r3
   15f20:	29400044 	addi	r5,r5,1
   15f24:	18bffd16 	blt	r3,r2,15f1c <__s2b+0x48>
   15f28:	8809883a 	mov	r4,r17
   15f2c:	0015cf00 	call	15cf0 <_Balloc>
   15f30:	d8c00717 	ldw	r3,28(sp)
   15f34:	10c00515 	stw	r3,20(r2)
   15f38:	00c00044 	movi	r3,1
   15f3c:	10c00415 	stw	r3,16(r2)
   15f40:	00c00244 	movi	r3,9
   15f44:	1cc0210e 	bge	r3,r19,15fcc <__s2b+0xf8>
   15f48:	a0eb883a 	add	r21,r20,r3
   15f4c:	a821883a 	mov	r16,r21
   15f50:	a4e9883a 	add	r20,r20,r19
   15f54:	81c00007 	ldb	r7,0(r16)
   15f58:	8809883a 	mov	r4,r17
   15f5c:	84000044 	addi	r16,r16,1
   15f60:	100b883a 	mov	r5,r2
   15f64:	01800284 	movi	r6,10
   15f68:	39fff404 	addi	r7,r7,-48
   15f6c:	0015dc00 	call	15dc0 <__multadd>
   15f70:	853ff81e 	bne	r16,r20,15f54 <__s2b+0x80>
   15f74:	ace1883a 	add	r16,r21,r19
   15f78:	843ffe04 	addi	r16,r16,-8
   15f7c:	9c800a0e 	bge	r19,r18,15fa8 <__s2b+0xd4>
   15f80:	94e5c83a 	sub	r18,r18,r19
   15f84:	84a5883a 	add	r18,r16,r18
   15f88:	81c00007 	ldb	r7,0(r16)
   15f8c:	8809883a 	mov	r4,r17
   15f90:	84000044 	addi	r16,r16,1
   15f94:	100b883a 	mov	r5,r2
   15f98:	01800284 	movi	r6,10
   15f9c:	39fff404 	addi	r7,r7,-48
   15fa0:	0015dc00 	call	15dc0 <__multadd>
   15fa4:	84bff81e 	bne	r16,r18,15f88 <__s2b+0xb4>
   15fa8:	dfc00617 	ldw	ra,24(sp)
   15fac:	dd400517 	ldw	r21,20(sp)
   15fb0:	dd000417 	ldw	r20,16(sp)
   15fb4:	dcc00317 	ldw	r19,12(sp)
   15fb8:	dc800217 	ldw	r18,8(sp)
   15fbc:	dc400117 	ldw	r17,4(sp)
   15fc0:	dc000017 	ldw	r16,0(sp)
   15fc4:	dec00704 	addi	sp,sp,28
   15fc8:	f800283a 	ret
   15fcc:	a4000284 	addi	r16,r20,10
   15fd0:	1827883a 	mov	r19,r3
   15fd4:	003fe906 	br	15f7c <__s2b+0xa8>

00015fd8 <__hi0bits>:
   15fd8:	20bfffec 	andhi	r2,r4,65535
   15fdc:	1000141e 	bne	r2,zero,16030 <__hi0bits+0x58>
   15fe0:	2008943a 	slli	r4,r4,16
   15fe4:	00800404 	movi	r2,16
   15fe8:	20ffc02c 	andhi	r3,r4,65280
   15fec:	1800021e 	bne	r3,zero,15ff8 <__hi0bits+0x20>
   15ff0:	2008923a 	slli	r4,r4,8
   15ff4:	10800204 	addi	r2,r2,8
   15ff8:	20fc002c 	andhi	r3,r4,61440
   15ffc:	1800021e 	bne	r3,zero,16008 <__hi0bits+0x30>
   16000:	2008913a 	slli	r4,r4,4
   16004:	10800104 	addi	r2,r2,4
   16008:	20f0002c 	andhi	r3,r4,49152
   1600c:	1800031e 	bne	r3,zero,1601c <__hi0bits+0x44>
   16010:	2109883a 	add	r4,r4,r4
   16014:	10800084 	addi	r2,r2,2
   16018:	2109883a 	add	r4,r4,r4
   1601c:	20000316 	blt	r4,zero,1602c <__hi0bits+0x54>
   16020:	2110002c 	andhi	r4,r4,16384
   16024:	2000041e 	bne	r4,zero,16038 <__hi0bits+0x60>
   16028:	00800804 	movi	r2,32
   1602c:	f800283a 	ret
   16030:	0005883a 	mov	r2,zero
   16034:	003fec06 	br	15fe8 <__hi0bits+0x10>
   16038:	10800044 	addi	r2,r2,1
   1603c:	f800283a 	ret

00016040 <__lo0bits>:
   16040:	20c00017 	ldw	r3,0(r4)
   16044:	188001cc 	andi	r2,r3,7
   16048:	10000826 	beq	r2,zero,1606c <__lo0bits+0x2c>
   1604c:	1880004c 	andi	r2,r3,1
   16050:	1000211e 	bne	r2,zero,160d8 <__lo0bits+0x98>
   16054:	1880008c 	andi	r2,r3,2
   16058:	1000211e 	bne	r2,zero,160e0 <__lo0bits+0xa0>
   1605c:	1806d0ba 	srli	r3,r3,2
   16060:	00800084 	movi	r2,2
   16064:	20c00015 	stw	r3,0(r4)
   16068:	f800283a 	ret
   1606c:	18bfffcc 	andi	r2,r3,65535
   16070:	10001326 	beq	r2,zero,160c0 <__lo0bits+0x80>
   16074:	0005883a 	mov	r2,zero
   16078:	19403fcc 	andi	r5,r3,255
   1607c:	2800021e 	bne	r5,zero,16088 <__lo0bits+0x48>
   16080:	1806d23a 	srli	r3,r3,8
   16084:	10800204 	addi	r2,r2,8
   16088:	194003cc 	andi	r5,r3,15
   1608c:	2800021e 	bne	r5,zero,16098 <__lo0bits+0x58>
   16090:	1806d13a 	srli	r3,r3,4
   16094:	10800104 	addi	r2,r2,4
   16098:	194000cc 	andi	r5,r3,3
   1609c:	2800021e 	bne	r5,zero,160a8 <__lo0bits+0x68>
   160a0:	1806d0ba 	srli	r3,r3,2
   160a4:	10800084 	addi	r2,r2,2
   160a8:	1940004c 	andi	r5,r3,1
   160ac:	2800081e 	bne	r5,zero,160d0 <__lo0bits+0x90>
   160b0:	1806d07a 	srli	r3,r3,1
   160b4:	1800051e 	bne	r3,zero,160cc <__lo0bits+0x8c>
   160b8:	00800804 	movi	r2,32
   160bc:	f800283a 	ret
   160c0:	1806d43a 	srli	r3,r3,16
   160c4:	00800404 	movi	r2,16
   160c8:	003feb06 	br	16078 <__lo0bits+0x38>
   160cc:	10800044 	addi	r2,r2,1
   160d0:	20c00015 	stw	r3,0(r4)
   160d4:	f800283a 	ret
   160d8:	0005883a 	mov	r2,zero
   160dc:	f800283a 	ret
   160e0:	1806d07a 	srli	r3,r3,1
   160e4:	00800044 	movi	r2,1
   160e8:	20c00015 	stw	r3,0(r4)
   160ec:	f800283a 	ret

000160f0 <__i2b>:
   160f0:	defffd04 	addi	sp,sp,-12
   160f4:	dc000015 	stw	r16,0(sp)
   160f8:	04000044 	movi	r16,1
   160fc:	dc400115 	stw	r17,4(sp)
   16100:	2823883a 	mov	r17,r5
   16104:	800b883a 	mov	r5,r16
   16108:	dfc00215 	stw	ra,8(sp)
   1610c:	0015cf00 	call	15cf0 <_Balloc>
   16110:	14400515 	stw	r17,20(r2)
   16114:	14000415 	stw	r16,16(r2)
   16118:	dfc00217 	ldw	ra,8(sp)
   1611c:	dc400117 	ldw	r17,4(sp)
   16120:	dc000017 	ldw	r16,0(sp)
   16124:	dec00304 	addi	sp,sp,12
   16128:	f800283a 	ret

0001612c <__multiply>:
   1612c:	defffa04 	addi	sp,sp,-24
   16130:	dcc00315 	stw	r19,12(sp)
   16134:	dc400115 	stw	r17,4(sp)
   16138:	34c00417 	ldw	r19,16(r6)
   1613c:	2c400417 	ldw	r17,16(r5)
   16140:	dd000415 	stw	r20,16(sp)
   16144:	dc800215 	stw	r18,8(sp)
   16148:	dfc00515 	stw	ra,20(sp)
   1614c:	dc000015 	stw	r16,0(sp)
   16150:	2825883a 	mov	r18,r5
   16154:	3029883a 	mov	r20,r6
   16158:	8cc0050e 	bge	r17,r19,16170 <__multiply+0x44>
   1615c:	8807883a 	mov	r3,r17
   16160:	3025883a 	mov	r18,r6
   16164:	9823883a 	mov	r17,r19
   16168:	2829883a 	mov	r20,r5
   1616c:	1827883a 	mov	r19,r3
   16170:	90800217 	ldw	r2,8(r18)
   16174:	8ce1883a 	add	r16,r17,r19
   16178:	91400117 	ldw	r5,4(r18)
   1617c:	1400010e 	bge	r2,r16,16184 <__multiply+0x58>
   16180:	29400044 	addi	r5,r5,1
   16184:	0015cf00 	call	15cf0 <_Balloc>
   16188:	83c00144 	addi	r15,r16,5
   1618c:	7bdf883a 	add	r15,r15,r15
   16190:	7bdf883a 	add	r15,r15,r15
   16194:	13800504 	addi	r14,r2,20
   16198:	13df883a 	add	r15,r2,r15
   1619c:	7007883a 	mov	r3,r14
   161a0:	73c0032e 	bgeu	r14,r15,161b0 <__multiply+0x84>
   161a4:	18000015 	stw	zero,0(r3)
   161a8:	18c00104 	addi	r3,r3,4
   161ac:	1bfffd36 	bltu	r3,r15,161a4 <__multiply+0x78>
   161b0:	99800144 	addi	r6,r19,5
   161b4:	8b000144 	addi	r12,r17,5
   161b8:	318d883a 	add	r6,r6,r6
   161bc:	6319883a 	add	r12,r12,r12
   161c0:	318d883a 	add	r6,r6,r6
   161c4:	6319883a 	add	r12,r12,r12
   161c8:	a3400504 	addi	r13,r20,20
   161cc:	a18d883a 	add	r6,r20,r6
   161d0:	94400504 	addi	r17,r18,20
   161d4:	9319883a 	add	r12,r18,r12
   161d8:	6980392e 	bgeu	r13,r6,162c0 <__multiply+0x194>
   161dc:	6a800017 	ldw	r10,0(r13)
   161e0:	52ffffcc 	andi	r11,r10,65535
   161e4:	58001826 	beq	r11,zero,16248 <__multiply+0x11c>
   161e8:	7007883a 	mov	r3,r14
   161ec:	8809883a 	mov	r4,r17
   161f0:	000b883a 	mov	r5,zero
   161f4:	22400017 	ldw	r9,0(r4)
   161f8:	1a000017 	ldw	r8,0(r3)
   161fc:	21000104 	addi	r4,r4,4
   16200:	49ffffcc 	andi	r7,r9,65535
   16204:	3acf383a 	mul	r7,r7,r11
   16208:	4812d43a 	srli	r9,r9,16
   1620c:	42bfffcc 	andi	r10,r8,65535
   16210:	3a8f883a 	add	r7,r7,r10
   16214:	394f883a 	add	r7,r7,r5
   16218:	4010d43a 	srli	r8,r8,16
   1621c:	4acb383a 	mul	r5,r9,r11
   16220:	3814d43a 	srli	r10,r7,16
   16224:	19c0000d 	sth	r7,0(r3)
   16228:	2a0b883a 	add	r5,r5,r8
   1622c:	2a8b883a 	add	r5,r5,r10
   16230:	1940008d 	sth	r5,2(r3)
   16234:	280ad43a 	srli	r5,r5,16
   16238:	18c00104 	addi	r3,r3,4
   1623c:	233fed36 	bltu	r4,r12,161f4 <__multiply+0xc8>
   16240:	19400015 	stw	r5,0(r3)
   16244:	6a800017 	ldw	r10,0(r13)
   16248:	5014d43a 	srli	r10,r10,16
   1624c:	50001926 	beq	r10,zero,162b4 <__multiply+0x188>
   16250:	71400017 	ldw	r5,0(r14)
   16254:	7007883a 	mov	r3,r14
   16258:	8809883a 	mov	r4,r17
   1625c:	280f883a 	mov	r7,r5
   16260:	0017883a 	mov	r11,zero
   16264:	22400017 	ldw	r9,0(r4)
   16268:	380ed43a 	srli	r7,r7,16
   1626c:	1940000d 	sth	r5,0(r3)
   16270:	4a3fffcc 	andi	r8,r9,65535
   16274:	4291383a 	mul	r8,r8,r10
   16278:	4812d43a 	srli	r9,r9,16
   1627c:	18c00104 	addi	r3,r3,4
   16280:	41d1883a 	add	r8,r8,r7
   16284:	19c00017 	ldw	r7,0(r3)
   16288:	42d1883a 	add	r8,r8,r11
   1628c:	4a93383a 	mul	r9,r9,r10
   16290:	1a3fff8d 	sth	r8,-2(r3)
   16294:	4010d43a 	srli	r8,r8,16
   16298:	397fffcc 	andi	r5,r7,65535
   1629c:	2a4b883a 	add	r5,r5,r9
   162a0:	2a0b883a 	add	r5,r5,r8
   162a4:	21000104 	addi	r4,r4,4
   162a8:	2816d43a 	srli	r11,r5,16
   162ac:	233fed36 	bltu	r4,r12,16264 <__multiply+0x138>
   162b0:	19400015 	stw	r5,0(r3)
   162b4:	6b400104 	addi	r13,r13,4
   162b8:	73800104 	addi	r14,r14,4
   162bc:	69bfc736 	bltu	r13,r6,161dc <__multiply+0xb0>
   162c0:	0400090e 	bge	zero,r16,162e8 <__multiply+0x1bc>
   162c4:	78ffff17 	ldw	r3,-4(r15)
   162c8:	7bffff04 	addi	r15,r15,-4
   162cc:	18000326 	beq	r3,zero,162dc <__multiply+0x1b0>
   162d0:	00000506 	br	162e8 <__multiply+0x1bc>
   162d4:	78c00017 	ldw	r3,0(r15)
   162d8:	1800031e 	bne	r3,zero,162e8 <__multiply+0x1bc>
   162dc:	843fffc4 	addi	r16,r16,-1
   162e0:	7bffff04 	addi	r15,r15,-4
   162e4:	803ffb1e 	bne	r16,zero,162d4 <__multiply+0x1a8>
   162e8:	14000415 	stw	r16,16(r2)
   162ec:	dfc00517 	ldw	ra,20(sp)
   162f0:	dd000417 	ldw	r20,16(sp)
   162f4:	dcc00317 	ldw	r19,12(sp)
   162f8:	dc800217 	ldw	r18,8(sp)
   162fc:	dc400117 	ldw	r17,4(sp)
   16300:	dc000017 	ldw	r16,0(sp)
   16304:	dec00604 	addi	sp,sp,24
   16308:	f800283a 	ret

0001630c <__pow5mult>:
   1630c:	defffb04 	addi	sp,sp,-20
   16310:	dcc00315 	stw	r19,12(sp)
   16314:	dc800215 	stw	r18,8(sp)
   16318:	dc000015 	stw	r16,0(sp)
   1631c:	dfc00415 	stw	ra,16(sp)
   16320:	dc400115 	stw	r17,4(sp)
   16324:	308000cc 	andi	r2,r6,3
   16328:	3021883a 	mov	r16,r6
   1632c:	2027883a 	mov	r19,r4
   16330:	2825883a 	mov	r18,r5
   16334:	10002e1e 	bne	r2,zero,163f0 <__pow5mult+0xe4>
   16338:	8021d0ba 	srai	r16,r16,2
   1633c:	80001a26 	beq	r16,zero,163a8 <__pow5mult+0x9c>
   16340:	9c401217 	ldw	r17,72(r19)
   16344:	8800061e 	bne	r17,zero,16360 <__pow5mult+0x54>
   16348:	00003406 	br	1641c <__pow5mult+0x110>
   1634c:	8021d07a 	srai	r16,r16,1
   16350:	80001526 	beq	r16,zero,163a8 <__pow5mult+0x9c>
   16354:	88c00017 	ldw	r3,0(r17)
   16358:	18001b26 	beq	r3,zero,163c8 <__pow5mult+0xbc>
   1635c:	1823883a 	mov	r17,r3
   16360:	80c0004c 	andi	r3,r16,1
   16364:	183ff926 	beq	r3,zero,1634c <__pow5mult+0x40>
   16368:	900b883a 	mov	r5,r18
   1636c:	880d883a 	mov	r6,r17
   16370:	9809883a 	mov	r4,r19
   16374:	001612c0 	call	1612c <__multiply>
   16378:	90001b26 	beq	r18,zero,163e8 <__pow5mult+0xdc>
   1637c:	91000117 	ldw	r4,4(r18)
   16380:	98c01317 	ldw	r3,76(r19)
   16384:	8021d07a 	srai	r16,r16,1
   16388:	2109883a 	add	r4,r4,r4
   1638c:	2109883a 	add	r4,r4,r4
   16390:	1907883a 	add	r3,r3,r4
   16394:	19000017 	ldw	r4,0(r3)
   16398:	91000015 	stw	r4,0(r18)
   1639c:	1c800015 	stw	r18,0(r3)
   163a0:	1025883a 	mov	r18,r2
   163a4:	803feb1e 	bne	r16,zero,16354 <__pow5mult+0x48>
   163a8:	9005883a 	mov	r2,r18
   163ac:	dfc00417 	ldw	ra,16(sp)
   163b0:	dcc00317 	ldw	r19,12(sp)
   163b4:	dc800217 	ldw	r18,8(sp)
   163b8:	dc400117 	ldw	r17,4(sp)
   163bc:	dc000017 	ldw	r16,0(sp)
   163c0:	dec00504 	addi	sp,sp,20
   163c4:	f800283a 	ret
   163c8:	880b883a 	mov	r5,r17
   163cc:	880d883a 	mov	r6,r17
   163d0:	9809883a 	mov	r4,r19
   163d4:	001612c0 	call	1612c <__multiply>
   163d8:	88800015 	stw	r2,0(r17)
   163dc:	10000015 	stw	zero,0(r2)
   163e0:	1023883a 	mov	r17,r2
   163e4:	003fde06 	br	16360 <__pow5mult+0x54>
   163e8:	1025883a 	mov	r18,r2
   163ec:	003fd706 	br	1634c <__pow5mult+0x40>
   163f0:	10bfffc4 	addi	r2,r2,-1
   163f4:	1085883a 	add	r2,r2,r2
   163f8:	00c000f4 	movhi	r3,3
   163fc:	18e09104 	addi	r3,r3,-32188
   16400:	1085883a 	add	r2,r2,r2
   16404:	1885883a 	add	r2,r3,r2
   16408:	11800017 	ldw	r6,0(r2)
   1640c:	000f883a 	mov	r7,zero
   16410:	0015dc00 	call	15dc0 <__multadd>
   16414:	1025883a 	mov	r18,r2
   16418:	003fc706 	br	16338 <__pow5mult+0x2c>
   1641c:	9809883a 	mov	r4,r19
   16420:	01409c44 	movi	r5,625
   16424:	00160f00 	call	160f0 <__i2b>
   16428:	98801215 	stw	r2,72(r19)
   1642c:	1023883a 	mov	r17,r2
   16430:	10000015 	stw	zero,0(r2)
   16434:	003fca06 	br	16360 <__pow5mult+0x54>

00016438 <__lshift>:
   16438:	defff904 	addi	sp,sp,-28
   1643c:	dd400515 	stw	r21,20(sp)
   16440:	dc400115 	stw	r17,4(sp)
   16444:	2d400417 	ldw	r21,16(r5)
   16448:	3023d17a 	srai	r17,r6,5
   1644c:	28800217 	ldw	r2,8(r5)
   16450:	dd000415 	stw	r20,16(sp)
   16454:	8d6b883a 	add	r21,r17,r21
   16458:	dcc00315 	stw	r19,12(sp)
   1645c:	dc800215 	stw	r18,8(sp)
   16460:	dc000015 	stw	r16,0(sp)
   16464:	dfc00615 	stw	ra,24(sp)
   16468:	ac000044 	addi	r16,r21,1
   1646c:	2825883a 	mov	r18,r5
   16470:	3029883a 	mov	r20,r6
   16474:	2027883a 	mov	r19,r4
   16478:	29400117 	ldw	r5,4(r5)
   1647c:	1400030e 	bge	r2,r16,1648c <__lshift+0x54>
   16480:	1085883a 	add	r2,r2,r2
   16484:	29400044 	addi	r5,r5,1
   16488:	143ffd16 	blt	r2,r16,16480 <__lshift+0x48>
   1648c:	9809883a 	mov	r4,r19
   16490:	0015cf00 	call	15cf0 <_Balloc>
   16494:	10c00504 	addi	r3,r2,20
   16498:	0440090e 	bge	zero,r17,164c0 <__lshift+0x88>
   1649c:	000f883a 	mov	r7,zero
   164a0:	18000015 	stw	zero,0(r3)
   164a4:	39c00044 	addi	r7,r7,1
   164a8:	18c00104 	addi	r3,r3,4
   164ac:	3c7ffc1e 	bne	r7,r17,164a0 <__lshift+0x68>
   164b0:	38c00144 	addi	r3,r7,5
   164b4:	18c7883a 	add	r3,r3,r3
   164b8:	18c7883a 	add	r3,r3,r3
   164bc:	10c7883a 	add	r3,r2,r3
   164c0:	92000417 	ldw	r8,16(r18)
   164c4:	a18007cc 	andi	r6,r20,31
   164c8:	91c00504 	addi	r7,r18,20
   164cc:	42000144 	addi	r8,r8,5
   164d0:	4211883a 	add	r8,r8,r8
   164d4:	4211883a 	add	r8,r8,r8
   164d8:	9211883a 	add	r8,r18,r8
   164dc:	30002226 	beq	r6,zero,16568 <__lshift+0x130>
   164e0:	02800804 	movi	r10,32
   164e4:	5195c83a 	sub	r10,r10,r6
   164e8:	000b883a 	mov	r5,zero
   164ec:	3a400017 	ldw	r9,0(r7)
   164f0:	18c00104 	addi	r3,r3,4
   164f4:	39c00104 	addi	r7,r7,4
   164f8:	4992983a 	sll	r9,r9,r6
   164fc:	2a4ab03a 	or	r5,r5,r9
   16500:	197fff15 	stw	r5,-4(r3)
   16504:	397fff17 	ldw	r5,-4(r7)
   16508:	2a8ad83a 	srl	r5,r5,r10
   1650c:	3a3ff736 	bltu	r7,r8,164ec <__lshift+0xb4>
   16510:	19400015 	stw	r5,0(r3)
   16514:	28000126 	beq	r5,zero,1651c <__lshift+0xe4>
   16518:	ac000084 	addi	r16,r21,2
   1651c:	91000117 	ldw	r4,4(r18)
   16520:	98c01317 	ldw	r3,76(r19)
   16524:	843fffc4 	addi	r16,r16,-1
   16528:	2109883a 	add	r4,r4,r4
   1652c:	2109883a 	add	r4,r4,r4
   16530:	1907883a 	add	r3,r3,r4
   16534:	19000017 	ldw	r4,0(r3)
   16538:	14000415 	stw	r16,16(r2)
   1653c:	91000015 	stw	r4,0(r18)
   16540:	1c800015 	stw	r18,0(r3)
   16544:	dfc00617 	ldw	ra,24(sp)
   16548:	dd400517 	ldw	r21,20(sp)
   1654c:	dd000417 	ldw	r20,16(sp)
   16550:	dcc00317 	ldw	r19,12(sp)
   16554:	dc800217 	ldw	r18,8(sp)
   16558:	dc400117 	ldw	r17,4(sp)
   1655c:	dc000017 	ldw	r16,0(sp)
   16560:	dec00704 	addi	sp,sp,28
   16564:	f800283a 	ret
   16568:	39400017 	ldw	r5,0(r7)
   1656c:	18c00104 	addi	r3,r3,4
   16570:	39c00104 	addi	r7,r7,4
   16574:	197fff15 	stw	r5,-4(r3)
   16578:	3a3fe82e 	bgeu	r7,r8,1651c <__lshift+0xe4>
   1657c:	39400017 	ldw	r5,0(r7)
   16580:	18c00104 	addi	r3,r3,4
   16584:	39c00104 	addi	r7,r7,4
   16588:	197fff15 	stw	r5,-4(r3)
   1658c:	3a3ff636 	bltu	r7,r8,16568 <__lshift+0x130>
   16590:	003fe206 	br	1651c <__lshift+0xe4>

00016594 <__mcmp>:
   16594:	20800417 	ldw	r2,16(r4)
   16598:	28c00417 	ldw	r3,16(r5)
   1659c:	10c5c83a 	sub	r2,r2,r3
   165a0:	10000f1e 	bne	r2,zero,165e0 <__mcmp+0x4c>
   165a4:	18c00144 	addi	r3,r3,5
   165a8:	18c7883a 	add	r3,r3,r3
   165ac:	18c7883a 	add	r3,r3,r3
   165b0:	21c00504 	addi	r7,r4,20
   165b4:	28cb883a 	add	r5,r5,r3
   165b8:	20c9883a 	add	r4,r4,r3
   165bc:	213fff04 	addi	r4,r4,-4
   165c0:	297fff04 	addi	r5,r5,-4
   165c4:	21800017 	ldw	r6,0(r4)
   165c8:	28c00017 	ldw	r3,0(r5)
   165cc:	30c0021e 	bne	r6,r3,165d8 <__mcmp+0x44>
   165d0:	393ffa36 	bltu	r7,r4,165bc <__mcmp+0x28>
   165d4:	f800283a 	ret
   165d8:	30c00236 	bltu	r6,r3,165e4 <__mcmp+0x50>
   165dc:	00800044 	movi	r2,1
   165e0:	f800283a 	ret
   165e4:	00bfffc4 	movi	r2,-1
   165e8:	f800283a 	ret

000165ec <__mdiff>:
   165ec:	defffb04 	addi	sp,sp,-20
   165f0:	dc000015 	stw	r16,0(sp)
   165f4:	2821883a 	mov	r16,r5
   165f8:	dc800215 	stw	r18,8(sp)
   165fc:	300b883a 	mov	r5,r6
   16600:	2025883a 	mov	r18,r4
   16604:	8009883a 	mov	r4,r16
   16608:	dc400115 	stw	r17,4(sp)
   1660c:	dfc00415 	stw	ra,16(sp)
   16610:	dcc00315 	stw	r19,12(sp)
   16614:	3023883a 	mov	r17,r6
   16618:	00165940 	call	16594 <__mcmp>
   1661c:	10005026 	beq	r2,zero,16760 <__mdiff+0x174>
   16620:	10004a16 	blt	r2,zero,1674c <__mdiff+0x160>
   16624:	0027883a 	mov	r19,zero
   16628:	81400117 	ldw	r5,4(r16)
   1662c:	9009883a 	mov	r4,r18
   16630:	0015cf00 	call	15cf0 <_Balloc>
   16634:	82400417 	ldw	r9,16(r16)
   16638:	89800417 	ldw	r6,16(r17)
   1663c:	14c00315 	stw	r19,12(r2)
   16640:	4b800144 	addi	r14,r9,5
   16644:	31800144 	addi	r6,r6,5
   16648:	739d883a 	add	r14,r14,r14
   1664c:	318d883a 	add	r6,r6,r6
   16650:	739d883a 	add	r14,r14,r14
   16654:	318d883a 	add	r6,r6,r6
   16658:	81c00504 	addi	r7,r16,20
   1665c:	839d883a 	add	r14,r16,r14
   16660:	8a000504 	addi	r8,r17,20
   16664:	898d883a 	add	r6,r17,r6
   16668:	10c00504 	addi	r3,r2,20
   1666c:	0009883a 	mov	r4,zero
   16670:	3b000017 	ldw	r12,0(r7)
   16674:	42c00017 	ldw	r11,0(r8)
   16678:	42000104 	addi	r8,r8,4
   1667c:	62bfffcc 	andi	r10,r12,65535
   16680:	5b7fffcc 	andi	r13,r11,65535
   16684:	5109883a 	add	r4,r10,r4
   16688:	2355c83a 	sub	r10,r4,r13
   1668c:	5816d43a 	srli	r11,r11,16
   16690:	6008d43a 	srli	r4,r12,16
   16694:	501bd43a 	srai	r13,r10,16
   16698:	1a80000d 	sth	r10,0(r3)
   1669c:	22c9c83a 	sub	r4,r4,r11
   166a0:	2349883a 	add	r4,r4,r13
   166a4:	1900008d 	sth	r4,2(r3)
   166a8:	39c00104 	addi	r7,r7,4
   166ac:	2009d43a 	srai	r4,r4,16
   166b0:	18c00104 	addi	r3,r3,4
   166b4:	41bfee36 	bltu	r8,r6,16670 <__mdiff+0x84>
   166b8:	180b883a 	mov	r5,r3
   166bc:	3815883a 	mov	r10,r7
   166c0:	3b80132e 	bgeu	r7,r14,16710 <__mdiff+0x124>
   166c4:	3a000017 	ldw	r8,0(r7)
   166c8:	18c00104 	addi	r3,r3,4
   166cc:	39c00104 	addi	r7,r7,4
   166d0:	41bfffcc 	andi	r6,r8,65535
   166d4:	310d883a 	add	r6,r6,r4
   166d8:	3009d43a 	srai	r4,r6,16
   166dc:	4010d43a 	srli	r8,r8,16
   166e0:	19bfff0d 	sth	r6,-4(r3)
   166e4:	2209883a 	add	r4,r4,r8
   166e8:	193fff8d 	sth	r4,-2(r3)
   166ec:	2009d43a 	srai	r4,r4,16
   166f0:	3bbff436 	bltu	r7,r14,166c4 <__mdiff+0xd8>
   166f4:	0286303a 	nor	r3,zero,r10
   166f8:	1b87883a 	add	r3,r3,r14
   166fc:	1806d0ba 	srli	r3,r3,2
   16700:	18c00044 	addi	r3,r3,1
   16704:	18c7883a 	add	r3,r3,r3
   16708:	18c7883a 	add	r3,r3,r3
   1670c:	28c7883a 	add	r3,r5,r3
   16710:	193fff17 	ldw	r4,-4(r3)
   16714:	18ffff04 	addi	r3,r3,-4
   16718:	2000041e 	bne	r4,zero,1672c <__mdiff+0x140>
   1671c:	18ffff04 	addi	r3,r3,-4
   16720:	19000017 	ldw	r4,0(r3)
   16724:	4a7fffc4 	addi	r9,r9,-1
   16728:	203ffc26 	beq	r4,zero,1671c <__mdiff+0x130>
   1672c:	12400415 	stw	r9,16(r2)
   16730:	dfc00417 	ldw	ra,16(sp)
   16734:	dcc00317 	ldw	r19,12(sp)
   16738:	dc800217 	ldw	r18,8(sp)
   1673c:	dc400117 	ldw	r17,4(sp)
   16740:	dc000017 	ldw	r16,0(sp)
   16744:	dec00504 	addi	sp,sp,20
   16748:	f800283a 	ret
   1674c:	8005883a 	mov	r2,r16
   16750:	04c00044 	movi	r19,1
   16754:	8821883a 	mov	r16,r17
   16758:	1023883a 	mov	r17,r2
   1675c:	003fb206 	br	16628 <__mdiff+0x3c>
   16760:	9009883a 	mov	r4,r18
   16764:	000b883a 	mov	r5,zero
   16768:	0015cf00 	call	15cf0 <_Balloc>
   1676c:	00c00044 	movi	r3,1
   16770:	10c00415 	stw	r3,16(r2)
   16774:	10000515 	stw	zero,20(r2)
   16778:	dfc00417 	ldw	ra,16(sp)
   1677c:	dcc00317 	ldw	r19,12(sp)
   16780:	dc800217 	ldw	r18,8(sp)
   16784:	dc400117 	ldw	r17,4(sp)
   16788:	dc000017 	ldw	r16,0(sp)
   1678c:	dec00504 	addi	sp,sp,20
   16790:	f800283a 	ret

00016794 <__ulp>:
   16794:	295ffc2c 	andhi	r5,r5,32752
   16798:	00bf3034 	movhi	r2,64704
   1679c:	2887883a 	add	r3,r5,r2
   167a0:	00c0020e 	bge	zero,r3,167ac <__ulp+0x18>
   167a4:	0005883a 	mov	r2,zero
   167a8:	f800283a 	ret
   167ac:	00c7c83a 	sub	r3,zero,r3
   167b0:	1805d53a 	srai	r2,r3,20
   167b4:	00c004c4 	movi	r3,19
   167b8:	18800a0e 	bge	r3,r2,167e4 <__ulp+0x50>
   167bc:	01000c84 	movi	r4,50
   167c0:	0007883a 	mov	r3,zero
   167c4:	20800516 	blt	r4,r2,167dc <__ulp+0x48>
   167c8:	01000cc4 	movi	r4,51
   167cc:	2085c83a 	sub	r2,r4,r2
   167d0:	01000044 	movi	r4,1
   167d4:	2084983a 	sll	r2,r4,r2
   167d8:	f800283a 	ret
   167dc:	00800044 	movi	r2,1
   167e0:	f800283a 	ret
   167e4:	00c00234 	movhi	r3,8
   167e8:	1887d83a 	sra	r3,r3,r2
   167ec:	0005883a 	mov	r2,zero
   167f0:	f800283a 	ret

000167f4 <__b2d>:
   167f4:	defffa04 	addi	sp,sp,-24
   167f8:	dc000015 	stw	r16,0(sp)
   167fc:	24000417 	ldw	r16,16(r4)
   16800:	dc400115 	stw	r17,4(sp)
   16804:	dcc00315 	stw	r19,12(sp)
   16808:	84000144 	addi	r16,r16,5
   1680c:	8421883a 	add	r16,r16,r16
   16810:	8421883a 	add	r16,r16,r16
   16814:	2421883a 	add	r16,r4,r16
   16818:	847fff17 	ldw	r17,-4(r16)
   1681c:	24c00504 	addi	r19,r4,20
   16820:	dd000415 	stw	r20,16(sp)
   16824:	8809883a 	mov	r4,r17
   16828:	dc800215 	stw	r18,8(sp)
   1682c:	2829883a 	mov	r20,r5
   16830:	dfc00515 	stw	ra,20(sp)
   16834:	0015fd80 	call	15fd8 <__hi0bits>
   16838:	00c00804 	movi	r3,32
   1683c:	1887c83a 	sub	r3,r3,r2
   16840:	a0c00015 	stw	r3,0(r20)
   16844:	00c00284 	movi	r3,10
   16848:	84bfff04 	addi	r18,r16,-4
   1684c:	18801216 	blt	r3,r2,16898 <__b2d+0xa4>
   16850:	010002c4 	movi	r4,11
   16854:	2089c83a 	sub	r4,r4,r2
   16858:	8906d83a 	srl	r3,r17,r4
   1685c:	18cffc34 	orhi	r3,r3,16368
   16860:	9c80322e 	bgeu	r19,r18,1692c <__b2d+0x138>
   16864:	817ffe17 	ldw	r5,-8(r16)
   16868:	2908d83a 	srl	r4,r5,r4
   1686c:	10800544 	addi	r2,r2,21
   16870:	88a2983a 	sll	r17,r17,r2
   16874:	2444b03a 	or	r2,r4,r17
   16878:	dfc00517 	ldw	ra,20(sp)
   1687c:	dd000417 	ldw	r20,16(sp)
   16880:	dcc00317 	ldw	r19,12(sp)
   16884:	dc800217 	ldw	r18,8(sp)
   16888:	dc400117 	ldw	r17,4(sp)
   1688c:	dc000017 	ldw	r16,0(sp)
   16890:	dec00604 	addi	sp,sp,24
   16894:	f800283a 	ret
   16898:	9c801636 	bltu	r19,r18,168f4 <__b2d+0x100>
   1689c:	113ffd44 	addi	r4,r2,-11
   168a0:	000b883a 	mov	r5,zero
   168a4:	20001726 	beq	r4,zero,16904 <__b2d+0x110>
   168a8:	00c00ac4 	movi	r3,43
   168ac:	1885c83a 	sub	r2,r3,r2
   168b0:	8906983a 	sll	r3,r17,r4
   168b4:	288cd83a 	srl	r6,r5,r2
   168b8:	18cffc34 	orhi	r3,r3,16368
   168bc:	1986b03a 	or	r3,r3,r6
   168c0:	9c801c2e 	bgeu	r19,r18,16934 <__b2d+0x140>
   168c4:	91bfff17 	ldw	r6,-4(r18)
   168c8:	3084d83a 	srl	r2,r6,r2
   168cc:	2908983a 	sll	r4,r5,r4
   168d0:	1104b03a 	or	r2,r2,r4
   168d4:	dfc00517 	ldw	ra,20(sp)
   168d8:	dd000417 	ldw	r20,16(sp)
   168dc:	dcc00317 	ldw	r19,12(sp)
   168e0:	dc800217 	ldw	r18,8(sp)
   168e4:	dc400117 	ldw	r17,4(sp)
   168e8:	dc000017 	ldw	r16,0(sp)
   168ec:	dec00604 	addi	sp,sp,24
   168f0:	f800283a 	ret
   168f4:	113ffd44 	addi	r4,r2,-11
   168f8:	84bffe04 	addi	r18,r16,-8
   168fc:	817ffe17 	ldw	r5,-8(r16)
   16900:	203fe91e 	bne	r4,zero,168a8 <__b2d+0xb4>
   16904:	88cffc34 	orhi	r3,r17,16368
   16908:	2805883a 	mov	r2,r5
   1690c:	dfc00517 	ldw	ra,20(sp)
   16910:	dd000417 	ldw	r20,16(sp)
   16914:	dcc00317 	ldw	r19,12(sp)
   16918:	dc800217 	ldw	r18,8(sp)
   1691c:	dc400117 	ldw	r17,4(sp)
   16920:	dc000017 	ldw	r16,0(sp)
   16924:	dec00604 	addi	sp,sp,24
   16928:	f800283a 	ret
   1692c:	0009883a 	mov	r4,zero
   16930:	003fce06 	br	1686c <__b2d+0x78>
   16934:	0005883a 	mov	r2,zero
   16938:	003fe406 	br	168cc <__b2d+0xd8>

0001693c <__d2b>:
   1693c:	defff804 	addi	sp,sp,-32
   16940:	dc400315 	stw	r17,12(sp)
   16944:	3023883a 	mov	r17,r6
   16948:	dc800415 	stw	r18,16(sp)
   1694c:	8824907a 	slli	r18,r17,1
   16950:	dcc00515 	stw	r19,20(sp)
   16954:	2827883a 	mov	r19,r5
   16958:	9024d57a 	srli	r18,r18,21
   1695c:	01400044 	movi	r5,1
   16960:	dd000615 	stw	r20,24(sp)
   16964:	dc000215 	stw	r16,8(sp)
   16968:	dfc00715 	stw	ra,28(sp)
   1696c:	3829883a 	mov	r20,r7
   16970:	0015cf00 	call	15cf0 <_Balloc>
   16974:	1021883a 	mov	r16,r2
   16978:	00800434 	movhi	r2,16
   1697c:	10bfffc4 	addi	r2,r2,-1
   16980:	88a2703a 	and	r17,r17,r2
   16984:	90000126 	beq	r18,zero,1698c <__d2b+0x50>
   16988:	8c400434 	orhi	r17,r17,16
   1698c:	dc400015 	stw	r17,0(sp)
   16990:	98002226 	beq	r19,zero,16a1c <__d2b+0xe0>
   16994:	d9000104 	addi	r4,sp,4
   16998:	dcc00115 	stw	r19,4(sp)
   1699c:	00160400 	call	16040 <__lo0bits>
   169a0:	d8c00017 	ldw	r3,0(sp)
   169a4:	10002d1e 	bne	r2,zero,16a5c <__d2b+0x120>
   169a8:	d9000117 	ldw	r4,4(sp)
   169ac:	81000515 	stw	r4,20(r16)
   169b0:	1823003a 	cmpeq	r17,r3,zero
   169b4:	01000084 	movi	r4,2
   169b8:	2463c83a 	sub	r17,r4,r17
   169bc:	80c00615 	stw	r3,24(r16)
   169c0:	84400415 	stw	r17,16(r16)
   169c4:	90001d1e 	bne	r18,zero,16a3c <__d2b+0x100>
   169c8:	88c00104 	addi	r3,r17,4
   169cc:	18c7883a 	add	r3,r3,r3
   169d0:	18c7883a 	add	r3,r3,r3
   169d4:	80c7883a 	add	r3,r16,r3
   169d8:	19000017 	ldw	r4,0(r3)
   169dc:	10bef384 	addi	r2,r2,-1074
   169e0:	a0800015 	stw	r2,0(r20)
   169e4:	0015fd80 	call	15fd8 <__hi0bits>
   169e8:	8822917a 	slli	r17,r17,5
   169ec:	d8c00817 	ldw	r3,32(sp)
   169f0:	8885c83a 	sub	r2,r17,r2
   169f4:	18800015 	stw	r2,0(r3)
   169f8:	8005883a 	mov	r2,r16
   169fc:	dfc00717 	ldw	ra,28(sp)
   16a00:	dd000617 	ldw	r20,24(sp)
   16a04:	dcc00517 	ldw	r19,20(sp)
   16a08:	dc800417 	ldw	r18,16(sp)
   16a0c:	dc400317 	ldw	r17,12(sp)
   16a10:	dc000217 	ldw	r16,8(sp)
   16a14:	dec00804 	addi	sp,sp,32
   16a18:	f800283a 	ret
   16a1c:	d809883a 	mov	r4,sp
   16a20:	00160400 	call	16040 <__lo0bits>
   16a24:	d8c00017 	ldw	r3,0(sp)
   16a28:	04400044 	movi	r17,1
   16a2c:	84400415 	stw	r17,16(r16)
   16a30:	80c00515 	stw	r3,20(r16)
   16a34:	10800804 	addi	r2,r2,32
   16a38:	903fe326 	beq	r18,zero,169c8 <__d2b+0x8c>
   16a3c:	00c00d44 	movi	r3,53
   16a40:	94bef344 	addi	r18,r18,-1075
   16a44:	90a5883a 	add	r18,r18,r2
   16a48:	1885c83a 	sub	r2,r3,r2
   16a4c:	d8c00817 	ldw	r3,32(sp)
   16a50:	a4800015 	stw	r18,0(r20)
   16a54:	18800015 	stw	r2,0(r3)
   16a58:	003fe706 	br	169f8 <__d2b+0xbc>
   16a5c:	01000804 	movi	r4,32
   16a60:	2089c83a 	sub	r4,r4,r2
   16a64:	1908983a 	sll	r4,r3,r4
   16a68:	d9400117 	ldw	r5,4(sp)
   16a6c:	1886d83a 	srl	r3,r3,r2
   16a70:	2148b03a 	or	r4,r4,r5
   16a74:	81000515 	stw	r4,20(r16)
   16a78:	d8c00015 	stw	r3,0(sp)
   16a7c:	003fcc06 	br	169b0 <__d2b+0x74>

00016a80 <__ratio>:
   16a80:	defff904 	addi	sp,sp,-28
   16a84:	dc400315 	stw	r17,12(sp)
   16a88:	2823883a 	mov	r17,r5
   16a8c:	d9400104 	addi	r5,sp,4
   16a90:	dfc00615 	stw	ra,24(sp)
   16a94:	dcc00515 	stw	r19,20(sp)
   16a98:	dc800415 	stw	r18,16(sp)
   16a9c:	2027883a 	mov	r19,r4
   16aa0:	dc000215 	stw	r16,8(sp)
   16aa4:	00167f40 	call	167f4 <__b2d>
   16aa8:	8809883a 	mov	r4,r17
   16aac:	d80b883a 	mov	r5,sp
   16ab0:	1025883a 	mov	r18,r2
   16ab4:	1821883a 	mov	r16,r3
   16ab8:	00167f40 	call	167f4 <__b2d>
   16abc:	99400417 	ldw	r5,16(r19)
   16ac0:	89000417 	ldw	r4,16(r17)
   16ac4:	d9800117 	ldw	r6,4(sp)
   16ac8:	2909c83a 	sub	r4,r5,r4
   16acc:	d9400017 	ldw	r5,0(sp)
   16ad0:	2008917a 	slli	r4,r4,5
   16ad4:	314bc83a 	sub	r5,r6,r5
   16ad8:	290b883a 	add	r5,r5,r4
   16adc:	01400e0e 	bge	zero,r5,16b18 <__ratio+0x98>
   16ae0:	280a953a 	slli	r5,r5,20
   16ae4:	2c21883a 	add	r16,r5,r16
   16ae8:	9009883a 	mov	r4,r18
   16aec:	800b883a 	mov	r5,r16
   16af0:	100d883a 	mov	r6,r2
   16af4:	180f883a 	mov	r7,r3
   16af8:	0018c000 	call	18c00 <__divdf3>
   16afc:	dfc00617 	ldw	ra,24(sp)
   16b00:	dcc00517 	ldw	r19,20(sp)
   16b04:	dc800417 	ldw	r18,16(sp)
   16b08:	dc400317 	ldw	r17,12(sp)
   16b0c:	dc000217 	ldw	r16,8(sp)
   16b10:	dec00704 	addi	sp,sp,28
   16b14:	f800283a 	ret
   16b18:	280a953a 	slli	r5,r5,20
   16b1c:	1947c83a 	sub	r3,r3,r5
   16b20:	003ff106 	br	16ae8 <__ratio+0x68>

00016b24 <_mprec_log10>:
   16b24:	defffe04 	addi	sp,sp,-8
   16b28:	dc000015 	stw	r16,0(sp)
   16b2c:	dfc00115 	stw	ra,4(sp)
   16b30:	008005c4 	movi	r2,23
   16b34:	2021883a 	mov	r16,r4
   16b38:	11000d0e 	bge	r2,r4,16b70 <_mprec_log10+0x4c>
   16b3c:	0005883a 	mov	r2,zero
   16b40:	00cffc34 	movhi	r3,16368
   16b44:	843fffc4 	addi	r16,r16,-1
   16b48:	1009883a 	mov	r4,r2
   16b4c:	180b883a 	mov	r5,r3
   16b50:	000d883a 	mov	r6,zero
   16b54:	01d00934 	movhi	r7,16420
   16b58:	001891c0 	call	1891c <__muldf3>
   16b5c:	803ff91e 	bne	r16,zero,16b44 <_mprec_log10+0x20>
   16b60:	dfc00117 	ldw	ra,4(sp)
   16b64:	dc000017 	ldw	r16,0(sp)
   16b68:	dec00204 	addi	sp,sp,8
   16b6c:	f800283a 	ret
   16b70:	202090fa 	slli	r16,r4,3
   16b74:	008000f4 	movhi	r2,3
   16b78:	10a05f04 	addi	r2,r2,-32388
   16b7c:	1421883a 	add	r16,r2,r16
   16b80:	80800017 	ldw	r2,0(r16)
   16b84:	80c00117 	ldw	r3,4(r16)
   16b88:	dfc00117 	ldw	ra,4(sp)
   16b8c:	dc000017 	ldw	r16,0(sp)
   16b90:	dec00204 	addi	sp,sp,8
   16b94:	f800283a 	ret

00016b98 <__copybits>:
   16b98:	297fffc4 	addi	r5,r5,-1
   16b9c:	31c00417 	ldw	r7,16(r6)
   16ba0:	2811d17a 	srai	r8,r5,5
   16ba4:	30800504 	addi	r2,r6,20
   16ba8:	39c00144 	addi	r7,r7,5
   16bac:	42000044 	addi	r8,r8,1
   16bb0:	39cf883a 	add	r7,r7,r7
   16bb4:	4211883a 	add	r8,r8,r8
   16bb8:	39cf883a 	add	r7,r7,r7
   16bbc:	4211883a 	add	r8,r8,r8
   16bc0:	31cf883a 	add	r7,r6,r7
   16bc4:	2211883a 	add	r8,r4,r8
   16bc8:	11c00d2e 	bgeu	r2,r7,16c00 <__copybits+0x68>
   16bcc:	2007883a 	mov	r3,r4
   16bd0:	11400017 	ldw	r5,0(r2)
   16bd4:	18c00104 	addi	r3,r3,4
   16bd8:	10800104 	addi	r2,r2,4
   16bdc:	197fff15 	stw	r5,-4(r3)
   16be0:	11fffb36 	bltu	r2,r7,16bd0 <__copybits+0x38>
   16be4:	3985c83a 	sub	r2,r7,r6
   16be8:	10bffac4 	addi	r2,r2,-21
   16bec:	1004d0ba 	srli	r2,r2,2
   16bf0:	10800044 	addi	r2,r2,1
   16bf4:	1085883a 	add	r2,r2,r2
   16bf8:	1085883a 	add	r2,r2,r2
   16bfc:	2089883a 	add	r4,r4,r2
   16c00:	2200032e 	bgeu	r4,r8,16c10 <__copybits+0x78>
   16c04:	20000015 	stw	zero,0(r4)
   16c08:	21000104 	addi	r4,r4,4
   16c0c:	223ffd36 	bltu	r4,r8,16c04 <__copybits+0x6c>
   16c10:	f800283a 	ret

00016c14 <__any_on>:
   16c14:	21800417 	ldw	r6,16(r4)
   16c18:	2805d17a 	srai	r2,r5,5
   16c1c:	20c00504 	addi	r3,r4,20
   16c20:	30800f0e 	bge	r6,r2,16c60 <__any_on+0x4c>
   16c24:	3005883a 	mov	r2,r6
   16c28:	10800144 	addi	r2,r2,5
   16c2c:	1085883a 	add	r2,r2,r2
   16c30:	1085883a 	add	r2,r2,r2
   16c34:	2089883a 	add	r4,r4,r2
   16c38:	1900152e 	bgeu	r3,r4,16c90 <__any_on+0x7c>
   16c3c:	20bfff17 	ldw	r2,-4(r4)
   16c40:	213fff04 	addi	r4,r4,-4
   16c44:	1000041e 	bne	r2,zero,16c58 <__any_on+0x44>
   16c48:	1900112e 	bgeu	r3,r4,16c90 <__any_on+0x7c>
   16c4c:	213fff04 	addi	r4,r4,-4
   16c50:	20800017 	ldw	r2,0(r4)
   16c54:	103ffc26 	beq	r2,zero,16c48 <__any_on+0x34>
   16c58:	00800044 	movi	r2,1
   16c5c:	f800283a 	ret
   16c60:	11bff10e 	bge	r2,r6,16c28 <__any_on+0x14>
   16c64:	294007cc 	andi	r5,r5,31
   16c68:	283fef26 	beq	r5,zero,16c28 <__any_on+0x14>
   16c6c:	11800144 	addi	r6,r2,5
   16c70:	318d883a 	add	r6,r6,r6
   16c74:	318d883a 	add	r6,r6,r6
   16c78:	218d883a 	add	r6,r4,r6
   16c7c:	31800017 	ldw	r6,0(r6)
   16c80:	314ed83a 	srl	r7,r6,r5
   16c84:	394a983a 	sll	r5,r7,r5
   16c88:	29bff31e 	bne	r5,r6,16c58 <__any_on+0x44>
   16c8c:	003fe606 	br	16c28 <__any_on+0x14>
   16c90:	0005883a 	mov	r2,zero
   16c94:	f800283a 	ret

00016c98 <_realloc_r>:
   16c98:	defff504 	addi	sp,sp,-44
   16c9c:	dd400615 	stw	r21,24(sp)
   16ca0:	dc800315 	stw	r18,12(sp)
   16ca4:	dc000115 	stw	r16,4(sp)
   16ca8:	dfc00a15 	stw	ra,40(sp)
   16cac:	df000915 	stw	fp,36(sp)
   16cb0:	ddc00815 	stw	r23,32(sp)
   16cb4:	dd800715 	stw	r22,28(sp)
   16cb8:	dd000515 	stw	r20,20(sp)
   16cbc:	dcc00415 	stw	r19,16(sp)
   16cc0:	dc400215 	stw	r17,8(sp)
   16cc4:	2821883a 	mov	r16,r5
   16cc8:	202b883a 	mov	r21,r4
   16ccc:	3025883a 	mov	r18,r6
   16cd0:	28009626 	beq	r5,zero,16f2c <_realloc_r+0x294>
   16cd4:	0019ec40 	call	19ec4 <__malloc_lock>
   16cd8:	80bfff17 	ldw	r2,-4(r16)
   16cdc:	04ffff04 	movi	r19,-4
   16ce0:	90c002c4 	addi	r3,r18,11
   16ce4:	01000584 	movi	r4,22
   16ce8:	85bffe04 	addi	r22,r16,-8
   16cec:	14e6703a 	and	r19,r2,r19
   16cf0:	20c0372e 	bgeu	r4,r3,16dd0 <_realloc_r+0x138>
   16cf4:	047ffe04 	movi	r17,-8
   16cf8:	1c62703a 	and	r17,r3,r17
   16cfc:	8807883a 	mov	r3,r17
   16d00:	88005a16 	blt	r17,zero,16e6c <_realloc_r+0x1d4>
   16d04:	8c805936 	bltu	r17,r18,16e6c <_realloc_r+0x1d4>
   16d08:	98c0340e 	bge	r19,r3,16ddc <_realloc_r+0x144>
   16d0c:	070000f4 	movhi	fp,3
   16d10:	e721e904 	addi	fp,fp,-30812
   16d14:	e1400217 	ldw	r5,8(fp)
   16d18:	b4c9883a 	add	r4,r22,r19
   16d1c:	29009026 	beq	r5,r4,16f60 <_realloc_r+0x2c8>
   16d20:	21800117 	ldw	r6,4(r4)
   16d24:	01ffff84 	movi	r7,-2
   16d28:	31ce703a 	and	r7,r6,r7
   16d2c:	21cf883a 	add	r7,r4,r7
   16d30:	39c00117 	ldw	r7,4(r7)
   16d34:	39c0004c 	andi	r7,r7,1
   16d38:	38004326 	beq	r7,zero,16e48 <_realloc_r+0x1b0>
   16d3c:	000d883a 	mov	r6,zero
   16d40:	0009883a 	mov	r4,zero
   16d44:	1080004c 	andi	r2,r2,1
   16d48:	10005a1e 	bne	r2,zero,16eb4 <_realloc_r+0x21c>
   16d4c:	85fffe17 	ldw	r23,-8(r16)
   16d50:	00bfff04 	movi	r2,-4
   16d54:	b5efc83a 	sub	r23,r22,r23
   16d58:	b9c00117 	ldw	r7,4(r23)
   16d5c:	388e703a 	and	r7,r7,r2
   16d60:	3ccf883a 	add	r7,r7,r19
   16d64:	20005226 	beq	r4,zero,16eb0 <_realloc_r+0x218>
   16d68:	31e9883a 	add	r20,r6,r7
   16d6c:	2140c726 	beq	r4,r5,1708c <_realloc_r+0x3f4>
   16d70:	a0c04f16 	blt	r20,r3,16eb0 <_realloc_r+0x218>
   16d74:	20800317 	ldw	r2,12(r4)
   16d78:	20c00217 	ldw	r3,8(r4)
   16d7c:	99bfff04 	addi	r6,r19,-4
   16d80:	01000904 	movi	r4,36
   16d84:	18800315 	stw	r2,12(r3)
   16d88:	10c00215 	stw	r3,8(r2)
   16d8c:	b8c00217 	ldw	r3,8(r23)
   16d90:	b8800317 	ldw	r2,12(r23)
   16d94:	bc800204 	addi	r18,r23,8
   16d98:	18800315 	stw	r2,12(r3)
   16d9c:	10c00215 	stw	r3,8(r2)
   16da0:	2180ed36 	bltu	r4,r6,17158 <_realloc_r+0x4c0>
   16da4:	008004c4 	movi	r2,19
   16da8:	11809b2e 	bgeu	r2,r6,17018 <_realloc_r+0x380>
   16dac:	80800017 	ldw	r2,0(r16)
   16db0:	b8800215 	stw	r2,8(r23)
   16db4:	80800117 	ldw	r2,4(r16)
   16db8:	b8800315 	stw	r2,12(r23)
   16dbc:	008006c4 	movi	r2,27
   16dc0:	1180f936 	bltu	r2,r6,171a8 <_realloc_r+0x510>
   16dc4:	b8800404 	addi	r2,r23,16
   16dc8:	80c00204 	addi	r3,r16,8
   16dcc:	00009406 	br	17020 <_realloc_r+0x388>
   16dd0:	00c00404 	movi	r3,16
   16dd4:	1823883a 	mov	r17,r3
   16dd8:	003fca06 	br	16d04 <_realloc_r+0x6c>
   16ddc:	9829883a 	mov	r20,r19
   16de0:	a447c83a 	sub	r3,r20,r17
   16de4:	010003c4 	movi	r4,15
   16de8:	1080004c 	andi	r2,r2,1
   16dec:	20c02336 	bltu	r4,r3,16e7c <_realloc_r+0x1e4>
   16df0:	1504b03a 	or	r2,r2,r20
   16df4:	b0800115 	stw	r2,4(r22)
   16df8:	b52d883a 	add	r22,r22,r20
   16dfc:	b0800117 	ldw	r2,4(r22)
   16e00:	10800054 	ori	r2,r2,1
   16e04:	b0800115 	stw	r2,4(r22)
   16e08:	a809883a 	mov	r4,r21
   16e0c:	0019ee40 	call	19ee4 <__malloc_unlock>
   16e10:	8025883a 	mov	r18,r16
   16e14:	9005883a 	mov	r2,r18
   16e18:	dfc00a17 	ldw	ra,40(sp)
   16e1c:	df000917 	ldw	fp,36(sp)
   16e20:	ddc00817 	ldw	r23,32(sp)
   16e24:	dd800717 	ldw	r22,28(sp)
   16e28:	dd400617 	ldw	r21,24(sp)
   16e2c:	dd000517 	ldw	r20,20(sp)
   16e30:	dcc00417 	ldw	r19,16(sp)
   16e34:	dc800317 	ldw	r18,12(sp)
   16e38:	dc400217 	ldw	r17,8(sp)
   16e3c:	dc000117 	ldw	r16,4(sp)
   16e40:	dec00b04 	addi	sp,sp,44
   16e44:	f800283a 	ret
   16e48:	01ffff04 	movi	r7,-4
   16e4c:	31cc703a 	and	r6,r6,r7
   16e50:	34e9883a 	add	r20,r6,r19
   16e54:	a0ffbb16 	blt	r20,r3,16d44 <_realloc_r+0xac>
   16e58:	20c00317 	ldw	r3,12(r4)
   16e5c:	21000217 	ldw	r4,8(r4)
   16e60:	20c00315 	stw	r3,12(r4)
   16e64:	19000215 	stw	r4,8(r3)
   16e68:	003fdd06 	br	16de0 <_realloc_r+0x148>
   16e6c:	00800304 	movi	r2,12
   16e70:	a8800015 	stw	r2,0(r21)
   16e74:	0025883a 	mov	r18,zero
   16e78:	003fe606 	br	16e14 <_realloc_r+0x17c>
   16e7c:	1444b03a 	or	r2,r2,r17
   16e80:	b0800115 	stw	r2,4(r22)
   16e84:	b44b883a 	add	r5,r22,r17
   16e88:	18800054 	ori	r2,r3,1
   16e8c:	28800115 	stw	r2,4(r5)
   16e90:	28c7883a 	add	r3,r5,r3
   16e94:	18800117 	ldw	r2,4(r3)
   16e98:	a809883a 	mov	r4,r21
   16e9c:	29400204 	addi	r5,r5,8
   16ea0:	10800054 	ori	r2,r2,1
   16ea4:	18800115 	stw	r2,4(r3)
   16ea8:	00145e00 	call	145e0 <_free_r>
   16eac:	003fd606 	br	16e08 <_realloc_r+0x170>
   16eb0:	38c0330e 	bge	r7,r3,16f80 <_realloc_r+0x2e8>
   16eb4:	900b883a 	mov	r5,r18
   16eb8:	a809883a 	mov	r4,r21
   16ebc:	00151780 	call	15178 <_malloc_r>
   16ec0:	1025883a 	mov	r18,r2
   16ec4:	10001626 	beq	r2,zero,16f20 <_realloc_r+0x288>
   16ec8:	80bfff17 	ldw	r2,-4(r16)
   16ecc:	00ffff84 	movi	r3,-2
   16ed0:	913ffe04 	addi	r4,r18,-8
   16ed4:	10c6703a 	and	r3,r2,r3
   16ed8:	b0c7883a 	add	r3,r22,r3
   16edc:	20c09926 	beq	r4,r3,17144 <_realloc_r+0x4ac>
   16ee0:	99bfff04 	addi	r6,r19,-4
   16ee4:	00800904 	movi	r2,36
   16ee8:	11806436 	bltu	r2,r6,1707c <_realloc_r+0x3e4>
   16eec:	00c004c4 	movi	r3,19
   16ef0:	19804036 	bltu	r3,r6,16ff4 <_realloc_r+0x35c>
   16ef4:	9005883a 	mov	r2,r18
   16ef8:	8007883a 	mov	r3,r16
   16efc:	19000017 	ldw	r4,0(r3)
   16f00:	11000015 	stw	r4,0(r2)
   16f04:	19000117 	ldw	r4,4(r3)
   16f08:	11000115 	stw	r4,4(r2)
   16f0c:	18c00217 	ldw	r3,8(r3)
   16f10:	10c00215 	stw	r3,8(r2)
   16f14:	a809883a 	mov	r4,r21
   16f18:	800b883a 	mov	r5,r16
   16f1c:	00145e00 	call	145e0 <_free_r>
   16f20:	a809883a 	mov	r4,r21
   16f24:	0019ee40 	call	19ee4 <__malloc_unlock>
   16f28:	003fba06 	br	16e14 <_realloc_r+0x17c>
   16f2c:	300b883a 	mov	r5,r6
   16f30:	dfc00a17 	ldw	ra,40(sp)
   16f34:	df000917 	ldw	fp,36(sp)
   16f38:	ddc00817 	ldw	r23,32(sp)
   16f3c:	dd800717 	ldw	r22,28(sp)
   16f40:	dd400617 	ldw	r21,24(sp)
   16f44:	dd000517 	ldw	r20,20(sp)
   16f48:	dcc00417 	ldw	r19,16(sp)
   16f4c:	dc800317 	ldw	r18,12(sp)
   16f50:	dc400217 	ldw	r17,8(sp)
   16f54:	dc000117 	ldw	r16,4(sp)
   16f58:	dec00b04 	addi	sp,sp,44
   16f5c:	00151781 	jmpi	15178 <_malloc_r>
   16f60:	29800117 	ldw	r6,4(r5)
   16f64:	013fff04 	movi	r4,-4
   16f68:	89c00404 	addi	r7,r17,16
   16f6c:	310c703a 	and	r6,r6,r4
   16f70:	34c9883a 	add	r4,r6,r19
   16f74:	21c0340e 	bge	r4,r7,17048 <_realloc_r+0x3b0>
   16f78:	2809883a 	mov	r4,r5
   16f7c:	003f7106 	br	16d44 <_realloc_r+0xac>
   16f80:	b8800317 	ldw	r2,12(r23)
   16f84:	b8c00217 	ldw	r3,8(r23)
   16f88:	99bfff04 	addi	r6,r19,-4
   16f8c:	01000904 	movi	r4,36
   16f90:	18800315 	stw	r2,12(r3)
   16f94:	10c00215 	stw	r3,8(r2)
   16f98:	bc800204 	addi	r18,r23,8
   16f9c:	21807836 	bltu	r4,r6,17180 <_realloc_r+0x4e8>
   16fa0:	008004c4 	movi	r2,19
   16fa4:	1180732e 	bgeu	r2,r6,17174 <_realloc_r+0x4dc>
   16fa8:	80800017 	ldw	r2,0(r16)
   16fac:	b8800215 	stw	r2,8(r23)
   16fb0:	80800117 	ldw	r2,4(r16)
   16fb4:	b8800315 	stw	r2,12(r23)
   16fb8:	008006c4 	movi	r2,27
   16fbc:	11808936 	bltu	r2,r6,171e4 <_realloc_r+0x54c>
   16fc0:	b8800404 	addi	r2,r23,16
   16fc4:	80c00204 	addi	r3,r16,8
   16fc8:	19000017 	ldw	r4,0(r3)
   16fcc:	9021883a 	mov	r16,r18
   16fd0:	3829883a 	mov	r20,r7
   16fd4:	11000015 	stw	r4,0(r2)
   16fd8:	19000117 	ldw	r4,4(r3)
   16fdc:	b82d883a 	mov	r22,r23
   16fe0:	11000115 	stw	r4,4(r2)
   16fe4:	18c00217 	ldw	r3,8(r3)
   16fe8:	10c00215 	stw	r3,8(r2)
   16fec:	b8800117 	ldw	r2,4(r23)
   16ff0:	003f7b06 	br	16de0 <_realloc_r+0x148>
   16ff4:	80c00017 	ldw	r3,0(r16)
   16ff8:	90c00015 	stw	r3,0(r18)
   16ffc:	80c00117 	ldw	r3,4(r16)
   17000:	90c00115 	stw	r3,4(r18)
   17004:	00c006c4 	movi	r3,27
   17008:	19804636 	bltu	r3,r6,17124 <_realloc_r+0x48c>
   1700c:	90800204 	addi	r2,r18,8
   17010:	80c00204 	addi	r3,r16,8
   17014:	003fb906 	br	16efc <_realloc_r+0x264>
   17018:	9005883a 	mov	r2,r18
   1701c:	8007883a 	mov	r3,r16
   17020:	19000017 	ldw	r4,0(r3)
   17024:	9021883a 	mov	r16,r18
   17028:	b82d883a 	mov	r22,r23
   1702c:	11000015 	stw	r4,0(r2)
   17030:	19000117 	ldw	r4,4(r3)
   17034:	11000115 	stw	r4,4(r2)
   17038:	18c00217 	ldw	r3,8(r3)
   1703c:	10c00215 	stw	r3,8(r2)
   17040:	b8800117 	ldw	r2,4(r23)
   17044:	003f6606 	br	16de0 <_realloc_r+0x148>
   17048:	2445c83a 	sub	r2,r4,r17
   1704c:	b46d883a 	add	r22,r22,r17
   17050:	10800054 	ori	r2,r2,1
   17054:	b0800115 	stw	r2,4(r22)
   17058:	80bfff17 	ldw	r2,-4(r16)
   1705c:	a809883a 	mov	r4,r21
   17060:	e5800215 	stw	r22,8(fp)
   17064:	1080004c 	andi	r2,r2,1
   17068:	88a2b03a 	or	r17,r17,r2
   1706c:	847fff15 	stw	r17,-4(r16)
   17070:	0019ee40 	call	19ee4 <__malloc_unlock>
   17074:	8025883a 	mov	r18,r16
   17078:	003f6606 	br	16e14 <_realloc_r+0x17c>
   1707c:	9009883a 	mov	r4,r18
   17080:	800b883a 	mov	r5,r16
   17084:	0015aec0 	call	15aec <memmove>
   17088:	003fa206 	br	16f14 <_realloc_r+0x27c>
   1708c:	88800404 	addi	r2,r17,16
   17090:	a0bf8716 	blt	r20,r2,16eb0 <_realloc_r+0x218>
   17094:	b8800317 	ldw	r2,12(r23)
   17098:	b8c00217 	ldw	r3,8(r23)
   1709c:	99bfff04 	addi	r6,r19,-4
   170a0:	01000904 	movi	r4,36
   170a4:	18800315 	stw	r2,12(r3)
   170a8:	10c00215 	stw	r3,8(r2)
   170ac:	bc800204 	addi	r18,r23,8
   170b0:	21806536 	bltu	r4,r6,17248 <_realloc_r+0x5b0>
   170b4:	008004c4 	movi	r2,19
   170b8:	1180592e 	bgeu	r2,r6,17220 <_realloc_r+0x588>
   170bc:	80800017 	ldw	r2,0(r16)
   170c0:	b8800215 	stw	r2,8(r23)
   170c4:	80800117 	ldw	r2,4(r16)
   170c8:	b8800315 	stw	r2,12(r23)
   170cc:	008006c4 	movi	r2,27
   170d0:	11806136 	bltu	r2,r6,17258 <_realloc_r+0x5c0>
   170d4:	b8800404 	addi	r2,r23,16
   170d8:	80c00204 	addi	r3,r16,8
   170dc:	19000017 	ldw	r4,0(r3)
   170e0:	11000015 	stw	r4,0(r2)
   170e4:	19000117 	ldw	r4,4(r3)
   170e8:	11000115 	stw	r4,4(r2)
   170ec:	18c00217 	ldw	r3,8(r3)
   170f0:	10c00215 	stw	r3,8(r2)
   170f4:	a447c83a 	sub	r3,r20,r17
   170f8:	bc45883a 	add	r2,r23,r17
   170fc:	18c00054 	ori	r3,r3,1
   17100:	10c00115 	stw	r3,4(r2)
   17104:	b8c00117 	ldw	r3,4(r23)
   17108:	e0800215 	stw	r2,8(fp)
   1710c:	a809883a 	mov	r4,r21
   17110:	1880004c 	andi	r2,r3,1
   17114:	88a2b03a 	or	r17,r17,r2
   17118:	bc400115 	stw	r17,4(r23)
   1711c:	0019ee40 	call	19ee4 <__malloc_unlock>
   17120:	003f3c06 	br	16e14 <_realloc_r+0x17c>
   17124:	80c00217 	ldw	r3,8(r16)
   17128:	90c00215 	stw	r3,8(r18)
   1712c:	80c00317 	ldw	r3,12(r16)
   17130:	90c00315 	stw	r3,12(r18)
   17134:	30802426 	beq	r6,r2,171c8 <_realloc_r+0x530>
   17138:	90800404 	addi	r2,r18,16
   1713c:	80c00404 	addi	r3,r16,16
   17140:	003f6e06 	br	16efc <_realloc_r+0x264>
   17144:	953fff17 	ldw	r20,-4(r18)
   17148:	00ffff04 	movi	r3,-4
   1714c:	a0e8703a 	and	r20,r20,r3
   17150:	a4e9883a 	add	r20,r20,r19
   17154:	003f2206 	br	16de0 <_realloc_r+0x148>
   17158:	800b883a 	mov	r5,r16
   1715c:	9009883a 	mov	r4,r18
   17160:	0015aec0 	call	15aec <memmove>
   17164:	9021883a 	mov	r16,r18
   17168:	b8800117 	ldw	r2,4(r23)
   1716c:	b82d883a 	mov	r22,r23
   17170:	003f1b06 	br	16de0 <_realloc_r+0x148>
   17174:	9005883a 	mov	r2,r18
   17178:	8007883a 	mov	r3,r16
   1717c:	003f9206 	br	16fc8 <_realloc_r+0x330>
   17180:	800b883a 	mov	r5,r16
   17184:	9009883a 	mov	r4,r18
   17188:	d9c00015 	stw	r7,0(sp)
   1718c:	0015aec0 	call	15aec <memmove>
   17190:	d9c00017 	ldw	r7,0(sp)
   17194:	9021883a 	mov	r16,r18
   17198:	b8800117 	ldw	r2,4(r23)
   1719c:	3829883a 	mov	r20,r7
   171a0:	b82d883a 	mov	r22,r23
   171a4:	003f0e06 	br	16de0 <_realloc_r+0x148>
   171a8:	80800217 	ldw	r2,8(r16)
   171ac:	b8800415 	stw	r2,16(r23)
   171b0:	80800317 	ldw	r2,12(r16)
   171b4:	b8800515 	stw	r2,20(r23)
   171b8:	31001226 	beq	r6,r4,17204 <_realloc_r+0x56c>
   171bc:	b8800604 	addi	r2,r23,24
   171c0:	80c00404 	addi	r3,r16,16
   171c4:	003f9606 	br	17020 <_realloc_r+0x388>
   171c8:	81000417 	ldw	r4,16(r16)
   171cc:	90800604 	addi	r2,r18,24
   171d0:	80c00604 	addi	r3,r16,24
   171d4:	91000415 	stw	r4,16(r18)
   171d8:	81000517 	ldw	r4,20(r16)
   171dc:	91000515 	stw	r4,20(r18)
   171e0:	003f4606 	br	16efc <_realloc_r+0x264>
   171e4:	80800217 	ldw	r2,8(r16)
   171e8:	b8800415 	stw	r2,16(r23)
   171ec:	80800317 	ldw	r2,12(r16)
   171f0:	b8800515 	stw	r2,20(r23)
   171f4:	31000d26 	beq	r6,r4,1722c <_realloc_r+0x594>
   171f8:	b8800604 	addi	r2,r23,24
   171fc:	80c00404 	addi	r3,r16,16
   17200:	003f7106 	br	16fc8 <_realloc_r+0x330>
   17204:	81000417 	ldw	r4,16(r16)
   17208:	b8800804 	addi	r2,r23,32
   1720c:	80c00604 	addi	r3,r16,24
   17210:	b9000615 	stw	r4,24(r23)
   17214:	81000517 	ldw	r4,20(r16)
   17218:	b9000715 	stw	r4,28(r23)
   1721c:	003f8006 	br	17020 <_realloc_r+0x388>
   17220:	9005883a 	mov	r2,r18
   17224:	8007883a 	mov	r3,r16
   17228:	003fac06 	br	170dc <_realloc_r+0x444>
   1722c:	81000417 	ldw	r4,16(r16)
   17230:	b8800804 	addi	r2,r23,32
   17234:	80c00604 	addi	r3,r16,24
   17238:	b9000615 	stw	r4,24(r23)
   1723c:	81000517 	ldw	r4,20(r16)
   17240:	b9000715 	stw	r4,28(r23)
   17244:	003f6006 	br	16fc8 <_realloc_r+0x330>
   17248:	9009883a 	mov	r4,r18
   1724c:	800b883a 	mov	r5,r16
   17250:	0015aec0 	call	15aec <memmove>
   17254:	003fa706 	br	170f4 <_realloc_r+0x45c>
   17258:	80800217 	ldw	r2,8(r16)
   1725c:	b8800415 	stw	r2,16(r23)
   17260:	80800317 	ldw	r2,12(r16)
   17264:	b8800515 	stw	r2,20(r23)
   17268:	31000326 	beq	r6,r4,17278 <_realloc_r+0x5e0>
   1726c:	b8800604 	addi	r2,r23,24
   17270:	80c00404 	addi	r3,r16,16
   17274:	003f9906 	br	170dc <_realloc_r+0x444>
   17278:	81000417 	ldw	r4,16(r16)
   1727c:	b8800804 	addi	r2,r23,32
   17280:	80c00604 	addi	r3,r16,24
   17284:	b9000615 	stw	r4,24(r23)
   17288:	81000517 	ldw	r4,20(r16)
   1728c:	b9000715 	stw	r4,28(r23)
   17290:	003f9206 	br	170dc <_realloc_r+0x444>

00017294 <__isinfd>:
   17294:	0105c83a 	sub	r2,zero,r4
   17298:	1108b03a 	or	r4,r2,r4
   1729c:	2004d7fa 	srli	r2,r4,31
   172a0:	00e00034 	movhi	r3,32768
   172a4:	18ffffc4 	addi	r3,r3,-1
   172a8:	28ca703a 	and	r5,r5,r3
   172ac:	1144b03a 	or	r2,r2,r5
   172b0:	00dffc34 	movhi	r3,32752
   172b4:	1885c83a 	sub	r2,r3,r2
   172b8:	0087c83a 	sub	r3,zero,r2
   172bc:	1884b03a 	or	r2,r3,r2
   172c0:	1005d7fa 	srai	r2,r2,31
   172c4:	10800044 	addi	r2,r2,1
   172c8:	f800283a 	ret

000172cc <__isnand>:
   172cc:	0105c83a 	sub	r2,zero,r4
   172d0:	1108b03a 	or	r4,r2,r4
   172d4:	2004d7fa 	srli	r2,r4,31
   172d8:	00e00034 	movhi	r3,32768
   172dc:	18ffffc4 	addi	r3,r3,-1
   172e0:	28ca703a 	and	r5,r5,r3
   172e4:	1144b03a 	or	r2,r2,r5
   172e8:	00dffc34 	movhi	r3,32752
   172ec:	1885c83a 	sub	r2,r3,r2
   172f0:	1004d7fa 	srli	r2,r2,31
   172f4:	f800283a 	ret

000172f8 <_sbrk_r>:
   172f8:	defffd04 	addi	sp,sp,-12
   172fc:	dc400115 	stw	r17,4(sp)
   17300:	dc000015 	stw	r16,0(sp)
   17304:	2023883a 	mov	r17,r4
   17308:	040000f4 	movhi	r16,3
   1730c:	84278704 	addi	r16,r16,-25060
   17310:	2809883a 	mov	r4,r5
   17314:	dfc00215 	stw	ra,8(sp)
   17318:	80000015 	stw	zero,0(r16)
   1731c:	001a0a40 	call	1a0a4 <sbrk>
   17320:	00ffffc4 	movi	r3,-1
   17324:	10c00526 	beq	r2,r3,1733c <_sbrk_r+0x44>
   17328:	dfc00217 	ldw	ra,8(sp)
   1732c:	dc400117 	ldw	r17,4(sp)
   17330:	dc000017 	ldw	r16,0(sp)
   17334:	dec00304 	addi	sp,sp,12
   17338:	f800283a 	ret
   1733c:	80c00017 	ldw	r3,0(r16)
   17340:	183ff926 	beq	r3,zero,17328 <_sbrk_r+0x30>
   17344:	88c00015 	stw	r3,0(r17)
   17348:	dfc00217 	ldw	ra,8(sp)
   1734c:	dc400117 	ldw	r17,4(sp)
   17350:	dc000017 	ldw	r16,0(sp)
   17354:	dec00304 	addi	sp,sp,12
   17358:	f800283a 	ret

0001735c <__sread>:
   1735c:	defffe04 	addi	sp,sp,-8
   17360:	dc000015 	stw	r16,0(sp)
   17364:	2821883a 	mov	r16,r5
   17368:	2940038f 	ldh	r5,14(r5)
   1736c:	dfc00115 	stw	ra,4(sp)
   17370:	00179540 	call	17954 <_read_r>
   17374:	10000716 	blt	r2,zero,17394 <__sread+0x38>
   17378:	80c01417 	ldw	r3,80(r16)
   1737c:	1887883a 	add	r3,r3,r2
   17380:	80c01415 	stw	r3,80(r16)
   17384:	dfc00117 	ldw	ra,4(sp)
   17388:	dc000017 	ldw	r16,0(sp)
   1738c:	dec00204 	addi	sp,sp,8
   17390:	f800283a 	ret
   17394:	80c0030b 	ldhu	r3,12(r16)
   17398:	18fbffcc 	andi	r3,r3,61439
   1739c:	80c0030d 	sth	r3,12(r16)
   173a0:	dfc00117 	ldw	ra,4(sp)
   173a4:	dc000017 	ldw	r16,0(sp)
   173a8:	dec00204 	addi	sp,sp,8
   173ac:	f800283a 	ret

000173b0 <__swrite>:
   173b0:	2880030b 	ldhu	r2,12(r5)
   173b4:	defffb04 	addi	sp,sp,-20
   173b8:	dcc00315 	stw	r19,12(sp)
   173bc:	10c0400c 	andi	r3,r2,256
   173c0:	18ffffcc 	andi	r3,r3,65535
   173c4:	18e0001c 	xori	r3,r3,32768
   173c8:	dc800215 	stw	r18,8(sp)
   173cc:	dc400115 	stw	r17,4(sp)
   173d0:	dc000015 	stw	r16,0(sp)
   173d4:	dfc00415 	stw	ra,16(sp)
   173d8:	18e00004 	addi	r3,r3,-32768
   173dc:	2821883a 	mov	r16,r5
   173e0:	2027883a 	mov	r19,r4
   173e4:	3025883a 	mov	r18,r6
   173e8:	3823883a 	mov	r17,r7
   173ec:	18000526 	beq	r3,zero,17404 <__swrite+0x54>
   173f0:	2940038f 	ldh	r5,14(r5)
   173f4:	000d883a 	mov	r6,zero
   173f8:	01c00084 	movi	r7,2
   173fc:	00178e80 	call	178e8 <_lseek_r>
   17400:	8080030b 	ldhu	r2,12(r16)
   17404:	8140038f 	ldh	r5,14(r16)
   17408:	10bbffcc 	andi	r2,r2,61439
   1740c:	9809883a 	mov	r4,r19
   17410:	900d883a 	mov	r6,r18
   17414:	880f883a 	mov	r7,r17
   17418:	8080030d 	sth	r2,12(r16)
   1741c:	dfc00417 	ldw	ra,16(sp)
   17420:	dcc00317 	ldw	r19,12(sp)
   17424:	dc800217 	ldw	r18,8(sp)
   17428:	dc400117 	ldw	r17,4(sp)
   1742c:	dc000017 	ldw	r16,0(sp)
   17430:	dec00504 	addi	sp,sp,20
   17434:	00175401 	jmpi	17540 <_write_r>

00017438 <__sseek>:
   17438:	defffe04 	addi	sp,sp,-8
   1743c:	dc000015 	stw	r16,0(sp)
   17440:	2821883a 	mov	r16,r5
   17444:	2940038f 	ldh	r5,14(r5)
   17448:	dfc00115 	stw	ra,4(sp)
   1744c:	00178e80 	call	178e8 <_lseek_r>
   17450:	00ffffc4 	movi	r3,-1
   17454:	10c00826 	beq	r2,r3,17478 <__sseek+0x40>
   17458:	80c0030b 	ldhu	r3,12(r16)
   1745c:	80801415 	stw	r2,80(r16)
   17460:	18c40014 	ori	r3,r3,4096
   17464:	80c0030d 	sth	r3,12(r16)
   17468:	dfc00117 	ldw	ra,4(sp)
   1746c:	dc000017 	ldw	r16,0(sp)
   17470:	dec00204 	addi	sp,sp,8
   17474:	f800283a 	ret
   17478:	80c0030b 	ldhu	r3,12(r16)
   1747c:	18fbffcc 	andi	r3,r3,61439
   17480:	80c0030d 	sth	r3,12(r16)
   17484:	dfc00117 	ldw	ra,4(sp)
   17488:	dc000017 	ldw	r16,0(sp)
   1748c:	dec00204 	addi	sp,sp,8
   17490:	f800283a 	ret

00017494 <__sclose>:
   17494:	2940038f 	ldh	r5,14(r5)
   17498:	00176681 	jmpi	17668 <_close_r>

0001749c <strcmp>:
   1749c:	2904b03a 	or	r2,r5,r4
   174a0:	108000cc 	andi	r2,r2,3
   174a4:	1000171e 	bne	r2,zero,17504 <strcmp+0x68>
   174a8:	20800017 	ldw	r2,0(r4)
   174ac:	28c00017 	ldw	r3,0(r5)
   174b0:	10c0141e 	bne	r2,r3,17504 <strcmp+0x68>
   174b4:	027fbff4 	movhi	r9,65279
   174b8:	4a7fbfc4 	addi	r9,r9,-257
   174bc:	1247883a 	add	r3,r2,r9
   174c0:	0084303a 	nor	r2,zero,r2
   174c4:	1884703a 	and	r2,r3,r2
   174c8:	02202074 	movhi	r8,32897
   174cc:	42202004 	addi	r8,r8,-32640
   174d0:	1204703a 	and	r2,r2,r8
   174d4:	10000226 	beq	r2,zero,174e0 <strcmp+0x44>
   174d8:	00001706 	br	17538 <strcmp+0x9c>
   174dc:	3000161e 	bne	r6,zero,17538 <strcmp+0x9c>
   174e0:	21000104 	addi	r4,r4,4
   174e4:	20800017 	ldw	r2,0(r4)
   174e8:	29400104 	addi	r5,r5,4
   174ec:	28c00017 	ldw	r3,0(r5)
   174f0:	124f883a 	add	r7,r2,r9
   174f4:	008c303a 	nor	r6,zero,r2
   174f8:	398c703a 	and	r6,r7,r6
   174fc:	320c703a 	and	r6,r6,r8
   17500:	10fff626 	beq	r2,r3,174dc <strcmp+0x40>
   17504:	20800007 	ldb	r2,0(r4)
   17508:	1000051e 	bne	r2,zero,17520 <strcmp+0x84>
   1750c:	00000606 	br	17528 <strcmp+0x8c>
   17510:	21000044 	addi	r4,r4,1
   17514:	20800007 	ldb	r2,0(r4)
   17518:	29400044 	addi	r5,r5,1
   1751c:	10000226 	beq	r2,zero,17528 <strcmp+0x8c>
   17520:	28c00007 	ldb	r3,0(r5)
   17524:	10fffa26 	beq	r2,r3,17510 <strcmp+0x74>
   17528:	20c00003 	ldbu	r3,0(r4)
   1752c:	28800003 	ldbu	r2,0(r5)
   17530:	1885c83a 	sub	r2,r3,r2
   17534:	f800283a 	ret
   17538:	0005883a 	mov	r2,zero
   1753c:	f800283a 	ret

00017540 <_write_r>:
   17540:	defffd04 	addi	sp,sp,-12
   17544:	dc400115 	stw	r17,4(sp)
   17548:	dc000015 	stw	r16,0(sp)
   1754c:	2023883a 	mov	r17,r4
   17550:	040000f4 	movhi	r16,3
   17554:	84278704 	addi	r16,r16,-25060
   17558:	2809883a 	mov	r4,r5
   1755c:	300b883a 	mov	r5,r6
   17560:	380d883a 	mov	r6,r7
   17564:	dfc00215 	stw	ra,8(sp)
   17568:	80000015 	stw	zero,0(r16)
   1756c:	001a1a40 	call	1a1a4 <write>
   17570:	00ffffc4 	movi	r3,-1
   17574:	10c00526 	beq	r2,r3,1758c <_write_r+0x4c>
   17578:	dfc00217 	ldw	ra,8(sp)
   1757c:	dc400117 	ldw	r17,4(sp)
   17580:	dc000017 	ldw	r16,0(sp)
   17584:	dec00304 	addi	sp,sp,12
   17588:	f800283a 	ret
   1758c:	80c00017 	ldw	r3,0(r16)
   17590:	183ff926 	beq	r3,zero,17578 <_write_r+0x38>
   17594:	88c00015 	stw	r3,0(r17)
   17598:	dfc00217 	ldw	ra,8(sp)
   1759c:	dc400117 	ldw	r17,4(sp)
   175a0:	dc000017 	ldw	r16,0(sp)
   175a4:	dec00304 	addi	sp,sp,12
   175a8:	f800283a 	ret

000175ac <_calloc_r>:
   175ac:	314b383a 	mul	r5,r6,r5
   175b0:	defffe04 	addi	sp,sp,-8
   175b4:	dc000015 	stw	r16,0(sp)
   175b8:	dfc00115 	stw	ra,4(sp)
   175bc:	00151780 	call	15178 <_malloc_r>
   175c0:	1021883a 	mov	r16,r2
   175c4:	10000c26 	beq	r2,zero,175f8 <_calloc_r+0x4c>
   175c8:	11bfff17 	ldw	r6,-4(r2)
   175cc:	00ffff04 	movi	r3,-4
   175d0:	00800904 	movi	r2,36
   175d4:	30cc703a 	and	r6,r6,r3
   175d8:	30cd883a 	add	r6,r6,r3
   175dc:	11801436 	bltu	r2,r6,17630 <_calloc_r+0x84>
   175e0:	00c004c4 	movi	r3,19
   175e4:	19800936 	bltu	r3,r6,1760c <_calloc_r+0x60>
   175e8:	8005883a 	mov	r2,r16
   175ec:	10000015 	stw	zero,0(r2)
   175f0:	10000115 	stw	zero,4(r2)
   175f4:	10000215 	stw	zero,8(r2)
   175f8:	8005883a 	mov	r2,r16
   175fc:	dfc00117 	ldw	ra,4(sp)
   17600:	dc000017 	ldw	r16,0(sp)
   17604:	dec00204 	addi	sp,sp,8
   17608:	f800283a 	ret
   1760c:	80000015 	stw	zero,0(r16)
   17610:	80000115 	stw	zero,4(r16)
   17614:	00c006c4 	movi	r3,27
   17618:	19800d2e 	bgeu	r3,r6,17650 <_calloc_r+0xa4>
   1761c:	80000215 	stw	zero,8(r16)
   17620:	80000315 	stw	zero,12(r16)
   17624:	30800c26 	beq	r6,r2,17658 <_calloc_r+0xac>
   17628:	80800404 	addi	r2,r16,16
   1762c:	003fef06 	br	175ec <_calloc_r+0x40>
   17630:	8009883a 	mov	r4,r16
   17634:	000b883a 	mov	r5,zero
   17638:	0015c140 	call	15c14 <memset>
   1763c:	8005883a 	mov	r2,r16
   17640:	dfc00117 	ldw	ra,4(sp)
   17644:	dc000017 	ldw	r16,0(sp)
   17648:	dec00204 	addi	sp,sp,8
   1764c:	f800283a 	ret
   17650:	80800204 	addi	r2,r16,8
   17654:	003fe506 	br	175ec <_calloc_r+0x40>
   17658:	80000415 	stw	zero,16(r16)
   1765c:	80000515 	stw	zero,20(r16)
   17660:	80800604 	addi	r2,r16,24
   17664:	003fe106 	br	175ec <_calloc_r+0x40>

00017668 <_close_r>:
   17668:	defffd04 	addi	sp,sp,-12
   1766c:	dc400115 	stw	r17,4(sp)
   17670:	dc000015 	stw	r16,0(sp)
   17674:	2023883a 	mov	r17,r4
   17678:	040000f4 	movhi	r16,3
   1767c:	84278704 	addi	r16,r16,-25060
   17680:	2809883a 	mov	r4,r5
   17684:	dfc00215 	stw	ra,8(sp)
   17688:	80000015 	stw	zero,0(r16)
   1768c:	00199600 	call	19960 <close>
   17690:	00ffffc4 	movi	r3,-1
   17694:	10c00526 	beq	r2,r3,176ac <_close_r+0x44>
   17698:	dfc00217 	ldw	ra,8(sp)
   1769c:	dc400117 	ldw	r17,4(sp)
   176a0:	dc000017 	ldw	r16,0(sp)
   176a4:	dec00304 	addi	sp,sp,12
   176a8:	f800283a 	ret
   176ac:	80c00017 	ldw	r3,0(r16)
   176b0:	183ff926 	beq	r3,zero,17698 <_close_r+0x30>
   176b4:	88c00015 	stw	r3,0(r17)
   176b8:	dfc00217 	ldw	ra,8(sp)
   176bc:	dc400117 	ldw	r17,4(sp)
   176c0:	dc000017 	ldw	r16,0(sp)
   176c4:	dec00304 	addi	sp,sp,12
   176c8:	f800283a 	ret

000176cc <_fclose_r>:
   176cc:	defffc04 	addi	sp,sp,-16
   176d0:	dc400115 	stw	r17,4(sp)
   176d4:	dc000015 	stw	r16,0(sp)
   176d8:	dfc00315 	stw	ra,12(sp)
   176dc:	dc800215 	stw	r18,8(sp)
   176e0:	2821883a 	mov	r16,r5
   176e4:	2023883a 	mov	r17,r4
   176e8:	28003426 	beq	r5,zero,177bc <_fclose_r+0xf0>
   176ec:	00144640 	call	14464 <__sfp_lock_acquire>
   176f0:	88000226 	beq	r17,zero,176fc <_fclose_r+0x30>
   176f4:	88800e17 	ldw	r2,56(r17)
   176f8:	10003826 	beq	r2,zero,177dc <_fclose_r+0x110>
   176fc:	8080030f 	ldh	r2,12(r16)
   17700:	10002526 	beq	r2,zero,17798 <_fclose_r+0xcc>
   17704:	8809883a 	mov	r4,r17
   17708:	800b883a 	mov	r5,r16
   1770c:	0013fb40 	call	13fb4 <_fflush_r>
   17710:	1025883a 	mov	r18,r2
   17714:	80800b17 	ldw	r2,44(r16)
   17718:	10000426 	beq	r2,zero,1772c <_fclose_r+0x60>
   1771c:	81400717 	ldw	r5,28(r16)
   17720:	8809883a 	mov	r4,r17
   17724:	103ee83a 	callr	r2
   17728:	10003516 	blt	r2,zero,17800 <_fclose_r+0x134>
   1772c:	8080030b 	ldhu	r2,12(r16)
   17730:	1080200c 	andi	r2,r2,128
   17734:	10bfffcc 	andi	r2,r2,65535
   17738:	10a0001c 	xori	r2,r2,32768
   1773c:	10a00004 	addi	r2,r2,-32768
   17740:	10002b1e 	bne	r2,zero,177f0 <_fclose_r+0x124>
   17744:	81400c17 	ldw	r5,48(r16)
   17748:	28000526 	beq	r5,zero,17760 <_fclose_r+0x94>
   1774c:	80801004 	addi	r2,r16,64
   17750:	28800226 	beq	r5,r2,1775c <_fclose_r+0x90>
   17754:	8809883a 	mov	r4,r17
   17758:	00145e00 	call	145e0 <_free_r>
   1775c:	80000c15 	stw	zero,48(r16)
   17760:	81401117 	ldw	r5,68(r16)
   17764:	28000326 	beq	r5,zero,17774 <_fclose_r+0xa8>
   17768:	8809883a 	mov	r4,r17
   1776c:	00145e00 	call	145e0 <_free_r>
   17770:	80001115 	stw	zero,68(r16)
   17774:	8000030d 	sth	zero,12(r16)
   17778:	00144680 	call	14468 <__sfp_lock_release>
   1777c:	9005883a 	mov	r2,r18
   17780:	dfc00317 	ldw	ra,12(sp)
   17784:	dc800217 	ldw	r18,8(sp)
   17788:	dc400117 	ldw	r17,4(sp)
   1778c:	dc000017 	ldw	r16,0(sp)
   17790:	dec00404 	addi	sp,sp,16
   17794:	f800283a 	ret
   17798:	00144680 	call	14468 <__sfp_lock_release>
   1779c:	0025883a 	mov	r18,zero
   177a0:	9005883a 	mov	r2,r18
   177a4:	dfc00317 	ldw	ra,12(sp)
   177a8:	dc800217 	ldw	r18,8(sp)
   177ac:	dc400117 	ldw	r17,4(sp)
   177b0:	dc000017 	ldw	r16,0(sp)
   177b4:	dec00404 	addi	sp,sp,16
   177b8:	f800283a 	ret
   177bc:	0025883a 	mov	r18,zero
   177c0:	9005883a 	mov	r2,r18
   177c4:	dfc00317 	ldw	ra,12(sp)
   177c8:	dc800217 	ldw	r18,8(sp)
   177cc:	dc400117 	ldw	r17,4(sp)
   177d0:	dc000017 	ldw	r16,0(sp)
   177d4:	dec00404 	addi	sp,sp,16
   177d8:	f800283a 	ret
   177dc:	8809883a 	mov	r4,r17
   177e0:	001425c0 	call	1425c <__sinit>
   177e4:	8080030f 	ldh	r2,12(r16)
   177e8:	103fc61e 	bne	r2,zero,17704 <_fclose_r+0x38>
   177ec:	003fea06 	br	17798 <_fclose_r+0xcc>
   177f0:	81400417 	ldw	r5,16(r16)
   177f4:	8809883a 	mov	r4,r17
   177f8:	00145e00 	call	145e0 <_free_r>
   177fc:	003fd106 	br	17744 <_fclose_r+0x78>
   17800:	04bfffc4 	movi	r18,-1
   17804:	003fc906 	br	1772c <_fclose_r+0x60>

00017808 <fclose>:
   17808:	008000f4 	movhi	r2,3
   1780c:	10a76e04 	addi	r2,r2,-25160
   17810:	200b883a 	mov	r5,r4
   17814:	11000017 	ldw	r4,0(r2)
   17818:	00176cc1 	jmpi	176cc <_fclose_r>

0001781c <_fstat_r>:
   1781c:	defffd04 	addi	sp,sp,-12
   17820:	dc400115 	stw	r17,4(sp)
   17824:	dc000015 	stw	r16,0(sp)
   17828:	2023883a 	mov	r17,r4
   1782c:	040000f4 	movhi	r16,3
   17830:	84278704 	addi	r16,r16,-25060
   17834:	2809883a 	mov	r4,r5
   17838:	300b883a 	mov	r5,r6
   1783c:	dfc00215 	stw	ra,8(sp)
   17840:	80000015 	stw	zero,0(r16)
   17844:	0019aa40 	call	19aa4 <fstat>
   17848:	00ffffc4 	movi	r3,-1
   1784c:	10c00526 	beq	r2,r3,17864 <_fstat_r+0x48>
   17850:	dfc00217 	ldw	ra,8(sp)
   17854:	dc400117 	ldw	r17,4(sp)
   17858:	dc000017 	ldw	r16,0(sp)
   1785c:	dec00304 	addi	sp,sp,12
   17860:	f800283a 	ret
   17864:	80c00017 	ldw	r3,0(r16)
   17868:	183ff926 	beq	r3,zero,17850 <_fstat_r+0x34>
   1786c:	88c00015 	stw	r3,0(r17)
   17870:	dfc00217 	ldw	ra,8(sp)
   17874:	dc400117 	ldw	r17,4(sp)
   17878:	dc000017 	ldw	r16,0(sp)
   1787c:	dec00304 	addi	sp,sp,12
   17880:	f800283a 	ret

00017884 <_isatty_r>:
   17884:	defffd04 	addi	sp,sp,-12
   17888:	dc400115 	stw	r17,4(sp)
   1788c:	dc000015 	stw	r16,0(sp)
   17890:	2023883a 	mov	r17,r4
   17894:	040000f4 	movhi	r16,3
   17898:	84278704 	addi	r16,r16,-25060
   1789c:	2809883a 	mov	r4,r5
   178a0:	dfc00215 	stw	ra,8(sp)
   178a4:	80000015 	stw	zero,0(r16)
   178a8:	0019ba00 	call	19ba0 <isatty>
   178ac:	00ffffc4 	movi	r3,-1
   178b0:	10c00526 	beq	r2,r3,178c8 <_isatty_r+0x44>
   178b4:	dfc00217 	ldw	ra,8(sp)
   178b8:	dc400117 	ldw	r17,4(sp)
   178bc:	dc000017 	ldw	r16,0(sp)
   178c0:	dec00304 	addi	sp,sp,12
   178c4:	f800283a 	ret
   178c8:	80c00017 	ldw	r3,0(r16)
   178cc:	183ff926 	beq	r3,zero,178b4 <_isatty_r+0x30>
   178d0:	88c00015 	stw	r3,0(r17)
   178d4:	dfc00217 	ldw	ra,8(sp)
   178d8:	dc400117 	ldw	r17,4(sp)
   178dc:	dc000017 	ldw	r16,0(sp)
   178e0:	dec00304 	addi	sp,sp,12
   178e4:	f800283a 	ret

000178e8 <_lseek_r>:
   178e8:	defffd04 	addi	sp,sp,-12
   178ec:	dc400115 	stw	r17,4(sp)
   178f0:	dc000015 	stw	r16,0(sp)
   178f4:	2023883a 	mov	r17,r4
   178f8:	040000f4 	movhi	r16,3
   178fc:	84278704 	addi	r16,r16,-25060
   17900:	2809883a 	mov	r4,r5
   17904:	300b883a 	mov	r5,r6
   17908:	380d883a 	mov	r6,r7
   1790c:	dfc00215 	stw	ra,8(sp)
   17910:	80000015 	stw	zero,0(r16)
   17914:	0019d7c0 	call	19d7c <lseek>
   17918:	00ffffc4 	movi	r3,-1
   1791c:	10c00526 	beq	r2,r3,17934 <_lseek_r+0x4c>
   17920:	dfc00217 	ldw	ra,8(sp)
   17924:	dc400117 	ldw	r17,4(sp)
   17928:	dc000017 	ldw	r16,0(sp)
   1792c:	dec00304 	addi	sp,sp,12
   17930:	f800283a 	ret
   17934:	80c00017 	ldw	r3,0(r16)
   17938:	183ff926 	beq	r3,zero,17920 <_lseek_r+0x38>
   1793c:	88c00015 	stw	r3,0(r17)
   17940:	dfc00217 	ldw	ra,8(sp)
   17944:	dc400117 	ldw	r17,4(sp)
   17948:	dc000017 	ldw	r16,0(sp)
   1794c:	dec00304 	addi	sp,sp,12
   17950:	f800283a 	ret

00017954 <_read_r>:
   17954:	defffd04 	addi	sp,sp,-12
   17958:	dc400115 	stw	r17,4(sp)
   1795c:	dc000015 	stw	r16,0(sp)
   17960:	2023883a 	mov	r17,r4
   17964:	040000f4 	movhi	r16,3
   17968:	84278704 	addi	r16,r16,-25060
   1796c:	2809883a 	mov	r4,r5
   17970:	300b883a 	mov	r5,r6
   17974:	380d883a 	mov	r6,r7
   17978:	dfc00215 	stw	ra,8(sp)
   1797c:	80000015 	stw	zero,0(r16)
   17980:	0019f540 	call	19f54 <read>
   17984:	00ffffc4 	movi	r3,-1
   17988:	10c00526 	beq	r2,r3,179a0 <_read_r+0x4c>
   1798c:	dfc00217 	ldw	ra,8(sp)
   17990:	dc400117 	ldw	r17,4(sp)
   17994:	dc000017 	ldw	r16,0(sp)
   17998:	dec00304 	addi	sp,sp,12
   1799c:	f800283a 	ret
   179a0:	80c00017 	ldw	r3,0(r16)
   179a4:	183ff926 	beq	r3,zero,1798c <_read_r+0x38>
   179a8:	88c00015 	stw	r3,0(r17)
   179ac:	dfc00217 	ldw	ra,8(sp)
   179b0:	dc400117 	ldw	r17,4(sp)
   179b4:	dc000017 	ldw	r16,0(sp)
   179b8:	dec00304 	addi	sp,sp,12
   179bc:	f800283a 	ret

000179c0 <__udivdi3>:
   179c0:	defff504 	addi	sp,sp,-44
   179c4:	dd000515 	stw	r20,20(sp)
   179c8:	dcc00415 	stw	r19,16(sp)
   179cc:	dc800315 	stw	r18,12(sp)
   179d0:	dc400215 	stw	r17,8(sp)
   179d4:	dc000115 	stw	r16,4(sp)
   179d8:	dfc00a15 	stw	ra,40(sp)
   179dc:	df000915 	stw	fp,36(sp)
   179e0:	ddc00815 	stw	r23,32(sp)
   179e4:	dd800715 	stw	r22,28(sp)
   179e8:	dd400615 	stw	r21,24(sp)
   179ec:	2025883a 	mov	r18,r4
   179f0:	2823883a 	mov	r17,r5
   179f4:	3021883a 	mov	r16,r6
   179f8:	2027883a 	mov	r19,r4
   179fc:	2829883a 	mov	r20,r5
   17a00:	3800401e 	bne	r7,zero,17b04 <__udivdi3+0x144>
   17a04:	2980602e 	bgeu	r5,r6,17b88 <__udivdi3+0x1c8>
   17a08:	00bfffd4 	movui	r2,65535
   17a0c:	1180aa36 	bltu	r2,r6,17cb8 <__udivdi3+0x2f8>
   17a10:	00803fc4 	movi	r2,255
   17a14:	11814436 	bltu	r2,r6,17f28 <__udivdi3+0x568>
   17a18:	0005883a 	mov	r2,zero
   17a1c:	0007883a 	mov	r3,zero
   17a20:	3084d83a 	srl	r2,r6,r2
   17a24:	010000f4 	movhi	r4,3
   17a28:	21209904 	addi	r4,r4,-32156
   17a2c:	2085883a 	add	r2,r4,r2
   17a30:	10800003 	ldbu	r2,0(r2)
   17a34:	10c7883a 	add	r3,r2,r3
   17a38:	00800804 	movi	r2,32
   17a3c:	10c5c83a 	sub	r2,r2,r3
   17a40:	10000526 	beq	r2,zero,17a58 <__udivdi3+0x98>
   17a44:	88a2983a 	sll	r17,r17,r2
   17a48:	90c6d83a 	srl	r3,r18,r3
   17a4c:	30a0983a 	sll	r16,r6,r2
   17a50:	90a6983a 	sll	r19,r18,r2
   17a54:	88e8b03a 	or	r20,r17,r3
   17a58:	8022d43a 	srli	r17,r16,16
   17a5c:	a009883a 	mov	r4,r20
   17a60:	857fffcc 	andi	r21,r16,65535
   17a64:	880b883a 	mov	r5,r17
   17a68:	001937c0 	call	1937c <__umodsi3>
   17a6c:	a009883a 	mov	r4,r20
   17a70:	880b883a 	mov	r5,r17
   17a74:	102d883a 	mov	r22,r2
   17a78:	00193740 	call	19374 <__udivsi3>
   17a7c:	b02c943a 	slli	r22,r22,16
   17a80:	9806d43a 	srli	r3,r19,16
   17a84:	1549383a 	mul	r4,r2,r21
   17a88:	1025883a 	mov	r18,r2
   17a8c:	b0c6b03a 	or	r3,r22,r3
   17a90:	1900052e 	bgeu	r3,r4,17aa8 <__udivdi3+0xe8>
   17a94:	1c07883a 	add	r3,r3,r16
   17a98:	10bfffc4 	addi	r2,r2,-1
   17a9c:	1c000136 	bltu	r3,r16,17aa4 <__udivdi3+0xe4>
   17aa0:	19013636 	bltu	r3,r4,17f7c <__udivdi3+0x5bc>
   17aa4:	1025883a 	mov	r18,r2
   17aa8:	1929c83a 	sub	r20,r3,r4
   17aac:	a009883a 	mov	r4,r20
   17ab0:	880b883a 	mov	r5,r17
   17ab4:	001937c0 	call	1937c <__umodsi3>
   17ab8:	102d883a 	mov	r22,r2
   17abc:	a009883a 	mov	r4,r20
   17ac0:	880b883a 	mov	r5,r17
   17ac4:	00193740 	call	19374 <__udivsi3>
   17ac8:	b02c943a 	slli	r22,r22,16
   17acc:	156b383a 	mul	r21,r2,r21
   17ad0:	9cffffcc 	andi	r19,r19,65535
   17ad4:	b4e6b03a 	or	r19,r22,r19
   17ad8:	1009883a 	mov	r4,r2
   17adc:	9d40052e 	bgeu	r19,r21,17af4 <__udivdi3+0x134>
   17ae0:	9c27883a 	add	r19,r19,r16
   17ae4:	10bfffc4 	addi	r2,r2,-1
   17ae8:	9c00f736 	bltu	r19,r16,17ec8 <__udivdi3+0x508>
   17aec:	9d40f62e 	bgeu	r19,r21,17ec8 <__udivdi3+0x508>
   17af0:	213fff84 	addi	r4,r4,-2
   17af4:	9004943a 	slli	r2,r18,16
   17af8:	0007883a 	mov	r3,zero
   17afc:	2084b03a 	or	r2,r4,r2
   17b00:	00001506 	br	17b58 <__udivdi3+0x198>
   17b04:	29c06536 	bltu	r5,r7,17c9c <__udivdi3+0x2dc>
   17b08:	00bfffd4 	movui	r2,65535
   17b0c:	11c0652e 	bgeu	r2,r7,17ca4 <__udivdi3+0x2e4>
   17b10:	00804034 	movhi	r2,256
   17b14:	10bfffc4 	addi	r2,r2,-1
   17b18:	11c0f736 	bltu	r2,r7,17ef8 <__udivdi3+0x538>
   17b1c:	00c00404 	movi	r3,16
   17b20:	180b883a 	mov	r5,r3
   17b24:	38c6d83a 	srl	r3,r7,r3
   17b28:	010000f4 	movhi	r4,3
   17b2c:	21209904 	addi	r4,r4,-32156
   17b30:	04000804 	movi	r16,32
   17b34:	20c7883a 	add	r3,r4,r3
   17b38:	18800003 	ldbu	r2,0(r3)
   17b3c:	1145883a 	add	r2,r2,r5
   17b40:	80a1c83a 	sub	r16,r16,r2
   17b44:	8000691e 	bne	r16,zero,17cec <__udivdi3+0x32c>
   17b48:	0007883a 	mov	r3,zero
   17b4c:	3c406536 	bltu	r7,r17,17ce4 <__udivdi3+0x324>
   17b50:	9180642e 	bgeu	r18,r6,17ce4 <__udivdi3+0x324>
   17b54:	0005883a 	mov	r2,zero
   17b58:	dfc00a17 	ldw	ra,40(sp)
   17b5c:	df000917 	ldw	fp,36(sp)
   17b60:	ddc00817 	ldw	r23,32(sp)
   17b64:	dd800717 	ldw	r22,28(sp)
   17b68:	dd400617 	ldw	r21,24(sp)
   17b6c:	dd000517 	ldw	r20,20(sp)
   17b70:	dcc00417 	ldw	r19,16(sp)
   17b74:	dc800317 	ldw	r18,12(sp)
   17b78:	dc400217 	ldw	r17,8(sp)
   17b7c:	dc000117 	ldw	r16,4(sp)
   17b80:	dec00b04 	addi	sp,sp,44
   17b84:	f800283a 	ret
   17b88:	3000041e 	bne	r6,zero,17b9c <__udivdi3+0x1dc>
   17b8c:	01000044 	movi	r4,1
   17b90:	000b883a 	mov	r5,zero
   17b94:	00193740 	call	19374 <__udivsi3>
   17b98:	1021883a 	mov	r16,r2
   17b9c:	00bfffd4 	movui	r2,65535
   17ba0:	14004b2e 	bgeu	r2,r16,17cd0 <__udivdi3+0x310>
   17ba4:	00804034 	movhi	r2,256
   17ba8:	10bfffc4 	addi	r2,r2,-1
   17bac:	1400d836 	bltu	r2,r16,17f10 <__udivdi3+0x550>
   17bb0:	00800404 	movi	r2,16
   17bb4:	1007883a 	mov	r3,r2
   17bb8:	8084d83a 	srl	r2,r16,r2
   17bbc:	010000f4 	movhi	r4,3
   17bc0:	21209904 	addi	r4,r4,-32156
   17bc4:	2085883a 	add	r2,r4,r2
   17bc8:	10800003 	ldbu	r2,0(r2)
   17bcc:	10c7883a 	add	r3,r2,r3
   17bd0:	00800804 	movi	r2,32
   17bd4:	10c5c83a 	sub	r2,r2,r3
   17bd8:	1000891e 	bne	r2,zero,17e00 <__udivdi3+0x440>
   17bdc:	8028d43a 	srli	r20,r16,16
   17be0:	8c23c83a 	sub	r17,r17,r16
   17be4:	84bfffcc 	andi	r18,r16,65535
   17be8:	00c00044 	movi	r3,1
   17bec:	8809883a 	mov	r4,r17
   17bf0:	a00b883a 	mov	r5,r20
   17bf4:	d8c00015 	stw	r3,0(sp)
   17bf8:	001937c0 	call	1937c <__umodsi3>
   17bfc:	8809883a 	mov	r4,r17
   17c00:	a00b883a 	mov	r5,r20
   17c04:	102b883a 	mov	r21,r2
   17c08:	00193740 	call	19374 <__udivsi3>
   17c0c:	a82a943a 	slli	r21,r21,16
   17c10:	9808d43a 	srli	r4,r19,16
   17c14:	148b383a 	mul	r5,r2,r18
   17c18:	1023883a 	mov	r17,r2
   17c1c:	a908b03a 	or	r4,r21,r4
   17c20:	d8c00017 	ldw	r3,0(sp)
   17c24:	2140052e 	bgeu	r4,r5,17c3c <__udivdi3+0x27c>
   17c28:	2409883a 	add	r4,r4,r16
   17c2c:	10bfffc4 	addi	r2,r2,-1
   17c30:	24000136 	bltu	r4,r16,17c38 <__udivdi3+0x278>
   17c34:	2140ce36 	bltu	r4,r5,17f70 <__udivdi3+0x5b0>
   17c38:	1023883a 	mov	r17,r2
   17c3c:	216bc83a 	sub	r21,r4,r5
   17c40:	a809883a 	mov	r4,r21
   17c44:	a00b883a 	mov	r5,r20
   17c48:	d8c00015 	stw	r3,0(sp)
   17c4c:	001937c0 	call	1937c <__umodsi3>
   17c50:	102d883a 	mov	r22,r2
   17c54:	a809883a 	mov	r4,r21
   17c58:	a00b883a 	mov	r5,r20
   17c5c:	00193740 	call	19374 <__udivsi3>
   17c60:	b02c943a 	slli	r22,r22,16
   17c64:	14a5383a 	mul	r18,r2,r18
   17c68:	9cffffcc 	andi	r19,r19,65535
   17c6c:	b4e6b03a 	or	r19,r22,r19
   17c70:	1009883a 	mov	r4,r2
   17c74:	d8c00017 	ldw	r3,0(sp)
   17c78:	9c80052e 	bgeu	r19,r18,17c90 <__udivdi3+0x2d0>
   17c7c:	9c27883a 	add	r19,r19,r16
   17c80:	10bfffc4 	addi	r2,r2,-1
   17c84:	9c009236 	bltu	r19,r16,17ed0 <__udivdi3+0x510>
   17c88:	9c80912e 	bgeu	r19,r18,17ed0 <__udivdi3+0x510>
   17c8c:	213fff84 	addi	r4,r4,-2
   17c90:	8804943a 	slli	r2,r17,16
   17c94:	2084b03a 	or	r2,r4,r2
   17c98:	003faf06 	br	17b58 <__udivdi3+0x198>
   17c9c:	0007883a 	mov	r3,zero
   17ca0:	003fac06 	br	17b54 <__udivdi3+0x194>
   17ca4:	00803fc4 	movi	r2,255
   17ca8:	11c09636 	bltu	r2,r7,17f04 <__udivdi3+0x544>
   17cac:	0007883a 	mov	r3,zero
   17cb0:	000b883a 	mov	r5,zero
   17cb4:	003f9b06 	br	17b24 <__udivdi3+0x164>
   17cb8:	00804034 	movhi	r2,256
   17cbc:	10bfffc4 	addi	r2,r2,-1
   17cc0:	11809636 	bltu	r2,r6,17f1c <__udivdi3+0x55c>
   17cc4:	00800404 	movi	r2,16
   17cc8:	1007883a 	mov	r3,r2
   17ccc:	003f5406 	br	17a20 <__udivdi3+0x60>
   17cd0:	00803fc4 	movi	r2,255
   17cd4:	14009736 	bltu	r2,r16,17f34 <__udivdi3+0x574>
   17cd8:	0005883a 	mov	r2,zero
   17cdc:	0007883a 	mov	r3,zero
   17ce0:	003fb506 	br	17bb8 <__udivdi3+0x1f8>
   17ce4:	00800044 	movi	r2,1
   17ce8:	003f9b06 	br	17b58 <__udivdi3+0x198>
   17cec:	3086d83a 	srl	r3,r6,r2
   17cf0:	3c0e983a 	sll	r7,r7,r16
   17cf4:	88aad83a 	srl	r21,r17,r2
   17cf8:	9084d83a 	srl	r2,r18,r2
   17cfc:	38e6b03a 	or	r19,r7,r3
   17d00:	9828d43a 	srli	r20,r19,16
   17d04:	8c22983a 	sll	r17,r17,r16
   17d08:	a809883a 	mov	r4,r21
   17d0c:	a00b883a 	mov	r5,r20
   17d10:	342c983a 	sll	r22,r6,r16
   17d14:	88a2b03a 	or	r17,r17,r2
   17d18:	001937c0 	call	1937c <__umodsi3>
   17d1c:	a809883a 	mov	r4,r21
   17d20:	a00b883a 	mov	r5,r20
   17d24:	1039883a 	mov	fp,r2
   17d28:	00193740 	call	19374 <__udivsi3>
   17d2c:	102b883a 	mov	r21,r2
   17d30:	9dffffcc 	andi	r23,r19,65535
   17d34:	e008943a 	slli	r4,fp,16
   17d38:	8804d43a 	srli	r2,r17,16
   17d3c:	adcd383a 	mul	r6,r21,r23
   17d40:	2088b03a 	or	r4,r4,r2
   17d44:	2180042e 	bgeu	r4,r6,17d58 <__udivdi3+0x398>
   17d48:	24c9883a 	add	r4,r4,r19
   17d4c:	a8bfffc4 	addi	r2,r21,-1
   17d50:	24c07f2e 	bgeu	r4,r19,17f50 <__udivdi3+0x590>
   17d54:	102b883a 	mov	r21,r2
   17d58:	21b9c83a 	sub	fp,r4,r6
   17d5c:	e009883a 	mov	r4,fp
   17d60:	a00b883a 	mov	r5,r20
   17d64:	001937c0 	call	1937c <__umodsi3>
   17d68:	e009883a 	mov	r4,fp
   17d6c:	a00b883a 	mov	r5,r20
   17d70:	d8800015 	stw	r2,0(sp)
   17d74:	00193740 	call	19374 <__udivsi3>
   17d78:	d8c00017 	ldw	r3,0(sp)
   17d7c:	15cb383a 	mul	r5,r2,r23
   17d80:	8c7fffcc 	andi	r17,r17,65535
   17d84:	1806943a 	slli	r3,r3,16
   17d88:	1009883a 	mov	r4,r2
   17d8c:	1c46b03a 	or	r3,r3,r17
   17d90:	1940042e 	bgeu	r3,r5,17da4 <__udivdi3+0x3e4>
   17d94:	1cc7883a 	add	r3,r3,r19
   17d98:	10bfffc4 	addi	r2,r2,-1
   17d9c:	1cc0682e 	bgeu	r3,r19,17f40 <__udivdi3+0x580>
   17da0:	1009883a 	mov	r4,r2
   17da4:	a804943a 	slli	r2,r21,16
   17da8:	b1ffffcc 	andi	r7,r22,65535
   17dac:	b02cd43a 	srli	r22,r22,16
   17db0:	2084b03a 	or	r2,r4,r2
   17db4:	113fffcc 	andi	r4,r2,65535
   17db8:	100cd43a 	srli	r6,r2,16
   17dbc:	21d1383a 	mul	r8,r4,r7
   17dc0:	2589383a 	mul	r4,r4,r22
   17dc4:	31cf383a 	mul	r7,r6,r7
   17dc8:	4012d43a 	srli	r9,r8,16
   17dcc:	1947c83a 	sub	r3,r3,r5
   17dd0:	3909883a 	add	r4,r7,r4
   17dd4:	2249883a 	add	r4,r4,r9
   17dd8:	35ad383a 	mul	r22,r6,r22
   17ddc:	21c0022e 	bgeu	r4,r7,17de8 <__udivdi3+0x428>
   17de0:	01400074 	movhi	r5,1
   17de4:	b16d883a 	add	r22,r22,r5
   17de8:	200ad43a 	srli	r5,r4,16
   17dec:	b16d883a 	add	r22,r22,r5
   17df0:	1d803e36 	bltu	r3,r22,17eec <__udivdi3+0x52c>
   17df4:	1d803826 	beq	r3,r22,17ed8 <__udivdi3+0x518>
   17df8:	0007883a 	mov	r3,zero
   17dfc:	003f5606 	br	17b58 <__udivdi3+0x198>
   17e00:	80a0983a 	sll	r16,r16,r2
   17e04:	88ead83a 	srl	r21,r17,r3
   17e08:	90c6d83a 	srl	r3,r18,r3
   17e0c:	8028d43a 	srli	r20,r16,16
   17e10:	88a2983a 	sll	r17,r17,r2
   17e14:	a809883a 	mov	r4,r21
   17e18:	a00b883a 	mov	r5,r20
   17e1c:	88ecb03a 	or	r22,r17,r3
   17e20:	90a6983a 	sll	r19,r18,r2
   17e24:	001937c0 	call	1937c <__umodsi3>
   17e28:	a809883a 	mov	r4,r21
   17e2c:	a00b883a 	mov	r5,r20
   17e30:	1023883a 	mov	r17,r2
   17e34:	00193740 	call	19374 <__udivsi3>
   17e38:	102b883a 	mov	r21,r2
   17e3c:	84bfffcc 	andi	r18,r16,65535
   17e40:	8808943a 	slli	r4,r17,16
   17e44:	b004d43a 	srli	r2,r22,16
   17e48:	ac87383a 	mul	r3,r21,r18
   17e4c:	2088b03a 	or	r4,r4,r2
   17e50:	20c0062e 	bgeu	r4,r3,17e6c <__udivdi3+0x4ac>
   17e54:	2409883a 	add	r4,r4,r16
   17e58:	a8bfffc4 	addi	r2,r21,-1
   17e5c:	24004236 	bltu	r4,r16,17f68 <__udivdi3+0x5a8>
   17e60:	20c0412e 	bgeu	r4,r3,17f68 <__udivdi3+0x5a8>
   17e64:	ad7fff84 	addi	r21,r21,-2
   17e68:	2409883a 	add	r4,r4,r16
   17e6c:	20efc83a 	sub	r23,r4,r3
   17e70:	b809883a 	mov	r4,r23
   17e74:	a00b883a 	mov	r5,r20
   17e78:	001937c0 	call	1937c <__umodsi3>
   17e7c:	1023883a 	mov	r17,r2
   17e80:	a00b883a 	mov	r5,r20
   17e84:	b809883a 	mov	r4,r23
   17e88:	00193740 	call	19374 <__udivsi3>
   17e8c:	8822943a 	slli	r17,r17,16
   17e90:	148b383a 	mul	r5,r2,r18
   17e94:	b5bfffcc 	andi	r22,r22,65535
   17e98:	8da2b03a 	or	r17,r17,r22
   17e9c:	8940062e 	bgeu	r17,r5,17eb8 <__udivdi3+0x4f8>
   17ea0:	8c23883a 	add	r17,r17,r16
   17ea4:	10ffffc4 	addi	r3,r2,-1
   17ea8:	8c002d36 	bltu	r17,r16,17f60 <__udivdi3+0x5a0>
   17eac:	89402c2e 	bgeu	r17,r5,17f60 <__udivdi3+0x5a0>
   17eb0:	10bfff84 	addi	r2,r2,-2
   17eb4:	8c23883a 	add	r17,r17,r16
   17eb8:	a806943a 	slli	r3,r21,16
   17ebc:	8963c83a 	sub	r17,r17,r5
   17ec0:	10c6b03a 	or	r3,r2,r3
   17ec4:	003f4906 	br	17bec <__udivdi3+0x22c>
   17ec8:	1009883a 	mov	r4,r2
   17ecc:	003f0906 	br	17af4 <__udivdi3+0x134>
   17ed0:	1009883a 	mov	r4,r2
   17ed4:	003f6e06 	br	17c90 <__udivdi3+0x2d0>
   17ed8:	2008943a 	slli	r4,r4,16
   17edc:	9420983a 	sll	r16,r18,r16
   17ee0:	423fffcc 	andi	r8,r8,65535
   17ee4:	2209883a 	add	r4,r4,r8
   17ee8:	813fc32e 	bgeu	r16,r4,17df8 <__udivdi3+0x438>
   17eec:	10bfffc4 	addi	r2,r2,-1
   17ef0:	0007883a 	mov	r3,zero
   17ef4:	003f1806 	br	17b58 <__udivdi3+0x198>
   17ef8:	00c00604 	movi	r3,24
   17efc:	180b883a 	mov	r5,r3
   17f00:	003f0806 	br	17b24 <__udivdi3+0x164>
   17f04:	00c00204 	movi	r3,8
   17f08:	180b883a 	mov	r5,r3
   17f0c:	003f0506 	br	17b24 <__udivdi3+0x164>
   17f10:	00800604 	movi	r2,24
   17f14:	1007883a 	mov	r3,r2
   17f18:	003f2706 	br	17bb8 <__udivdi3+0x1f8>
   17f1c:	00800604 	movi	r2,24
   17f20:	1007883a 	mov	r3,r2
   17f24:	003ebe06 	br	17a20 <__udivdi3+0x60>
   17f28:	00800204 	movi	r2,8
   17f2c:	1007883a 	mov	r3,r2
   17f30:	003ebb06 	br	17a20 <__udivdi3+0x60>
   17f34:	00800204 	movi	r2,8
   17f38:	1007883a 	mov	r3,r2
   17f3c:	003f1e06 	br	17bb8 <__udivdi3+0x1f8>
   17f40:	197f972e 	bgeu	r3,r5,17da0 <__udivdi3+0x3e0>
   17f44:	213fff84 	addi	r4,r4,-2
   17f48:	1cc7883a 	add	r3,r3,r19
   17f4c:	003f9506 	br	17da4 <__udivdi3+0x3e4>
   17f50:	21bf802e 	bgeu	r4,r6,17d54 <__udivdi3+0x394>
   17f54:	ad7fff84 	addi	r21,r21,-2
   17f58:	24c9883a 	add	r4,r4,r19
   17f5c:	003f7e06 	br	17d58 <__udivdi3+0x398>
   17f60:	1805883a 	mov	r2,r3
   17f64:	003fd406 	br	17eb8 <__udivdi3+0x4f8>
   17f68:	102b883a 	mov	r21,r2
   17f6c:	003fbf06 	br	17e6c <__udivdi3+0x4ac>
   17f70:	8c7fff84 	addi	r17,r17,-2
   17f74:	2409883a 	add	r4,r4,r16
   17f78:	003f3006 	br	17c3c <__udivdi3+0x27c>
   17f7c:	94bfff84 	addi	r18,r18,-2
   17f80:	1c07883a 	add	r3,r3,r16
   17f84:	003ec806 	br	17aa8 <__udivdi3+0xe8>

00017f88 <__umoddi3>:
   17f88:	defff504 	addi	sp,sp,-44
   17f8c:	dd000515 	stw	r20,20(sp)
   17f90:	dcc00415 	stw	r19,16(sp)
   17f94:	dc800315 	stw	r18,12(sp)
   17f98:	dc400215 	stw	r17,8(sp)
   17f9c:	dc000115 	stw	r16,4(sp)
   17fa0:	dfc00a15 	stw	ra,40(sp)
   17fa4:	df000915 	stw	fp,36(sp)
   17fa8:	ddc00815 	stw	r23,32(sp)
   17fac:	dd800715 	stw	r22,28(sp)
   17fb0:	dd400615 	stw	r21,24(sp)
   17fb4:	2025883a 	mov	r18,r4
   17fb8:	2823883a 	mov	r17,r5
   17fbc:	3021883a 	mov	r16,r6
   17fc0:	2027883a 	mov	r19,r4
   17fc4:	2829883a 	mov	r20,r5
   17fc8:	3800351e 	bne	r7,zero,180a0 <__umoddi3+0x118>
   17fcc:	29804d2e 	bgeu	r5,r6,18104 <__umoddi3+0x17c>
   17fd0:	00bfffd4 	movui	r2,65535
   17fd4:	11809a36 	bltu	r2,r6,18240 <__umoddi3+0x2b8>
   17fd8:	00803fc4 	movi	r2,255
   17fdc:	11813936 	bltu	r2,r6,184c4 <__umoddi3+0x53c>
   17fe0:	0005883a 	mov	r2,zero
   17fe4:	0009883a 	mov	r4,zero
   17fe8:	3084d83a 	srl	r2,r6,r2
   17fec:	00c000f4 	movhi	r3,3
   17ff0:	18e09904 	addi	r3,r3,-32156
   17ff4:	05400804 	movi	r21,32
   17ff8:	1885883a 	add	r2,r3,r2
   17ffc:	10800003 	ldbu	r2,0(r2)
   18000:	1109883a 	add	r4,r2,r4
   18004:	a92bc83a 	sub	r21,r21,r4
   18008:	a800ec26 	beq	r21,zero,183bc <__umoddi3+0x434>
   1800c:	8d62983a 	sll	r17,r17,r21
   18010:	9108d83a 	srl	r4,r18,r4
   18014:	3560983a 	sll	r16,r6,r21
   18018:	9566983a 	sll	r19,r18,r21
   1801c:	8928b03a 	or	r20,r17,r4
   18020:	8022d43a 	srli	r17,r16,16
   18024:	a009883a 	mov	r4,r20
   18028:	84bfffcc 	andi	r18,r16,65535
   1802c:	880b883a 	mov	r5,r17
   18030:	001937c0 	call	1937c <__umodsi3>
   18034:	a009883a 	mov	r4,r20
   18038:	880b883a 	mov	r5,r17
   1803c:	102d883a 	mov	r22,r2
   18040:	00193740 	call	19374 <__udivsi3>
   18044:	b02c943a 	slli	r22,r22,16
   18048:	9806d43a 	srli	r3,r19,16
   1804c:	1485383a 	mul	r2,r2,r18
   18050:	b0c6b03a 	or	r3,r22,r3
   18054:	1880042e 	bgeu	r3,r2,18068 <__umoddi3+0xe0>
   18058:	1c07883a 	add	r3,r3,r16
   1805c:	1c000236 	bltu	r3,r16,18068 <__umoddi3+0xe0>
   18060:	1880012e 	bgeu	r3,r2,18068 <__umoddi3+0xe0>
   18064:	1c07883a 	add	r3,r3,r16
   18068:	18a9c83a 	sub	r20,r3,r2
   1806c:	a009883a 	mov	r4,r20
   18070:	880b883a 	mov	r5,r17
   18074:	001937c0 	call	1937c <__umodsi3>
   18078:	102d883a 	mov	r22,r2
   1807c:	a009883a 	mov	r4,r20
   18080:	880b883a 	mov	r5,r17
   18084:	00193740 	call	19374 <__udivsi3>
   18088:	b02c943a 	slli	r22,r22,16
   1808c:	1485383a 	mul	r2,r2,r18
   18090:	9cffffcc 	andi	r19,r19,65535
   18094:	b4e6b03a 	or	r19,r22,r19
   18098:	9880522e 	bgeu	r19,r2,181e4 <__umoddi3+0x25c>
   1809c:	00004d06 	br	181d4 <__umoddi3+0x24c>
   180a0:	29c05436 	bltu	r5,r7,181f4 <__umoddi3+0x26c>
   180a4:	00bfffd4 	movui	r2,65535
   180a8:	11c0602e 	bgeu	r2,r7,1822c <__umoddi3+0x2a4>
   180ac:	00804034 	movhi	r2,256
   180b0:	10bfffc4 	addi	r2,r2,-1
   180b4:	11c0f736 	bltu	r2,r7,18494 <__umoddi3+0x50c>
   180b8:	00c00404 	movi	r3,16
   180bc:	1827883a 	mov	r19,r3
   180c0:	38c6d83a 	srl	r3,r7,r3
   180c4:	010000f4 	movhi	r4,3
   180c8:	21209904 	addi	r4,r4,-32156
   180cc:	04000804 	movi	r16,32
   180d0:	20c7883a 	add	r3,r4,r3
   180d4:	18800003 	ldbu	r2,0(r3)
   180d8:	14e7883a 	add	r19,r2,r19
   180dc:	84e1c83a 	sub	r16,r16,r19
   180e0:	8000621e 	bne	r16,zero,1826c <__umoddi3+0x2e4>
   180e4:	3c400136 	bltu	r7,r17,180ec <__umoddi3+0x164>
   180e8:	91810336 	bltu	r18,r6,184f8 <__umoddi3+0x570>
   180ec:	9185c83a 	sub	r2,r18,r6
   180f0:	89e3c83a 	sub	r17,r17,r7
   180f4:	90a5803a 	cmpltu	r18,r18,r2
   180f8:	8ca9c83a 	sub	r20,r17,r18
   180fc:	a007883a 	mov	r3,r20
   18100:	00003e06 	br	181fc <__umoddi3+0x274>
   18104:	3000041e 	bne	r6,zero,18118 <__umoddi3+0x190>
   18108:	01000044 	movi	r4,1
   1810c:	000b883a 	mov	r5,zero
   18110:	00193740 	call	19374 <__udivsi3>
   18114:	1021883a 	mov	r16,r2
   18118:	00bfffd4 	movui	r2,65535
   1811c:	14004e2e 	bgeu	r2,r16,18258 <__umoddi3+0x2d0>
   18120:	00804034 	movhi	r2,256
   18124:	10bfffc4 	addi	r2,r2,-1
   18128:	1400e336 	bltu	r2,r16,184b8 <__umoddi3+0x530>
   1812c:	00800404 	movi	r2,16
   18130:	1007883a 	mov	r3,r2
   18134:	8084d83a 	srl	r2,r16,r2
   18138:	010000f4 	movhi	r4,3
   1813c:	21209904 	addi	r4,r4,-32156
   18140:	05400804 	movi	r21,32
   18144:	2085883a 	add	r2,r4,r2
   18148:	10800003 	ldbu	r2,0(r2)
   1814c:	10c7883a 	add	r3,r2,r3
   18150:	a8ebc83a 	sub	r21,r21,r3
   18154:	a8009b1e 	bne	r21,zero,183c4 <__umoddi3+0x43c>
   18158:	8028d43a 	srli	r20,r16,16
   1815c:	8c23c83a 	sub	r17,r17,r16
   18160:	85bfffcc 	andi	r22,r16,65535
   18164:	8809883a 	mov	r4,r17
   18168:	a00b883a 	mov	r5,r20
   1816c:	001937c0 	call	1937c <__umodsi3>
   18170:	8809883a 	mov	r4,r17
   18174:	a00b883a 	mov	r5,r20
   18178:	1025883a 	mov	r18,r2
   1817c:	00193740 	call	19374 <__udivsi3>
   18180:	9024943a 	slli	r18,r18,16
   18184:	9806d43a 	srli	r3,r19,16
   18188:	1585383a 	mul	r2,r2,r22
   1818c:	90c6b03a 	or	r3,r18,r3
   18190:	1880032e 	bgeu	r3,r2,181a0 <__umoddi3+0x218>
   18194:	1c07883a 	add	r3,r3,r16
   18198:	1c000136 	bltu	r3,r16,181a0 <__umoddi3+0x218>
   1819c:	1880d436 	bltu	r3,r2,184f0 <__umoddi3+0x568>
   181a0:	18a3c83a 	sub	r17,r3,r2
   181a4:	8809883a 	mov	r4,r17
   181a8:	a00b883a 	mov	r5,r20
   181ac:	001937c0 	call	1937c <__umodsi3>
   181b0:	1025883a 	mov	r18,r2
   181b4:	8809883a 	mov	r4,r17
   181b8:	a00b883a 	mov	r5,r20
   181bc:	00193740 	call	19374 <__udivsi3>
   181c0:	9024943a 	slli	r18,r18,16
   181c4:	1585383a 	mul	r2,r2,r22
   181c8:	9cffffcc 	andi	r19,r19,65535
   181cc:	94e6b03a 	or	r19,r18,r19
   181d0:	9880042e 	bgeu	r19,r2,181e4 <__umoddi3+0x25c>
   181d4:	9c27883a 	add	r19,r19,r16
   181d8:	9c000236 	bltu	r19,r16,181e4 <__umoddi3+0x25c>
   181dc:	9880012e 	bgeu	r19,r2,181e4 <__umoddi3+0x25c>
   181e0:	9c27883a 	add	r19,r19,r16
   181e4:	98a7c83a 	sub	r19,r19,r2
   181e8:	9d44d83a 	srl	r2,r19,r21
   181ec:	0007883a 	mov	r3,zero
   181f0:	00000206 	br	181fc <__umoddi3+0x274>
   181f4:	2005883a 	mov	r2,r4
   181f8:	2807883a 	mov	r3,r5
   181fc:	dfc00a17 	ldw	ra,40(sp)
   18200:	df000917 	ldw	fp,36(sp)
   18204:	ddc00817 	ldw	r23,32(sp)
   18208:	dd800717 	ldw	r22,28(sp)
   1820c:	dd400617 	ldw	r21,24(sp)
   18210:	dd000517 	ldw	r20,20(sp)
   18214:	dcc00417 	ldw	r19,16(sp)
   18218:	dc800317 	ldw	r18,12(sp)
   1821c:	dc400217 	ldw	r17,8(sp)
   18220:	dc000117 	ldw	r16,4(sp)
   18224:	dec00b04 	addi	sp,sp,44
   18228:	f800283a 	ret
   1822c:	00803fc4 	movi	r2,255
   18230:	11c09536 	bltu	r2,r7,18488 <__umoddi3+0x500>
   18234:	0007883a 	mov	r3,zero
   18238:	0027883a 	mov	r19,zero
   1823c:	003fa006 	br	180c0 <__umoddi3+0x138>
   18240:	00804034 	movhi	r2,256
   18244:	10bfffc4 	addi	r2,r2,-1
   18248:	11809536 	bltu	r2,r6,184a0 <__umoddi3+0x518>
   1824c:	00800404 	movi	r2,16
   18250:	1009883a 	mov	r4,r2
   18254:	003f6406 	br	17fe8 <__umoddi3+0x60>
   18258:	00803fc4 	movi	r2,255
   1825c:	14009336 	bltu	r2,r16,184ac <__umoddi3+0x524>
   18260:	0005883a 	mov	r2,zero
   18264:	0007883a 	mov	r3,zero
   18268:	003fb206 	br	18134 <__umoddi3+0x1ac>
   1826c:	34c4d83a 	srl	r2,r6,r19
   18270:	3c0e983a 	sll	r7,r7,r16
   18274:	8ceed83a 	srl	r23,r17,r19
   18278:	8c22983a 	sll	r17,r17,r16
   1827c:	38a8b03a 	or	r20,r7,r2
   18280:	a02ad43a 	srli	r21,r20,16
   18284:	94c4d83a 	srl	r2,r18,r19
   18288:	b809883a 	mov	r4,r23
   1828c:	a80b883a 	mov	r5,r21
   18290:	88a2b03a 	or	r17,r17,r2
   18294:	342c983a 	sll	r22,r6,r16
   18298:	001937c0 	call	1937c <__umodsi3>
   1829c:	b809883a 	mov	r4,r23
   182a0:	a80b883a 	mov	r5,r21
   182a4:	d8800015 	stw	r2,0(sp)
   182a8:	00193740 	call	19374 <__udivsi3>
   182ac:	d8c00017 	ldw	r3,0(sp)
   182b0:	102f883a 	mov	r23,r2
   182b4:	a73fffcc 	andi	fp,r20,65535
   182b8:	180a943a 	slli	r5,r3,16
   182bc:	8804d43a 	srli	r2,r17,16
   182c0:	bf09383a 	mul	r4,r23,fp
   182c4:	9424983a 	sll	r18,r18,r16
   182c8:	288ab03a 	or	r5,r5,r2
   182cc:	2900042e 	bgeu	r5,r4,182e0 <__umoddi3+0x358>
   182d0:	2d0b883a 	add	r5,r5,r20
   182d4:	b8bfffc4 	addi	r2,r23,-1
   182d8:	2d00812e 	bgeu	r5,r20,184e0 <__umoddi3+0x558>
   182dc:	102f883a 	mov	r23,r2
   182e0:	2907c83a 	sub	r3,r5,r4
   182e4:	1809883a 	mov	r4,r3
   182e8:	a80b883a 	mov	r5,r21
   182ec:	d8c00015 	stw	r3,0(sp)
   182f0:	001937c0 	call	1937c <__umodsi3>
   182f4:	d8c00017 	ldw	r3,0(sp)
   182f8:	a80b883a 	mov	r5,r21
   182fc:	d8800015 	stw	r2,0(sp)
   18300:	1809883a 	mov	r4,r3
   18304:	00193740 	call	19374 <__udivsi3>
   18308:	d9800017 	ldw	r6,0(sp)
   1830c:	8c7fffcc 	andi	r17,r17,65535
   18310:	3008943a 	slli	r4,r6,16
   18314:	170d383a 	mul	r6,r2,fp
   18318:	2448b03a 	or	r4,r4,r17
   1831c:	2180042e 	bgeu	r4,r6,18330 <__umoddi3+0x3a8>
   18320:	2509883a 	add	r4,r4,r20
   18324:	10ffffc4 	addi	r3,r2,-1
   18328:	2500692e 	bgeu	r4,r20,184d0 <__umoddi3+0x548>
   1832c:	1805883a 	mov	r2,r3
   18330:	b82e943a 	slli	r23,r23,16
   18334:	b010d43a 	srli	r8,r22,16
   18338:	b1ffffcc 	andi	r7,r22,65535
   1833c:	15eeb03a 	or	r23,r2,r23
   18340:	b8bfffcc 	andi	r2,r23,65535
   18344:	b82ed43a 	srli	r23,r23,16
   18348:	11c7383a 	mul	r3,r2,r7
   1834c:	1205383a 	mul	r2,r2,r8
   18350:	b9cf383a 	mul	r7,r23,r7
   18354:	400b883a 	mov	r5,r8
   18358:	1810d43a 	srli	r8,r3,16
   1835c:	3885883a 	add	r2,r7,r2
   18360:	2189c83a 	sub	r4,r4,r6
   18364:	1205883a 	add	r2,r2,r8
   18368:	b94b383a 	mul	r5,r23,r5
   1836c:	11c0022e 	bgeu	r2,r7,18378 <__umoddi3+0x3f0>
   18370:	01800074 	movhi	r6,1
   18374:	298b883a 	add	r5,r5,r6
   18378:	100cd43a 	srli	r6,r2,16
   1837c:	1004943a 	slli	r2,r2,16
   18380:	18ffffcc 	andi	r3,r3,65535
   18384:	298b883a 	add	r5,r5,r6
   18388:	10c5883a 	add	r2,r2,r3
   1838c:	21403836 	bltu	r4,r5,18470 <__umoddi3+0x4e8>
   18390:	21405c26 	beq	r4,r5,18504 <__umoddi3+0x57c>
   18394:	2147c83a 	sub	r3,r4,r5
   18398:	102d883a 	mov	r22,r2
   1839c:	95adc83a 	sub	r22,r18,r22
   183a0:	95a5803a 	cmpltu	r18,r18,r22
   183a4:	1c87c83a 	sub	r3,r3,r18
   183a8:	1cc4983a 	sll	r2,r3,r19
   183ac:	b42cd83a 	srl	r22,r22,r16
   183b0:	1c06d83a 	srl	r3,r3,r16
   183b4:	1584b03a 	or	r2,r2,r22
   183b8:	003f9006 	br	181fc <__umoddi3+0x274>
   183bc:	002b883a 	mov	r21,zero
   183c0:	003f1706 	br	18020 <__umoddi3+0x98>
   183c4:	8560983a 	sll	r16,r16,r21
   183c8:	88e6d83a 	srl	r19,r17,r3
   183cc:	90c6d83a 	srl	r3,r18,r3
   183d0:	8028d43a 	srli	r20,r16,16
   183d4:	8d62983a 	sll	r17,r17,r21
   183d8:	9809883a 	mov	r4,r19
   183dc:	a00b883a 	mov	r5,r20
   183e0:	88eeb03a 	or	r23,r17,r3
   183e4:	001937c0 	call	1937c <__umodsi3>
   183e8:	9809883a 	mov	r4,r19
   183ec:	a00b883a 	mov	r5,r20
   183f0:	1023883a 	mov	r17,r2
   183f4:	00193740 	call	19374 <__udivsi3>
   183f8:	85bfffcc 	andi	r22,r16,65535
   183fc:	880a943a 	slli	r5,r17,16
   18400:	b806d43a 	srli	r3,r23,16
   18404:	1585383a 	mul	r2,r2,r22
   18408:	9566983a 	sll	r19,r18,r21
   1840c:	28cab03a 	or	r5,r5,r3
   18410:	2880042e 	bgeu	r5,r2,18424 <__umoddi3+0x49c>
   18414:	2c0b883a 	add	r5,r5,r16
   18418:	2c000236 	bltu	r5,r16,18424 <__umoddi3+0x49c>
   1841c:	2880012e 	bgeu	r5,r2,18424 <__umoddi3+0x49c>
   18420:	2c0b883a 	add	r5,r5,r16
   18424:	28a5c83a 	sub	r18,r5,r2
   18428:	9009883a 	mov	r4,r18
   1842c:	a00b883a 	mov	r5,r20
   18430:	001937c0 	call	1937c <__umodsi3>
   18434:	1023883a 	mov	r17,r2
   18438:	9009883a 	mov	r4,r18
   1843c:	a00b883a 	mov	r5,r20
   18440:	00193740 	call	19374 <__udivsi3>
   18444:	8822943a 	slli	r17,r17,16
   18448:	1585383a 	mul	r2,r2,r22
   1844c:	bdffffcc 	andi	r23,r23,65535
   18450:	8de2b03a 	or	r17,r17,r23
   18454:	8880042e 	bgeu	r17,r2,18468 <__umoddi3+0x4e0>
   18458:	8c23883a 	add	r17,r17,r16
   1845c:	8c000236 	bltu	r17,r16,18468 <__umoddi3+0x4e0>
   18460:	8880012e 	bgeu	r17,r2,18468 <__umoddi3+0x4e0>
   18464:	8c23883a 	add	r17,r17,r16
   18468:	88a3c83a 	sub	r17,r17,r2
   1846c:	003f3d06 	br	18164 <__umoddi3+0x1dc>
   18470:	15adc83a 	sub	r22,r2,r22
   18474:	2d07c83a 	sub	r3,r5,r20
   18478:	1585803a 	cmpltu	r2,r2,r22
   1847c:	1887c83a 	sub	r3,r3,r2
   18480:	20c7c83a 	sub	r3,r4,r3
   18484:	003fc506 	br	1839c <__umoddi3+0x414>
   18488:	00c00204 	movi	r3,8
   1848c:	1827883a 	mov	r19,r3
   18490:	003f0b06 	br	180c0 <__umoddi3+0x138>
   18494:	00c00604 	movi	r3,24
   18498:	1827883a 	mov	r19,r3
   1849c:	003f0806 	br	180c0 <__umoddi3+0x138>
   184a0:	00800604 	movi	r2,24
   184a4:	1009883a 	mov	r4,r2
   184a8:	003ecf06 	br	17fe8 <__umoddi3+0x60>
   184ac:	00800204 	movi	r2,8
   184b0:	1007883a 	mov	r3,r2
   184b4:	003f1f06 	br	18134 <__umoddi3+0x1ac>
   184b8:	00800604 	movi	r2,24
   184bc:	1007883a 	mov	r3,r2
   184c0:	003f1c06 	br	18134 <__umoddi3+0x1ac>
   184c4:	00800204 	movi	r2,8
   184c8:	1009883a 	mov	r4,r2
   184cc:	003ec606 	br	17fe8 <__umoddi3+0x60>
   184d0:	21bf962e 	bgeu	r4,r6,1832c <__umoddi3+0x3a4>
   184d4:	10bfff84 	addi	r2,r2,-2
   184d8:	2509883a 	add	r4,r4,r20
   184dc:	003f9406 	br	18330 <__umoddi3+0x3a8>
   184e0:	293f7e2e 	bgeu	r5,r4,182dc <__umoddi3+0x354>
   184e4:	bdffff84 	addi	r23,r23,-2
   184e8:	2d0b883a 	add	r5,r5,r20
   184ec:	003f7c06 	br	182e0 <__umoddi3+0x358>
   184f0:	1c07883a 	add	r3,r3,r16
   184f4:	003f2a06 	br	181a0 <__umoddi3+0x218>
   184f8:	9005883a 	mov	r2,r18
   184fc:	a007883a 	mov	r3,r20
   18500:	003f3e06 	br	181fc <__umoddi3+0x274>
   18504:	90bfda36 	bltu	r18,r2,18470 <__umoddi3+0x4e8>
   18508:	102d883a 	mov	r22,r2
   1850c:	0007883a 	mov	r3,zero
   18510:	003fa206 	br	1839c <__umoddi3+0x414>

00018514 <_fpadd_parts>:
   18514:	2005883a 	mov	r2,r4
   18518:	21000017 	ldw	r4,0(r4)
   1851c:	01c00044 	movi	r7,1
   18520:	3900622e 	bgeu	r7,r4,186ac <_fpadd_parts+0x198>
   18524:	28c00017 	ldw	r3,0(r5)
   18528:	38c05f2e 	bgeu	r7,r3,186a8 <_fpadd_parts+0x194>
   1852c:	01c00104 	movi	r7,4
   18530:	21c0c626 	beq	r4,r7,1884c <_fpadd_parts+0x338>
   18534:	19c05c26 	beq	r3,r7,186a8 <_fpadd_parts+0x194>
   18538:	01c00084 	movi	r7,2
   1853c:	19c06b26 	beq	r3,r7,186ec <_fpadd_parts+0x1d8>
   18540:	21c05926 	beq	r4,r7,186a8 <_fpadd_parts+0x194>
   18544:	11c00217 	ldw	r7,8(r2)
   18548:	2ac00217 	ldw	r11,8(r5)
   1854c:	13000317 	ldw	r12,12(r2)
   18550:	13400417 	ldw	r13,16(r2)
   18554:	3ac9c83a 	sub	r4,r7,r11
   18558:	2a000317 	ldw	r8,12(r5)
   1855c:	2a400417 	ldw	r9,16(r5)
   18560:	2015883a 	mov	r10,r4
   18564:	20007516 	blt	r4,zero,1873c <_fpadd_parts+0x228>
   18568:	00c00fc4 	movi	r3,63
   1856c:	1a805016 	blt	r3,r10,186b0 <_fpadd_parts+0x19c>
   18570:	0100870e 	bge	zero,r4,18790 <_fpadd_parts+0x27c>
   18574:	50fff804 	addi	r3,r10,-32
   18578:	18009916 	blt	r3,zero,187e0 <_fpadd_parts+0x2cc>
   1857c:	48d6d83a 	srl	r11,r9,r3
   18580:	001d883a 	mov	r14,zero
   18584:	18009e16 	blt	r3,zero,18800 <_fpadd_parts+0x2ec>
   18588:	01000044 	movi	r4,1
   1858c:	20c6983a 	sll	r3,r4,r3
   18590:	0015883a 	mov	r10,zero
   18594:	513fffc4 	addi	r4,r10,-1
   18598:	2295403a 	cmpgeu	r10,r4,r10
   1859c:	1a87c83a 	sub	r3,r3,r10
   185a0:	1a52703a 	and	r9,r3,r9
   185a4:	2210703a 	and	r8,r4,r8
   185a8:	4250b03a 	or	r8,r8,r9
   185ac:	4010c03a 	cmpne	r8,r8,zero
   185b0:	42d0b03a 	or	r8,r8,r11
   185b4:	7013883a 	mov	r9,r14
   185b8:	11000117 	ldw	r4,4(r2)
   185bc:	28800117 	ldw	r2,4(r5)
   185c0:	20804126 	beq	r4,r2,186c8 <_fpadd_parts+0x1b4>
   185c4:	20006326 	beq	r4,zero,18754 <_fpadd_parts+0x240>
   185c8:	4305c83a 	sub	r2,r8,r12
   185cc:	4091803a 	cmpltu	r8,r8,r2
   185d0:	4b47c83a 	sub	r3,r9,r13
   185d4:	1a07c83a 	sub	r3,r3,r8
   185d8:	18006316 	blt	r3,zero,18768 <_fpadd_parts+0x254>
   185dc:	30000115 	stw	zero,4(r6)
   185e0:	31c00215 	stw	r7,8(r6)
   185e4:	30800315 	stw	r2,12(r6)
   185e8:	30c00415 	stw	r3,16(r6)
   185ec:	11ffffc4 	addi	r7,r2,-1
   185f0:	388b403a 	cmpgeu	r5,r7,r2
   185f4:	194bc83a 	sub	r5,r3,r5
   185f8:	01040034 	movhi	r4,4096
   185fc:	213fffc4 	addi	r4,r4,-1
   18600:	21401736 	bltu	r4,r5,18660 <_fpadd_parts+0x14c>
   18604:	29008226 	beq	r5,r4,18810 <_fpadd_parts+0x2fc>
   18608:	31400217 	ldw	r5,8(r6)
   1860c:	02840034 	movhi	r10,4096
   18610:	52bfffc4 	addi	r10,r10,-1
   18614:	033fff84 	movi	r12,-2
   18618:	297fffc4 	addi	r5,r5,-1
   1861c:	00000106 	br	18624 <_fpadd_parts+0x110>
   18620:	3a804a26 	beq	r7,r10,1874c <_fpadd_parts+0x238>
   18624:	1089883a 	add	r4,r2,r2
   18628:	2091803a 	cmpltu	r8,r4,r2
   1862c:	18c7883a 	add	r3,r3,r3
   18630:	227fffc4 	addi	r9,r4,-1
   18634:	40d1883a 	add	r8,r8,r3
   18638:	490f403a 	cmpgeu	r7,r9,r4
   1863c:	41cfc83a 	sub	r7,r8,r7
   18640:	2817883a 	mov	r11,r5
   18644:	2005883a 	mov	r2,r4
   18648:	4007883a 	mov	r3,r8
   1864c:	297fffc4 	addi	r5,r5,-1
   18650:	51fff32e 	bgeu	r10,r7,18620 <_fpadd_parts+0x10c>
   18654:	31000315 	stw	r4,12(r6)
   18658:	32000415 	stw	r8,16(r6)
   1865c:	32c00215 	stw	r11,8(r6)
   18660:	010000c4 	movi	r4,3
   18664:	31000015 	stw	r4,0(r6)
   18668:	01080034 	movhi	r4,8192
   1866c:	213fffc4 	addi	r4,r4,-1
   18670:	20c00b2e 	bgeu	r4,r3,186a0 <_fpadd_parts+0x18c>
   18674:	180e97fa 	slli	r7,r3,31
   18678:	1008d07a 	srli	r4,r2,1
   1867c:	31400217 	ldw	r5,8(r6)
   18680:	1806d07a 	srli	r3,r3,1
   18684:	1080004c 	andi	r2,r2,1
   18688:	3908b03a 	or	r4,r7,r4
   1868c:	1108b03a 	or	r4,r2,r4
   18690:	29400044 	addi	r5,r5,1
   18694:	31000315 	stw	r4,12(r6)
   18698:	30c00415 	stw	r3,16(r6)
   1869c:	31400215 	stw	r5,8(r6)
   186a0:	3005883a 	mov	r2,r6
   186a4:	f800283a 	ret
   186a8:	2805883a 	mov	r2,r5
   186ac:	f800283a 	ret
   186b0:	59c01e0e 	bge	r11,r7,1872c <_fpadd_parts+0x218>
   186b4:	11000117 	ldw	r4,4(r2)
   186b8:	28800117 	ldw	r2,4(r5)
   186bc:	0011883a 	mov	r8,zero
   186c0:	0013883a 	mov	r9,zero
   186c4:	20bfbf1e 	bne	r4,r2,185c4 <_fpadd_parts+0xb0>
   186c8:	4305883a 	add	r2,r8,r12
   186cc:	1207803a 	cmpltu	r3,r2,r8
   186d0:	4b53883a 	add	r9,r9,r13
   186d4:	1a47883a 	add	r3,r3,r9
   186d8:	31000115 	stw	r4,4(r6)
   186dc:	31c00215 	stw	r7,8(r6)
   186e0:	30800315 	stw	r2,12(r6)
   186e4:	30c00415 	stw	r3,16(r6)
   186e8:	003fdd06 	br	18660 <_fpadd_parts+0x14c>
   186ec:	20ffef1e 	bne	r4,r3,186ac <_fpadd_parts+0x198>
   186f0:	31000015 	stw	r4,0(r6)
   186f4:	10c00117 	ldw	r3,4(r2)
   186f8:	30c00115 	stw	r3,4(r6)
   186fc:	10c00217 	ldw	r3,8(r2)
   18700:	11000117 	ldw	r4,4(r2)
   18704:	29400117 	ldw	r5,4(r5)
   18708:	30c00215 	stw	r3,8(r6)
   1870c:	10c00317 	ldw	r3,12(r2)
   18710:	2908703a 	and	r4,r5,r4
   18714:	30c00315 	stw	r3,12(r6)
   18718:	10c00417 	ldw	r3,16(r2)
   1871c:	31000115 	stw	r4,4(r6)
   18720:	3005883a 	mov	r2,r6
   18724:	30c00415 	stw	r3,16(r6)
   18728:	f800283a 	ret
   1872c:	580f883a 	mov	r7,r11
   18730:	0019883a 	mov	r12,zero
   18734:	001b883a 	mov	r13,zero
   18738:	003f9f06 	br	185b8 <_fpadd_parts+0xa4>
   1873c:	0115c83a 	sub	r10,zero,r4
   18740:	00c00fc4 	movi	r3,63
   18744:	1abfda16 	blt	r3,r10,186b0 <_fpadd_parts+0x19c>
   18748:	003f8906 	br	18570 <_fpadd_parts+0x5c>
   1874c:	627fb52e 	bgeu	r12,r9,18624 <_fpadd_parts+0x110>
   18750:	003fc006 	br	18654 <_fpadd_parts+0x140>
   18754:	6205c83a 	sub	r2,r12,r8
   18758:	6099803a 	cmpltu	r12,r12,r2
   1875c:	6a47c83a 	sub	r3,r13,r9
   18760:	1b07c83a 	sub	r3,r3,r12
   18764:	183f9d0e 	bge	r3,zero,185dc <_fpadd_parts+0xc8>
   18768:	0085c83a 	sub	r2,zero,r2
   1876c:	1008c03a 	cmpne	r4,r2,zero
   18770:	00c7c83a 	sub	r3,zero,r3
   18774:	1907c83a 	sub	r3,r3,r4
   18778:	01000044 	movi	r4,1
   1877c:	31000115 	stw	r4,4(r6)
   18780:	31c00215 	stw	r7,8(r6)
   18784:	30800315 	stw	r2,12(r6)
   18788:	30c00415 	stw	r3,16(r6)
   1878c:	003f9706 	br	185ec <_fpadd_parts+0xd8>
   18790:	203f8926 	beq	r4,zero,185b8 <_fpadd_parts+0xa4>
   18794:	50fff804 	addi	r3,r10,-32
   18798:	3a8f883a 	add	r7,r7,r10
   1879c:	18002316 	blt	r3,zero,1882c <_fpadd_parts+0x318>
   187a0:	68d6d83a 	srl	r11,r13,r3
   187a4:	001d883a 	mov	r14,zero
   187a8:	18001c16 	blt	r3,zero,1881c <_fpadd_parts+0x308>
   187ac:	01000044 	movi	r4,1
   187b0:	20c6983a 	sll	r3,r4,r3
   187b4:	0015883a 	mov	r10,zero
   187b8:	513fffc4 	addi	r4,r10,-1
   187bc:	2295403a 	cmpgeu	r10,r4,r10
   187c0:	1a87c83a 	sub	r3,r3,r10
   187c4:	1b5a703a 	and	r13,r3,r13
   187c8:	2318703a 	and	r12,r4,r12
   187cc:	6358b03a 	or	r12,r12,r13
   187d0:	6018c03a 	cmpne	r12,r12,zero
   187d4:	62d8b03a 	or	r12,r12,r11
   187d8:	701b883a 	mov	r13,r14
   187dc:	003f7606 	br	185b8 <_fpadd_parts+0xa4>
   187e0:	4808907a 	slli	r4,r9,1
   187e4:	02c007c4 	movi	r11,31
   187e8:	5a97c83a 	sub	r11,r11,r10
   187ec:	22c8983a 	sll	r4,r4,r11
   187f0:	4296d83a 	srl	r11,r8,r10
   187f4:	4a9cd83a 	srl	r14,r9,r10
   187f8:	22d6b03a 	or	r11,r4,r11
   187fc:	003f6106 	br	18584 <_fpadd_parts+0x70>
   18800:	00c00044 	movi	r3,1
   18804:	1a94983a 	sll	r10,r3,r10
   18808:	0007883a 	mov	r3,zero
   1880c:	003f6106 	br	18594 <_fpadd_parts+0x80>
   18810:	013fff84 	movi	r4,-2
   18814:	21ff7c2e 	bgeu	r4,r7,18608 <_fpadd_parts+0xf4>
   18818:	003f9106 	br	18660 <_fpadd_parts+0x14c>
   1881c:	00c00044 	movi	r3,1
   18820:	1a94983a 	sll	r10,r3,r10
   18824:	0007883a 	mov	r3,zero
   18828:	003fe306 	br	187b8 <_fpadd_parts+0x2a4>
   1882c:	6816907a 	slli	r11,r13,1
   18830:	010007c4 	movi	r4,31
   18834:	2289c83a 	sub	r4,r4,r10
   18838:	5908983a 	sll	r4,r11,r4
   1883c:	6296d83a 	srl	r11,r12,r10
   18840:	6a9cd83a 	srl	r14,r13,r10
   18844:	22d6b03a 	or	r11,r4,r11
   18848:	003fd706 	br	187a8 <_fpadd_parts+0x294>
   1884c:	193f971e 	bne	r3,r4,186ac <_fpadd_parts+0x198>
   18850:	11000117 	ldw	r4,4(r2)
   18854:	28c00117 	ldw	r3,4(r5)
   18858:	20ff9426 	beq	r4,r3,186ac <_fpadd_parts+0x198>
   1885c:	008000f4 	movhi	r2,3
   18860:	10a09404 	addi	r2,r2,-32176
   18864:	f800283a 	ret

00018868 <__adddf3>:
   18868:	deffec04 	addi	sp,sp,-80
   1886c:	d9001115 	stw	r4,68(sp)
   18870:	d9401215 	stw	r5,72(sp)
   18874:	d9001104 	addi	r4,sp,68
   18878:	d9400a04 	addi	r5,sp,40
   1887c:	dfc01315 	stw	ra,76(sp)
   18880:	d9c01015 	stw	r7,64(sp)
   18884:	d9800f15 	stw	r6,60(sp)
   18888:	00196b40 	call	196b4 <__unpack_d>
   1888c:	d9000f04 	addi	r4,sp,60
   18890:	d9400504 	addi	r5,sp,20
   18894:	00196b40 	call	196b4 <__unpack_d>
   18898:	d9000a04 	addi	r4,sp,40
   1889c:	d9400504 	addi	r5,sp,20
   188a0:	d80d883a 	mov	r6,sp
   188a4:	00185140 	call	18514 <_fpadd_parts>
   188a8:	1009883a 	mov	r4,r2
   188ac:	00194900 	call	19490 <__pack_d>
   188b0:	dfc01317 	ldw	ra,76(sp)
   188b4:	dec01404 	addi	sp,sp,80
   188b8:	f800283a 	ret

000188bc <__subdf3>:
   188bc:	deffec04 	addi	sp,sp,-80
   188c0:	d9001115 	stw	r4,68(sp)
   188c4:	d9401215 	stw	r5,72(sp)
   188c8:	d9001104 	addi	r4,sp,68
   188cc:	d9400a04 	addi	r5,sp,40
   188d0:	dfc01315 	stw	ra,76(sp)
   188d4:	d9c01015 	stw	r7,64(sp)
   188d8:	d9800f15 	stw	r6,60(sp)
   188dc:	00196b40 	call	196b4 <__unpack_d>
   188e0:	d9000f04 	addi	r4,sp,60
   188e4:	d9400504 	addi	r5,sp,20
   188e8:	00196b40 	call	196b4 <__unpack_d>
   188ec:	d8800617 	ldw	r2,24(sp)
   188f0:	d9000a04 	addi	r4,sp,40
   188f4:	d9400504 	addi	r5,sp,20
   188f8:	d80d883a 	mov	r6,sp
   188fc:	1080005c 	xori	r2,r2,1
   18900:	d8800615 	stw	r2,24(sp)
   18904:	00185140 	call	18514 <_fpadd_parts>
   18908:	1009883a 	mov	r4,r2
   1890c:	00194900 	call	19490 <__pack_d>
   18910:	dfc01317 	ldw	ra,76(sp)
   18914:	dec01404 	addi	sp,sp,80
   18918:	f800283a 	ret

0001891c <__muldf3>:
   1891c:	deffe404 	addi	sp,sp,-112
   18920:	d9001115 	stw	r4,68(sp)
   18924:	d9401215 	stw	r5,72(sp)
   18928:	d9001104 	addi	r4,sp,68
   1892c:	d9400a04 	addi	r5,sp,40
   18930:	dfc01b15 	stw	ra,108(sp)
   18934:	d9800f15 	stw	r6,60(sp)
   18938:	d9c01015 	stw	r7,64(sp)
   1893c:	ddc01a15 	stw	r23,104(sp)
   18940:	dd801915 	stw	r22,100(sp)
   18944:	dd401815 	stw	r21,96(sp)
   18948:	dd001715 	stw	r20,92(sp)
   1894c:	dcc01615 	stw	r19,88(sp)
   18950:	dc801515 	stw	r18,84(sp)
   18954:	dc401415 	stw	r17,80(sp)
   18958:	dc001315 	stw	r16,76(sp)
   1895c:	00196b40 	call	196b4 <__unpack_d>
   18960:	d9000f04 	addi	r4,sp,60
   18964:	d9400504 	addi	r5,sp,20
   18968:	00196b40 	call	196b4 <__unpack_d>
   1896c:	d8c00a17 	ldw	r3,40(sp)
   18970:	00800044 	movi	r2,1
   18974:	10c01136 	bltu	r2,r3,189bc <__muldf3+0xa0>
   18978:	d8c00b17 	ldw	r3,44(sp)
   1897c:	d8800617 	ldw	r2,24(sp)
   18980:	d9000a04 	addi	r4,sp,40
   18984:	1884c03a 	cmpne	r2,r3,r2
   18988:	d8800b15 	stw	r2,44(sp)
   1898c:	00194900 	call	19490 <__pack_d>
   18990:	dfc01b17 	ldw	ra,108(sp)
   18994:	ddc01a17 	ldw	r23,104(sp)
   18998:	dd801917 	ldw	r22,100(sp)
   1899c:	dd401817 	ldw	r21,96(sp)
   189a0:	dd001717 	ldw	r20,92(sp)
   189a4:	dcc01617 	ldw	r19,88(sp)
   189a8:	dc801517 	ldw	r18,84(sp)
   189ac:	dc401417 	ldw	r17,80(sp)
   189b0:	dc001317 	ldw	r16,76(sp)
   189b4:	dec01c04 	addi	sp,sp,112
   189b8:	f800283a 	ret
   189bc:	d9000517 	ldw	r4,20(sp)
   189c0:	11000636 	bltu	r2,r4,189dc <__muldf3+0xc0>
   189c4:	d8800617 	ldw	r2,24(sp)
   189c8:	d8c00b17 	ldw	r3,44(sp)
   189cc:	d9000504 	addi	r4,sp,20
   189d0:	1884c03a 	cmpne	r2,r3,r2
   189d4:	d8800615 	stw	r2,24(sp)
   189d8:	003fec06 	br	1898c <__muldf3+0x70>
   189dc:	00800104 	movi	r2,4
   189e0:	1880051e 	bne	r3,r2,189f8 <__muldf3+0xdc>
   189e4:	00800084 	movi	r2,2
   189e8:	20bfe31e 	bne	r4,r2,18978 <__muldf3+0x5c>
   189ec:	010000f4 	movhi	r4,3
   189f0:	21209404 	addi	r4,r4,-32176
   189f4:	003fe506 	br	1898c <__muldf3+0x70>
   189f8:	2080031e 	bne	r4,r2,18a08 <__muldf3+0xec>
   189fc:	00800084 	movi	r2,2
   18a00:	18bffa26 	beq	r3,r2,189ec <__muldf3+0xd0>
   18a04:	003fef06 	br	189c4 <__muldf3+0xa8>
   18a08:	00800084 	movi	r2,2
   18a0c:	18bfda26 	beq	r3,r2,18978 <__muldf3+0x5c>
   18a10:	20bfec26 	beq	r4,r2,189c4 <__muldf3+0xa8>
   18a14:	dc000d17 	ldw	r16,52(sp)
   18a18:	dd000817 	ldw	r20,32(sp)
   18a1c:	dc800917 	ldw	r18,36(sp)
   18a20:	8009883a 	mov	r4,r16
   18a24:	000b883a 	mov	r5,zero
   18a28:	a00d883a 	mov	r6,r20
   18a2c:	000f883a 	mov	r7,zero
   18a30:	00193840 	call	19384 <__muldi3>
   18a34:	dc400e17 	ldw	r17,56(sp)
   18a38:	9009883a 	mov	r4,r18
   18a3c:	800d883a 	mov	r6,r16
   18a40:	000b883a 	mov	r5,zero
   18a44:	000f883a 	mov	r7,zero
   18a48:	102f883a 	mov	r23,r2
   18a4c:	1827883a 	mov	r19,r3
   18a50:	00193840 	call	19384 <__muldi3>
   18a54:	900d883a 	mov	r6,r18
   18a58:	8809883a 	mov	r4,r17
   18a5c:	000b883a 	mov	r5,zero
   18a60:	000f883a 	mov	r7,zero
   18a64:	102b883a 	mov	r21,r2
   18a68:	1821883a 	mov	r16,r3
   18a6c:	00193840 	call	19384 <__muldi3>
   18a70:	8809883a 	mov	r4,r17
   18a74:	000b883a 	mov	r5,zero
   18a78:	a00d883a 	mov	r6,r20
   18a7c:	000f883a 	mov	r7,zero
   18a80:	102d883a 	mov	r22,r2
   18a84:	1825883a 	mov	r18,r3
   18a88:	00193840 	call	19384 <__muldi3>
   18a8c:	154b883a 	add	r5,r2,r21
   18a90:	2889803a 	cmpltu	r4,r5,r2
   18a94:	1c07883a 	add	r3,r3,r16
   18a98:	20c9883a 	add	r4,r4,r3
   18a9c:	24004b36 	bltu	r4,r16,18bcc <__muldf3+0x2b0>
   18aa0:	8100011e 	bne	r16,r4,18aa8 <__muldf3+0x18c>
   18aa4:	2d404936 	bltu	r5,r21,18bcc <__muldf3+0x2b0>
   18aa8:	0011883a 	mov	r8,zero
   18aac:	0007883a 	mov	r3,zero
   18ab0:	2ccb883a 	add	r5,r5,r19
   18ab4:	b80d883a 	mov	r6,r23
   18ab8:	2cc0012e 	bgeu	r5,r19,18ac0 <__muldf3+0x1a4>
   18abc:	02000044 	movi	r8,1
   18ac0:	258f883a 	add	r7,r4,r22
   18ac4:	3909803a 	cmpltu	r4,r7,r4
   18ac8:	da400c17 	ldw	r9,48(sp)
   18acc:	2489883a 	add	r4,r4,r18
   18ad0:	d8800717 	ldw	r2,28(sp)
   18ad4:	20c9883a 	add	r4,r4,r3
   18ad8:	da800b17 	ldw	r10,44(sp)
   18adc:	d8c00617 	ldw	r3,24(sp)
   18ae0:	3a11883a 	add	r8,r7,r8
   18ae4:	4885883a 	add	r2,r9,r2
   18ae8:	50c6c03a 	cmpne	r3,r10,r3
   18aec:	41cf803a 	cmpltu	r7,r8,r7
   18af0:	12400104 	addi	r9,r2,4
   18af4:	d8c00115 	stw	r3,4(sp)
   18af8:	3909883a 	add	r4,r7,r4
   18afc:	da400215 	stw	r9,8(sp)
   18b00:	03480034 	movhi	r13,8192
   18b04:	6b7fffc4 	addi	r13,r13,-1
   18b08:	4007883a 	mov	r3,r8
   18b0c:	6900102e 	bgeu	r13,r4,18b50 <__muldf3+0x234>
   18b10:	10800144 	addi	r2,r2,5
   18b14:	180ed07a 	srli	r7,r3,1
   18b18:	18c0004c 	andi	r3,r3,1
   18b1c:	201097fa 	slli	r8,r4,31
   18b20:	281697fa 	slli	r11,r5,31
   18b24:	2008d07a 	srli	r4,r4,1
   18b28:	3014d07a 	srli	r10,r6,1
   18b2c:	2812d07a 	srli	r9,r5,1
   18b30:	1019883a 	mov	r12,r2
   18b34:	18000226 	beq	r3,zero,18b40 <__muldf3+0x224>
   18b38:	5a8cb03a 	or	r6,r11,r10
   18b3c:	49600034 	orhi	r5,r9,32768
   18b40:	41c6b03a 	or	r3,r8,r7
   18b44:	10800044 	addi	r2,r2,1
   18b48:	693ff236 	bltu	r13,r4,18b14 <__muldf3+0x1f8>
   18b4c:	db000215 	stw	r12,8(sp)
   18b50:	03440034 	movhi	r13,4096
   18b54:	6b7fffc4 	addi	r13,r13,-1
   18b58:	69001336 	bltu	r13,r4,18ba8 <__muldf3+0x28c>
   18b5c:	d8800217 	ldw	r2,8(sp)
   18b60:	10bfffc4 	addi	r2,r2,-1
   18b64:	18d3883a 	add	r9,r3,r3
   18b68:	48c7803a 	cmpltu	r3,r9,r3
   18b6c:	2109883a 	add	r4,r4,r4
   18b70:	190f883a 	add	r7,r3,r4
   18b74:	3191883a 	add	r8,r6,r6
   18b78:	4197803a 	cmpltu	r11,r8,r6
   18b7c:	2955883a 	add	r10,r5,r5
   18b80:	1019883a 	mov	r12,r2
   18b84:	4807883a 	mov	r3,r9
   18b88:	3809883a 	mov	r4,r7
   18b8c:	2800010e 	bge	r5,zero,18b94 <__muldf3+0x278>
   18b90:	48c00054 	ori	r3,r9,1
   18b94:	400d883a 	mov	r6,r8
   18b98:	5a8b883a 	add	r5,r11,r10
   18b9c:	10bfffc4 	addi	r2,r2,-1
   18ba0:	69fff02e 	bgeu	r13,r7,18b64 <__muldf3+0x248>
   18ba4:	db000215 	stw	r12,8(sp)
   18ba8:	18803fcc 	andi	r2,r3,255
   18bac:	01c02004 	movi	r7,128
   18bb0:	11c00926 	beq	r2,r7,18bd8 <__muldf3+0x2bc>
   18bb4:	008000c4 	movi	r2,3
   18bb8:	d9000415 	stw	r4,16(sp)
   18bbc:	d8c00315 	stw	r3,12(sp)
   18bc0:	d8800015 	stw	r2,0(sp)
   18bc4:	d809883a 	mov	r4,sp
   18bc8:	003f7006 	br	1898c <__muldf3+0x70>
   18bcc:	0011883a 	mov	r8,zero
   18bd0:	00c00044 	movi	r3,1
   18bd4:	003fb606 	br	18ab0 <__muldf3+0x194>
   18bd8:	19c0400c 	andi	r7,r3,256
   18bdc:	383ff51e 	bne	r7,zero,18bb4 <__muldf3+0x298>
   18be0:	314ab03a 	or	r5,r6,r5
   18be4:	283ff326 	beq	r5,zero,18bb4 <__muldf3+0x298>
   18be8:	1885883a 	add	r2,r3,r2
   18bec:	10cb803a 	cmpltu	r5,r2,r3
   18bf0:	00ffc004 	movi	r3,-256
   18bf4:	10c6703a 	and	r3,r2,r3
   18bf8:	2909883a 	add	r4,r5,r4
   18bfc:	003fed06 	br	18bb4 <__muldf3+0x298>

00018c00 <__divdf3>:
   18c00:	defff104 	addi	sp,sp,-60
   18c04:	d9000c15 	stw	r4,48(sp)
   18c08:	d9400d15 	stw	r5,52(sp)
   18c0c:	d9000c04 	addi	r4,sp,48
   18c10:	d9400504 	addi	r5,sp,20
   18c14:	dfc00e15 	stw	ra,56(sp)
   18c18:	d9800a15 	stw	r6,40(sp)
   18c1c:	d9c00b15 	stw	r7,44(sp)
   18c20:	00196b40 	call	196b4 <__unpack_d>
   18c24:	d9000a04 	addi	r4,sp,40
   18c28:	d80b883a 	mov	r5,sp
   18c2c:	00196b40 	call	196b4 <__unpack_d>
   18c30:	d8c00517 	ldw	r3,20(sp)
   18c34:	00800044 	movi	r2,1
   18c38:	10c00536 	bltu	r2,r3,18c50 <__divdf3+0x50>
   18c3c:	d9000504 	addi	r4,sp,20
   18c40:	00194900 	call	19490 <__pack_d>
   18c44:	dfc00e17 	ldw	ra,56(sp)
   18c48:	dec00f04 	addi	sp,sp,60
   18c4c:	f800283a 	ret
   18c50:	d9000017 	ldw	r4,0(sp)
   18c54:	11000536 	bltu	r2,r4,18c6c <__divdf3+0x6c>
   18c58:	d809883a 	mov	r4,sp
   18c5c:	00194900 	call	19490 <__pack_d>
   18c60:	dfc00e17 	ldw	ra,56(sp)
   18c64:	dec00f04 	addi	sp,sp,60
   18c68:	f800283a 	ret
   18c6c:	d9800617 	ldw	r6,24(sp)
   18c70:	d9400117 	ldw	r5,4(sp)
   18c74:	00800104 	movi	r2,4
   18c78:	314af03a 	xor	r5,r6,r5
   18c7c:	d9400615 	stw	r5,24(sp)
   18c80:	18800226 	beq	r3,r2,18c8c <__divdf3+0x8c>
   18c84:	01400084 	movi	r5,2
   18c88:	1940041e 	bne	r3,r5,18c9c <__divdf3+0x9c>
   18c8c:	193feb1e 	bne	r3,r4,18c3c <__divdf3+0x3c>
   18c90:	010000f4 	movhi	r4,3
   18c94:	21209404 	addi	r4,r4,-32176
   18c98:	003fe906 	br	18c40 <__divdf3+0x40>
   18c9c:	20803326 	beq	r4,r2,18d6c <__divdf3+0x16c>
   18ca0:	21403726 	beq	r4,r5,18d80 <__divdf3+0x180>
   18ca4:	d8800217 	ldw	r2,8(sp)
   18ca8:	d9000717 	ldw	r4,28(sp)
   18cac:	d8c00917 	ldw	r3,36(sp)
   18cb0:	da000417 	ldw	r8,16(sp)
   18cb4:	2089c83a 	sub	r4,r4,r2
   18cb8:	d9000715 	stw	r4,28(sp)
   18cbc:	d8800817 	ldw	r2,32(sp)
   18cc0:	dbc00317 	ldw	r15,12(sp)
   18cc4:	1a000236 	bltu	r3,r8,18cd0 <__divdf3+0xd0>
   18cc8:	40c0081e 	bne	r8,r3,18cec <__divdf3+0xec>
   18ccc:	13c0072e 	bgeu	r2,r15,18cec <__divdf3+0xec>
   18cd0:	108b883a 	add	r5,r2,r2
   18cd4:	288d803a 	cmpltu	r6,r5,r2
   18cd8:	18c7883a 	add	r3,r3,r3
   18cdc:	213fffc4 	addi	r4,r4,-1
   18ce0:	2805883a 	mov	r2,r5
   18ce4:	30c7883a 	add	r3,r6,r3
   18ce8:	d9000715 	stw	r4,28(sp)
   18cec:	01400f44 	movi	r5,61
   18cf0:	000f883a 	mov	r7,zero
   18cf4:	01040034 	movhi	r4,4096
   18cf8:	0019883a 	mov	r12,zero
   18cfc:	001b883a 	mov	r13,zero
   18d00:	201697fa 	slli	r11,r4,31
   18d04:	3814d07a 	srli	r10,r7,1
   18d08:	297fffc4 	addi	r5,r5,-1
   18d0c:	1a000936 	bltu	r3,r8,18d34 <__divdf3+0x134>
   18d10:	13cdc83a 	sub	r6,r2,r15
   18d14:	1193803a 	cmpltu	r9,r2,r6
   18d18:	1a1dc83a 	sub	r14,r3,r8
   18d1c:	40c0011e 	bne	r8,r3,18d24 <__divdf3+0x124>
   18d20:	13c00436 	bltu	r2,r15,18d34 <__divdf3+0x134>
   18d24:	3005883a 	mov	r2,r6
   18d28:	7247c83a 	sub	r3,r14,r9
   18d2c:	61d8b03a 	or	r12,r12,r7
   18d30:	691ab03a 	or	r13,r13,r4
   18d34:	108d883a 	add	r6,r2,r2
   18d38:	3093803a 	cmpltu	r9,r6,r2
   18d3c:	18c7883a 	add	r3,r3,r3
   18d40:	5a8eb03a 	or	r7,r11,r10
   18d44:	2008d07a 	srli	r4,r4,1
   18d48:	3005883a 	mov	r2,r6
   18d4c:	48c7883a 	add	r3,r9,r3
   18d50:	283feb1e 	bne	r5,zero,18d00 <__divdf3+0x100>
   18d54:	61003fcc 	andi	r4,r12,255
   18d58:	01402004 	movi	r5,128
   18d5c:	21400b26 	beq	r4,r5,18d8c <__divdf3+0x18c>
   18d60:	db000815 	stw	r12,32(sp)
   18d64:	db400915 	stw	r13,36(sp)
   18d68:	003fb406 	br	18c3c <__divdf3+0x3c>
   18d6c:	d8000815 	stw	zero,32(sp)
   18d70:	d8000915 	stw	zero,36(sp)
   18d74:	d8000715 	stw	zero,28(sp)
   18d78:	d9000504 	addi	r4,sp,20
   18d7c:	003fb006 	br	18c40 <__divdf3+0x40>
   18d80:	d8800515 	stw	r2,20(sp)
   18d84:	d9000504 	addi	r4,sp,20
   18d88:	003fad06 	br	18c40 <__divdf3+0x40>
   18d8c:	6140400c 	andi	r5,r12,256
   18d90:	283ff31e 	bne	r5,zero,18d60 <__divdf3+0x160>
   18d94:	30c4b03a 	or	r2,r6,r3
   18d98:	103ff126 	beq	r2,zero,18d60 <__divdf3+0x160>
   18d9c:	6109883a 	add	r4,r12,r4
   18da0:	2305803a 	cmpltu	r2,r4,r12
   18da4:	033fc004 	movi	r12,-256
   18da8:	2318703a 	and	r12,r4,r12
   18dac:	135b883a 	add	r13,r2,r13
   18db0:	003feb06 	br	18d60 <__divdf3+0x160>

00018db4 <__eqdf2>:
   18db4:	defff104 	addi	sp,sp,-60
   18db8:	d9000c15 	stw	r4,48(sp)
   18dbc:	d9400d15 	stw	r5,52(sp)
   18dc0:	d9000c04 	addi	r4,sp,48
   18dc4:	d9400504 	addi	r5,sp,20
   18dc8:	dfc00e15 	stw	ra,56(sp)
   18dcc:	d9800a15 	stw	r6,40(sp)
   18dd0:	d9c00b15 	stw	r7,44(sp)
   18dd4:	00196b40 	call	196b4 <__unpack_d>
   18dd8:	d9000a04 	addi	r4,sp,40
   18ddc:	d80b883a 	mov	r5,sp
   18de0:	00196b40 	call	196b4 <__unpack_d>
   18de4:	d8c00517 	ldw	r3,20(sp)
   18de8:	00800044 	movi	r2,1
   18dec:	10c0052e 	bgeu	r2,r3,18e04 <__eqdf2+0x50>
   18df0:	d8c00017 	ldw	r3,0(sp)
   18df4:	10c0032e 	bgeu	r2,r3,18e04 <__eqdf2+0x50>
   18df8:	d9000504 	addi	r4,sp,20
   18dfc:	d80b883a 	mov	r5,sp
   18e00:	00197b80 	call	197b8 <__fpcmp_parts_d>
   18e04:	dfc00e17 	ldw	ra,56(sp)
   18e08:	dec00f04 	addi	sp,sp,60
   18e0c:	f800283a 	ret

00018e10 <__nedf2>:
   18e10:	defff104 	addi	sp,sp,-60
   18e14:	d9000c15 	stw	r4,48(sp)
   18e18:	d9400d15 	stw	r5,52(sp)
   18e1c:	d9000c04 	addi	r4,sp,48
   18e20:	d9400504 	addi	r5,sp,20
   18e24:	dfc00e15 	stw	ra,56(sp)
   18e28:	d9800a15 	stw	r6,40(sp)
   18e2c:	d9c00b15 	stw	r7,44(sp)
   18e30:	00196b40 	call	196b4 <__unpack_d>
   18e34:	d9000a04 	addi	r4,sp,40
   18e38:	d80b883a 	mov	r5,sp
   18e3c:	00196b40 	call	196b4 <__unpack_d>
   18e40:	d8c00517 	ldw	r3,20(sp)
   18e44:	00800044 	movi	r2,1
   18e48:	10c0052e 	bgeu	r2,r3,18e60 <__nedf2+0x50>
   18e4c:	d8c00017 	ldw	r3,0(sp)
   18e50:	10c0032e 	bgeu	r2,r3,18e60 <__nedf2+0x50>
   18e54:	d9000504 	addi	r4,sp,20
   18e58:	d80b883a 	mov	r5,sp
   18e5c:	00197b80 	call	197b8 <__fpcmp_parts_d>
   18e60:	dfc00e17 	ldw	ra,56(sp)
   18e64:	dec00f04 	addi	sp,sp,60
   18e68:	f800283a 	ret

00018e6c <__gtdf2>:
   18e6c:	defff104 	addi	sp,sp,-60
   18e70:	d9000c15 	stw	r4,48(sp)
   18e74:	d9400d15 	stw	r5,52(sp)
   18e78:	d9000c04 	addi	r4,sp,48
   18e7c:	d9400504 	addi	r5,sp,20
   18e80:	dfc00e15 	stw	ra,56(sp)
   18e84:	d9800a15 	stw	r6,40(sp)
   18e88:	d9c00b15 	stw	r7,44(sp)
   18e8c:	00196b40 	call	196b4 <__unpack_d>
   18e90:	d9000a04 	addi	r4,sp,40
   18e94:	d80b883a 	mov	r5,sp
   18e98:	00196b40 	call	196b4 <__unpack_d>
   18e9c:	d8c00517 	ldw	r3,20(sp)
   18ea0:	00800044 	movi	r2,1
   18ea4:	10c0082e 	bgeu	r2,r3,18ec8 <__gtdf2+0x5c>
   18ea8:	d8c00017 	ldw	r3,0(sp)
   18eac:	10c0062e 	bgeu	r2,r3,18ec8 <__gtdf2+0x5c>
   18eb0:	d9000504 	addi	r4,sp,20
   18eb4:	d80b883a 	mov	r5,sp
   18eb8:	00197b80 	call	197b8 <__fpcmp_parts_d>
   18ebc:	dfc00e17 	ldw	ra,56(sp)
   18ec0:	dec00f04 	addi	sp,sp,60
   18ec4:	f800283a 	ret
   18ec8:	00bfffc4 	movi	r2,-1
   18ecc:	003ffb06 	br	18ebc <__gtdf2+0x50>

00018ed0 <__gedf2>:
   18ed0:	defff104 	addi	sp,sp,-60
   18ed4:	d9000c15 	stw	r4,48(sp)
   18ed8:	d9400d15 	stw	r5,52(sp)
   18edc:	d9000c04 	addi	r4,sp,48
   18ee0:	d9400504 	addi	r5,sp,20
   18ee4:	dfc00e15 	stw	ra,56(sp)
   18ee8:	d9800a15 	stw	r6,40(sp)
   18eec:	d9c00b15 	stw	r7,44(sp)
   18ef0:	00196b40 	call	196b4 <__unpack_d>
   18ef4:	d9000a04 	addi	r4,sp,40
   18ef8:	d80b883a 	mov	r5,sp
   18efc:	00196b40 	call	196b4 <__unpack_d>
   18f00:	d8c00517 	ldw	r3,20(sp)
   18f04:	00800044 	movi	r2,1
   18f08:	10c0082e 	bgeu	r2,r3,18f2c <__gedf2+0x5c>
   18f0c:	d8c00017 	ldw	r3,0(sp)
   18f10:	10c0062e 	bgeu	r2,r3,18f2c <__gedf2+0x5c>
   18f14:	d9000504 	addi	r4,sp,20
   18f18:	d80b883a 	mov	r5,sp
   18f1c:	00197b80 	call	197b8 <__fpcmp_parts_d>
   18f20:	dfc00e17 	ldw	ra,56(sp)
   18f24:	dec00f04 	addi	sp,sp,60
   18f28:	f800283a 	ret
   18f2c:	00bfffc4 	movi	r2,-1
   18f30:	003ffb06 	br	18f20 <__gedf2+0x50>

00018f34 <__ltdf2>:
   18f34:	defff104 	addi	sp,sp,-60
   18f38:	d9000c15 	stw	r4,48(sp)
   18f3c:	d9400d15 	stw	r5,52(sp)
   18f40:	d9000c04 	addi	r4,sp,48
   18f44:	d9400504 	addi	r5,sp,20
   18f48:	dfc00e15 	stw	ra,56(sp)
   18f4c:	d9800a15 	stw	r6,40(sp)
   18f50:	d9c00b15 	stw	r7,44(sp)
   18f54:	00196b40 	call	196b4 <__unpack_d>
   18f58:	d9000a04 	addi	r4,sp,40
   18f5c:	d80b883a 	mov	r5,sp
   18f60:	00196b40 	call	196b4 <__unpack_d>
   18f64:	d8c00517 	ldw	r3,20(sp)
   18f68:	00800044 	movi	r2,1
   18f6c:	10c0052e 	bgeu	r2,r3,18f84 <__ltdf2+0x50>
   18f70:	d8c00017 	ldw	r3,0(sp)
   18f74:	10c0032e 	bgeu	r2,r3,18f84 <__ltdf2+0x50>
   18f78:	d9000504 	addi	r4,sp,20
   18f7c:	d80b883a 	mov	r5,sp
   18f80:	00197b80 	call	197b8 <__fpcmp_parts_d>
   18f84:	dfc00e17 	ldw	ra,56(sp)
   18f88:	dec00f04 	addi	sp,sp,60
   18f8c:	f800283a 	ret

00018f90 <__floatsidf>:
   18f90:	2004d7fa 	srli	r2,r4,31
   18f94:	defff904 	addi	sp,sp,-28
   18f98:	00c000c4 	movi	r3,3
   18f9c:	dfc00615 	stw	ra,24(sp)
   18fa0:	dc000515 	stw	r16,20(sp)
   18fa4:	d8c00015 	stw	r3,0(sp)
   18fa8:	d8800115 	stw	r2,4(sp)
   18fac:	2000081e 	bne	r4,zero,18fd0 <__floatsidf+0x40>
   18fb0:	00800084 	movi	r2,2
   18fb4:	d8800015 	stw	r2,0(sp)
   18fb8:	d809883a 	mov	r4,sp
   18fbc:	00194900 	call	19490 <__pack_d>
   18fc0:	dfc00617 	ldw	ra,24(sp)
   18fc4:	dc000517 	ldw	r16,20(sp)
   18fc8:	dec00704 	addi	sp,sp,28
   18fcc:	f800283a 	ret
   18fd0:	00c00f04 	movi	r3,60
   18fd4:	d8c00215 	stw	r3,8(sp)
   18fd8:	10000f1e 	bne	r2,zero,19018 <__floatsidf+0x88>
   18fdc:	2021883a 	mov	r16,r4
   18fe0:	8009883a 	mov	r4,r16
   18fe4:	00193e40 	call	193e4 <__clzsi2>
   18fe8:	11000744 	addi	r4,r2,29
   18fec:	0100110e 	bge	zero,r4,19034 <__floatsidf+0xa4>
   18ff0:	10ffff44 	addi	r3,r2,-3
   18ff4:	18001216 	blt	r3,zero,19040 <__floatsidf+0xb0>
   18ff8:	80c6983a 	sll	r3,r16,r3
   18ffc:	0009883a 	mov	r4,zero
   19000:	014007c4 	movi	r5,31
   19004:	2885c83a 	sub	r2,r5,r2
   19008:	d9000315 	stw	r4,12(sp)
   1900c:	d8c00415 	stw	r3,16(sp)
   19010:	d8800215 	stw	r2,8(sp)
   19014:	003fe806 	br	18fb8 <__floatsidf+0x28>
   19018:	00a00034 	movhi	r2,32768
   1901c:	20800e26 	beq	r4,r2,19058 <__floatsidf+0xc8>
   19020:	0121c83a 	sub	r16,zero,r4
   19024:	8009883a 	mov	r4,r16
   19028:	00193e40 	call	193e4 <__clzsi2>
   1902c:	11000744 	addi	r4,r2,29
   19030:	013fef16 	blt	zero,r4,18ff0 <__floatsidf+0x60>
   19034:	dc000315 	stw	r16,12(sp)
   19038:	d8000415 	stw	zero,16(sp)
   1903c:	003fde06 	br	18fb8 <__floatsidf+0x28>
   19040:	800ad07a 	srli	r5,r16,1
   19044:	00c007c4 	movi	r3,31
   19048:	1907c83a 	sub	r3,r3,r4
   1904c:	28c6d83a 	srl	r3,r5,r3
   19050:	8108983a 	sll	r4,r16,r4
   19054:	003fea06 	br	19000 <__floatsidf+0x70>
   19058:	0005883a 	mov	r2,zero
   1905c:	00f07834 	movhi	r3,49632
   19060:	003fd706 	br	18fc0 <__floatsidf+0x30>

00019064 <__fixdfsi>:
   19064:	defff804 	addi	sp,sp,-32
   19068:	d9000515 	stw	r4,20(sp)
   1906c:	d9400615 	stw	r5,24(sp)
   19070:	d9000504 	addi	r4,sp,20
   19074:	d80b883a 	mov	r5,sp
   19078:	dfc00715 	stw	ra,28(sp)
   1907c:	00196b40 	call	196b4 <__unpack_d>
   19080:	d8800017 	ldw	r2,0(sp)
   19084:	00c00084 	movi	r3,2
   19088:	10c01c26 	beq	r2,r3,190fc <__fixdfsi+0x98>
   1908c:	00c00044 	movi	r3,1
   19090:	18801a2e 	bgeu	r3,r2,190fc <__fixdfsi+0x98>
   19094:	00c00104 	movi	r3,4
   19098:	10c01126 	beq	r2,r3,190e0 <__fixdfsi+0x7c>
   1909c:	d8800217 	ldw	r2,8(sp)
   190a0:	10001616 	blt	r2,zero,190fc <__fixdfsi+0x98>
   190a4:	00c00784 	movi	r3,30
   190a8:	18800d16 	blt	r3,r2,190e0 <__fixdfsi+0x7c>
   190ac:	00c00f04 	movi	r3,60
   190b0:	1885c83a 	sub	r2,r3,r2
   190b4:	10fff804 	addi	r3,r2,-32
   190b8:	d9400317 	ldw	r5,12(sp)
   190bc:	d9000417 	ldw	r4,16(sp)
   190c0:	18001616 	blt	r3,zero,1911c <__fixdfsi+0xb8>
   190c4:	20c4d83a 	srl	r2,r4,r3
   190c8:	d8c00117 	ldw	r3,4(sp)
   190cc:	18000126 	beq	r3,zero,190d4 <__fixdfsi+0x70>
   190d0:	0085c83a 	sub	r2,zero,r2
   190d4:	dfc00717 	ldw	ra,28(sp)
   190d8:	dec00804 	addi	sp,sp,32
   190dc:	f800283a 	ret
   190e0:	d8800117 	ldw	r2,4(sp)
   190e4:	1000091e 	bne	r2,zero,1910c <__fixdfsi+0xa8>
   190e8:	00a00034 	movhi	r2,32768
   190ec:	10bfffc4 	addi	r2,r2,-1
   190f0:	dfc00717 	ldw	ra,28(sp)
   190f4:	dec00804 	addi	sp,sp,32
   190f8:	f800283a 	ret
   190fc:	0005883a 	mov	r2,zero
   19100:	dfc00717 	ldw	ra,28(sp)
   19104:	dec00804 	addi	sp,sp,32
   19108:	f800283a 	ret
   1910c:	00a00034 	movhi	r2,32768
   19110:	dfc00717 	ldw	ra,28(sp)
   19114:	dec00804 	addi	sp,sp,32
   19118:	f800283a 	ret
   1911c:	2008907a 	slli	r4,r4,1
   19120:	018007c4 	movi	r6,31
   19124:	308dc83a 	sub	r6,r6,r2
   19128:	2188983a 	sll	r4,r4,r6
   1912c:	2884d83a 	srl	r2,r5,r2
   19130:	2084b03a 	or	r2,r4,r2
   19134:	003fe406 	br	190c8 <__fixdfsi+0x64>

00019138 <__floatunsidf>:
   19138:	defff904 	addi	sp,sp,-28
   1913c:	dc000515 	stw	r16,20(sp)
   19140:	dfc00615 	stw	ra,24(sp)
   19144:	d8000115 	stw	zero,4(sp)
   19148:	2021883a 	mov	r16,r4
   1914c:	20001726 	beq	r4,zero,191ac <__floatunsidf+0x74>
   19150:	008000c4 	movi	r2,3
   19154:	d8800015 	stw	r2,0(sp)
   19158:	00800f04 	movi	r2,60
   1915c:	d8800215 	stw	r2,8(sp)
   19160:	00193e40 	call	193e4 <__clzsi2>
   19164:	10c00744 	addi	r3,r2,29
   19168:	18001816 	blt	r3,zero,191cc <__floatunsidf+0x94>
   1916c:	18002d26 	beq	r3,zero,19224 <__floatunsidf+0xec>
   19170:	113fff44 	addi	r4,r2,-3
   19174:	20002e16 	blt	r4,zero,19230 <__floatunsidf+0xf8>
   19178:	8108983a 	sll	r4,r16,r4
   1917c:	0021883a 	mov	r16,zero
   19180:	014007c4 	movi	r5,31
   19184:	2885c83a 	sub	r2,r5,r2
   19188:	dc000315 	stw	r16,12(sp)
   1918c:	d9000415 	stw	r4,16(sp)
   19190:	d8800215 	stw	r2,8(sp)
   19194:	d809883a 	mov	r4,sp
   19198:	00194900 	call	19490 <__pack_d>
   1919c:	dfc00617 	ldw	ra,24(sp)
   191a0:	dc000517 	ldw	r16,20(sp)
   191a4:	dec00704 	addi	sp,sp,28
   191a8:	f800283a 	ret
   191ac:	00800084 	movi	r2,2
   191b0:	d809883a 	mov	r4,sp
   191b4:	d8800015 	stw	r2,0(sp)
   191b8:	00194900 	call	19490 <__pack_d>
   191bc:	dfc00617 	ldw	ra,24(sp)
   191c0:	dc000517 	ldw	r16,20(sp)
   191c4:	dec00704 	addi	sp,sp,28
   191c8:	f800283a 	ret
   191cc:	00c7c83a 	sub	r3,zero,r3
   191d0:	193ff804 	addi	r4,r3,-32
   191d4:	20001c16 	blt	r4,zero,19248 <__floatunsidf+0x110>
   191d8:	000b883a 	mov	r5,zero
   191dc:	2009d7fa 	srai	r4,r4,31
   191e0:	80c6d83a 	srl	r3,r16,r3
   191e4:	297fffc4 	addi	r5,r5,-1
   191e8:	2c20703a 	and	r16,r5,r16
   191ec:	8020c03a 	cmpne	r16,r16,zero
   191f0:	1906703a 	and	r3,r3,r4
   191f4:	010007c4 	movi	r4,31
   191f8:	80c6b03a 	or	r3,r16,r3
   191fc:	2085c83a 	sub	r2,r4,r2
   19200:	d809883a 	mov	r4,sp
   19204:	d8c00315 	stw	r3,12(sp)
   19208:	d8000415 	stw	zero,16(sp)
   1920c:	d8800215 	stw	r2,8(sp)
   19210:	00194900 	call	19490 <__pack_d>
   19214:	dfc00617 	ldw	ra,24(sp)
   19218:	dc000517 	ldw	r16,20(sp)
   1921c:	dec00704 	addi	sp,sp,28
   19220:	f800283a 	ret
   19224:	dc000315 	stw	r16,12(sp)
   19228:	d8000415 	stw	zero,16(sp)
   1922c:	003fd906 	br	19194 <__floatunsidf+0x5c>
   19230:	800ad07a 	srli	r5,r16,1
   19234:	010007c4 	movi	r4,31
   19238:	20c9c83a 	sub	r4,r4,r3
   1923c:	2908d83a 	srl	r4,r5,r4
   19240:	80e0983a 	sll	r16,r16,r3
   19244:	003fce06 	br	19180 <__floatunsidf+0x48>
   19248:	01400044 	movi	r5,1
   1924c:	28ca983a 	sll	r5,r5,r3
   19250:	003fe206 	br	191dc <__floatunsidf+0xa4>

00019254 <udivmodsi4>:
   19254:	2005883a 	mov	r2,r4
   19258:	2900182e 	bgeu	r5,r4,192bc <udivmodsi4+0x68>
   1925c:	28001716 	blt	r5,zero,192bc <udivmodsi4+0x68>
   19260:	01000804 	movi	r4,32
   19264:	00c00044 	movi	r3,1
   19268:	00000206 	br	19274 <udivmodsi4+0x20>
   1926c:	20001126 	beq	r4,zero,192b4 <udivmodsi4+0x60>
   19270:	28000516 	blt	r5,zero,19288 <udivmodsi4+0x34>
   19274:	294b883a 	add	r5,r5,r5
   19278:	213fffc4 	addi	r4,r4,-1
   1927c:	18c7883a 	add	r3,r3,r3
   19280:	28bffa36 	bltu	r5,r2,1926c <udivmodsi4+0x18>
   19284:	18000b26 	beq	r3,zero,192b4 <udivmodsi4+0x60>
   19288:	0009883a 	mov	r4,zero
   1928c:	11400236 	bltu	r2,r5,19298 <udivmodsi4+0x44>
   19290:	1145c83a 	sub	r2,r2,r5
   19294:	20c8b03a 	or	r4,r4,r3
   19298:	1806d07a 	srli	r3,r3,1
   1929c:	280ad07a 	srli	r5,r5,1
   192a0:	183ffa1e 	bne	r3,zero,1928c <udivmodsi4+0x38>
   192a4:	3000021e 	bne	r6,zero,192b0 <udivmodsi4+0x5c>
   192a8:	2005883a 	mov	r2,r4
   192ac:	f800283a 	ret
   192b0:	f800283a 	ret
   192b4:	0009883a 	mov	r4,zero
   192b8:	003ffa06 	br	192a4 <udivmodsi4+0x50>
   192bc:	00c00044 	movi	r3,1
   192c0:	0009883a 	mov	r4,zero
   192c4:	003ff106 	br	1928c <udivmodsi4+0x38>

000192c8 <__divsi3>:
   192c8:	defffe04 	addi	sp,sp,-8
   192cc:	dfc00115 	stw	ra,4(sp)
   192d0:	dc000015 	stw	r16,0(sp)
   192d4:	20000a16 	blt	r4,zero,19300 <__divsi3+0x38>
   192d8:	0021883a 	mov	r16,zero
   192dc:	28000b16 	blt	r5,zero,1930c <__divsi3+0x44>
   192e0:	000d883a 	mov	r6,zero
   192e4:	00192540 	call	19254 <udivmodsi4>
   192e8:	80000126 	beq	r16,zero,192f0 <__divsi3+0x28>
   192ec:	0085c83a 	sub	r2,zero,r2
   192f0:	dfc00117 	ldw	ra,4(sp)
   192f4:	dc000017 	ldw	r16,0(sp)
   192f8:	dec00204 	addi	sp,sp,8
   192fc:	f800283a 	ret
   19300:	0109c83a 	sub	r4,zero,r4
   19304:	04000044 	movi	r16,1
   19308:	283ff50e 	bge	r5,zero,192e0 <__divsi3+0x18>
   1930c:	014bc83a 	sub	r5,zero,r5
   19310:	8400005c 	xori	r16,r16,1
   19314:	003ff206 	br	192e0 <__divsi3+0x18>

00019318 <__modsi3>:
   19318:	deffff04 	addi	sp,sp,-4
   1931c:	dfc00015 	stw	ra,0(sp)
   19320:	20000516 	blt	r4,zero,19338 <__modsi3+0x20>
   19324:	28000c16 	blt	r5,zero,19358 <__modsi3+0x40>
   19328:	01800044 	movi	r6,1
   1932c:	dfc00017 	ldw	ra,0(sp)
   19330:	dec00104 	addi	sp,sp,4
   19334:	00192541 	jmpi	19254 <udivmodsi4>
   19338:	0109c83a 	sub	r4,zero,r4
   1933c:	28000b16 	blt	r5,zero,1936c <__modsi3+0x54>
   19340:	01800044 	movi	r6,1
   19344:	00192540 	call	19254 <udivmodsi4>
   19348:	0085c83a 	sub	r2,zero,r2
   1934c:	dfc00017 	ldw	ra,0(sp)
   19350:	dec00104 	addi	sp,sp,4
   19354:	f800283a 	ret
   19358:	014bc83a 	sub	r5,zero,r5
   1935c:	01800044 	movi	r6,1
   19360:	dfc00017 	ldw	ra,0(sp)
   19364:	dec00104 	addi	sp,sp,4
   19368:	00192541 	jmpi	19254 <udivmodsi4>
   1936c:	014bc83a 	sub	r5,zero,r5
   19370:	003ff306 	br	19340 <__modsi3+0x28>

00019374 <__udivsi3>:
   19374:	000d883a 	mov	r6,zero
   19378:	00192541 	jmpi	19254 <udivmodsi4>

0001937c <__umodsi3>:
   1937c:	01800044 	movi	r6,1
   19380:	00192541 	jmpi	19254 <udivmodsi4>

00019384 <__muldi3>:
   19384:	20bfffcc 	andi	r2,r4,65535
   19388:	2010d43a 	srli	r8,r4,16
   1938c:	30ffffcc 	andi	r3,r6,65535
   19390:	3014d43a 	srli	r10,r6,16
   19394:	1893383a 	mul	r9,r3,r2
   19398:	1a07383a 	mul	r3,r3,r8
   1939c:	5085383a 	mul	r2,r10,r2
   193a0:	4816d43a 	srli	r11,r9,16
   193a4:	5211383a 	mul	r8,r10,r8
   193a8:	1885883a 	add	r2,r3,r2
   193ac:	12c5883a 	add	r2,r2,r11
   193b0:	10c0022e 	bgeu	r2,r3,193bc <__muldi3+0x38>
   193b4:	00c00074 	movhi	r3,1
   193b8:	40d1883a 	add	r8,r8,r3
   193bc:	1014d43a 	srli	r10,r2,16
   193c0:	21c9383a 	mul	r4,r4,r7
   193c4:	314d383a 	mul	r6,r6,r5
   193c8:	1004943a 	slli	r2,r2,16
   193cc:	4291883a 	add	r8,r8,r10
   193d0:	4a7fffcc 	andi	r9,r9,65535
   193d4:	2187883a 	add	r3,r4,r6
   193d8:	1245883a 	add	r2,r2,r9
   193dc:	1a07883a 	add	r3,r3,r8
   193e0:	f800283a 	ret

000193e4 <__clzsi2>:
   193e4:	00bfffd4 	movui	r2,65535
   193e8:	11000b36 	bltu	r2,r4,19418 <__clzsi2+0x34>
   193ec:	00803fc4 	movi	r2,255
   193f0:	11001e2e 	bgeu	r2,r4,1946c <__clzsi2+0x88>
   193f4:	00c00204 	movi	r3,8
   193f8:	20c8d83a 	srl	r4,r4,r3
   193fc:	00c000f4 	movhi	r3,3
   19400:	18e09904 	addi	r3,r3,-32156
   19404:	00800604 	movi	r2,24
   19408:	1909883a 	add	r4,r3,r4
   1940c:	20c00003 	ldbu	r3,0(r4)
   19410:	10c5c83a 	sub	r2,r2,r3
   19414:	f800283a 	ret
   19418:	00804034 	movhi	r2,256
   1941c:	10bfffc4 	addi	r2,r2,-1
   19420:	11000936 	bltu	r2,r4,19448 <__clzsi2+0x64>
   19424:	00800404 	movi	r2,16
   19428:	1007883a 	mov	r3,r2
   1942c:	20c8d83a 	srl	r4,r4,r3
   19430:	00c000f4 	movhi	r3,3
   19434:	18e09904 	addi	r3,r3,-32156
   19438:	1909883a 	add	r4,r3,r4
   1943c:	20c00003 	ldbu	r3,0(r4)
   19440:	10c5c83a 	sub	r2,r2,r3
   19444:	f800283a 	ret
   19448:	00c00604 	movi	r3,24
   1944c:	20c8d83a 	srl	r4,r4,r3
   19450:	00c000f4 	movhi	r3,3
   19454:	18e09904 	addi	r3,r3,-32156
   19458:	00800204 	movi	r2,8
   1945c:	1909883a 	add	r4,r3,r4
   19460:	20c00003 	ldbu	r3,0(r4)
   19464:	10c5c83a 	sub	r2,r2,r3
   19468:	f800283a 	ret
   1946c:	0007883a 	mov	r3,zero
   19470:	20c8d83a 	srl	r4,r4,r3
   19474:	00c000f4 	movhi	r3,3
   19478:	18e09904 	addi	r3,r3,-32156
   1947c:	00800804 	movi	r2,32
   19480:	1909883a 	add	r4,r3,r4
   19484:	20c00003 	ldbu	r3,0(r4)
   19488:	10c5c83a 	sub	r2,r2,r3
   1948c:	f800283a 	ret

00019490 <__pack_d>:
   19490:	20800017 	ldw	r2,0(r4)
   19494:	defff804 	addi	sp,sp,-32
   19498:	dcc00315 	stw	r19,12(sp)
   1949c:	dc800215 	stw	r18,8(sp)
   194a0:	dfc00715 	stw	ra,28(sp)
   194a4:	dd800615 	stw	r22,24(sp)
   194a8:	dd400515 	stw	r21,20(sp)
   194ac:	dd000415 	stw	r20,16(sp)
   194b0:	dc400115 	stw	r17,4(sp)
   194b4:	dc000015 	stw	r16,0(sp)
   194b8:	04800044 	movi	r18,1
   194bc:	24400317 	ldw	r17,12(r4)
   194c0:	24000417 	ldw	r16,16(r4)
   194c4:	24c00117 	ldw	r19,4(r4)
   194c8:	9080422e 	bgeu	r18,r2,195d4 <__pack_d+0x144>
   194cc:	00c00104 	movi	r3,4
   194d0:	10c03c26 	beq	r2,r3,195c4 <__pack_d+0x134>
   194d4:	00c00084 	movi	r3,2
   194d8:	10c01926 	beq	r2,r3,19540 <__pack_d+0xb0>
   194dc:	8c04b03a 	or	r2,r17,r16
   194e0:	10001726 	beq	r2,zero,19540 <__pack_d+0xb0>
   194e4:	21000217 	ldw	r4,8(r4)
   194e8:	00bf0084 	movi	r2,-1022
   194ec:	20804016 	blt	r4,r2,195f0 <__pack_d+0x160>
   194f0:	0080ffc4 	movi	r2,1023
   194f4:	11003316 	blt	r2,r4,195c4 <__pack_d+0x134>
   194f8:	88803fcc 	andi	r2,r17,255
   194fc:	00c02004 	movi	r3,128
   19500:	10c02926 	beq	r2,r3,195a8 <__pack_d+0x118>
   19504:	88801fc4 	addi	r2,r17,127
   19508:	1463803a 	cmpltu	r17,r2,r17
   1950c:	8c21883a 	add	r16,r17,r16
   19510:	1023883a 	mov	r17,r2
   19514:	00880034 	movhi	r2,8192
   19518:	10bfffc4 	addi	r2,r2,-1
   1951c:	14001c36 	bltu	r2,r16,19590 <__pack_d+0x100>
   19520:	2100ffc4 	addi	r4,r4,1023
   19524:	8006963a 	slli	r3,r16,24
   19528:	8804d23a 	srli	r2,r17,8
   1952c:	8020913a 	slli	r16,r16,4
   19530:	2101ffcc 	andi	r4,r4,2047
   19534:	1884b03a 	or	r2,r3,r2
   19538:	8020d33a 	srli	r16,r16,12
   1953c:	00000306 	br	1954c <__pack_d+0xbc>
   19540:	0009883a 	mov	r4,zero
   19544:	0005883a 	mov	r2,zero
   19548:	0021883a 	mov	r16,zero
   1954c:	2008953a 	slli	r4,r4,20
   19550:	982697fa 	slli	r19,r19,31
   19554:	00c00434 	movhi	r3,16
   19558:	18ffffc4 	addi	r3,r3,-1
   1955c:	80e0703a 	and	r16,r16,r3
   19560:	8106b03a 	or	r3,r16,r4
   19564:	1cc6b03a 	or	r3,r3,r19
   19568:	dfc00717 	ldw	ra,28(sp)
   1956c:	dd800617 	ldw	r22,24(sp)
   19570:	dd400517 	ldw	r21,20(sp)
   19574:	dd000417 	ldw	r20,16(sp)
   19578:	dcc00317 	ldw	r19,12(sp)
   1957c:	dc800217 	ldw	r18,8(sp)
   19580:	dc400117 	ldw	r17,4(sp)
   19584:	dc000017 	ldw	r16,0(sp)
   19588:	dec00804 	addi	sp,sp,32
   1958c:	f800283a 	ret
   19590:	800697fa 	slli	r3,r16,31
   19594:	8804d07a 	srli	r2,r17,1
   19598:	21010004 	addi	r4,r4,1024
   1959c:	8020d07a 	srli	r16,r16,1
   195a0:	18a2b03a 	or	r17,r3,r2
   195a4:	003fdf06 	br	19524 <__pack_d+0x94>
   195a8:	88c0400c 	andi	r3,r17,256
   195ac:	183fd926 	beq	r3,zero,19514 <__pack_d+0x84>
   195b0:	8885883a 	add	r2,r17,r2
   195b4:	1463803a 	cmpltu	r17,r2,r17
   195b8:	8c21883a 	add	r16,r17,r16
   195bc:	1023883a 	mov	r17,r2
   195c0:	003fd406 	br	19514 <__pack_d+0x84>
   195c4:	0101ffc4 	movi	r4,2047
   195c8:	0005883a 	mov	r2,zero
   195cc:	0021883a 	mov	r16,zero
   195d0:	003fde06 	br	1954c <__pack_d+0xbc>
   195d4:	84000234 	orhi	r16,r16,8
   195d8:	00c00434 	movhi	r3,16
   195dc:	18ffffc4 	addi	r3,r3,-1
   195e0:	8805883a 	mov	r2,r17
   195e4:	80e0703a 	and	r16,r16,r3
   195e8:	0101ffc4 	movi	r4,2047
   195ec:	003fd706 	br	1954c <__pack_d+0xbc>
   195f0:	1129c83a 	sub	r20,r2,r4
   195f4:	00800e04 	movi	r2,56
   195f8:	15002716 	blt	r2,r20,19698 <__pack_d+0x208>
   195fc:	800b883a 	mov	r5,r16
   19600:	a00d883a 	mov	r6,r20
   19604:	8809883a 	mov	r4,r17
   19608:	00198880 	call	19888 <__lshrdi3>
   1960c:	9009883a 	mov	r4,r18
   19610:	000b883a 	mov	r5,zero
   19614:	a00d883a 	mov	r6,r20
   19618:	102d883a 	mov	r22,r2
   1961c:	182b883a 	mov	r21,r3
   19620:	00198cc0 	call	198cc <__ashldi3>
   19624:	1009003a 	cmpeq	r4,r2,zero
   19628:	1907c83a 	sub	r3,r3,r4
   1962c:	10bfffc4 	addi	r2,r2,-1
   19630:	1c20703a 	and	r16,r3,r16
   19634:	1444703a 	and	r2,r2,r17
   19638:	1404b03a 	or	r2,r2,r16
   1963c:	1004c03a 	cmpne	r2,r2,zero
   19640:	1584b03a 	or	r2,r2,r22
   19644:	11003fcc 	andi	r4,r2,255
   19648:	01402004 	movi	r5,128
   1964c:	a807883a 	mov	r3,r21
   19650:	2140131e 	bne	r4,r5,196a0 <__pack_d+0x210>
   19654:	1140400c 	andi	r5,r2,256
   19658:	28000426 	beq	r5,zero,1966c <__pack_d+0x1dc>
   1965c:	1109883a 	add	r4,r2,r4
   19660:	2085803a 	cmpltu	r2,r4,r2
   19664:	1547883a 	add	r3,r2,r21
   19668:	2005883a 	mov	r2,r4
   1966c:	1808963a 	slli	r4,r3,24
   19670:	1004d23a 	srli	r2,r2,8
   19674:	1820913a 	slli	r16,r3,4
   19678:	01440034 	movhi	r5,4096
   1967c:	297fffc4 	addi	r5,r5,-1
   19680:	2084b03a 	or	r2,r4,r2
   19684:	8020d33a 	srli	r16,r16,12
   19688:	01000044 	movi	r4,1
   1968c:	28ffaf36 	bltu	r5,r3,1954c <__pack_d+0xbc>
   19690:	0009883a 	mov	r4,zero
   19694:	003fad06 	br	1954c <__pack_d+0xbc>
   19698:	0005883a 	mov	r2,zero
   1969c:	0007883a 	mov	r3,zero
   196a0:	11001fc4 	addi	r4,r2,127
   196a4:	2085803a 	cmpltu	r2,r4,r2
   196a8:	10c7883a 	add	r3,r2,r3
   196ac:	2005883a 	mov	r2,r4
   196b0:	003fee06 	br	1966c <__pack_d+0x1dc>

000196b4 <__unpack_d>:
   196b4:	21800117 	ldw	r6,4(r4)
   196b8:	20c00017 	ldw	r3,0(r4)
   196bc:	3004d7fa 	srli	r2,r6,31
   196c0:	3008d53a 	srli	r4,r6,20
   196c4:	28800115 	stw	r2,4(r5)
   196c8:	2101ffcc 	andi	r4,r4,2047
   196cc:	00800434 	movhi	r2,16
   196d0:	10bfffc4 	addi	r2,r2,-1
   196d4:	3084703a 	and	r2,r6,r2
   196d8:	20001a1e 	bne	r4,zero,19744 <__unpack_d+0x90>
   196dc:	1888b03a 	or	r4,r3,r2
   196e0:	20002626 	beq	r4,zero,1977c <__unpack_d+0xc8>
   196e4:	1808d63a 	srli	r4,r3,24
   196e8:	1004923a 	slli	r2,r2,8
   196ec:	01bf0084 	movi	r6,-1022
   196f0:	29800215 	stw	r6,8(r5)
   196f4:	2084b03a 	or	r2,r4,r2
   196f8:	010000c4 	movi	r4,3
   196fc:	29000015 	stw	r4,0(r5)
   19700:	02040034 	movhi	r8,4096
   19704:	423fffc4 	addi	r8,r8,-1
   19708:	1806923a 	slli	r3,r3,8
   1970c:	40801836 	bltu	r8,r2,19770 <__unpack_d+0xbc>
   19710:	013f0044 	movi	r4,-1023
   19714:	18cd883a 	add	r6,r3,r3
   19718:	30c7803a 	cmpltu	r3,r6,r3
   1971c:	1085883a 	add	r2,r2,r2
   19720:	1885883a 	add	r2,r3,r2
   19724:	200f883a 	mov	r7,r4
   19728:	3007883a 	mov	r3,r6
   1972c:	213fffc4 	addi	r4,r4,-1
   19730:	40bff82e 	bgeu	r8,r2,19714 <__unpack_d+0x60>
   19734:	29c00215 	stw	r7,8(r5)
   19738:	28c00315 	stw	r3,12(r5)
   1973c:	28800415 	stw	r2,16(r5)
   19740:	f800283a 	ret
   19744:	01c1ffc4 	movi	r7,2047
   19748:	21c00f26 	beq	r4,r7,19788 <__unpack_d+0xd4>
   1974c:	180cd63a 	srli	r6,r3,24
   19750:	1004923a 	slli	r2,r2,8
   19754:	213f0044 	addi	r4,r4,-1023
   19758:	1806923a 	slli	r3,r3,8
   1975c:	3084b03a 	or	r2,r6,r2
   19760:	29000215 	stw	r4,8(r5)
   19764:	010000c4 	movi	r4,3
   19768:	10840034 	orhi	r2,r2,4096
   1976c:	29000015 	stw	r4,0(r5)
   19770:	28c00315 	stw	r3,12(r5)
   19774:	28800415 	stw	r2,16(r5)
   19778:	f800283a 	ret
   1977c:	00800084 	movi	r2,2
   19780:	28800015 	stw	r2,0(r5)
   19784:	f800283a 	ret
   19788:	1888b03a 	or	r4,r3,r2
   1978c:	20000526 	beq	r4,zero,197a4 <__unpack_d+0xf0>
   19790:	3180022c 	andhi	r6,r6,8
   19794:	30000626 	beq	r6,zero,197b0 <__unpack_d+0xfc>
   19798:	01000044 	movi	r4,1
   1979c:	29000015 	stw	r4,0(r5)
   197a0:	003ff306 	br	19770 <__unpack_d+0xbc>
   197a4:	00800104 	movi	r2,4
   197a8:	28800015 	stw	r2,0(r5)
   197ac:	f800283a 	ret
   197b0:	28000015 	stw	zero,0(r5)
   197b4:	003fee06 	br	19770 <__unpack_d+0xbc>

000197b8 <__fpcmp_parts_d>:
   197b8:	20c00017 	ldw	r3,0(r4)
   197bc:	00800044 	movi	r2,1
   197c0:	10c0142e 	bgeu	r2,r3,19814 <__fpcmp_parts_d+0x5c>
   197c4:	29800017 	ldw	r6,0(r5)
   197c8:	1180122e 	bgeu	r2,r6,19814 <__fpcmp_parts_d+0x5c>
   197cc:	01c00104 	movi	r7,4
   197d0:	19c02826 	beq	r3,r7,19874 <__fpcmp_parts_d+0xbc>
   197d4:	31c00926 	beq	r6,r7,197fc <__fpcmp_parts_d+0x44>
   197d8:	01c00084 	movi	r7,2
   197dc:	19c00626 	beq	r3,r7,197f8 <__fpcmp_parts_d+0x40>
   197e0:	31c00a26 	beq	r6,r7,1980c <__fpcmp_parts_d+0x54>
   197e4:	20c00117 	ldw	r3,4(r4)
   197e8:	29800117 	ldw	r6,4(r5)
   197ec:	19800b26 	beq	r3,r6,1981c <__fpcmp_parts_d+0x64>
   197f0:	1800041e 	bne	r3,zero,19804 <__fpcmp_parts_d+0x4c>
   197f4:	f800283a 	ret
   197f8:	30c01a26 	beq	r6,r3,19864 <__fpcmp_parts_d+0xac>
   197fc:	28800117 	ldw	r2,4(r5)
   19800:	1000041e 	bne	r2,zero,19814 <__fpcmp_parts_d+0x5c>
   19804:	00bfffc4 	movi	r2,-1
   19808:	f800283a 	ret
   1980c:	20800117 	ldw	r2,4(r4)
   19810:	103ffc1e 	bne	r2,zero,19804 <__fpcmp_parts_d+0x4c>
   19814:	00800044 	movi	r2,1
   19818:	f800283a 	ret
   1981c:	21c00217 	ldw	r7,8(r4)
   19820:	29800217 	ldw	r6,8(r5)
   19824:	31c0020e 	bge	r6,r7,19830 <__fpcmp_parts_d+0x78>
   19828:	183ff61e 	bne	r3,zero,19804 <__fpcmp_parts_d+0x4c>
   1982c:	f800283a 	ret
   19830:	39800a16 	blt	r7,r6,1985c <__fpcmp_parts_d+0xa4>
   19834:	20800417 	ldw	r2,16(r4)
   19838:	29800417 	ldw	r6,16(r5)
   1983c:	21c00317 	ldw	r7,12(r4)
   19840:	29000317 	ldw	r4,12(r5)
   19844:	30800936 	bltu	r6,r2,1986c <__fpcmp_parts_d+0xb4>
   19848:	1180011e 	bne	r2,r6,19850 <__fpcmp_parts_d+0x98>
   1984c:	21c00736 	bltu	r4,r7,1986c <__fpcmp_parts_d+0xb4>
   19850:	11800236 	bltu	r2,r6,1985c <__fpcmp_parts_d+0xa4>
   19854:	3080031e 	bne	r6,r2,19864 <__fpcmp_parts_d+0xac>
   19858:	3900022e 	bgeu	r7,r4,19864 <__fpcmp_parts_d+0xac>
   1985c:	183fe926 	beq	r3,zero,19804 <__fpcmp_parts_d+0x4c>
   19860:	003fec06 	br	19814 <__fpcmp_parts_d+0x5c>
   19864:	0005883a 	mov	r2,zero
   19868:	f800283a 	ret
   1986c:	183fe926 	beq	r3,zero,19814 <__fpcmp_parts_d+0x5c>
   19870:	003fe406 	br	19804 <__fpcmp_parts_d+0x4c>
   19874:	30ffe51e 	bne	r6,r3,1980c <__fpcmp_parts_d+0x54>
   19878:	28c00117 	ldw	r3,4(r5)
   1987c:	20800117 	ldw	r2,4(r4)
   19880:	1885c83a 	sub	r2,r3,r2
   19884:	f800283a 	ret

00019888 <__lshrdi3>:
   19888:	2005883a 	mov	r2,r4
   1988c:	2807883a 	mov	r3,r5
   19890:	30000826 	beq	r6,zero,198b4 <__lshrdi3+0x2c>
   19894:	01000804 	movi	r4,32
   19898:	2189c83a 	sub	r4,r4,r6
   1989c:	0100060e 	bge	zero,r4,198b8 <__lshrdi3+0x30>
   198a0:	1184d83a 	srl	r2,r2,r6
   198a4:	2908983a 	sll	r4,r5,r4
   198a8:	298cd83a 	srl	r6,r5,r6
   198ac:	2084b03a 	or	r2,r4,r2
   198b0:	3007883a 	mov	r3,r6
   198b4:	f800283a 	ret
   198b8:	0105c83a 	sub	r2,zero,r4
   198bc:	000d883a 	mov	r6,zero
   198c0:	2884d83a 	srl	r2,r5,r2
   198c4:	3007883a 	mov	r3,r6
   198c8:	003ffa06 	br	198b4 <__lshrdi3+0x2c>

000198cc <__ashldi3>:
   198cc:	2005883a 	mov	r2,r4
   198d0:	2807883a 	mov	r3,r5
   198d4:	30000826 	beq	r6,zero,198f8 <__ashldi3+0x2c>
   198d8:	01000804 	movi	r4,32
   198dc:	2189c83a 	sub	r4,r4,r6
   198e0:	0100060e 	bge	zero,r4,198fc <__ashldi3+0x30>
   198e4:	1108d83a 	srl	r4,r2,r4
   198e8:	2986983a 	sll	r3,r5,r6
   198ec:	118c983a 	sll	r6,r2,r6
   198f0:	20c6b03a 	or	r3,r4,r3
   198f4:	3005883a 	mov	r2,r6
   198f8:	f800283a 	ret
   198fc:	0107c83a 	sub	r3,zero,r4
   19900:	000d883a 	mov	r6,zero
   19904:	10c6983a 	sll	r3,r2,r3
   19908:	3005883a 	mov	r2,r6
   1990c:	003ffa06 	br	198f8 <__ashldi3+0x2c>

00019910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19910:	defffe04 	addi	sp,sp,-8
   19914:	dfc00115 	stw	ra,4(sp)
   19918:	df000015 	stw	fp,0(sp)
   1991c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19920:	008000f4 	movhi	r2,3
   19924:	10a77704 	addi	r2,r2,-25124
   19928:	10800017 	ldw	r2,0(r2)
   1992c:	10000526 	beq	r2,zero,19944 <alt_get_errno+0x34>
   19930:	008000f4 	movhi	r2,3
   19934:	10a77704 	addi	r2,r2,-25124
   19938:	10800017 	ldw	r2,0(r2)
   1993c:	103ee83a 	callr	r2
   19940:	00000206 	br	1994c <alt_get_errno+0x3c>
   19944:	008000f4 	movhi	r2,3
   19948:	10a78704 	addi	r2,r2,-25060
}
   1994c:	e037883a 	mov	sp,fp
   19950:	dfc00117 	ldw	ra,4(sp)
   19954:	df000017 	ldw	fp,0(sp)
   19958:	dec00204 	addi	sp,sp,8
   1995c:	f800283a 	ret

00019960 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19960:	defffb04 	addi	sp,sp,-20
   19964:	dfc00415 	stw	ra,16(sp)
   19968:	df000315 	stw	fp,12(sp)
   1996c:	df000304 	addi	fp,sp,12
   19970:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19974:	e0bfff17 	ldw	r2,-4(fp)
   19978:	10000616 	blt	r2,zero,19994 <close+0x34>
   1997c:	e0bfff17 	ldw	r2,-4(fp)
   19980:	10c00324 	muli	r3,r2,12
   19984:	008000f4 	movhi	r2,3
   19988:	10a2f504 	addi	r2,r2,-29740
   1998c:	1885883a 	add	r2,r3,r2
   19990:	00000106 	br	19998 <close+0x38>
   19994:	0005883a 	mov	r2,zero
   19998:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1999c:	e0bffd17 	ldw	r2,-12(fp)
   199a0:	10001826 	beq	r2,zero,19a04 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   199a4:	e0bffd17 	ldw	r2,-12(fp)
   199a8:	10800017 	ldw	r2,0(r2)
   199ac:	10800417 	ldw	r2,16(r2)
   199b0:	10000626 	beq	r2,zero,199cc <close+0x6c>
   199b4:	e0bffd17 	ldw	r2,-12(fp)
   199b8:	10800017 	ldw	r2,0(r2)
   199bc:	10800417 	ldw	r2,16(r2)
   199c0:	e13ffd17 	ldw	r4,-12(fp)
   199c4:	103ee83a 	callr	r2
   199c8:	00000106 	br	199d0 <close+0x70>
   199cc:	0005883a 	mov	r2,zero
   199d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   199d4:	e13fff17 	ldw	r4,-4(fp)
   199d8:	001a0440 	call	1a044 <alt_release_fd>
    if (rval < 0)
   199dc:	e0bffe17 	ldw	r2,-8(fp)
   199e0:	1000060e 	bge	r2,zero,199fc <close+0x9c>
    {
      ALT_ERRNO = -rval;
   199e4:	00199100 	call	19910 <alt_get_errno>
   199e8:	e0fffe17 	ldw	r3,-8(fp)
   199ec:	00c7c83a 	sub	r3,zero,r3
   199f0:	10c00015 	stw	r3,0(r2)
      return -1;
   199f4:	00bfffc4 	movi	r2,-1
   199f8:	00000606 	br	19a14 <close+0xb4>
    }
    return 0;
   199fc:	0005883a 	mov	r2,zero
   19a00:	00000406 	br	19a14 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19a04:	00199100 	call	19910 <alt_get_errno>
   19a08:	00c01444 	movi	r3,81
   19a0c:	10c00015 	stw	r3,0(r2)
    return -1;
   19a10:	00bfffc4 	movi	r2,-1
  }
}
   19a14:	e037883a 	mov	sp,fp
   19a18:	dfc00117 	ldw	ra,4(sp)
   19a1c:	df000017 	ldw	fp,0(sp)
   19a20:	dec00204 	addi	sp,sp,8
   19a24:	f800283a 	ret

00019a28 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19a28:	defffc04 	addi	sp,sp,-16
   19a2c:	df000315 	stw	fp,12(sp)
   19a30:	df000304 	addi	fp,sp,12
   19a34:	e13ffd15 	stw	r4,-12(fp)
   19a38:	e17ffe15 	stw	r5,-8(fp)
   19a3c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   19a40:	e0bfff17 	ldw	r2,-4(fp)
}
   19a44:	e037883a 	mov	sp,fp
   19a48:	df000017 	ldw	fp,0(sp)
   19a4c:	dec00104 	addi	sp,sp,4
   19a50:	f800283a 	ret

00019a54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19a54:	defffe04 	addi	sp,sp,-8
   19a58:	dfc00115 	stw	ra,4(sp)
   19a5c:	df000015 	stw	fp,0(sp)
   19a60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19a64:	008000f4 	movhi	r2,3
   19a68:	10a77704 	addi	r2,r2,-25124
   19a6c:	10800017 	ldw	r2,0(r2)
   19a70:	10000526 	beq	r2,zero,19a88 <alt_get_errno+0x34>
   19a74:	008000f4 	movhi	r2,3
   19a78:	10a77704 	addi	r2,r2,-25124
   19a7c:	10800017 	ldw	r2,0(r2)
   19a80:	103ee83a 	callr	r2
   19a84:	00000206 	br	19a90 <alt_get_errno+0x3c>
   19a88:	008000f4 	movhi	r2,3
   19a8c:	10a78704 	addi	r2,r2,-25060
}
   19a90:	e037883a 	mov	sp,fp
   19a94:	dfc00117 	ldw	ra,4(sp)
   19a98:	df000017 	ldw	fp,0(sp)
   19a9c:	dec00204 	addi	sp,sp,8
   19aa0:	f800283a 	ret

00019aa4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19aa4:	defffb04 	addi	sp,sp,-20
   19aa8:	dfc00415 	stw	ra,16(sp)
   19aac:	df000315 	stw	fp,12(sp)
   19ab0:	df000304 	addi	fp,sp,12
   19ab4:	e13ffe15 	stw	r4,-8(fp)
   19ab8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19abc:	e0bffe17 	ldw	r2,-8(fp)
   19ac0:	10000616 	blt	r2,zero,19adc <fstat+0x38>
   19ac4:	e0bffe17 	ldw	r2,-8(fp)
   19ac8:	10c00324 	muli	r3,r2,12
   19acc:	008000f4 	movhi	r2,3
   19ad0:	10a2f504 	addi	r2,r2,-29740
   19ad4:	1885883a 	add	r2,r3,r2
   19ad8:	00000106 	br	19ae0 <fstat+0x3c>
   19adc:	0005883a 	mov	r2,zero
   19ae0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   19ae4:	e0bffd17 	ldw	r2,-12(fp)
   19ae8:	10001026 	beq	r2,zero,19b2c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   19aec:	e0bffd17 	ldw	r2,-12(fp)
   19af0:	10800017 	ldw	r2,0(r2)
   19af4:	10800817 	ldw	r2,32(r2)
   19af8:	10000726 	beq	r2,zero,19b18 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   19afc:	e0bffd17 	ldw	r2,-12(fp)
   19b00:	10800017 	ldw	r2,0(r2)
   19b04:	10800817 	ldw	r2,32(r2)
   19b08:	e13ffd17 	ldw	r4,-12(fp)
   19b0c:	e17fff17 	ldw	r5,-4(fp)
   19b10:	103ee83a 	callr	r2
   19b14:	00000906 	br	19b3c <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   19b18:	e0bfff17 	ldw	r2,-4(fp)
   19b1c:	00c80004 	movi	r3,8192
   19b20:	10c00115 	stw	r3,4(r2)
      return 0;
   19b24:	0005883a 	mov	r2,zero
   19b28:	00000406 	br	19b3c <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19b2c:	0019a540 	call	19a54 <alt_get_errno>
   19b30:	00c01444 	movi	r3,81
   19b34:	10c00015 	stw	r3,0(r2)
    return -1;
   19b38:	00bfffc4 	movi	r2,-1
  }
}
   19b3c:	e037883a 	mov	sp,fp
   19b40:	dfc00117 	ldw	ra,4(sp)
   19b44:	df000017 	ldw	fp,0(sp)
   19b48:	dec00204 	addi	sp,sp,8
   19b4c:	f800283a 	ret

00019b50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19b50:	defffe04 	addi	sp,sp,-8
   19b54:	dfc00115 	stw	ra,4(sp)
   19b58:	df000015 	stw	fp,0(sp)
   19b5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19b60:	008000f4 	movhi	r2,3
   19b64:	10a77704 	addi	r2,r2,-25124
   19b68:	10800017 	ldw	r2,0(r2)
   19b6c:	10000526 	beq	r2,zero,19b84 <alt_get_errno+0x34>
   19b70:	008000f4 	movhi	r2,3
   19b74:	10a77704 	addi	r2,r2,-25124
   19b78:	10800017 	ldw	r2,0(r2)
   19b7c:	103ee83a 	callr	r2
   19b80:	00000206 	br	19b8c <alt_get_errno+0x3c>
   19b84:	008000f4 	movhi	r2,3
   19b88:	10a78704 	addi	r2,r2,-25060
}
   19b8c:	e037883a 	mov	sp,fp
   19b90:	dfc00117 	ldw	ra,4(sp)
   19b94:	df000017 	ldw	fp,0(sp)
   19b98:	dec00204 	addi	sp,sp,8
   19b9c:	f800283a 	ret

00019ba0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   19ba0:	deffed04 	addi	sp,sp,-76
   19ba4:	dfc01215 	stw	ra,72(sp)
   19ba8:	df001115 	stw	fp,68(sp)
   19bac:	df001104 	addi	fp,sp,68
   19bb0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19bb4:	e0bfff17 	ldw	r2,-4(fp)
   19bb8:	10000616 	blt	r2,zero,19bd4 <isatty+0x34>
   19bbc:	e0bfff17 	ldw	r2,-4(fp)
   19bc0:	10c00324 	muli	r3,r2,12
   19bc4:	008000f4 	movhi	r2,3
   19bc8:	10a2f504 	addi	r2,r2,-29740
   19bcc:	1885883a 	add	r2,r3,r2
   19bd0:	00000106 	br	19bd8 <isatty+0x38>
   19bd4:	0005883a 	mov	r2,zero
   19bd8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   19bdc:	e0bfef17 	ldw	r2,-68(fp)
   19be0:	10000e26 	beq	r2,zero,19c1c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   19be4:	e0bfef17 	ldw	r2,-68(fp)
   19be8:	10800017 	ldw	r2,0(r2)
   19bec:	10800817 	ldw	r2,32(r2)
   19bf0:	1000021e 	bne	r2,zero,19bfc <isatty+0x5c>
    {
      return 1;
   19bf4:	00800044 	movi	r2,1
   19bf8:	00000c06 	br	19c2c <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   19bfc:	e0bff004 	addi	r2,fp,-64
   19c00:	e13fff17 	ldw	r4,-4(fp)
   19c04:	100b883a 	mov	r5,r2
   19c08:	0019aa40 	call	19aa4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   19c0c:	e0bff117 	ldw	r2,-60(fp)
   19c10:	10880020 	cmpeqi	r2,r2,8192
   19c14:	10803fcc 	andi	r2,r2,255
   19c18:	00000406 	br	19c2c <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19c1c:	0019b500 	call	19b50 <alt_get_errno>
   19c20:	00c01444 	movi	r3,81
   19c24:	10c00015 	stw	r3,0(r2)
    return 0;
   19c28:	0005883a 	mov	r2,zero
  }
}
   19c2c:	e037883a 	mov	sp,fp
   19c30:	dfc00117 	ldw	ra,4(sp)
   19c34:	df000017 	ldw	fp,0(sp)
   19c38:	dec00204 	addi	sp,sp,8
   19c3c:	f800283a 	ret

00019c40 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   19c40:	defffc04 	addi	sp,sp,-16
   19c44:	df000315 	stw	fp,12(sp)
   19c48:	df000304 	addi	fp,sp,12
   19c4c:	e13ffd15 	stw	r4,-12(fp)
   19c50:	e17ffe15 	stw	r5,-8(fp)
   19c54:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   19c58:	e0fffe17 	ldw	r3,-8(fp)
   19c5c:	e0bffd17 	ldw	r2,-12(fp)
   19c60:	18800e26 	beq	r3,r2,19c9c <alt_load_section+0x5c>
  {
    while( to != end )
   19c64:	00000a06 	br	19c90 <alt_load_section+0x50>
    {
      *to++ = *from++;
   19c68:	e0bffd17 	ldw	r2,-12(fp)
   19c6c:	10c00017 	ldw	r3,0(r2)
   19c70:	e0bffe17 	ldw	r2,-8(fp)
   19c74:	10c00015 	stw	r3,0(r2)
   19c78:	e0bffe17 	ldw	r2,-8(fp)
   19c7c:	10800104 	addi	r2,r2,4
   19c80:	e0bffe15 	stw	r2,-8(fp)
   19c84:	e0bffd17 	ldw	r2,-12(fp)
   19c88:	10800104 	addi	r2,r2,4
   19c8c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   19c90:	e0fffe17 	ldw	r3,-8(fp)
   19c94:	e0bfff17 	ldw	r2,-4(fp)
   19c98:	18bff31e 	bne	r3,r2,19c68 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   19c9c:	e037883a 	mov	sp,fp
   19ca0:	df000017 	ldw	fp,0(sp)
   19ca4:	dec00104 	addi	sp,sp,4
   19ca8:	f800283a 	ret

00019cac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   19cac:	defffe04 	addi	sp,sp,-8
   19cb0:	dfc00115 	stw	ra,4(sp)
   19cb4:	df000015 	stw	fp,0(sp)
   19cb8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   19cbc:	010000b4 	movhi	r4,2
   19cc0:	21308f04 	addi	r4,r4,-15812
   19cc4:	014000f4 	movhi	r5,3
   19cc8:	2960e604 	addi	r5,r5,-31848
   19ccc:	018000f4 	movhi	r6,3
   19cd0:	31a77c04 	addi	r6,r6,-25104
   19cd4:	0019c400 	call	19c40 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   19cd8:	01000074 	movhi	r4,1
   19cdc:	21000804 	addi	r4,r4,32
   19ce0:	01400074 	movhi	r5,1
   19ce4:	29400804 	addi	r5,r5,32
   19ce8:	01800074 	movhi	r6,1
   19cec:	31806e04 	addi	r6,r6,440
   19cf0:	0019c400 	call	19c40 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   19cf4:	010000f4 	movhi	r4,3
   19cf8:	21200004 	addi	r4,r4,-32768
   19cfc:	014000f4 	movhi	r5,3
   19d00:	29600004 	addi	r5,r5,-32768
   19d04:	018000f4 	movhi	r6,3
   19d08:	31a0e604 	addi	r6,r6,-31848
   19d0c:	0019c400 	call	19c40 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   19d10:	001b1640 	call	1b164 <alt_dcache_flush_all>
  alt_icache_flush_all();
   19d14:	001b3280 	call	1b328 <alt_icache_flush_all>
}
   19d18:	e037883a 	mov	sp,fp
   19d1c:	dfc00117 	ldw	ra,4(sp)
   19d20:	df000017 	ldw	fp,0(sp)
   19d24:	dec00204 	addi	sp,sp,8
   19d28:	f800283a 	ret

00019d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19d2c:	defffe04 	addi	sp,sp,-8
   19d30:	dfc00115 	stw	ra,4(sp)
   19d34:	df000015 	stw	fp,0(sp)
   19d38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19d3c:	008000f4 	movhi	r2,3
   19d40:	10a77704 	addi	r2,r2,-25124
   19d44:	10800017 	ldw	r2,0(r2)
   19d48:	10000526 	beq	r2,zero,19d60 <alt_get_errno+0x34>
   19d4c:	008000f4 	movhi	r2,3
   19d50:	10a77704 	addi	r2,r2,-25124
   19d54:	10800017 	ldw	r2,0(r2)
   19d58:	103ee83a 	callr	r2
   19d5c:	00000206 	br	19d68 <alt_get_errno+0x3c>
   19d60:	008000f4 	movhi	r2,3
   19d64:	10a78704 	addi	r2,r2,-25060
}
   19d68:	e037883a 	mov	sp,fp
   19d6c:	dfc00117 	ldw	ra,4(sp)
   19d70:	df000017 	ldw	fp,0(sp)
   19d74:	dec00204 	addi	sp,sp,8
   19d78:	f800283a 	ret

00019d7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   19d7c:	defff904 	addi	sp,sp,-28
   19d80:	dfc00615 	stw	ra,24(sp)
   19d84:	df000515 	stw	fp,20(sp)
   19d88:	df000504 	addi	fp,sp,20
   19d8c:	e13ffd15 	stw	r4,-12(fp)
   19d90:	e17ffe15 	stw	r5,-8(fp)
   19d94:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   19d98:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19d9c:	e0bffd17 	ldw	r2,-12(fp)
   19da0:	10000616 	blt	r2,zero,19dbc <lseek+0x40>
   19da4:	e0bffd17 	ldw	r2,-12(fp)
   19da8:	10c00324 	muli	r3,r2,12
   19dac:	008000f4 	movhi	r2,3
   19db0:	10a2f504 	addi	r2,r2,-29740
   19db4:	1885883a 	add	r2,r3,r2
   19db8:	00000106 	br	19dc0 <lseek+0x44>
   19dbc:	0005883a 	mov	r2,zero
   19dc0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   19dc4:	e0bffc17 	ldw	r2,-16(fp)
   19dc8:	10001026 	beq	r2,zero,19e0c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   19dcc:	e0bffc17 	ldw	r2,-16(fp)
   19dd0:	10800017 	ldw	r2,0(r2)
   19dd4:	10800717 	ldw	r2,28(r2)
   19dd8:	10000926 	beq	r2,zero,19e00 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   19ddc:	e0bffc17 	ldw	r2,-16(fp)
   19de0:	10800017 	ldw	r2,0(r2)
   19de4:	10800717 	ldw	r2,28(r2)
   19de8:	e13ffc17 	ldw	r4,-16(fp)
   19dec:	e17ffe17 	ldw	r5,-8(fp)
   19df0:	e1bfff17 	ldw	r6,-4(fp)
   19df4:	103ee83a 	callr	r2
   19df8:	e0bffb15 	stw	r2,-20(fp)
   19dfc:	00000506 	br	19e14 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   19e00:	00bfde84 	movi	r2,-134
   19e04:	e0bffb15 	stw	r2,-20(fp)
   19e08:	00000206 	br	19e14 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   19e0c:	00bfebc4 	movi	r2,-81
   19e10:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   19e14:	e0bffb17 	ldw	r2,-20(fp)
   19e18:	1000060e 	bge	r2,zero,19e34 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
   19e1c:	0019d2c0 	call	19d2c <alt_get_errno>
   19e20:	e0fffb17 	ldw	r3,-20(fp)
   19e24:	00c7c83a 	sub	r3,zero,r3
   19e28:	10c00015 	stw	r3,0(r2)
    rc = -1;
   19e2c:	00bfffc4 	movi	r2,-1
   19e30:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   19e34:	e0bffb17 	ldw	r2,-20(fp)
}
   19e38:	e037883a 	mov	sp,fp
   19e3c:	dfc00117 	ldw	ra,4(sp)
   19e40:	df000017 	ldw	fp,0(sp)
   19e44:	dec00204 	addi	sp,sp,8
   19e48:	f800283a 	ret

00019e4c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   19e4c:	defffd04 	addi	sp,sp,-12
   19e50:	dfc00215 	stw	ra,8(sp)
   19e54:	df000115 	stw	fp,4(sp)
   19e58:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   19e5c:	0009883a 	mov	r4,zero
   19e60:	001a2c80 	call	1a2c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   19e64:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   19e68:	001a2fc0 	call	1a2fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   19e6c:	010000f4 	movhi	r4,3
   19e70:	2120dc04 	addi	r4,r4,-31888
   19e74:	014000f4 	movhi	r5,3
   19e78:	2960dc04 	addi	r5,r5,-31888
   19e7c:	018000f4 	movhi	r6,3
   19e80:	31a0dc04 	addi	r6,r6,-31888
   19e84:	001b6e00 	call	1b6e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   19e88:	001b2700 	call	1b270 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   19e8c:	010000b4 	movhi	r4,2
   19e90:	212cb304 	addi	r4,r4,-19764
   19e94:	001be680 	call	1be68 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   19e98:	d1201b17 	ldw	r4,-32660(gp)
   19e9c:	d0e01c17 	ldw	r3,-32656(gp)
   19ea0:	d0a01d17 	ldw	r2,-32652(gp)
   19ea4:	180b883a 	mov	r5,r3
   19ea8:	100d883a 	mov	r6,r2
   19eac:	00105280 	call	10528 <main>
   19eb0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   19eb4:	01000044 	movi	r4,1
   19eb8:	00199600 	call	19960 <close>
  exit (result);
   19ebc:	e13fff17 	ldw	r4,-4(fp)
   19ec0:	001be7c0 	call	1be7c <exit>

00019ec4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   19ec4:	defffe04 	addi	sp,sp,-8
   19ec8:	df000115 	stw	fp,4(sp)
   19ecc:	df000104 	addi	fp,sp,4
   19ed0:	e13fff15 	stw	r4,-4(fp)
}
   19ed4:	e037883a 	mov	sp,fp
   19ed8:	df000017 	ldw	fp,0(sp)
   19edc:	dec00104 	addi	sp,sp,4
   19ee0:	f800283a 	ret

00019ee4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   19ee4:	defffe04 	addi	sp,sp,-8
   19ee8:	df000115 	stw	fp,4(sp)
   19eec:	df000104 	addi	fp,sp,4
   19ef0:	e13fff15 	stw	r4,-4(fp)
}
   19ef4:	e037883a 	mov	sp,fp
   19ef8:	df000017 	ldw	fp,0(sp)
   19efc:	dec00104 	addi	sp,sp,4
   19f00:	f800283a 	ret

00019f04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19f04:	defffe04 	addi	sp,sp,-8
   19f08:	dfc00115 	stw	ra,4(sp)
   19f0c:	df000015 	stw	fp,0(sp)
   19f10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19f14:	008000f4 	movhi	r2,3
   19f18:	10a77704 	addi	r2,r2,-25124
   19f1c:	10800017 	ldw	r2,0(r2)
   19f20:	10000526 	beq	r2,zero,19f38 <alt_get_errno+0x34>
   19f24:	008000f4 	movhi	r2,3
   19f28:	10a77704 	addi	r2,r2,-25124
   19f2c:	10800017 	ldw	r2,0(r2)
   19f30:	103ee83a 	callr	r2
   19f34:	00000206 	br	19f40 <alt_get_errno+0x3c>
   19f38:	008000f4 	movhi	r2,3
   19f3c:	10a78704 	addi	r2,r2,-25060
}
   19f40:	e037883a 	mov	sp,fp
   19f44:	dfc00117 	ldw	ra,4(sp)
   19f48:	df000017 	ldw	fp,0(sp)
   19f4c:	dec00204 	addi	sp,sp,8
   19f50:	f800283a 	ret

00019f54 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   19f54:	defff904 	addi	sp,sp,-28
   19f58:	dfc00615 	stw	ra,24(sp)
   19f5c:	df000515 	stw	fp,20(sp)
   19f60:	df000504 	addi	fp,sp,20
   19f64:	e13ffd15 	stw	r4,-12(fp)
   19f68:	e17ffe15 	stw	r5,-8(fp)
   19f6c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19f70:	e0bffd17 	ldw	r2,-12(fp)
   19f74:	10000616 	blt	r2,zero,19f90 <read+0x3c>
   19f78:	e0bffd17 	ldw	r2,-12(fp)
   19f7c:	10c00324 	muli	r3,r2,12
   19f80:	008000f4 	movhi	r2,3
   19f84:	10a2f504 	addi	r2,r2,-29740
   19f88:	1885883a 	add	r2,r3,r2
   19f8c:	00000106 	br	19f94 <read+0x40>
   19f90:	0005883a 	mov	r2,zero
   19f94:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   19f98:	e0bffb17 	ldw	r2,-20(fp)
   19f9c:	10002026 	beq	r2,zero,1a020 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   19fa0:	e0bffb17 	ldw	r2,-20(fp)
   19fa4:	10800217 	ldw	r2,8(r2)
   19fa8:	108000cc 	andi	r2,r2,3
   19fac:	10800060 	cmpeqi	r2,r2,1
   19fb0:	1000171e 	bne	r2,zero,1a010 <read+0xbc>
        (fd->dev->read))
   19fb4:	e0bffb17 	ldw	r2,-20(fp)
   19fb8:	10800017 	ldw	r2,0(r2)
   19fbc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   19fc0:	10001326 	beq	r2,zero,1a010 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   19fc4:	e0bffb17 	ldw	r2,-20(fp)
   19fc8:	10800017 	ldw	r2,0(r2)
   19fcc:	10c00517 	ldw	r3,20(r2)
   19fd0:	e0bfff17 	ldw	r2,-4(fp)
   19fd4:	e13ffb17 	ldw	r4,-20(fp)
   19fd8:	e17ffe17 	ldw	r5,-8(fp)
   19fdc:	100d883a 	mov	r6,r2
   19fe0:	183ee83a 	callr	r3
   19fe4:	e0bffc15 	stw	r2,-16(fp)
   19fe8:	e0bffc17 	ldw	r2,-16(fp)
   19fec:	1000060e 	bge	r2,zero,1a008 <read+0xb4>
        {
          ALT_ERRNO = -rval;
   19ff0:	0019f040 	call	19f04 <alt_get_errno>
   19ff4:	e0fffc17 	ldw	r3,-16(fp)
   19ff8:	00c7c83a 	sub	r3,zero,r3
   19ffc:	10c00015 	stw	r3,0(r2)
          return -1;
   1a000:	00bfffc4 	movi	r2,-1
   1a004:	00000a06 	br	1a030 <read+0xdc>
        }
        return rval;
   1a008:	e0bffc17 	ldw	r2,-16(fp)
   1a00c:	00000806 	br	1a030 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a010:	0019f040 	call	19f04 <alt_get_errno>
   1a014:	00c00344 	movi	r3,13
   1a018:	10c00015 	stw	r3,0(r2)
   1a01c:	00000306 	br	1a02c <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a020:	0019f040 	call	19f04 <alt_get_errno>
   1a024:	00c01444 	movi	r3,81
   1a028:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1a02c:	00bfffc4 	movi	r2,-1
}
   1a030:	e037883a 	mov	sp,fp
   1a034:	dfc00117 	ldw	ra,4(sp)
   1a038:	df000017 	ldw	fp,0(sp)
   1a03c:	dec00204 	addi	sp,sp,8
   1a040:	f800283a 	ret

0001a044 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a044:	defffe04 	addi	sp,sp,-8
   1a048:	df000115 	stw	fp,4(sp)
   1a04c:	df000104 	addi	fp,sp,4
   1a050:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a054:	e0bfff17 	ldw	r2,-4(fp)
   1a058:	108000d0 	cmplti	r2,r2,3
   1a05c:	10000d1e 	bne	r2,zero,1a094 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a060:	00c000f4 	movhi	r3,3
   1a064:	18e2f504 	addi	r3,r3,-29740
   1a068:	e0bfff17 	ldw	r2,-4(fp)
   1a06c:	10800324 	muli	r2,r2,12
   1a070:	1885883a 	add	r2,r3,r2
   1a074:	10800204 	addi	r2,r2,8
   1a078:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1a07c:	00c000f4 	movhi	r3,3
   1a080:	18e2f504 	addi	r3,r3,-29740
   1a084:	e0bfff17 	ldw	r2,-4(fp)
   1a088:	10800324 	muli	r2,r2,12
   1a08c:	1885883a 	add	r2,r3,r2
   1a090:	10000015 	stw	zero,0(r2)
  }
}
   1a094:	e037883a 	mov	sp,fp
   1a098:	df000017 	ldw	fp,0(sp)
   1a09c:	dec00104 	addi	sp,sp,4
   1a0a0:	f800283a 	ret

0001a0a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a0a4:	defff904 	addi	sp,sp,-28
   1a0a8:	df000615 	stw	fp,24(sp)
   1a0ac:	df000604 	addi	fp,sp,24
   1a0b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a0b4:	0005303a 	rdctl	r2,status
   1a0b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a0bc:	e0fffc17 	ldw	r3,-16(fp)
   1a0c0:	00bfff84 	movi	r2,-2
   1a0c4:	1884703a 	and	r2,r3,r2
   1a0c8:	1001703a 	wrctl	status,r2
  
  return context;
   1a0cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a0d0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a0d4:	d0a00b17 	ldw	r2,-32724(gp)
   1a0d8:	10c000c4 	addi	r3,r2,3
   1a0dc:	00bfff04 	movi	r2,-4
   1a0e0:	1884703a 	and	r2,r3,r2
   1a0e4:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a0e8:	d0e00b17 	ldw	r3,-32724(gp)
   1a0ec:	e0bfff17 	ldw	r2,-4(fp)
   1a0f0:	1885883a 	add	r2,r3,r2
   1a0f4:	00c000f4 	movhi	r3,3
   1a0f8:	18c00004 	addi	r3,r3,0
   1a0fc:	1880062e 	bgeu	r3,r2,1a118 <sbrk+0x74>
   1a100:	e0bffa17 	ldw	r2,-24(fp)
   1a104:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a108:	e0bffd17 	ldw	r2,-12(fp)
   1a10c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a110:	00bfffc4 	movi	r2,-1
   1a114:	00000b06 	br	1a144 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1a118:	d0a00b17 	ldw	r2,-32724(gp)
   1a11c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   1a120:	d0e00b17 	ldw	r3,-32724(gp)
   1a124:	e0bfff17 	ldw	r2,-4(fp)
   1a128:	1885883a 	add	r2,r3,r2
   1a12c:	d0a00b15 	stw	r2,-32724(gp)
   1a130:	e0bffa17 	ldw	r2,-24(fp)
   1a134:	e0bffe15 	stw	r2,-8(fp)
   1a138:	e0bffe17 	ldw	r2,-8(fp)
   1a13c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a140:	e0bffb17 	ldw	r2,-20(fp)
} 
   1a144:	e037883a 	mov	sp,fp
   1a148:	df000017 	ldw	fp,0(sp)
   1a14c:	dec00104 	addi	sp,sp,4
   1a150:	f800283a 	ret

0001a154 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a154:	defffe04 	addi	sp,sp,-8
   1a158:	dfc00115 	stw	ra,4(sp)
   1a15c:	df000015 	stw	fp,0(sp)
   1a160:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a164:	008000f4 	movhi	r2,3
   1a168:	10a77704 	addi	r2,r2,-25124
   1a16c:	10800017 	ldw	r2,0(r2)
   1a170:	10000526 	beq	r2,zero,1a188 <alt_get_errno+0x34>
   1a174:	008000f4 	movhi	r2,3
   1a178:	10a77704 	addi	r2,r2,-25124
   1a17c:	10800017 	ldw	r2,0(r2)
   1a180:	103ee83a 	callr	r2
   1a184:	00000206 	br	1a190 <alt_get_errno+0x3c>
   1a188:	008000f4 	movhi	r2,3
   1a18c:	10a78704 	addi	r2,r2,-25060
}
   1a190:	e037883a 	mov	sp,fp
   1a194:	dfc00117 	ldw	ra,4(sp)
   1a198:	df000017 	ldw	fp,0(sp)
   1a19c:	dec00204 	addi	sp,sp,8
   1a1a0:	f800283a 	ret

0001a1a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1a1a4:	defff904 	addi	sp,sp,-28
   1a1a8:	dfc00615 	stw	ra,24(sp)
   1a1ac:	df000515 	stw	fp,20(sp)
   1a1b0:	df000504 	addi	fp,sp,20
   1a1b4:	e13ffd15 	stw	r4,-12(fp)
   1a1b8:	e17ffe15 	stw	r5,-8(fp)
   1a1bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a1c0:	e0bffd17 	ldw	r2,-12(fp)
   1a1c4:	10000616 	blt	r2,zero,1a1e0 <write+0x3c>
   1a1c8:	e0bffd17 	ldw	r2,-12(fp)
   1a1cc:	10c00324 	muli	r3,r2,12
   1a1d0:	008000f4 	movhi	r2,3
   1a1d4:	10a2f504 	addi	r2,r2,-29740
   1a1d8:	1885883a 	add	r2,r3,r2
   1a1dc:	00000106 	br	1a1e4 <write+0x40>
   1a1e0:	0005883a 	mov	r2,zero
   1a1e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a1e8:	e0bffb17 	ldw	r2,-20(fp)
   1a1ec:	10001f26 	beq	r2,zero,1a26c <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1a1f0:	e0bffb17 	ldw	r2,-20(fp)
   1a1f4:	10800217 	ldw	r2,8(r2)
   1a1f8:	108000cc 	andi	r2,r2,3
   1a1fc:	10001726 	beq	r2,zero,1a25c <write+0xb8>
   1a200:	e0bffb17 	ldw	r2,-20(fp)
   1a204:	10800017 	ldw	r2,0(r2)
   1a208:	10800617 	ldw	r2,24(r2)
   1a20c:	10001326 	beq	r2,zero,1a25c <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a210:	e0bffb17 	ldw	r2,-20(fp)
   1a214:	10800017 	ldw	r2,0(r2)
   1a218:	10c00617 	ldw	r3,24(r2)
   1a21c:	e0bfff17 	ldw	r2,-4(fp)
   1a220:	e13ffb17 	ldw	r4,-20(fp)
   1a224:	e17ffe17 	ldw	r5,-8(fp)
   1a228:	100d883a 	mov	r6,r2
   1a22c:	183ee83a 	callr	r3
   1a230:	e0bffc15 	stw	r2,-16(fp)
   1a234:	e0bffc17 	ldw	r2,-16(fp)
   1a238:	1000060e 	bge	r2,zero,1a254 <write+0xb0>
      {
        ALT_ERRNO = -rval;
   1a23c:	001a1540 	call	1a154 <alt_get_errno>
   1a240:	e0fffc17 	ldw	r3,-16(fp)
   1a244:	00c7c83a 	sub	r3,zero,r3
   1a248:	10c00015 	stw	r3,0(r2)
        return -1;
   1a24c:	00bfffc4 	movi	r2,-1
   1a250:	00000a06 	br	1a27c <write+0xd8>
      }
      return rval;
   1a254:	e0bffc17 	ldw	r2,-16(fp)
   1a258:	00000806 	br	1a27c <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a25c:	001a1540 	call	1a154 <alt_get_errno>
   1a260:	00c00344 	movi	r3,13
   1a264:	10c00015 	stw	r3,0(r2)
   1a268:	00000306 	br	1a278 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a26c:	001a1540 	call	1a154 <alt_get_errno>
   1a270:	00c01444 	movi	r3,81
   1a274:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1a278:	00bfffc4 	movi	r2,-1
}
   1a27c:	e037883a 	mov	sp,fp
   1a280:	dfc00117 	ldw	ra,4(sp)
   1a284:	df000017 	ldw	fp,0(sp)
   1a288:	dec00204 	addi	sp,sp,8
   1a28c:	f800283a 	ret

0001a290 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a290:	defffd04 	addi	sp,sp,-12
   1a294:	dfc00215 	stw	ra,8(sp)
   1a298:	df000115 	stw	fp,4(sp)
   1a29c:	df000104 	addi	fp,sp,4
   1a2a0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a2a4:	e13fff17 	ldw	r4,-4(fp)
   1a2a8:	014000f4 	movhi	r5,3
   1a2ac:	29677404 	addi	r5,r5,-25136
   1a2b0:	001b1d00 	call	1b1d0 <alt_dev_llist_insert>
}
   1a2b4:	e037883a 	mov	sp,fp
   1a2b8:	dfc00117 	ldw	ra,4(sp)
   1a2bc:	df000017 	ldw	fp,0(sp)
   1a2c0:	dec00204 	addi	sp,sp,8
   1a2c4:	f800283a 	ret

0001a2c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a2c8:	defffd04 	addi	sp,sp,-12
   1a2cc:	dfc00215 	stw	ra,8(sp)
   1a2d0:	df000115 	stw	fp,4(sp)
   1a2d4:	df000104 	addi	fp,sp,4
   1a2d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
   1a2dc:	001bb640 	call	1bb64 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a2e0:	00800044 	movi	r2,1
   1a2e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a2e8:	e037883a 	mov	sp,fp
   1a2ec:	dfc00117 	ldw	ra,4(sp)
   1a2f0:	df000017 	ldw	fp,0(sp)
   1a2f4:	dec00204 	addi	sp,sp,8
   1a2f8:	f800283a 	ret

0001a2fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a2fc:	defffe04 	addi	sp,sp,-8
   1a300:	dfc00115 	stw	ra,4(sp)
   1a304:	df000015 	stw	fp,0(sp)
   1a308:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_SCALE_TIMER_1, high_scale_timer_1);
   1a30c:	008000f4 	movhi	r2,3
   1a310:	10a78b04 	addi	r2,r2,-25044
   1a314:	00c00134 	movhi	r3,4
   1a318:	18c40004 	addi	r3,r3,4096
   1a31c:	10c00015 	stw	r3,0(r2)
   1a320:	008000f4 	movhi	r2,3
   1a324:	10a78c04 	addi	r2,r2,-25040
   1a328:	00c0bef4 	movhi	r3,763
   1a32c:	18fc2004 	addi	r3,r3,-3968
   1a330:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   1a334:	01000134 	movhi	r4,4
   1a338:	21040804 	addi	r4,r4,4128
   1a33c:	000b883a 	mov	r5,zero
   1a340:	01800044 	movi	r6,1
   1a344:	01c0fa04 	movi	r7,1000
   1a348:	001ae5c0 	call	1ae5c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
   1a34c:	010000f4 	movhi	r4,3
   1a350:	21235f04 	addi	r4,r4,-29316
   1a354:	000b883a 	mov	r5,zero
   1a358:	01800404 	movi	r6,16
   1a35c:	001a4e80 	call	1a4e8 <altera_avalon_jtag_uart_init>
   1a360:	010000f4 	movhi	r4,3
   1a364:	21235504 	addi	r4,r4,-29356
   1a368:	001a2900 	call	1a290 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   1a36c:	0001883a 	nop
}
   1a370:	e037883a 	mov	sp,fp
   1a374:	dfc00117 	ldw	ra,4(sp)
   1a378:	df000017 	ldw	fp,0(sp)
   1a37c:	dec00204 	addi	sp,sp,8
   1a380:	f800283a 	ret

0001a384 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1a384:	defffa04 	addi	sp,sp,-24
   1a388:	dfc00515 	stw	ra,20(sp)
   1a38c:	df000415 	stw	fp,16(sp)
   1a390:	df000404 	addi	fp,sp,16
   1a394:	e13ffd15 	stw	r4,-12(fp)
   1a398:	e17ffe15 	stw	r5,-8(fp)
   1a39c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a3a0:	e0bffd17 	ldw	r2,-12(fp)
   1a3a4:	10800017 	ldw	r2,0(r2)
   1a3a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a3ac:	e0bffc17 	ldw	r2,-16(fp)
   1a3b0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1a3b4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a3b8:	10800217 	ldw	r2,8(r2)
   1a3bc:	1809883a 	mov	r4,r3
   1a3c0:	e17ffe17 	ldw	r5,-8(fp)
   1a3c4:	e1bfff17 	ldw	r6,-4(fp)
   1a3c8:	100f883a 	mov	r7,r2
   1a3cc:	001a9ac0 	call	1a9ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1a3d0:	e037883a 	mov	sp,fp
   1a3d4:	dfc00117 	ldw	ra,4(sp)
   1a3d8:	df000017 	ldw	fp,0(sp)
   1a3dc:	dec00204 	addi	sp,sp,8
   1a3e0:	f800283a 	ret

0001a3e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1a3e4:	defffa04 	addi	sp,sp,-24
   1a3e8:	dfc00515 	stw	ra,20(sp)
   1a3ec:	df000415 	stw	fp,16(sp)
   1a3f0:	df000404 	addi	fp,sp,16
   1a3f4:	e13ffd15 	stw	r4,-12(fp)
   1a3f8:	e17ffe15 	stw	r5,-8(fp)
   1a3fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a400:	e0bffd17 	ldw	r2,-12(fp)
   1a404:	10800017 	ldw	r2,0(r2)
   1a408:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a40c:	e0bffc17 	ldw	r2,-16(fp)
   1a410:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1a414:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a418:	10800217 	ldw	r2,8(r2)
   1a41c:	1809883a 	mov	r4,r3
   1a420:	e17ffe17 	ldw	r5,-8(fp)
   1a424:	e1bfff17 	ldw	r6,-4(fp)
   1a428:	100f883a 	mov	r7,r2
   1a42c:	001abc40 	call	1abc4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1a430:	e037883a 	mov	sp,fp
   1a434:	dfc00117 	ldw	ra,4(sp)
   1a438:	df000017 	ldw	fp,0(sp)
   1a43c:	dec00204 	addi	sp,sp,8
   1a440:	f800283a 	ret

0001a444 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1a444:	defffc04 	addi	sp,sp,-16
   1a448:	dfc00315 	stw	ra,12(sp)
   1a44c:	df000215 	stw	fp,8(sp)
   1a450:	df000204 	addi	fp,sp,8
   1a454:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a458:	e0bfff17 	ldw	r2,-4(fp)
   1a45c:	10800017 	ldw	r2,0(r2)
   1a460:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1a464:	e0bffe17 	ldw	r2,-8(fp)
   1a468:	10c00a04 	addi	r3,r2,40
   1a46c:	e0bfff17 	ldw	r2,-4(fp)
   1a470:	10800217 	ldw	r2,8(r2)
   1a474:	1809883a 	mov	r4,r3
   1a478:	100b883a 	mov	r5,r2
   1a47c:	001a8500 	call	1a850 <altera_avalon_jtag_uart_close>
}
   1a480:	e037883a 	mov	sp,fp
   1a484:	dfc00117 	ldw	ra,4(sp)
   1a488:	df000017 	ldw	fp,0(sp)
   1a48c:	dec00204 	addi	sp,sp,8
   1a490:	f800283a 	ret

0001a494 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1a494:	defffa04 	addi	sp,sp,-24
   1a498:	dfc00515 	stw	ra,20(sp)
   1a49c:	df000415 	stw	fp,16(sp)
   1a4a0:	df000404 	addi	fp,sp,16
   1a4a4:	e13ffd15 	stw	r4,-12(fp)
   1a4a8:	e17ffe15 	stw	r5,-8(fp)
   1a4ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1a4b0:	e0bffd17 	ldw	r2,-12(fp)
   1a4b4:	10800017 	ldw	r2,0(r2)
   1a4b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1a4bc:	e0bffc17 	ldw	r2,-16(fp)
   1a4c0:	10800a04 	addi	r2,r2,40
   1a4c4:	1009883a 	mov	r4,r2
   1a4c8:	e17ffe17 	ldw	r5,-8(fp)
   1a4cc:	e1bfff17 	ldw	r6,-4(fp)
   1a4d0:	001a8b80 	call	1a8b8 <altera_avalon_jtag_uart_ioctl>
}
   1a4d4:	e037883a 	mov	sp,fp
   1a4d8:	dfc00117 	ldw	ra,4(sp)
   1a4dc:	df000017 	ldw	fp,0(sp)
   1a4e0:	dec00204 	addi	sp,sp,8
   1a4e4:	f800283a 	ret

0001a4e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1a4e8:	defffa04 	addi	sp,sp,-24
   1a4ec:	dfc00515 	stw	ra,20(sp)
   1a4f0:	df000415 	stw	fp,16(sp)
   1a4f4:	df000404 	addi	fp,sp,16
   1a4f8:	e13ffd15 	stw	r4,-12(fp)
   1a4fc:	e17ffe15 	stw	r5,-8(fp)
   1a500:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a504:	e0bffd17 	ldw	r2,-12(fp)
   1a508:	00c00044 	movi	r3,1
   1a50c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1a510:	e0bffd17 	ldw	r2,-12(fp)
   1a514:	10800017 	ldw	r2,0(r2)
   1a518:	10800104 	addi	r2,r2,4
   1a51c:	e0fffd17 	ldw	r3,-12(fp)
   1a520:	18c00817 	ldw	r3,32(r3)
   1a524:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1a528:	e0fffe17 	ldw	r3,-8(fp)
   1a52c:	e0bfff17 	ldw	r2,-4(fp)
   1a530:	d8000015 	stw	zero,0(sp)
   1a534:	1809883a 	mov	r4,r3
   1a538:	100b883a 	mov	r5,r2
   1a53c:	018000b4 	movhi	r6,2
   1a540:	31a96a04 	addi	r6,r6,-23128
   1a544:	e1fffd17 	ldw	r7,-12(fp)
   1a548:	001b3580 	call	1b358 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1a54c:	e0bffd17 	ldw	r2,-12(fp)
   1a550:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1a554:	e0bffd17 	ldw	r2,-12(fp)
   1a558:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1a55c:	008000f4 	movhi	r2,3
   1a560:	10a78e04 	addi	r2,r2,-25032
   1a564:	10800017 	ldw	r2,0(r2)
   1a568:	1809883a 	mov	r4,r3
   1a56c:	100b883a 	mov	r5,r2
   1a570:	018000b4 	movhi	r6,2
   1a574:	31a9eb04 	addi	r6,r6,-22612
   1a578:	e1fffd17 	ldw	r7,-12(fp)
   1a57c:	001b0240 	call	1b024 <alt_alarm_start>
   1a580:	1000040e 	bge	r2,zero,1a594 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1a584:	e0bffd17 	ldw	r2,-12(fp)
   1a588:	00e00034 	movhi	r3,32768
   1a58c:	18ffffc4 	addi	r3,r3,-1
   1a590:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1a594:	e037883a 	mov	sp,fp
   1a598:	dfc00117 	ldw	ra,4(sp)
   1a59c:	df000017 	ldw	fp,0(sp)
   1a5a0:	dec00204 	addi	sp,sp,8
   1a5a4:	f800283a 	ret

0001a5a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1a5a8:	defff804 	addi	sp,sp,-32
   1a5ac:	df000715 	stw	fp,28(sp)
   1a5b0:	df000704 	addi	fp,sp,28
   1a5b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1a5b8:	e0bfff17 	ldw	r2,-4(fp)
   1a5bc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1a5c0:	e0bffb17 	ldw	r2,-20(fp)
   1a5c4:	10800017 	ldw	r2,0(r2)
   1a5c8:	e0bffc15 	stw	r2,-16(fp)
   1a5cc:	00000106 	br	1a5d4 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   1a5d0:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a5d4:	e0bffc17 	ldw	r2,-16(fp)
   1a5d8:	10800104 	addi	r2,r2,4
   1a5dc:	10800037 	ldwio	r2,0(r2)
   1a5e0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1a5e4:	e0bffd17 	ldw	r2,-12(fp)
   1a5e8:	1080c00c 	andi	r2,r2,768
   1a5ec:	10006a26 	beq	r2,zero,1a798 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1a5f0:	e0bffd17 	ldw	r2,-12(fp)
   1a5f4:	1080400c 	andi	r2,r2,256
   1a5f8:	10003326 	beq	r2,zero,1a6c8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1a5fc:	00800074 	movhi	r2,1
   1a600:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a604:	e0bffb17 	ldw	r2,-20(fp)
   1a608:	10800a17 	ldw	r2,40(r2)
   1a60c:	10800044 	addi	r2,r2,1
   1a610:	1081ffcc 	andi	r2,r2,2047
   1a614:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1a618:	e0bffb17 	ldw	r2,-20(fp)
   1a61c:	10c00b17 	ldw	r3,44(r2)
   1a620:	e0bffe17 	ldw	r2,-8(fp)
   1a624:	18801426 	beq	r3,r2,1a678 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1a628:	e0bffc17 	ldw	r2,-16(fp)
   1a62c:	10800037 	ldwio	r2,0(r2)
   1a630:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1a634:	e0bff917 	ldw	r2,-28(fp)
   1a638:	10a0000c 	andi	r2,r2,32768
   1a63c:	10001026 	beq	r2,zero,1a680 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1a640:	e0bffb17 	ldw	r2,-20(fp)
   1a644:	10800a17 	ldw	r2,40(r2)
   1a648:	e0fff917 	ldw	r3,-28(fp)
   1a64c:	e13ffb17 	ldw	r4,-20(fp)
   1a650:	2085883a 	add	r2,r4,r2
   1a654:	10800e04 	addi	r2,r2,56
   1a658:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a65c:	e0bffb17 	ldw	r2,-20(fp)
   1a660:	10800a17 	ldw	r2,40(r2)
   1a664:	10800044 	addi	r2,r2,1
   1a668:	10c1ffcc 	andi	r3,r2,2047
   1a66c:	e0bffb17 	ldw	r2,-20(fp)
   1a670:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1a674:	003fe306 	br	1a604 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1a678:	0001883a 	nop
   1a67c:	00000106 	br	1a684 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1a680:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1a684:	e0bff917 	ldw	r2,-28(fp)
   1a688:	10bfffec 	andhi	r2,r2,65535
   1a68c:	10000e26 	beq	r2,zero,1a6c8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a690:	e0bffb17 	ldw	r2,-20(fp)
   1a694:	10c00817 	ldw	r3,32(r2)
   1a698:	00bfff84 	movi	r2,-2
   1a69c:	1886703a 	and	r3,r3,r2
   1a6a0:	e0bffb17 	ldw	r2,-20(fp)
   1a6a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1a6a8:	e0bffc17 	ldw	r2,-16(fp)
   1a6ac:	10800104 	addi	r2,r2,4
   1a6b0:	e0fffb17 	ldw	r3,-20(fp)
   1a6b4:	18c00817 	ldw	r3,32(r3)
   1a6b8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a6bc:	e0bffc17 	ldw	r2,-16(fp)
   1a6c0:	10800104 	addi	r2,r2,4
   1a6c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1a6c8:	e0bffd17 	ldw	r2,-12(fp)
   1a6cc:	1080800c 	andi	r2,r2,512
   1a6d0:	103fbf26 	beq	r2,zero,1a5d0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1a6d4:	e0bffd17 	ldw	r2,-12(fp)
   1a6d8:	1004d43a 	srli	r2,r2,16
   1a6dc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a6e0:	00001406 	br	1a734 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1a6e4:	e0bffc17 	ldw	r2,-16(fp)
   1a6e8:	e0fffb17 	ldw	r3,-20(fp)
   1a6ec:	18c00d17 	ldw	r3,52(r3)
   1a6f0:	e13ffb17 	ldw	r4,-20(fp)
   1a6f4:	20c7883a 	add	r3,r4,r3
   1a6f8:	18c20e04 	addi	r3,r3,2104
   1a6fc:	18c00003 	ldbu	r3,0(r3)
   1a700:	18c03fcc 	andi	r3,r3,255
   1a704:	18c0201c 	xori	r3,r3,128
   1a708:	18ffe004 	addi	r3,r3,-128
   1a70c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a710:	e0bffb17 	ldw	r2,-20(fp)
   1a714:	10800d17 	ldw	r2,52(r2)
   1a718:	10800044 	addi	r2,r2,1
   1a71c:	10c1ffcc 	andi	r3,r2,2047
   1a720:	e0bffb17 	ldw	r2,-20(fp)
   1a724:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1a728:	e0bffa17 	ldw	r2,-24(fp)
   1a72c:	10bfffc4 	addi	r2,r2,-1
   1a730:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a734:	e0bffa17 	ldw	r2,-24(fp)
   1a738:	10000526 	beq	r2,zero,1a750 <altera_avalon_jtag_uart_irq+0x1a8>
   1a73c:	e0bffb17 	ldw	r2,-20(fp)
   1a740:	10c00d17 	ldw	r3,52(r2)
   1a744:	e0bffb17 	ldw	r2,-20(fp)
   1a748:	10800c17 	ldw	r2,48(r2)
   1a74c:	18bfe51e 	bne	r3,r2,1a6e4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1a750:	e0bffa17 	ldw	r2,-24(fp)
   1a754:	103f9e26 	beq	r2,zero,1a5d0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1a758:	e0bffb17 	ldw	r2,-20(fp)
   1a75c:	10c00817 	ldw	r3,32(r2)
   1a760:	00bfff44 	movi	r2,-3
   1a764:	1886703a 	and	r3,r3,r2
   1a768:	e0bffb17 	ldw	r2,-20(fp)
   1a76c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1a770:	e0bffb17 	ldw	r2,-20(fp)
   1a774:	10800017 	ldw	r2,0(r2)
   1a778:	10800104 	addi	r2,r2,4
   1a77c:	e0fffb17 	ldw	r3,-20(fp)
   1a780:	18c00817 	ldw	r3,32(r3)
   1a784:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a788:	e0bffc17 	ldw	r2,-16(fp)
   1a78c:	10800104 	addi	r2,r2,4
   1a790:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1a794:	003f8e06 	br	1a5d0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1a798:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1a79c:	e037883a 	mov	sp,fp
   1a7a0:	df000017 	ldw	fp,0(sp)
   1a7a4:	dec00104 	addi	sp,sp,4
   1a7a8:	f800283a 	ret

0001a7ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1a7ac:	defffc04 	addi	sp,sp,-16
   1a7b0:	df000315 	stw	fp,12(sp)
   1a7b4:	df000304 	addi	fp,sp,12
   1a7b8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1a7bc:	e0bfff17 	ldw	r2,-4(fp)
   1a7c0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1a7c4:	e0bffd17 	ldw	r2,-12(fp)
   1a7c8:	10800017 	ldw	r2,0(r2)
   1a7cc:	10800104 	addi	r2,r2,4
   1a7d0:	10800037 	ldwio	r2,0(r2)
   1a7d4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1a7d8:	e0bffe17 	ldw	r2,-8(fp)
   1a7dc:	1081000c 	andi	r2,r2,1024
   1a7e0:	10000a26 	beq	r2,zero,1a80c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1a7e4:	e0bffd17 	ldw	r2,-12(fp)
   1a7e8:	10800017 	ldw	r2,0(r2)
   1a7ec:	10800104 	addi	r2,r2,4
   1a7f0:	e0fffd17 	ldw	r3,-12(fp)
   1a7f4:	18c00817 	ldw	r3,32(r3)
   1a7f8:	18c10014 	ori	r3,r3,1024
   1a7fc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1a800:	e0bffd17 	ldw	r2,-12(fp)
   1a804:	10000915 	stw	zero,36(r2)
   1a808:	00000a06 	br	1a834 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1a80c:	e0bffd17 	ldw	r2,-12(fp)
   1a810:	10800917 	ldw	r2,36(r2)
   1a814:	00e00034 	movhi	r3,32768
   1a818:	18ffff04 	addi	r3,r3,-4
   1a81c:	18800536 	bltu	r3,r2,1a834 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   1a820:	e0bffd17 	ldw	r2,-12(fp)
   1a824:	10800917 	ldw	r2,36(r2)
   1a828:	10c00044 	addi	r3,r2,1
   1a82c:	e0bffd17 	ldw	r2,-12(fp)
   1a830:	10c00915 	stw	r3,36(r2)
   1a834:	008000f4 	movhi	r2,3
   1a838:	10a78e04 	addi	r2,r2,-25032
   1a83c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1a840:	e037883a 	mov	sp,fp
   1a844:	df000017 	ldw	fp,0(sp)
   1a848:	dec00104 	addi	sp,sp,4
   1a84c:	f800283a 	ret

0001a850 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1a850:	defffd04 	addi	sp,sp,-12
   1a854:	df000215 	stw	fp,8(sp)
   1a858:	df000204 	addi	fp,sp,8
   1a85c:	e13ffe15 	stw	r4,-8(fp)
   1a860:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a864:	00000506 	br	1a87c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1a868:	e0bfff17 	ldw	r2,-4(fp)
   1a86c:	1090000c 	andi	r2,r2,16384
   1a870:	10000226 	beq	r2,zero,1a87c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1a874:	00bffd44 	movi	r2,-11
   1a878:	00000b06 	br	1a8a8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a87c:	e0bffe17 	ldw	r2,-8(fp)
   1a880:	10c00d17 	ldw	r3,52(r2)
   1a884:	e0bffe17 	ldw	r2,-8(fp)
   1a888:	10800c17 	ldw	r2,48(r2)
   1a88c:	18800526 	beq	r3,r2,1a8a4 <altera_avalon_jtag_uart_close+0x54>
   1a890:	e0bffe17 	ldw	r2,-8(fp)
   1a894:	10c00917 	ldw	r3,36(r2)
   1a898:	e0bffe17 	ldw	r2,-8(fp)
   1a89c:	10800117 	ldw	r2,4(r2)
   1a8a0:	18bff136 	bltu	r3,r2,1a868 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1a8a4:	0005883a 	mov	r2,zero
}
   1a8a8:	e037883a 	mov	sp,fp
   1a8ac:	df000017 	ldw	fp,0(sp)
   1a8b0:	dec00104 	addi	sp,sp,4
   1a8b4:	f800283a 	ret

0001a8b8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1a8b8:	defffa04 	addi	sp,sp,-24
   1a8bc:	df000515 	stw	fp,20(sp)
   1a8c0:	df000504 	addi	fp,sp,20
   1a8c4:	e13ffd15 	stw	r4,-12(fp)
   1a8c8:	e17ffe15 	stw	r5,-8(fp)
   1a8cc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1a8d0:	00bff9c4 	movi	r2,-25
   1a8d4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1a8d8:	e0bffe17 	ldw	r2,-8(fp)
   1a8dc:	10da8060 	cmpeqi	r3,r2,27137
   1a8e0:	1800031e 	bne	r3,zero,1a8f0 <altera_avalon_jtag_uart_ioctl+0x38>
   1a8e4:	109a80a0 	cmpeqi	r2,r2,27138
   1a8e8:	1000181e 	bne	r2,zero,1a94c <altera_avalon_jtag_uart_ioctl+0x94>
   1a8ec:	00002606 	br	1a988 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1a8f0:	e0bffd17 	ldw	r2,-12(fp)
   1a8f4:	10c00117 	ldw	r3,4(r2)
   1a8f8:	00a00034 	movhi	r2,32768
   1a8fc:	10bfffc4 	addi	r2,r2,-1
   1a900:	18802226 	beq	r3,r2,1a98c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   1a904:	e0bfff17 	ldw	r2,-4(fp)
   1a908:	10800017 	ldw	r2,0(r2)
   1a90c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1a910:	e0bffc17 	ldw	r2,-16(fp)
   1a914:	10800090 	cmplti	r2,r2,2
   1a918:	1000061e 	bne	r2,zero,1a934 <altera_avalon_jtag_uart_ioctl+0x7c>
   1a91c:	e0fffc17 	ldw	r3,-16(fp)
   1a920:	00a00034 	movhi	r2,32768
   1a924:	10bfffc4 	addi	r2,r2,-1
   1a928:	18800226 	beq	r3,r2,1a934 <altera_avalon_jtag_uart_ioctl+0x7c>
   1a92c:	e0bffc17 	ldw	r2,-16(fp)
   1a930:	00000206 	br	1a93c <altera_avalon_jtag_uart_ioctl+0x84>
   1a934:	00a00034 	movhi	r2,32768
   1a938:	10bfff84 	addi	r2,r2,-2
   1a93c:	e0fffd17 	ldw	r3,-12(fp)
   1a940:	18800115 	stw	r2,4(r3)
      rc = 0;
   1a944:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a948:	00001006 	br	1a98c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1a94c:	e0bffd17 	ldw	r2,-12(fp)
   1a950:	10c00117 	ldw	r3,4(r2)
   1a954:	00a00034 	movhi	r2,32768
   1a958:	10bfffc4 	addi	r2,r2,-1
   1a95c:	18800d26 	beq	r3,r2,1a994 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1a960:	e0bffd17 	ldw	r2,-12(fp)
   1a964:	10c00917 	ldw	r3,36(r2)
   1a968:	e0bffd17 	ldw	r2,-12(fp)
   1a96c:	10800117 	ldw	r2,4(r2)
   1a970:	1885803a 	cmpltu	r2,r3,r2
   1a974:	10c03fcc 	andi	r3,r2,255
   1a978:	e0bfff17 	ldw	r2,-4(fp)
   1a97c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1a980:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a984:	00000306 	br	1a994 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   1a988:	00000306 	br	1a998 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1a98c:	0001883a 	nop
   1a990:	00000106 	br	1a998 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1a994:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1a998:	e0bffb17 	ldw	r2,-20(fp)
}
   1a99c:	e037883a 	mov	sp,fp
   1a9a0:	df000017 	ldw	fp,0(sp)
   1a9a4:	dec00104 	addi	sp,sp,4
   1a9a8:	f800283a 	ret

0001a9ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1a9ac:	defff304 	addi	sp,sp,-52
   1a9b0:	dfc00c15 	stw	ra,48(sp)
   1a9b4:	df000b15 	stw	fp,44(sp)
   1a9b8:	df000b04 	addi	fp,sp,44
   1a9bc:	e13ffc15 	stw	r4,-16(fp)
   1a9c0:	e17ffd15 	stw	r5,-12(fp)
   1a9c4:	e1bffe15 	stw	r6,-8(fp)
   1a9c8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1a9cc:	e0bffd17 	ldw	r2,-12(fp)
   1a9d0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1a9d4:	00004706 	br	1aaf4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1a9d8:	e0bffc17 	ldw	r2,-16(fp)
   1a9dc:	10800a17 	ldw	r2,40(r2)
   1a9e0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1a9e4:	e0bffc17 	ldw	r2,-16(fp)
   1a9e8:	10800b17 	ldw	r2,44(r2)
   1a9ec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1a9f0:	e0fff717 	ldw	r3,-36(fp)
   1a9f4:	e0bff817 	ldw	r2,-32(fp)
   1a9f8:	18800536 	bltu	r3,r2,1aa10 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1a9fc:	e0fff717 	ldw	r3,-36(fp)
   1aa00:	e0bff817 	ldw	r2,-32(fp)
   1aa04:	1885c83a 	sub	r2,r3,r2
   1aa08:	e0bff615 	stw	r2,-40(fp)
   1aa0c:	00000406 	br	1aa20 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1aa10:	00c20004 	movi	r3,2048
   1aa14:	e0bff817 	ldw	r2,-32(fp)
   1aa18:	1885c83a 	sub	r2,r3,r2
   1aa1c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1aa20:	e0bff617 	ldw	r2,-40(fp)
   1aa24:	10001e26 	beq	r2,zero,1aaa0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1aa28:	e0fffe17 	ldw	r3,-8(fp)
   1aa2c:	e0bff617 	ldw	r2,-40(fp)
   1aa30:	1880022e 	bgeu	r3,r2,1aa3c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1aa34:	e0bffe17 	ldw	r2,-8(fp)
   1aa38:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1aa3c:	e0bff817 	ldw	r2,-32(fp)
   1aa40:	10800e04 	addi	r2,r2,56
   1aa44:	e0fffc17 	ldw	r3,-16(fp)
   1aa48:	1885883a 	add	r2,r3,r2
   1aa4c:	e13ff517 	ldw	r4,-44(fp)
   1aa50:	100b883a 	mov	r5,r2
   1aa54:	e1bff617 	ldw	r6,-40(fp)
   1aa58:	00159f40 	call	159f4 <memcpy>
      ptr   += n;
   1aa5c:	e0fff517 	ldw	r3,-44(fp)
   1aa60:	e0bff617 	ldw	r2,-40(fp)
   1aa64:	1885883a 	add	r2,r3,r2
   1aa68:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1aa6c:	e0fffe17 	ldw	r3,-8(fp)
   1aa70:	e0bff617 	ldw	r2,-40(fp)
   1aa74:	1885c83a 	sub	r2,r3,r2
   1aa78:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1aa7c:	e0fff817 	ldw	r3,-32(fp)
   1aa80:	e0bff617 	ldw	r2,-40(fp)
   1aa84:	1885883a 	add	r2,r3,r2
   1aa88:	10c1ffcc 	andi	r3,r2,2047
   1aa8c:	e0bffc17 	ldw	r2,-16(fp)
   1aa90:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1aa94:	e0bffe17 	ldw	r2,-8(fp)
   1aa98:	00bfcf16 	blt	zero,r2,1a9d8 <altera_avalon_jtag_uart_read+0x2c>
   1aa9c:	00000106 	br	1aaa4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1aaa0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1aaa4:	e0fff517 	ldw	r3,-44(fp)
   1aaa8:	e0bffd17 	ldw	r2,-12(fp)
   1aaac:	1880141e 	bne	r3,r2,1ab00 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1aab0:	e0bfff17 	ldw	r2,-4(fp)
   1aab4:	1090000c 	andi	r2,r2,16384
   1aab8:	1000131e 	bne	r2,zero,1ab08 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1aabc:	0001883a 	nop
   1aac0:	e0bffc17 	ldw	r2,-16(fp)
   1aac4:	10c00a17 	ldw	r3,40(r2)
   1aac8:	e0bff717 	ldw	r2,-36(fp)
   1aacc:	1880051e 	bne	r3,r2,1aae4 <altera_avalon_jtag_uart_read+0x138>
   1aad0:	e0bffc17 	ldw	r2,-16(fp)
   1aad4:	10c00917 	ldw	r3,36(r2)
   1aad8:	e0bffc17 	ldw	r2,-16(fp)
   1aadc:	10800117 	ldw	r2,4(r2)
   1aae0:	18bff736 	bltu	r3,r2,1aac0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1aae4:	e0bffc17 	ldw	r2,-16(fp)
   1aae8:	10c00a17 	ldw	r3,40(r2)
   1aaec:	e0bff717 	ldw	r2,-36(fp)
   1aaf0:	18800726 	beq	r3,r2,1ab10 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1aaf4:	e0bffe17 	ldw	r2,-8(fp)
   1aaf8:	00bfb716 	blt	zero,r2,1a9d8 <altera_avalon_jtag_uart_read+0x2c>
   1aafc:	00000506 	br	1ab14 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1ab00:	0001883a 	nop
   1ab04:	00000306 	br	1ab14 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1ab08:	0001883a 	nop
   1ab0c:	00000106 	br	1ab14 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1ab10:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1ab14:	e0fff517 	ldw	r3,-44(fp)
   1ab18:	e0bffd17 	ldw	r2,-12(fp)
   1ab1c:	18801726 	beq	r3,r2,1ab7c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ab20:	0005303a 	rdctl	r2,status
   1ab24:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ab28:	e0fffa17 	ldw	r3,-24(fp)
   1ab2c:	00bfff84 	movi	r2,-2
   1ab30:	1884703a 	and	r2,r3,r2
   1ab34:	1001703a 	wrctl	status,r2
  
  return context;
   1ab38:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1ab3c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ab40:	e0bffc17 	ldw	r2,-16(fp)
   1ab44:	10800817 	ldw	r2,32(r2)
   1ab48:	10c00054 	ori	r3,r2,1
   1ab4c:	e0bffc17 	ldw	r2,-16(fp)
   1ab50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ab54:	e0bffc17 	ldw	r2,-16(fp)
   1ab58:	10800017 	ldw	r2,0(r2)
   1ab5c:	10800104 	addi	r2,r2,4
   1ab60:	e0fffc17 	ldw	r3,-16(fp)
   1ab64:	18c00817 	ldw	r3,32(r3)
   1ab68:	10c00035 	stwio	r3,0(r2)
   1ab6c:	e0bff917 	ldw	r2,-28(fp)
   1ab70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ab74:	e0bffb17 	ldw	r2,-20(fp)
   1ab78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1ab7c:	e0fff517 	ldw	r3,-44(fp)
   1ab80:	e0bffd17 	ldw	r2,-12(fp)
   1ab84:	18800426 	beq	r3,r2,1ab98 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   1ab88:	e0fff517 	ldw	r3,-44(fp)
   1ab8c:	e0bffd17 	ldw	r2,-12(fp)
   1ab90:	1885c83a 	sub	r2,r3,r2
   1ab94:	00000606 	br	1abb0 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   1ab98:	e0bfff17 	ldw	r2,-4(fp)
   1ab9c:	1090000c 	andi	r2,r2,16384
   1aba0:	10000226 	beq	r2,zero,1abac <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   1aba4:	00bffd44 	movi	r2,-11
   1aba8:	00000106 	br	1abb0 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   1abac:	00bffec4 	movi	r2,-5
}
   1abb0:	e037883a 	mov	sp,fp
   1abb4:	dfc00117 	ldw	ra,4(sp)
   1abb8:	df000017 	ldw	fp,0(sp)
   1abbc:	dec00204 	addi	sp,sp,8
   1abc0:	f800283a 	ret

0001abc4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1abc4:	defff304 	addi	sp,sp,-52
   1abc8:	dfc00c15 	stw	ra,48(sp)
   1abcc:	df000b15 	stw	fp,44(sp)
   1abd0:	df000b04 	addi	fp,sp,44
   1abd4:	e13ffc15 	stw	r4,-16(fp)
   1abd8:	e17ffd15 	stw	r5,-12(fp)
   1abdc:	e1bffe15 	stw	r6,-8(fp)
   1abe0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1abe4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1abe8:	e0bffd17 	ldw	r2,-12(fp)
   1abec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1abf0:	00003706 	br	1acd0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1abf4:	e0bffc17 	ldw	r2,-16(fp)
   1abf8:	10800c17 	ldw	r2,48(r2)
   1abfc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   1ac00:	e0bffc17 	ldw	r2,-16(fp)
   1ac04:	10800d17 	ldw	r2,52(r2)
   1ac08:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1ac0c:	e0fff817 	ldw	r3,-32(fp)
   1ac10:	e0bff517 	ldw	r2,-44(fp)
   1ac14:	1880062e 	bgeu	r3,r2,1ac30 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1ac18:	e0fff517 	ldw	r3,-44(fp)
   1ac1c:	e0bff817 	ldw	r2,-32(fp)
   1ac20:	1885c83a 	sub	r2,r3,r2
   1ac24:	10bfffc4 	addi	r2,r2,-1
   1ac28:	e0bff615 	stw	r2,-40(fp)
   1ac2c:	00000b06 	br	1ac5c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1ac30:	e0bff517 	ldw	r2,-44(fp)
   1ac34:	10000526 	beq	r2,zero,1ac4c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1ac38:	00c20004 	movi	r3,2048
   1ac3c:	e0bff817 	ldw	r2,-32(fp)
   1ac40:	1885c83a 	sub	r2,r3,r2
   1ac44:	e0bff615 	stw	r2,-40(fp)
   1ac48:	00000406 	br	1ac5c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1ac4c:	00c1ffc4 	movi	r3,2047
   1ac50:	e0bff817 	ldw	r2,-32(fp)
   1ac54:	1885c83a 	sub	r2,r3,r2
   1ac58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1ac5c:	e0bff617 	ldw	r2,-40(fp)
   1ac60:	10001e26 	beq	r2,zero,1acdc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1ac64:	e0fffe17 	ldw	r3,-8(fp)
   1ac68:	e0bff617 	ldw	r2,-40(fp)
   1ac6c:	1880022e 	bgeu	r3,r2,1ac78 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1ac70:	e0bffe17 	ldw	r2,-8(fp)
   1ac74:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1ac78:	e0bff817 	ldw	r2,-32(fp)
   1ac7c:	10820e04 	addi	r2,r2,2104
   1ac80:	e0fffc17 	ldw	r3,-16(fp)
   1ac84:	1885883a 	add	r2,r3,r2
   1ac88:	1009883a 	mov	r4,r2
   1ac8c:	e17ffd17 	ldw	r5,-12(fp)
   1ac90:	e1bff617 	ldw	r6,-40(fp)
   1ac94:	00159f40 	call	159f4 <memcpy>
      ptr   += n;
   1ac98:	e0fffd17 	ldw	r3,-12(fp)
   1ac9c:	e0bff617 	ldw	r2,-40(fp)
   1aca0:	1885883a 	add	r2,r3,r2
   1aca4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1aca8:	e0fffe17 	ldw	r3,-8(fp)
   1acac:	e0bff617 	ldw	r2,-40(fp)
   1acb0:	1885c83a 	sub	r2,r3,r2
   1acb4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1acb8:	e0fff817 	ldw	r3,-32(fp)
   1acbc:	e0bff617 	ldw	r2,-40(fp)
   1acc0:	1885883a 	add	r2,r3,r2
   1acc4:	10c1ffcc 	andi	r3,r2,2047
   1acc8:	e0bffc17 	ldw	r2,-16(fp)
   1accc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1acd0:	e0bffe17 	ldw	r2,-8(fp)
   1acd4:	00bfc716 	blt	zero,r2,1abf4 <altera_avalon_jtag_uart_write+0x30>
   1acd8:	00000106 	br	1ace0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1acdc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ace0:	0005303a 	rdctl	r2,status
   1ace4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ace8:	e0fffa17 	ldw	r3,-24(fp)
   1acec:	00bfff84 	movi	r2,-2
   1acf0:	1884703a 	and	r2,r3,r2
   1acf4:	1001703a 	wrctl	status,r2
  
  return context;
   1acf8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1acfc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1ad00:	e0bffc17 	ldw	r2,-16(fp)
   1ad04:	10800817 	ldw	r2,32(r2)
   1ad08:	10c00094 	ori	r3,r2,2
   1ad0c:	e0bffc17 	ldw	r2,-16(fp)
   1ad10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ad14:	e0bffc17 	ldw	r2,-16(fp)
   1ad18:	10800017 	ldw	r2,0(r2)
   1ad1c:	10800104 	addi	r2,r2,4
   1ad20:	e0fffc17 	ldw	r3,-16(fp)
   1ad24:	18c00817 	ldw	r3,32(r3)
   1ad28:	10c00035 	stwio	r3,0(r2)
   1ad2c:	e0bff917 	ldw	r2,-28(fp)
   1ad30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ad34:	e0bffb17 	ldw	r2,-20(fp)
   1ad38:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1ad3c:	e0bffe17 	ldw	r2,-8(fp)
   1ad40:	0080110e 	bge	zero,r2,1ad88 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1ad44:	e0bfff17 	ldw	r2,-4(fp)
   1ad48:	1090000c 	andi	r2,r2,16384
   1ad4c:	1000111e 	bne	r2,zero,1ad94 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1ad50:	0001883a 	nop
   1ad54:	e0bffc17 	ldw	r2,-16(fp)
   1ad58:	10c00d17 	ldw	r3,52(r2)
   1ad5c:	e0bff517 	ldw	r2,-44(fp)
   1ad60:	1880051e 	bne	r3,r2,1ad78 <altera_avalon_jtag_uart_write+0x1b4>
   1ad64:	e0bffc17 	ldw	r2,-16(fp)
   1ad68:	10c00917 	ldw	r3,36(r2)
   1ad6c:	e0bffc17 	ldw	r2,-16(fp)
   1ad70:	10800117 	ldw	r2,4(r2)
   1ad74:	18bff736 	bltu	r3,r2,1ad54 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1ad78:	e0bffc17 	ldw	r2,-16(fp)
   1ad7c:	10c00d17 	ldw	r3,52(r2)
   1ad80:	e0bff517 	ldw	r2,-44(fp)
   1ad84:	18800526 	beq	r3,r2,1ad9c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1ad88:	e0bffe17 	ldw	r2,-8(fp)
   1ad8c:	00bfd016 	blt	zero,r2,1acd0 <altera_avalon_jtag_uart_write+0x10c>
   1ad90:	00000306 	br	1ada0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1ad94:	0001883a 	nop
   1ad98:	00000106 	br	1ada0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   1ad9c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1ada0:	e0fffd17 	ldw	r3,-12(fp)
   1ada4:	e0bff717 	ldw	r2,-36(fp)
   1ada8:	18800426 	beq	r3,r2,1adbc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1adac:	e0fffd17 	ldw	r3,-12(fp)
   1adb0:	e0bff717 	ldw	r2,-36(fp)
   1adb4:	1885c83a 	sub	r2,r3,r2
   1adb8:	00000606 	br	1add4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1adbc:	e0bfff17 	ldw	r2,-4(fp)
   1adc0:	1090000c 	andi	r2,r2,16384
   1adc4:	10000226 	beq	r2,zero,1add0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1adc8:	00bffd44 	movi	r2,-11
   1adcc:	00000106 	br	1add4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1add0:	00bffec4 	movi	r2,-5
}
   1add4:	e037883a 	mov	sp,fp
   1add8:	dfc00117 	ldw	ra,4(sp)
   1addc:	df000017 	ldw	fp,0(sp)
   1ade0:	dec00204 	addi	sp,sp,8
   1ade4:	f800283a 	ret

0001ade8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1ade8:	defffa04 	addi	sp,sp,-24
   1adec:	dfc00515 	stw	ra,20(sp)
   1adf0:	df000415 	stw	fp,16(sp)
   1adf4:	df000404 	addi	fp,sp,16
   1adf8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1adfc:	0007883a 	mov	r3,zero
   1ae00:	e0bfff17 	ldw	r2,-4(fp)
   1ae04:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1ae08:	e0bfff17 	ldw	r2,-4(fp)
   1ae0c:	10800104 	addi	r2,r2,4
   1ae10:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ae14:	0005303a 	rdctl	r2,status
   1ae18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ae1c:	e0fffd17 	ldw	r3,-12(fp)
   1ae20:	00bfff84 	movi	r2,-2
   1ae24:	1884703a 	and	r2,r3,r2
   1ae28:	1001703a 	wrctl	status,r2
  
  return context;
   1ae2c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1ae30:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1ae34:	001ba600 	call	1ba60 <alt_tick>
   1ae38:	e0bffc17 	ldw	r2,-16(fp)
   1ae3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ae40:	e0bffe17 	ldw	r2,-8(fp)
   1ae44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1ae48:	e037883a 	mov	sp,fp
   1ae4c:	dfc00117 	ldw	ra,4(sp)
   1ae50:	df000017 	ldw	fp,0(sp)
   1ae54:	dec00204 	addi	sp,sp,8
   1ae58:	f800283a 	ret

0001ae5c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1ae5c:	defff804 	addi	sp,sp,-32
   1ae60:	dfc00715 	stw	ra,28(sp)
   1ae64:	df000615 	stw	fp,24(sp)
   1ae68:	df000604 	addi	fp,sp,24
   1ae6c:	e13ffc15 	stw	r4,-16(fp)
   1ae70:	e17ffd15 	stw	r5,-12(fp)
   1ae74:	e1bffe15 	stw	r6,-8(fp)
   1ae78:	e1ffff15 	stw	r7,-4(fp)
   1ae7c:	e0bfff17 	ldw	r2,-4(fp)
   1ae80:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1ae84:	008000f4 	movhi	r2,3
   1ae88:	10a78e04 	addi	r2,r2,-25032
   1ae8c:	10800017 	ldw	r2,0(r2)
   1ae90:	1000041e 	bne	r2,zero,1aea4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1ae94:	008000f4 	movhi	r2,3
   1ae98:	10a78e04 	addi	r2,r2,-25032
   1ae9c:	e0fffb17 	ldw	r3,-20(fp)
   1aea0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1aea4:	e0bffc17 	ldw	r2,-16(fp)
   1aea8:	10800104 	addi	r2,r2,4
   1aeac:	00c001c4 	movi	r3,7
   1aeb0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1aeb4:	d8000015 	stw	zero,0(sp)
   1aeb8:	e13ffd17 	ldw	r4,-12(fp)
   1aebc:	e17ffe17 	ldw	r5,-8(fp)
   1aec0:	018000b4 	movhi	r6,2
   1aec4:	31ab7a04 	addi	r6,r6,-21016
   1aec8:	e1fffc17 	ldw	r7,-16(fp)
   1aecc:	001b3580 	call	1b358 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1aed0:	e037883a 	mov	sp,fp
   1aed4:	dfc00117 	ldw	ra,4(sp)
   1aed8:	df000017 	ldw	fp,0(sp)
   1aedc:	dec00204 	addi	sp,sp,8
   1aee0:	f800283a 	ret

0001aee4 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   1aee4:	defffe04 	addi	sp,sp,-8
   1aee8:	df000115 	stw	fp,4(sp)
   1aeec:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   1aef0:	008000f4 	movhi	r2,3
   1aef4:	10a78b04 	addi	r2,r2,-25044
   1aef8:	10800017 	ldw	r2,0(r2)
   1aefc:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   1af00:	008000f4 	movhi	r2,3
   1af04:	10a78c04 	addi	r2,r2,-25040
   1af08:	10800017 	ldw	r2,0(r2)
   1af0c:	1000021e 	bne	r2,zero,1af18 <alt_timestamp_start+0x34>
  {
    return -1;
   1af10:	00bfffc4 	movi	r2,-1
   1af14:	00001106 	br	1af5c <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   1af18:	e0bfff17 	ldw	r2,-4(fp)
   1af1c:	10800104 	addi	r2,r2,4
   1af20:	00c00204 	movi	r3,8
   1af24:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   1af28:	e0bfff17 	ldw	r2,-4(fp)
   1af2c:	10800204 	addi	r2,r2,8
   1af30:	00ffffd4 	movui	r3,65535
   1af34:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   1af38:	e0bfff17 	ldw	r2,-4(fp)
   1af3c:	10800304 	addi	r2,r2,12
   1af40:	00ffffd4 	movui	r3,65535
   1af44:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   1af48:	e0bfff17 	ldw	r2,-4(fp)
   1af4c:	10800104 	addi	r2,r2,4
   1af50:	00c00104 	movi	r3,4
   1af54:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   1af58:	0005883a 	mov	r2,zero
}
   1af5c:	e037883a 	mov	sp,fp
   1af60:	df000017 	ldw	fp,0(sp)
   1af64:	dec00104 	addi	sp,sp,4
   1af68:	f800283a 	ret

0001af6c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   1af6c:	defffc04 	addi	sp,sp,-16
   1af70:	df000315 	stw	fp,12(sp)
   1af74:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   1af78:	008000f4 	movhi	r2,3
   1af7c:	10a78b04 	addi	r2,r2,-25044
   1af80:	10800017 	ldw	r2,0(r2)
   1af84:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   1af88:	008000f4 	movhi	r2,3
   1af8c:	10a78c04 	addi	r2,r2,-25040
   1af90:	10800017 	ldw	r2,0(r2)
   1af94:	1000021e 	bne	r2,zero,1afa0 <alt_timestamp+0x34>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   1af98:	00bfffc4 	movi	r2,-1
   1af9c:	00001306 	br	1afec <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1afa0:	e0bffd17 	ldw	r2,-12(fp)
   1afa4:	10800404 	addi	r2,r2,16
   1afa8:	0007883a 	mov	r3,zero
   1afac:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1afb0:	e0bffd17 	ldw	r2,-12(fp)
   1afb4:	10800404 	addi	r2,r2,16
   1afb8:	10800037 	ldwio	r2,0(r2)
   1afbc:	10bfffcc 	andi	r2,r2,65535
   1afc0:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   1afc4:	e0bffd17 	ldw	r2,-12(fp)
   1afc8:	10800504 	addi	r2,r2,20
   1afcc:	10800037 	ldwio	r2,0(r2)
   1afd0:	10bfffcc 	andi	r2,r2,65535
   1afd4:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1afd8:	e0bfff17 	ldw	r2,-4(fp)
   1afdc:	1006943a 	slli	r3,r2,16
   1afe0:	e0bffe17 	ldw	r2,-8(fp)
   1afe4:	1884b03a 	or	r2,r3,r2
   1afe8:	0084303a 	nor	r2,zero,r2
    }  
  }
}
   1afec:	e037883a 	mov	sp,fp
   1aff0:	df000017 	ldw	fp,0(sp)
   1aff4:	dec00104 	addi	sp,sp,4
   1aff8:	f800283a 	ret

0001affc <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   1affc:	deffff04 	addi	sp,sp,-4
   1b000:	df000015 	stw	fp,0(sp)
   1b004:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1b008:	008000f4 	movhi	r2,3
   1b00c:	10a78c04 	addi	r2,r2,-25040
   1b010:	10800017 	ldw	r2,0(r2)
}
   1b014:	e037883a 	mov	sp,fp
   1b018:	df000017 	ldw	fp,0(sp)
   1b01c:	dec00104 	addi	sp,sp,4
   1b020:	f800283a 	ret

0001b024 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1b024:	defff504 	addi	sp,sp,-44
   1b028:	df000a15 	stw	fp,40(sp)
   1b02c:	df000a04 	addi	fp,sp,40
   1b030:	e13ffc15 	stw	r4,-16(fp)
   1b034:	e17ffd15 	stw	r5,-12(fp)
   1b038:	e1bffe15 	stw	r6,-8(fp)
   1b03c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1b040:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b044:	008000f4 	movhi	r2,3
   1b048:	10a78e04 	addi	r2,r2,-25032
   1b04c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1b050:	10003f26 	beq	r2,zero,1b150 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1b054:	e0bffc17 	ldw	r2,-16(fp)
   1b058:	10003b26 	beq	r2,zero,1b148 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1b05c:	e0bffc17 	ldw	r2,-16(fp)
   1b060:	e0fffe17 	ldw	r3,-8(fp)
   1b064:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1b068:	e0bffc17 	ldw	r2,-16(fp)
   1b06c:	e0ffff17 	ldw	r3,-4(fp)
   1b070:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b074:	0005303a 	rdctl	r2,status
   1b078:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b07c:	e0fff817 	ldw	r3,-32(fp)
   1b080:	00bfff84 	movi	r2,-2
   1b084:	1884703a 	and	r2,r3,r2
   1b088:	1001703a 	wrctl	status,r2
  
  return context;
   1b08c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1b090:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b094:	008000f4 	movhi	r2,3
   1b098:	10a78f04 	addi	r2,r2,-25028
   1b09c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1b0a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b0a4:	e0fffd17 	ldw	r3,-12(fp)
   1b0a8:	e0bff617 	ldw	r2,-40(fp)
   1b0ac:	1885883a 	add	r2,r3,r2
   1b0b0:	10c00044 	addi	r3,r2,1
   1b0b4:	e0bffc17 	ldw	r2,-16(fp)
   1b0b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b0bc:	e0bffc17 	ldw	r2,-16(fp)
   1b0c0:	10c00217 	ldw	r3,8(r2)
   1b0c4:	e0bff617 	ldw	r2,-40(fp)
   1b0c8:	1880042e 	bgeu	r3,r2,1b0dc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1b0cc:	e0bffc17 	ldw	r2,-16(fp)
   1b0d0:	00c00044 	movi	r3,1
   1b0d4:	10c00405 	stb	r3,16(r2)
   1b0d8:	00000206 	br	1b0e4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1b0dc:	e0bffc17 	ldw	r2,-16(fp)
   1b0e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b0e4:	e0bffc17 	ldw	r2,-16(fp)
   1b0e8:	00c000f4 	movhi	r3,3
   1b0ec:	18e77a04 	addi	r3,r3,-25112
   1b0f0:	e0fff915 	stw	r3,-28(fp)
   1b0f4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b0f8:	e0bffa17 	ldw	r2,-24(fp)
   1b0fc:	e0fff917 	ldw	r3,-28(fp)
   1b100:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b104:	e0bff917 	ldw	r2,-28(fp)
   1b108:	10c00017 	ldw	r3,0(r2)
   1b10c:	e0bffa17 	ldw	r2,-24(fp)
   1b110:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b114:	e0bff917 	ldw	r2,-28(fp)
   1b118:	10800017 	ldw	r2,0(r2)
   1b11c:	e0fffa17 	ldw	r3,-24(fp)
   1b120:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b124:	e0bff917 	ldw	r2,-28(fp)
   1b128:	e0fffa17 	ldw	r3,-24(fp)
   1b12c:	10c00015 	stw	r3,0(r2)
   1b130:	e0bff717 	ldw	r2,-36(fp)
   1b134:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b138:	e0bffb17 	ldw	r2,-20(fp)
   1b13c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b140:	0005883a 	mov	r2,zero
   1b144:	00000306 	br	1b154 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1b148:	00bffa84 	movi	r2,-22
   1b14c:	00000106 	br	1b154 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1b150:	00bfde84 	movi	r2,-134
  }
}
   1b154:	e037883a 	mov	sp,fp
   1b158:	df000017 	ldw	fp,0(sp)
   1b15c:	dec00104 	addi	sp,sp,4
   1b160:	f800283a 	ret

0001b164 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b164:	deffff04 	addi	sp,sp,-4
   1b168:	df000015 	stw	fp,0(sp)
   1b16c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b170:	e037883a 	mov	sp,fp
   1b174:	df000017 	ldw	fp,0(sp)
   1b178:	dec00104 	addi	sp,sp,4
   1b17c:	f800283a 	ret

0001b180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b180:	defffe04 	addi	sp,sp,-8
   1b184:	dfc00115 	stw	ra,4(sp)
   1b188:	df000015 	stw	fp,0(sp)
   1b18c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b190:	008000f4 	movhi	r2,3
   1b194:	10a77704 	addi	r2,r2,-25124
   1b198:	10800017 	ldw	r2,0(r2)
   1b19c:	10000526 	beq	r2,zero,1b1b4 <alt_get_errno+0x34>
   1b1a0:	008000f4 	movhi	r2,3
   1b1a4:	10a77704 	addi	r2,r2,-25124
   1b1a8:	10800017 	ldw	r2,0(r2)
   1b1ac:	103ee83a 	callr	r2
   1b1b0:	00000206 	br	1b1bc <alt_get_errno+0x3c>
   1b1b4:	008000f4 	movhi	r2,3
   1b1b8:	10a78704 	addi	r2,r2,-25060
}
   1b1bc:	e037883a 	mov	sp,fp
   1b1c0:	dfc00117 	ldw	ra,4(sp)
   1b1c4:	df000017 	ldw	fp,0(sp)
   1b1c8:	dec00204 	addi	sp,sp,8
   1b1cc:	f800283a 	ret

0001b1d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1b1d0:	defffa04 	addi	sp,sp,-24
   1b1d4:	dfc00515 	stw	ra,20(sp)
   1b1d8:	df000415 	stw	fp,16(sp)
   1b1dc:	df000404 	addi	fp,sp,16
   1b1e0:	e13ffe15 	stw	r4,-8(fp)
   1b1e4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1b1e8:	e0bffe17 	ldw	r2,-8(fp)
   1b1ec:	10000326 	beq	r2,zero,1b1fc <alt_dev_llist_insert+0x2c>
   1b1f0:	e0bffe17 	ldw	r2,-8(fp)
   1b1f4:	10800217 	ldw	r2,8(r2)
   1b1f8:	1000051e 	bne	r2,zero,1b210 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   1b1fc:	001b1800 	call	1b180 <alt_get_errno>
   1b200:	00c00584 	movi	r3,22
   1b204:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1b208:	00bffa84 	movi	r2,-22
   1b20c:	00001306 	br	1b25c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1b210:	e0bffe17 	ldw	r2,-8(fp)
   1b214:	e0ffff17 	ldw	r3,-4(fp)
   1b218:	e0fffc15 	stw	r3,-16(fp)
   1b21c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b220:	e0bffd17 	ldw	r2,-12(fp)
   1b224:	e0fffc17 	ldw	r3,-16(fp)
   1b228:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b22c:	e0bffc17 	ldw	r2,-16(fp)
   1b230:	10c00017 	ldw	r3,0(r2)
   1b234:	e0bffd17 	ldw	r2,-12(fp)
   1b238:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b23c:	e0bffc17 	ldw	r2,-16(fp)
   1b240:	10800017 	ldw	r2,0(r2)
   1b244:	e0fffd17 	ldw	r3,-12(fp)
   1b248:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b24c:	e0bffc17 	ldw	r2,-16(fp)
   1b250:	e0fffd17 	ldw	r3,-12(fp)
   1b254:	10c00015 	stw	r3,0(r2)

  return 0;  
   1b258:	0005883a 	mov	r2,zero
}
   1b25c:	e037883a 	mov	sp,fp
   1b260:	dfc00117 	ldw	ra,4(sp)
   1b264:	df000017 	ldw	fp,0(sp)
   1b268:	dec00204 	addi	sp,sp,8
   1b26c:	f800283a 	ret

0001b270 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1b270:	defffd04 	addi	sp,sp,-12
   1b274:	dfc00215 	stw	ra,8(sp)
   1b278:	df000115 	stw	fp,4(sp)
   1b27c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b280:	008000b4 	movhi	r2,2
   1b284:	10b08e04 	addi	r2,r2,-15816
   1b288:	e0bfff15 	stw	r2,-4(fp)
   1b28c:	00000606 	br	1b2a8 <_do_ctors+0x38>
        (*ctor) (); 
   1b290:	e0bfff17 	ldw	r2,-4(fp)
   1b294:	10800017 	ldw	r2,0(r2)
   1b298:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b29c:	e0bfff17 	ldw	r2,-4(fp)
   1b2a0:	10bfff04 	addi	r2,r2,-4
   1b2a4:	e0bfff15 	stw	r2,-4(fp)
   1b2a8:	e0ffff17 	ldw	r3,-4(fp)
   1b2ac:	008000b4 	movhi	r2,2
   1b2b0:	10b08f04 	addi	r2,r2,-15812
   1b2b4:	18bff62e 	bgeu	r3,r2,1b290 <_do_ctors+0x20>
        (*ctor) (); 
}
   1b2b8:	e037883a 	mov	sp,fp
   1b2bc:	dfc00117 	ldw	ra,4(sp)
   1b2c0:	df000017 	ldw	fp,0(sp)
   1b2c4:	dec00204 	addi	sp,sp,8
   1b2c8:	f800283a 	ret

0001b2cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1b2cc:	defffd04 	addi	sp,sp,-12
   1b2d0:	dfc00215 	stw	ra,8(sp)
   1b2d4:	df000115 	stw	fp,4(sp)
   1b2d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b2dc:	008000b4 	movhi	r2,2
   1b2e0:	10b08e04 	addi	r2,r2,-15816
   1b2e4:	e0bfff15 	stw	r2,-4(fp)
   1b2e8:	00000606 	br	1b304 <_do_dtors+0x38>
        (*dtor) (); 
   1b2ec:	e0bfff17 	ldw	r2,-4(fp)
   1b2f0:	10800017 	ldw	r2,0(r2)
   1b2f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b2f8:	e0bfff17 	ldw	r2,-4(fp)
   1b2fc:	10bfff04 	addi	r2,r2,-4
   1b300:	e0bfff15 	stw	r2,-4(fp)
   1b304:	e0ffff17 	ldw	r3,-4(fp)
   1b308:	008000b4 	movhi	r2,2
   1b30c:	10b08f04 	addi	r2,r2,-15812
   1b310:	18bff62e 	bgeu	r3,r2,1b2ec <_do_dtors+0x20>
        (*dtor) (); 
}
   1b314:	e037883a 	mov	sp,fp
   1b318:	dfc00117 	ldw	ra,4(sp)
   1b31c:	df000017 	ldw	fp,0(sp)
   1b320:	dec00204 	addi	sp,sp,8
   1b324:	f800283a 	ret

0001b328 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1b328:	defffe04 	addi	sp,sp,-8
   1b32c:	dfc00115 	stw	ra,4(sp)
   1b330:	df000015 	stw	fp,0(sp)
   1b334:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1b338:	0009883a 	mov	r4,zero
   1b33c:	01440004 	movi	r5,4096
   1b340:	001bddc0 	call	1bddc <alt_icache_flush>
#endif
}
   1b344:	e037883a 	mov	sp,fp
   1b348:	dfc00117 	ldw	ra,4(sp)
   1b34c:	df000017 	ldw	fp,0(sp)
   1b350:	dec00204 	addi	sp,sp,8
   1b354:	f800283a 	ret

0001b358 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b358:	defff904 	addi	sp,sp,-28
   1b35c:	dfc00615 	stw	ra,24(sp)
   1b360:	df000515 	stw	fp,20(sp)
   1b364:	df000504 	addi	fp,sp,20
   1b368:	e13ffc15 	stw	r4,-16(fp)
   1b36c:	e17ffd15 	stw	r5,-12(fp)
   1b370:	e1bffe15 	stw	r6,-8(fp)
   1b374:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1b378:	e0800217 	ldw	r2,8(fp)
   1b37c:	d8800015 	stw	r2,0(sp)
   1b380:	e13ffc17 	ldw	r4,-16(fp)
   1b384:	e17ffd17 	ldw	r5,-12(fp)
   1b388:	e1bffe17 	ldw	r6,-8(fp)
   1b38c:	e1ffff17 	ldw	r7,-4(fp)
   1b390:	001b5300 	call	1b530 <alt_iic_isr_register>
}  
   1b394:	e037883a 	mov	sp,fp
   1b398:	dfc00117 	ldw	ra,4(sp)
   1b39c:	df000017 	ldw	fp,0(sp)
   1b3a0:	dec00204 	addi	sp,sp,8
   1b3a4:	f800283a 	ret

0001b3a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1b3a8:	defff904 	addi	sp,sp,-28
   1b3ac:	df000615 	stw	fp,24(sp)
   1b3b0:	df000604 	addi	fp,sp,24
   1b3b4:	e13ffe15 	stw	r4,-8(fp)
   1b3b8:	e17fff15 	stw	r5,-4(fp)
   1b3bc:	e0bfff17 	ldw	r2,-4(fp)
   1b3c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b3c4:	0005303a 	rdctl	r2,status
   1b3c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b3cc:	e0fffb17 	ldw	r3,-20(fp)
   1b3d0:	00bfff84 	movi	r2,-2
   1b3d4:	1884703a 	and	r2,r3,r2
   1b3d8:	1001703a 	wrctl	status,r2
  
  return context;
   1b3dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b3e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1b3e4:	e0bffa17 	ldw	r2,-24(fp)
   1b3e8:	00c00044 	movi	r3,1
   1b3ec:	1884983a 	sll	r2,r3,r2
   1b3f0:	1007883a 	mov	r3,r2
   1b3f4:	008000f4 	movhi	r2,3
   1b3f8:	10a78d04 	addi	r2,r2,-25036
   1b3fc:	10800017 	ldw	r2,0(r2)
   1b400:	1886b03a 	or	r3,r3,r2
   1b404:	008000f4 	movhi	r2,3
   1b408:	10a78d04 	addi	r2,r2,-25036
   1b40c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b410:	008000f4 	movhi	r2,3
   1b414:	10a78d04 	addi	r2,r2,-25036
   1b418:	10800017 	ldw	r2,0(r2)
   1b41c:	100170fa 	wrctl	ienable,r2
   1b420:	e0bffc17 	ldw	r2,-16(fp)
   1b424:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b428:	e0bffd17 	ldw	r2,-12(fp)
   1b42c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b430:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1b434:	e037883a 	mov	sp,fp
   1b438:	df000017 	ldw	fp,0(sp)
   1b43c:	dec00104 	addi	sp,sp,4
   1b440:	f800283a 	ret

0001b444 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1b444:	defff904 	addi	sp,sp,-28
   1b448:	df000615 	stw	fp,24(sp)
   1b44c:	df000604 	addi	fp,sp,24
   1b450:	e13ffe15 	stw	r4,-8(fp)
   1b454:	e17fff15 	stw	r5,-4(fp)
   1b458:	e0bfff17 	ldw	r2,-4(fp)
   1b45c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b460:	0005303a 	rdctl	r2,status
   1b464:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b468:	e0fffb17 	ldw	r3,-20(fp)
   1b46c:	00bfff84 	movi	r2,-2
   1b470:	1884703a 	and	r2,r3,r2
   1b474:	1001703a 	wrctl	status,r2
  
  return context;
   1b478:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b47c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1b480:	e0bffa17 	ldw	r2,-24(fp)
   1b484:	00c00044 	movi	r3,1
   1b488:	1884983a 	sll	r2,r3,r2
   1b48c:	0084303a 	nor	r2,zero,r2
   1b490:	1007883a 	mov	r3,r2
   1b494:	008000f4 	movhi	r2,3
   1b498:	10a78d04 	addi	r2,r2,-25036
   1b49c:	10800017 	ldw	r2,0(r2)
   1b4a0:	1886703a 	and	r3,r3,r2
   1b4a4:	008000f4 	movhi	r2,3
   1b4a8:	10a78d04 	addi	r2,r2,-25036
   1b4ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b4b0:	008000f4 	movhi	r2,3
   1b4b4:	10a78d04 	addi	r2,r2,-25036
   1b4b8:	10800017 	ldw	r2,0(r2)
   1b4bc:	100170fa 	wrctl	ienable,r2
   1b4c0:	e0bffc17 	ldw	r2,-16(fp)
   1b4c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b4c8:	e0bffd17 	ldw	r2,-12(fp)
   1b4cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b4d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1b4d4:	e037883a 	mov	sp,fp
   1b4d8:	df000017 	ldw	fp,0(sp)
   1b4dc:	dec00104 	addi	sp,sp,4
   1b4e0:	f800283a 	ret

0001b4e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1b4e4:	defffc04 	addi	sp,sp,-16
   1b4e8:	df000315 	stw	fp,12(sp)
   1b4ec:	df000304 	addi	fp,sp,12
   1b4f0:	e13ffe15 	stw	r4,-8(fp)
   1b4f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1b4f8:	000530fa 	rdctl	r2,ienable
   1b4fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1b500:	e0bfff17 	ldw	r2,-4(fp)
   1b504:	00c00044 	movi	r3,1
   1b508:	1884983a 	sll	r2,r3,r2
   1b50c:	1007883a 	mov	r3,r2
   1b510:	e0bffd17 	ldw	r2,-12(fp)
   1b514:	1884703a 	and	r2,r3,r2
   1b518:	1004c03a 	cmpne	r2,r2,zero
   1b51c:	10803fcc 	andi	r2,r2,255
}
   1b520:	e037883a 	mov	sp,fp
   1b524:	df000017 	ldw	fp,0(sp)
   1b528:	dec00104 	addi	sp,sp,4
   1b52c:	f800283a 	ret

0001b530 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b530:	defff504 	addi	sp,sp,-44
   1b534:	dfc00a15 	stw	ra,40(sp)
   1b538:	df000915 	stw	fp,36(sp)
   1b53c:	df000904 	addi	fp,sp,36
   1b540:	e13ffc15 	stw	r4,-16(fp)
   1b544:	e17ffd15 	stw	r5,-12(fp)
   1b548:	e1bffe15 	stw	r6,-8(fp)
   1b54c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1b550:	00bffa84 	movi	r2,-22
   1b554:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1b558:	e0bffd17 	ldw	r2,-12(fp)
   1b55c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1b560:	e0bff817 	ldw	r2,-32(fp)
   1b564:	10800808 	cmpgei	r2,r2,32
   1b568:	1000271e 	bne	r2,zero,1b608 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b56c:	0005303a 	rdctl	r2,status
   1b570:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b574:	e0fffa17 	ldw	r3,-24(fp)
   1b578:	00bfff84 	movi	r2,-2
   1b57c:	1884703a 	and	r2,r3,r2
   1b580:	1001703a 	wrctl	status,r2
  
  return context;
   1b584:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1b588:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   1b58c:	00c000f4 	movhi	r3,3
   1b590:	18e79a04 	addi	r3,r3,-24984
   1b594:	e0bff817 	ldw	r2,-32(fp)
   1b598:	100490fa 	slli	r2,r2,3
   1b59c:	1885883a 	add	r2,r3,r2
   1b5a0:	e0fffe17 	ldw	r3,-8(fp)
   1b5a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1b5a8:	00c000f4 	movhi	r3,3
   1b5ac:	18e79a04 	addi	r3,r3,-24984
   1b5b0:	e0bff817 	ldw	r2,-32(fp)
   1b5b4:	100490fa 	slli	r2,r2,3
   1b5b8:	1885883a 	add	r2,r3,r2
   1b5bc:	10800104 	addi	r2,r2,4
   1b5c0:	e0ffff17 	ldw	r3,-4(fp)
   1b5c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1b5c8:	e0bffe17 	ldw	r2,-8(fp)
   1b5cc:	10000526 	beq	r2,zero,1b5e4 <alt_iic_isr_register+0xb4>
   1b5d0:	e0bff817 	ldw	r2,-32(fp)
   1b5d4:	e13ffc17 	ldw	r4,-16(fp)
   1b5d8:	100b883a 	mov	r5,r2
   1b5dc:	001b3a80 	call	1b3a8 <alt_ic_irq_enable>
   1b5e0:	00000406 	br	1b5f4 <alt_iic_isr_register+0xc4>
   1b5e4:	e0bff817 	ldw	r2,-32(fp)
   1b5e8:	e13ffc17 	ldw	r4,-16(fp)
   1b5ec:	100b883a 	mov	r5,r2
   1b5f0:	001b4440 	call	1b444 <alt_ic_irq_disable>
   1b5f4:	e0bff715 	stw	r2,-36(fp)
   1b5f8:	e0bff917 	ldw	r2,-28(fp)
   1b5fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b600:	e0bffb17 	ldw	r2,-20(fp)
   1b604:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1b608:	e0bff717 	ldw	r2,-36(fp)
}
   1b60c:	e037883a 	mov	sp,fp
   1b610:	dfc00117 	ldw	ra,4(sp)
   1b614:	df000017 	ldw	fp,0(sp)
   1b618:	dec00204 	addi	sp,sp,8
   1b61c:	f800283a 	ret

0001b620 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1b620:	defff904 	addi	sp,sp,-28
   1b624:	dfc00615 	stw	ra,24(sp)
   1b628:	df000515 	stw	fp,20(sp)
   1b62c:	df000504 	addi	fp,sp,20
   1b630:	e13ffc15 	stw	r4,-16(fp)
   1b634:	e17ffd15 	stw	r5,-12(fp)
   1b638:	e1bffe15 	stw	r6,-8(fp)
   1b63c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1b640:	e13ffd17 	ldw	r4,-12(fp)
   1b644:	e17ffe17 	ldw	r5,-8(fp)
   1b648:	e1bfff17 	ldw	r6,-4(fp)
   1b64c:	001b8740 	call	1b874 <open>
   1b650:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1b654:	e0bffb17 	ldw	r2,-20(fp)
   1b658:	10001c16 	blt	r2,zero,1b6cc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1b65c:	00c000f4 	movhi	r3,3
   1b660:	18e2f504 	addi	r3,r3,-29740
   1b664:	e0bffb17 	ldw	r2,-20(fp)
   1b668:	10800324 	muli	r2,r2,12
   1b66c:	1885883a 	add	r2,r3,r2
   1b670:	10c00017 	ldw	r3,0(r2)
   1b674:	e0bffc17 	ldw	r2,-16(fp)
   1b678:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1b67c:	00c000f4 	movhi	r3,3
   1b680:	18e2f504 	addi	r3,r3,-29740
   1b684:	e0bffb17 	ldw	r2,-20(fp)
   1b688:	10800324 	muli	r2,r2,12
   1b68c:	1885883a 	add	r2,r3,r2
   1b690:	10800104 	addi	r2,r2,4
   1b694:	10c00017 	ldw	r3,0(r2)
   1b698:	e0bffc17 	ldw	r2,-16(fp)
   1b69c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1b6a0:	00c000f4 	movhi	r3,3
   1b6a4:	18e2f504 	addi	r3,r3,-29740
   1b6a8:	e0bffb17 	ldw	r2,-20(fp)
   1b6ac:	10800324 	muli	r2,r2,12
   1b6b0:	1885883a 	add	r2,r3,r2
   1b6b4:	10800204 	addi	r2,r2,8
   1b6b8:	10c00017 	ldw	r3,0(r2)
   1b6bc:	e0bffc17 	ldw	r2,-16(fp)
   1b6c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1b6c4:	e13ffb17 	ldw	r4,-20(fp)
   1b6c8:	001a0440 	call	1a044 <alt_release_fd>
  }
} 
   1b6cc:	e037883a 	mov	sp,fp
   1b6d0:	dfc00117 	ldw	ra,4(sp)
   1b6d4:	df000017 	ldw	fp,0(sp)
   1b6d8:	dec00204 	addi	sp,sp,8
   1b6dc:	f800283a 	ret

0001b6e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1b6e0:	defffb04 	addi	sp,sp,-20
   1b6e4:	dfc00415 	stw	ra,16(sp)
   1b6e8:	df000315 	stw	fp,12(sp)
   1b6ec:	df000304 	addi	fp,sp,12
   1b6f0:	e13ffd15 	stw	r4,-12(fp)
   1b6f4:	e17ffe15 	stw	r5,-8(fp)
   1b6f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1b6fc:	010000f4 	movhi	r4,3
   1b700:	2122f804 	addi	r4,r4,-29728
   1b704:	e17ffd17 	ldw	r5,-12(fp)
   1b708:	01800044 	movi	r6,1
   1b70c:	01c07fc4 	movi	r7,511
   1b710:	001b6200 	call	1b620 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1b714:	010000f4 	movhi	r4,3
   1b718:	2122f504 	addi	r4,r4,-29740
   1b71c:	e17ffe17 	ldw	r5,-8(fp)
   1b720:	000d883a 	mov	r6,zero
   1b724:	01c07fc4 	movi	r7,511
   1b728:	001b6200 	call	1b620 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1b72c:	010000f4 	movhi	r4,3
   1b730:	2122fb04 	addi	r4,r4,-29716
   1b734:	e17fff17 	ldw	r5,-4(fp)
   1b738:	01800044 	movi	r6,1
   1b73c:	01c07fc4 	movi	r7,511
   1b740:	001b6200 	call	1b620 <alt_open_fd>
}  
   1b744:	e037883a 	mov	sp,fp
   1b748:	dfc00117 	ldw	ra,4(sp)
   1b74c:	df000017 	ldw	fp,0(sp)
   1b750:	dec00204 	addi	sp,sp,8
   1b754:	f800283a 	ret

0001b758 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b758:	defffe04 	addi	sp,sp,-8
   1b75c:	dfc00115 	stw	ra,4(sp)
   1b760:	df000015 	stw	fp,0(sp)
   1b764:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b768:	008000f4 	movhi	r2,3
   1b76c:	10a77704 	addi	r2,r2,-25124
   1b770:	10800017 	ldw	r2,0(r2)
   1b774:	10000526 	beq	r2,zero,1b78c <alt_get_errno+0x34>
   1b778:	008000f4 	movhi	r2,3
   1b77c:	10a77704 	addi	r2,r2,-25124
   1b780:	10800017 	ldw	r2,0(r2)
   1b784:	103ee83a 	callr	r2
   1b788:	00000206 	br	1b794 <alt_get_errno+0x3c>
   1b78c:	008000f4 	movhi	r2,3
   1b790:	10a78704 	addi	r2,r2,-25060
}
   1b794:	e037883a 	mov	sp,fp
   1b798:	dfc00117 	ldw	ra,4(sp)
   1b79c:	df000017 	ldw	fp,0(sp)
   1b7a0:	dec00204 	addi	sp,sp,8
   1b7a4:	f800283a 	ret

0001b7a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1b7a8:	defffd04 	addi	sp,sp,-12
   1b7ac:	df000215 	stw	fp,8(sp)
   1b7b0:	df000204 	addi	fp,sp,8
   1b7b4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1b7b8:	e0bfff17 	ldw	r2,-4(fp)
   1b7bc:	10800217 	ldw	r2,8(r2)
   1b7c0:	10d00034 	orhi	r3,r2,16384
   1b7c4:	e0bfff17 	ldw	r2,-4(fp)
   1b7c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b7cc:	e03ffe15 	stw	zero,-8(fp)
   1b7d0:	00001d06 	br	1b848 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b7d4:	00c000f4 	movhi	r3,3
   1b7d8:	18e2f504 	addi	r3,r3,-29740
   1b7dc:	e0bffe17 	ldw	r2,-8(fp)
   1b7e0:	10800324 	muli	r2,r2,12
   1b7e4:	1885883a 	add	r2,r3,r2
   1b7e8:	10c00017 	ldw	r3,0(r2)
   1b7ec:	e0bfff17 	ldw	r2,-4(fp)
   1b7f0:	10800017 	ldw	r2,0(r2)
   1b7f4:	1880111e 	bne	r3,r2,1b83c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b7f8:	00c000f4 	movhi	r3,3
   1b7fc:	18e2f504 	addi	r3,r3,-29740
   1b800:	e0bffe17 	ldw	r2,-8(fp)
   1b804:	10800324 	muli	r2,r2,12
   1b808:	1885883a 	add	r2,r3,r2
   1b80c:	10800204 	addi	r2,r2,8
   1b810:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b814:	1000090e 	bge	r2,zero,1b83c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1b818:	e0bffe17 	ldw	r2,-8(fp)
   1b81c:	10c00324 	muli	r3,r2,12
   1b820:	008000f4 	movhi	r2,3
   1b824:	10a2f504 	addi	r2,r2,-29740
   1b828:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b82c:	e0bfff17 	ldw	r2,-4(fp)
   1b830:	18800226 	beq	r3,r2,1b83c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1b834:	00bffcc4 	movi	r2,-13
   1b838:	00000a06 	br	1b864 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b83c:	e0bffe17 	ldw	r2,-8(fp)
   1b840:	10800044 	addi	r2,r2,1
   1b844:	e0bffe15 	stw	r2,-8(fp)
   1b848:	008000f4 	movhi	r2,3
   1b84c:	10a77604 	addi	r2,r2,-25128
   1b850:	10800017 	ldw	r2,0(r2)
   1b854:	1007883a 	mov	r3,r2
   1b858:	e0bffe17 	ldw	r2,-8(fp)
   1b85c:	18bfdd2e 	bgeu	r3,r2,1b7d4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1b860:	0005883a 	mov	r2,zero
}
   1b864:	e037883a 	mov	sp,fp
   1b868:	df000017 	ldw	fp,0(sp)
   1b86c:	dec00104 	addi	sp,sp,4
   1b870:	f800283a 	ret

0001b874 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1b874:	defff604 	addi	sp,sp,-40
   1b878:	dfc00915 	stw	ra,36(sp)
   1b87c:	df000815 	stw	fp,32(sp)
   1b880:	df000804 	addi	fp,sp,32
   1b884:	e13ffd15 	stw	r4,-12(fp)
   1b888:	e17ffe15 	stw	r5,-8(fp)
   1b88c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1b890:	00bfffc4 	movi	r2,-1
   1b894:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1b898:	00bffb44 	movi	r2,-19
   1b89c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1b8a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1b8a4:	e13ffd17 	ldw	r4,-12(fp)
   1b8a8:	014000f4 	movhi	r5,3
   1b8ac:	29677404 	addi	r5,r5,-25136
   1b8b0:	001bb840 	call	1bb84 <alt_find_dev>
   1b8b4:	e0bff815 	stw	r2,-32(fp)
   1b8b8:	e0bff817 	ldw	r2,-32(fp)
   1b8bc:	1000051e 	bne	r2,zero,1b8d4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1b8c0:	e13ffd17 	ldw	r4,-12(fp)
   1b8c4:	001bc140 	call	1bc14 <alt_find_file>
   1b8c8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1b8cc:	00800044 	movi	r2,1
   1b8d0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1b8d4:	e0bff817 	ldw	r2,-32(fp)
   1b8d8:	10002926 	beq	r2,zero,1b980 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1b8dc:	e13ff817 	ldw	r4,-32(fp)
   1b8e0:	001bd280 	call	1bd28 <alt_get_fd>
   1b8e4:	e0bff915 	stw	r2,-28(fp)
   1b8e8:	e0bff917 	ldw	r2,-28(fp)
   1b8ec:	1000030e 	bge	r2,zero,1b8fc <open+0x88>
    {
      status = index;
   1b8f0:	e0bff917 	ldw	r2,-28(fp)
   1b8f4:	e0bffa15 	stw	r2,-24(fp)
   1b8f8:	00002306 	br	1b988 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1b8fc:	e0bff917 	ldw	r2,-28(fp)
   1b900:	10c00324 	muli	r3,r2,12
   1b904:	008000f4 	movhi	r2,3
   1b908:	10a2f504 	addi	r2,r2,-29740
   1b90c:	1885883a 	add	r2,r3,r2
   1b910:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1b914:	e0fffe17 	ldw	r3,-8(fp)
   1b918:	00900034 	movhi	r2,16384
   1b91c:	10bfffc4 	addi	r2,r2,-1
   1b920:	1886703a 	and	r3,r3,r2
   1b924:	e0bffc17 	ldw	r2,-16(fp)
   1b928:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1b92c:	e0bffb17 	ldw	r2,-20(fp)
   1b930:	1000051e 	bne	r2,zero,1b948 <open+0xd4>
   1b934:	e13ffc17 	ldw	r4,-16(fp)
   1b938:	001b7a80 	call	1b7a8 <alt_file_locked>
   1b93c:	e0bffa15 	stw	r2,-24(fp)
   1b940:	e0bffa17 	ldw	r2,-24(fp)
   1b944:	10001016 	blt	r2,zero,1b988 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1b948:	e0bff817 	ldw	r2,-32(fp)
   1b94c:	10800317 	ldw	r2,12(r2)
   1b950:	10000826 	beq	r2,zero,1b974 <open+0x100>
   1b954:	e0bff817 	ldw	r2,-32(fp)
   1b958:	10800317 	ldw	r2,12(r2)
   1b95c:	e13ffc17 	ldw	r4,-16(fp)
   1b960:	e17ffd17 	ldw	r5,-12(fp)
   1b964:	e1bffe17 	ldw	r6,-8(fp)
   1b968:	e1ffff17 	ldw	r7,-4(fp)
   1b96c:	103ee83a 	callr	r2
   1b970:	00000106 	br	1b978 <open+0x104>
   1b974:	0005883a 	mov	r2,zero
   1b978:	e0bffa15 	stw	r2,-24(fp)
   1b97c:	00000206 	br	1b988 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1b980:	00bffb44 	movi	r2,-19
   1b984:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1b988:	e0bffa17 	ldw	r2,-24(fp)
   1b98c:	1000080e 	bge	r2,zero,1b9b0 <open+0x13c>
  {
    alt_release_fd (index);  
   1b990:	e13ff917 	ldw	r4,-28(fp)
   1b994:	001a0440 	call	1a044 <alt_release_fd>
    ALT_ERRNO = -status;
   1b998:	001b7580 	call	1b758 <alt_get_errno>
   1b99c:	e0fffa17 	ldw	r3,-24(fp)
   1b9a0:	00c7c83a 	sub	r3,zero,r3
   1b9a4:	10c00015 	stw	r3,0(r2)
    return -1;
   1b9a8:	00bfffc4 	movi	r2,-1
   1b9ac:	00000106 	br	1b9b4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1b9b0:	e0bff917 	ldw	r2,-28(fp)
}
   1b9b4:	e037883a 	mov	sp,fp
   1b9b8:	dfc00117 	ldw	ra,4(sp)
   1b9bc:	df000017 	ldw	fp,0(sp)
   1b9c0:	dec00204 	addi	sp,sp,8
   1b9c4:	f800283a 	ret

0001b9c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1b9c8:	defffa04 	addi	sp,sp,-24
   1b9cc:	df000515 	stw	fp,20(sp)
   1b9d0:	df000504 	addi	fp,sp,20
   1b9d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b9d8:	0005303a 	rdctl	r2,status
   1b9dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b9e0:	e0fffc17 	ldw	r3,-16(fp)
   1b9e4:	00bfff84 	movi	r2,-2
   1b9e8:	1884703a 	and	r2,r3,r2
   1b9ec:	1001703a 	wrctl	status,r2
  
  return context;
   1b9f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1b9f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1b9f8:	e0bfff17 	ldw	r2,-4(fp)
   1b9fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1ba00:	e0bffd17 	ldw	r2,-12(fp)
   1ba04:	10800017 	ldw	r2,0(r2)
   1ba08:	e0fffd17 	ldw	r3,-12(fp)
   1ba0c:	18c00117 	ldw	r3,4(r3)
   1ba10:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1ba14:	e0bffd17 	ldw	r2,-12(fp)
   1ba18:	10800117 	ldw	r2,4(r2)
   1ba1c:	e0fffd17 	ldw	r3,-12(fp)
   1ba20:	18c00017 	ldw	r3,0(r3)
   1ba24:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1ba28:	e0bffd17 	ldw	r2,-12(fp)
   1ba2c:	e0fffd17 	ldw	r3,-12(fp)
   1ba30:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1ba34:	e0bffd17 	ldw	r2,-12(fp)
   1ba38:	e0fffd17 	ldw	r3,-12(fp)
   1ba3c:	10c00015 	stw	r3,0(r2)
   1ba40:	e0bffb17 	ldw	r2,-20(fp)
   1ba44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba48:	e0bffe17 	ldw	r2,-8(fp)
   1ba4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1ba50:	e037883a 	mov	sp,fp
   1ba54:	df000017 	ldw	fp,0(sp)
   1ba58:	dec00104 	addi	sp,sp,4
   1ba5c:	f800283a 	ret

0001ba60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1ba60:	defffb04 	addi	sp,sp,-20
   1ba64:	dfc00415 	stw	ra,16(sp)
   1ba68:	df000315 	stw	fp,12(sp)
   1ba6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1ba70:	d0a00d17 	ldw	r2,-32716(gp)
   1ba74:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1ba78:	d0a02217 	ldw	r2,-32632(gp)
   1ba7c:	10800044 	addi	r2,r2,1
   1ba80:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ba84:	00002e06 	br	1bb40 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1ba88:	e0bffd17 	ldw	r2,-12(fp)
   1ba8c:	10800017 	ldw	r2,0(r2)
   1ba90:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1ba94:	e0bffd17 	ldw	r2,-12(fp)
   1ba98:	10800403 	ldbu	r2,16(r2)
   1ba9c:	10803fcc 	andi	r2,r2,255
   1baa0:	10000426 	beq	r2,zero,1bab4 <alt_tick+0x54>
   1baa4:	d0a02217 	ldw	r2,-32632(gp)
   1baa8:	1000021e 	bne	r2,zero,1bab4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1baac:	e0bffd17 	ldw	r2,-12(fp)
   1bab0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1bab4:	e0bffd17 	ldw	r2,-12(fp)
   1bab8:	10800217 	ldw	r2,8(r2)
   1babc:	d0e02217 	ldw	r3,-32632(gp)
   1bac0:	18801d36 	bltu	r3,r2,1bb38 <alt_tick+0xd8>
   1bac4:	e0bffd17 	ldw	r2,-12(fp)
   1bac8:	10800403 	ldbu	r2,16(r2)
   1bacc:	10803fcc 	andi	r2,r2,255
   1bad0:	1000191e 	bne	r2,zero,1bb38 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1bad4:	e0bffd17 	ldw	r2,-12(fp)
   1bad8:	10c00317 	ldw	r3,12(r2)
   1badc:	e0bffd17 	ldw	r2,-12(fp)
   1bae0:	10800517 	ldw	r2,20(r2)
   1bae4:	1009883a 	mov	r4,r2
   1bae8:	183ee83a 	callr	r3
   1baec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1baf0:	e0bfff17 	ldw	r2,-4(fp)
   1baf4:	1000031e 	bne	r2,zero,1bb04 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1baf8:	e13ffd17 	ldw	r4,-12(fp)
   1bafc:	001b9c80 	call	1b9c8 <alt_alarm_stop>
   1bb00:	00000d06 	br	1bb38 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1bb04:	e0bffd17 	ldw	r2,-12(fp)
   1bb08:	10c00217 	ldw	r3,8(r2)
   1bb0c:	e0bfff17 	ldw	r2,-4(fp)
   1bb10:	1887883a 	add	r3,r3,r2
   1bb14:	e0bffd17 	ldw	r2,-12(fp)
   1bb18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1bb1c:	e0bffd17 	ldw	r2,-12(fp)
   1bb20:	10c00217 	ldw	r3,8(r2)
   1bb24:	d0a02217 	ldw	r2,-32632(gp)
   1bb28:	1880032e 	bgeu	r3,r2,1bb38 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1bb2c:	e0bffd17 	ldw	r2,-12(fp)
   1bb30:	00c00044 	movi	r3,1
   1bb34:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1bb38:	e0bffe17 	ldw	r2,-8(fp)
   1bb3c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1bb40:	e0fffd17 	ldw	r3,-12(fp)
   1bb44:	d0a00d04 	addi	r2,gp,-32716
   1bb48:	18bfcf1e 	bne	r3,r2,1ba88 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1bb4c:	0001883a 	nop
}
   1bb50:	e037883a 	mov	sp,fp
   1bb54:	dfc00117 	ldw	ra,4(sp)
   1bb58:	df000017 	ldw	fp,0(sp)
   1bb5c:	dec00204 	addi	sp,sp,8
   1bb60:	f800283a 	ret

0001bb64 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1bb64:	deffff04 	addi	sp,sp,-4
   1bb68:	df000015 	stw	fp,0(sp)
   1bb6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1bb70:	000170fa 	wrctl	ienable,zero
}
   1bb74:	e037883a 	mov	sp,fp
   1bb78:	df000017 	ldw	fp,0(sp)
   1bb7c:	dec00104 	addi	sp,sp,4
   1bb80:	f800283a 	ret

0001bb84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1bb84:	defffa04 	addi	sp,sp,-24
   1bb88:	dfc00515 	stw	ra,20(sp)
   1bb8c:	df000415 	stw	fp,16(sp)
   1bb90:	df000404 	addi	fp,sp,16
   1bb94:	e13ffe15 	stw	r4,-8(fp)
   1bb98:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1bb9c:	e0bfff17 	ldw	r2,-4(fp)
   1bba0:	10800017 	ldw	r2,0(r2)
   1bba4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1bba8:	e13ffe17 	ldw	r4,-8(fp)
   1bbac:	00107400 	call	10740 <strlen>
   1bbb0:	10800044 	addi	r2,r2,1
   1bbb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1bbb8:	00000d06 	br	1bbf0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1bbbc:	e0bffc17 	ldw	r2,-16(fp)
   1bbc0:	10c00217 	ldw	r3,8(r2)
   1bbc4:	e0bffd17 	ldw	r2,-12(fp)
   1bbc8:	1809883a 	mov	r4,r3
   1bbcc:	e17ffe17 	ldw	r5,-8(fp)
   1bbd0:	100d883a 	mov	r6,r2
   1bbd4:	001beb40 	call	1beb4 <memcmp>
   1bbd8:	1000021e 	bne	r2,zero,1bbe4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1bbdc:	e0bffc17 	ldw	r2,-16(fp)
   1bbe0:	00000706 	br	1bc00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1bbe4:	e0bffc17 	ldw	r2,-16(fp)
   1bbe8:	10800017 	ldw	r2,0(r2)
   1bbec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1bbf0:	e0fffc17 	ldw	r3,-16(fp)
   1bbf4:	e0bfff17 	ldw	r2,-4(fp)
   1bbf8:	18bff01e 	bne	r3,r2,1bbbc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1bbfc:	0005883a 	mov	r2,zero
}
   1bc00:	e037883a 	mov	sp,fp
   1bc04:	dfc00117 	ldw	ra,4(sp)
   1bc08:	df000017 	ldw	fp,0(sp)
   1bc0c:	dec00204 	addi	sp,sp,8
   1bc10:	f800283a 	ret

0001bc14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1bc14:	defffb04 	addi	sp,sp,-20
   1bc18:	dfc00415 	stw	ra,16(sp)
   1bc1c:	df000315 	stw	fp,12(sp)
   1bc20:	df000304 	addi	fp,sp,12
   1bc24:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1bc28:	008000f4 	movhi	r2,3
   1bc2c:	10a77204 	addi	r2,r2,-25144
   1bc30:	10800017 	ldw	r2,0(r2)
   1bc34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bc38:	00003106 	br	1bd00 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1bc3c:	e0bffd17 	ldw	r2,-12(fp)
   1bc40:	10800217 	ldw	r2,8(r2)
   1bc44:	1009883a 	mov	r4,r2
   1bc48:	00107400 	call	10740 <strlen>
   1bc4c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1bc50:	e0bffd17 	ldw	r2,-12(fp)
   1bc54:	10c00217 	ldw	r3,8(r2)
   1bc58:	e0bffe17 	ldw	r2,-8(fp)
   1bc5c:	10bfffc4 	addi	r2,r2,-1
   1bc60:	1885883a 	add	r2,r3,r2
   1bc64:	10800003 	ldbu	r2,0(r2)
   1bc68:	10803fcc 	andi	r2,r2,255
   1bc6c:	1080201c 	xori	r2,r2,128
   1bc70:	10bfe004 	addi	r2,r2,-128
   1bc74:	10800bd8 	cmpnei	r2,r2,47
   1bc78:	1000031e 	bne	r2,zero,1bc88 <alt_find_file+0x74>
    {
      len -= 1;
   1bc7c:	e0bffe17 	ldw	r2,-8(fp)
   1bc80:	10bfffc4 	addi	r2,r2,-1
   1bc84:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bc88:	e0bffe17 	ldw	r2,-8(fp)
   1bc8c:	e0ffff17 	ldw	r3,-4(fp)
   1bc90:	1885883a 	add	r2,r3,r2
   1bc94:	10800003 	ldbu	r2,0(r2)
   1bc98:	10803fcc 	andi	r2,r2,255
   1bc9c:	1080201c 	xori	r2,r2,128
   1bca0:	10bfe004 	addi	r2,r2,-128
   1bca4:	10800be0 	cmpeqi	r2,r2,47
   1bca8:	1000081e 	bne	r2,zero,1bccc <alt_find_file+0xb8>
   1bcac:	e0bffe17 	ldw	r2,-8(fp)
   1bcb0:	e0ffff17 	ldw	r3,-4(fp)
   1bcb4:	1885883a 	add	r2,r3,r2
   1bcb8:	10800003 	ldbu	r2,0(r2)
   1bcbc:	10803fcc 	andi	r2,r2,255
   1bcc0:	1080201c 	xori	r2,r2,128
   1bcc4:	10bfe004 	addi	r2,r2,-128
   1bcc8:	10000a1e 	bne	r2,zero,1bcf4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1bccc:	e0bffd17 	ldw	r2,-12(fp)
   1bcd0:	10c00217 	ldw	r3,8(r2)
   1bcd4:	e0bffe17 	ldw	r2,-8(fp)
   1bcd8:	1809883a 	mov	r4,r3
   1bcdc:	e17fff17 	ldw	r5,-4(fp)
   1bce0:	100d883a 	mov	r6,r2
   1bce4:	001beb40 	call	1beb4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bce8:	1000021e 	bne	r2,zero,1bcf4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1bcec:	e0bffd17 	ldw	r2,-12(fp)
   1bcf0:	00000806 	br	1bd14 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1bcf4:	e0bffd17 	ldw	r2,-12(fp)
   1bcf8:	10800017 	ldw	r2,0(r2)
   1bcfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bd00:	e0fffd17 	ldw	r3,-12(fp)
   1bd04:	008000f4 	movhi	r2,3
   1bd08:	10a77204 	addi	r2,r2,-25144
   1bd0c:	18bfcb1e 	bne	r3,r2,1bc3c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1bd10:	0005883a 	mov	r2,zero
}
   1bd14:	e037883a 	mov	sp,fp
   1bd18:	dfc00117 	ldw	ra,4(sp)
   1bd1c:	df000017 	ldw	fp,0(sp)
   1bd20:	dec00204 	addi	sp,sp,8
   1bd24:	f800283a 	ret

0001bd28 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1bd28:	defffc04 	addi	sp,sp,-16
   1bd2c:	df000315 	stw	fp,12(sp)
   1bd30:	df000304 	addi	fp,sp,12
   1bd34:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1bd38:	00bffa04 	movi	r2,-24
   1bd3c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1bd40:	e03ffd15 	stw	zero,-12(fp)
   1bd44:	00001d06 	br	1bdbc <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   1bd48:	00c000f4 	movhi	r3,3
   1bd4c:	18e2f504 	addi	r3,r3,-29740
   1bd50:	e0bffd17 	ldw	r2,-12(fp)
   1bd54:	10800324 	muli	r2,r2,12
   1bd58:	1885883a 	add	r2,r3,r2
   1bd5c:	10800017 	ldw	r2,0(r2)
   1bd60:	1000131e 	bne	r2,zero,1bdb0 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   1bd64:	00c000f4 	movhi	r3,3
   1bd68:	18e2f504 	addi	r3,r3,-29740
   1bd6c:	e0bffd17 	ldw	r2,-12(fp)
   1bd70:	10800324 	muli	r2,r2,12
   1bd74:	1885883a 	add	r2,r3,r2
   1bd78:	e0ffff17 	ldw	r3,-4(fp)
   1bd7c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1bd80:	008000f4 	movhi	r2,3
   1bd84:	10a77604 	addi	r2,r2,-25128
   1bd88:	10c00017 	ldw	r3,0(r2)
   1bd8c:	e0bffd17 	ldw	r2,-12(fp)
   1bd90:	1880040e 	bge	r3,r2,1bda4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   1bd94:	008000f4 	movhi	r2,3
   1bd98:	10a77604 	addi	r2,r2,-25128
   1bd9c:	e0fffd17 	ldw	r3,-12(fp)
   1bda0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1bda4:	e0bffd17 	ldw	r2,-12(fp)
   1bda8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1bdac:	00000606 	br	1bdc8 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1bdb0:	e0bffd17 	ldw	r2,-12(fp)
   1bdb4:	10800044 	addi	r2,r2,1
   1bdb8:	e0bffd15 	stw	r2,-12(fp)
   1bdbc:	e0bffd17 	ldw	r2,-12(fp)
   1bdc0:	10800810 	cmplti	r2,r2,32
   1bdc4:	103fe01e 	bne	r2,zero,1bd48 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1bdc8:	e0bffe17 	ldw	r2,-8(fp)
}
   1bdcc:	e037883a 	mov	sp,fp
   1bdd0:	df000017 	ldw	fp,0(sp)
   1bdd4:	dec00104 	addi	sp,sp,4
   1bdd8:	f800283a 	ret

0001bddc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1bddc:	defffb04 	addi	sp,sp,-20
   1bde0:	df000415 	stw	fp,16(sp)
   1bde4:	df000404 	addi	fp,sp,16
   1bde8:	e13ffe15 	stw	r4,-8(fp)
   1bdec:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1bdf0:	e0bfff17 	ldw	r2,-4(fp)
   1bdf4:	10840070 	cmpltui	r2,r2,4097
   1bdf8:	1000021e 	bne	r2,zero,1be04 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1bdfc:	00840004 	movi	r2,4096
   1be00:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1be04:	e0fffe17 	ldw	r3,-8(fp)
   1be08:	e0bfff17 	ldw	r2,-4(fp)
   1be0c:	1885883a 	add	r2,r3,r2
   1be10:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1be14:	e0bffe17 	ldw	r2,-8(fp)
   1be18:	e0bffc15 	stw	r2,-16(fp)
   1be1c:	00000506 	br	1be34 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1be20:	e0bffc17 	ldw	r2,-16(fp)
   1be24:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1be28:	e0bffc17 	ldw	r2,-16(fp)
   1be2c:	10800804 	addi	r2,r2,32
   1be30:	e0bffc15 	stw	r2,-16(fp)
   1be34:	e0fffc17 	ldw	r3,-16(fp)
   1be38:	e0bffd17 	ldw	r2,-12(fp)
   1be3c:	18bff836 	bltu	r3,r2,1be20 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1be40:	e0bffe17 	ldw	r2,-8(fp)
   1be44:	108007cc 	andi	r2,r2,31
   1be48:	10000226 	beq	r2,zero,1be54 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1be4c:	e0bffc17 	ldw	r2,-16(fp)
   1be50:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1be54:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1be58:	e037883a 	mov	sp,fp
   1be5c:	df000017 	ldw	fp,0(sp)
   1be60:	dec00104 	addi	sp,sp,4
   1be64:	f800283a 	ret

0001be68 <atexit>:
   1be68:	200b883a 	mov	r5,r4
   1be6c:	000d883a 	mov	r6,zero
   1be70:	0009883a 	mov	r4,zero
   1be74:	000f883a 	mov	r7,zero
   1be78:	001bf301 	jmpi	1bf30 <__register_exitproc>

0001be7c <exit>:
   1be7c:	defffe04 	addi	sp,sp,-8
   1be80:	000b883a 	mov	r5,zero
   1be84:	dc000015 	stw	r16,0(sp)
   1be88:	dfc00115 	stw	ra,4(sp)
   1be8c:	2021883a 	mov	r16,r4
   1be90:	001c0600 	call	1c060 <__call_exitprocs>
   1be94:	008000f4 	movhi	r2,3
   1be98:	10a76d04 	addi	r2,r2,-25164
   1be9c:	11000017 	ldw	r4,0(r2)
   1bea0:	20800f17 	ldw	r2,60(r4)
   1bea4:	10000126 	beq	r2,zero,1beac <exit+0x30>
   1bea8:	103ee83a 	callr	r2
   1beac:	8009883a 	mov	r4,r16
   1beb0:	001c2000 	call	1c200 <_exit>

0001beb4 <memcmp>:
   1beb4:	01c000c4 	movi	r7,3
   1beb8:	3980192e 	bgeu	r7,r6,1bf20 <memcmp+0x6c>
   1bebc:	2904b03a 	or	r2,r5,r4
   1bec0:	11c4703a 	and	r2,r2,r7
   1bec4:	10000f26 	beq	r2,zero,1bf04 <memcmp+0x50>
   1bec8:	20c00003 	ldbu	r3,0(r4)
   1becc:	28800003 	ldbu	r2,0(r5)
   1bed0:	1880151e 	bne	r3,r2,1bf28 <memcmp+0x74>
   1bed4:	31bfff84 	addi	r6,r6,-2
   1bed8:	01ffffc4 	movi	r7,-1
   1bedc:	00000406 	br	1bef0 <memcmp+0x3c>
   1bee0:	20c00003 	ldbu	r3,0(r4)
   1bee4:	28800003 	ldbu	r2,0(r5)
   1bee8:	31bfffc4 	addi	r6,r6,-1
   1beec:	18800e1e 	bne	r3,r2,1bf28 <memcmp+0x74>
   1bef0:	21000044 	addi	r4,r4,1
   1bef4:	29400044 	addi	r5,r5,1
   1bef8:	31fff91e 	bne	r6,r7,1bee0 <memcmp+0x2c>
   1befc:	0005883a 	mov	r2,zero
   1bf00:	f800283a 	ret
   1bf04:	20c00017 	ldw	r3,0(r4)
   1bf08:	28800017 	ldw	r2,0(r5)
   1bf0c:	1880041e 	bne	r3,r2,1bf20 <memcmp+0x6c>
   1bf10:	31bfff04 	addi	r6,r6,-4
   1bf14:	21000104 	addi	r4,r4,4
   1bf18:	29400104 	addi	r5,r5,4
   1bf1c:	39bff936 	bltu	r7,r6,1bf04 <memcmp+0x50>
   1bf20:	303fe91e 	bne	r6,zero,1bec8 <memcmp+0x14>
   1bf24:	003ff506 	br	1befc <memcmp+0x48>
   1bf28:	1885c83a 	sub	r2,r3,r2
   1bf2c:	f800283a 	ret

0001bf30 <__register_exitproc>:
   1bf30:	defffa04 	addi	sp,sp,-24
   1bf34:	008000f4 	movhi	r2,3
   1bf38:	10a76d04 	addi	r2,r2,-25164
   1bf3c:	dc000315 	stw	r16,12(sp)
   1bf40:	14000017 	ldw	r16,0(r2)
   1bf44:	dc400415 	stw	r17,16(sp)
   1bf48:	dfc00515 	stw	ra,20(sp)
   1bf4c:	80805217 	ldw	r2,328(r16)
   1bf50:	2023883a 	mov	r17,r4
   1bf54:	10003e26 	beq	r2,zero,1c050 <__register_exitproc+0x120>
   1bf58:	10c00117 	ldw	r3,4(r2)
   1bf5c:	020007c4 	movi	r8,31
   1bf60:	40c0180e 	bge	r8,r3,1bfc4 <__register_exitproc+0x94>
   1bf64:	00800034 	movhi	r2,0
   1bf68:	10800004 	addi	r2,r2,0
   1bf6c:	1000061e 	bne	r2,zero,1bf88 <__register_exitproc+0x58>
   1bf70:	00bfffc4 	movi	r2,-1
   1bf74:	dfc00517 	ldw	ra,20(sp)
   1bf78:	dc400417 	ldw	r17,16(sp)
   1bf7c:	dc000317 	ldw	r16,12(sp)
   1bf80:	dec00604 	addi	sp,sp,24
   1bf84:	f800283a 	ret
   1bf88:	01006404 	movi	r4,400
   1bf8c:	d9400015 	stw	r5,0(sp)
   1bf90:	d9800115 	stw	r6,4(sp)
   1bf94:	d9c00215 	stw	r7,8(sp)
   1bf98:	00000000 	call	0 <__alt_mem_ins_mem1-0x10000>
   1bf9c:	d9400017 	ldw	r5,0(sp)
   1bfa0:	d9800117 	ldw	r6,4(sp)
   1bfa4:	d9c00217 	ldw	r7,8(sp)
   1bfa8:	103ff126 	beq	r2,zero,1bf70 <__register_exitproc+0x40>
   1bfac:	80c05217 	ldw	r3,328(r16)
   1bfb0:	10000115 	stw	zero,4(r2)
   1bfb4:	10c00015 	stw	r3,0(r2)
   1bfb8:	80805215 	stw	r2,328(r16)
   1bfbc:	10006215 	stw	zero,392(r2)
   1bfc0:	10006315 	stw	zero,396(r2)
   1bfc4:	10c00117 	ldw	r3,4(r2)
   1bfc8:	88000d1e 	bne	r17,zero,1c000 <__register_exitproc+0xd0>
   1bfcc:	19000084 	addi	r4,r3,2
   1bfd0:	2109883a 	add	r4,r4,r4
   1bfd4:	18c00044 	addi	r3,r3,1
   1bfd8:	2109883a 	add	r4,r4,r4
   1bfdc:	1109883a 	add	r4,r2,r4
   1bfe0:	10c00115 	stw	r3,4(r2)
   1bfe4:	0005883a 	mov	r2,zero
   1bfe8:	21400015 	stw	r5,0(r4)
   1bfec:	dfc00517 	ldw	ra,20(sp)
   1bff0:	dc400417 	ldw	r17,16(sp)
   1bff4:	dc000317 	ldw	r16,12(sp)
   1bff8:	dec00604 	addi	sp,sp,24
   1bffc:	f800283a 	ret
   1c000:	02400044 	movi	r9,1
   1c004:	12806217 	ldw	r10,392(r2)
   1c008:	48d2983a 	sll	r9,r9,r3
   1c00c:	19000804 	addi	r4,r3,32
   1c010:	18d1883a 	add	r8,r3,r3
   1c014:	2109883a 	add	r4,r4,r4
   1c018:	4211883a 	add	r8,r8,r8
   1c01c:	2109883a 	add	r4,r4,r4
   1c020:	1109883a 	add	r4,r2,r4
   1c024:	1211883a 	add	r8,r2,r8
   1c028:	5254b03a 	or	r10,r10,r9
   1c02c:	21c02215 	stw	r7,136(r4)
   1c030:	41802215 	stw	r6,136(r8)
   1c034:	12806215 	stw	r10,392(r2)
   1c038:	01000084 	movi	r4,2
   1c03c:	893fe31e 	bne	r17,r4,1bfcc <__register_exitproc+0x9c>
   1c040:	11006317 	ldw	r4,396(r2)
   1c044:	2252b03a 	or	r9,r4,r9
   1c048:	12406315 	stw	r9,396(r2)
   1c04c:	003fdf06 	br	1bfcc <__register_exitproc+0x9c>
   1c050:	008000f4 	movhi	r2,3
   1c054:	10a7da04 	addi	r2,r2,-24728
   1c058:	80805215 	stw	r2,328(r16)
   1c05c:	003fbe06 	br	1bf58 <__register_exitproc+0x28>

0001c060 <__call_exitprocs>:
   1c060:	008000f4 	movhi	r2,3
   1c064:	10a76d04 	addi	r2,r2,-25164
   1c068:	10800017 	ldw	r2,0(r2)
   1c06c:	defff304 	addi	sp,sp,-52
   1c070:	df000b15 	stw	fp,44(sp)
   1c074:	d8800015 	stw	r2,0(sp)
   1c078:	10805204 	addi	r2,r2,328
   1c07c:	dd400815 	stw	r21,32(sp)
   1c080:	dfc00c15 	stw	ra,48(sp)
   1c084:	ddc00a15 	stw	r23,40(sp)
   1c088:	dd800915 	stw	r22,36(sp)
   1c08c:	dd000715 	stw	r20,28(sp)
   1c090:	dcc00615 	stw	r19,24(sp)
   1c094:	dc800515 	stw	r18,20(sp)
   1c098:	dc400415 	stw	r17,16(sp)
   1c09c:	dc000315 	stw	r16,12(sp)
   1c0a0:	d9000115 	stw	r4,4(sp)
   1c0a4:	2839883a 	mov	fp,r5
   1c0a8:	d8800215 	stw	r2,8(sp)
   1c0ac:	057fffc4 	movi	r21,-1
   1c0b0:	d8800017 	ldw	r2,0(sp)
   1c0b4:	ddc00217 	ldw	r23,8(sp)
   1c0b8:	14805217 	ldw	r18,328(r2)
   1c0bc:	90001726 	beq	r18,zero,1c11c <__call_exitprocs+0xbc>
   1c0c0:	94400117 	ldw	r17,4(r18)
   1c0c4:	8c3fffc4 	addi	r16,r17,-1
   1c0c8:	80001116 	blt	r16,zero,1c110 <__call_exitprocs+0xb0>
   1c0cc:	8c400044 	addi	r17,r17,1
   1c0d0:	8427883a 	add	r19,r16,r16
   1c0d4:	8c63883a 	add	r17,r17,r17
   1c0d8:	95802204 	addi	r22,r18,136
   1c0dc:	9ce7883a 	add	r19,r19,r19
   1c0e0:	8c63883a 	add	r17,r17,r17
   1c0e4:	b4e7883a 	add	r19,r22,r19
   1c0e8:	9463883a 	add	r17,r18,r17
   1c0ec:	e0001726 	beq	fp,zero,1c14c <__call_exitprocs+0xec>
   1c0f0:	8c87c83a 	sub	r3,r17,r18
   1c0f4:	b0c7883a 	add	r3,r22,r3
   1c0f8:	18c01e17 	ldw	r3,120(r3)
   1c0fc:	1f001326 	beq	r3,fp,1c14c <__call_exitprocs+0xec>
   1c100:	843fffc4 	addi	r16,r16,-1
   1c104:	9cffff04 	addi	r19,r19,-4
   1c108:	8c7fff04 	addi	r17,r17,-4
   1c10c:	857ff71e 	bne	r16,r21,1c0ec <__call_exitprocs+0x8c>
   1c110:	00800034 	movhi	r2,0
   1c114:	10800004 	addi	r2,r2,0
   1c118:	10002a1e 	bne	r2,zero,1c1c4 <__call_exitprocs+0x164>
   1c11c:	dfc00c17 	ldw	ra,48(sp)
   1c120:	df000b17 	ldw	fp,44(sp)
   1c124:	ddc00a17 	ldw	r23,40(sp)
   1c128:	dd800917 	ldw	r22,36(sp)
   1c12c:	dd400817 	ldw	r21,32(sp)
   1c130:	dd000717 	ldw	r20,28(sp)
   1c134:	dcc00617 	ldw	r19,24(sp)
   1c138:	dc800517 	ldw	r18,20(sp)
   1c13c:	dc400417 	ldw	r17,16(sp)
   1c140:	dc000317 	ldw	r16,12(sp)
   1c144:	dec00d04 	addi	sp,sp,52
   1c148:	f800283a 	ret
   1c14c:	91000117 	ldw	r4,4(r18)
   1c150:	88c00017 	ldw	r3,0(r17)
   1c154:	213fffc4 	addi	r4,r4,-1
   1c158:	24001526 	beq	r4,r16,1c1b0 <__call_exitprocs+0x150>
   1c15c:	88000015 	stw	zero,0(r17)
   1c160:	183fe726 	beq	r3,zero,1c100 <__call_exitprocs+0xa0>
   1c164:	00800044 	movi	r2,1
   1c168:	1408983a 	sll	r4,r2,r16
   1c16c:	91406217 	ldw	r5,392(r18)
   1c170:	95000117 	ldw	r20,4(r18)
   1c174:	214a703a 	and	r5,r4,r5
   1c178:	28000b26 	beq	r5,zero,1c1a8 <__call_exitprocs+0x148>
   1c17c:	91406317 	ldw	r5,396(r18)
   1c180:	2148703a 	and	r4,r4,r5
   1c184:	20000c1e 	bne	r4,zero,1c1b8 <__call_exitprocs+0x158>
   1c188:	99400017 	ldw	r5,0(r19)
   1c18c:	d9000117 	ldw	r4,4(sp)
   1c190:	183ee83a 	callr	r3
   1c194:	90c00117 	ldw	r3,4(r18)
   1c198:	1d3fc51e 	bne	r3,r20,1c0b0 <__call_exitprocs+0x50>
   1c19c:	b8c00017 	ldw	r3,0(r23)
   1c1a0:	1cbfd726 	beq	r3,r18,1c100 <__call_exitprocs+0xa0>
   1c1a4:	003fc206 	br	1c0b0 <__call_exitprocs+0x50>
   1c1a8:	183ee83a 	callr	r3
   1c1ac:	003ff906 	br	1c194 <__call_exitprocs+0x134>
   1c1b0:	94000115 	stw	r16,4(r18)
   1c1b4:	003fea06 	br	1c160 <__call_exitprocs+0x100>
   1c1b8:	99000017 	ldw	r4,0(r19)
   1c1bc:	183ee83a 	callr	r3
   1c1c0:	003ff406 	br	1c194 <__call_exitprocs+0x134>
   1c1c4:	90c00117 	ldw	r3,4(r18)
   1c1c8:	1800071e 	bne	r3,zero,1c1e8 <__call_exitprocs+0x188>
   1c1cc:	90c00017 	ldw	r3,0(r18)
   1c1d0:	18000926 	beq	r3,zero,1c1f8 <__call_exitprocs+0x198>
   1c1d4:	9009883a 	mov	r4,r18
   1c1d8:	b8c00015 	stw	r3,0(r23)
   1c1dc:	00000000 	call	0 <__alt_mem_ins_mem1-0x10000>
   1c1e0:	bc800017 	ldw	r18,0(r23)
   1c1e4:	003fb506 	br	1c0bc <__call_exitprocs+0x5c>
   1c1e8:	90c00017 	ldw	r3,0(r18)
   1c1ec:	902f883a 	mov	r23,r18
   1c1f0:	1825883a 	mov	r18,r3
   1c1f4:	003fb106 	br	1c0bc <__call_exitprocs+0x5c>
   1c1f8:	0007883a 	mov	r3,zero
   1c1fc:	003ffb06 	br	1c1ec <__call_exitprocs+0x18c>

0001c200 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1c200:	defffc04 	addi	sp,sp,-16
   1c204:	df000315 	stw	fp,12(sp)
   1c208:	df000304 	addi	fp,sp,12
   1c20c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1c210:	0001883a 	nop
   1c214:	e0bfff17 	ldw	r2,-4(fp)
   1c218:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   1c21c:	e0bffd17 	ldw	r2,-12(fp)
   1c220:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1c224:	e0bffe17 	ldw	r2,-8(fp)
   1c228:	10000226 	beq	r2,zero,1c234 <_exit+0x34>
    ALT_SIM_FAIL();
   1c22c:	002af070 	cmpltui	zero,zero,43969
   1c230:	00000106 	br	1c238 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1c234:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1c238:	003fff06 	br	1c238 <_exit+0x38>
