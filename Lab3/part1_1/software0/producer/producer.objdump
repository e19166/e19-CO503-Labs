
producer.elf:     file format elf32-littlenios2
producer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000c2cc memsz 0x0000c2cc flags r-x
    LOAD off    0x0000d3b0 vaddr 0x000483b0 paddr 0x0001c2ec align 2**12
         filesz 0x00001a58 memsz 0x00001d60 flags rw-
    LOAD off    0x0000f000 vaddr 0x00048000 paddr 0x00048000 align 2**12
         filesz 0x000003b0 memsz 0x000003b0 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c134  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003b0  00048000  00048000  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  000483b0  0001c2ec  0000d3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  00049e08  0001dd44  0000ee08  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000f3b0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d98  00000000  00000000  0000f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022c8c  00000000  00000000  00010170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009056  00000000  00000000  00032dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a183  00000000  00000000  0003be52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001884  00000000  00000000  00045fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002dc7  00000000  00000000  0004785c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010609  00000000  00000000  0004a623  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0005ac2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0005ac50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005e7f7  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0005e7fa  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005e7fe  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005e7ff  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005e800  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005e804  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005e808  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0005e80c  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0005e817  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0005e822  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  0005e82d  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000058  00000000  00000000  0005e830  2**0
                  CONTENTS, READONLY
 28 .jdi          00008508  00000000  00000000  0005e888  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0006eaee  00000000  00000000  00066d90  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
00048000 l    d  .rodata	00000000 .rodata
000483b0 l    d  .rwdata	00000000 .rwdata
00049e08 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../producer_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 producer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000106f0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000109ac l     F .text	00000034 __sprint_r
000480ce l     O .rodata	00000010 blanks.3515
000480de l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00012970 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000143ac l     F .text	00000008 __fp_lock
000143b4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000483b0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00048114 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004825c l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000186f4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000199c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019ad8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00019b04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00019c00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00019cf0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00019ddc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00019fb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00049df8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a204 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001a340 l     F .text	00000038 alt_dev_reg
00048d6c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001a658 l     F .text	00000204 altera_avalon_jtag_uart_irq
0001a85c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001ae98 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b230 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001b6d0 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001b808 l     F .text	00000050 alt_get_errno
0001b858 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00016d04 g     F .text	00000074 _mprec_log10
00016df4 g     F .text	00000084 __any_on
00017a64 g     F .text	00000064 _isatty_r
00048144 g     O .rodata	00000028 __mprec_tinytens
00019efc g     F .text	00000078 alt_main
0001997c g     F .text	00000044 __ashldi3
00010888 g     F .text	00000084 _puts_r
00049e08 g     O .bss	00000004 writep
00049e80 g     O .bss	00000100 alt_irq
00017ac8 g     F .text	0000006c _lseek_r
0001c2ec g       *ABS*	00000000 __flash_rwdata_start
00018f94 g     F .text	0000005c __eqdf2
00010510 g     F .text	0000009c FIFO_1_INIT
0004a110 g       *ABS*	00000000 __alt_heap_start
0001084c g     F .text	0000003c printf
00017618 g     F .text	0000005c __sseek
0001443c g     F .text	0000010c __sinit
000150d4 g     F .text	0000009c _setlocale_r
000143c8 g     F .text	00000064 __sfmoreglue
00019f94 g     F .text	00000020 __malloc_unlock
00049e0c g     O .bss	00000004 readp
00049e48 g     O .bss	00000004 altera_avalon_timer_ts_freq
00015ccc g     F .text	00000128 memmove
0001442c g     F .text	00000010 _cleanup
00015ed0 g     F .text	000000a8 _Balloc
0001904c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000179fc g     F .text	00000068 _fstat_r
00049e34 g     O .bss	00000004 errno
00049e3c g     O .bss	00000004 alt_argv
00051dcc g       *ABS*	00000000 _gp
00048000 g       *ABS*	00000000 __alt_mem_data_mem0
00048bec g     O .rwdata	00000180 alt_fd_list
0001bc34 g     F .text	00000090 alt_find_dev
00015bd4 g     F .text	000000f8 memcpy
000143bc g     F .text	0000000c _cleanup_r
00019170 g     F .text	000000d4 __floatsidf
0001b790 g     F .text	00000078 alt_io_redirect
00019114 g     F .text	0000005c __ltdf2
0001c2ec g       *ABS*	00000000 __DTOR_END__
0001090c g     F .text	00000014 puts
00016c60 g     F .text	000000a4 __ratio
0001aa5c g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010820 g     F .text	0000002c _printf_r
00010810 g     F .text	00000008 __udivsi3
00019c50 g     F .text	000000a0 isatty
00048194 g     O .rodata	000000c8 __mprec_tens
00010000 g       *ABS*	00000000 __alt_mem_ins_mem0
00015170 g     F .text	0000000c __locale_charset
0001be8c g     F .text	0000008c alt_icache_flush
00049e30 g     O .bss	00000004 __malloc_top_pad
00049dd4 g     O .rwdata	00000004 __mb_cur_max
0001517c g     F .text	0000000c _localeconv_r
000162d0 g     F .text	0000003c __i2b
00014a90 g     F .text	000004e4 __sfvwrite_r
000174d8 g     F .text	00000064 _sbrk_r
00049e10 g     O .bss	00000004 fullp
00017b34 g     F .text	0000006c _read_r
000487b0 g     O .rwdata	0000000c __lc_ctype
00049df0 g     O .rwdata	00000004 alt_max_fd
00019764 g     F .text	00000104 __unpack_d
000178ac g     F .text	0000013c _fclose_r
0001437c g     F .text	00000030 fflush
00049e2c g     O .bss	00000004 __malloc_max_sbrked_mem
00018a48 g     F .text	00000054 __adddf3
000169d4 g     F .text	00000148 __b2d
00018168 g     F .text	0000058c __umoddi3
00019e2c g     F .text	000000d0 lseek
00049dcc g     O .rwdata	00000004 _global_impure_ptr
00016e78 g     F .text	000005fc _realloc_r
0004a110 g       *ABS*	00000000 __bss_end
0001b5e0 g     F .text	000000f0 alt_iic_isr_register
0001bb10 g     F .text	00000104 alt_tick
00017ba0 g     F .text	000005c8 __udivdi3
0004816c g     O .rodata	00000028 __mprec_bigtens
000160b4 g     F .text	00000104 __s2b
00019318 g     F .text	0000011c __floatunsidf
00016774 g     F .text	00000058 __mcmp
00014654 g     F .text	00000018 __fp_lock_all
0001b594 g     F .text	0000004c alt_ic_irq_enabled
0001060c g     F .text	000000a4 producer
0001ba78 g     F .text	00000098 alt_alarm_stop
00049e4c g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000cc alt_irq_handler
00048bc4 g     O .rwdata	00000028 alt_dev_null
0001b214 g     F .text	0000001c alt_dcache_flush_all
000161b8 g     F .text	00000068 __hi0bits
00019244 g     F .text	000000d4 __fixdfsi
00049e08 g       *ABS*	00000000 __ram_rwdata_end
00049de8 g     O .rwdata	00000008 alt_dev_list
0001a254 g     F .text	000000ec write
0001b0ac g     F .text	00000028 alt_timestamp_freq
000483b0 g       *ABS*	00000000 __ram_rodata_end
00019b54 g     F .text	000000ac fstat
00019938 g     F .text	00000044 __lshrdi3
000164ec g     F .text	0000012c __pow5mult
00049e24 g     O .bss	00000004 __nlocale_changed
00010818 g     F .text	00000008 __umodsi3
0004a110 g       *ABS*	00000000 end
0001a598 g     F .text	000000c0 altera_avalon_jtag_uart_init
0001c2ec g       *ABS*	00000000 __CTOR_LIST__
00050000 g       *ABS*	00000000 __alt_stack_pointer
0001af0c g     F .text	00000088 alt_avalon_timer_sc_init
00019494 g     F .text	000000ac __clzsi2
0001ac74 g     F .text	00000224 altera_avalon_jtag_uart_write
00014644 g     F .text	00000004 __sfp_lock_acquire
00015adc g     F .text	000000f8 memchr
000109e0 g     F .text	00001df8 ___vfprintf_internal_r
000147c0 g     F .text	000002d0 _free_r
0001c110 g     F .text	000001a0 __call_exitprocs
00049e20 g     O .bss	00000004 __mlocale_changed
00049dd8 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
00049e50 g     O .bss	00000004 _alt_tick_rate
00016618 g     F .text	0000015c __lshift
00049e54 g     O .bss	00000004 _alt_nticks
0001a004 g     F .text	000000f0 read
0001a3ac g     F .text	00000088 alt_sys_init
0001bfe0 g     F .text	00000130 __register_exitproc
0001630c g     F .text	000001e0 __multiply
0001a900 g     F .text	00000068 altera_avalon_jtag_uart_close
000483b0 g       *ABS*	00000000 __ram_rwdata_start
00048000 g       *ABS*	00000000 __ram_rodata_start
00049e58 g     O .bss	00000028 __malloc_current_mallinfo
00016b1c g     F .text	00000144 __d2b
0001a434 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001bdd8 g     F .text	000000b4 alt_get_fd
00019868 g     F .text	000000d0 __fpcmp_parts_d
00017848 g     F .text	00000064 _close_r
0001bf64 g     F .text	0000007c memcmp
0001a4f4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004a110 g       *ABS*	00000000 __alt_stack_base
0001a544 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000127fc g     F .text	00000174 __swsetup_r
00018de0 g     F .text	000001b4 __divdf3
00014548 g     F .text	000000fc __sfp
00016d78 g     F .text	0000007c __copybits
000487bc g     O .rwdata	00000408 __malloc_av_
00014650 g     F .text	00000004 __sinit_lock_release
00018afc g     F .text	000002e4 __muldf3
0001753c g     F .text	00000054 __sread
0001bcc4 g     F .text	00000114 alt_find_file
0001b280 g     F .text	000000a0 alt_dev_llist_insert
00019f74 g     F .text	00000020 __malloc_lock
0001a154 g     F .text	000000b0 sbrk
00014194 g     F .text	000001e8 _fflush_r
0001778c g     F .text	000000bc _calloc_r
00049e08 g       *ABS*	00000000 __bss_start
00015df4 g     F .text	000000dc memset
000105ac g     F .text	00000060 main
00049e40 g     O .bss	00000004 alt_envp
00049e28 g     O .bss	00000004 __malloc_max_total_mem
0001a494 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00017674 g     F .text	00000008 __sclose
00050000 g       *ABS*	00000000 __alt_heap_limit
000179e8 g     F .text	00000014 fclose
0001af94 g     F .text	00000088 alt_timestamp_start
00049f80 g     O .bss	00000190 _atexit0
00012b78 g     F .text	0000161c _dtoa_r
00015358 g     F .text	00000784 _malloc_r
00049df4 g     O .rwdata	00000004 alt_errno
00014f74 g     F .text	000000a8 _fwalk
000101f4 g     F .text	000001a0 WRITE_FIFO_1
00010764 g     F .text	00000050 __divsi3
00048268 g     O .rodata	00000014 __thenan_df
00014684 g     F .text	0000013c _malloc_trim_r
0001c2ec g       *ABS*	00000000 __CTOR_END__
0001767c g     F .text	000000a4 strcmp
00048000 g       *ABS*	00000000 __flash_rodata_start
0001c2ec g       *ABS*	00000000 __DTOR_LIST__
000106b0 g     F .text	00000040 delay
00018ff0 g     F .text	0000005c __nedf2
0001a378 g     F .text	00000034 alt_irq_init
0001a0f4 g     F .text	00000060 alt_release_fd
0004827c g     O .rodata	00000100 __clz_tab
00049e1c g     O .bss	00000004 _PathLocale
0001bf18 g     F .text	00000014 atexit
00017720 g     F .text	0000006c _write_r
00015188 g     F .text	0000001c setlocale
00049dd0 g     O .rwdata	00000004 _impure_ptr
00049e38 g     O .bss	00000004 alt_argc
00049e44 g     O .bss	00000004 altera_avalon_timer_ts_base
0001b37c g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00016974 g     F .text	00000060 __ulp
00017474 g     F .text	00000038 __isinfd
0001466c g     F .text	00000018 __fp_unlock_all
00049de0 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000151a4 g     F .text	0000000c localeconv
0001b01c g     F .text	00000090 alt_timestamp
0001b408 g     F .text	00000050 alt_ic_isr_register
00049e08 g       *ABS*	00000000 _edata
0004a110 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
0001a968 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001b4f4 g     F .text	000000a0 alt_ic_irq_disable
00017590 g     F .text	00000088 __swrite
00049ddc g     O .rwdata	00000004 __malloc_trim_threshold
0001bc14 g     F .text	00000020 altera_nios2_qsys_irq_init
0001bf2c g     F .text	00000038 exit
0001501c g     F .text	000000b8 _fwalk_reent
000167cc g     F .text	000001a8 __mdiff
000107b4 g     F .text	0000005c __modsi3
00050000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00014648 g     F .text	00000004 __sfp_lock_release
0001c2b0 g     F .text	0000003c _exit
000174ac g     F .text	0000002c __isnand
0001b0d4 g     F .text	00000140 alt_alarm_start
00019434 g     F .text	00000060 __muldi3
000151b0 g     F .text	000001a8 __smakebuf_r
00010920 g     F .text	0000008c strlen
0001b924 g     F .text	00000154 open
000190b0 g     F .text	00000064 __gedf2
00010394 g     F .text	0000017c READ_FIFO_1
0001b3d8 g     F .text	00000030 alt_icache_flush_all
00049dfc g     O .rwdata	00000004 alt_priority_mask
00049e14 g     O .bss	00000004 emptyp
0001b458 g     F .text	0000009c alt_ic_irq_enable
000127d8 g     F .text	00000024 __vfprintf_internal
00018a9c g     F .text	00000060 __subdf3
00016220 g     F .text	000000b0 __lo0bits
00049e00 g     O .rwdata	00000008 alt_alarm_list
0001b320 g     F .text	0000005c _do_ctors
00049e18 g     O .bss	00000004 countp
00019a10 g     F .text	000000c8 close
00019d5c g     F .text	00000080 alt_load
00019540 g     F .text	00000224 __pack_d
00030000 g       *ABS*	00000000 __alt_mem_shared_mem
00000000  w      *UND*	00000000 free
0001464c g     F .text	00000004 __sinit_lock_acquire
00015fa0 g     F .text	00000114 __multadd
00015f78 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406e14 	ori	at,at,440
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_ins_mem0-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c00174 	movhi	r3,5
   10130:	18e7a004 	addi	r3,r3,-24960
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	01000174 	movhi	r4,5
   10148:	2127a004 	addi	r4,r4,-24960
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   101c4:	d6877314 	ori	gp,gp,7628
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   101cc:	10a78214 	ori	r2,r2,40456

    movhi r3, %hi(__bss_end)
   101d0:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   101d4:	18e84414 	ori	r3,r3,41232

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	0019d5c0 	call	19d5c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	0019efc0 	call	19efc <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <WRITE_FIFO_1>:


#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   101f4:	defffd04 	addi	sp,sp,-12
   101f8:	dfc00215 	stw	ra,8(sp)
   101fc:	df000115 	stw	fp,4(sp)
   10200:	df000104 	addi	fp,sp,4
   10204:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1){}
   10208:	0001883a 	nop
   1020c:	d0a01117 	ldw	r2,-32700(gp)
   10210:	1007883a 	mov	r3,r2
   10214:	008000f4 	movhi	r2,3
   10218:	10801204 	addi	r2,r2,72
   1021c:	1885883a 	add	r2,r3,r2
   10220:	10800037 	ldwio	r2,0(r2)
   10224:	10800060 	cmpeqi	r2,r2,1
   10228:	103ff81e 	bne	r2,zero,1020c <WRITE_FIFO_1+0x18>

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,*buffer);
   1022c:	d0a00f17 	ldw	r2,-32708(gp)
   10230:	1007883a 	mov	r3,r2
   10234:	008000f4 	movhi	r2,3
   10238:	10801204 	addi	r2,r2,72
   1023c:	1885883a 	add	r2,r3,r2
   10240:	e0ffff17 	ldw	r3,-4(fp)
   10244:	18c00017 	ldw	r3,0(r3)
   10248:	10c00035 	stwio	r3,0(r2)
	/*printf("Producer sent [%i]\t%x\t%i\n",*buffer,writep,IORD_32DIRECT(MEM_BASE,writep));*/
	// Update the write pointer
	writep += UNIT_SIZE;
   1024c:	d0a00f17 	ldw	r2,-32708(gp)
   10250:	10800104 	addi	r2,r2,4
   10254:	d0a00f15 	stw	r2,-32708(gp)
//
	printf("Counter : [%i]\t CAPACITY : [%i]\n ", IORD_32DIRECT(MEM_BASE,countp),CAPACITY);
   10258:	d0a01317 	ldw	r2,-32692(gp)
   1025c:	1007883a 	mov	r3,r2
   10260:	008000f4 	movhi	r2,3
   10264:	10801204 	addi	r2,r2,72
   10268:	1885883a 	add	r2,r3,r2
   1026c:	10800037 	ldwio	r2,0(r2)
   10270:	01000174 	movhi	r4,5
   10274:	21200004 	addi	r4,r4,-32768
   10278:	100b883a 	mov	r5,r2
   1027c:	01800404 	movi	r6,16
   10280:	001084c0 	call	1084c <printf>

	if(writep==(CAPACITY*UNIT_SIZE)+STARTP){
   10284:	d0a00f17 	ldw	r2,-32708(gp)
   10288:	10801318 	cmpnei	r2,r2,76
   1028c:	1000021e 	bne	r2,zero,10298 <WRITE_FIFO_1+0xa4>
		writep = STARTP;
   10290:	00800304 	movi	r2,12
   10294:	d0a00f15 	stw	r2,-32708(gp)
	}

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) + 0x1);
   10298:	d0a01317 	ldw	r2,-32692(gp)
   1029c:	1007883a 	mov	r3,r2
   102a0:	008000f4 	movhi	r2,3
   102a4:	10801204 	addi	r2,r2,72
   102a8:	1885883a 	add	r2,r3,r2
   102ac:	d0e01317 	ldw	r3,-32692(gp)
   102b0:	1809883a 	mov	r4,r3
   102b4:	00c000f4 	movhi	r3,3
   102b8:	18c01204 	addi	r3,r3,72
   102bc:	20c7883a 	add	r3,r4,r3
   102c0:	18c00037 	ldwio	r3,0(r3)
   102c4:	18c00044 	addi	r3,r3,1
   102c8:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   102cc:	d0a01317 	ldw	r2,-32692(gp)
   102d0:	1007883a 	mov	r3,r2
   102d4:	008000f4 	movhi	r2,3
   102d8:	10801204 	addi	r2,r2,72
   102dc:	1885883a 	add	r2,r3,r2
   102e0:	10800037 	ldwio	r2,0(r2)
   102e4:	10800418 	cmpnei	r2,r2,16
   102e8:	1000081e 	bne	r2,zero,1030c <WRITE_FIFO_1+0x118>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   102ec:	d0a01117 	ldw	r2,-32700(gp)
   102f0:	1007883a 	mov	r3,r2
   102f4:	008000f4 	movhi	r2,3
   102f8:	10801204 	addi	r2,r2,72
   102fc:	1885883a 	add	r2,r3,r2
   10300:	00c00044 	movi	r3,1
   10304:	10c00035 	stwio	r3,0(r2)
   10308:	00000706 	br	10328 <WRITE_FIFO_1+0x134>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   1030c:	d0a01117 	ldw	r2,-32700(gp)
   10310:	1007883a 	mov	r3,r2
   10314:	008000f4 	movhi	r2,3
   10318:	10801204 	addi	r2,r2,72
   1031c:	1885883a 	add	r2,r3,r2
   10320:	0007883a 	mov	r3,zero
   10324:	10c00035 	stwio	r3,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   10328:	d0a01317 	ldw	r2,-32692(gp)
   1032c:	1007883a 	mov	r3,r2
   10330:	008000f4 	movhi	r2,3
   10334:	10801204 	addi	r2,r2,72
   10338:	1885883a 	add	r2,r3,r2
   1033c:	10800037 	ldwio	r2,0(r2)
   10340:	1000081e 	bne	r2,zero,10364 <WRITE_FIFO_1+0x170>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   10344:	d0a01217 	ldw	r2,-32696(gp)
   10348:	1007883a 	mov	r3,r2
   1034c:	008000f4 	movhi	r2,3
   10350:	10801204 	addi	r2,r2,72
   10354:	1885883a 	add	r2,r3,r2
   10358:	00c00044 	movi	r3,1
   1035c:	10c00035 	stwio	r3,0(r2)
   10360:	00000706 	br	10380 <WRITE_FIFO_1+0x18c>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   10364:	d0a01217 	ldw	r2,-32696(gp)
   10368:	1007883a 	mov	r3,r2
   1036c:	008000f4 	movhi	r2,3
   10370:	10801204 	addi	r2,r2,72
   10374:	1885883a 	add	r2,r3,r2
   10378:	0007883a 	mov	r3,zero
   1037c:	10c00035 	stwio	r3,0(r2)
	}
}
   10380:	e037883a 	mov	sp,fp
   10384:	dfc00117 	ldw	ra,4(sp)
   10388:	df000017 	ldw	fp,0(sp)
   1038c:	dec00204 	addi	sp,sp,8
   10390:	f800283a 	ret

00010394 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   10394:	defffd04 	addi	sp,sp,-12
   10398:	df000215 	stw	fp,8(sp)
   1039c:	df000204 	addi	fp,sp,8
   103a0:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1){}
   103a4:	0001883a 	nop
   103a8:	d0a01217 	ldw	r2,-32696(gp)
   103ac:	1007883a 	mov	r3,r2
   103b0:	008000f4 	movhi	r2,3
   103b4:	10801204 	addi	r2,r2,72
   103b8:	1885883a 	add	r2,r3,r2
   103bc:	10800037 	ldwio	r2,0(r2)
   103c0:	10800060 	cmpeqi	r2,r2,1
   103c4:	103ff81e 	bne	r2,zero,103a8 <READ_FIFO_1+0x14>

	// Read the data
	buffer = IORD_32DIRECT(MEM_BASE,readp);
   103c8:	d0a01017 	ldw	r2,-32704(gp)
   103cc:	1007883a 	mov	r3,r2
   103d0:	008000f4 	movhi	r2,3
   103d4:	10801204 	addi	r2,r2,72
   103d8:	1885883a 	add	r2,r3,r2
   103dc:	10800037 	ldwio	r2,0(r2)
   103e0:	e0bffe15 	stw	r2,-8(fp)

	// Update the read pointer
	readp += UNIT_SIZE;
   103e4:	d0a01017 	ldw	r2,-32704(gp)
   103e8:	10800104 	addi	r2,r2,4
   103ec:	d0a01015 	stw	r2,-32704(gp)
	readp = readp%(CAPACITY*UNIT_SIZE);
   103f0:	d0e01017 	ldw	r3,-32704(gp)
   103f4:	00a00034 	movhi	r2,32768
   103f8:	10800fc4 	addi	r2,r2,63
   103fc:	1884703a 	and	r2,r3,r2
   10400:	1000040e 	bge	r2,zero,10414 <READ_FIFO_1+0x80>
   10404:	10bfffc4 	addi	r2,r2,-1
   10408:	00fff004 	movi	r3,-64
   1040c:	10c4b03a 	or	r2,r2,r3
   10410:	10800044 	addi	r2,r2,1
   10414:	d0a01015 	stw	r2,-32704(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - 0x1);
   10418:	d0a01317 	ldw	r2,-32692(gp)
   1041c:	1007883a 	mov	r3,r2
   10420:	008000f4 	movhi	r2,3
   10424:	10801204 	addi	r2,r2,72
   10428:	1885883a 	add	r2,r3,r2
   1042c:	d0e01317 	ldw	r3,-32692(gp)
   10430:	1809883a 	mov	r4,r3
   10434:	00c000f4 	movhi	r3,3
   10438:	18c01204 	addi	r3,r3,72
   1043c:	20c7883a 	add	r3,r4,r3
   10440:	18c00037 	ldwio	r3,0(r3)
   10444:	18ffffc4 	addi	r3,r3,-1
   10448:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   1044c:	d0a01317 	ldw	r2,-32692(gp)
   10450:	1007883a 	mov	r3,r2
   10454:	008000f4 	movhi	r2,3
   10458:	10801204 	addi	r2,r2,72
   1045c:	1885883a 	add	r2,r3,r2
   10460:	10800037 	ldwio	r2,0(r2)
   10464:	10800418 	cmpnei	r2,r2,16
   10468:	1000081e 	bne	r2,zero,1048c <READ_FIFO_1+0xf8>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   1046c:	d0a01117 	ldw	r2,-32700(gp)
   10470:	1007883a 	mov	r3,r2
   10474:	008000f4 	movhi	r2,3
   10478:	10801204 	addi	r2,r2,72
   1047c:	1885883a 	add	r2,r3,r2
   10480:	00c00044 	movi	r3,1
   10484:	10c00035 	stwio	r3,0(r2)
   10488:	00000706 	br	104a8 <READ_FIFO_1+0x114>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   1048c:	d0a01117 	ldw	r2,-32700(gp)
   10490:	1007883a 	mov	r3,r2
   10494:	008000f4 	movhi	r2,3
   10498:	10801204 	addi	r2,r2,72
   1049c:	1885883a 	add	r2,r3,r2
   104a0:	0007883a 	mov	r3,zero
   104a4:	10c00035 	stwio	r3,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   104a8:	d0a01317 	ldw	r2,-32692(gp)
   104ac:	1007883a 	mov	r3,r2
   104b0:	008000f4 	movhi	r2,3
   104b4:	10801204 	addi	r2,r2,72
   104b8:	1885883a 	add	r2,r3,r2
   104bc:	10800037 	ldwio	r2,0(r2)
   104c0:	1000081e 	bne	r2,zero,104e4 <READ_FIFO_1+0x150>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   104c4:	d0a01217 	ldw	r2,-32696(gp)
   104c8:	1007883a 	mov	r3,r2
   104cc:	008000f4 	movhi	r2,3
   104d0:	10801204 	addi	r2,r2,72
   104d4:	1885883a 	add	r2,r3,r2
   104d8:	00c00044 	movi	r3,1
   104dc:	10c00035 	stwio	r3,0(r2)
   104e0:	00000706 	br	10500 <READ_FIFO_1+0x16c>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   104e4:	d0a01217 	ldw	r2,-32696(gp)
   104e8:	1007883a 	mov	r3,r2
   104ec:	008000f4 	movhi	r2,3
   104f0:	10801204 	addi	r2,r2,72
   104f4:	1885883a 	add	r2,r3,r2
   104f8:	0007883a 	mov	r3,zero
   104fc:	10c00035 	stwio	r3,0(r2)
	}
}
   10500:	e037883a 	mov	sp,fp
   10504:	df000017 	ldw	fp,0(sp)
   10508:	dec00104 	addi	sp,sp,4
   1050c:	f800283a 	ret

00010510 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
   10510:	deffff04 	addi	sp,sp,-4
   10514:	df000015 	stw	fp,0(sp)
   10518:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   1051c:	00800304 	movi	r2,12
   10520:	d0a00f15 	stw	r2,-32708(gp)
	readp  = STARTP;
   10524:	00800304 	movi	r2,12
   10528:	d0a01015 	stw	r2,-32704(gp)
	fullp   = 0x0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   1052c:	d0201115 	stw	zero,-32700(gp)
	emptyp   = fullp + UNIT_SIZE;
   10530:	d0a01117 	ldw	r2,-32700(gp)
   10534:	10800104 	addi	r2,r2,4
   10538:	d0a01215 	stw	r2,-32696(gp)
	countp  = emptyp + UNIT_SIZE;
   1053c:	d0a01217 	ldw	r2,-32696(gp)
   10540:	10800104 	addi	r2,r2,4
   10544:	d0a01315 	stw	r2,-32692(gp)


	// Assigning values for the flags.
	IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
   10548:	d0a01117 	ldw	r2,-32700(gp)
   1054c:	1007883a 	mov	r3,r2
   10550:	008000f4 	movhi	r2,3
   10554:	10801204 	addi	r2,r2,72
   10558:	1885883a 	add	r2,r3,r2
   1055c:	0007883a 	mov	r3,zero
   10560:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
   10564:	d0a01217 	ldw	r2,-32696(gp)
   10568:	1007883a 	mov	r3,r2
   1056c:	008000f4 	movhi	r2,3
   10570:	10801204 	addi	r2,r2,72
   10574:	1885883a 	add	r2,r3,r2
   10578:	00c00044 	movi	r3,1
   1057c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start
   10580:	d0a01317 	ldw	r2,-32692(gp)
   10584:	1007883a 	mov	r3,r2
   10588:	008000f4 	movhi	r2,3
   1058c:	10801204 	addi	r2,r2,72
   10590:	1885883a 	add	r2,r3,r2
   10594:	0007883a 	mov	r3,zero
   10598:	10c00035 	stwio	r3,0(r2)

}
   1059c:	e037883a 	mov	sp,fp
   105a0:	df000017 	ldw	fp,0(sp)
   105a4:	dec00104 	addi	sp,sp,4
   105a8:	f800283a 	ret

000105ac <main>:
void delay(int n);
int producer();


int main()
{
   105ac:	defffb04 	addi	sp,sp,-20
   105b0:	dfc00415 	stw	ra,16(sp)
   105b4:	df000315 	stw	fp,12(sp)
   105b8:	dc000215 	stw	r16,8(sp)
   105bc:	df000204 	addi	fp,sp,8

	alt_u32 sw_fast_timeA, sw_fast_timeB;
	alt_timestamp_start();
   105c0:	001af940 	call	1af94 <alt_timestamp_start>
	sw_fast_timeA = alt_timestamp();
   105c4:	001b01c0 	call	1b01c <alt_timestamp>
   105c8:	e0bffe15 	stw	r2,-8(fp)

	producer();
   105cc:	001060c0 	call	1060c <producer>

	sw_fast_timeB = alt_timestamp();
   105d0:	001b01c0 	call	1b01c <alt_timestamp>
   105d4:	e0bfff15 	stw	r2,-4(fp)

	printf("Time for Write operation: %.2lu ms\n",1000*((unsigned long)(sw_fast_timeB-sw_fast_timeA))/((unsigned long)alt_timestamp_freq()));
   105d8:	e0ffff17 	ldw	r3,-4(fp)
   105dc:	e0bffe17 	ldw	r2,-8(fp)
   105e0:	1885c83a 	sub	r2,r3,r2
   105e4:	1400fa24 	muli	r16,r2,1000
   105e8:	001b0ac0 	call	1b0ac <alt_timestamp_freq>
   105ec:	8009883a 	mov	r4,r16
   105f0:	100b883a 	mov	r5,r2
   105f4:	00108100 	call	10810 <__udivsi3>
   105f8:	01000174 	movhi	r4,5
   105fc:	21200904 	addi	r4,r4,-32732
   10600:	100b883a 	mov	r5,r2
   10604:	001084c0 	call	1084c <printf>
	while(1) { }
   10608:	003fff06 	br	10608 <main+0x5c>

0001060c <producer>:
//	while(1){}
	return 0;
}

int producer()
{
   1060c:	defffd04 	addi	sp,sp,-12
   10610:	dfc00215 	stw	ra,8(sp)
   10614:	df000115 	stw	fp,4(sp)
   10618:	df000104 	addi	fp,sp,4
	printf("Producer starting..\n");
   1061c:	01000174 	movhi	r4,5
   10620:	21201204 	addi	r4,r4,-32696
   10624:	001090c0 	call	1090c <puts>

	FIFO_1_INIT(); // Initialize the FIFO
   10628:	00105100 	call	10510 <FIFO_1_INIT>

	int j = 5;
   1062c:	00800144 	movi	r2,5
   10630:	e0bfff15 	stw	r2,-4(fp)
	while(j<=500)
   10634:	00001206 	br	10680 <producer+0x74>
	{
		delay(100000);
   10638:	010000b4 	movhi	r4,2
   1063c:	2121a804 	addi	r4,r4,-31072
   10640:	00106b00 	call	106b0 <delay>

		WRITE_FIFO_1(&j); // Write to the producer-consumer fifo
   10644:	e13fff04 	addi	r4,fp,-4
   10648:	00101f40 	call	101f4 <WRITE_FIFO_1>

		delay(100000);
   1064c:	010000b4 	movhi	r4,2
   10650:	2121a804 	addi	r4,r4,-31072
   10654:	00106b00 	call	106b0 <delay>

		printf("Producer sent [%i]\t%x\n",j,writep);
   10658:	e0ffff17 	ldw	r3,-4(fp)
   1065c:	d0a00f17 	ldw	r2,-32708(gp)
   10660:	01000174 	movhi	r4,5
   10664:	21201704 	addi	r4,r4,-32676
   10668:	180b883a 	mov	r5,r3
   1066c:	100d883a 	mov	r6,r2
   10670:	001084c0 	call	1084c <printf>

		j+=10;
   10674:	e0bfff17 	ldw	r2,-4(fp)
   10678:	10800284 	addi	r2,r2,10
   1067c:	e0bfff15 	stw	r2,-4(fp)
	printf("Producer starting..\n");

	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
	while(j<=500)
   10680:	e0bfff17 	ldw	r2,-4(fp)
   10684:	10807d50 	cmplti	r2,r2,501
   10688:	103feb1e 	bne	r2,zero,10638 <producer+0x2c>

		j+=10;

	}

	printf("Producer finished..\n");
   1068c:	01000174 	movhi	r4,5
   10690:	21201d04 	addi	r4,r4,-32652
   10694:	001090c0 	call	1090c <puts>
	return 0;
   10698:	0005883a 	mov	r2,zero
}
   1069c:	e037883a 	mov	sp,fp
   106a0:	dfc00117 	ldw	ra,4(sp)
   106a4:	df000017 	ldw	fp,0(sp)
   106a8:	dec00204 	addi	sp,sp,8
   106ac:	f800283a 	ret

000106b0 <delay>:


void delay(int n)
{
   106b0:	defffd04 	addi	sp,sp,-12
   106b4:	df000215 	stw	fp,8(sp)
   106b8:	df000204 	addi	fp,sp,8
   106bc:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   106c0:	e0bfff17 	ldw	r2,-4(fp)
   106c4:	e0bffe15 	stw	r2,-8(fp)
   106c8:	00000306 	br	106d8 <delay+0x28>
   106cc:	e0bffe17 	ldw	r2,-8(fp)
   106d0:	10bfffc4 	addi	r2,r2,-1
   106d4:	e0bffe15 	stw	r2,-8(fp)
   106d8:	e0bffe17 	ldw	r2,-8(fp)
   106dc:	00bffb16 	blt	zero,r2,106cc <delay+0x1c>
	{
		continue;
	}
}
   106e0:	e037883a 	mov	sp,fp
   106e4:	df000017 	ldw	fp,0(sp)
   106e8:	dec00104 	addi	sp,sp,4
   106ec:	f800283a 	ret

000106f0 <udivmodsi4>:
   106f0:	2005883a 	mov	r2,r4
   106f4:	2900182e 	bgeu	r5,r4,10758 <udivmodsi4+0x68>
   106f8:	28001716 	blt	r5,zero,10758 <udivmodsi4+0x68>
   106fc:	01000804 	movi	r4,32
   10700:	00c00044 	movi	r3,1
   10704:	00000206 	br	10710 <udivmodsi4+0x20>
   10708:	20001126 	beq	r4,zero,10750 <udivmodsi4+0x60>
   1070c:	28000516 	blt	r5,zero,10724 <udivmodsi4+0x34>
   10710:	294b883a 	add	r5,r5,r5
   10714:	213fffc4 	addi	r4,r4,-1
   10718:	18c7883a 	add	r3,r3,r3
   1071c:	28bffa36 	bltu	r5,r2,10708 <udivmodsi4+0x18>
   10720:	18000b26 	beq	r3,zero,10750 <udivmodsi4+0x60>
   10724:	0009883a 	mov	r4,zero
   10728:	11400236 	bltu	r2,r5,10734 <udivmodsi4+0x44>
   1072c:	1145c83a 	sub	r2,r2,r5
   10730:	20c8b03a 	or	r4,r4,r3
   10734:	1806d07a 	srli	r3,r3,1
   10738:	280ad07a 	srli	r5,r5,1
   1073c:	183ffa1e 	bne	r3,zero,10728 <udivmodsi4+0x38>
   10740:	3000021e 	bne	r6,zero,1074c <udivmodsi4+0x5c>
   10744:	2005883a 	mov	r2,r4
   10748:	f800283a 	ret
   1074c:	f800283a 	ret
   10750:	0009883a 	mov	r4,zero
   10754:	003ffa06 	br	10740 <udivmodsi4+0x50>
   10758:	00c00044 	movi	r3,1
   1075c:	0009883a 	mov	r4,zero
   10760:	003ff106 	br	10728 <udivmodsi4+0x38>

00010764 <__divsi3>:
   10764:	defffe04 	addi	sp,sp,-8
   10768:	dfc00115 	stw	ra,4(sp)
   1076c:	dc000015 	stw	r16,0(sp)
   10770:	20000a16 	blt	r4,zero,1079c <__divsi3+0x38>
   10774:	0021883a 	mov	r16,zero
   10778:	28000b16 	blt	r5,zero,107a8 <__divsi3+0x44>
   1077c:	000d883a 	mov	r6,zero
   10780:	00106f00 	call	106f0 <udivmodsi4>
   10784:	80000126 	beq	r16,zero,1078c <__divsi3+0x28>
   10788:	0085c83a 	sub	r2,zero,r2
   1078c:	dfc00117 	ldw	ra,4(sp)
   10790:	dc000017 	ldw	r16,0(sp)
   10794:	dec00204 	addi	sp,sp,8
   10798:	f800283a 	ret
   1079c:	0109c83a 	sub	r4,zero,r4
   107a0:	04000044 	movi	r16,1
   107a4:	283ff50e 	bge	r5,zero,1077c <__divsi3+0x18>
   107a8:	014bc83a 	sub	r5,zero,r5
   107ac:	8400005c 	xori	r16,r16,1
   107b0:	003ff206 	br	1077c <__divsi3+0x18>

000107b4 <__modsi3>:
   107b4:	deffff04 	addi	sp,sp,-4
   107b8:	dfc00015 	stw	ra,0(sp)
   107bc:	20000516 	blt	r4,zero,107d4 <__modsi3+0x20>
   107c0:	28000c16 	blt	r5,zero,107f4 <__modsi3+0x40>
   107c4:	01800044 	movi	r6,1
   107c8:	dfc00017 	ldw	ra,0(sp)
   107cc:	dec00104 	addi	sp,sp,4
   107d0:	00106f01 	jmpi	106f0 <udivmodsi4>
   107d4:	0109c83a 	sub	r4,zero,r4
   107d8:	28000b16 	blt	r5,zero,10808 <__modsi3+0x54>
   107dc:	01800044 	movi	r6,1
   107e0:	00106f00 	call	106f0 <udivmodsi4>
   107e4:	0085c83a 	sub	r2,zero,r2
   107e8:	dfc00017 	ldw	ra,0(sp)
   107ec:	dec00104 	addi	sp,sp,4
   107f0:	f800283a 	ret
   107f4:	014bc83a 	sub	r5,zero,r5
   107f8:	01800044 	movi	r6,1
   107fc:	dfc00017 	ldw	ra,0(sp)
   10800:	dec00104 	addi	sp,sp,4
   10804:	00106f01 	jmpi	106f0 <udivmodsi4>
   10808:	014bc83a 	sub	r5,zero,r5
   1080c:	003ff306 	br	107dc <__modsi3+0x28>

00010810 <__udivsi3>:
   10810:	000d883a 	mov	r6,zero
   10814:	00106f01 	jmpi	106f0 <udivmodsi4>

00010818 <__umodsi3>:
   10818:	01800044 	movi	r6,1
   1081c:	00106f01 	jmpi	106f0 <udivmodsi4>

00010820 <_printf_r>:
   10820:	defffd04 	addi	sp,sp,-12
   10824:	dfc00015 	stw	ra,0(sp)
   10828:	d9800115 	stw	r6,4(sp)
   1082c:	d9c00215 	stw	r7,8(sp)
   10830:	280d883a 	mov	r6,r5
   10834:	21400217 	ldw	r5,8(r4)
   10838:	d9c00104 	addi	r7,sp,4
   1083c:	00109e00 	call	109e0 <___vfprintf_internal_r>
   10840:	dfc00017 	ldw	ra,0(sp)
   10844:	dec00304 	addi	sp,sp,12
   10848:	f800283a 	ret

0001084c <printf>:
   1084c:	defffc04 	addi	sp,sp,-16
   10850:	dfc00015 	stw	ra,0(sp)
   10854:	d9400115 	stw	r5,4(sp)
   10858:	d9800215 	stw	r6,8(sp)
   1085c:	d9c00315 	stw	r7,12(sp)
   10860:	00800174 	movhi	r2,5
   10864:	10a77404 	addi	r2,r2,-25136
   10868:	10800017 	ldw	r2,0(r2)
   1086c:	200b883a 	mov	r5,r4
   10870:	d9800104 	addi	r6,sp,4
   10874:	11000217 	ldw	r4,8(r2)
   10878:	00127d80 	call	127d8 <__vfprintf_internal>
   1087c:	dfc00017 	ldw	ra,0(sp)
   10880:	dec00404 	addi	sp,sp,16
   10884:	f800283a 	ret

00010888 <_puts_r>:
   10888:	defff604 	addi	sp,sp,-40
   1088c:	dc400815 	stw	r17,32(sp)
   10890:	2023883a 	mov	r17,r4
   10894:	2809883a 	mov	r4,r5
   10898:	dc000715 	stw	r16,28(sp)
   1089c:	dfc00915 	stw	ra,36(sp)
   108a0:	2821883a 	mov	r16,r5
   108a4:	00109200 	call	10920 <strlen>
   108a8:	10c00044 	addi	r3,r2,1
   108ac:	d8800115 	stw	r2,4(sp)
   108b0:	89400217 	ldw	r5,8(r17)
   108b4:	00800174 	movhi	r2,5
   108b8:	10a02204 	addi	r2,r2,-32632
   108bc:	d8800215 	stw	r2,8(sp)
   108c0:	00800044 	movi	r2,1
   108c4:	d8800315 	stw	r2,12(sp)
   108c8:	8809883a 	mov	r4,r17
   108cc:	00800084 	movi	r2,2
   108d0:	d9800404 	addi	r6,sp,16
   108d4:	dc000015 	stw	r16,0(sp)
   108d8:	d8c00615 	stw	r3,24(sp)
   108dc:	dec00415 	stw	sp,16(sp)
   108e0:	d8800515 	stw	r2,20(sp)
   108e4:	0014a900 	call	14a90 <__sfvwrite_r>
   108e8:	1000061e 	bne	r2,zero,10904 <_puts_r+0x7c>
   108ec:	00800284 	movi	r2,10
   108f0:	dfc00917 	ldw	ra,36(sp)
   108f4:	dc400817 	ldw	r17,32(sp)
   108f8:	dc000717 	ldw	r16,28(sp)
   108fc:	dec00a04 	addi	sp,sp,40
   10900:	f800283a 	ret
   10904:	00bfffc4 	movi	r2,-1
   10908:	003ff906 	br	108f0 <_puts_r+0x68>

0001090c <puts>:
   1090c:	00800174 	movhi	r2,5
   10910:	10a77404 	addi	r2,r2,-25136
   10914:	200b883a 	mov	r5,r4
   10918:	11000017 	ldw	r4,0(r2)
   1091c:	00108881 	jmpi	10888 <_puts_r>

00010920 <strlen>:
   10920:	208000cc 	andi	r2,r4,3
   10924:	10001f1e 	bne	r2,zero,109a4 <strlen+0x84>
   10928:	20800017 	ldw	r2,0(r4)
   1092c:	01ffbff4 	movhi	r7,65279
   10930:	39ffbfc4 	addi	r7,r7,-257
   10934:	01a02074 	movhi	r6,32897
   10938:	31a02004 	addi	r6,r6,-32640
   1093c:	11c7883a 	add	r3,r2,r7
   10940:	0084303a 	nor	r2,zero,r2
   10944:	1886703a 	and	r3,r3,r2
   10948:	1986703a 	and	r3,r3,r6
   1094c:	2005883a 	mov	r2,r4
   10950:	1800101e 	bne	r3,zero,10994 <strlen+0x74>
   10954:	10800104 	addi	r2,r2,4
   10958:	10c00017 	ldw	r3,0(r2)
   1095c:	19cb883a 	add	r5,r3,r7
   10960:	00c6303a 	nor	r3,zero,r3
   10964:	28c6703a 	and	r3,r5,r3
   10968:	1986703a 	and	r3,r3,r6
   1096c:	1800091e 	bne	r3,zero,10994 <strlen+0x74>
   10970:	10800104 	addi	r2,r2,4
   10974:	10c00017 	ldw	r3,0(r2)
   10978:	19cb883a 	add	r5,r3,r7
   1097c:	00c6303a 	nor	r3,zero,r3
   10980:	28c6703a 	and	r3,r5,r3
   10984:	1986703a 	and	r3,r3,r6
   10988:	183ff226 	beq	r3,zero,10954 <strlen+0x34>
   1098c:	00000106 	br	10994 <strlen+0x74>
   10990:	10800044 	addi	r2,r2,1
   10994:	10c00007 	ldb	r3,0(r2)
   10998:	183ffd1e 	bne	r3,zero,10990 <strlen+0x70>
   1099c:	1105c83a 	sub	r2,r2,r4
   109a0:	f800283a 	ret
   109a4:	2005883a 	mov	r2,r4
   109a8:	003ffa06 	br	10994 <strlen+0x74>

000109ac <__sprint_r>:
   109ac:	30800217 	ldw	r2,8(r6)
   109b0:	defffe04 	addi	sp,sp,-8
   109b4:	dc000015 	stw	r16,0(sp)
   109b8:	dfc00115 	stw	ra,4(sp)
   109bc:	3021883a 	mov	r16,r6
   109c0:	10000226 	beq	r2,zero,109cc <__sprint_r+0x20>
   109c4:	0014a900 	call	14a90 <__sfvwrite_r>
   109c8:	80000215 	stw	zero,8(r16)
   109cc:	80000115 	stw	zero,4(r16)
   109d0:	dfc00117 	ldw	ra,4(sp)
   109d4:	dc000017 	ldw	r16,0(sp)
   109d8:	dec00204 	addi	sp,sp,8
   109dc:	f800283a 	ret

000109e0 <___vfprintf_internal_r>:
   109e0:	defeb904 	addi	sp,sp,-1308
   109e4:	dc013d15 	stw	r16,1268(sp)
   109e8:	d9013015 	stw	r4,1216(sp)
   109ec:	dfc14615 	stw	ra,1304(sp)
   109f0:	df014515 	stw	fp,1300(sp)
   109f4:	ddc14415 	stw	r23,1296(sp)
   109f8:	dd814315 	stw	r22,1292(sp)
   109fc:	dd414215 	stw	r21,1288(sp)
   10a00:	dd014115 	stw	r20,1284(sp)
   10a04:	dcc14015 	stw	r19,1280(sp)
   10a08:	dc813f15 	stw	r18,1276(sp)
   10a0c:	dc413e15 	stw	r17,1272(sp)
   10a10:	d9412915 	stw	r5,1188(sp)
   10a14:	3021883a 	mov	r16,r6
   10a18:	d9c12d15 	stw	r7,1204(sp)
   10a1c:	001517c0 	call	1517c <_localeconv_r>
   10a20:	10800017 	ldw	r2,0(r2)
   10a24:	d9013017 	ldw	r4,1216(sp)
   10a28:	d8013315 	stw	zero,1228(sp)
   10a2c:	d8813715 	stw	r2,1244(sp)
   10a30:	d8013415 	stw	zero,1232(sp)
   10a34:	20000226 	beq	r4,zero,10a40 <___vfprintf_internal_r+0x60>
   10a38:	20800e17 	ldw	r2,56(r4)
   10a3c:	10019826 	beq	r2,zero,110a0 <___vfprintf_internal_r+0x6c0>
   10a40:	da012917 	ldw	r8,1188(sp)
   10a44:	4080030b 	ldhu	r2,12(r8)
   10a48:	10c0020c 	andi	r3,r2,8
   10a4c:	18ffffcc 	andi	r3,r3,65535
   10a50:	18e0001c 	xori	r3,r3,32768
   10a54:	18e00004 	addi	r3,r3,-32768
   10a58:	18013a26 	beq	r3,zero,10f44 <___vfprintf_internal_r+0x564>
   10a5c:	40c00417 	ldw	r3,16(r8)
   10a60:	18013826 	beq	r3,zero,10f44 <___vfprintf_internal_r+0x564>
   10a64:	1100068c 	andi	r4,r2,26
   10a68:	00c00284 	movi	r3,10
   10a6c:	20c13e26 	beq	r4,r3,10f68 <___vfprintf_internal_r+0x588>
   10a70:	da010dc4 	addi	r8,sp,1079
   10a74:	d8800404 	addi	r2,sp,16
   10a78:	da012615 	stw	r8,1176(sp)
   10a7c:	d8811b15 	stw	r2,1132(sp)
   10a80:	1013883a 	mov	r9,r2
   10a84:	d8812617 	ldw	r2,1176(sp)
   10a88:	da010e04 	addi	r8,sp,1080
   10a8c:	dc413017 	ldw	r17,1216(sp)
   10a90:	da012715 	stw	r8,1180(sp)
   10a94:	4091c83a 	sub	r8,r8,r2
   10a98:	d8011d15 	stw	zero,1140(sp)
   10a9c:	d8011c15 	stw	zero,1136(sp)
   10aa0:	802b883a 	mov	r21,r16
   10aa4:	d8013215 	stw	zero,1224(sp)
   10aa8:	d8013615 	stw	zero,1240(sp)
   10aac:	d8013515 	stw	zero,1236(sp)
   10ab0:	d8012c15 	stw	zero,1200(sp)
   10ab4:	da013915 	stw	r8,1252(sp)
   10ab8:	a8800007 	ldb	r2,0(r21)
   10abc:	1002ec26 	beq	r2,zero,11670 <___vfprintf_internal_r+0xc90>
   10ac0:	00c00944 	movi	r3,37
   10ac4:	a825883a 	mov	r18,r21
   10ac8:	10c0021e 	bne	r2,r3,10ad4 <___vfprintf_internal_r+0xf4>
   10acc:	00001406 	br	10b20 <___vfprintf_internal_r+0x140>
   10ad0:	10c00326 	beq	r2,r3,10ae0 <___vfprintf_internal_r+0x100>
   10ad4:	94800044 	addi	r18,r18,1
   10ad8:	90800007 	ldb	r2,0(r18)
   10adc:	103ffc1e 	bne	r2,zero,10ad0 <___vfprintf_internal_r+0xf0>
   10ae0:	9561c83a 	sub	r16,r18,r21
   10ae4:	80000e26 	beq	r16,zero,10b20 <___vfprintf_internal_r+0x140>
   10ae8:	da011d17 	ldw	r8,1140(sp)
   10aec:	d8c11c17 	ldw	r3,1136(sp)
   10af0:	4d400015 	stw	r21,0(r9)
   10af4:	4c000115 	stw	r16,4(r9)
   10af8:	4411883a 	add	r8,r8,r16
   10afc:	18c00044 	addi	r3,r3,1
   10b00:	da011d15 	stw	r8,1140(sp)
   10b04:	d8c11c15 	stw	r3,1136(sp)
   10b08:	008001c4 	movi	r2,7
   10b0c:	10c15d16 	blt	r2,r3,11084 <___vfprintf_internal_r+0x6a4>
   10b10:	4a400204 	addi	r9,r9,8
   10b14:	d8812c17 	ldw	r2,1200(sp)
   10b18:	1405883a 	add	r2,r2,r16
   10b1c:	d8812c15 	stw	r2,1200(sp)
   10b20:	90800007 	ldb	r2,0(r18)
   10b24:	10013b26 	beq	r2,zero,11014 <___vfprintf_internal_r+0x634>
   10b28:	95400044 	addi	r21,r18,1
   10b2c:	94800047 	ldb	r18,1(r18)
   10b30:	d8012585 	stb	zero,1174(sp)
   10b34:	073fffc4 	movi	fp,-1
   10b38:	d8012e15 	stw	zero,1208(sp)
   10b3c:	0021883a 	mov	r16,zero
   10b40:	00c01604 	movi	r3,88
   10b44:	01400244 	movi	r5,9
   10b48:	02800a84 	movi	r10,42
   10b4c:	01c01b04 	movi	r7,108
   10b50:	01800ac4 	movi	r6,43
   10b54:	02c00804 	movi	r11,32
   10b58:	ad400044 	addi	r21,r21,1
   10b5c:	90bff804 	addi	r2,r18,-32
   10b60:	1880092e 	bgeu	r3,r2,10b88 <___vfprintf_internal_r+0x1a8>
   10b64:	90012b26 	beq	r18,zero,11014 <___vfprintf_internal_r+0x634>
   10b68:	00c00044 	movi	r3,1
   10b6c:	d8c12815 	stw	r3,1184(sp)
   10b70:	dc810405 	stb	r18,1040(sp)
   10b74:	d8012585 	stb	zero,1174(sp)
   10b78:	d8c12b15 	stw	r3,1196(sp)
   10b7c:	dcc10404 	addi	r19,sp,1040
   10b80:	d8013115 	stw	zero,1220(sp)
   10b84:	00008806 	br	10da8 <___vfprintf_internal_r+0x3c8>
   10b88:	1085883a 	add	r2,r2,r2
   10b8c:	1085883a 	add	r2,r2,r2
   10b90:	01000074 	movhi	r4,1
   10b94:	2102e904 	addi	r4,r4,2980
   10b98:	1105883a 	add	r2,r2,r4
   10b9c:	10800017 	ldw	r2,0(r2)
   10ba0:	1000683a 	jmp	r2
   10ba4:	00011158 	cmpnei	zero,zero,1093
   10ba8:	00010b64 	muli	zero,zero,1069
   10bac:	00010b64 	muli	zero,zero,1069
   10bb0:	0001116c 	andhi	zero,zero,1093
   10bb4:	00010b64 	muli	zero,zero,1069
   10bb8:	00010b64 	muli	zero,zero,1069
   10bbc:	00010b64 	muli	zero,zero,1069
   10bc0:	00010b64 	muli	zero,zero,1069
   10bc4:	00010b64 	muli	zero,zero,1069
   10bc8:	00010b64 	muli	zero,zero,1069
   10bcc:	00011254 	movui	zero,1097
   10bd0:	00011110 	cmplti	zero,zero,1092
   10bd4:	00010b64 	muli	zero,zero,1069
   10bd8:	00010f38 	rdprs	zero,zero,1084
   10bdc:	0001111c 	xori	zero,zero,1092
   10be0:	00010b64 	muli	zero,zero,1069
   10be4:	00011178 	rdprs	zero,zero,1093
   10be8:	00011278 	rdprs	zero,zero,1097
   10bec:	00011278 	rdprs	zero,zero,1097
   10bf0:	00011278 	rdprs	zero,zero,1097
   10bf4:	00011278 	rdprs	zero,zero,1097
   10bf8:	00011278 	rdprs	zero,zero,1097
   10bfc:	00011278 	rdprs	zero,zero,1097
   10c00:	00011278 	rdprs	zero,zero,1097
   10c04:	00011278 	rdprs	zero,zero,1097
   10c08:	00011278 	rdprs	zero,zero,1097
   10c0c:	00010b64 	muli	zero,zero,1069
   10c10:	00010b64 	muli	zero,zero,1069
   10c14:	00010b64 	muli	zero,zero,1069
   10c18:	00010b64 	muli	zero,zero,1069
   10c1c:	00010b64 	muli	zero,zero,1069
   10c20:	00010b64 	muli	zero,zero,1069
   10c24:	00010b64 	muli	zero,zero,1069
   10c28:	00010b64 	muli	zero,zero,1069
   10c2c:	00010b64 	muli	zero,zero,1069
   10c30:	00010b64 	muli	zero,zero,1069
   10c34:	00010ed4 	movui	zero,1083
   10c38:	000112a0 	cmpeqi	zero,zero,1098
   10c3c:	00010b64 	muli	zero,zero,1069
   10c40:	000112a0 	cmpeqi	zero,zero,1098
   10c44:	00010b64 	muli	zero,zero,1069
   10c48:	00010b64 	muli	zero,zero,1069
   10c4c:	00010b64 	muli	zero,zero,1069
   10c50:	00010b64 	muli	zero,zero,1069
   10c54:	00011410 	cmplti	zero,zero,1104
   10c58:	00010b64 	muli	zero,zero,1069
   10c5c:	00010b64 	muli	zero,zero,1069
   10c60:	00010e9c 	xori	zero,zero,1082
   10c64:	00010b64 	muli	zero,zero,1069
   10c68:	00010b64 	muli	zero,zero,1069
   10c6c:	00010b64 	muli	zero,zero,1069
   10c70:	00010b64 	muli	zero,zero,1069
   10c74:	00010b64 	muli	zero,zero,1069
   10c78:	00010d08 	cmpgei	zero,zero,1076
   10c7c:	00010b64 	muli	zero,zero,1069
   10c80:	00010b64 	muli	zero,zero,1069
   10c84:	00011184 	movi	zero,1094
   10c88:	00010b64 	muli	zero,zero,1069
   10c8c:	00010b64 	muli	zero,zero,1069
   10c90:	00010b64 	muli	zero,zero,1069
   10c94:	00010b64 	muli	zero,zero,1069
   10c98:	00010b64 	muli	zero,zero,1069
   10c9c:	00010b64 	muli	zero,zero,1069
   10ca0:	00010b64 	muli	zero,zero,1069
   10ca4:	00010b64 	muli	zero,zero,1069
   10ca8:	00010b64 	muli	zero,zero,1069
   10cac:	00010b64 	muli	zero,zero,1069
   10cb0:	000111f8 	rdprs	zero,zero,1095
   10cb4:	00010ed8 	cmpnei	zero,zero,1083
   10cb8:	000112a0 	cmpeqi	zero,zero,1098
   10cbc:	000112a0 	cmpeqi	zero,zero,1098
   10cc0:	000112a0 	cmpeqi	zero,zero,1098
   10cc4:	000111d8 	cmpnei	zero,zero,1095
   10cc8:	00010ed8 	cmpnei	zero,zero,1083
   10ccc:	00010b64 	muli	zero,zero,1069
   10cd0:	00010b64 	muli	zero,zero,1069
   10cd4:	000111e4 	muli	zero,zero,1095
   10cd8:	00010b64 	muli	zero,zero,1069
   10cdc:	00011228 	cmpgeui	zero,zero,1096
   10ce0:	00010ea0 	cmpeqi	zero,zero,1082
   10ce4:	00011328 	cmpgeui	zero,zero,1100
   10ce8:	00011374 	movhi	zero,1101
   10cec:	00010b64 	muli	zero,zero,1069
   10cf0:	00011380 	call	1138 <__alt_mem_ins_mem0-0xeec8>
   10cf4:	00010b64 	muli	zero,zero,1069
   10cf8:	00010d0c 	andi	zero,zero,1076
   10cfc:	00010b64 	muli	zero,zero,1069
   10d00:	00010b64 	muli	zero,zero,1069
   10d04:	000113dc 	xori	zero,zero,1103
   10d08:	84000414 	ori	r16,r16,16
   10d0c:	8080080c 	andi	r2,r16,32
   10d10:	1000f51e 	bne	r2,zero,110e8 <___vfprintf_internal_r+0x708>
   10d14:	8080040c 	andi	r2,r16,16
   10d18:	10042c26 	beq	r2,zero,11dcc <___vfprintf_internal_r+0x13ec>
   10d1c:	da012d17 	ldw	r8,1204(sp)
   10d20:	002d883a 	mov	r22,zero
   10d24:	00c00044 	movi	r3,1
   10d28:	45c00017 	ldw	r23,0(r8)
   10d2c:	42000104 	addi	r8,r8,4
   10d30:	da012d15 	stw	r8,1204(sp)
   10d34:	b805883a 	mov	r2,r23
   10d38:	d8012585 	stb	zero,1174(sp)
   10d3c:	e0000216 	blt	fp,zero,10d48 <___vfprintf_internal_r+0x368>
   10d40:	013fdfc4 	movi	r4,-129
   10d44:	8120703a 	and	r16,r16,r4
   10d48:	1002671e 	bne	r2,zero,116e8 <___vfprintf_internal_r+0xd08>
   10d4c:	e002661e 	bne	fp,zero,116e8 <___vfprintf_internal_r+0xd08>
   10d50:	18c03fcc 	andi	r3,r3,255
   10d54:	1803561e 	bne	r3,zero,11ab0 <___vfprintf_internal_r+0x10d0>
   10d58:	8080004c 	andi	r2,r16,1
   10d5c:	10035426 	beq	r2,zero,11ab0 <___vfprintf_internal_r+0x10d0>
   10d60:	da013917 	ldw	r8,1252(sp)
   10d64:	00800c04 	movi	r2,48
   10d68:	d8810dc5 	stb	r2,1079(sp)
   10d6c:	da012b15 	stw	r8,1196(sp)
   10d70:	dcc10dc4 	addi	r19,sp,1079
   10d74:	d8812b17 	ldw	r2,1196(sp)
   10d78:	d8812815 	stw	r2,1184(sp)
   10d7c:	1700010e 	bge	r2,fp,10d84 <___vfprintf_internal_r+0x3a4>
   10d80:	df012815 	stw	fp,1184(sp)
   10d84:	d8812583 	ldbu	r2,1174(sp)
   10d88:	df013115 	stw	fp,1220(sp)
   10d8c:	10803fcc 	andi	r2,r2,255
   10d90:	1080201c 	xori	r2,r2,128
   10d94:	10bfe004 	addi	r2,r2,-128
   10d98:	10000326 	beq	r2,zero,10da8 <___vfprintf_internal_r+0x3c8>
   10d9c:	da012817 	ldw	r8,1184(sp)
   10da0:	42000044 	addi	r8,r8,1
   10da4:	da012815 	stw	r8,1184(sp)
   10da8:	80c0008c 	andi	r3,r16,2
   10dac:	d8c12a15 	stw	r3,1192(sp)
   10db0:	18000326 	beq	r3,zero,10dc0 <___vfprintf_internal_r+0x3e0>
   10db4:	da012817 	ldw	r8,1184(sp)
   10db8:	42000084 	addi	r8,r8,2
   10dbc:	da012815 	stw	r8,1184(sp)
   10dc0:	80c0210c 	andi	r3,r16,132
   10dc4:	d8c12f15 	stw	r3,1212(sp)
   10dc8:	1801941e 	bne	r3,zero,1141c <___vfprintf_internal_r+0xa3c>
   10dcc:	da012e17 	ldw	r8,1208(sp)
   10dd0:	d8c12817 	ldw	r3,1184(sp)
   10dd4:	40edc83a 	sub	r22,r8,r3
   10dd8:	0581900e 	bge	zero,r22,1141c <___vfprintf_internal_r+0xa3c>
   10ddc:	02800404 	movi	r10,16
   10de0:	da011d17 	ldw	r8,1140(sp)
   10de4:	d8c11c17 	ldw	r3,1136(sp)
   10de8:	05c00174 	movhi	r23,5
   10dec:	bde03384 	addi	r23,r23,-32562
   10df0:	5580200e 	bge	r10,r22,10e74 <___vfprintf_internal_r+0x494>
   10df4:	dc813815 	stw	r18,1248(sp)
   10df8:	5039883a 	mov	fp,r10
   10dfc:	b825883a 	mov	r18,r23
   10e00:	050001c4 	movi	r20,7
   10e04:	b02f883a 	mov	r23,r22
   10e08:	802d883a 	mov	r22,r16
   10e0c:	dc012917 	ldw	r16,1188(sp)
   10e10:	00000306 	br	10e20 <___vfprintf_internal_r+0x440>
   10e14:	bdfffc04 	addi	r23,r23,-16
   10e18:	4a400204 	addi	r9,r9,8
   10e1c:	e5c0110e 	bge	fp,r23,10e64 <___vfprintf_internal_r+0x484>
   10e20:	4c800015 	stw	r18,0(r9)
   10e24:	4f000115 	stw	fp,4(r9)
   10e28:	42000404 	addi	r8,r8,16
   10e2c:	18c00044 	addi	r3,r3,1
   10e30:	da011d15 	stw	r8,1140(sp)
   10e34:	d8c11c15 	stw	r3,1136(sp)
   10e38:	a0fff60e 	bge	r20,r3,10e14 <___vfprintf_internal_r+0x434>
   10e3c:	8809883a 	mov	r4,r17
   10e40:	800b883a 	mov	r5,r16
   10e44:	d9811b04 	addi	r6,sp,1132
   10e48:	00109ac0 	call	109ac <__sprint_r>
   10e4c:	1000771e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   10e50:	bdfffc04 	addi	r23,r23,-16
   10e54:	da011d17 	ldw	r8,1140(sp)
   10e58:	d8c11c17 	ldw	r3,1136(sp)
   10e5c:	da400404 	addi	r9,sp,16
   10e60:	e5ffef16 	blt	fp,r23,10e20 <___vfprintf_internal_r+0x440>
   10e64:	b021883a 	mov	r16,r22
   10e68:	b82d883a 	mov	r22,r23
   10e6c:	902f883a 	mov	r23,r18
   10e70:	dc813817 	ldw	r18,1248(sp)
   10e74:	4dc00015 	stw	r23,0(r9)
   10e78:	4d800115 	stw	r22,4(r9)
   10e7c:	4591883a 	add	r8,r8,r22
   10e80:	18c00044 	addi	r3,r3,1
   10e84:	da011d15 	stw	r8,1140(sp)
   10e88:	d8c11c15 	stw	r3,1136(sp)
   10e8c:	008001c4 	movi	r2,7
   10e90:	10c36d16 	blt	r2,r3,11c48 <___vfprintf_internal_r+0x1268>
   10e94:	4a400204 	addi	r9,r9,8
   10e98:	00016206 	br	11424 <___vfprintf_internal_r+0xa44>
   10e9c:	84000414 	ori	r16,r16,16
   10ea0:	8080080c 	andi	r2,r16,32
   10ea4:	1000801e 	bne	r2,zero,110a8 <___vfprintf_internal_r+0x6c8>
   10ea8:	8080040c 	andi	r2,r16,16
   10eac:	1003da26 	beq	r2,zero,11e18 <___vfprintf_internal_r+0x1438>
   10eb0:	d8c12d17 	ldw	r3,1204(sp)
   10eb4:	002d883a 	mov	r22,zero
   10eb8:	1dc00017 	ldw	r23,0(r3)
   10ebc:	18c00104 	addi	r3,r3,4
   10ec0:	d8c12d15 	stw	r3,1204(sp)
   10ec4:	b805883a 	mov	r2,r23
   10ec8:	0007883a 	mov	r3,zero
   10ecc:	d8012585 	stb	zero,1174(sp)
   10ed0:	003f9a06 	br	10d3c <___vfprintf_internal_r+0x35c>
   10ed4:	84000414 	ori	r16,r16,16
   10ed8:	8080080c 	andi	r2,r16,32
   10edc:	10007b1e 	bne	r2,zero,110cc <___vfprintf_internal_r+0x6ec>
   10ee0:	8080040c 	andi	r2,r16,16
   10ee4:	1003ed26 	beq	r2,zero,11e9c <___vfprintf_internal_r+0x14bc>
   10ee8:	d9012d17 	ldw	r4,1204(sp)
   10eec:	25c00017 	ldw	r23,0(r4)
   10ef0:	21000104 	addi	r4,r4,4
   10ef4:	d9012d15 	stw	r4,1204(sp)
   10ef8:	b82dd7fa 	srai	r22,r23,31
   10efc:	b005883a 	mov	r2,r22
   10f00:	1003230e 	bge	r2,zero,11b90 <___vfprintf_internal_r+0x11b0>
   10f04:	05efc83a 	sub	r23,zero,r23
   10f08:	b804c03a 	cmpne	r2,r23,zero
   10f0c:	05adc83a 	sub	r22,zero,r22
   10f10:	b0adc83a 	sub	r22,r22,r2
   10f14:	00800b44 	movi	r2,45
   10f18:	d8812585 	stb	r2,1174(sp)
   10f1c:	00c00044 	movi	r3,1
   10f20:	bd84b03a 	or	r2,r23,r22
   10f24:	003f8506 	br	10d3c <___vfprintf_internal_r+0x35c>
   10f28:	da012e17 	ldw	r8,1208(sp)
   10f2c:	d8812d15 	stw	r2,1204(sp)
   10f30:	0211c83a 	sub	r8,zero,r8
   10f34:	da012e15 	stw	r8,1208(sp)
   10f38:	84000114 	ori	r16,r16,4
   10f3c:	ac800007 	ldb	r18,0(r21)
   10f40:	003f0506 	br	10b58 <___vfprintf_internal_r+0x178>
   10f44:	d9013017 	ldw	r4,1216(sp)
   10f48:	d9412917 	ldw	r5,1188(sp)
   10f4c:	00127fc0 	call	127fc <__swsetup_r>
   10f50:	10003d1e 	bne	r2,zero,11048 <___vfprintf_internal_r+0x668>
   10f54:	d8c12917 	ldw	r3,1188(sp)
   10f58:	1880030b 	ldhu	r2,12(r3)
   10f5c:	00c00284 	movi	r3,10
   10f60:	1100068c 	andi	r4,r2,26
   10f64:	20fec21e 	bne	r4,r3,10a70 <___vfprintf_internal_r+0x90>
   10f68:	d9012917 	ldw	r4,1188(sp)
   10f6c:	20c0038b 	ldhu	r3,14(r4)
   10f70:	193fffcc 	andi	r4,r3,65535
   10f74:	2120001c 	xori	r4,r4,32768
   10f78:	21200004 	addi	r4,r4,-32768
   10f7c:	203ebc16 	blt	r4,zero,10a70 <___vfprintf_internal_r+0x90>
   10f80:	da012917 	ldw	r8,1188(sp)
   10f84:	d9013017 	ldw	r4,1216(sp)
   10f88:	d9c12d17 	ldw	r7,1204(sp)
   10f8c:	42800717 	ldw	r10,28(r8)
   10f90:	42400917 	ldw	r9,36(r8)
   10f94:	10bfff4c 	andi	r2,r2,65533
   10f98:	02010004 	movi	r8,1024
   10f9c:	d881070d 	sth	r2,1052(sp)
   10fa0:	d9410404 	addi	r5,sp,1040
   10fa4:	d8800404 	addi	r2,sp,16
   10fa8:	800d883a 	mov	r6,r16
   10fac:	d8c1078d 	sth	r3,1054(sp)
   10fb0:	da810b15 	stw	r10,1068(sp)
   10fb4:	da410d15 	stw	r9,1076(sp)
   10fb8:	d8810415 	stw	r2,1040(sp)
   10fbc:	d8810815 	stw	r2,1056(sp)
   10fc0:	da010615 	stw	r8,1048(sp)
   10fc4:	da010915 	stw	r8,1060(sp)
   10fc8:	d8010a15 	stw	zero,1064(sp)
   10fcc:	00109e00 	call	109e0 <___vfprintf_internal_r>
   10fd0:	d8812c15 	stw	r2,1200(sp)
   10fd4:	10000416 	blt	r2,zero,10fe8 <___vfprintf_internal_r+0x608>
   10fd8:	d9013017 	ldw	r4,1216(sp)
   10fdc:	d9410404 	addi	r5,sp,1040
   10fe0:	00141940 	call	14194 <_fflush_r>
   10fe4:	1005d81e 	bne	r2,zero,12748 <___vfprintf_internal_r+0x1d68>
   10fe8:	d881070b 	ldhu	r2,1052(sp)
   10fec:	1080100c 	andi	r2,r2,64
   10ff0:	10bfffcc 	andi	r2,r2,65535
   10ff4:	10a0001c 	xori	r2,r2,32768
   10ff8:	10a00004 	addi	r2,r2,-32768
   10ffc:	10001426 	beq	r2,zero,11050 <___vfprintf_internal_r+0x670>
   11000:	d8c12917 	ldw	r3,1188(sp)
   11004:	1880030b 	ldhu	r2,12(r3)
   11008:	10801014 	ori	r2,r2,64
   1100c:	1880030d 	sth	r2,12(r3)
   11010:	00000f06 	br	11050 <___vfprintf_internal_r+0x670>
   11014:	d8811d17 	ldw	r2,1140(sp)
   11018:	10000426 	beq	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   1101c:	d9013017 	ldw	r4,1216(sp)
   11020:	d9412917 	ldw	r5,1188(sp)
   11024:	d9811b04 	addi	r6,sp,1132
   11028:	00109ac0 	call	109ac <__sprint_r>
   1102c:	d8c12917 	ldw	r3,1188(sp)
   11030:	1880030b 	ldhu	r2,12(r3)
   11034:	1080100c 	andi	r2,r2,64
   11038:	10bfffcc 	andi	r2,r2,65535
   1103c:	10a0001c 	xori	r2,r2,32768
   11040:	10a00004 	addi	r2,r2,-32768
   11044:	10000226 	beq	r2,zero,11050 <___vfprintf_internal_r+0x670>
   11048:	00bfffc4 	movi	r2,-1
   1104c:	d8812c15 	stw	r2,1200(sp)
   11050:	d8812c17 	ldw	r2,1200(sp)
   11054:	dfc14617 	ldw	ra,1304(sp)
   11058:	df014517 	ldw	fp,1300(sp)
   1105c:	ddc14417 	ldw	r23,1296(sp)
   11060:	dd814317 	ldw	r22,1292(sp)
   11064:	dd414217 	ldw	r21,1288(sp)
   11068:	dd014117 	ldw	r20,1284(sp)
   1106c:	dcc14017 	ldw	r19,1280(sp)
   11070:	dc813f17 	ldw	r18,1276(sp)
   11074:	dc413e17 	ldw	r17,1272(sp)
   11078:	dc013d17 	ldw	r16,1268(sp)
   1107c:	dec14704 	addi	sp,sp,1308
   11080:	f800283a 	ret
   11084:	d9412917 	ldw	r5,1188(sp)
   11088:	8809883a 	mov	r4,r17
   1108c:	d9811b04 	addi	r6,sp,1132
   11090:	00109ac0 	call	109ac <__sprint_r>
   11094:	103fe51e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11098:	da400404 	addi	r9,sp,16
   1109c:	003e9d06 	br	10b14 <___vfprintf_internal_r+0x134>
   110a0:	001443c0 	call	1443c <__sinit>
   110a4:	003e6606 	br	10a40 <___vfprintf_internal_r+0x60>
   110a8:	d8812d17 	ldw	r2,1204(sp)
   110ac:	0007883a 	mov	r3,zero
   110b0:	15c00017 	ldw	r23,0(r2)
   110b4:	15800117 	ldw	r22,4(r2)
   110b8:	10800204 	addi	r2,r2,8
   110bc:	d8812d15 	stw	r2,1204(sp)
   110c0:	d8012585 	stb	zero,1174(sp)
   110c4:	bd84b03a 	or	r2,r23,r22
   110c8:	003f1c06 	br	10d3c <___vfprintf_internal_r+0x35c>
   110cc:	d8c12d17 	ldw	r3,1204(sp)
   110d0:	18800117 	ldw	r2,4(r3)
   110d4:	1dc00017 	ldw	r23,0(r3)
   110d8:	18c00204 	addi	r3,r3,8
   110dc:	d8c12d15 	stw	r3,1204(sp)
   110e0:	102d883a 	mov	r22,r2
   110e4:	003f8606 	br	10f00 <___vfprintf_internal_r+0x520>
   110e8:	d8c12d17 	ldw	r3,1204(sp)
   110ec:	d9012d17 	ldw	r4,1204(sp)
   110f0:	1dc00017 	ldw	r23,0(r3)
   110f4:	1d800117 	ldw	r22,4(r3)
   110f8:	21000204 	addi	r4,r4,8
   110fc:	00c00044 	movi	r3,1
   11100:	d9012d15 	stw	r4,1204(sp)
   11104:	bd84b03a 	or	r2,r23,r22
   11108:	d8012585 	stb	zero,1174(sp)
   1110c:	003f0b06 	br	10d3c <___vfprintf_internal_r+0x35c>
   11110:	d9812585 	stb	r6,1174(sp)
   11114:	ac800007 	ldb	r18,0(r21)
   11118:	003e8f06 	br	10b58 <___vfprintf_internal_r+0x178>
   1111c:	ac800007 	ldb	r18,0(r21)
   11120:	a9000044 	addi	r4,r21,1
   11124:	92857d26 	beq	r18,r10,1271c <___vfprintf_internal_r+0x1d3c>
   11128:	90bff404 	addi	r2,r18,-48
   1112c:	0039883a 	mov	fp,zero
   11130:	28800736 	bltu	r5,r2,11150 <___vfprintf_internal_r+0x770>
   11134:	24800007 	ldb	r18,0(r4)
   11138:	e70002a4 	muli	fp,fp,10
   1113c:	21000044 	addi	r4,r4,1
   11140:	1739883a 	add	fp,r2,fp
   11144:	90bff404 	addi	r2,r18,-48
   11148:	28bffa2e 	bgeu	r5,r2,11134 <___vfprintf_internal_r+0x754>
   1114c:	e0044216 	blt	fp,zero,12258 <___vfprintf_internal_r+0x1878>
   11150:	202b883a 	mov	r21,r4
   11154:	003e8106 	br	10b5c <___vfprintf_internal_r+0x17c>
   11158:	d8812587 	ldb	r2,1174(sp)
   1115c:	1003581e 	bne	r2,zero,11ec0 <___vfprintf_internal_r+0x14e0>
   11160:	dac12585 	stb	r11,1174(sp)
   11164:	ac800007 	ldb	r18,0(r21)
   11168:	003e7b06 	br	10b58 <___vfprintf_internal_r+0x178>
   1116c:	84000054 	ori	r16,r16,1
   11170:	ac800007 	ldb	r18,0(r21)
   11174:	003e7806 	br	10b58 <___vfprintf_internal_r+0x178>
   11178:	84002014 	ori	r16,r16,128
   1117c:	ac800007 	ldb	r18,0(r21)
   11180:	003e7506 	br	10b58 <___vfprintf_internal_r+0x178>
   11184:	02000174 	movhi	r8,5
   11188:	42202704 	addi	r8,r8,-32612
   1118c:	da013615 	stw	r8,1240(sp)
   11190:	8080080c 	andi	r2,r16,32
   11194:	10009626 	beq	r2,zero,113f0 <___vfprintf_internal_r+0xa10>
   11198:	d8812d17 	ldw	r2,1204(sp)
   1119c:	15c00017 	ldw	r23,0(r2)
   111a0:	15800117 	ldw	r22,4(r2)
   111a4:	10800204 	addi	r2,r2,8
   111a8:	d8812d15 	stw	r2,1204(sp)
   111ac:	8080004c 	andi	r2,r16,1
   111b0:	1002ae26 	beq	r2,zero,11c6c <___vfprintf_internal_r+0x128c>
   111b4:	bd84b03a 	or	r2,r23,r22
   111b8:	10032a26 	beq	r2,zero,11e64 <___vfprintf_internal_r+0x1484>
   111bc:	00c00c04 	movi	r3,48
   111c0:	d8c12505 	stb	r3,1172(sp)
   111c4:	dc812545 	stb	r18,1173(sp)
   111c8:	84000094 	ori	r16,r16,2
   111cc:	00c00084 	movi	r3,2
   111d0:	d8012585 	stb	zero,1174(sp)
   111d4:	003ed906 	br	10d3c <___vfprintf_internal_r+0x35c>
   111d8:	84001014 	ori	r16,r16,64
   111dc:	ac800007 	ldb	r18,0(r21)
   111e0:	003e5d06 	br	10b58 <___vfprintf_internal_r+0x178>
   111e4:	ac800007 	ldb	r18,0(r21)
   111e8:	a805883a 	mov	r2,r21
   111ec:	91c43226 	beq	r18,r7,122b8 <___vfprintf_internal_r+0x18d8>
   111f0:	84000414 	ori	r16,r16,16
   111f4:	003e5806 	br	10b58 <___vfprintf_internal_r+0x178>
   111f8:	d8c12d17 	ldw	r3,1204(sp)
   111fc:	02000044 	movi	r8,1
   11200:	da012815 	stw	r8,1184(sp)
   11204:	18800017 	ldw	r2,0(r3)
   11208:	18c00104 	addi	r3,r3,4
   1120c:	d8012585 	stb	zero,1174(sp)
   11210:	d8810405 	stb	r2,1040(sp)
   11214:	d8c12d15 	stw	r3,1204(sp)
   11218:	da012b15 	stw	r8,1196(sp)
   1121c:	dcc10404 	addi	r19,sp,1040
   11220:	d8013115 	stw	zero,1220(sp)
   11224:	003ee006 	br	10da8 <___vfprintf_internal_r+0x3c8>
   11228:	8080080c 	andi	r2,r16,32
   1122c:	10031026 	beq	r2,zero,11e70 <___vfprintf_internal_r+0x1490>
   11230:	d9012d17 	ldw	r4,1204(sp)
   11234:	da012c17 	ldw	r8,1200(sp)
   11238:	20800017 	ldw	r2,0(r4)
   1123c:	4007d7fa 	srai	r3,r8,31
   11240:	21000104 	addi	r4,r4,4
   11244:	d9012d15 	stw	r4,1204(sp)
   11248:	12000015 	stw	r8,0(r2)
   1124c:	10c00115 	stw	r3,4(r2)
   11250:	003e1906 	br	10ab8 <___vfprintf_internal_r+0xd8>
   11254:	da012d17 	ldw	r8,1204(sp)
   11258:	d9012d17 	ldw	r4,1204(sp)
   1125c:	42000017 	ldw	r8,0(r8)
   11260:	20800104 	addi	r2,r4,4
   11264:	da012e15 	stw	r8,1208(sp)
   11268:	403f2f16 	blt	r8,zero,10f28 <___vfprintf_internal_r+0x548>
   1126c:	d8812d15 	stw	r2,1204(sp)
   11270:	ac800007 	ldb	r18,0(r21)
   11274:	003e3806 	br	10b58 <___vfprintf_internal_r+0x178>
   11278:	0009883a 	mov	r4,zero
   1127c:	90bff404 	addi	r2,r18,-48
   11280:	ac800007 	ldb	r18,0(r21)
   11284:	210002a4 	muli	r4,r4,10
   11288:	ad400044 	addi	r21,r21,1
   1128c:	2089883a 	add	r4,r4,r2
   11290:	90bff404 	addi	r2,r18,-48
   11294:	28bffa2e 	bgeu	r5,r2,11280 <___vfprintf_internal_r+0x8a0>
   11298:	d9012e15 	stw	r4,1208(sp)
   1129c:	003e2f06 	br	10b5c <___vfprintf_internal_r+0x17c>
   112a0:	8080020c 	andi	r2,r16,8
   112a4:	1002d426 	beq	r2,zero,11df8 <___vfprintf_internal_r+0x1418>
   112a8:	d8c12d17 	ldw	r3,1204(sp)
   112ac:	1d800017 	ldw	r22,0(r3)
   112b0:	1d000117 	ldw	r20,4(r3)
   112b4:	18c00204 	addi	r3,r3,8
   112b8:	d8c12d15 	stw	r3,1204(sp)
   112bc:	dd813315 	stw	r22,1228(sp)
   112c0:	dd013415 	stw	r20,1232(sp)
   112c4:	b009883a 	mov	r4,r22
   112c8:	a00b883a 	mov	r5,r20
   112cc:	da413c15 	stw	r9,1264(sp)
   112d0:	00174740 	call	17474 <__isinfd>
   112d4:	da413c17 	ldw	r9,1264(sp)
   112d8:	b009883a 	mov	r4,r22
   112dc:	a00b883a 	mov	r5,r20
   112e0:	10035726 	beq	r2,zero,12040 <___vfprintf_internal_r+0x1660>
   112e4:	000d883a 	mov	r6,zero
   112e8:	000f883a 	mov	r7,zero
   112ec:	00191140 	call	19114 <__ltdf2>
   112f0:	da413c17 	ldw	r9,1264(sp)
   112f4:	10041b16 	blt	r2,zero,12364 <___vfprintf_internal_r+0x1984>
   112f8:	d8812583 	ldbu	r2,1174(sp)
   112fc:	00c011c4 	movi	r3,71
   11300:	1c830b16 	blt	r3,r18,11f30 <___vfprintf_internal_r+0x1550>
   11304:	04c00174 	movhi	r19,5
   11308:	9ce02304 	addi	r19,r19,-32628
   1130c:	020000c4 	movi	r8,3
   11310:	00ffdfc4 	movi	r3,-129
   11314:	da012815 	stw	r8,1184(sp)
   11318:	80e0703a 	and	r16,r16,r3
   1131c:	da012b15 	stw	r8,1196(sp)
   11320:	d8013115 	stw	zero,1220(sp)
   11324:	003e9906 	br	10d8c <___vfprintf_internal_r+0x3ac>
   11328:	d8812d17 	ldw	r2,1204(sp)
   1132c:	d8c12d17 	ldw	r3,1204(sp)
   11330:	02000174 	movhi	r8,5
   11334:	42202c04 	addi	r8,r8,-32592
   11338:	15c00017 	ldw	r23,0(r2)
   1133c:	00800c04 	movi	r2,48
   11340:	18c00104 	addi	r3,r3,4
   11344:	d8812505 	stb	r2,1172(sp)
   11348:	00801e04 	movi	r2,120
   1134c:	d8812545 	stb	r2,1173(sp)
   11350:	d8c12d15 	stw	r3,1204(sp)
   11354:	002d883a 	mov	r22,zero
   11358:	84000094 	ori	r16,r16,2
   1135c:	da013615 	stw	r8,1240(sp)
   11360:	00c00084 	movi	r3,2
   11364:	04801e04 	movi	r18,120
   11368:	b805883a 	mov	r2,r23
   1136c:	d8012585 	stb	zero,1174(sp)
   11370:	003e7206 	br	10d3c <___vfprintf_internal_r+0x35c>
   11374:	84000814 	ori	r16,r16,32
   11378:	ac800007 	ldb	r18,0(r21)
   1137c:	003df606 	br	10b58 <___vfprintf_internal_r+0x178>
   11380:	d8812d17 	ldw	r2,1204(sp)
   11384:	d8012585 	stb	zero,1174(sp)
   11388:	14c00017 	ldw	r19,0(r2)
   1138c:	15c00104 	addi	r23,r2,4
   11390:	98040126 	beq	r19,zero,12398 <___vfprintf_internal_r+0x19b8>
   11394:	9809883a 	mov	r4,r19
   11398:	e003dd16 	blt	fp,zero,12310 <___vfprintf_internal_r+0x1930>
   1139c:	000b883a 	mov	r5,zero
   113a0:	e00d883a 	mov	r6,fp
   113a4:	da413c15 	stw	r9,1264(sp)
   113a8:	0015adc0 	call	15adc <memchr>
   113ac:	da413c17 	ldw	r9,1264(sp)
   113b0:	10042e26 	beq	r2,zero,1246c <___vfprintf_internal_r+0x1a8c>
   113b4:	14c5c83a 	sub	r2,r2,r19
   113b8:	d8812b15 	stw	r2,1196(sp)
   113bc:	e083790e 	bge	fp,r2,121a4 <___vfprintf_internal_r+0x17c4>
   113c0:	df012815 	stw	fp,1184(sp)
   113c4:	e0049516 	blt	fp,zero,1261c <___vfprintf_internal_r+0x1c3c>
   113c8:	d8812583 	ldbu	r2,1174(sp)
   113cc:	df012b15 	stw	fp,1196(sp)
   113d0:	ddc12d15 	stw	r23,1204(sp)
   113d4:	d8013115 	stw	zero,1220(sp)
   113d8:	003e6c06 	br	10d8c <___vfprintf_internal_r+0x3ac>
   113dc:	02000174 	movhi	r8,5
   113e0:	42202c04 	addi	r8,r8,-32592
   113e4:	da013615 	stw	r8,1240(sp)
   113e8:	8080080c 	andi	r2,r16,32
   113ec:	103f6a1e 	bne	r2,zero,11198 <___vfprintf_internal_r+0x7b8>
   113f0:	8080040c 	andi	r2,r16,16
   113f4:	10029326 	beq	r2,zero,11e44 <___vfprintf_internal_r+0x1464>
   113f8:	d8c12d17 	ldw	r3,1204(sp)
   113fc:	002d883a 	mov	r22,zero
   11400:	1dc00017 	ldw	r23,0(r3)
   11404:	18c00104 	addi	r3,r3,4
   11408:	d8c12d15 	stw	r3,1204(sp)
   1140c:	003f6706 	br	111ac <___vfprintf_internal_r+0x7cc>
   11410:	84000214 	ori	r16,r16,8
   11414:	ac800007 	ldb	r18,0(r21)
   11418:	003dcf06 	br	10b58 <___vfprintf_internal_r+0x178>
   1141c:	da011d17 	ldw	r8,1140(sp)
   11420:	d8c11c17 	ldw	r3,1136(sp)
   11424:	d8812587 	ldb	r2,1174(sp)
   11428:	10000b26 	beq	r2,zero,11458 <___vfprintf_internal_r+0xa78>
   1142c:	d8812584 	addi	r2,sp,1174
   11430:	48800015 	stw	r2,0(r9)
   11434:	00800044 	movi	r2,1
   11438:	48800115 	stw	r2,4(r9)
   1143c:	4091883a 	add	r8,r8,r2
   11440:	1887883a 	add	r3,r3,r2
   11444:	da011d15 	stw	r8,1140(sp)
   11448:	d8c11c15 	stw	r3,1136(sp)
   1144c:	008001c4 	movi	r2,7
   11450:	10c18516 	blt	r2,r3,11a68 <___vfprintf_internal_r+0x1088>
   11454:	4a400204 	addi	r9,r9,8
   11458:	d9012a17 	ldw	r4,1192(sp)
   1145c:	20000b26 	beq	r4,zero,1148c <___vfprintf_internal_r+0xaac>
   11460:	d8812504 	addi	r2,sp,1172
   11464:	48800015 	stw	r2,0(r9)
   11468:	00800084 	movi	r2,2
   1146c:	48800115 	stw	r2,4(r9)
   11470:	4091883a 	add	r8,r8,r2
   11474:	18c00044 	addi	r3,r3,1
   11478:	da011d15 	stw	r8,1140(sp)
   1147c:	d8c11c15 	stw	r3,1136(sp)
   11480:	008001c4 	movi	r2,7
   11484:	10c18116 	blt	r2,r3,11a8c <___vfprintf_internal_r+0x10ac>
   11488:	4a400204 	addi	r9,r9,8
   1148c:	d9012f17 	ldw	r4,1212(sp)
   11490:	00802004 	movi	r2,128
   11494:	2080fc26 	beq	r4,r2,11888 <___vfprintf_internal_r+0xea8>
   11498:	d8813117 	ldw	r2,1220(sp)
   1149c:	d9012b17 	ldw	r4,1196(sp)
   114a0:	112fc83a 	sub	r23,r2,r4
   114a4:	05c02a0e 	bge	zero,r23,11550 <___vfprintf_internal_r+0xb70>
   114a8:	07000404 	movi	fp,16
   114ac:	05000174 	movhi	r20,5
   114b0:	a5203784 	addi	r20,r20,-32546
   114b4:	e5c01d0e 	bge	fp,r23,1152c <___vfprintf_internal_r+0xb4c>
   114b8:	dc812a15 	stw	r18,1192(sp)
   114bc:	058001c4 	movi	r22,7
   114c0:	a025883a 	mov	r18,r20
   114c4:	8029883a 	mov	r20,r16
   114c8:	dc012917 	ldw	r16,1188(sp)
   114cc:	00000306 	br	114dc <___vfprintf_internal_r+0xafc>
   114d0:	bdfffc04 	addi	r23,r23,-16
   114d4:	4a400204 	addi	r9,r9,8
   114d8:	e5c0110e 	bge	fp,r23,11520 <___vfprintf_internal_r+0xb40>
   114dc:	4c800015 	stw	r18,0(r9)
   114e0:	4f000115 	stw	fp,4(r9)
   114e4:	42000404 	addi	r8,r8,16
   114e8:	18c00044 	addi	r3,r3,1
   114ec:	da011d15 	stw	r8,1140(sp)
   114f0:	d8c11c15 	stw	r3,1136(sp)
   114f4:	b0fff60e 	bge	r22,r3,114d0 <___vfprintf_internal_r+0xaf0>
   114f8:	8809883a 	mov	r4,r17
   114fc:	800b883a 	mov	r5,r16
   11500:	d9811b04 	addi	r6,sp,1132
   11504:	00109ac0 	call	109ac <__sprint_r>
   11508:	103ec81e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   1150c:	bdfffc04 	addi	r23,r23,-16
   11510:	da011d17 	ldw	r8,1140(sp)
   11514:	d8c11c17 	ldw	r3,1136(sp)
   11518:	da400404 	addi	r9,sp,16
   1151c:	e5ffef16 	blt	fp,r23,114dc <___vfprintf_internal_r+0xafc>
   11520:	a021883a 	mov	r16,r20
   11524:	9029883a 	mov	r20,r18
   11528:	dc812a17 	ldw	r18,1192(sp)
   1152c:	4d000015 	stw	r20,0(r9)
   11530:	4dc00115 	stw	r23,4(r9)
   11534:	45d1883a 	add	r8,r8,r23
   11538:	18c00044 	addi	r3,r3,1
   1153c:	da011d15 	stw	r8,1140(sp)
   11540:	d8c11c15 	stw	r3,1136(sp)
   11544:	008001c4 	movi	r2,7
   11548:	10c13e16 	blt	r2,r3,11a44 <___vfprintf_internal_r+0x1064>
   1154c:	4a400204 	addi	r9,r9,8
   11550:	8080400c 	andi	r2,r16,256
   11554:	1000831e 	bne	r2,zero,11764 <___vfprintf_internal_r+0xd84>
   11558:	d8812b17 	ldw	r2,1196(sp)
   1155c:	4cc00015 	stw	r19,0(r9)
   11560:	48800115 	stw	r2,4(r9)
   11564:	4091883a 	add	r8,r8,r2
   11568:	18c00044 	addi	r3,r3,1
   1156c:	da011d15 	stw	r8,1140(sp)
   11570:	d8c11c15 	stw	r3,1136(sp)
   11574:	008001c4 	movi	r2,7
   11578:	10c05316 	blt	r2,r3,116c8 <___vfprintf_internal_r+0xce8>
   1157c:	4a400204 	addi	r9,r9,8
   11580:	8400010c 	andi	r16,r16,4
   11584:	80002e26 	beq	r16,zero,11640 <___vfprintf_internal_r+0xc60>
   11588:	d8812e17 	ldw	r2,1208(sp)
   1158c:	d8c12817 	ldw	r3,1184(sp)
   11590:	10e1c83a 	sub	r16,r2,r3
   11594:	04002a0e 	bge	zero,r16,11640 <___vfprintf_internal_r+0xc60>
   11598:	04800404 	movi	r18,16
   1159c:	d8c11c17 	ldw	r3,1136(sp)
   115a0:	05c00174 	movhi	r23,5
   115a4:	bde03384 	addi	r23,r23,-32562
   115a8:	9400170e 	bge	r18,r16,11608 <___vfprintf_internal_r+0xc28>
   115ac:	04c001c4 	movi	r19,7
   115b0:	dd012917 	ldw	r20,1188(sp)
   115b4:	00000306 	br	115c4 <___vfprintf_internal_r+0xbe4>
   115b8:	843ffc04 	addi	r16,r16,-16
   115bc:	4a400204 	addi	r9,r9,8
   115c0:	9400110e 	bge	r18,r16,11608 <___vfprintf_internal_r+0xc28>
   115c4:	4dc00015 	stw	r23,0(r9)
   115c8:	4c800115 	stw	r18,4(r9)
   115cc:	42000404 	addi	r8,r8,16
   115d0:	18c00044 	addi	r3,r3,1
   115d4:	da011d15 	stw	r8,1140(sp)
   115d8:	d8c11c15 	stw	r3,1136(sp)
   115dc:	98fff60e 	bge	r19,r3,115b8 <___vfprintf_internal_r+0xbd8>
   115e0:	8809883a 	mov	r4,r17
   115e4:	a00b883a 	mov	r5,r20
   115e8:	d9811b04 	addi	r6,sp,1132
   115ec:	00109ac0 	call	109ac <__sprint_r>
   115f0:	103e8e1e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   115f4:	843ffc04 	addi	r16,r16,-16
   115f8:	da011d17 	ldw	r8,1140(sp)
   115fc:	d8c11c17 	ldw	r3,1136(sp)
   11600:	da400404 	addi	r9,sp,16
   11604:	943fef16 	blt	r18,r16,115c4 <___vfprintf_internal_r+0xbe4>
   11608:	4dc00015 	stw	r23,0(r9)
   1160c:	4c000115 	stw	r16,4(r9)
   11610:	8211883a 	add	r8,r16,r8
   11614:	18c00044 	addi	r3,r3,1
   11618:	da011d15 	stw	r8,1140(sp)
   1161c:	d8c11c15 	stw	r3,1136(sp)
   11620:	008001c4 	movi	r2,7
   11624:	10c0060e 	bge	r2,r3,11640 <___vfprintf_internal_r+0xc60>
   11628:	d9412917 	ldw	r5,1188(sp)
   1162c:	8809883a 	mov	r4,r17
   11630:	d9811b04 	addi	r6,sp,1132
   11634:	00109ac0 	call	109ac <__sprint_r>
   11638:	103e7c1e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   1163c:	da011d17 	ldw	r8,1140(sp)
   11640:	dd012817 	ldw	r20,1184(sp)
   11644:	d9012e17 	ldw	r4,1208(sp)
   11648:	a100010e 	bge	r20,r4,11650 <___vfprintf_internal_r+0xc70>
   1164c:	2029883a 	mov	r20,r4
   11650:	d8812c17 	ldw	r2,1200(sp)
   11654:	1505883a 	add	r2,r2,r20
   11658:	d8812c15 	stw	r2,1200(sp)
   1165c:	4000b91e 	bne	r8,zero,11944 <___vfprintf_internal_r+0xf64>
   11660:	d8011c15 	stw	zero,1136(sp)
   11664:	a8800007 	ldb	r2,0(r21)
   11668:	da400404 	addi	r9,sp,16
   1166c:	103d141e 	bne	r2,zero,10ac0 <___vfprintf_internal_r+0xe0>
   11670:	a825883a 	mov	r18,r21
   11674:	003d2a06 	br	10b20 <___vfprintf_internal_r+0x140>
   11678:	d9412917 	ldw	r5,1188(sp)
   1167c:	8809883a 	mov	r4,r17
   11680:	d9811b04 	addi	r6,sp,1132
   11684:	00109ac0 	call	109ac <__sprint_r>
   11688:	103e681e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   1168c:	da011d17 	ldw	r8,1140(sp)
   11690:	da400404 	addi	r9,sp,16
   11694:	8080004c 	andi	r2,r16,1
   11698:	103fb926 	beq	r2,zero,11580 <___vfprintf_internal_r+0xba0>
   1169c:	d8c11c17 	ldw	r3,1136(sp)
   116a0:	d9013717 	ldw	r4,1244(sp)
   116a4:	00800044 	movi	r2,1
   116a8:	48800115 	stw	r2,4(r9)
   116ac:	49000015 	stw	r4,0(r9)
   116b0:	4091883a 	add	r8,r8,r2
   116b4:	1887883a 	add	r3,r3,r2
   116b8:	da011d15 	stw	r8,1140(sp)
   116bc:	d8c11c15 	stw	r3,1136(sp)
   116c0:	008001c4 	movi	r2,7
   116c4:	10ffad0e 	bge	r2,r3,1157c <___vfprintf_internal_r+0xb9c>
   116c8:	d9412917 	ldw	r5,1188(sp)
   116cc:	8809883a 	mov	r4,r17
   116d0:	d9811b04 	addi	r6,sp,1132
   116d4:	00109ac0 	call	109ac <__sprint_r>
   116d8:	103e541e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   116dc:	da400404 	addi	r9,sp,16
   116e0:	da011d17 	ldw	r8,1140(sp)
   116e4:	003fa606 	br	11580 <___vfprintf_internal_r+0xba0>
   116e8:	18803fcc 	andi	r2,r3,255
   116ec:	00c00044 	movi	r3,1
   116f0:	10c10126 	beq	r2,r3,11af8 <___vfprintf_internal_r+0x1118>
   116f4:	00c00084 	movi	r3,2
   116f8:	10c0f026 	beq	r2,r3,11abc <___vfprintf_internal_r+0x10dc>
   116fc:	d8c10dc4 	addi	r3,sp,1079
   11700:	b808d0fa 	srli	r4,r23,3
   11704:	b00a977a 	slli	r5,r22,29
   11708:	b02cd0fa 	srli	r22,r22,3
   1170c:	bdc001cc 	andi	r23,r23,7
   11710:	b8800c04 	addi	r2,r23,48
   11714:	292eb03a 	or	r23,r5,r4
   11718:	18800005 	stb	r2,0(r3)
   1171c:	bd88b03a 	or	r4,r23,r22
   11720:	1827883a 	mov	r19,r3
   11724:	18ffffc4 	addi	r3,r3,-1
   11728:	203ff51e 	bne	r4,zero,11700 <___vfprintf_internal_r+0xd20>
   1172c:	8100004c 	andi	r4,r16,1
   11730:	980b883a 	mov	r5,r19
   11734:	20000726 	beq	r4,zero,11754 <___vfprintf_internal_r+0xd74>
   11738:	10803fcc 	andi	r2,r2,255
   1173c:	1080201c 	xori	r2,r2,128
   11740:	10bfe004 	addi	r2,r2,-128
   11744:	01000c04 	movi	r4,48
   11748:	11000226 	beq	r2,r4,11754 <___vfprintf_internal_r+0xd74>
   1174c:	1827883a 	mov	r19,r3
   11750:	293fffc5 	stb	r4,-1(r5)
   11754:	d8812717 	ldw	r2,1180(sp)
   11758:	14c5c83a 	sub	r2,r2,r19
   1175c:	d8812b15 	stw	r2,1196(sp)
   11760:	003d8406 	br	10d74 <___vfprintf_internal_r+0x394>
   11764:	00801944 	movi	r2,101
   11768:	14807c0e 	bge	r2,r18,1195c <___vfprintf_internal_r+0xf7c>
   1176c:	d9013317 	ldw	r4,1228(sp)
   11770:	d9413417 	ldw	r5,1232(sp)
   11774:	000d883a 	mov	r6,zero
   11778:	000f883a 	mov	r7,zero
   1177c:	d8c13b15 	stw	r3,1260(sp)
   11780:	da013a15 	stw	r8,1256(sp)
   11784:	da413c15 	stw	r9,1264(sp)
   11788:	0018f940 	call	18f94 <__eqdf2>
   1178c:	d8c13b17 	ldw	r3,1260(sp)
   11790:	da013a17 	ldw	r8,1256(sp)
   11794:	da413c17 	ldw	r9,1264(sp)
   11798:	1001001e 	bne	r2,zero,11b9c <___vfprintf_internal_r+0x11bc>
   1179c:	00800174 	movhi	r2,5
   117a0:	10a03304 	addi	r2,r2,-32564
   117a4:	48800015 	stw	r2,0(r9)
   117a8:	00800044 	movi	r2,1
   117ac:	48800115 	stw	r2,4(r9)
   117b0:	4091883a 	add	r8,r8,r2
   117b4:	1887883a 	add	r3,r3,r2
   117b8:	da011d15 	stw	r8,1140(sp)
   117bc:	d8c11c15 	stw	r3,1136(sp)
   117c0:	008001c4 	movi	r2,7
   117c4:	10c1dd16 	blt	r2,r3,11f3c <___vfprintf_internal_r+0x155c>
   117c8:	4a400204 	addi	r9,r9,8
   117cc:	d8812417 	ldw	r2,1168(sp)
   117d0:	d8c13217 	ldw	r3,1224(sp)
   117d4:	10c00216 	blt	r2,r3,117e0 <___vfprintf_internal_r+0xe00>
   117d8:	8080004c 	andi	r2,r16,1
   117dc:	103f6826 	beq	r2,zero,11580 <___vfprintf_internal_r+0xba0>
   117e0:	d8c11c17 	ldw	r3,1136(sp)
   117e4:	d9013717 	ldw	r4,1244(sp)
   117e8:	00800044 	movi	r2,1
   117ec:	48800115 	stw	r2,4(r9)
   117f0:	49000015 	stw	r4,0(r9)
   117f4:	4091883a 	add	r8,r8,r2
   117f8:	1887883a 	add	r3,r3,r2
   117fc:	da011d15 	stw	r8,1140(sp)
   11800:	d8c11c15 	stw	r3,1136(sp)
   11804:	008001c4 	movi	r2,7
   11808:	10c2af16 	blt	r2,r3,122c8 <___vfprintf_internal_r+0x18e8>
   1180c:	4a400204 	addi	r9,r9,8
   11810:	d8813217 	ldw	r2,1224(sp)
   11814:	14bfffc4 	addi	r18,r2,-1
   11818:	04bf590e 	bge	zero,r18,11580 <___vfprintf_internal_r+0xba0>
   1181c:	04c00404 	movi	r19,16
   11820:	d8c11c17 	ldw	r3,1136(sp)
   11824:	05000174 	movhi	r20,5
   11828:	a5203784 	addi	r20,r20,-32546
   1182c:	9c81630e 	bge	r19,r18,11dbc <___vfprintf_internal_r+0x13dc>
   11830:	058001c4 	movi	r22,7
   11834:	ddc12917 	ldw	r23,1188(sp)
   11838:	00000306 	br	11848 <___vfprintf_internal_r+0xe68>
   1183c:	4a400204 	addi	r9,r9,8
   11840:	94bffc04 	addi	r18,r18,-16
   11844:	9c815d0e 	bge	r19,r18,11dbc <___vfprintf_internal_r+0x13dc>
   11848:	4d000015 	stw	r20,0(r9)
   1184c:	4cc00115 	stw	r19,4(r9)
   11850:	42000404 	addi	r8,r8,16
   11854:	18c00044 	addi	r3,r3,1
   11858:	da011d15 	stw	r8,1140(sp)
   1185c:	d8c11c15 	stw	r3,1136(sp)
   11860:	b0fff60e 	bge	r22,r3,1183c <___vfprintf_internal_r+0xe5c>
   11864:	8809883a 	mov	r4,r17
   11868:	b80b883a 	mov	r5,r23
   1186c:	d9811b04 	addi	r6,sp,1132
   11870:	00109ac0 	call	109ac <__sprint_r>
   11874:	103ded1e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11878:	da011d17 	ldw	r8,1140(sp)
   1187c:	d8c11c17 	ldw	r3,1136(sp)
   11880:	da400404 	addi	r9,sp,16
   11884:	003fee06 	br	11840 <___vfprintf_internal_r+0xe60>
   11888:	d8812e17 	ldw	r2,1208(sp)
   1188c:	d9012817 	ldw	r4,1184(sp)
   11890:	112fc83a 	sub	r23,r2,r4
   11894:	05ff000e 	bge	zero,r23,11498 <___vfprintf_internal_r+0xab8>
   11898:	07000404 	movi	fp,16
   1189c:	05000174 	movhi	r20,5
   118a0:	a5203784 	addi	r20,r20,-32546
   118a4:	e5c01d0e 	bge	fp,r23,1191c <___vfprintf_internal_r+0xf3c>
   118a8:	dc812a15 	stw	r18,1192(sp)
   118ac:	058001c4 	movi	r22,7
   118b0:	a025883a 	mov	r18,r20
   118b4:	8029883a 	mov	r20,r16
   118b8:	dc012917 	ldw	r16,1188(sp)
   118bc:	00000306 	br	118cc <___vfprintf_internal_r+0xeec>
   118c0:	bdfffc04 	addi	r23,r23,-16
   118c4:	4a400204 	addi	r9,r9,8
   118c8:	e5c0110e 	bge	fp,r23,11910 <___vfprintf_internal_r+0xf30>
   118cc:	4c800015 	stw	r18,0(r9)
   118d0:	4f000115 	stw	fp,4(r9)
   118d4:	42000404 	addi	r8,r8,16
   118d8:	18c00044 	addi	r3,r3,1
   118dc:	da011d15 	stw	r8,1140(sp)
   118e0:	d8c11c15 	stw	r3,1136(sp)
   118e4:	b0fff60e 	bge	r22,r3,118c0 <___vfprintf_internal_r+0xee0>
   118e8:	8809883a 	mov	r4,r17
   118ec:	800b883a 	mov	r5,r16
   118f0:	d9811b04 	addi	r6,sp,1132
   118f4:	00109ac0 	call	109ac <__sprint_r>
   118f8:	103dcc1e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   118fc:	bdfffc04 	addi	r23,r23,-16
   11900:	da011d17 	ldw	r8,1140(sp)
   11904:	d8c11c17 	ldw	r3,1136(sp)
   11908:	da400404 	addi	r9,sp,16
   1190c:	e5ffef16 	blt	fp,r23,118cc <___vfprintf_internal_r+0xeec>
   11910:	a021883a 	mov	r16,r20
   11914:	9029883a 	mov	r20,r18
   11918:	dc812a17 	ldw	r18,1192(sp)
   1191c:	4d000015 	stw	r20,0(r9)
   11920:	4dc00115 	stw	r23,4(r9)
   11924:	45d1883a 	add	r8,r8,r23
   11928:	18c00044 	addi	r3,r3,1
   1192c:	da011d15 	stw	r8,1140(sp)
   11930:	d8c11c15 	stw	r3,1136(sp)
   11934:	008001c4 	movi	r2,7
   11938:	10c11716 	blt	r2,r3,11d98 <___vfprintf_internal_r+0x13b8>
   1193c:	4a400204 	addi	r9,r9,8
   11940:	003ed506 	br	11498 <___vfprintf_internal_r+0xab8>
   11944:	d9412917 	ldw	r5,1188(sp)
   11948:	8809883a 	mov	r4,r17
   1194c:	d9811b04 	addi	r6,sp,1132
   11950:	00109ac0 	call	109ac <__sprint_r>
   11954:	103f4226 	beq	r2,zero,11660 <___vfprintf_internal_r+0xc80>
   11958:	003db406 	br	1102c <___vfprintf_internal_r+0x64c>
   1195c:	d9013217 	ldw	r4,1224(sp)
   11960:	00800044 	movi	r2,1
   11964:	4cc00015 	stw	r19,0(r9)
   11968:	1100e10e 	bge	r2,r4,11cf0 <___vfprintf_internal_r+0x1310>
   1196c:	00800044 	movi	r2,1
   11970:	48800115 	stw	r2,4(r9)
   11974:	4091883a 	add	r8,r8,r2
   11978:	1887883a 	add	r3,r3,r2
   1197c:	da011d15 	stw	r8,1140(sp)
   11980:	d8c11c15 	stw	r3,1136(sp)
   11984:	008001c4 	movi	r2,7
   11988:	10c0ed16 	blt	r2,r3,11d40 <___vfprintf_internal_r+0x1360>
   1198c:	4a400204 	addi	r9,r9,8
   11990:	d8813717 	ldw	r2,1244(sp)
   11994:	48800015 	stw	r2,0(r9)
   11998:	00800044 	movi	r2,1
   1199c:	48800115 	stw	r2,4(r9)
   119a0:	4091883a 	add	r8,r8,r2
   119a4:	1887883a 	add	r3,r3,r2
   119a8:	da011d15 	stw	r8,1140(sp)
   119ac:	d8c11c15 	stw	r3,1136(sp)
   119b0:	008001c4 	movi	r2,7
   119b4:	10c0eb16 	blt	r2,r3,11d64 <___vfprintf_internal_r+0x1384>
   119b8:	4c800204 	addi	r18,r9,8
   119bc:	d9013317 	ldw	r4,1228(sp)
   119c0:	d9413417 	ldw	r5,1232(sp)
   119c4:	000d883a 	mov	r6,zero
   119c8:	000f883a 	mov	r7,zero
   119cc:	d8c13b15 	stw	r3,1260(sp)
   119d0:	da013a15 	stw	r8,1256(sp)
   119d4:	0018ff00 	call	18ff0 <__nedf2>
   119d8:	d8c13b17 	ldw	r3,1260(sp)
   119dc:	da013a17 	ldw	r8,1256(sp)
   119e0:	1000a626 	beq	r2,zero,11c7c <___vfprintf_internal_r+0x129c>
   119e4:	d9013217 	ldw	r4,1224(sp)
   119e8:	9cc00044 	addi	r19,r19,1
   119ec:	94c00015 	stw	r19,0(r18)
   119f0:	20bfffc4 	addi	r2,r4,-1
   119f4:	90800115 	stw	r2,4(r18)
   119f8:	4091883a 	add	r8,r8,r2
   119fc:	18c00044 	addi	r3,r3,1
   11a00:	da011d15 	stw	r8,1140(sp)
   11a04:	d8c11c15 	stw	r3,1136(sp)
   11a08:	008001c4 	movi	r2,7
   11a0c:	10c0c316 	blt	r2,r3,11d1c <___vfprintf_internal_r+0x133c>
   11a10:	94800204 	addi	r18,r18,8
   11a14:	d9013517 	ldw	r4,1236(sp)
   11a18:	d8811fc4 	addi	r2,sp,1151
   11a1c:	90800015 	stw	r2,0(r18)
   11a20:	91000115 	stw	r4,4(r18)
   11a24:	4111883a 	add	r8,r8,r4
   11a28:	18c00044 	addi	r3,r3,1
   11a2c:	da011d15 	stw	r8,1140(sp)
   11a30:	d8c11c15 	stw	r3,1136(sp)
   11a34:	008001c4 	movi	r2,7
   11a38:	10ff2316 	blt	r2,r3,116c8 <___vfprintf_internal_r+0xce8>
   11a3c:	92400204 	addi	r9,r18,8
   11a40:	003ecf06 	br	11580 <___vfprintf_internal_r+0xba0>
   11a44:	d9412917 	ldw	r5,1188(sp)
   11a48:	8809883a 	mov	r4,r17
   11a4c:	d9811b04 	addi	r6,sp,1132
   11a50:	00109ac0 	call	109ac <__sprint_r>
   11a54:	103d751e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11a58:	da011d17 	ldw	r8,1140(sp)
   11a5c:	d8c11c17 	ldw	r3,1136(sp)
   11a60:	da400404 	addi	r9,sp,16
   11a64:	003eba06 	br	11550 <___vfprintf_internal_r+0xb70>
   11a68:	d9412917 	ldw	r5,1188(sp)
   11a6c:	8809883a 	mov	r4,r17
   11a70:	d9811b04 	addi	r6,sp,1132
   11a74:	00109ac0 	call	109ac <__sprint_r>
   11a78:	103d6c1e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11a7c:	da011d17 	ldw	r8,1140(sp)
   11a80:	d8c11c17 	ldw	r3,1136(sp)
   11a84:	da400404 	addi	r9,sp,16
   11a88:	003e7306 	br	11458 <___vfprintf_internal_r+0xa78>
   11a8c:	d9412917 	ldw	r5,1188(sp)
   11a90:	8809883a 	mov	r4,r17
   11a94:	d9811b04 	addi	r6,sp,1132
   11a98:	00109ac0 	call	109ac <__sprint_r>
   11a9c:	103d631e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11aa0:	da011d17 	ldw	r8,1140(sp)
   11aa4:	d8c11c17 	ldw	r3,1136(sp)
   11aa8:	da400404 	addi	r9,sp,16
   11aac:	003e7706 	br	1148c <___vfprintf_internal_r+0xaac>
   11ab0:	d8012b15 	stw	zero,1196(sp)
   11ab4:	dcc10e04 	addi	r19,sp,1080
   11ab8:	003cae06 	br	10d74 <___vfprintf_internal_r+0x394>
   11abc:	d9413617 	ldw	r5,1240(sp)
   11ac0:	d8810dc4 	addi	r2,sp,1079
   11ac4:	b8c003cc 	andi	r3,r23,15
   11ac8:	b008973a 	slli	r4,r22,28
   11acc:	28c7883a 	add	r3,r5,r3
   11ad0:	b82ed13a 	srli	r23,r23,4
   11ad4:	18c00003 	ldbu	r3,0(r3)
   11ad8:	b02cd13a 	srli	r22,r22,4
   11adc:	25eeb03a 	or	r23,r4,r23
   11ae0:	10c00005 	stb	r3,0(r2)
   11ae4:	bd86b03a 	or	r3,r23,r22
   11ae8:	1027883a 	mov	r19,r2
   11aec:	10bfffc4 	addi	r2,r2,-1
   11af0:	183ff41e 	bne	r3,zero,11ac4 <___vfprintf_internal_r+0x10e4>
   11af4:	003f1706 	br	11754 <___vfprintf_internal_r+0xd74>
   11af8:	b0025826 	beq	r22,zero,1245c <___vfprintf_internal_r+0x1a7c>
   11afc:	b807883a 	mov	r3,r23
   11b00:	d8810dc4 	addi	r2,sp,1079
   11b04:	882f883a 	mov	r23,r17
   11b08:	04c00244 	movi	r19,9
   11b0c:	8023883a 	mov	r17,r16
   11b10:	da412815 	stw	r9,1184(sp)
   11b14:	1821883a 	mov	r16,r3
   11b18:	8009883a 	mov	r4,r16
   11b1c:	b00b883a 	mov	r5,r22
   11b20:	01800284 	movi	r6,10
   11b24:	000f883a 	mov	r7,zero
   11b28:	1029883a 	mov	r20,r2
   11b2c:	00181680 	call	18168 <__umoddi3>
   11b30:	10800c04 	addi	r2,r2,48
   11b34:	8009883a 	mov	r4,r16
   11b38:	b00b883a 	mov	r5,r22
   11b3c:	a0800005 	stb	r2,0(r20)
   11b40:	01800284 	movi	r6,10
   11b44:	000f883a 	mov	r7,zero
   11b48:	0017ba00 	call	17ba0 <__udivdi3>
   11b4c:	1021883a 	mov	r16,r2
   11b50:	182d883a 	mov	r22,r3
   11b54:	a0bfffc4 	addi	r2,r20,-1
   11b58:	183fef1e 	bne	r3,zero,11b18 <___vfprintf_internal_r+0x1138>
   11b5c:	9c3fee36 	bltu	r19,r16,11b18 <___vfprintf_internal_r+0x1138>
   11b60:	da412817 	ldw	r9,1184(sp)
   11b64:	8005883a 	mov	r2,r16
   11b68:	8821883a 	mov	r16,r17
   11b6c:	b823883a 	mov	r17,r23
   11b70:	102f883a 	mov	r23,r2
   11b74:	d8812717 	ldw	r2,1180(sp)
   11b78:	a4ffffc4 	addi	r19,r20,-1
   11b7c:	bdc00c04 	addi	r23,r23,48
   11b80:	14c5c83a 	sub	r2,r2,r19
   11b84:	a5ffffc5 	stb	r23,-1(r20)
   11b88:	d8812b15 	stw	r2,1196(sp)
   11b8c:	003c7906 	br	10d74 <___vfprintf_internal_r+0x394>
   11b90:	00c00044 	movi	r3,1
   11b94:	bd84b03a 	or	r2,r23,r22
   11b98:	003c6806 	br	10d3c <___vfprintf_internal_r+0x35c>
   11b9c:	dc812417 	ldw	r18,1168(sp)
   11ba0:	0480ee0e 	bge	zero,r18,11f5c <___vfprintf_internal_r+0x157c>
   11ba4:	d9013217 	ldw	r4,1224(sp)
   11ba8:	4cc00015 	stw	r19,0(r9)
   11bac:	9100c616 	blt	r18,r4,11ec8 <___vfprintf_internal_r+0x14e8>
   11bb0:	49000115 	stw	r4,4(r9)
   11bb4:	4111883a 	add	r8,r8,r4
   11bb8:	18c00044 	addi	r3,r3,1
   11bbc:	da011d15 	stw	r8,1140(sp)
   11bc0:	d8c11c15 	stw	r3,1136(sp)
   11bc4:	008001c4 	movi	r2,7
   11bc8:	10c20916 	blt	r2,r3,123f0 <___vfprintf_internal_r+0x1a10>
   11bcc:	4a400204 	addi	r9,r9,8
   11bd0:	d8813217 	ldw	r2,1224(sp)
   11bd4:	90a5c83a 	sub	r18,r18,r2
   11bd8:	04beae0e 	bge	zero,r18,11694 <___vfprintf_internal_r+0xcb4>
   11bdc:	04c00404 	movi	r19,16
   11be0:	d8c11c17 	ldw	r3,1136(sp)
   11be4:	05000174 	movhi	r20,5
   11be8:	a5203784 	addi	r20,r20,-32546
   11bec:	9c81be0e 	bge	r19,r18,122e8 <___vfprintf_internal_r+0x1908>
   11bf0:	058001c4 	movi	r22,7
   11bf4:	ddc12917 	ldw	r23,1188(sp)
   11bf8:	00000306 	br	11c08 <___vfprintf_internal_r+0x1228>
   11bfc:	4a400204 	addi	r9,r9,8
   11c00:	94bffc04 	addi	r18,r18,-16
   11c04:	9c81b80e 	bge	r19,r18,122e8 <___vfprintf_internal_r+0x1908>
   11c08:	4d000015 	stw	r20,0(r9)
   11c0c:	4cc00115 	stw	r19,4(r9)
   11c10:	42000404 	addi	r8,r8,16
   11c14:	18c00044 	addi	r3,r3,1
   11c18:	da011d15 	stw	r8,1140(sp)
   11c1c:	d8c11c15 	stw	r3,1136(sp)
   11c20:	b0fff60e 	bge	r22,r3,11bfc <___vfprintf_internal_r+0x121c>
   11c24:	8809883a 	mov	r4,r17
   11c28:	b80b883a 	mov	r5,r23
   11c2c:	d9811b04 	addi	r6,sp,1132
   11c30:	00109ac0 	call	109ac <__sprint_r>
   11c34:	103cfd1e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11c38:	da011d17 	ldw	r8,1140(sp)
   11c3c:	d8c11c17 	ldw	r3,1136(sp)
   11c40:	da400404 	addi	r9,sp,16
   11c44:	003fee06 	br	11c00 <___vfprintf_internal_r+0x1220>
   11c48:	d9412917 	ldw	r5,1188(sp)
   11c4c:	8809883a 	mov	r4,r17
   11c50:	d9811b04 	addi	r6,sp,1132
   11c54:	00109ac0 	call	109ac <__sprint_r>
   11c58:	103cf41e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11c5c:	da011d17 	ldw	r8,1140(sp)
   11c60:	d8c11c17 	ldw	r3,1136(sp)
   11c64:	da400404 	addi	r9,sp,16
   11c68:	003dee06 	br	11424 <___vfprintf_internal_r+0xa44>
   11c6c:	00c00084 	movi	r3,2
   11c70:	bd84b03a 	or	r2,r23,r22
   11c74:	d8012585 	stb	zero,1174(sp)
   11c78:	003c3006 	br	10d3c <___vfprintf_internal_r+0x35c>
   11c7c:	d8813217 	ldw	r2,1224(sp)
   11c80:	14ffffc4 	addi	r19,r2,-1
   11c84:	04ff630e 	bge	zero,r19,11a14 <___vfprintf_internal_r+0x1034>
   11c88:	05800404 	movi	r22,16
   11c8c:	05000174 	movhi	r20,5
   11c90:	a5203784 	addi	r20,r20,-32546
   11c94:	b4c03c0e 	bge	r22,r19,11d88 <___vfprintf_internal_r+0x13a8>
   11c98:	05c001c4 	movi	r23,7
   11c9c:	df012917 	ldw	fp,1188(sp)
   11ca0:	00000306 	br	11cb0 <___vfprintf_internal_r+0x12d0>
   11ca4:	94800204 	addi	r18,r18,8
   11ca8:	9cfffc04 	addi	r19,r19,-16
   11cac:	b4c0360e 	bge	r22,r19,11d88 <___vfprintf_internal_r+0x13a8>
   11cb0:	95000015 	stw	r20,0(r18)
   11cb4:	95800115 	stw	r22,4(r18)
   11cb8:	42000404 	addi	r8,r8,16
   11cbc:	18c00044 	addi	r3,r3,1
   11cc0:	da011d15 	stw	r8,1140(sp)
   11cc4:	d8c11c15 	stw	r3,1136(sp)
   11cc8:	b8fff60e 	bge	r23,r3,11ca4 <___vfprintf_internal_r+0x12c4>
   11ccc:	8809883a 	mov	r4,r17
   11cd0:	e00b883a 	mov	r5,fp
   11cd4:	d9811b04 	addi	r6,sp,1132
   11cd8:	00109ac0 	call	109ac <__sprint_r>
   11cdc:	103cd31e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11ce0:	da011d17 	ldw	r8,1140(sp)
   11ce4:	d8c11c17 	ldw	r3,1136(sp)
   11ce8:	dc800404 	addi	r18,sp,16
   11cec:	003fee06 	br	11ca8 <___vfprintf_internal_r+0x12c8>
   11cf0:	8088703a 	and	r4,r16,r2
   11cf4:	203f1d1e 	bne	r4,zero,1196c <___vfprintf_internal_r+0xf8c>
   11cf8:	48800115 	stw	r2,4(r9)
   11cfc:	42000044 	addi	r8,r8,1
   11d00:	18c00044 	addi	r3,r3,1
   11d04:	da011d15 	stw	r8,1140(sp)
   11d08:	d8c11c15 	stw	r3,1136(sp)
   11d0c:	008001c4 	movi	r2,7
   11d10:	10c00216 	blt	r2,r3,11d1c <___vfprintf_internal_r+0x133c>
   11d14:	4c800204 	addi	r18,r9,8
   11d18:	003f3e06 	br	11a14 <___vfprintf_internal_r+0x1034>
   11d1c:	d9412917 	ldw	r5,1188(sp)
   11d20:	8809883a 	mov	r4,r17
   11d24:	d9811b04 	addi	r6,sp,1132
   11d28:	00109ac0 	call	109ac <__sprint_r>
   11d2c:	103cbf1e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11d30:	dc800404 	addi	r18,sp,16
   11d34:	da011d17 	ldw	r8,1140(sp)
   11d38:	d8c11c17 	ldw	r3,1136(sp)
   11d3c:	003f3506 	br	11a14 <___vfprintf_internal_r+0x1034>
   11d40:	d9412917 	ldw	r5,1188(sp)
   11d44:	8809883a 	mov	r4,r17
   11d48:	d9811b04 	addi	r6,sp,1132
   11d4c:	00109ac0 	call	109ac <__sprint_r>
   11d50:	103cb61e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11d54:	da011d17 	ldw	r8,1140(sp)
   11d58:	d8c11c17 	ldw	r3,1136(sp)
   11d5c:	da400404 	addi	r9,sp,16
   11d60:	003f0b06 	br	11990 <___vfprintf_internal_r+0xfb0>
   11d64:	d9412917 	ldw	r5,1188(sp)
   11d68:	8809883a 	mov	r4,r17
   11d6c:	d9811b04 	addi	r6,sp,1132
   11d70:	00109ac0 	call	109ac <__sprint_r>
   11d74:	103cad1e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11d78:	da011d17 	ldw	r8,1140(sp)
   11d7c:	d8c11c17 	ldw	r3,1136(sp)
   11d80:	dc800404 	addi	r18,sp,16
   11d84:	003f0d06 	br	119bc <___vfprintf_internal_r+0xfdc>
   11d88:	95000015 	stw	r20,0(r18)
   11d8c:	94c00115 	stw	r19,4(r18)
   11d90:	44d1883a 	add	r8,r8,r19
   11d94:	003f1906 	br	119fc <___vfprintf_internal_r+0x101c>
   11d98:	d9412917 	ldw	r5,1188(sp)
   11d9c:	8809883a 	mov	r4,r17
   11da0:	d9811b04 	addi	r6,sp,1132
   11da4:	00109ac0 	call	109ac <__sprint_r>
   11da8:	103ca01e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11dac:	da011d17 	ldw	r8,1140(sp)
   11db0:	d8c11c17 	ldw	r3,1136(sp)
   11db4:	da400404 	addi	r9,sp,16
   11db8:	003db706 	br	11498 <___vfprintf_internal_r+0xab8>
   11dbc:	4d000015 	stw	r20,0(r9)
   11dc0:	4c800115 	stw	r18,4(r9)
   11dc4:	4491883a 	add	r8,r8,r18
   11dc8:	003de706 	br	11568 <___vfprintf_internal_r+0xb88>
   11dcc:	8080100c 	andi	r2,r16,64
   11dd0:	10010226 	beq	r2,zero,121dc <___vfprintf_internal_r+0x17fc>
   11dd4:	d8812d17 	ldw	r2,1204(sp)
   11dd8:	002d883a 	mov	r22,zero
   11ddc:	00c00044 	movi	r3,1
   11de0:	15c0000b 	ldhu	r23,0(r2)
   11de4:	10800104 	addi	r2,r2,4
   11de8:	d8812d15 	stw	r2,1204(sp)
   11dec:	d8012585 	stb	zero,1174(sp)
   11df0:	b805883a 	mov	r2,r23
   11df4:	003bd106 	br	10d3c <___vfprintf_internal_r+0x35c>
   11df8:	d9012d17 	ldw	r4,1204(sp)
   11dfc:	25800017 	ldw	r22,0(r4)
   11e00:	25000117 	ldw	r20,4(r4)
   11e04:	21000204 	addi	r4,r4,8
   11e08:	d9012d15 	stw	r4,1204(sp)
   11e0c:	dd813315 	stw	r22,1228(sp)
   11e10:	dd013415 	stw	r20,1232(sp)
   11e14:	003d2b06 	br	112c4 <___vfprintf_internal_r+0x8e4>
   11e18:	8080100c 	andi	r2,r16,64
   11e1c:	1000fe26 	beq	r2,zero,12218 <___vfprintf_internal_r+0x1838>
   11e20:	d9012d17 	ldw	r4,1204(sp)
   11e24:	002d883a 	mov	r22,zero
   11e28:	0007883a 	mov	r3,zero
   11e2c:	25c0000b 	ldhu	r23,0(r4)
   11e30:	21000104 	addi	r4,r4,4
   11e34:	d9012d15 	stw	r4,1204(sp)
   11e38:	b805883a 	mov	r2,r23
   11e3c:	d8012585 	stb	zero,1174(sp)
   11e40:	003bbe06 	br	10d3c <___vfprintf_internal_r+0x35c>
   11e44:	8080100c 	andi	r2,r16,64
   11e48:	1000ed26 	beq	r2,zero,12200 <___vfprintf_internal_r+0x1820>
   11e4c:	d9012d17 	ldw	r4,1204(sp)
   11e50:	002d883a 	mov	r22,zero
   11e54:	25c0000b 	ldhu	r23,0(r4)
   11e58:	21000104 	addi	r4,r4,4
   11e5c:	d9012d15 	stw	r4,1204(sp)
   11e60:	003cd206 	br	111ac <___vfprintf_internal_r+0x7cc>
   11e64:	00c00084 	movi	r3,2
   11e68:	d8012585 	stb	zero,1174(sp)
   11e6c:	003bb306 	br	10d3c <___vfprintf_internal_r+0x35c>
   11e70:	8080040c 	andi	r2,r16,16
   11e74:	1000f11e 	bne	r2,zero,1223c <___vfprintf_internal_r+0x185c>
   11e78:	8400100c 	andi	r16,r16,64
   11e7c:	80015526 	beq	r16,zero,123d4 <___vfprintf_internal_r+0x19f4>
   11e80:	da012d17 	ldw	r8,1204(sp)
   11e84:	d8c12c17 	ldw	r3,1200(sp)
   11e88:	40800017 	ldw	r2,0(r8)
   11e8c:	42000104 	addi	r8,r8,4
   11e90:	da012d15 	stw	r8,1204(sp)
   11e94:	10c0000d 	sth	r3,0(r2)
   11e98:	003b0706 	br	10ab8 <___vfprintf_internal_r+0xd8>
   11e9c:	8080100c 	andi	r2,r16,64
   11ea0:	1000c726 	beq	r2,zero,121c0 <___vfprintf_internal_r+0x17e0>
   11ea4:	da012d17 	ldw	r8,1204(sp)
   11ea8:	45c0000f 	ldh	r23,0(r8)
   11eac:	42000104 	addi	r8,r8,4
   11eb0:	da012d15 	stw	r8,1204(sp)
   11eb4:	b82dd7fa 	srai	r22,r23,31
   11eb8:	b005883a 	mov	r2,r22
   11ebc:	003c1006 	br	10f00 <___vfprintf_internal_r+0x520>
   11ec0:	ac800007 	ldb	r18,0(r21)
   11ec4:	003b2406 	br	10b58 <___vfprintf_internal_r+0x178>
   11ec8:	4c800115 	stw	r18,4(r9)
   11ecc:	9211883a 	add	r8,r18,r8
   11ed0:	18c00044 	addi	r3,r3,1
   11ed4:	da011d15 	stw	r8,1140(sp)
   11ed8:	d8c11c15 	stw	r3,1136(sp)
   11edc:	008001c4 	movi	r2,7
   11ee0:	10c15416 	blt	r2,r3,12434 <___vfprintf_internal_r+0x1a54>
   11ee4:	4a400204 	addi	r9,r9,8
   11ee8:	d8813717 	ldw	r2,1244(sp)
   11eec:	9ca7883a 	add	r19,r19,r18
   11ef0:	48800015 	stw	r2,0(r9)
   11ef4:	00800044 	movi	r2,1
   11ef8:	48800115 	stw	r2,4(r9)
   11efc:	4091883a 	add	r8,r8,r2
   11f00:	1887883a 	add	r3,r3,r2
   11f04:	da011d15 	stw	r8,1140(sp)
   11f08:	d8c11c15 	stw	r3,1136(sp)
   11f0c:	008001c4 	movi	r2,7
   11f10:	10c14016 	blt	r2,r3,12414 <___vfprintf_internal_r+0x1a34>
   11f14:	4a400204 	addi	r9,r9,8
   11f18:	d9013217 	ldw	r4,1224(sp)
   11f1c:	da011d17 	ldw	r8,1140(sp)
   11f20:	d8c11c17 	ldw	r3,1136(sp)
   11f24:	24a5c83a 	sub	r18,r4,r18
   11f28:	4cc00015 	stw	r19,0(r9)
   11f2c:	003fa406 	br	11dc0 <___vfprintf_internal_r+0x13e0>
   11f30:	04c00174 	movhi	r19,5
   11f34:	9ce02404 	addi	r19,r19,-32624
   11f38:	003cf406 	br	1130c <___vfprintf_internal_r+0x92c>
   11f3c:	d9412917 	ldw	r5,1188(sp)
   11f40:	8809883a 	mov	r4,r17
   11f44:	d9811b04 	addi	r6,sp,1132
   11f48:	00109ac0 	call	109ac <__sprint_r>
   11f4c:	103c371e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   11f50:	da011d17 	ldw	r8,1140(sp)
   11f54:	da400404 	addi	r9,sp,16
   11f58:	003e1c06 	br	117cc <___vfprintf_internal_r+0xdec>
   11f5c:	00800174 	movhi	r2,5
   11f60:	10a03304 	addi	r2,r2,-32564
   11f64:	48800015 	stw	r2,0(r9)
   11f68:	00800044 	movi	r2,1
   11f6c:	48800115 	stw	r2,4(r9)
   11f70:	4091883a 	add	r8,r8,r2
   11f74:	1887883a 	add	r3,r3,r2
   11f78:	da011d15 	stw	r8,1140(sp)
   11f7c:	d8c11c15 	stw	r3,1136(sp)
   11f80:	008001c4 	movi	r2,7
   11f84:	10c0c316 	blt	r2,r3,12294 <___vfprintf_internal_r+0x18b4>
   11f88:	4a400204 	addi	r9,r9,8
   11f8c:	9000041e 	bne	r18,zero,11fa0 <___vfprintf_internal_r+0x15c0>
   11f90:	d8c13217 	ldw	r3,1224(sp)
   11f94:	1800021e 	bne	r3,zero,11fa0 <___vfprintf_internal_r+0x15c0>
   11f98:	8080004c 	andi	r2,r16,1
   11f9c:	103d7826 	beq	r2,zero,11580 <___vfprintf_internal_r+0xba0>
   11fa0:	d8c11c17 	ldw	r3,1136(sp)
   11fa4:	d9013717 	ldw	r4,1244(sp)
   11fa8:	00800044 	movi	r2,1
   11fac:	48800115 	stw	r2,4(r9)
   11fb0:	49000015 	stw	r4,0(r9)
   11fb4:	4091883a 	add	r8,r8,r2
   11fb8:	1887883a 	add	r3,r3,r2
   11fbc:	da011d15 	stw	r8,1140(sp)
   11fc0:	d8c11c15 	stw	r3,1136(sp)
   11fc4:	008001c4 	movi	r2,7
   11fc8:	10c12e16 	blt	r2,r3,12484 <___vfprintf_internal_r+0x1aa4>
   11fcc:	4a400204 	addi	r9,r9,8
   11fd0:	04a5c83a 	sub	r18,zero,r18
   11fd4:	0480de0e 	bge	zero,r18,12350 <___vfprintf_internal_r+0x1970>
   11fd8:	05800404 	movi	r22,16
   11fdc:	05000174 	movhi	r20,5
   11fe0:	a5203784 	addi	r20,r20,-32546
   11fe4:	b480e20e 	bge	r22,r18,12370 <___vfprintf_internal_r+0x1990>
   11fe8:	05c001c4 	movi	r23,7
   11fec:	df012917 	ldw	fp,1188(sp)
   11ff0:	00000306 	br	12000 <___vfprintf_internal_r+0x1620>
   11ff4:	4a400204 	addi	r9,r9,8
   11ff8:	94bffc04 	addi	r18,r18,-16
   11ffc:	b480dc0e 	bge	r22,r18,12370 <___vfprintf_internal_r+0x1990>
   12000:	4d000015 	stw	r20,0(r9)
   12004:	4d800115 	stw	r22,4(r9)
   12008:	42000404 	addi	r8,r8,16
   1200c:	18c00044 	addi	r3,r3,1
   12010:	da011d15 	stw	r8,1140(sp)
   12014:	d8c11c15 	stw	r3,1136(sp)
   12018:	b8fff60e 	bge	r23,r3,11ff4 <___vfprintf_internal_r+0x1614>
   1201c:	8809883a 	mov	r4,r17
   12020:	e00b883a 	mov	r5,fp
   12024:	d9811b04 	addi	r6,sp,1132
   12028:	00109ac0 	call	109ac <__sprint_r>
   1202c:	103bff1e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   12030:	da011d17 	ldw	r8,1140(sp)
   12034:	d8c11c17 	ldw	r3,1136(sp)
   12038:	da400404 	addi	r9,sp,16
   1203c:	003fee06 	br	11ff8 <___vfprintf_internal_r+0x1618>
   12040:	da413c15 	stw	r9,1264(sp)
   12044:	00174ac0 	call	174ac <__isnand>
   12048:	da413c17 	ldw	r9,1264(sp)
   1204c:	1000851e 	bne	r2,zero,12264 <___vfprintf_internal_r+0x1884>
   12050:	00bfffc4 	movi	r2,-1
   12054:	e0817626 	beq	fp,r2,12630 <___vfprintf_internal_r+0x1c50>
   12058:	008019c4 	movi	r2,103
   1205c:	90817126 	beq	r18,r2,12624 <___vfprintf_internal_r+0x1c44>
   12060:	008011c4 	movi	r2,71
   12064:	90816f26 	beq	r18,r2,12624 <___vfprintf_internal_r+0x1c44>
   12068:	82004014 	ori	r8,r16,256
   1206c:	da012a15 	stw	r8,1192(sp)
   12070:	a0017116 	blt	r20,zero,12638 <___vfprintf_internal_r+0x1c58>
   12074:	d8012f05 	stb	zero,1212(sp)
   12078:	00801984 	movi	r2,102
   1207c:	90811226 	beq	r18,r2,124c8 <___vfprintf_internal_r+0x1ae8>
   12080:	00801184 	movi	r2,70
   12084:	90811026 	beq	r18,r2,124c8 <___vfprintf_internal_r+0x1ae8>
   12088:	00801944 	movi	r2,101
   1208c:	90819b26 	beq	r18,r2,126fc <___vfprintf_internal_r+0x1d1c>
   12090:	00801144 	movi	r2,69
   12094:	90819926 	beq	r18,r2,126fc <___vfprintf_internal_r+0x1d1c>
   12098:	e02f883a 	mov	r23,fp
   1209c:	d8812404 	addi	r2,sp,1168
   120a0:	d8800115 	stw	r2,4(sp)
   120a4:	d8812304 	addi	r2,sp,1164
   120a8:	d8800215 	stw	r2,8(sp)
   120ac:	d8812204 	addi	r2,sp,1160
   120b0:	ddc00015 	stw	r23,0(sp)
   120b4:	d8800315 	stw	r2,12(sp)
   120b8:	8809883a 	mov	r4,r17
   120bc:	b00b883a 	mov	r5,r22
   120c0:	a00d883a 	mov	r6,r20
   120c4:	01c00084 	movi	r7,2
   120c8:	da413c15 	stw	r9,1264(sp)
   120cc:	0012b780 	call	12b78 <_dtoa_r>
   120d0:	1027883a 	mov	r19,r2
   120d4:	008019c4 	movi	r2,103
   120d8:	da413c17 	ldw	r9,1264(sp)
   120dc:	90818c1e 	bne	r18,r2,12710 <___vfprintf_internal_r+0x1d30>
   120e0:	8080004c 	andi	r2,r16,1
   120e4:	10017926 	beq	r2,zero,126cc <___vfprintf_internal_r+0x1cec>
   120e8:	00801184 	movi	r2,70
   120ec:	9dc7883a 	add	r3,r19,r23
   120f0:	90810626 	beq	r18,r2,1250c <___vfprintf_internal_r+0x1b2c>
   120f4:	b009883a 	mov	r4,r22
   120f8:	a00b883a 	mov	r5,r20
   120fc:	000d883a 	mov	r6,zero
   12100:	000f883a 	mov	r7,zero
   12104:	d8c13b15 	stw	r3,1260(sp)
   12108:	da413c15 	stw	r9,1264(sp)
   1210c:	0018f940 	call	18f94 <__eqdf2>
   12110:	d8c13b17 	ldw	r3,1260(sp)
   12114:	da413c17 	ldw	r9,1264(sp)
   12118:	10000726 	beq	r2,zero,12138 <___vfprintf_internal_r+0x1758>
   1211c:	d8812217 	ldw	r2,1160(sp)
   12120:	10c1962e 	bgeu	r2,r3,1277c <___vfprintf_internal_r+0x1d9c>
   12124:	01000c04 	movi	r4,48
   12128:	11000005 	stb	r4,0(r2)
   1212c:	10800044 	addi	r2,r2,1
   12130:	d8812215 	stw	r2,1160(sp)
   12134:	10fffc1e 	bne	r2,r3,12128 <___vfprintf_internal_r+0x1748>
   12138:	1cc7c83a 	sub	r3,r3,r19
   1213c:	d8c13215 	stw	r3,1224(sp)
   12140:	008019c4 	movi	r2,103
   12144:	90810626 	beq	r18,r2,12560 <___vfprintf_internal_r+0x1b80>
   12148:	008011c4 	movi	r2,71
   1214c:	90810426 	beq	r18,r2,12560 <___vfprintf_internal_r+0x1b80>
   12150:	00801984 	movi	r2,102
   12154:	90819a1e 	bne	r18,r2,127c0 <___vfprintf_internal_r+0x1de0>
   12158:	d8812417 	ldw	r2,1168(sp)
   1215c:	d8812b15 	stw	r2,1196(sp)
   12160:	0081880e 	bge	zero,r2,12784 <___vfprintf_internal_r+0x1da4>
   12164:	e000021e 	bne	fp,zero,12170 <___vfprintf_internal_r+0x1790>
   12168:	8400004c 	andi	r16,r16,1
   1216c:	80000426 	beq	r16,zero,12180 <___vfprintf_internal_r+0x17a0>
   12170:	d8812b17 	ldw	r2,1196(sp)
   12174:	e2000044 	addi	r8,fp,1
   12178:	1205883a 	add	r2,r2,r8
   1217c:	d8812b15 	stw	r2,1196(sp)
   12180:	d8812815 	stw	r2,1184(sp)
   12184:	10011716 	blt	r2,zero,125e4 <___vfprintf_internal_r+0x1c04>
   12188:	ddc12f07 	ldb	r23,1212(sp)
   1218c:	b800ca26 	beq	r23,zero,124b8 <___vfprintf_internal_r+0x1ad8>
   12190:	00800b44 	movi	r2,45
   12194:	d8812585 	stb	r2,1174(sp)
   12198:	dc012a17 	ldw	r16,1192(sp)
   1219c:	d8013115 	stw	zero,1220(sp)
   121a0:	003afe06 	br	10d9c <___vfprintf_internal_r+0x3bc>
   121a4:	d8812b17 	ldw	r2,1196(sp)
   121a8:	d8812815 	stw	r2,1184(sp)
   121ac:	10005e16 	blt	r2,zero,12328 <___vfprintf_internal_r+0x1948>
   121b0:	d8812583 	ldbu	r2,1174(sp)
   121b4:	ddc12d15 	stw	r23,1204(sp)
   121b8:	d8013115 	stw	zero,1220(sp)
   121bc:	003af306 	br	10d8c <___vfprintf_internal_r+0x3ac>
   121c0:	d8812d17 	ldw	r2,1204(sp)
   121c4:	15c00017 	ldw	r23,0(r2)
   121c8:	10800104 	addi	r2,r2,4
   121cc:	d8812d15 	stw	r2,1204(sp)
   121d0:	b82dd7fa 	srai	r22,r23,31
   121d4:	b005883a 	mov	r2,r22
   121d8:	003b4906 	br	10f00 <___vfprintf_internal_r+0x520>
   121dc:	d8c12d17 	ldw	r3,1204(sp)
   121e0:	002d883a 	mov	r22,zero
   121e4:	1dc00017 	ldw	r23,0(r3)
   121e8:	18c00104 	addi	r3,r3,4
   121ec:	d8c12d15 	stw	r3,1204(sp)
   121f0:	b805883a 	mov	r2,r23
   121f4:	00c00044 	movi	r3,1
   121f8:	d8012585 	stb	zero,1174(sp)
   121fc:	003acf06 	br	10d3c <___vfprintf_internal_r+0x35c>
   12200:	da012d17 	ldw	r8,1204(sp)
   12204:	002d883a 	mov	r22,zero
   12208:	45c00017 	ldw	r23,0(r8)
   1220c:	42000104 	addi	r8,r8,4
   12210:	da012d15 	stw	r8,1204(sp)
   12214:	003be506 	br	111ac <___vfprintf_internal_r+0x7cc>
   12218:	da012d17 	ldw	r8,1204(sp)
   1221c:	002d883a 	mov	r22,zero
   12220:	0007883a 	mov	r3,zero
   12224:	45c00017 	ldw	r23,0(r8)
   12228:	42000104 	addi	r8,r8,4
   1222c:	da012d15 	stw	r8,1204(sp)
   12230:	b805883a 	mov	r2,r23
   12234:	d8012585 	stb	zero,1174(sp)
   12238:	003ac006 	br	10d3c <___vfprintf_internal_r+0x35c>
   1223c:	d8c12d17 	ldw	r3,1204(sp)
   12240:	d9012c17 	ldw	r4,1200(sp)
   12244:	18800017 	ldw	r2,0(r3)
   12248:	18c00104 	addi	r3,r3,4
   1224c:	d8c12d15 	stw	r3,1204(sp)
   12250:	11000015 	stw	r4,0(r2)
   12254:	003a1806 	br	10ab8 <___vfprintf_internal_r+0xd8>
   12258:	073fffc4 	movi	fp,-1
   1225c:	202b883a 	mov	r21,r4
   12260:	003a3e06 	br	10b5c <___vfprintf_internal_r+0x17c>
   12264:	008011c4 	movi	r2,71
   12268:	14809016 	blt	r2,r18,124ac <___vfprintf_internal_r+0x1acc>
   1226c:	04c00174 	movhi	r19,5
   12270:	9ce02504 	addi	r19,r19,-32620
   12274:	00c000c4 	movi	r3,3
   12278:	00bfdfc4 	movi	r2,-129
   1227c:	80a0703a 	and	r16,r16,r2
   12280:	d8c12815 	stw	r3,1184(sp)
   12284:	d8812583 	ldbu	r2,1174(sp)
   12288:	d8c12b15 	stw	r3,1196(sp)
   1228c:	d8013115 	stw	zero,1220(sp)
   12290:	003abe06 	br	10d8c <___vfprintf_internal_r+0x3ac>
   12294:	d9412917 	ldw	r5,1188(sp)
   12298:	8809883a 	mov	r4,r17
   1229c:	d9811b04 	addi	r6,sp,1132
   122a0:	00109ac0 	call	109ac <__sprint_r>
   122a4:	103b611e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   122a8:	dc812417 	ldw	r18,1168(sp)
   122ac:	da011d17 	ldw	r8,1140(sp)
   122b0:	da400404 	addi	r9,sp,16
   122b4:	003f3506 	br	11f8c <___vfprintf_internal_r+0x15ac>
   122b8:	ad400044 	addi	r21,r21,1
   122bc:	84000814 	ori	r16,r16,32
   122c0:	14800047 	ldb	r18,1(r2)
   122c4:	003a2406 	br	10b58 <___vfprintf_internal_r+0x178>
   122c8:	d9412917 	ldw	r5,1188(sp)
   122cc:	8809883a 	mov	r4,r17
   122d0:	d9811b04 	addi	r6,sp,1132
   122d4:	00109ac0 	call	109ac <__sprint_r>
   122d8:	103b541e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   122dc:	da011d17 	ldw	r8,1140(sp)
   122e0:	da400404 	addi	r9,sp,16
   122e4:	003d4a06 	br	11810 <___vfprintf_internal_r+0xe30>
   122e8:	4d000015 	stw	r20,0(r9)
   122ec:	4c800115 	stw	r18,4(r9)
   122f0:	4491883a 	add	r8,r8,r18
   122f4:	18c00044 	addi	r3,r3,1
   122f8:	da011d15 	stw	r8,1140(sp)
   122fc:	d8c11c15 	stw	r3,1136(sp)
   12300:	008001c4 	movi	r2,7
   12304:	10fcdc16 	blt	r2,r3,11678 <___vfprintf_internal_r+0xc98>
   12308:	4a400204 	addi	r9,r9,8
   1230c:	003ce106 	br	11694 <___vfprintf_internal_r+0xcb4>
   12310:	da413c15 	stw	r9,1264(sp)
   12314:	00109200 	call	10920 <strlen>
   12318:	d8812b15 	stw	r2,1196(sp)
   1231c:	d8812815 	stw	r2,1184(sp)
   12320:	da413c17 	ldw	r9,1264(sp)
   12324:	103fa20e 	bge	r2,zero,121b0 <___vfprintf_internal_r+0x17d0>
   12328:	d8012815 	stw	zero,1184(sp)
   1232c:	003fa006 	br	121b0 <___vfprintf_internal_r+0x17d0>
   12330:	d9412917 	ldw	r5,1188(sp)
   12334:	8809883a 	mov	r4,r17
   12338:	d9811b04 	addi	r6,sp,1132
   1233c:	00109ac0 	call	109ac <__sprint_r>
   12340:	103b3a1e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   12344:	da011d17 	ldw	r8,1140(sp)
   12348:	d8c11c17 	ldw	r3,1136(sp)
   1234c:	da400404 	addi	r9,sp,16
   12350:	d8813217 	ldw	r2,1224(sp)
   12354:	4cc00015 	stw	r19,0(r9)
   12358:	48800115 	stw	r2,4(r9)
   1235c:	4091883a 	add	r8,r8,r2
   12360:	003c8106 	br	11568 <___vfprintf_internal_r+0xb88>
   12364:	00800b44 	movi	r2,45
   12368:	d8812585 	stb	r2,1174(sp)
   1236c:	003be306 	br	112fc <___vfprintf_internal_r+0x91c>
   12370:	4d000015 	stw	r20,0(r9)
   12374:	4c800115 	stw	r18,4(r9)
   12378:	4491883a 	add	r8,r8,r18
   1237c:	18c00044 	addi	r3,r3,1
   12380:	da011d15 	stw	r8,1140(sp)
   12384:	d8c11c15 	stw	r3,1136(sp)
   12388:	008001c4 	movi	r2,7
   1238c:	10ffe816 	blt	r2,r3,12330 <___vfprintf_internal_r+0x1950>
   12390:	4a400204 	addi	r9,r9,8
   12394:	003fee06 	br	12350 <___vfprintf_internal_r+0x1970>
   12398:	df012b15 	stw	fp,1196(sp)
   1239c:	00800184 	movi	r2,6
   123a0:	1700072e 	bgeu	r2,fp,123c0 <___vfprintf_internal_r+0x19e0>
   123a4:	d8812b15 	stw	r2,1196(sp)
   123a8:	d8812815 	stw	r2,1184(sp)
   123ac:	ddc12d15 	stw	r23,1204(sp)
   123b0:	04c00174 	movhi	r19,5
   123b4:	9ce03104 	addi	r19,r19,-32572
   123b8:	d8013115 	stw	zero,1220(sp)
   123bc:	003a7a06 	br	10da8 <___vfprintf_internal_r+0x3c8>
   123c0:	d8812b17 	ldw	r2,1196(sp)
   123c4:	d8812815 	stw	r2,1184(sp)
   123c8:	103ff80e 	bge	r2,zero,123ac <___vfprintf_internal_r+0x19cc>
   123cc:	d8012815 	stw	zero,1184(sp)
   123d0:	003ff606 	br	123ac <___vfprintf_internal_r+0x19cc>
   123d4:	d9012d17 	ldw	r4,1204(sp)
   123d8:	da012c17 	ldw	r8,1200(sp)
   123dc:	20800017 	ldw	r2,0(r4)
   123e0:	21000104 	addi	r4,r4,4
   123e4:	d9012d15 	stw	r4,1204(sp)
   123e8:	12000015 	stw	r8,0(r2)
   123ec:	0039b206 	br	10ab8 <___vfprintf_internal_r+0xd8>
   123f0:	d9412917 	ldw	r5,1188(sp)
   123f4:	8809883a 	mov	r4,r17
   123f8:	d9811b04 	addi	r6,sp,1132
   123fc:	00109ac0 	call	109ac <__sprint_r>
   12400:	103b0a1e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   12404:	dc812417 	ldw	r18,1168(sp)
   12408:	da011d17 	ldw	r8,1140(sp)
   1240c:	da400404 	addi	r9,sp,16
   12410:	003def06 	br	11bd0 <___vfprintf_internal_r+0x11f0>
   12414:	d9412917 	ldw	r5,1188(sp)
   12418:	8809883a 	mov	r4,r17
   1241c:	d9811b04 	addi	r6,sp,1132
   12420:	00109ac0 	call	109ac <__sprint_r>
   12424:	103b011e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   12428:	dc812417 	ldw	r18,1168(sp)
   1242c:	da400404 	addi	r9,sp,16
   12430:	003eb906 	br	11f18 <___vfprintf_internal_r+0x1538>
   12434:	d9412917 	ldw	r5,1188(sp)
   12438:	8809883a 	mov	r4,r17
   1243c:	d9811b04 	addi	r6,sp,1132
   12440:	00109ac0 	call	109ac <__sprint_r>
   12444:	103af91e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   12448:	dc812417 	ldw	r18,1168(sp)
   1244c:	da011d17 	ldw	r8,1140(sp)
   12450:	d8c11c17 	ldw	r3,1136(sp)
   12454:	da400404 	addi	r9,sp,16
   12458:	003ea306 	br	11ee8 <___vfprintf_internal_r+0x1508>
   1245c:	00800244 	movi	r2,9
   12460:	15fda636 	bltu	r2,r23,11afc <___vfprintf_internal_r+0x111c>
   12464:	dd010e04 	addi	r20,sp,1080
   12468:	003dc206 	br	11b74 <___vfprintf_internal_r+0x1194>
   1246c:	df012815 	stw	fp,1184(sp)
   12470:	d8812583 	ldbu	r2,1174(sp)
   12474:	df012b15 	stw	fp,1196(sp)
   12478:	ddc12d15 	stw	r23,1204(sp)
   1247c:	d8013115 	stw	zero,1220(sp)
   12480:	003a4206 	br	10d8c <___vfprintf_internal_r+0x3ac>
   12484:	d9412917 	ldw	r5,1188(sp)
   12488:	8809883a 	mov	r4,r17
   1248c:	d9811b04 	addi	r6,sp,1132
   12490:	00109ac0 	call	109ac <__sprint_r>
   12494:	103ae51e 	bne	r2,zero,1102c <___vfprintf_internal_r+0x64c>
   12498:	dc812417 	ldw	r18,1168(sp)
   1249c:	da011d17 	ldw	r8,1140(sp)
   124a0:	d8c11c17 	ldw	r3,1136(sp)
   124a4:	da400404 	addi	r9,sp,16
   124a8:	003ec906 	br	11fd0 <___vfprintf_internal_r+0x15f0>
   124ac:	04c00174 	movhi	r19,5
   124b0:	9ce02604 	addi	r19,r19,-32616
   124b4:	003f6f06 	br	12274 <___vfprintf_internal_r+0x1894>
   124b8:	d8812583 	ldbu	r2,1174(sp)
   124bc:	dc012a17 	ldw	r16,1192(sp)
   124c0:	d8013115 	stw	zero,1220(sp)
   124c4:	003a3106 	br	10d8c <___vfprintf_internal_r+0x3ac>
   124c8:	d8812404 	addi	r2,sp,1168
   124cc:	d8800115 	stw	r2,4(sp)
   124d0:	d8812304 	addi	r2,sp,1164
   124d4:	d8800215 	stw	r2,8(sp)
   124d8:	d8812204 	addi	r2,sp,1160
   124dc:	df000015 	stw	fp,0(sp)
   124e0:	d8800315 	stw	r2,12(sp)
   124e4:	8809883a 	mov	r4,r17
   124e8:	b00b883a 	mov	r5,r22
   124ec:	a00d883a 	mov	r6,r20
   124f0:	01c000c4 	movi	r7,3
   124f4:	da413c15 	stw	r9,1264(sp)
   124f8:	0012b780 	call	12b78 <_dtoa_r>
   124fc:	da413c17 	ldw	r9,1264(sp)
   12500:	1027883a 	mov	r19,r2
   12504:	1707883a 	add	r3,r2,fp
   12508:	e02f883a 	mov	r23,fp
   1250c:	99000007 	ldb	r4,0(r19)
   12510:	00800c04 	movi	r2,48
   12514:	20800326 	beq	r4,r2,12524 <___vfprintf_internal_r+0x1b44>
   12518:	da812417 	ldw	r10,1168(sp)
   1251c:	1a87883a 	add	r3,r3,r10
   12520:	003ef406 	br	120f4 <___vfprintf_internal_r+0x1714>
   12524:	b009883a 	mov	r4,r22
   12528:	a00b883a 	mov	r5,r20
   1252c:	000d883a 	mov	r6,zero
   12530:	000f883a 	mov	r7,zero
   12534:	d8c13b15 	stw	r3,1260(sp)
   12538:	da413c15 	stw	r9,1264(sp)
   1253c:	0018ff00 	call	18ff0 <__nedf2>
   12540:	d8c13b17 	ldw	r3,1260(sp)
   12544:	da413c17 	ldw	r9,1264(sp)
   12548:	103ff326 	beq	r2,zero,12518 <___vfprintf_internal_r+0x1b38>
   1254c:	00800044 	movi	r2,1
   12550:	15d5c83a 	sub	r10,r2,r23
   12554:	da812415 	stw	r10,1168(sp)
   12558:	1a87883a 	add	r3,r3,r10
   1255c:	003ee506 	br	120f4 <___vfprintf_internal_r+0x1714>
   12560:	d8812417 	ldw	r2,1168(sp)
   12564:	d8812b15 	stw	r2,1196(sp)
   12568:	1029883a 	mov	r20,r2
   1256c:	00bfff44 	movi	r2,-3
   12570:	a0800116 	blt	r20,r2,12578 <___vfprintf_internal_r+0x1b98>
   12574:	e5001d0e 	bge	fp,r20,125ec <___vfprintf_internal_r+0x1c0c>
   12578:	94bfff84 	addi	r18,r18,-2
   1257c:	a53fffc4 	addi	r20,r20,-1
   12580:	dd012415 	stw	r20,1168(sp)
   12584:	dc811fc5 	stb	r18,1151(sp)
   12588:	a0007816 	blt	r20,zero,1276c <___vfprintf_internal_r+0x1d8c>
   1258c:	00800ac4 	movi	r2,43
   12590:	d8812005 	stb	r2,1152(sp)
   12594:	00800244 	movi	r2,9
   12598:	15002b16 	blt	r2,r20,12648 <___vfprintf_internal_r+0x1c68>
   1259c:	00800c04 	movi	r2,48
   125a0:	a5000c04 	addi	r20,r20,48
   125a4:	d8812045 	stb	r2,1153(sp)
   125a8:	dd012085 	stb	r20,1154(sp)
   125ac:	d8c120c4 	addi	r3,sp,1155
   125b0:	d8811fc4 	addi	r2,sp,1151
   125b4:	da013217 	ldw	r8,1224(sp)
   125b8:	1885c83a 	sub	r2,r3,r2
   125bc:	d8813515 	stw	r2,1236(sp)
   125c0:	4085883a 	add	r2,r8,r2
   125c4:	d8812b15 	stw	r2,1196(sp)
   125c8:	00800044 	movi	r2,1
   125cc:	1200610e 	bge	r2,r8,12754 <___vfprintf_internal_r+0x1d74>
   125d0:	d8812b17 	ldw	r2,1196(sp)
   125d4:	10800044 	addi	r2,r2,1
   125d8:	d8812b15 	stw	r2,1196(sp)
   125dc:	d8812815 	stw	r2,1184(sp)
   125e0:	103ee90e 	bge	r2,zero,12188 <___vfprintf_internal_r+0x17a8>
   125e4:	d8012815 	stw	zero,1184(sp)
   125e8:	003ee706 	br	12188 <___vfprintf_internal_r+0x17a8>
   125ec:	d8812b17 	ldw	r2,1196(sp)
   125f0:	da013217 	ldw	r8,1224(sp)
   125f4:	12003716 	blt	r2,r8,126d4 <___vfprintf_internal_r+0x1cf4>
   125f8:	8400004c 	andi	r16,r16,1
   125fc:	80000326 	beq	r16,zero,1260c <___vfprintf_internal_r+0x1c2c>
   12600:	d8812b17 	ldw	r2,1196(sp)
   12604:	10800044 	addi	r2,r2,1
   12608:	d8812b15 	stw	r2,1196(sp)
   1260c:	d8812815 	stw	r2,1184(sp)
   12610:	10003716 	blt	r2,zero,126f0 <___vfprintf_internal_r+0x1d10>
   12614:	048019c4 	movi	r18,103
   12618:	003edb06 	br	12188 <___vfprintf_internal_r+0x17a8>
   1261c:	d8012815 	stw	zero,1184(sp)
   12620:	003b6906 	br	113c8 <___vfprintf_internal_r+0x9e8>
   12624:	e03e901e 	bne	fp,zero,12068 <___vfprintf_internal_r+0x1688>
   12628:	07000044 	movi	fp,1
   1262c:	003e8e06 	br	12068 <___vfprintf_internal_r+0x1688>
   12630:	07000184 	movi	fp,6
   12634:	003e8c06 	br	12068 <___vfprintf_internal_r+0x1688>
   12638:	00c00b44 	movi	r3,45
   1263c:	a520003c 	xorhi	r20,r20,32768
   12640:	d8c12f05 	stb	r3,1212(sp)
   12644:	003e8c06 	br	12078 <___vfprintf_internal_r+0x1698>
   12648:	d8c11f84 	addi	r3,sp,1150
   1264c:	102f883a 	mov	r23,r2
   12650:	4839883a 	mov	fp,r9
   12654:	a009883a 	mov	r4,r20
   12658:	01400284 	movi	r5,10
   1265c:	182d883a 	mov	r22,r3
   12660:	00107b40 	call	107b4 <__modsi3>
   12664:	10800c04 	addi	r2,r2,48
   12668:	a009883a 	mov	r4,r20
   1266c:	b0800005 	stb	r2,0(r22)
   12670:	01400284 	movi	r5,10
   12674:	00107640 	call	10764 <__divsi3>
   12678:	1029883a 	mov	r20,r2
   1267c:	b0ffffc4 	addi	r3,r22,-1
   12680:	b8bff416 	blt	r23,r2,12654 <___vfprintf_internal_r+0x1c74>
   12684:	11400c04 	addi	r5,r2,48
   12688:	b17fffc5 	stb	r5,-1(r22)
   1268c:	d8811fc4 	addi	r2,sp,1151
   12690:	e013883a 	mov	r9,fp
   12694:	1880482e 	bgeu	r3,r2,127b8 <___vfprintf_internal_r+0x1dd8>
   12698:	b007883a 	mov	r3,r22
   1269c:	d9012044 	addi	r4,sp,1153
   126a0:	00000206 	br	126ac <___vfprintf_internal_r+0x1ccc>
   126a4:	19400003 	ldbu	r5,0(r3)
   126a8:	18c00044 	addi	r3,r3,1
   126ac:	21400005 	stb	r5,0(r4)
   126b0:	21000044 	addi	r4,r4,1
   126b4:	10fffb1e 	bne	r2,r3,126a4 <___vfprintf_internal_r+0x1cc4>
   126b8:	d8c12004 	addi	r3,sp,1152
   126bc:	1d87c83a 	sub	r3,r3,r22
   126c0:	d9012044 	addi	r4,sp,1153
   126c4:	20c7883a 	add	r3,r4,r3
   126c8:	003fba06 	br	125b4 <___vfprintf_internal_r+0x1bd4>
   126cc:	d8c12217 	ldw	r3,1160(sp)
   126d0:	003e9906 	br	12138 <___vfprintf_internal_r+0x1758>
   126d4:	05000b0e 	bge	zero,r20,12704 <___vfprintf_internal_r+0x1d24>
   126d8:	05000044 	movi	r20,1
   126dc:	da013217 	ldw	r8,1224(sp)
   126e0:	a229883a 	add	r20,r20,r8
   126e4:	dd012b15 	stw	r20,1196(sp)
   126e8:	dd012815 	stw	r20,1184(sp)
   126ec:	a03fc90e 	bge	r20,zero,12614 <___vfprintf_internal_r+0x1c34>
   126f0:	d8012815 	stw	zero,1184(sp)
   126f4:	048019c4 	movi	r18,103
   126f8:	003ea306 	br	12188 <___vfprintf_internal_r+0x17a8>
   126fc:	e5c00044 	addi	r23,fp,1
   12700:	003e6606 	br	1209c <___vfprintf_internal_r+0x16bc>
   12704:	00800084 	movi	r2,2
   12708:	1529c83a 	sub	r20,r2,r20
   1270c:	003ff306 	br	126dc <___vfprintf_internal_r+0x1cfc>
   12710:	008011c4 	movi	r2,71
   12714:	90be7226 	beq	r18,r2,120e0 <___vfprintf_internal_r+0x1700>
   12718:	003e7306 	br	120e8 <___vfprintf_internal_r+0x1708>
   1271c:	d8812d17 	ldw	r2,1204(sp)
   12720:	ac800043 	ldbu	r18,1(r21)
   12724:	202b883a 	mov	r21,r4
   12728:	17000017 	ldw	fp,0(r2)
   1272c:	10800104 	addi	r2,r2,4
   12730:	d8812d15 	stw	r2,1204(sp)
   12734:	e0001b16 	blt	fp,zero,127a4 <___vfprintf_internal_r+0x1dc4>
   12738:	94803fcc 	andi	r18,r18,255
   1273c:	9480201c 	xori	r18,r18,128
   12740:	94bfe004 	addi	r18,r18,-128
   12744:	00390406 	br	10b58 <___vfprintf_internal_r+0x178>
   12748:	00bfffc4 	movi	r2,-1
   1274c:	d8812c15 	stw	r2,1200(sp)
   12750:	003a2506 	br	10fe8 <___vfprintf_internal_r+0x608>
   12754:	80a0703a 	and	r16,r16,r2
   12758:	803f9d1e 	bne	r16,zero,125d0 <___vfprintf_internal_r+0x1bf0>
   1275c:	d8812b17 	ldw	r2,1196(sp)
   12760:	d8812815 	stw	r2,1184(sp)
   12764:	103e880e 	bge	r2,zero,12188 <___vfprintf_internal_r+0x17a8>
   12768:	003f9e06 	br	125e4 <___vfprintf_internal_r+0x1c04>
   1276c:	00800b44 	movi	r2,45
   12770:	0529c83a 	sub	r20,zero,r20
   12774:	d8812005 	stb	r2,1152(sp)
   12778:	003f8606 	br	12594 <___vfprintf_internal_r+0x1bb4>
   1277c:	1007883a 	mov	r3,r2
   12780:	003e6d06 	br	12138 <___vfprintf_internal_r+0x1758>
   12784:	e000021e 	bne	fp,zero,12790 <___vfprintf_internal_r+0x1db0>
   12788:	8400004c 	andi	r16,r16,1
   1278c:	80000e26 	beq	r16,zero,127c8 <___vfprintf_internal_r+0x1de8>
   12790:	e7000084 	addi	fp,fp,2
   12794:	df012b15 	stw	fp,1196(sp)
   12798:	df012815 	stw	fp,1184(sp)
   1279c:	e03e7a0e 	bge	fp,zero,12188 <___vfprintf_internal_r+0x17a8>
   127a0:	003f9006 	br	125e4 <___vfprintf_internal_r+0x1c04>
   127a4:	94803fcc 	andi	r18,r18,255
   127a8:	9480201c 	xori	r18,r18,128
   127ac:	073fffc4 	movi	fp,-1
   127b0:	94bfe004 	addi	r18,r18,-128
   127b4:	0038e806 	br	10b58 <___vfprintf_internal_r+0x178>
   127b8:	d8c12044 	addi	r3,sp,1153
   127bc:	003f7d06 	br	125b4 <___vfprintf_internal_r+0x1bd4>
   127c0:	dd012417 	ldw	r20,1168(sp)
   127c4:	003f6d06 	br	1257c <___vfprintf_internal_r+0x1b9c>
   127c8:	00c00044 	movi	r3,1
   127cc:	d8c12815 	stw	r3,1184(sp)
   127d0:	d8c12b15 	stw	r3,1196(sp)
   127d4:	003e6c06 	br	12188 <___vfprintf_internal_r+0x17a8>

000127d8 <__vfprintf_internal>:
   127d8:	00800174 	movhi	r2,5
   127dc:	10a77404 	addi	r2,r2,-25136
   127e0:	2007883a 	mov	r3,r4
   127e4:	11000017 	ldw	r4,0(r2)
   127e8:	2805883a 	mov	r2,r5
   127ec:	300f883a 	mov	r7,r6
   127f0:	180b883a 	mov	r5,r3
   127f4:	100d883a 	mov	r6,r2
   127f8:	00109e01 	jmpi	109e0 <___vfprintf_internal_r>

000127fc <__swsetup_r>:
   127fc:	00800174 	movhi	r2,5
   12800:	10a77404 	addi	r2,r2,-25136
   12804:	10800017 	ldw	r2,0(r2)
   12808:	defffd04 	addi	sp,sp,-12
   1280c:	dc400115 	stw	r17,4(sp)
   12810:	dc000015 	stw	r16,0(sp)
   12814:	dfc00215 	stw	ra,8(sp)
   12818:	2023883a 	mov	r17,r4
   1281c:	2821883a 	mov	r16,r5
   12820:	10000226 	beq	r2,zero,1282c <__swsetup_r+0x30>
   12824:	10c00e17 	ldw	r3,56(r2)
   12828:	18003d26 	beq	r3,zero,12920 <__swsetup_r+0x124>
   1282c:	8080030b 	ldhu	r2,12(r16)
   12830:	10c0020c 	andi	r3,r2,8
   12834:	18ffffcc 	andi	r3,r3,65535
   12838:	18e0001c 	xori	r3,r3,32768
   1283c:	18e00004 	addi	r3,r3,-32768
   12840:	18001226 	beq	r3,zero,1288c <__swsetup_r+0x90>
   12844:	80c00417 	ldw	r3,16(r16)
   12848:	18001f26 	beq	r3,zero,128c8 <__swsetup_r+0xcc>
   1284c:	1100004c 	andi	r4,r2,1
   12850:	2000261e 	bne	r4,zero,128ec <__swsetup_r+0xf0>
   12854:	1080008c 	andi	r2,r2,2
   12858:	10bfffcc 	andi	r2,r2,65535
   1285c:	10a0001c 	xori	r2,r2,32768
   12860:	10a00004 	addi	r2,r2,-32768
   12864:	1000311e 	bne	r2,zero,1292c <__swsetup_r+0x130>
   12868:	80800517 	ldw	r2,20(r16)
   1286c:	80800215 	stw	r2,8(r16)
   12870:	18002326 	beq	r3,zero,12900 <__swsetup_r+0x104>
   12874:	0005883a 	mov	r2,zero
   12878:	dfc00217 	ldw	ra,8(sp)
   1287c:	dc400117 	ldw	r17,4(sp)
   12880:	dc000017 	ldw	r16,0(sp)
   12884:	dec00304 	addi	sp,sp,12
   12888:	f800283a 	ret
   1288c:	10c0040c 	andi	r3,r2,16
   12890:	18ffffcc 	andi	r3,r3,65535
   12894:	18e0001c 	xori	r3,r3,32768
   12898:	18e00004 	addi	r3,r3,-32768
   1289c:	18001e26 	beq	r3,zero,12918 <__swsetup_r+0x11c>
   128a0:	10c0010c 	andi	r3,r2,4
   128a4:	18ffffcc 	andi	r3,r3,65535
   128a8:	18e0001c 	xori	r3,r3,32768
   128ac:	18e00004 	addi	r3,r3,-32768
   128b0:	1800211e 	bne	r3,zero,12938 <__swsetup_r+0x13c>
   128b4:	80c00417 	ldw	r3,16(r16)
   128b8:	11400214 	ori	r5,r2,8
   128bc:	8140030d 	sth	r5,12(r16)
   128c0:	2805883a 	mov	r2,r5
   128c4:	183fe11e 	bne	r3,zero,1284c <__swsetup_r+0x50>
   128c8:	1140a00c 	andi	r5,r2,640
   128cc:	01008004 	movi	r4,512
   128d0:	293fde26 	beq	r5,r4,1284c <__swsetup_r+0x50>
   128d4:	8809883a 	mov	r4,r17
   128d8:	800b883a 	mov	r5,r16
   128dc:	00151b00 	call	151b0 <__smakebuf_r>
   128e0:	8080030b 	ldhu	r2,12(r16)
   128e4:	80c00417 	ldw	r3,16(r16)
   128e8:	003fd806 	br	1284c <__swsetup_r+0x50>
   128ec:	80800517 	ldw	r2,20(r16)
   128f0:	80000215 	stw	zero,8(r16)
   128f4:	0085c83a 	sub	r2,zero,r2
   128f8:	80800615 	stw	r2,24(r16)
   128fc:	183fdd1e 	bne	r3,zero,12874 <__swsetup_r+0x78>
   12900:	8080030b 	ldhu	r2,12(r16)
   12904:	1080200c 	andi	r2,r2,128
   12908:	10bfffcc 	andi	r2,r2,65535
   1290c:	10a0001c 	xori	r2,r2,32768
   12910:	10a00004 	addi	r2,r2,-32768
   12914:	103fd826 	beq	r2,zero,12878 <__swsetup_r+0x7c>
   12918:	00bfffc4 	movi	r2,-1
   1291c:	003fd606 	br	12878 <__swsetup_r+0x7c>
   12920:	1009883a 	mov	r4,r2
   12924:	001443c0 	call	1443c <__sinit>
   12928:	003fc006 	br	1282c <__swsetup_r+0x30>
   1292c:	0005883a 	mov	r2,zero
   12930:	80800215 	stw	r2,8(r16)
   12934:	003fce06 	br	12870 <__swsetup_r+0x74>
   12938:	81400c17 	ldw	r5,48(r16)
   1293c:	28000626 	beq	r5,zero,12958 <__swsetup_r+0x15c>
   12940:	80c01004 	addi	r3,r16,64
   12944:	28c00326 	beq	r5,r3,12954 <__swsetup_r+0x158>
   12948:	8809883a 	mov	r4,r17
   1294c:	00147c00 	call	147c0 <_free_r>
   12950:	8080030b 	ldhu	r2,12(r16)
   12954:	80000c15 	stw	zero,48(r16)
   12958:	80c00417 	ldw	r3,16(r16)
   1295c:	013ff6c4 	movi	r4,-37
   12960:	2084703a 	and	r2,r4,r2
   12964:	80000115 	stw	zero,4(r16)
   12968:	80c00015 	stw	r3,0(r16)
   1296c:	003fd206 	br	128b8 <__swsetup_r+0xbc>

00012970 <quorem>:
   12970:	defff704 	addi	sp,sp,-36
   12974:	dc400115 	stw	r17,4(sp)
   12978:	20800417 	ldw	r2,16(r4)
   1297c:	2c400417 	ldw	r17,16(r5)
   12980:	dd800615 	stw	r22,24(sp)
   12984:	dd400515 	stw	r21,20(sp)
   12988:	dfc00815 	stw	ra,32(sp)
   1298c:	ddc00715 	stw	r23,28(sp)
   12990:	dd000415 	stw	r20,16(sp)
   12994:	dcc00315 	stw	r19,12(sp)
   12998:	dc800215 	stw	r18,8(sp)
   1299c:	dc000015 	stw	r16,0(sp)
   129a0:	202b883a 	mov	r21,r4
   129a4:	282d883a 	mov	r22,r5
   129a8:	14407116 	blt	r2,r17,12b70 <quorem+0x200>
   129ac:	88800104 	addi	r2,r17,4
   129b0:	1085883a 	add	r2,r2,r2
   129b4:	1085883a 	add	r2,r2,r2
   129b8:	28a7883a 	add	r19,r5,r2
   129bc:	2085883a 	add	r2,r4,r2
   129c0:	15c00017 	ldw	r23,0(r2)
   129c4:	99400017 	ldw	r5,0(r19)
   129c8:	8c7fffc4 	addi	r17,r17,-1
   129cc:	b809883a 	mov	r4,r23
   129d0:	29400044 	addi	r5,r5,1
   129d4:	00108100 	call	10810 <__udivsi3>
   129d8:	1025883a 	mov	r18,r2
   129dc:	b4000504 	addi	r16,r22,20
   129e0:	ad000504 	addi	r20,r21,20
   129e4:	10002d26 	beq	r2,zero,12a9c <quorem+0x12c>
   129e8:	800d883a 	mov	r6,r16
   129ec:	a007883a 	mov	r3,r20
   129f0:	000f883a 	mov	r7,zero
   129f4:	0005883a 	mov	r2,zero
   129f8:	32c00017 	ldw	r11,0(r6)
   129fc:	1a400017 	ldw	r9,0(r3)
   12a00:	31800104 	addi	r6,r6,4
   12a04:	5abfffcc 	andi	r10,r11,65535
   12a08:	5495383a 	mul	r10,r10,r18
   12a0c:	5816d43a 	srli	r11,r11,16
   12a10:	4a3fffcc 	andi	r8,r9,65535
   12a14:	3a95883a 	add	r10,r7,r10
   12a18:	500ed43a 	srli	r7,r10,16
   12a1c:	5c97383a 	mul	r11,r11,r18
   12a20:	4085883a 	add	r2,r8,r2
   12a24:	52bfffcc 	andi	r10,r10,65535
   12a28:	1291c83a 	sub	r8,r2,r10
   12a2c:	4804d43a 	srli	r2,r9,16
   12a30:	3acf883a 	add	r7,r7,r11
   12a34:	4015d43a 	srai	r10,r8,16
   12a38:	393fffcc 	andi	r4,r7,65535
   12a3c:	1105c83a 	sub	r2,r2,r4
   12a40:	1285883a 	add	r2,r2,r10
   12a44:	1880008d 	sth	r2,2(r3)
   12a48:	1a00000d 	sth	r8,0(r3)
   12a4c:	380ed43a 	srli	r7,r7,16
   12a50:	1005d43a 	srai	r2,r2,16
   12a54:	18c00104 	addi	r3,r3,4
   12a58:	99bfe72e 	bgeu	r19,r6,129f8 <quorem+0x88>
   12a5c:	b8000f1e 	bne	r23,zero,12a9c <quorem+0x12c>
   12a60:	88800144 	addi	r2,r17,5
   12a64:	1085883a 	add	r2,r2,r2
   12a68:	1085883a 	add	r2,r2,r2
   12a6c:	a887883a 	add	r3,r21,r2
   12a70:	18bfff04 	addi	r2,r3,-4
   12a74:	a080082e 	bgeu	r20,r2,12a98 <quorem+0x128>
   12a78:	18ffff17 	ldw	r3,-4(r3)
   12a7c:	18000326 	beq	r3,zero,12a8c <quorem+0x11c>
   12a80:	00000506 	br	12a98 <quorem+0x128>
   12a84:	10c00017 	ldw	r3,0(r2)
   12a88:	1800031e 	bne	r3,zero,12a98 <quorem+0x128>
   12a8c:	10bfff04 	addi	r2,r2,-4
   12a90:	8c7fffc4 	addi	r17,r17,-1
   12a94:	a0bffb36 	bltu	r20,r2,12a84 <quorem+0x114>
   12a98:	ac400415 	stw	r17,16(r21)
   12a9c:	a809883a 	mov	r4,r21
   12aa0:	b00b883a 	mov	r5,r22
   12aa4:	00167740 	call	16774 <__mcmp>
   12aa8:	10002516 	blt	r2,zero,12b40 <quorem+0x1d0>
   12aac:	94800044 	addi	r18,r18,1
   12ab0:	a007883a 	mov	r3,r20
   12ab4:	000b883a 	mov	r5,zero
   12ab8:	1a000017 	ldw	r8,0(r3)
   12abc:	81c00017 	ldw	r7,0(r16)
   12ac0:	84000104 	addi	r16,r16,4
   12ac4:	41bfffcc 	andi	r6,r8,65535
   12ac8:	38bfffcc 	andi	r2,r7,65535
   12acc:	314b883a 	add	r5,r6,r5
   12ad0:	288dc83a 	sub	r6,r5,r2
   12ad4:	380ed43a 	srli	r7,r7,16
   12ad8:	400ad43a 	srli	r5,r8,16
   12adc:	3005d43a 	srai	r2,r6,16
   12ae0:	1980000d 	sth	r6,0(r3)
   12ae4:	29cbc83a 	sub	r5,r5,r7
   12ae8:	288b883a 	add	r5,r5,r2
   12aec:	1940008d 	sth	r5,2(r3)
   12af0:	280bd43a 	srai	r5,r5,16
   12af4:	18c00104 	addi	r3,r3,4
   12af8:	9c3fef2e 	bgeu	r19,r16,12ab8 <quorem+0x148>
   12afc:	88800144 	addi	r2,r17,5
   12b00:	1085883a 	add	r2,r2,r2
   12b04:	1085883a 	add	r2,r2,r2
   12b08:	a885883a 	add	r2,r21,r2
   12b0c:	10c00017 	ldw	r3,0(r2)
   12b10:	18000b1e 	bne	r3,zero,12b40 <quorem+0x1d0>
   12b14:	10ffff04 	addi	r3,r2,-4
   12b18:	a0c0082e 	bgeu	r20,r3,12b3c <quorem+0x1cc>
   12b1c:	10bfff17 	ldw	r2,-4(r2)
   12b20:	10000326 	beq	r2,zero,12b30 <quorem+0x1c0>
   12b24:	00000506 	br	12b3c <quorem+0x1cc>
   12b28:	18800017 	ldw	r2,0(r3)
   12b2c:	1000031e 	bne	r2,zero,12b3c <quorem+0x1cc>
   12b30:	18ffff04 	addi	r3,r3,-4
   12b34:	8c7fffc4 	addi	r17,r17,-1
   12b38:	a0fffb36 	bltu	r20,r3,12b28 <quorem+0x1b8>
   12b3c:	ac400415 	stw	r17,16(r21)
   12b40:	9005883a 	mov	r2,r18
   12b44:	dfc00817 	ldw	ra,32(sp)
   12b48:	ddc00717 	ldw	r23,28(sp)
   12b4c:	dd800617 	ldw	r22,24(sp)
   12b50:	dd400517 	ldw	r21,20(sp)
   12b54:	dd000417 	ldw	r20,16(sp)
   12b58:	dcc00317 	ldw	r19,12(sp)
   12b5c:	dc800217 	ldw	r18,8(sp)
   12b60:	dc400117 	ldw	r17,4(sp)
   12b64:	dc000017 	ldw	r16,0(sp)
   12b68:	dec00904 	addi	sp,sp,36
   12b6c:	f800283a 	ret
   12b70:	0005883a 	mov	r2,zero
   12b74:	003ff306 	br	12b44 <quorem+0x1d4>

00012b78 <_dtoa_r>:
   12b78:	20801017 	ldw	r2,64(r4)
   12b7c:	deffdf04 	addi	sp,sp,-132
   12b80:	dcc01a15 	stw	r19,104(sp)
   12b84:	dc801915 	stw	r18,100(sp)
   12b88:	dc401815 	stw	r17,96(sp)
   12b8c:	dc001715 	stw	r16,92(sp)
   12b90:	dfc02015 	stw	ra,128(sp)
   12b94:	df001f15 	stw	fp,124(sp)
   12b98:	ddc01e15 	stw	r23,120(sp)
   12b9c:	dd801d15 	stw	r22,116(sp)
   12ba0:	dd401c15 	stw	r21,112(sp)
   12ba4:	dd001b15 	stw	r20,108(sp)
   12ba8:	d9400315 	stw	r5,12(sp)
   12bac:	d9c00415 	stw	r7,16(sp)
   12bb0:	2021883a 	mov	r16,r4
   12bb4:	3025883a 	mov	r18,r6
   12bb8:	dcc02317 	ldw	r19,140(sp)
   12bbc:	3023883a 	mov	r17,r6
   12bc0:	10000826 	beq	r2,zero,12be4 <_dtoa_r+0x6c>
   12bc4:	20c01117 	ldw	r3,68(r4)
   12bc8:	01800044 	movi	r6,1
   12bcc:	100b883a 	mov	r5,r2
   12bd0:	30cc983a 	sll	r6,r6,r3
   12bd4:	10c00115 	stw	r3,4(r2)
   12bd8:	11800215 	stw	r6,8(r2)
   12bdc:	0015f780 	call	15f78 <_Bfree>
   12be0:	80001015 	stw	zero,64(r16)
   12be4:	90002f16 	blt	r18,zero,12ca4 <_dtoa_r+0x12c>
   12be8:	98000015 	stw	zero,0(r19)
   12bec:	90dffc2c 	andhi	r3,r18,32752
   12bf0:	009ffc34 	movhi	r2,32752
   12bf4:	18801c26 	beq	r3,r2,12c68 <_dtoa_r+0xf0>
   12bf8:	d9000317 	ldw	r4,12(sp)
   12bfc:	880b883a 	mov	r5,r17
   12c00:	000d883a 	mov	r6,zero
   12c04:	000f883a 	mov	r7,zero
   12c08:	0018f940 	call	18f94 <__eqdf2>
   12c0c:	10002c1e 	bne	r2,zero,12cc0 <_dtoa_r+0x148>
   12c10:	d9002217 	ldw	r4,136(sp)
   12c14:	d9c02417 	ldw	r7,144(sp)
   12c18:	00800044 	movi	r2,1
   12c1c:	20800015 	stw	r2,0(r4)
   12c20:	38019426 	beq	r7,zero,13274 <_dtoa_r+0x6fc>
   12c24:	00800174 	movhi	r2,5
   12c28:	10a03344 	addi	r2,r2,-32563
   12c2c:	38800015 	stw	r2,0(r7)
   12c30:	15ffffc4 	addi	r23,r2,-1
   12c34:	b805883a 	mov	r2,r23
   12c38:	dfc02017 	ldw	ra,128(sp)
   12c3c:	df001f17 	ldw	fp,124(sp)
   12c40:	ddc01e17 	ldw	r23,120(sp)
   12c44:	dd801d17 	ldw	r22,116(sp)
   12c48:	dd401c17 	ldw	r21,112(sp)
   12c4c:	dd001b17 	ldw	r20,108(sp)
   12c50:	dcc01a17 	ldw	r19,104(sp)
   12c54:	dc801917 	ldw	r18,100(sp)
   12c58:	dc401817 	ldw	r17,96(sp)
   12c5c:	dc001717 	ldw	r16,92(sp)
   12c60:	dec02104 	addi	sp,sp,132
   12c64:	f800283a 	ret
   12c68:	d8c02217 	ldw	r3,136(sp)
   12c6c:	d9000317 	ldw	r4,12(sp)
   12c70:	0089c3c4 	movi	r2,9999
   12c74:	18800015 	stw	r2,0(r3)
   12c78:	20016c26 	beq	r4,zero,1322c <_dtoa_r+0x6b4>
   12c7c:	05c00174 	movhi	r23,5
   12c80:	bde03f04 	addi	r23,r23,-32516
   12c84:	d9c02417 	ldw	r7,144(sp)
   12c88:	383fea26 	beq	r7,zero,12c34 <_dtoa_r+0xbc>
   12c8c:	b88000c7 	ldb	r2,3(r23)
   12c90:	10016d1e 	bne	r2,zero,13248 <_dtoa_r+0x6d0>
   12c94:	b88000c4 	addi	r2,r23,3
   12c98:	d8c02417 	ldw	r3,144(sp)
   12c9c:	18800015 	stw	r2,0(r3)
   12ca0:	003fe406 	br	12c34 <_dtoa_r+0xbc>
   12ca4:	04600034 	movhi	r17,32768
   12ca8:	8c7fffc4 	addi	r17,r17,-1
   12cac:	9462703a 	and	r17,r18,r17
   12cb0:	00800044 	movi	r2,1
   12cb4:	98800015 	stw	r2,0(r19)
   12cb8:	8825883a 	mov	r18,r17
   12cbc:	003fcb06 	br	12bec <_dtoa_r+0x74>
   12cc0:	d9400317 	ldw	r5,12(sp)
   12cc4:	9028d53a 	srli	r20,r18,20
   12cc8:	d8800204 	addi	r2,sp,8
   12ccc:	d8800015 	stw	r2,0(sp)
   12cd0:	8009883a 	mov	r4,r16
   12cd4:	880d883a 	mov	r6,r17
   12cd8:	d9c00104 	addi	r7,sp,4
   12cdc:	0016b1c0 	call	16b1c <__d2b>
   12ce0:	a501ffcc 	andi	r20,r20,2047
   12ce4:	1039883a 	mov	fp,r2
   12ce8:	a001591e 	bne	r20,zero,13250 <_dtoa_r+0x6d8>
   12cec:	dd400217 	ldw	r21,8(sp)
   12cf0:	dd000117 	ldw	r20,4(sp)
   12cf4:	00befbc4 	movi	r2,-1041
   12cf8:	ad29883a 	add	r20,r21,r20
   12cfc:	a082d216 	blt	r20,r2,13848 <_dtoa_r+0xcd0>
   12d00:	d8c00317 	ldw	r3,12(sp)
   12d04:	013f0384 	movi	r4,-1010
   12d08:	2509c83a 	sub	r4,r4,r20
   12d0c:	a0810484 	addi	r2,r20,1042
   12d10:	9124983a 	sll	r18,r18,r4
   12d14:	1884d83a 	srl	r2,r3,r2
   12d18:	9088b03a 	or	r4,r18,r2
   12d1c:	00193180 	call	19318 <__floatunsidf>
   12d20:	1009883a 	mov	r4,r2
   12d24:	017f8434 	movhi	r5,65040
   12d28:	00800044 	movi	r2,1
   12d2c:	194b883a 	add	r5,r3,r5
   12d30:	a53fffc4 	addi	r20,r20,-1
   12d34:	d8800f15 	stw	r2,60(sp)
   12d38:	000d883a 	mov	r6,zero
   12d3c:	01cffe34 	movhi	r7,16376
   12d40:	0018a9c0 	call	18a9c <__subdf3>
   12d44:	1009883a 	mov	r4,r2
   12d48:	180b883a 	mov	r5,r3
   12d4c:	0198dbf4 	movhi	r6,25455
   12d50:	3190d844 	addi	r6,r6,17249
   12d54:	01cff4f4 	movhi	r7,16339
   12d58:	39e1e9c4 	addi	r7,r7,-30809
   12d5c:	0018afc0 	call	18afc <__muldf3>
   12d60:	180b883a 	mov	r5,r3
   12d64:	01a2d874 	movhi	r6,35681
   12d68:	31b22cc4 	addi	r6,r6,-14157
   12d6c:	01cff1f4 	movhi	r7,16327
   12d70:	39e28a04 	addi	r7,r7,-30168
   12d74:	1009883a 	mov	r4,r2
   12d78:	0018a480 	call	18a48 <__adddf3>
   12d7c:	a009883a 	mov	r4,r20
   12d80:	1027883a 	mov	r19,r2
   12d84:	1825883a 	mov	r18,r3
   12d88:	00191700 	call	19170 <__floatsidf>
   12d8c:	1009883a 	mov	r4,r2
   12d90:	180b883a 	mov	r5,r3
   12d94:	019427f4 	movhi	r6,20639
   12d98:	319e7ec4 	addi	r6,r6,31227
   12d9c:	01cff4f4 	movhi	r7,16339
   12da0:	39d104c4 	addi	r7,r7,17427
   12da4:	0018afc0 	call	18afc <__muldf3>
   12da8:	9809883a 	mov	r4,r19
   12dac:	900b883a 	mov	r5,r18
   12db0:	100d883a 	mov	r6,r2
   12db4:	180f883a 	mov	r7,r3
   12db8:	0018a480 	call	18a48 <__adddf3>
   12dbc:	1009883a 	mov	r4,r2
   12dc0:	180b883a 	mov	r5,r3
   12dc4:	1027883a 	mov	r19,r2
   12dc8:	1825883a 	mov	r18,r3
   12dcc:	00192440 	call	19244 <__fixdfsi>
   12dd0:	9809883a 	mov	r4,r19
   12dd4:	900b883a 	mov	r5,r18
   12dd8:	000d883a 	mov	r6,zero
   12ddc:	000f883a 	mov	r7,zero
   12de0:	d8800615 	stw	r2,24(sp)
   12de4:	00191140 	call	19114 <__ltdf2>
   12de8:	10027e16 	blt	r2,zero,137e4 <_dtoa_r+0xc6c>
   12dec:	d8c00617 	ldw	r3,24(sp)
   12df0:	00800584 	movi	r2,22
   12df4:	10c26c36 	bltu	r2,r3,137a8 <_dtoa_r+0xc30>
   12df8:	180490fa 	slli	r2,r3,3
   12dfc:	00c00174 	movhi	r3,5
   12e00:	18e06504 	addi	r3,r3,-32364
   12e04:	d9800317 	ldw	r6,12(sp)
   12e08:	1885883a 	add	r2,r3,r2
   12e0c:	11000017 	ldw	r4,0(r2)
   12e10:	11400117 	ldw	r5,4(r2)
   12e14:	880f883a 	mov	r7,r17
   12e18:	001904c0 	call	1904c <__gtdf2>
   12e1c:	00828f0e 	bge	zero,r2,1385c <_dtoa_r+0xce4>
   12e20:	d8800617 	ldw	r2,24(sp)
   12e24:	d8000d15 	stw	zero,52(sp)
   12e28:	10bfffc4 	addi	r2,r2,-1
   12e2c:	d8800615 	stw	r2,24(sp)
   12e30:	ad29c83a 	sub	r20,r21,r20
   12e34:	a53fffc4 	addi	r20,r20,-1
   12e38:	a0026616 	blt	r20,zero,137d4 <_dtoa_r+0xc5c>
   12e3c:	dd000715 	stw	r20,28(sp)
   12e40:	d8000815 	stw	zero,32(sp)
   12e44:	d8800617 	ldw	r2,24(sp)
   12e48:	10025a16 	blt	r2,zero,137b4 <_dtoa_r+0xc3c>
   12e4c:	d8c00717 	ldw	r3,28(sp)
   12e50:	d8800b15 	stw	r2,44(sp)
   12e54:	d8000a15 	stw	zero,40(sp)
   12e58:	1887883a 	add	r3,r3,r2
   12e5c:	d8c00715 	stw	r3,28(sp)
   12e60:	d9c00417 	ldw	r7,16(sp)
   12e64:	00800244 	movi	r2,9
   12e68:	11c10536 	bltu	r2,r7,13280 <_dtoa_r+0x708>
   12e6c:	00800144 	movi	r2,5
   12e70:	11c4c60e 	bge	r2,r7,1418c <_dtoa_r+0x1614>
   12e74:	39ffff04 	addi	r7,r7,-4
   12e78:	d9c00415 	stw	r7,16(sp)
   12e7c:	0027883a 	mov	r19,zero
   12e80:	d9c00417 	ldw	r7,16(sp)
   12e84:	008000c4 	movi	r2,3
   12e88:	3883a226 	beq	r7,r2,13d14 <_dtoa_r+0x119c>
   12e8c:	11c2bc16 	blt	r2,r7,13980 <_dtoa_r+0xe08>
   12e90:	00800084 	movi	r2,2
   12e94:	3880fb1e 	bne	r7,r2,13284 <_dtoa_r+0x70c>
   12e98:	d8000c15 	stw	zero,48(sp)
   12e9c:	d9002117 	ldw	r4,132(sp)
   12ea0:	0103ae0e 	bge	zero,r4,13d5c <_dtoa_r+0x11e4>
   12ea4:	2025883a 	mov	r18,r4
   12ea8:	d9000e15 	stw	r4,56(sp)
   12eac:	d9000915 	stw	r4,36(sp)
   12eb0:	80001115 	stw	zero,68(r16)
   12eb4:	008005c4 	movi	r2,23
   12eb8:	1484b22e 	bgeu	r2,r18,14184 <_dtoa_r+0x160c>
   12ebc:	00c00044 	movi	r3,1
   12ec0:	00800104 	movi	r2,4
   12ec4:	1085883a 	add	r2,r2,r2
   12ec8:	11000504 	addi	r4,r2,20
   12ecc:	180b883a 	mov	r5,r3
   12ed0:	18c00044 	addi	r3,r3,1
   12ed4:	913ffb2e 	bgeu	r18,r4,12ec4 <_dtoa_r+0x34c>
   12ed8:	81401115 	stw	r5,68(r16)
   12edc:	8009883a 	mov	r4,r16
   12ee0:	0015ed00 	call	15ed0 <_Balloc>
   12ee4:	102f883a 	mov	r23,r2
   12ee8:	80801015 	stw	r2,64(r16)
   12eec:	00800384 	movi	r2,14
   12ef0:	1480f036 	bltu	r2,r18,132b4 <_dtoa_r+0x73c>
   12ef4:	9800ef26 	beq	r19,zero,132b4 <_dtoa_r+0x73c>
   12ef8:	d8800617 	ldw	r2,24(sp)
   12efc:	00839c0e 	bge	zero,r2,13d70 <_dtoa_r+0x11f8>
   12f00:	d8c00617 	ldw	r3,24(sp)
   12f04:	108003cc 	andi	r2,r2,15
   12f08:	100490fa 	slli	r2,r2,3
   12f0c:	182bd13a 	srai	r21,r3,4
   12f10:	00c00174 	movhi	r3,5
   12f14:	18e06504 	addi	r3,r3,-32364
   12f18:	1885883a 	add	r2,r3,r2
   12f1c:	a8c0040c 	andi	r3,r21,16
   12f20:	12800017 	ldw	r10,0(r2)
   12f24:	15800117 	ldw	r22,4(r2)
   12f28:	18038726 	beq	r3,zero,13d48 <_dtoa_r+0x11d0>
   12f2c:	00800174 	movhi	r2,5
   12f30:	10a05b04 	addi	r2,r2,-32404
   12f34:	11800817 	ldw	r6,32(r2)
   12f38:	11c00917 	ldw	r7,36(r2)
   12f3c:	d9000317 	ldw	r4,12(sp)
   12f40:	880b883a 	mov	r5,r17
   12f44:	da801515 	stw	r10,84(sp)
   12f48:	0018de00 	call	18de0 <__divdf3>
   12f4c:	da801517 	ldw	r10,84(sp)
   12f50:	d8801015 	stw	r2,64(sp)
   12f54:	1829883a 	mov	r20,r3
   12f58:	ad4003cc 	andi	r21,r21,15
   12f5c:	048000c4 	movi	r18,3
   12f60:	a8001126 	beq	r21,zero,12fa8 <_dtoa_r+0x430>
   12f64:	04c00174 	movhi	r19,5
   12f68:	9ce05b04 	addi	r19,r19,-32404
   12f6c:	5005883a 	mov	r2,r10
   12f70:	b007883a 	mov	r3,r22
   12f74:	a980004c 	andi	r6,r21,1
   12f78:	1009883a 	mov	r4,r2
   12f7c:	a82bd07a 	srai	r21,r21,1
   12f80:	180b883a 	mov	r5,r3
   12f84:	30000426 	beq	r6,zero,12f98 <_dtoa_r+0x420>
   12f88:	99800017 	ldw	r6,0(r19)
   12f8c:	99c00117 	ldw	r7,4(r19)
   12f90:	94800044 	addi	r18,r18,1
   12f94:	0018afc0 	call	18afc <__muldf3>
   12f98:	9cc00204 	addi	r19,r19,8
   12f9c:	a83ff51e 	bne	r21,zero,12f74 <_dtoa_r+0x3fc>
   12fa0:	1015883a 	mov	r10,r2
   12fa4:	182d883a 	mov	r22,r3
   12fa8:	d9001017 	ldw	r4,64(sp)
   12fac:	a00b883a 	mov	r5,r20
   12fb0:	500d883a 	mov	r6,r10
   12fb4:	b00f883a 	mov	r7,r22
   12fb8:	0018de00 	call	18de0 <__divdf3>
   12fbc:	1027883a 	mov	r19,r2
   12fc0:	1829883a 	mov	r20,r3
   12fc4:	d8c00d17 	ldw	r3,52(sp)
   12fc8:	18000626 	beq	r3,zero,12fe4 <_dtoa_r+0x46c>
   12fcc:	9809883a 	mov	r4,r19
   12fd0:	a00b883a 	mov	r5,r20
   12fd4:	000d883a 	mov	r6,zero
   12fd8:	01cffc34 	movhi	r7,16368
   12fdc:	00191140 	call	19114 <__ltdf2>
   12fe0:	10040e16 	blt	r2,zero,1401c <_dtoa_r+0x14a4>
   12fe4:	9009883a 	mov	r4,r18
   12fe8:	00191700 	call	19170 <__floatsidf>
   12fec:	1009883a 	mov	r4,r2
   12ff0:	180b883a 	mov	r5,r3
   12ff4:	980d883a 	mov	r6,r19
   12ff8:	a00f883a 	mov	r7,r20
   12ffc:	0018afc0 	call	18afc <__muldf3>
   13000:	1009883a 	mov	r4,r2
   13004:	180b883a 	mov	r5,r3
   13008:	000d883a 	mov	r6,zero
   1300c:	01d00734 	movhi	r7,16412
   13010:	0018a480 	call	18a48 <__adddf3>
   13014:	057f3034 	movhi	r21,64704
   13018:	1d6b883a 	add	r21,r3,r21
   1301c:	d8c00917 	ldw	r3,36(sp)
   13020:	1025883a 	mov	r18,r2
   13024:	18031f26 	beq	r3,zero,13ca4 <_dtoa_r+0x112c>
   13028:	d8800617 	ldw	r2,24(sp)
   1302c:	dac00917 	ldw	r11,36(sp)
   13030:	d8801315 	stw	r2,76(sp)
   13034:	d8c00c17 	ldw	r3,48(sp)
   13038:	18039026 	beq	r3,zero,13e7c <_dtoa_r+0x1304>
   1303c:	58bfffc4 	addi	r2,r11,-1
   13040:	100490fa 	slli	r2,r2,3
   13044:	00c00174 	movhi	r3,5
   13048:	18e06504 	addi	r3,r3,-32364
   1304c:	0009883a 	mov	r4,zero
   13050:	1885883a 	add	r2,r3,r2
   13054:	11800017 	ldw	r6,0(r2)
   13058:	11c00117 	ldw	r7,4(r2)
   1305c:	014ff834 	movhi	r5,16352
   13060:	dac01615 	stw	r11,88(sp)
   13064:	0018de00 	call	18de0 <__divdf3>
   13068:	900d883a 	mov	r6,r18
   1306c:	a80f883a 	mov	r7,r21
   13070:	1009883a 	mov	r4,r2
   13074:	180b883a 	mov	r5,r3
   13078:	0018a9c0 	call	18a9c <__subdf3>
   1307c:	a00b883a 	mov	r5,r20
   13080:	9809883a 	mov	r4,r19
   13084:	182b883a 	mov	r21,r3
   13088:	d8801015 	stw	r2,64(sp)
   1308c:	00192440 	call	19244 <__fixdfsi>
   13090:	1009883a 	mov	r4,r2
   13094:	d8801515 	stw	r2,84(sp)
   13098:	00191700 	call	19170 <__floatsidf>
   1309c:	9809883a 	mov	r4,r19
   130a0:	a00b883a 	mov	r5,r20
   130a4:	100d883a 	mov	r6,r2
   130a8:	180f883a 	mov	r7,r3
   130ac:	0018a9c0 	call	18a9c <__subdf3>
   130b0:	da401517 	ldw	r9,84(sp)
   130b4:	d9001017 	ldw	r4,64(sp)
   130b8:	a80b883a 	mov	r5,r21
   130bc:	4d000c04 	addi	r20,r9,48
   130c0:	bd000005 	stb	r20,0(r23)
   130c4:	100d883a 	mov	r6,r2
   130c8:	180f883a 	mov	r7,r3
   130cc:	bd800044 	addi	r22,r23,1
   130d0:	1025883a 	mov	r18,r2
   130d4:	1827883a 	mov	r19,r3
   130d8:	001904c0 	call	1904c <__gtdf2>
   130dc:	00842216 	blt	zero,r2,14168 <_dtoa_r+0x15f0>
   130e0:	0009883a 	mov	r4,zero
   130e4:	014ffc34 	movhi	r5,16368
   130e8:	900d883a 	mov	r6,r18
   130ec:	980f883a 	mov	r7,r19
   130f0:	0018a9c0 	call	18a9c <__subdf3>
   130f4:	d9001017 	ldw	r4,64(sp)
   130f8:	a80b883a 	mov	r5,r21
   130fc:	100d883a 	mov	r6,r2
   13100:	180f883a 	mov	r7,r3
   13104:	001904c0 	call	1904c <__gtdf2>
   13108:	dac01617 	ldw	r11,88(sp)
   1310c:	00841316 	blt	zero,r2,1415c <_dtoa_r+0x15e4>
   13110:	00800044 	movi	r2,1
   13114:	12c0670e 	bge	r2,r11,132b4 <_dtoa_r+0x73c>
   13118:	bad7883a 	add	r11,r23,r11
   1311c:	df001115 	stw	fp,68(sp)
   13120:	dc401215 	stw	r17,72(sp)
   13124:	5839883a 	mov	fp,r11
   13128:	dc401017 	ldw	r17,64(sp)
   1312c:	00000806 	br	13150 <_dtoa_r+0x5d8>
   13130:	0018a9c0 	call	18a9c <__subdf3>
   13134:	1009883a 	mov	r4,r2
   13138:	180b883a 	mov	r5,r3
   1313c:	880d883a 	mov	r6,r17
   13140:	a80f883a 	mov	r7,r21
   13144:	00191140 	call	19114 <__ltdf2>
   13148:	1003ee16 	blt	r2,zero,14104 <_dtoa_r+0x158c>
   1314c:	b703f126 	beq	r22,fp,14114 <_dtoa_r+0x159c>
   13150:	8809883a 	mov	r4,r17
   13154:	a80b883a 	mov	r5,r21
   13158:	000d883a 	mov	r6,zero
   1315c:	01d00934 	movhi	r7,16420
   13160:	0018afc0 	call	18afc <__muldf3>
   13164:	000d883a 	mov	r6,zero
   13168:	01d00934 	movhi	r7,16420
   1316c:	9009883a 	mov	r4,r18
   13170:	980b883a 	mov	r5,r19
   13174:	1023883a 	mov	r17,r2
   13178:	182b883a 	mov	r21,r3
   1317c:	0018afc0 	call	18afc <__muldf3>
   13180:	180b883a 	mov	r5,r3
   13184:	1009883a 	mov	r4,r2
   13188:	1825883a 	mov	r18,r3
   1318c:	1027883a 	mov	r19,r2
   13190:	00192440 	call	19244 <__fixdfsi>
   13194:	1009883a 	mov	r4,r2
   13198:	1029883a 	mov	r20,r2
   1319c:	00191700 	call	19170 <__floatsidf>
   131a0:	9809883a 	mov	r4,r19
   131a4:	900b883a 	mov	r5,r18
   131a8:	100d883a 	mov	r6,r2
   131ac:	180f883a 	mov	r7,r3
   131b0:	0018a9c0 	call	18a9c <__subdf3>
   131b4:	a5000c04 	addi	r20,r20,48
   131b8:	b5000005 	stb	r20,0(r22)
   131bc:	1009883a 	mov	r4,r2
   131c0:	180b883a 	mov	r5,r3
   131c4:	880d883a 	mov	r6,r17
   131c8:	a80f883a 	mov	r7,r21
   131cc:	1025883a 	mov	r18,r2
   131d0:	1827883a 	mov	r19,r3
   131d4:	00191140 	call	19114 <__ltdf2>
   131d8:	b5800044 	addi	r22,r22,1
   131dc:	0009883a 	mov	r4,zero
   131e0:	014ffc34 	movhi	r5,16368
   131e4:	900d883a 	mov	r6,r18
   131e8:	980f883a 	mov	r7,r19
   131ec:	103fd00e 	bge	r2,zero,13130 <_dtoa_r+0x5b8>
   131f0:	d9001317 	ldw	r4,76(sp)
   131f4:	df001117 	ldw	fp,68(sp)
   131f8:	d9000615 	stw	r4,24(sp)
   131fc:	8009883a 	mov	r4,r16
   13200:	e00b883a 	mov	r5,fp
   13204:	0015f780 	call	15f78 <_Bfree>
   13208:	d9c00617 	ldw	r7,24(sp)
   1320c:	d8c02217 	ldw	r3,136(sp)
   13210:	d9002417 	ldw	r4,144(sp)
   13214:	b0000005 	stb	zero,0(r22)
   13218:	38800044 	addi	r2,r7,1
   1321c:	18800015 	stw	r2,0(r3)
   13220:	203e8426 	beq	r4,zero,12c34 <_dtoa_r+0xbc>
   13224:	25800015 	stw	r22,0(r4)
   13228:	003e8206 	br	12c34 <_dtoa_r+0xbc>
   1322c:	00800434 	movhi	r2,16
   13230:	10bfffc4 	addi	r2,r2,-1
   13234:	90a4703a 	and	r18,r18,r2
   13238:	903e901e 	bne	r18,zero,12c7c <_dtoa_r+0x104>
   1323c:	05c00174 	movhi	r23,5
   13240:	bde03c04 	addi	r23,r23,-32528
   13244:	003e8f06 	br	12c84 <_dtoa_r+0x10c>
   13248:	b8800204 	addi	r2,r23,8
   1324c:	003e9206 	br	12c98 <_dtoa_r+0x120>
   13250:	01400434 	movhi	r5,16
   13254:	297fffc4 	addi	r5,r5,-1
   13258:	894a703a 	and	r5,r17,r5
   1325c:	d9000317 	ldw	r4,12(sp)
   13260:	294ffc34 	orhi	r5,r5,16368
   13264:	a53f0044 	addi	r20,r20,-1023
   13268:	dd400217 	ldw	r21,8(sp)
   1326c:	d8000f15 	stw	zero,60(sp)
   13270:	003eb106 	br	12d38 <_dtoa_r+0x1c0>
   13274:	05c00174 	movhi	r23,5
   13278:	bde03304 	addi	r23,r23,-32564
   1327c:	003e6d06 	br	12c34 <_dtoa_r+0xbc>
   13280:	d8000415 	stw	zero,16(sp)
   13284:	80001115 	stw	zero,68(r16)
   13288:	8009883a 	mov	r4,r16
   1328c:	000b883a 	mov	r5,zero
   13290:	0015ed00 	call	15ed0 <_Balloc>
   13294:	01ffffc4 	movi	r7,-1
   13298:	102f883a 	mov	r23,r2
   1329c:	80801015 	stw	r2,64(r16)
   132a0:	00800044 	movi	r2,1
   132a4:	d9c00915 	stw	r7,36(sp)
   132a8:	d8002115 	stw	zero,132(sp)
   132ac:	d9c00e15 	stw	r7,56(sp)
   132b0:	d8800c15 	stw	r2,48(sp)
   132b4:	d8800117 	ldw	r2,4(sp)
   132b8:	10008b16 	blt	r2,zero,134e8 <_dtoa_r+0x970>
   132bc:	d9000617 	ldw	r4,24(sp)
   132c0:	00c00384 	movi	r3,14
   132c4:	19008816 	blt	r3,r4,134e8 <_dtoa_r+0x970>
   132c8:	200490fa 	slli	r2,r4,3
   132cc:	d9c02117 	ldw	r7,132(sp)
   132d0:	00c00174 	movhi	r3,5
   132d4:	18e06504 	addi	r3,r3,-32364
   132d8:	1885883a 	add	r2,r3,r2
   132dc:	14800017 	ldw	r18,0(r2)
   132e0:	14c00117 	ldw	r19,4(r2)
   132e4:	3801c916 	blt	r7,zero,13a0c <_dtoa_r+0xe94>
   132e8:	d9000317 	ldw	r4,12(sp)
   132ec:	900d883a 	mov	r6,r18
   132f0:	980f883a 	mov	r7,r19
   132f4:	880b883a 	mov	r5,r17
   132f8:	0018de00 	call	18de0 <__divdf3>
   132fc:	180b883a 	mov	r5,r3
   13300:	1009883a 	mov	r4,r2
   13304:	00192440 	call	19244 <__fixdfsi>
   13308:	1009883a 	mov	r4,r2
   1330c:	102b883a 	mov	r21,r2
   13310:	00191700 	call	19170 <__floatsidf>
   13314:	1009883a 	mov	r4,r2
   13318:	180b883a 	mov	r5,r3
   1331c:	900d883a 	mov	r6,r18
   13320:	980f883a 	mov	r7,r19
   13324:	0018afc0 	call	18afc <__muldf3>
   13328:	d9000317 	ldw	r4,12(sp)
   1332c:	880b883a 	mov	r5,r17
   13330:	100d883a 	mov	r6,r2
   13334:	180f883a 	mov	r7,r3
   13338:	0018a9c0 	call	18a9c <__subdf3>
   1333c:	d9c00917 	ldw	r7,36(sp)
   13340:	1009883a 	mov	r4,r2
   13344:	a8800c04 	addi	r2,r21,48
   13348:	b8800005 	stb	r2,0(r23)
   1334c:	01800044 	movi	r6,1
   13350:	180b883a 	mov	r5,r3
   13354:	2005883a 	mov	r2,r4
   13358:	bd800044 	addi	r22,r23,1
   1335c:	39803726 	beq	r7,r6,1343c <_dtoa_r+0x8c4>
   13360:	000d883a 	mov	r6,zero
   13364:	01d00934 	movhi	r7,16420
   13368:	0018afc0 	call	18afc <__muldf3>
   1336c:	1009883a 	mov	r4,r2
   13370:	180b883a 	mov	r5,r3
   13374:	000d883a 	mov	r6,zero
   13378:	000f883a 	mov	r7,zero
   1337c:	1029883a 	mov	r20,r2
   13380:	1823883a 	mov	r17,r3
   13384:	0018f940 	call	18f94 <__eqdf2>
   13388:	103f9c26 	beq	r2,zero,131fc <_dtoa_r+0x684>
   1338c:	dd400917 	ldw	r21,36(sp)
   13390:	dc000415 	stw	r16,16(sp)
   13394:	00000906 	br	133bc <_dtoa_r+0x844>
   13398:	0018afc0 	call	18afc <__muldf3>
   1339c:	1009883a 	mov	r4,r2
   133a0:	180b883a 	mov	r5,r3
   133a4:	000d883a 	mov	r6,zero
   133a8:	000f883a 	mov	r7,zero
   133ac:	1029883a 	mov	r20,r2
   133b0:	1823883a 	mov	r17,r3
   133b4:	0018f940 	call	18f94 <__eqdf2>
   133b8:	10022926 	beq	r2,zero,13c60 <_dtoa_r+0x10e8>
   133bc:	900d883a 	mov	r6,r18
   133c0:	980f883a 	mov	r7,r19
   133c4:	a009883a 	mov	r4,r20
   133c8:	880b883a 	mov	r5,r17
   133cc:	0018de00 	call	18de0 <__divdf3>
   133d0:	180b883a 	mov	r5,r3
   133d4:	1009883a 	mov	r4,r2
   133d8:	00192440 	call	19244 <__fixdfsi>
   133dc:	1009883a 	mov	r4,r2
   133e0:	1021883a 	mov	r16,r2
   133e4:	00191700 	call	19170 <__floatsidf>
   133e8:	1009883a 	mov	r4,r2
   133ec:	180b883a 	mov	r5,r3
   133f0:	900d883a 	mov	r6,r18
   133f4:	980f883a 	mov	r7,r19
   133f8:	0018afc0 	call	18afc <__muldf3>
   133fc:	a009883a 	mov	r4,r20
   13400:	880b883a 	mov	r5,r17
   13404:	100d883a 	mov	r6,r2
   13408:	180f883a 	mov	r7,r3
   1340c:	0018a9c0 	call	18a9c <__subdf3>
   13410:	82400c04 	addi	r9,r16,48
   13414:	b2400005 	stb	r9,0(r22)
   13418:	b5800044 	addi	r22,r22,1
   1341c:	b5d3c83a 	sub	r9,r22,r23
   13420:	000d883a 	mov	r6,zero
   13424:	01d00934 	movhi	r7,16420
   13428:	1009883a 	mov	r4,r2
   1342c:	180b883a 	mov	r5,r3
   13430:	aa7fd91e 	bne	r21,r9,13398 <_dtoa_r+0x820>
   13434:	802b883a 	mov	r21,r16
   13438:	dc000417 	ldw	r16,16(sp)
   1343c:	1009883a 	mov	r4,r2
   13440:	180b883a 	mov	r5,r3
   13444:	100d883a 	mov	r6,r2
   13448:	180f883a 	mov	r7,r3
   1344c:	0018a480 	call	18a48 <__adddf3>
   13450:	9009883a 	mov	r4,r18
   13454:	980b883a 	mov	r5,r19
   13458:	100d883a 	mov	r6,r2
   1345c:	180f883a 	mov	r7,r3
   13460:	1023883a 	mov	r17,r2
   13464:	1829883a 	mov	r20,r3
   13468:	00191140 	call	19114 <__ltdf2>
   1346c:	10000816 	blt	r2,zero,13490 <_dtoa_r+0x918>
   13470:	9009883a 	mov	r4,r18
   13474:	980b883a 	mov	r5,r19
   13478:	880d883a 	mov	r6,r17
   1347c:	a00f883a 	mov	r7,r20
   13480:	0018f940 	call	18f94 <__eqdf2>
   13484:	103f5d1e 	bne	r2,zero,131fc <_dtoa_r+0x684>
   13488:	ad40004c 	andi	r21,r21,1
   1348c:	a83f5b26 	beq	r21,zero,131fc <_dtoa_r+0x684>
   13490:	b53fffc3 	ldbu	r20,-1(r22)
   13494:	b0ffff84 	addi	r3,r22,-2
   13498:	01400e44 	movi	r5,57
   1349c:	00000306 	br	134ac <_dtoa_r+0x934>
   134a0:	1d000003 	ldbu	r20,0(r3)
   134a4:	102d883a 	mov	r22,r2
   134a8:	18ffffc4 	addi	r3,r3,-1
   134ac:	a1003fcc 	andi	r4,r20,255
   134b0:	2100201c 	xori	r4,r4,128
   134b4:	213fe004 	addi	r4,r4,-128
   134b8:	b0bfffc4 	addi	r2,r22,-1
   134bc:	2142ca1e 	bne	r4,r5,13fe8 <_dtoa_r+0x1470>
   134c0:	b8bff71e 	bne	r23,r2,134a0 <_dtoa_r+0x928>
   134c4:	d8800617 	ldw	r2,24(sp)
   134c8:	05000c44 	movi	r20,49
   134cc:	10800044 	addi	r2,r2,1
   134d0:	d8800615 	stw	r2,24(sp)
   134d4:	00800c04 	movi	r2,48
   134d8:	b8800005 	stb	r2,0(r23)
   134dc:	b805883a 	mov	r2,r23
   134e0:	15000005 	stb	r20,0(r2)
   134e4:	003f4506 	br	131fc <_dtoa_r+0x684>
   134e8:	d9c00c17 	ldw	r7,48(sp)
   134ec:	3800c926 	beq	r7,zero,13814 <_dtoa_r+0xc9c>
   134f0:	d9c00417 	ldw	r7,16(sp)
   134f4:	00c00044 	movi	r3,1
   134f8:	19c16c0e 	bge	r3,r7,13aac <_dtoa_r+0xf34>
   134fc:	d9000917 	ldw	r4,36(sp)
   13500:	d9c00a17 	ldw	r7,40(sp)
   13504:	24ffffc4 	addi	r19,r4,-1
   13508:	3cc20716 	blt	r7,r19,13d28 <_dtoa_r+0x11b0>
   1350c:	3ce7c83a 	sub	r19,r7,r19
   13510:	d9c00917 	ldw	r7,36(sp)
   13514:	3802ae16 	blt	r7,zero,13fd0 <_dtoa_r+0x1458>
   13518:	dc800817 	ldw	r18,32(sp)
   1351c:	d8800917 	ldw	r2,36(sp)
   13520:	d8c00817 	ldw	r3,32(sp)
   13524:	d9c00717 	ldw	r7,28(sp)
   13528:	8009883a 	mov	r4,r16
   1352c:	1887883a 	add	r3,r3,r2
   13530:	388f883a 	add	r7,r7,r2
   13534:	01400044 	movi	r5,1
   13538:	d8c00815 	stw	r3,32(sp)
   1353c:	d9c00715 	stw	r7,28(sp)
   13540:	00162d00 	call	162d0 <__i2b>
   13544:	102b883a 	mov	r21,r2
   13548:	90000a26 	beq	r18,zero,13574 <_dtoa_r+0x9fc>
   1354c:	d8800717 	ldw	r2,28(sp)
   13550:	0080080e 	bge	zero,r2,13574 <_dtoa_r+0x9fc>
   13554:	90812b16 	blt	r18,r2,13a04 <_dtoa_r+0xe8c>
   13558:	d8c00817 	ldw	r3,32(sp)
   1355c:	d9000717 	ldw	r4,28(sp)
   13560:	90a5c83a 	sub	r18,r18,r2
   13564:	1887c83a 	sub	r3,r3,r2
   13568:	2089c83a 	sub	r4,r4,r2
   1356c:	d8c00815 	stw	r3,32(sp)
   13570:	d9000715 	stw	r4,28(sp)
   13574:	d9c00a17 	ldw	r7,40(sp)
   13578:	01c0140e 	bge	zero,r7,135cc <_dtoa_r+0xa54>
   1357c:	d8800c17 	ldw	r2,48(sp)
   13580:	1001de26 	beq	r2,zero,13cfc <_dtoa_r+0x1184>
   13584:	04c00e0e 	bge	zero,r19,135c0 <_dtoa_r+0xa48>
   13588:	a80b883a 	mov	r5,r21
   1358c:	8009883a 	mov	r4,r16
   13590:	980d883a 	mov	r6,r19
   13594:	00164ec0 	call	164ec <__pow5mult>
   13598:	e00d883a 	mov	r6,fp
   1359c:	8009883a 	mov	r4,r16
   135a0:	100b883a 	mov	r5,r2
   135a4:	102b883a 	mov	r21,r2
   135a8:	001630c0 	call	1630c <__multiply>
   135ac:	1029883a 	mov	r20,r2
   135b0:	e00b883a 	mov	r5,fp
   135b4:	8009883a 	mov	r4,r16
   135b8:	0015f780 	call	15f78 <_Bfree>
   135bc:	a039883a 	mov	fp,r20
   135c0:	d8c00a17 	ldw	r3,40(sp)
   135c4:	1ccdc83a 	sub	r6,r3,r19
   135c8:	3001291e 	bne	r6,zero,13a70 <_dtoa_r+0xef8>
   135cc:	8009883a 	mov	r4,r16
   135d0:	01400044 	movi	r5,1
   135d4:	00162d00 	call	162d0 <__i2b>
   135d8:	d9000b17 	ldw	r4,44(sp)
   135dc:	1029883a 	mov	r20,r2
   135e0:	0100050e 	bge	zero,r4,135f8 <_dtoa_r+0xa80>
   135e4:	d9800b17 	ldw	r6,44(sp)
   135e8:	8009883a 	mov	r4,r16
   135ec:	100b883a 	mov	r5,r2
   135f0:	00164ec0 	call	164ec <__pow5mult>
   135f4:	1029883a 	mov	r20,r2
   135f8:	d9c00417 	ldw	r7,16(sp)
   135fc:	00800044 	movi	r2,1
   13600:	11c0f00e 	bge	r2,r7,139c4 <_dtoa_r+0xe4c>
   13604:	0023883a 	mov	r17,zero
   13608:	d8800b17 	ldw	r2,44(sp)
   1360c:	1001741e 	bne	r2,zero,13be0 <_dtoa_r+0x1068>
   13610:	00800044 	movi	r2,1
   13614:	d8c00717 	ldw	r3,28(sp)
   13618:	10c5883a 	add	r2,r2,r3
   1361c:	108007cc 	andi	r2,r2,31
   13620:	10008026 	beq	r2,zero,13824 <_dtoa_r+0xcac>
   13624:	01000804 	movi	r4,32
   13628:	2089c83a 	sub	r4,r4,r2
   1362c:	00c00104 	movi	r3,4
   13630:	1902d00e 	bge	r3,r4,14174 <_dtoa_r+0x15fc>
   13634:	d9000817 	ldw	r4,32(sp)
   13638:	d9c00717 	ldw	r7,28(sp)
   1363c:	00c00704 	movi	r3,28
   13640:	1885c83a 	sub	r2,r3,r2
   13644:	2089883a 	add	r4,r4,r2
   13648:	388f883a 	add	r7,r7,r2
   1364c:	d9000815 	stw	r4,32(sp)
   13650:	90a5883a 	add	r18,r18,r2
   13654:	d9c00715 	stw	r7,28(sp)
   13658:	d9c00817 	ldw	r7,32(sp)
   1365c:	01c0050e 	bge	zero,r7,13674 <_dtoa_r+0xafc>
   13660:	e00b883a 	mov	r5,fp
   13664:	8009883a 	mov	r4,r16
   13668:	380d883a 	mov	r6,r7
   1366c:	00166180 	call	16618 <__lshift>
   13670:	1039883a 	mov	fp,r2
   13674:	d8800717 	ldw	r2,28(sp)
   13678:	0080050e 	bge	zero,r2,13690 <_dtoa_r+0xb18>
   1367c:	a00b883a 	mov	r5,r20
   13680:	8009883a 	mov	r4,r16
   13684:	100d883a 	mov	r6,r2
   13688:	00166180 	call	16618 <__lshift>
   1368c:	1029883a 	mov	r20,r2
   13690:	d8c00d17 	ldw	r3,52(sp)
   13694:	1801401e 	bne	r3,zero,13b98 <_dtoa_r+0x1020>
   13698:	d8800917 	ldw	r2,36(sp)
   1369c:	00815a0e 	bge	zero,r2,13c08 <_dtoa_r+0x1090>
   136a0:	d8c00c17 	ldw	r3,48(sp)
   136a4:	18006f1e 	bne	r3,zero,13864 <_dtoa_r+0xcec>
   136a8:	b823883a 	mov	r17,r23
   136ac:	dc800917 	ldw	r18,36(sp)
   136b0:	00000206 	br	136bc <_dtoa_r+0xb44>
   136b4:	0015fa00 	call	15fa0 <__multadd>
   136b8:	1039883a 	mov	fp,r2
   136bc:	e009883a 	mov	r4,fp
   136c0:	a00b883a 	mov	r5,r20
   136c4:	00129700 	call	12970 <quorem>
   136c8:	10800c04 	addi	r2,r2,48
   136cc:	88800005 	stb	r2,0(r17)
   136d0:	8c400044 	addi	r17,r17,1
   136d4:	8dc7c83a 	sub	r3,r17,r23
   136d8:	8009883a 	mov	r4,r16
   136dc:	e00b883a 	mov	r5,fp
   136e0:	01800284 	movi	r6,10
   136e4:	000f883a 	mov	r7,zero
   136e8:	1cbff216 	blt	r3,r18,136b4 <_dtoa_r+0xb3c>
   136ec:	dd800917 	ldw	r22,36(sp)
   136f0:	1007883a 	mov	r3,r2
   136f4:	05823a0e 	bge	zero,r22,13fe0 <_dtoa_r+0x1468>
   136f8:	bdad883a 	add	r22,r23,r22
   136fc:	0023883a 	mov	r17,zero
   13700:	e00b883a 	mov	r5,fp
   13704:	01800044 	movi	r6,1
   13708:	8009883a 	mov	r4,r16
   1370c:	d8c01515 	stw	r3,84(sp)
   13710:	00166180 	call	16618 <__lshift>
   13714:	1009883a 	mov	r4,r2
   13718:	a00b883a 	mov	r5,r20
   1371c:	1039883a 	mov	fp,r2
   13720:	00167740 	call	16774 <__mcmp>
   13724:	d8c01517 	ldw	r3,84(sp)
   13728:	0080d60e 	bge	zero,r2,13a84 <_dtoa_r+0xf0c>
   1372c:	b13fffc3 	ldbu	r4,-1(r22)
   13730:	b0ffff84 	addi	r3,r22,-2
   13734:	01800e44 	movi	r6,57
   13738:	00000306 	br	13748 <_dtoa_r+0xbd0>
   1373c:	19000003 	ldbu	r4,0(r3)
   13740:	102d883a 	mov	r22,r2
   13744:	18ffffc4 	addi	r3,r3,-1
   13748:	21403fcc 	andi	r5,r4,255
   1374c:	2940201c 	xori	r5,r5,128
   13750:	297fe004 	addi	r5,r5,-128
   13754:	b0bfffc4 	addi	r2,r22,-1
   13758:	2981a71e 	bne	r5,r6,13df8 <_dtoa_r+0x1280>
   1375c:	b8bff71e 	bne	r23,r2,1373c <_dtoa_r+0xbc4>
   13760:	d8800617 	ldw	r2,24(sp)
   13764:	10800044 	addi	r2,r2,1
   13768:	d8800615 	stw	r2,24(sp)
   1376c:	00800c44 	movi	r2,49
   13770:	b8800005 	stb	r2,0(r23)
   13774:	8009883a 	mov	r4,r16
   13778:	a00b883a 	mov	r5,r20
   1377c:	0015f780 	call	15f78 <_Bfree>
   13780:	a83e9e26 	beq	r21,zero,131fc <_dtoa_r+0x684>
   13784:	88000426 	beq	r17,zero,13798 <_dtoa_r+0xc20>
   13788:	8d400326 	beq	r17,r21,13798 <_dtoa_r+0xc20>
   1378c:	8009883a 	mov	r4,r16
   13790:	880b883a 	mov	r5,r17
   13794:	0015f780 	call	15f78 <_Bfree>
   13798:	8009883a 	mov	r4,r16
   1379c:	a80b883a 	mov	r5,r21
   137a0:	0015f780 	call	15f78 <_Bfree>
   137a4:	003e9506 	br	131fc <_dtoa_r+0x684>
   137a8:	00c00044 	movi	r3,1
   137ac:	d8c00d15 	stw	r3,52(sp)
   137b0:	003d9f06 	br	12e30 <_dtoa_r+0x2b8>
   137b4:	d9000817 	ldw	r4,32(sp)
   137b8:	d8800617 	ldw	r2,24(sp)
   137bc:	d8000b15 	stw	zero,44(sp)
   137c0:	2089c83a 	sub	r4,r4,r2
   137c4:	0087c83a 	sub	r3,zero,r2
   137c8:	d9000815 	stw	r4,32(sp)
   137cc:	d8c00a15 	stw	r3,40(sp)
   137d0:	003da306 	br	12e60 <_dtoa_r+0x2e8>
   137d4:	0529c83a 	sub	r20,zero,r20
   137d8:	dd000815 	stw	r20,32(sp)
   137dc:	d8000715 	stw	zero,28(sp)
   137e0:	003d9806 	br	12e44 <_dtoa_r+0x2cc>
   137e4:	d9000617 	ldw	r4,24(sp)
   137e8:	00191700 	call	19170 <__floatsidf>
   137ec:	1009883a 	mov	r4,r2
   137f0:	180b883a 	mov	r5,r3
   137f4:	980d883a 	mov	r6,r19
   137f8:	900f883a 	mov	r7,r18
   137fc:	0018ff00 	call	18ff0 <__nedf2>
   13800:	103d7a26 	beq	r2,zero,12dec <_dtoa_r+0x274>
   13804:	d8800617 	ldw	r2,24(sp)
   13808:	10bfffc4 	addi	r2,r2,-1
   1380c:	d8800615 	stw	r2,24(sp)
   13810:	003d7606 	br	12dec <_dtoa_r+0x274>
   13814:	dcc00a17 	ldw	r19,40(sp)
   13818:	dc800817 	ldw	r18,32(sp)
   1381c:	002b883a 	mov	r21,zero
   13820:	003f4906 	br	13548 <_dtoa_r+0x9d0>
   13824:	00800704 	movi	r2,28
   13828:	d8c00817 	ldw	r3,32(sp)
   1382c:	d9000717 	ldw	r4,28(sp)
   13830:	90a5883a 	add	r18,r18,r2
   13834:	1887883a 	add	r3,r3,r2
   13838:	2089883a 	add	r4,r4,r2
   1383c:	d8c00815 	stw	r3,32(sp)
   13840:	d9000715 	stw	r4,28(sp)
   13844:	003f8406 	br	13658 <_dtoa_r+0xae0>
   13848:	d9c00317 	ldw	r7,12(sp)
   1384c:	013efb84 	movi	r4,-1042
   13850:	2509c83a 	sub	r4,r4,r20
   13854:	3908983a 	sll	r4,r7,r4
   13858:	003d3006 	br	12d1c <_dtoa_r+0x1a4>
   1385c:	d8000d15 	stw	zero,52(sp)
   13860:	003d7306 	br	12e30 <_dtoa_r+0x2b8>
   13864:	0480050e 	bge	zero,r18,1387c <_dtoa_r+0xd04>
   13868:	a80b883a 	mov	r5,r21
   1386c:	8009883a 	mov	r4,r16
   13870:	900d883a 	mov	r6,r18
   13874:	00166180 	call	16618 <__lshift>
   13878:	102b883a 	mov	r21,r2
   1387c:	8801611e 	bne	r17,zero,13e04 <_dtoa_r+0x128c>
   13880:	a827883a 	mov	r19,r21
   13884:	d8c00317 	ldw	r3,12(sp)
   13888:	d9000917 	ldw	r4,36(sp)
   1388c:	b8bfffc4 	addi	r2,r23,-1
   13890:	18c0004c 	andi	r3,r3,1
   13894:	1105883a 	add	r2,r2,r4
   13898:	b825883a 	mov	r18,r23
   1389c:	d8800515 	stw	r2,20(sp)
   138a0:	a823883a 	mov	r17,r21
   138a4:	d8c00315 	stw	r3,12(sp)
   138a8:	ddc00715 	stw	r23,28(sp)
   138ac:	e009883a 	mov	r4,fp
   138b0:	a00b883a 	mov	r5,r20
   138b4:	00129700 	call	12970 <quorem>
   138b8:	e009883a 	mov	r4,fp
   138bc:	880b883a 	mov	r5,r17
   138c0:	102d883a 	mov	r22,r2
   138c4:	00167740 	call	16774 <__mcmp>
   138c8:	980d883a 	mov	r6,r19
   138cc:	8009883a 	mov	r4,r16
   138d0:	a00b883a 	mov	r5,r20
   138d4:	102b883a 	mov	r21,r2
   138d8:	00167cc0 	call	167cc <__mdiff>
   138dc:	100d883a 	mov	r6,r2
   138e0:	10800317 	ldw	r2,12(r2)
   138e4:	b5c00c04 	addi	r23,r22,48
   138e8:	10008c26 	beq	r2,zero,13b1c <_dtoa_r+0xfa4>
   138ec:	8009883a 	mov	r4,r16
   138f0:	300b883a 	mov	r5,r6
   138f4:	0015f780 	call	15f78 <_Bfree>
   138f8:	00800044 	movi	r2,1
   138fc:	a8007116 	blt	r21,zero,13ac4 <_dtoa_r+0xf4c>
   13900:	a800041e 	bne	r21,zero,13914 <_dtoa_r+0xd9c>
   13904:	d9c00417 	ldw	r7,16(sp)
   13908:	3800021e 	bne	r7,zero,13914 <_dtoa_r+0xd9c>
   1390c:	d8c00317 	ldw	r3,12(sp)
   13910:	18006c26 	beq	r3,zero,13ac4 <_dtoa_r+0xf4c>
   13914:	00814c16 	blt	zero,r2,13e48 <_dtoa_r+0x12d0>
   13918:	d8c00517 	ldw	r3,20(sp)
   1391c:	95400044 	addi	r21,r18,1
   13920:	95c00005 	stb	r23,0(r18)
   13924:	a82d883a 	mov	r22,r21
   13928:	90c14d26 	beq	r18,r3,13e60 <_dtoa_r+0x12e8>
   1392c:	e00b883a 	mov	r5,fp
   13930:	8009883a 	mov	r4,r16
   13934:	01800284 	movi	r6,10
   13938:	000f883a 	mov	r7,zero
   1393c:	0015fa00 	call	15fa0 <__multadd>
   13940:	1039883a 	mov	fp,r2
   13944:	8cc08b26 	beq	r17,r19,13b74 <_dtoa_r+0xffc>
   13948:	880b883a 	mov	r5,r17
   1394c:	01800284 	movi	r6,10
   13950:	000f883a 	mov	r7,zero
   13954:	8009883a 	mov	r4,r16
   13958:	0015fa00 	call	15fa0 <__multadd>
   1395c:	980b883a 	mov	r5,r19
   13960:	8009883a 	mov	r4,r16
   13964:	01800284 	movi	r6,10
   13968:	000f883a 	mov	r7,zero
   1396c:	1023883a 	mov	r17,r2
   13970:	0015fa00 	call	15fa0 <__multadd>
   13974:	1027883a 	mov	r19,r2
   13978:	a825883a 	mov	r18,r21
   1397c:	003fcb06 	br	138ac <_dtoa_r+0xd34>
   13980:	d9c00417 	ldw	r7,16(sp)
   13984:	00800104 	movi	r2,4
   13988:	3880e426 	beq	r7,r2,13d1c <_dtoa_r+0x11a4>
   1398c:	00800144 	movi	r2,5
   13990:	38be3c1e 	bne	r7,r2,13284 <_dtoa_r+0x70c>
   13994:	00c00044 	movi	r3,1
   13998:	d8c00c15 	stw	r3,48(sp)
   1399c:	d9c02117 	ldw	r7,132(sp)
   139a0:	d8800617 	ldw	r2,24(sp)
   139a4:	388f883a 	add	r7,r7,r2
   139a8:	3c800044 	addi	r18,r7,1
   139ac:	d9c00e15 	stw	r7,56(sp)
   139b0:	dc800915 	stw	r18,36(sp)
   139b4:	04bd3e16 	blt	zero,r18,12eb0 <_dtoa_r+0x338>
   139b8:	80001115 	stw	zero,68(r16)
   139bc:	000b883a 	mov	r5,zero
   139c0:	003d4606 	br	12edc <_dtoa_r+0x364>
   139c4:	d8c00317 	ldw	r3,12(sp)
   139c8:	183f0e1e 	bne	r3,zero,13604 <_dtoa_r+0xa8c>
   139cc:	00c00434 	movhi	r3,16
   139d0:	18ffffc4 	addi	r3,r3,-1
   139d4:	88c6703a 	and	r3,r17,r3
   139d8:	183f0a1e 	bne	r3,zero,13604 <_dtoa_r+0xa8c>
   139dc:	8c5ffc2c 	andhi	r17,r17,32752
   139e0:	883f0826 	beq	r17,zero,13604 <_dtoa_r+0xa8c>
   139e4:	d9000817 	ldw	r4,32(sp)
   139e8:	d9c00717 	ldw	r7,28(sp)
   139ec:	1023883a 	mov	r17,r2
   139f0:	2089883a 	add	r4,r4,r2
   139f4:	388f883a 	add	r7,r7,r2
   139f8:	d9000815 	stw	r4,32(sp)
   139fc:	d9c00715 	stw	r7,28(sp)
   13a00:	003f0106 	br	13608 <_dtoa_r+0xa90>
   13a04:	9005883a 	mov	r2,r18
   13a08:	003ed306 	br	13558 <_dtoa_r+0x9e0>
   13a0c:	d8800917 	ldw	r2,36(sp)
   13a10:	00be3516 	blt	zero,r2,132e8 <_dtoa_r+0x770>
   13a14:	1000b61e 	bne	r2,zero,13cf0 <_dtoa_r+0x1178>
   13a18:	9009883a 	mov	r4,r18
   13a1c:	980b883a 	mov	r5,r19
   13a20:	000d883a 	mov	r6,zero
   13a24:	01d00534 	movhi	r7,16404
   13a28:	0018afc0 	call	18afc <__muldf3>
   13a2c:	d9800317 	ldw	r6,12(sp)
   13a30:	1009883a 	mov	r4,r2
   13a34:	180b883a 	mov	r5,r3
   13a38:	880f883a 	mov	r7,r17
   13a3c:	00190b00 	call	190b0 <__gedf2>
   13a40:	0029883a 	mov	r20,zero
   13a44:	002b883a 	mov	r21,zero
   13a48:	10007e16 	blt	r2,zero,13c44 <_dtoa_r+0x10cc>
   13a4c:	d8802117 	ldw	r2,132(sp)
   13a50:	b82d883a 	mov	r22,r23
   13a54:	0084303a 	nor	r2,zero,r2
   13a58:	d8800615 	stw	r2,24(sp)
   13a5c:	8009883a 	mov	r4,r16
   13a60:	a00b883a 	mov	r5,r20
   13a64:	0015f780 	call	15f78 <_Bfree>
   13a68:	a83f4b1e 	bne	r21,zero,13798 <_dtoa_r+0xc20>
   13a6c:	003de306 	br	131fc <_dtoa_r+0x684>
   13a70:	e00b883a 	mov	r5,fp
   13a74:	8009883a 	mov	r4,r16
   13a78:	00164ec0 	call	164ec <__pow5mult>
   13a7c:	1039883a 	mov	fp,r2
   13a80:	003ed206 	br	135cc <_dtoa_r+0xa54>
   13a84:	1000021e 	bne	r2,zero,13a90 <_dtoa_r+0xf18>
   13a88:	18c0004c 	andi	r3,r3,1
   13a8c:	183f271e 	bne	r3,zero,1372c <_dtoa_r+0xbb4>
   13a90:	01000c04 	movi	r4,48
   13a94:	00000106 	br	13a9c <_dtoa_r+0xf24>
   13a98:	102d883a 	mov	r22,r2
   13a9c:	b0bfffc4 	addi	r2,r22,-1
   13aa0:	10c00007 	ldb	r3,0(r2)
   13aa4:	193ffc26 	beq	r3,r4,13a98 <_dtoa_r+0xf20>
   13aa8:	003f3206 	br	13774 <_dtoa_r+0xbfc>
   13aac:	d8c00f17 	ldw	r3,60(sp)
   13ab0:	18015026 	beq	r3,zero,13ff4 <_dtoa_r+0x147c>
   13ab4:	10810cc4 	addi	r2,r2,1075
   13ab8:	dcc00a17 	ldw	r19,40(sp)
   13abc:	dc800817 	ldw	r18,32(sp)
   13ac0:	003e9706 	br	13520 <_dtoa_r+0x9a8>
   13ac4:	b807883a 	mov	r3,r23
   13ac8:	182b883a 	mov	r21,r3
   13acc:	ddc00717 	ldw	r23,28(sp)
   13ad0:	00800e0e 	bge	zero,r2,13b0c <_dtoa_r+0xf94>
   13ad4:	e00b883a 	mov	r5,fp
   13ad8:	01800044 	movi	r6,1
   13adc:	8009883a 	mov	r4,r16
   13ae0:	d8c01515 	stw	r3,84(sp)
   13ae4:	00166180 	call	16618 <__lshift>
   13ae8:	1009883a 	mov	r4,r2
   13aec:	a00b883a 	mov	r5,r20
   13af0:	1039883a 	mov	fp,r2
   13af4:	00167740 	call	16774 <__mcmp>
   13af8:	d8c01517 	ldw	r3,84(sp)
   13afc:	0081880e 	bge	zero,r2,14120 <_dtoa_r+0x15a8>
   13b00:	00800e44 	movi	r2,57
   13b04:	b0c00c44 	addi	r3,r22,49
   13b08:	a8816326 	beq	r21,r2,14098 <_dtoa_r+0x1520>
   13b0c:	90c00005 	stb	r3,0(r18)
   13b10:	95800044 	addi	r22,r18,1
   13b14:	982b883a 	mov	r21,r19
   13b18:	003f1606 	br	13774 <_dtoa_r+0xbfc>
   13b1c:	300b883a 	mov	r5,r6
   13b20:	e009883a 	mov	r4,fp
   13b24:	d9801515 	stw	r6,84(sp)
   13b28:	00167740 	call	16774 <__mcmp>
   13b2c:	d9801517 	ldw	r6,84(sp)
   13b30:	8009883a 	mov	r4,r16
   13b34:	d8801515 	stw	r2,84(sp)
   13b38:	300b883a 	mov	r5,r6
   13b3c:	0015f780 	call	15f78 <_Bfree>
   13b40:	d8801517 	ldw	r2,84(sp)
   13b44:	103f6d1e 	bne	r2,zero,138fc <_dtoa_r+0xd84>
   13b48:	d9c00417 	ldw	r7,16(sp)
   13b4c:	383f6b1e 	bne	r7,zero,138fc <_dtoa_r+0xd84>
   13b50:	d8c00317 	ldw	r3,12(sp)
   13b54:	183f691e 	bne	r3,zero,138fc <_dtoa_r+0xd84>
   13b58:	b807883a 	mov	r3,r23
   13b5c:	00800e44 	movi	r2,57
   13b60:	ddc00717 	ldw	r23,28(sp)
   13b64:	18814c26 	beq	r3,r2,14098 <_dtoa_r+0x1520>
   13b68:	057fe80e 	bge	zero,r21,13b0c <_dtoa_r+0xf94>
   13b6c:	b0c00c44 	addi	r3,r22,49
   13b70:	003fe606 	br	13b0c <_dtoa_r+0xf94>
   13b74:	880b883a 	mov	r5,r17
   13b78:	8009883a 	mov	r4,r16
   13b7c:	01800284 	movi	r6,10
   13b80:	000f883a 	mov	r7,zero
   13b84:	0015fa00 	call	15fa0 <__multadd>
   13b88:	1023883a 	mov	r17,r2
   13b8c:	1027883a 	mov	r19,r2
   13b90:	a825883a 	mov	r18,r21
   13b94:	003f4506 	br	138ac <_dtoa_r+0xd34>
   13b98:	e009883a 	mov	r4,fp
   13b9c:	a00b883a 	mov	r5,r20
   13ba0:	00167740 	call	16774 <__mcmp>
   13ba4:	103ebc0e 	bge	r2,zero,13698 <_dtoa_r+0xb20>
   13ba8:	e00b883a 	mov	r5,fp
   13bac:	8009883a 	mov	r4,r16
   13bb0:	01800284 	movi	r6,10
   13bb4:	000f883a 	mov	r7,zero
   13bb8:	0015fa00 	call	15fa0 <__multadd>
   13bbc:	1039883a 	mov	fp,r2
   13bc0:	d8800617 	ldw	r2,24(sp)
   13bc4:	d8c00c17 	ldw	r3,48(sp)
   13bc8:	10bfffc4 	addi	r2,r2,-1
   13bcc:	d8800615 	stw	r2,24(sp)
   13bd0:	1801571e 	bne	r3,zero,14130 <_dtoa_r+0x15b8>
   13bd4:	d9c00e17 	ldw	r7,56(sp)
   13bd8:	d9c00915 	stw	r7,36(sp)
   13bdc:	003eae06 	br	13698 <_dtoa_r+0xb20>
   13be0:	a0800417 	ldw	r2,16(r20)
   13be4:	10800104 	addi	r2,r2,4
   13be8:	1085883a 	add	r2,r2,r2
   13bec:	1085883a 	add	r2,r2,r2
   13bf0:	a085883a 	add	r2,r20,r2
   13bf4:	11000017 	ldw	r4,0(r2)
   13bf8:	00161b80 	call	161b8 <__hi0bits>
   13bfc:	00c00804 	movi	r3,32
   13c00:	1885c83a 	sub	r2,r3,r2
   13c04:	003e8306 	br	13614 <_dtoa_r+0xa9c>
   13c08:	d9c00417 	ldw	r7,16(sp)
   13c0c:	00800084 	movi	r2,2
   13c10:	11fea30e 	bge	r2,r7,136a0 <_dtoa_r+0xb28>
   13c14:	d8800917 	ldw	r2,36(sp)
   13c18:	103f8c1e 	bne	r2,zero,13a4c <_dtoa_r+0xed4>
   13c1c:	a00b883a 	mov	r5,r20
   13c20:	8009883a 	mov	r4,r16
   13c24:	01800144 	movi	r6,5
   13c28:	000f883a 	mov	r7,zero
   13c2c:	0015fa00 	call	15fa0 <__multadd>
   13c30:	e009883a 	mov	r4,fp
   13c34:	100b883a 	mov	r5,r2
   13c38:	1029883a 	mov	r20,r2
   13c3c:	00167740 	call	16774 <__mcmp>
   13c40:	00bf820e 	bge	zero,r2,13a4c <_dtoa_r+0xed4>
   13c44:	00800c44 	movi	r2,49
   13c48:	b8800005 	stb	r2,0(r23)
   13c4c:	d8800617 	ldw	r2,24(sp)
   13c50:	bd800044 	addi	r22,r23,1
   13c54:	10800044 	addi	r2,r2,1
   13c58:	d8800615 	stw	r2,24(sp)
   13c5c:	003f7f06 	br	13a5c <_dtoa_r+0xee4>
   13c60:	dc000417 	ldw	r16,16(sp)
   13c64:	003d6506 	br	131fc <_dtoa_r+0x684>
   13c68:	9009883a 	mov	r4,r18
   13c6c:	00191700 	call	19170 <__floatsidf>
   13c70:	1009883a 	mov	r4,r2
   13c74:	180b883a 	mov	r5,r3
   13c78:	980d883a 	mov	r6,r19
   13c7c:	a00f883a 	mov	r7,r20
   13c80:	0018afc0 	call	18afc <__muldf3>
   13c84:	1009883a 	mov	r4,r2
   13c88:	180b883a 	mov	r5,r3
   13c8c:	000d883a 	mov	r6,zero
   13c90:	01d00734 	movhi	r7,16412
   13c94:	0018a480 	call	18a48 <__adddf3>
   13c98:	057f3034 	movhi	r21,64704
   13c9c:	1025883a 	mov	r18,r2
   13ca0:	1d6b883a 	add	r21,r3,r21
   13ca4:	9809883a 	mov	r4,r19
   13ca8:	a00b883a 	mov	r5,r20
   13cac:	000d883a 	mov	r6,zero
   13cb0:	01d00534 	movhi	r7,16404
   13cb4:	0018a9c0 	call	18a9c <__subdf3>
   13cb8:	1009883a 	mov	r4,r2
   13cbc:	180b883a 	mov	r5,r3
   13cc0:	900d883a 	mov	r6,r18
   13cc4:	a80f883a 	mov	r7,r21
   13cc8:	1027883a 	mov	r19,r2
   13ccc:	1829883a 	mov	r20,r3
   13cd0:	001904c0 	call	1904c <__gtdf2>
   13cd4:	00806616 	blt	zero,r2,13e70 <_dtoa_r+0x12f8>
   13cd8:	a9e0003c 	xorhi	r7,r21,32768
   13cdc:	9809883a 	mov	r4,r19
   13ce0:	a00b883a 	mov	r5,r20
   13ce4:	900d883a 	mov	r6,r18
   13ce8:	00191140 	call	19114 <__ltdf2>
   13cec:	103d710e 	bge	r2,zero,132b4 <_dtoa_r+0x73c>
   13cf0:	0029883a 	mov	r20,zero
   13cf4:	002b883a 	mov	r21,zero
   13cf8:	003f5406 	br	13a4c <_dtoa_r+0xed4>
   13cfc:	d9800a17 	ldw	r6,40(sp)
   13d00:	e00b883a 	mov	r5,fp
   13d04:	8009883a 	mov	r4,r16
   13d08:	00164ec0 	call	164ec <__pow5mult>
   13d0c:	1039883a 	mov	fp,r2
   13d10:	003e2e06 	br	135cc <_dtoa_r+0xa54>
   13d14:	d8000c15 	stw	zero,48(sp)
   13d18:	003f2006 	br	1399c <_dtoa_r+0xe24>
   13d1c:	00800044 	movi	r2,1
   13d20:	d8800c15 	stw	r2,48(sp)
   13d24:	003c5d06 	br	12e9c <_dtoa_r+0x324>
   13d28:	d8c00a17 	ldw	r3,40(sp)
   13d2c:	d9000b17 	ldw	r4,44(sp)
   13d30:	dcc00a15 	stw	r19,40(sp)
   13d34:	98c5c83a 	sub	r2,r19,r3
   13d38:	2089883a 	add	r4,r4,r2
   13d3c:	d9000b15 	stw	r4,44(sp)
   13d40:	0027883a 	mov	r19,zero
   13d44:	003df206 	br	13510 <_dtoa_r+0x998>
   13d48:	d9000317 	ldw	r4,12(sp)
   13d4c:	8829883a 	mov	r20,r17
   13d50:	04800084 	movi	r18,2
   13d54:	d9001015 	stw	r4,64(sp)
   13d58:	003c8106 	br	12f60 <_dtoa_r+0x3e8>
   13d5c:	04800044 	movi	r18,1
   13d60:	dc800e15 	stw	r18,56(sp)
   13d64:	dc800915 	stw	r18,36(sp)
   13d68:	dc802115 	stw	r18,132(sp)
   13d6c:	003f1206 	br	139b8 <_dtoa_r+0xe40>
   13d70:	d8800617 	ldw	r2,24(sp)
   13d74:	00abc83a 	sub	r21,zero,r2
   13d78:	a800a426 	beq	r21,zero,1400c <_dtoa_r+0x1494>
   13d7c:	a88003cc 	andi	r2,r21,15
   13d80:	100490fa 	slli	r2,r2,3
   13d84:	00c00174 	movhi	r3,5
   13d88:	18e06504 	addi	r3,r3,-32364
   13d8c:	d9000317 	ldw	r4,12(sp)
   13d90:	1885883a 	add	r2,r3,r2
   13d94:	11800017 	ldw	r6,0(r2)
   13d98:	11c00117 	ldw	r7,4(r2)
   13d9c:	a82bd13a 	srai	r21,r21,4
   13da0:	880b883a 	mov	r5,r17
   13da4:	0018afc0 	call	18afc <__muldf3>
   13da8:	1027883a 	mov	r19,r2
   13dac:	1829883a 	mov	r20,r3
   13db0:	a800e826 	beq	r21,zero,14154 <_dtoa_r+0x15dc>
   13db4:	05800174 	movhi	r22,5
   13db8:	b5a05b04 	addi	r22,r22,-32404
   13dbc:	04800084 	movi	r18,2
   13dc0:	a980004c 	andi	r6,r21,1
   13dc4:	1009883a 	mov	r4,r2
   13dc8:	a82bd07a 	srai	r21,r21,1
   13dcc:	180b883a 	mov	r5,r3
   13dd0:	30000426 	beq	r6,zero,13de4 <_dtoa_r+0x126c>
   13dd4:	b1800017 	ldw	r6,0(r22)
   13dd8:	b1c00117 	ldw	r7,4(r22)
   13ddc:	94800044 	addi	r18,r18,1
   13de0:	0018afc0 	call	18afc <__muldf3>
   13de4:	b5800204 	addi	r22,r22,8
   13de8:	a83ff51e 	bne	r21,zero,13dc0 <_dtoa_r+0x1248>
   13dec:	1027883a 	mov	r19,r2
   13df0:	1829883a 	mov	r20,r3
   13df4:	003c7306 	br	12fc4 <_dtoa_r+0x44c>
   13df8:	21000044 	addi	r4,r4,1
   13dfc:	11000005 	stb	r4,0(r2)
   13e00:	003e5c06 	br	13774 <_dtoa_r+0xbfc>
   13e04:	a9400117 	ldw	r5,4(r21)
   13e08:	8009883a 	mov	r4,r16
   13e0c:	0015ed00 	call	15ed0 <_Balloc>
   13e10:	a9800417 	ldw	r6,16(r21)
   13e14:	11000304 	addi	r4,r2,12
   13e18:	a9400304 	addi	r5,r21,12
   13e1c:	31800084 	addi	r6,r6,2
   13e20:	318d883a 	add	r6,r6,r6
   13e24:	318d883a 	add	r6,r6,r6
   13e28:	1023883a 	mov	r17,r2
   13e2c:	0015bd40 	call	15bd4 <memcpy>
   13e30:	8009883a 	mov	r4,r16
   13e34:	880b883a 	mov	r5,r17
   13e38:	01800044 	movi	r6,1
   13e3c:	00166180 	call	16618 <__lshift>
   13e40:	1027883a 	mov	r19,r2
   13e44:	003e8f06 	br	13884 <_dtoa_r+0xd0c>
   13e48:	b807883a 	mov	r3,r23
   13e4c:	00800e44 	movi	r2,57
   13e50:	ddc00717 	ldw	r23,28(sp)
   13e54:	18809026 	beq	r3,r2,14098 <_dtoa_r+0x1520>
   13e58:	18c00044 	addi	r3,r3,1
   13e5c:	003f2b06 	br	13b0c <_dtoa_r+0xf94>
   13e60:	b807883a 	mov	r3,r23
   13e64:	982b883a 	mov	r21,r19
   13e68:	ddc00717 	ldw	r23,28(sp)
   13e6c:	003e2406 	br	13700 <_dtoa_r+0xb88>
   13e70:	0029883a 	mov	r20,zero
   13e74:	002b883a 	mov	r21,zero
   13e78:	003f7206 	br	13c44 <_dtoa_r+0x10cc>
   13e7c:	593fffc4 	addi	r4,r11,-1
   13e80:	200490fa 	slli	r2,r4,3
   13e84:	00c00174 	movhi	r3,5
   13e88:	18e06504 	addi	r3,r3,-32364
   13e8c:	d9001015 	stw	r4,64(sp)
   13e90:	1885883a 	add	r2,r3,r2
   13e94:	11000017 	ldw	r4,0(r2)
   13e98:	11400117 	ldw	r5,4(r2)
   13e9c:	900d883a 	mov	r6,r18
   13ea0:	a80f883a 	mov	r7,r21
   13ea4:	dac01615 	stw	r11,88(sp)
   13ea8:	0018afc0 	call	18afc <__muldf3>
   13eac:	a00b883a 	mov	r5,r20
   13eb0:	9809883a 	mov	r4,r19
   13eb4:	d8c01215 	stw	r3,72(sp)
   13eb8:	d8801115 	stw	r2,68(sp)
   13ebc:	00192440 	call	19244 <__fixdfsi>
   13ec0:	1009883a 	mov	r4,r2
   13ec4:	1025883a 	mov	r18,r2
   13ec8:	00191700 	call	19170 <__floatsidf>
   13ecc:	9809883a 	mov	r4,r19
   13ed0:	a00b883a 	mov	r5,r20
   13ed4:	100d883a 	mov	r6,r2
   13ed8:	180f883a 	mov	r7,r3
   13edc:	94800c04 	addi	r18,r18,48
   13ee0:	0018a9c0 	call	18a9c <__subdf3>
   13ee4:	bc800005 	stb	r18,0(r23)
   13ee8:	dac01617 	ldw	r11,88(sp)
   13eec:	102b883a 	mov	r21,r2
   13ef0:	00800044 	movi	r2,1
   13ef4:	bd800044 	addi	r22,r23,1
   13ef8:	1815883a 	mov	r10,r3
   13efc:	58802226 	beq	r11,r2,13f88 <_dtoa_r+0x1410>
   13f00:	bad7883a 	add	r11,r23,r11
   13f04:	dc001415 	stw	r16,80(sp)
   13f08:	a805883a 	mov	r2,r21
   13f0c:	b027883a 	mov	r19,r22
   13f10:	5821883a 	mov	r16,r11
   13f14:	882b883a 	mov	r21,r17
   13f18:	000d883a 	mov	r6,zero
   13f1c:	01d00934 	movhi	r7,16420
   13f20:	1009883a 	mov	r4,r2
   13f24:	180b883a 	mov	r5,r3
   13f28:	0018afc0 	call	18afc <__muldf3>
   13f2c:	180b883a 	mov	r5,r3
   13f30:	1009883a 	mov	r4,r2
   13f34:	1829883a 	mov	r20,r3
   13f38:	1023883a 	mov	r17,r2
   13f3c:	00192440 	call	19244 <__fixdfsi>
   13f40:	1009883a 	mov	r4,r2
   13f44:	1025883a 	mov	r18,r2
   13f48:	00191700 	call	19170 <__floatsidf>
   13f4c:	8809883a 	mov	r4,r17
   13f50:	a00b883a 	mov	r5,r20
   13f54:	100d883a 	mov	r6,r2
   13f58:	180f883a 	mov	r7,r3
   13f5c:	94800c04 	addi	r18,r18,48
   13f60:	0018a9c0 	call	18a9c <__subdf3>
   13f64:	9cc00044 	addi	r19,r19,1
   13f68:	9cbfffc5 	stb	r18,-1(r19)
   13f6c:	9c3fea1e 	bne	r19,r16,13f18 <_dtoa_r+0x13a0>
   13f70:	1815883a 	mov	r10,r3
   13f74:	d8c01017 	ldw	r3,64(sp)
   13f78:	dc001417 	ldw	r16,80(sp)
   13f7c:	a823883a 	mov	r17,r21
   13f80:	b0ed883a 	add	r22,r22,r3
   13f84:	102b883a 	mov	r21,r2
   13f88:	d9001117 	ldw	r4,68(sp)
   13f8c:	d9401217 	ldw	r5,72(sp)
   13f90:	000d883a 	mov	r6,zero
   13f94:	01cff834 	movhi	r7,16352
   13f98:	da801515 	stw	r10,84(sp)
   13f9c:	0018a480 	call	18a48 <__adddf3>
   13fa0:	da801517 	ldw	r10,84(sp)
   13fa4:	1009883a 	mov	r4,r2
   13fa8:	180b883a 	mov	r5,r3
   13fac:	500f883a 	mov	r7,r10
   13fb0:	a80d883a 	mov	r6,r21
   13fb4:	00191140 	call	19114 <__ltdf2>
   13fb8:	da801517 	ldw	r10,84(sp)
   13fbc:	10003b0e 	bge	r2,zero,140ac <_dtoa_r+0x1534>
   13fc0:	d9c01317 	ldw	r7,76(sp)
   13fc4:	b53fffc3 	ldbu	r20,-1(r22)
   13fc8:	d9c00615 	stw	r7,24(sp)
   13fcc:	003d3106 	br	13494 <_dtoa_r+0x91c>
   13fd0:	d8800817 	ldw	r2,32(sp)
   13fd4:	11e5c83a 	sub	r18,r2,r7
   13fd8:	0005883a 	mov	r2,zero
   13fdc:	003d5006 	br	13520 <_dtoa_r+0x9a8>
   13fe0:	05800044 	movi	r22,1
   13fe4:	003dc406 	br	136f8 <_dtoa_r+0xb80>
   13fe8:	a5000044 	addi	r20,r20,1
   13fec:	15000005 	stb	r20,0(r2)
   13ff0:	003c8206 	br	131fc <_dtoa_r+0x684>
   13ff4:	d8800217 	ldw	r2,8(sp)
   13ff8:	00c00d84 	movi	r3,54
   13ffc:	dcc00a17 	ldw	r19,40(sp)
   14000:	1885c83a 	sub	r2,r3,r2
   14004:	dc800817 	ldw	r18,32(sp)
   14008:	003d4506 	br	13520 <_dtoa_r+0x9a8>
   1400c:	dcc00317 	ldw	r19,12(sp)
   14010:	8829883a 	mov	r20,r17
   14014:	04800084 	movi	r18,2
   14018:	003bea06 	br	12fc4 <_dtoa_r+0x44c>
   1401c:	d9000917 	ldw	r4,36(sp)
   14020:	203f1126 	beq	r4,zero,13c68 <_dtoa_r+0x10f0>
   14024:	d9c00e17 	ldw	r7,56(sp)
   14028:	01fca20e 	bge	zero,r7,132b4 <_dtoa_r+0x73c>
   1402c:	a00b883a 	mov	r5,r20
   14030:	9809883a 	mov	r4,r19
   14034:	000d883a 	mov	r6,zero
   14038:	01d00934 	movhi	r7,16420
   1403c:	0018afc0 	call	18afc <__muldf3>
   14040:	91000044 	addi	r4,r18,1
   14044:	1027883a 	mov	r19,r2
   14048:	1829883a 	mov	r20,r3
   1404c:	00191700 	call	19170 <__floatsidf>
   14050:	9809883a 	mov	r4,r19
   14054:	a00b883a 	mov	r5,r20
   14058:	100d883a 	mov	r6,r2
   1405c:	180f883a 	mov	r7,r3
   14060:	0018afc0 	call	18afc <__muldf3>
   14064:	1009883a 	mov	r4,r2
   14068:	180b883a 	mov	r5,r3
   1406c:	000d883a 	mov	r6,zero
   14070:	01d00734 	movhi	r7,16412
   14074:	0018a480 	call	18a48 <__adddf3>
   14078:	1025883a 	mov	r18,r2
   1407c:	d8800617 	ldw	r2,24(sp)
   14080:	057f3034 	movhi	r21,64704
   14084:	1d6b883a 	add	r21,r3,r21
   14088:	10bfffc4 	addi	r2,r2,-1
   1408c:	d8801315 	stw	r2,76(sp)
   14090:	dac00e17 	ldw	r11,56(sp)
   14094:	003be706 	br	13034 <_dtoa_r+0x4bc>
   14098:	01000e44 	movi	r4,57
   1409c:	91000005 	stb	r4,0(r18)
   140a0:	95800044 	addi	r22,r18,1
   140a4:	982b883a 	mov	r21,r19
   140a8:	003da106 	br	13730 <_dtoa_r+0xbb8>
   140ac:	d9801117 	ldw	r6,68(sp)
   140b0:	d9c01217 	ldw	r7,72(sp)
   140b4:	0009883a 	mov	r4,zero
   140b8:	014ff834 	movhi	r5,16352
   140bc:	da801515 	stw	r10,84(sp)
   140c0:	0018a9c0 	call	18a9c <__subdf3>
   140c4:	da801517 	ldw	r10,84(sp)
   140c8:	1009883a 	mov	r4,r2
   140cc:	180b883a 	mov	r5,r3
   140d0:	a80d883a 	mov	r6,r21
   140d4:	500f883a 	mov	r7,r10
   140d8:	001904c0 	call	1904c <__gtdf2>
   140dc:	00bc750e 	bge	zero,r2,132b4 <_dtoa_r+0x73c>
   140e0:	01000c04 	movi	r4,48
   140e4:	00000106 	br	140ec <_dtoa_r+0x1574>
   140e8:	102d883a 	mov	r22,r2
   140ec:	b0bfffc4 	addi	r2,r22,-1
   140f0:	10c00007 	ldb	r3,0(r2)
   140f4:	193ffc26 	beq	r3,r4,140e8 <_dtoa_r+0x1570>
   140f8:	d8801317 	ldw	r2,76(sp)
   140fc:	d8800615 	stw	r2,24(sp)
   14100:	003c3e06 	br	131fc <_dtoa_r+0x684>
   14104:	d9001317 	ldw	r4,76(sp)
   14108:	df001117 	ldw	fp,68(sp)
   1410c:	d9000615 	stw	r4,24(sp)
   14110:	003ce006 	br	13494 <_dtoa_r+0x91c>
   14114:	df001117 	ldw	fp,68(sp)
   14118:	dc401217 	ldw	r17,72(sp)
   1411c:	003c6506 	br	132b4 <_dtoa_r+0x73c>
   14120:	103e7a1e 	bne	r2,zero,13b0c <_dtoa_r+0xf94>
   14124:	1880004c 	andi	r2,r3,1
   14128:	103e7826 	beq	r2,zero,13b0c <_dtoa_r+0xf94>
   1412c:	003e7406 	br	13b00 <_dtoa_r+0xf88>
   14130:	8009883a 	mov	r4,r16
   14134:	a80b883a 	mov	r5,r21
   14138:	01800284 	movi	r6,10
   1413c:	000f883a 	mov	r7,zero
   14140:	0015fa00 	call	15fa0 <__multadd>
   14144:	d9000e17 	ldw	r4,56(sp)
   14148:	102b883a 	mov	r21,r2
   1414c:	d9000915 	stw	r4,36(sp)
   14150:	003d5106 	br	13698 <_dtoa_r+0xb20>
   14154:	04800084 	movi	r18,2
   14158:	003b9a06 	br	12fc4 <_dtoa_r+0x44c>
   1415c:	d8c01317 	ldw	r3,76(sp)
   14160:	d8c00615 	stw	r3,24(sp)
   14164:	003ccb06 	br	13494 <_dtoa_r+0x91c>
   14168:	d8c01317 	ldw	r3,76(sp)
   1416c:	d8c00615 	stw	r3,24(sp)
   14170:	003c2206 	br	131fc <_dtoa_r+0x684>
   14174:	20fd3826 	beq	r4,r3,13658 <_dtoa_r+0xae0>
   14178:	00c00f04 	movi	r3,60
   1417c:	1885c83a 	sub	r2,r3,r2
   14180:	003da906 	br	13828 <_dtoa_r+0xcb0>
   14184:	000b883a 	mov	r5,zero
   14188:	003b5406 	br	12edc <_dtoa_r+0x364>
   1418c:	04c00044 	movi	r19,1
   14190:	003b3b06 	br	12e80 <_dtoa_r+0x308>

00014194 <_fflush_r>:
   14194:	defffb04 	addi	sp,sp,-20
   14198:	dcc00315 	stw	r19,12(sp)
   1419c:	dc400115 	stw	r17,4(sp)
   141a0:	dfc00415 	stw	ra,16(sp)
   141a4:	dc800215 	stw	r18,8(sp)
   141a8:	dc000015 	stw	r16,0(sp)
   141ac:	2027883a 	mov	r19,r4
   141b0:	2823883a 	mov	r17,r5
   141b4:	20000226 	beq	r4,zero,141c0 <_fflush_r+0x2c>
   141b8:	20800e17 	ldw	r2,56(r4)
   141bc:	10005726 	beq	r2,zero,1431c <_fflush_r+0x188>
   141c0:	8880030b 	ldhu	r2,12(r17)
   141c4:	10c0020c 	andi	r3,r2,8
   141c8:	18ffffcc 	andi	r3,r3,65535
   141cc:	18e0001c 	xori	r3,r3,32768
   141d0:	18e00004 	addi	r3,r3,-32768
   141d4:	1800311e 	bne	r3,zero,1429c <_fflush_r+0x108>
   141d8:	89000117 	ldw	r4,4(r17)
   141dc:	10c20014 	ori	r3,r2,2048
   141e0:	88c0030d 	sth	r3,12(r17)
   141e4:	180b883a 	mov	r5,r3
   141e8:	0100520e 	bge	zero,r4,14334 <_fflush_r+0x1a0>
   141ec:	88c00a17 	ldw	r3,40(r17)
   141f0:	18002226 	beq	r3,zero,1427c <_fflush_r+0xe8>
   141f4:	1084000c 	andi	r2,r2,4096
   141f8:	10bfffcc 	andi	r2,r2,65535
   141fc:	10a0001c 	xori	r2,r2,32768
   14200:	10a00004 	addi	r2,r2,-32768
   14204:	10004e26 	beq	r2,zero,14340 <_fflush_r+0x1ac>
   14208:	8c001417 	ldw	r16,80(r17)
   1420c:	2940010c 	andi	r5,r5,4
   14210:	297fffcc 	andi	r5,r5,65535
   14214:	2960001c 	xori	r5,r5,32768
   14218:	29600004 	addi	r5,r5,-32768
   1421c:	28000626 	beq	r5,zero,14238 <_fflush_r+0xa4>
   14220:	89000117 	ldw	r4,4(r17)
   14224:	88800c17 	ldw	r2,48(r17)
   14228:	8121c83a 	sub	r16,r16,r4
   1422c:	10000226 	beq	r2,zero,14238 <_fflush_r+0xa4>
   14230:	88800f17 	ldw	r2,60(r17)
   14234:	80a1c83a 	sub	r16,r16,r2
   14238:	89400717 	ldw	r5,28(r17)
   1423c:	9809883a 	mov	r4,r19
   14240:	800d883a 	mov	r6,r16
   14244:	000f883a 	mov	r7,zero
   14248:	183ee83a 	callr	r3
   1424c:	8080281e 	bne	r16,r2,142f0 <_fflush_r+0x15c>
   14250:	8880030b 	ldhu	r2,12(r17)
   14254:	88c00417 	ldw	r3,16(r17)
   14258:	88000115 	stw	zero,4(r17)
   1425c:	113dffcc 	andi	r4,r2,63487
   14260:	1084000c 	andi	r2,r2,4096
   14264:	10bfffcc 	andi	r2,r2,65535
   14268:	10a0001c 	xori	r2,r2,32768
   1426c:	8900030d 	sth	r4,12(r17)
   14270:	88c00015 	stw	r3,0(r17)
   14274:	10a00004 	addi	r2,r2,-32768
   14278:	10002c1e 	bne	r2,zero,1432c <_fflush_r+0x198>
   1427c:	0005883a 	mov	r2,zero
   14280:	dfc00417 	ldw	ra,16(sp)
   14284:	dcc00317 	ldw	r19,12(sp)
   14288:	dc800217 	ldw	r18,8(sp)
   1428c:	dc400117 	ldw	r17,4(sp)
   14290:	dc000017 	ldw	r16,0(sp)
   14294:	dec00504 	addi	sp,sp,20
   14298:	f800283a 	ret
   1429c:	8c800417 	ldw	r18,16(r17)
   142a0:	903ff626 	beq	r18,zero,1427c <_fflush_r+0xe8>
   142a4:	8c000017 	ldw	r16,0(r17)
   142a8:	108000cc 	andi	r2,r2,3
   142ac:	8c800015 	stw	r18,0(r17)
   142b0:	84a1c83a 	sub	r16,r16,r18
   142b4:	10001b1e 	bne	r2,zero,14324 <_fflush_r+0x190>
   142b8:	88800517 	ldw	r2,20(r17)
   142bc:	88800215 	stw	r2,8(r17)
   142c0:	04000316 	blt	zero,r16,142d0 <_fflush_r+0x13c>
   142c4:	003fed06 	br	1427c <_fflush_r+0xe8>
   142c8:	90a5883a 	add	r18,r18,r2
   142cc:	043feb0e 	bge	zero,r16,1427c <_fflush_r+0xe8>
   142d0:	88800917 	ldw	r2,36(r17)
   142d4:	89400717 	ldw	r5,28(r17)
   142d8:	800f883a 	mov	r7,r16
   142dc:	900d883a 	mov	r6,r18
   142e0:	9809883a 	mov	r4,r19
   142e4:	103ee83a 	callr	r2
   142e8:	80a1c83a 	sub	r16,r16,r2
   142ec:	00bff616 	blt	zero,r2,142c8 <_fflush_r+0x134>
   142f0:	88c0030b 	ldhu	r3,12(r17)
   142f4:	00bfffc4 	movi	r2,-1
   142f8:	18c01014 	ori	r3,r3,64
   142fc:	88c0030d 	sth	r3,12(r17)
   14300:	dfc00417 	ldw	ra,16(sp)
   14304:	dcc00317 	ldw	r19,12(sp)
   14308:	dc800217 	ldw	r18,8(sp)
   1430c:	dc400117 	ldw	r17,4(sp)
   14310:	dc000017 	ldw	r16,0(sp)
   14314:	dec00504 	addi	sp,sp,20
   14318:	f800283a 	ret
   1431c:	001443c0 	call	1443c <__sinit>
   14320:	003fa706 	br	141c0 <_fflush_r+0x2c>
   14324:	0005883a 	mov	r2,zero
   14328:	003fe406 	br	142bc <_fflush_r+0x128>
   1432c:	8c001415 	stw	r16,80(r17)
   14330:	003fd206 	br	1427c <_fflush_r+0xe8>
   14334:	88c00f17 	ldw	r3,60(r17)
   14338:	00ffac16 	blt	zero,r3,141ec <_fflush_r+0x58>
   1433c:	003fcf06 	br	1427c <_fflush_r+0xe8>
   14340:	89400717 	ldw	r5,28(r17)
   14344:	9809883a 	mov	r4,r19
   14348:	000d883a 	mov	r6,zero
   1434c:	01c00044 	movi	r7,1
   14350:	183ee83a 	callr	r3
   14354:	1021883a 	mov	r16,r2
   14358:	00bfffc4 	movi	r2,-1
   1435c:	80800326 	beq	r16,r2,1436c <_fflush_r+0x1d8>
   14360:	8940030b 	ldhu	r5,12(r17)
   14364:	88c00a17 	ldw	r3,40(r17)
   14368:	003fa806 	br	1420c <_fflush_r+0x78>
   1436c:	98c00017 	ldw	r3,0(r19)
   14370:	00800744 	movi	r2,29
   14374:	18bfde1e 	bne	r3,r2,142f0 <_fflush_r+0x15c>
   14378:	003fc006 	br	1427c <_fflush_r+0xe8>

0001437c <fflush>:
   1437c:	200b883a 	mov	r5,r4
   14380:	20000426 	beq	r4,zero,14394 <fflush+0x18>
   14384:	00800174 	movhi	r2,5
   14388:	10a77404 	addi	r2,r2,-25136
   1438c:	11000017 	ldw	r4,0(r2)
   14390:	00141941 	jmpi	14194 <_fflush_r>
   14394:	00800174 	movhi	r2,5
   14398:	10a77304 	addi	r2,r2,-25140
   1439c:	11000017 	ldw	r4,0(r2)
   143a0:	01400074 	movhi	r5,1
   143a4:	29506504 	addi	r5,r5,16788
   143a8:	001501c1 	jmpi	1501c <_fwalk_reent>

000143ac <__fp_lock>:
   143ac:	0005883a 	mov	r2,zero
   143b0:	f800283a 	ret

000143b4 <__fp_unlock>:
   143b4:	0005883a 	mov	r2,zero
   143b8:	f800283a 	ret

000143bc <_cleanup_r>:
   143bc:	01400074 	movhi	r5,1
   143c0:	295e7a04 	addi	r5,r5,31208
   143c4:	0014f741 	jmpi	14f74 <_fwalk>

000143c8 <__sfmoreglue>:
   143c8:	defffc04 	addi	sp,sp,-16
   143cc:	dc400115 	stw	r17,4(sp)
   143d0:	2c401724 	muli	r17,r5,92
   143d4:	dc800215 	stw	r18,8(sp)
   143d8:	2825883a 	mov	r18,r5
   143dc:	89400304 	addi	r5,r17,12
   143e0:	dc000015 	stw	r16,0(sp)
   143e4:	dfc00315 	stw	ra,12(sp)
   143e8:	00153580 	call	15358 <_malloc_r>
   143ec:	1021883a 	mov	r16,r2
   143f0:	10000726 	beq	r2,zero,14410 <__sfmoreglue+0x48>
   143f4:	11000304 	addi	r4,r2,12
   143f8:	10000015 	stw	zero,0(r2)
   143fc:	14800115 	stw	r18,4(r2)
   14400:	11000215 	stw	r4,8(r2)
   14404:	000b883a 	mov	r5,zero
   14408:	880d883a 	mov	r6,r17
   1440c:	0015df40 	call	15df4 <memset>
   14410:	8005883a 	mov	r2,r16
   14414:	dfc00317 	ldw	ra,12(sp)
   14418:	dc800217 	ldw	r18,8(sp)
   1441c:	dc400117 	ldw	r17,4(sp)
   14420:	dc000017 	ldw	r16,0(sp)
   14424:	dec00404 	addi	sp,sp,16
   14428:	f800283a 	ret

0001442c <_cleanup>:
   1442c:	00800174 	movhi	r2,5
   14430:	10a77304 	addi	r2,r2,-25140
   14434:	11000017 	ldw	r4,0(r2)
   14438:	00143bc1 	jmpi	143bc <_cleanup_r>

0001443c <__sinit>:
   1443c:	20800e17 	ldw	r2,56(r4)
   14440:	1000401e 	bne	r2,zero,14544 <__sinit+0x108>
   14444:	21400117 	ldw	r5,4(r4)
   14448:	01800074 	movhi	r6,1
   1444c:	3190ef04 	addi	r6,r6,17340
   14450:	20c00217 	ldw	r3,8(r4)
   14454:	21800f15 	stw	r6,60(r4)
   14458:	2080bb04 	addi	r2,r4,748
   1445c:	02400044 	movi	r9,1
   14460:	018000c4 	movi	r6,3
   14464:	2180b915 	stw	r6,740(r4)
   14468:	2080ba15 	stw	r2,744(r4)
   1446c:	22400e15 	stw	r9,56(r4)
   14470:	20800317 	ldw	r2,12(r4)
   14474:	2000b815 	stw	zero,736(r4)
   14478:	02000074 	movhi	r8,1
   1447c:	421d4f04 	addi	r8,r8,30012
   14480:	01c00074 	movhi	r7,1
   14484:	39dd6404 	addi	r7,r7,30096
   14488:	01800074 	movhi	r6,1
   1448c:	319d8604 	addi	r6,r6,30232
   14490:	01000074 	movhi	r4,1
   14494:	211d9d04 	addi	r4,r4,30324
   14498:	02800104 	movi	r10,4
   1449c:	28000015 	stw	zero,0(r5)
   144a0:	28000115 	stw	zero,4(r5)
   144a4:	28000215 	stw	zero,8(r5)
   144a8:	2a80030d 	sth	r10,12(r5)
   144ac:	2800038d 	sth	zero,14(r5)
   144b0:	28000415 	stw	zero,16(r5)
   144b4:	28000515 	stw	zero,20(r5)
   144b8:	28000615 	stw	zero,24(r5)
   144bc:	29400715 	stw	r5,28(r5)
   144c0:	2a000815 	stw	r8,32(r5)
   144c4:	29c00915 	stw	r7,36(r5)
   144c8:	29800a15 	stw	r6,40(r5)
   144cc:	29000b15 	stw	r4,44(r5)
   144d0:	01400284 	movi	r5,10
   144d4:	18000015 	stw	zero,0(r3)
   144d8:	18000115 	stw	zero,4(r3)
   144dc:	18000215 	stw	zero,8(r3)
   144e0:	1940030d 	sth	r5,12(r3)
   144e4:	1a40038d 	sth	r9,14(r3)
   144e8:	18000415 	stw	zero,16(r3)
   144ec:	18000515 	stw	zero,20(r3)
   144f0:	18000615 	stw	zero,24(r3)
   144f4:	18c00715 	stw	r3,28(r3)
   144f8:	1a000815 	stw	r8,32(r3)
   144fc:	19c00915 	stw	r7,36(r3)
   14500:	19800a15 	stw	r6,40(r3)
   14504:	19000b15 	stw	r4,44(r3)
   14508:	00c00484 	movi	r3,18
   1450c:	10c0030d 	sth	r3,12(r2)
   14510:	00c00084 	movi	r3,2
   14514:	10000015 	stw	zero,0(r2)
   14518:	10000115 	stw	zero,4(r2)
   1451c:	10000215 	stw	zero,8(r2)
   14520:	10c0038d 	sth	r3,14(r2)
   14524:	10000415 	stw	zero,16(r2)
   14528:	10000515 	stw	zero,20(r2)
   1452c:	10000615 	stw	zero,24(r2)
   14530:	10800715 	stw	r2,28(r2)
   14534:	12000815 	stw	r8,32(r2)
   14538:	11c00915 	stw	r7,36(r2)
   1453c:	11800a15 	stw	r6,40(r2)
   14540:	11000b15 	stw	r4,44(r2)
   14544:	f800283a 	ret

00014548 <__sfp>:
   14548:	defffc04 	addi	sp,sp,-16
   1454c:	00800174 	movhi	r2,5
   14550:	10a77304 	addi	r2,r2,-25140
   14554:	dc400115 	stw	r17,4(sp)
   14558:	14400017 	ldw	r17,0(r2)
   1455c:	dc800215 	stw	r18,8(sp)
   14560:	dfc00315 	stw	ra,12(sp)
   14564:	88800e17 	ldw	r2,56(r17)
   14568:	dc000015 	stw	r16,0(sp)
   1456c:	2025883a 	mov	r18,r4
   14570:	10002826 	beq	r2,zero,14614 <__sfp+0xcc>
   14574:	8c40b804 	addi	r17,r17,736
   14578:	043fffc4 	movi	r16,-1
   1457c:	89400117 	ldw	r5,4(r17)
   14580:	88800217 	ldw	r2,8(r17)
   14584:	297fffc4 	addi	r5,r5,-1
   14588:	28000a16 	blt	r5,zero,145b4 <__sfp+0x6c>
   1458c:	10c0030f 	ldh	r3,12(r2)
   14590:	18000c26 	beq	r3,zero,145c4 <__sfp+0x7c>
   14594:	10c01a04 	addi	r3,r2,104
   14598:	00000206 	br	145a4 <__sfp+0x5c>
   1459c:	19bfe90f 	ldh	r6,-92(r3)
   145a0:	30000826 	beq	r6,zero,145c4 <__sfp+0x7c>
   145a4:	297fffc4 	addi	r5,r5,-1
   145a8:	18bffd04 	addi	r2,r3,-12
   145ac:	18c01704 	addi	r3,r3,92
   145b0:	2c3ffa1e 	bne	r5,r16,1459c <__sfp+0x54>
   145b4:	88800017 	ldw	r2,0(r17)
   145b8:	10001926 	beq	r2,zero,14620 <__sfp+0xd8>
   145bc:	1023883a 	mov	r17,r2
   145c0:	003fee06 	br	1457c <__sfp+0x34>
   145c4:	00ffffc4 	movi	r3,-1
   145c8:	10c0038d 	sth	r3,14(r2)
   145cc:	00c00044 	movi	r3,1
   145d0:	10c0030d 	sth	r3,12(r2)
   145d4:	10000015 	stw	zero,0(r2)
   145d8:	10000215 	stw	zero,8(r2)
   145dc:	10000115 	stw	zero,4(r2)
   145e0:	10000415 	stw	zero,16(r2)
   145e4:	10000515 	stw	zero,20(r2)
   145e8:	10000615 	stw	zero,24(r2)
   145ec:	10000c15 	stw	zero,48(r2)
   145f0:	10000d15 	stw	zero,52(r2)
   145f4:	10001115 	stw	zero,68(r2)
   145f8:	10001215 	stw	zero,72(r2)
   145fc:	dfc00317 	ldw	ra,12(sp)
   14600:	dc800217 	ldw	r18,8(sp)
   14604:	dc400117 	ldw	r17,4(sp)
   14608:	dc000017 	ldw	r16,0(sp)
   1460c:	dec00404 	addi	sp,sp,16
   14610:	f800283a 	ret
   14614:	8809883a 	mov	r4,r17
   14618:	001443c0 	call	1443c <__sinit>
   1461c:	003fd506 	br	14574 <__sfp+0x2c>
   14620:	9009883a 	mov	r4,r18
   14624:	01400104 	movi	r5,4
   14628:	00143c80 	call	143c8 <__sfmoreglue>
   1462c:	88800015 	stw	r2,0(r17)
   14630:	103fe21e 	bne	r2,zero,145bc <__sfp+0x74>
   14634:	00800304 	movi	r2,12
   14638:	90800015 	stw	r2,0(r18)
   1463c:	0005883a 	mov	r2,zero
   14640:	003fee06 	br	145fc <__sfp+0xb4>

00014644 <__sfp_lock_acquire>:
   14644:	f800283a 	ret

00014648 <__sfp_lock_release>:
   14648:	f800283a 	ret

0001464c <__sinit_lock_acquire>:
   1464c:	f800283a 	ret

00014650 <__sinit_lock_release>:
   14650:	f800283a 	ret

00014654 <__fp_lock_all>:
   14654:	00800174 	movhi	r2,5
   14658:	10a77404 	addi	r2,r2,-25136
   1465c:	11000017 	ldw	r4,0(r2)
   14660:	01400074 	movhi	r5,1
   14664:	2950eb04 	addi	r5,r5,17324
   14668:	0014f741 	jmpi	14f74 <_fwalk>

0001466c <__fp_unlock_all>:
   1466c:	00800174 	movhi	r2,5
   14670:	10a77404 	addi	r2,r2,-25136
   14674:	11000017 	ldw	r4,0(r2)
   14678:	01400074 	movhi	r5,1
   1467c:	2950ed04 	addi	r5,r5,17332
   14680:	0014f741 	jmpi	14f74 <_fwalk>

00014684 <_malloc_trim_r>:
   14684:	defffb04 	addi	sp,sp,-20
   14688:	dcc00315 	stw	r19,12(sp)
   1468c:	dc800215 	stw	r18,8(sp)
   14690:	dc400115 	stw	r17,4(sp)
   14694:	dc000015 	stw	r16,0(sp)
   14698:	2827883a 	mov	r19,r5
   1469c:	dfc00415 	stw	ra,16(sp)
   146a0:	04400174 	movhi	r17,5
   146a4:	8c61ef04 	addi	r17,r17,-30788
   146a8:	2021883a 	mov	r16,r4
   146ac:	0019f740 	call	19f74 <__malloc_lock>
   146b0:	88800217 	ldw	r2,8(r17)
   146b4:	14800117 	ldw	r18,4(r2)
   146b8:	00bfff04 	movi	r2,-4
   146bc:	90a4703a 	and	r18,r18,r2
   146c0:	9083fbc4 	addi	r2,r18,4079
   146c4:	14e7c83a 	sub	r19,r2,r19
   146c8:	9826d33a 	srli	r19,r19,12
   146cc:	0083ffc4 	movi	r2,4095
   146d0:	9cffffc4 	addi	r19,r19,-1
   146d4:	9826933a 	slli	r19,r19,12
   146d8:	14c0060e 	bge	r2,r19,146f4 <_malloc_trim_r+0x70>
   146dc:	8009883a 	mov	r4,r16
   146e0:	000b883a 	mov	r5,zero
   146e4:	00174d80 	call	174d8 <_sbrk_r>
   146e8:	88c00217 	ldw	r3,8(r17)
   146ec:	1c87883a 	add	r3,r3,r18
   146f0:	10c00a26 	beq	r2,r3,1471c <_malloc_trim_r+0x98>
   146f4:	8009883a 	mov	r4,r16
   146f8:	0019f940 	call	19f94 <__malloc_unlock>
   146fc:	0005883a 	mov	r2,zero
   14700:	dfc00417 	ldw	ra,16(sp)
   14704:	dcc00317 	ldw	r19,12(sp)
   14708:	dc800217 	ldw	r18,8(sp)
   1470c:	dc400117 	ldw	r17,4(sp)
   14710:	dc000017 	ldw	r16,0(sp)
   14714:	dec00504 	addi	sp,sp,20
   14718:	f800283a 	ret
   1471c:	8009883a 	mov	r4,r16
   14720:	04cbc83a 	sub	r5,zero,r19
   14724:	00174d80 	call	174d8 <_sbrk_r>
   14728:	00ffffc4 	movi	r3,-1
   1472c:	10c01326 	beq	r2,r3,1477c <_malloc_trim_r+0xf8>
   14730:	00800174 	movhi	r2,5
   14734:	10a79604 	addi	r2,r2,-25000
   14738:	11000017 	ldw	r4,0(r2)
   1473c:	88c00217 	ldw	r3,8(r17)
   14740:	94e5c83a 	sub	r18,r18,r19
   14744:	94800054 	ori	r18,r18,1
   14748:	24e7c83a 	sub	r19,r4,r19
   1474c:	1c800115 	stw	r18,4(r3)
   14750:	8009883a 	mov	r4,r16
   14754:	14c00015 	stw	r19,0(r2)
   14758:	0019f940 	call	19f94 <__malloc_unlock>
   1475c:	00800044 	movi	r2,1
   14760:	dfc00417 	ldw	ra,16(sp)
   14764:	dcc00317 	ldw	r19,12(sp)
   14768:	dc800217 	ldw	r18,8(sp)
   1476c:	dc400117 	ldw	r17,4(sp)
   14770:	dc000017 	ldw	r16,0(sp)
   14774:	dec00504 	addi	sp,sp,20
   14778:	f800283a 	ret
   1477c:	8009883a 	mov	r4,r16
   14780:	000b883a 	mov	r5,zero
   14784:	00174d80 	call	174d8 <_sbrk_r>
   14788:	88c00217 	ldw	r3,8(r17)
   1478c:	014003c4 	movi	r5,15
   14790:	10c9c83a 	sub	r4,r2,r3
   14794:	293fd70e 	bge	r5,r4,146f4 <_malloc_trim_r+0x70>
   14798:	01400174 	movhi	r5,5
   1479c:	29677604 	addi	r5,r5,-25128
   147a0:	29400017 	ldw	r5,0(r5)
   147a4:	21000054 	ori	r4,r4,1
   147a8:	19000115 	stw	r4,4(r3)
   147ac:	1145c83a 	sub	r2,r2,r5
   147b0:	01400174 	movhi	r5,5
   147b4:	29679604 	addi	r5,r5,-25000
   147b8:	28800015 	stw	r2,0(r5)
   147bc:	003fcd06 	br	146f4 <_malloc_trim_r+0x70>

000147c0 <_free_r>:
   147c0:	defffd04 	addi	sp,sp,-12
   147c4:	dc400115 	stw	r17,4(sp)
   147c8:	dc000015 	stw	r16,0(sp)
   147cc:	dfc00215 	stw	ra,8(sp)
   147d0:	2821883a 	mov	r16,r5
   147d4:	2023883a 	mov	r17,r4
   147d8:	28004b26 	beq	r5,zero,14908 <_free_r+0x148>
   147dc:	0019f740 	call	19f74 <__malloc_lock>
   147e0:	823fff17 	ldw	r8,-4(r16)
   147e4:	00bfff84 	movi	r2,-2
   147e8:	81bffe04 	addi	r6,r16,-8
   147ec:	4084703a 	and	r2,r8,r2
   147f0:	3087883a 	add	r3,r6,r2
   147f4:	01400174 	movhi	r5,5
   147f8:	2961ef04 	addi	r5,r5,-30788
   147fc:	1a400117 	ldw	r9,4(r3)
   14800:	29000217 	ldw	r4,8(r5)
   14804:	01ffff04 	movi	r7,-4
   14808:	49ce703a 	and	r7,r9,r7
   1480c:	20c06526 	beq	r4,r3,149a4 <_free_r+0x1e4>
   14810:	19c00115 	stw	r7,4(r3)
   14814:	4200004c 	andi	r8,r8,1
   14818:	40003026 	beq	r8,zero,148dc <_free_r+0x11c>
   1481c:	0009883a 	mov	r4,zero
   14820:	19d1883a 	add	r8,r3,r7
   14824:	42000117 	ldw	r8,4(r8)
   14828:	4200004c 	andi	r8,r8,1
   1482c:	4000061e 	bne	r8,zero,14848 <_free_r+0x88>
   14830:	11c5883a 	add	r2,r2,r7
   14834:	19c00217 	ldw	r7,8(r3)
   14838:	20004e26 	beq	r4,zero,14974 <_free_r+0x1b4>
   1483c:	18c00317 	ldw	r3,12(r3)
   14840:	38c00315 	stw	r3,12(r7)
   14844:	19c00215 	stw	r7,8(r3)
   14848:	11c00054 	ori	r7,r2,1
   1484c:	3087883a 	add	r3,r6,r2
   14850:	31c00115 	stw	r7,4(r6)
   14854:	18800015 	stw	r2,0(r3)
   14858:	20001a1e 	bne	r4,zero,148c4 <_free_r+0x104>
   1485c:	00c07fc4 	movi	r3,511
   14860:	18802e2e 	bgeu	r3,r2,1491c <_free_r+0x15c>
   14864:	1006d27a 	srli	r3,r2,9
   14868:	01000104 	movi	r4,4
   1486c:	20c06636 	bltu	r4,r3,14a08 <_free_r+0x248>
   14870:	1008d1ba 	srli	r4,r2,6
   14874:	21000e04 	addi	r4,r4,56
   14878:	210f883a 	add	r7,r4,r4
   1487c:	39cf883a 	add	r7,r7,r7
   14880:	39cf883a 	add	r7,r7,r7
   14884:	29cf883a 	add	r7,r5,r7
   14888:	38c00217 	ldw	r3,8(r7)
   1488c:	01400174 	movhi	r5,5
   14890:	2961ef04 	addi	r5,r5,-30788
   14894:	19c06126 	beq	r3,r7,14a1c <_free_r+0x25c>
   14898:	013fff04 	movi	r4,-4
   1489c:	19400117 	ldw	r5,4(r3)
   148a0:	290a703a 	and	r5,r5,r4
   148a4:	1140022e 	bgeu	r2,r5,148b0 <_free_r+0xf0>
   148a8:	18c00217 	ldw	r3,8(r3)
   148ac:	38fffb1e 	bne	r7,r3,1489c <_free_r+0xdc>
   148b0:	18800317 	ldw	r2,12(r3)
   148b4:	30800315 	stw	r2,12(r6)
   148b8:	30c00215 	stw	r3,8(r6)
   148bc:	11800215 	stw	r6,8(r2)
   148c0:	19800315 	stw	r6,12(r3)
   148c4:	8809883a 	mov	r4,r17
   148c8:	dfc00217 	ldw	ra,8(sp)
   148cc:	dc400117 	ldw	r17,4(sp)
   148d0:	dc000017 	ldw	r16,0(sp)
   148d4:	dec00304 	addi	sp,sp,12
   148d8:	0019f941 	jmpi	19f94 <__malloc_unlock>
   148dc:	813ffe17 	ldw	r4,-8(r16)
   148e0:	2a400204 	addi	r9,r5,8
   148e4:	310dc83a 	sub	r6,r6,r4
   148e8:	32000217 	ldw	r8,8(r6)
   148ec:	1105883a 	add	r2,r2,r4
   148f0:	42404326 	beq	r8,r9,14a00 <_free_r+0x240>
   148f4:	32400317 	ldw	r9,12(r6)
   148f8:	0009883a 	mov	r4,zero
   148fc:	42400315 	stw	r9,12(r8)
   14900:	4a000215 	stw	r8,8(r9)
   14904:	003fc606 	br	14820 <_free_r+0x60>
   14908:	dfc00217 	ldw	ra,8(sp)
   1490c:	dc400117 	ldw	r17,4(sp)
   14910:	dc000017 	ldw	r16,0(sp)
   14914:	dec00304 	addi	sp,sp,12
   14918:	f800283a 	ret
   1491c:	1004d0fa 	srli	r2,r2,3
   14920:	02000044 	movi	r8,1
   14924:	29c00117 	ldw	r7,4(r5)
   14928:	1087883a 	add	r3,r2,r2
   1492c:	18c7883a 	add	r3,r3,r3
   14930:	1005d0ba 	srai	r2,r2,2
   14934:	18c7883a 	add	r3,r3,r3
   14938:	28c7883a 	add	r3,r5,r3
   1493c:	19000217 	ldw	r4,8(r3)
   14940:	4084983a 	sll	r2,r8,r2
   14944:	30c00315 	stw	r3,12(r6)
   14948:	31000215 	stw	r4,8(r6)
   1494c:	11c4b03a 	or	r2,r2,r7
   14950:	21800315 	stw	r6,12(r4)
   14954:	8809883a 	mov	r4,r17
   14958:	28800115 	stw	r2,4(r5)
   1495c:	19800215 	stw	r6,8(r3)
   14960:	dfc00217 	ldw	ra,8(sp)
   14964:	dc400117 	ldw	r17,4(sp)
   14968:	dc000017 	ldw	r16,0(sp)
   1496c:	dec00304 	addi	sp,sp,12
   14970:	0019f941 	jmpi	19f94 <__malloc_unlock>
   14974:	02000174 	movhi	r8,5
   14978:	4221f104 	addi	r8,r8,-30780
   1497c:	3a3faf1e 	bne	r7,r8,1483c <_free_r+0x7c>
   14980:	29800515 	stw	r6,20(r5)
   14984:	29800415 	stw	r6,16(r5)
   14988:	11000054 	ori	r4,r2,1
   1498c:	3087883a 	add	r3,r6,r2
   14990:	31c00315 	stw	r7,12(r6)
   14994:	31c00215 	stw	r7,8(r6)
   14998:	31000115 	stw	r4,4(r6)
   1499c:	18800015 	stw	r2,0(r3)
   149a0:	003fc806 	br	148c4 <_free_r+0x104>
   149a4:	4200004c 	andi	r8,r8,1
   149a8:	3885883a 	add	r2,r7,r2
   149ac:	4000071e 	bne	r8,zero,149cc <_free_r+0x20c>
   149b0:	81fffe17 	ldw	r7,-8(r16)
   149b4:	31cdc83a 	sub	r6,r6,r7
   149b8:	30c00317 	ldw	r3,12(r6)
   149bc:	31000217 	ldw	r4,8(r6)
   149c0:	11c5883a 	add	r2,r2,r7
   149c4:	20c00315 	stw	r3,12(r4)
   149c8:	19000215 	stw	r4,8(r3)
   149cc:	00c00174 	movhi	r3,5
   149d0:	18e77704 	addi	r3,r3,-25124
   149d4:	18c00017 	ldw	r3,0(r3)
   149d8:	11000054 	ori	r4,r2,1
   149dc:	31000115 	stw	r4,4(r6)
   149e0:	29800215 	stw	r6,8(r5)
   149e4:	10ffb736 	bltu	r2,r3,148c4 <_free_r+0x104>
   149e8:	00800174 	movhi	r2,5
   149ec:	10a78c04 	addi	r2,r2,-25040
   149f0:	11400017 	ldw	r5,0(r2)
   149f4:	8809883a 	mov	r4,r17
   149f8:	00146840 	call	14684 <_malloc_trim_r>
   149fc:	003fb106 	br	148c4 <_free_r+0x104>
   14a00:	01000044 	movi	r4,1
   14a04:	003f8606 	br	14820 <_free_r+0x60>
   14a08:	01000504 	movi	r4,20
   14a0c:	20c00b36 	bltu	r4,r3,14a3c <_free_r+0x27c>
   14a10:	190016c4 	addi	r4,r3,91
   14a14:	210f883a 	add	r7,r4,r4
   14a18:	003f9806 	br	1487c <_free_r+0xbc>
   14a1c:	2009d0ba 	srai	r4,r4,2
   14a20:	00800044 	movi	r2,1
   14a24:	29c00117 	ldw	r7,4(r5)
   14a28:	1108983a 	sll	r4,r2,r4
   14a2c:	1805883a 	mov	r2,r3
   14a30:	21c8b03a 	or	r4,r4,r7
   14a34:	29000115 	stw	r4,4(r5)
   14a38:	003f9e06 	br	148b4 <_free_r+0xf4>
   14a3c:	01001504 	movi	r4,84
   14a40:	20c00436 	bltu	r4,r3,14a54 <_free_r+0x294>
   14a44:	1008d33a 	srli	r4,r2,12
   14a48:	21001b84 	addi	r4,r4,110
   14a4c:	210f883a 	add	r7,r4,r4
   14a50:	003f8a06 	br	1487c <_free_r+0xbc>
   14a54:	01005504 	movi	r4,340
   14a58:	20c00436 	bltu	r4,r3,14a6c <_free_r+0x2ac>
   14a5c:	1008d3fa 	srli	r4,r2,15
   14a60:	21001dc4 	addi	r4,r4,119
   14a64:	210f883a 	add	r7,r4,r4
   14a68:	003f8406 	br	1487c <_free_r+0xbc>
   14a6c:	01015504 	movi	r4,1364
   14a70:	20c00436 	bltu	r4,r3,14a84 <_free_r+0x2c4>
   14a74:	1008d4ba 	srli	r4,r2,18
   14a78:	21001f04 	addi	r4,r4,124
   14a7c:	210f883a 	add	r7,r4,r4
   14a80:	003f7e06 	br	1487c <_free_r+0xbc>
   14a84:	01c03f04 	movi	r7,252
   14a88:	01001f84 	movi	r4,126
   14a8c:	003f7b06 	br	1487c <_free_r+0xbc>

00014a90 <__sfvwrite_r>:
   14a90:	30800217 	ldw	r2,8(r6)
   14a94:	defff504 	addi	sp,sp,-44
   14a98:	dd400615 	stw	r21,24(sp)
   14a9c:	dd000515 	stw	r20,20(sp)
   14aa0:	dc000115 	stw	r16,4(sp)
   14aa4:	dfc00a15 	stw	ra,40(sp)
   14aa8:	df000915 	stw	fp,36(sp)
   14aac:	ddc00815 	stw	r23,32(sp)
   14ab0:	dd800715 	stw	r22,28(sp)
   14ab4:	dcc00415 	stw	r19,16(sp)
   14ab8:	dc800315 	stw	r18,12(sp)
   14abc:	dc400215 	stw	r17,8(sp)
   14ac0:	3029883a 	mov	r20,r6
   14ac4:	202b883a 	mov	r21,r4
   14ac8:	2821883a 	mov	r16,r5
   14acc:	10002126 	beq	r2,zero,14b54 <__sfvwrite_r+0xc4>
   14ad0:	2880030b 	ldhu	r2,12(r5)
   14ad4:	10c0020c 	andi	r3,r2,8
   14ad8:	18ffffcc 	andi	r3,r3,65535
   14adc:	18e0001c 	xori	r3,r3,32768
   14ae0:	18e00004 	addi	r3,r3,-32768
   14ae4:	18002826 	beq	r3,zero,14b88 <__sfvwrite_r+0xf8>
   14ae8:	28c00417 	ldw	r3,16(r5)
   14aec:	18002626 	beq	r3,zero,14b88 <__sfvwrite_r+0xf8>
   14af0:	10c0008c 	andi	r3,r2,2
   14af4:	18ffffcc 	andi	r3,r3,65535
   14af8:	18e0001c 	xori	r3,r3,32768
   14afc:	18e00004 	addi	r3,r3,-32768
   14b00:	a4400017 	ldw	r17,0(r20)
   14b04:	18002b26 	beq	r3,zero,14bb4 <__sfvwrite_r+0x124>
   14b08:	0027883a 	mov	r19,zero
   14b0c:	0025883a 	mov	r18,zero
   14b10:	05810004 	movi	r22,1024
   14b14:	980d883a 	mov	r6,r19
   14b18:	a809883a 	mov	r4,r21
   14b1c:	90004f26 	beq	r18,zero,14c5c <__sfvwrite_r+0x1cc>
   14b20:	900f883a 	mov	r7,r18
   14b24:	81400717 	ldw	r5,28(r16)
   14b28:	b480012e 	bgeu	r22,r18,14b30 <__sfvwrite_r+0xa0>
   14b2c:	01c10004 	movi	r7,1024
   14b30:	80800917 	ldw	r2,36(r16)
   14b34:	103ee83a 	callr	r2
   14b38:	0080540e 	bge	zero,r2,14c8c <__sfvwrite_r+0x1fc>
   14b3c:	a0c00217 	ldw	r3,8(r20)
   14b40:	98a7883a 	add	r19,r19,r2
   14b44:	90a5c83a 	sub	r18,r18,r2
   14b48:	1885c83a 	sub	r2,r3,r2
   14b4c:	a0800215 	stw	r2,8(r20)
   14b50:	103ff01e 	bne	r2,zero,14b14 <__sfvwrite_r+0x84>
   14b54:	0005883a 	mov	r2,zero
   14b58:	dfc00a17 	ldw	ra,40(sp)
   14b5c:	df000917 	ldw	fp,36(sp)
   14b60:	ddc00817 	ldw	r23,32(sp)
   14b64:	dd800717 	ldw	r22,28(sp)
   14b68:	dd400617 	ldw	r21,24(sp)
   14b6c:	dd000517 	ldw	r20,20(sp)
   14b70:	dcc00417 	ldw	r19,16(sp)
   14b74:	dc800317 	ldw	r18,12(sp)
   14b78:	dc400217 	ldw	r17,8(sp)
   14b7c:	dc000117 	ldw	r16,4(sp)
   14b80:	dec00b04 	addi	sp,sp,44
   14b84:	f800283a 	ret
   14b88:	a809883a 	mov	r4,r21
   14b8c:	800b883a 	mov	r5,r16
   14b90:	00127fc0 	call	127fc <__swsetup_r>
   14b94:	1000f01e 	bne	r2,zero,14f58 <__sfvwrite_r+0x4c8>
   14b98:	8080030b 	ldhu	r2,12(r16)
   14b9c:	a4400017 	ldw	r17,0(r20)
   14ba0:	10c0008c 	andi	r3,r2,2
   14ba4:	18ffffcc 	andi	r3,r3,65535
   14ba8:	18e0001c 	xori	r3,r3,32768
   14bac:	18e00004 	addi	r3,r3,-32768
   14bb0:	183fd51e 	bne	r3,zero,14b08 <__sfvwrite_r+0x78>
   14bb4:	10c0004c 	andi	r3,r2,1
   14bb8:	002d883a 	mov	r22,zero
   14bbc:	1800381e 	bne	r3,zero,14ca0 <__sfvwrite_r+0x210>
   14bc0:	0025883a 	mov	r18,zero
   14bc4:	90002126 	beq	r18,zero,14c4c <__sfvwrite_r+0x1bc>
   14bc8:	10c0800c 	andi	r3,r2,512
   14bcc:	18ffffcc 	andi	r3,r3,65535
   14bd0:	18e0001c 	xori	r3,r3,32768
   14bd4:	18e00004 	addi	r3,r3,-32768
   14bd8:	84c00217 	ldw	r19,8(r16)
   14bdc:	18006b26 	beq	r3,zero,14d8c <__sfvwrite_r+0x2fc>
   14be0:	980f883a 	mov	r7,r19
   14be4:	94c08636 	bltu	r18,r19,14e00 <__sfvwrite_r+0x370>
   14be8:	10c1200c 	andi	r3,r2,1152
   14bec:	18009f1e 	bne	r3,zero,14e6c <__sfvwrite_r+0x3dc>
   14bf0:	81000017 	ldw	r4,0(r16)
   14bf4:	982f883a 	mov	r23,r19
   14bf8:	9039883a 	mov	fp,r18
   14bfc:	9027883a 	mov	r19,r18
   14c00:	380d883a 	mov	r6,r7
   14c04:	b00b883a 	mov	r5,r22
   14c08:	d9c00015 	stw	r7,0(sp)
   14c0c:	0015ccc0 	call	15ccc <memmove>
   14c10:	d9c00017 	ldw	r7,0(sp)
   14c14:	81000217 	ldw	r4,8(r16)
   14c18:	80800017 	ldw	r2,0(r16)
   14c1c:	25efc83a 	sub	r23,r4,r23
   14c20:	11cf883a 	add	r7,r2,r7
   14c24:	85c00215 	stw	r23,8(r16)
   14c28:	81c00015 	stw	r7,0(r16)
   14c2c:	a0800217 	ldw	r2,8(r20)
   14c30:	b72d883a 	add	r22,r22,fp
   14c34:	9725c83a 	sub	r18,r18,fp
   14c38:	14e7c83a 	sub	r19,r2,r19
   14c3c:	a4c00215 	stw	r19,8(r20)
   14c40:	983fc426 	beq	r19,zero,14b54 <__sfvwrite_r+0xc4>
   14c44:	8080030b 	ldhu	r2,12(r16)
   14c48:	903fdf1e 	bne	r18,zero,14bc8 <__sfvwrite_r+0x138>
   14c4c:	8d800017 	ldw	r22,0(r17)
   14c50:	8c800117 	ldw	r18,4(r17)
   14c54:	8c400204 	addi	r17,r17,8
   14c58:	003fda06 	br	14bc4 <__sfvwrite_r+0x134>
   14c5c:	8cc00017 	ldw	r19,0(r17)
   14c60:	8c800117 	ldw	r18,4(r17)
   14c64:	8c400204 	addi	r17,r17,8
   14c68:	003faa06 	br	14b14 <__sfvwrite_r+0x84>
   14c6c:	0016e780 	call	16e78 <_realloc_r>
   14c70:	102f883a 	mov	r23,r2
   14c74:	10009f1e 	bne	r2,zero,14ef4 <__sfvwrite_r+0x464>
   14c78:	81400417 	ldw	r5,16(r16)
   14c7c:	a809883a 	mov	r4,r21
   14c80:	00147c00 	call	147c0 <_free_r>
   14c84:	00800304 	movi	r2,12
   14c88:	a8800015 	stw	r2,0(r21)
   14c8c:	80c0030b 	ldhu	r3,12(r16)
   14c90:	00bfffc4 	movi	r2,-1
   14c94:	18c01014 	ori	r3,r3,64
   14c98:	80c0030d 	sth	r3,12(r16)
   14c9c:	003fae06 	br	14b58 <__sfvwrite_r+0xc8>
   14ca0:	0007883a 	mov	r3,zero
   14ca4:	0039883a 	mov	fp,zero
   14ca8:	0025883a 	mov	r18,zero
   14cac:	90001e26 	beq	r18,zero,14d28 <__sfvwrite_r+0x298>
   14cb0:	18006526 	beq	r3,zero,14e48 <__sfvwrite_r+0x3b8>
   14cb4:	b02f883a 	mov	r23,r22
   14cb8:	9580012e 	bgeu	r18,r22,14cc0 <__sfvwrite_r+0x230>
   14cbc:	902f883a 	mov	r23,r18
   14cc0:	81000017 	ldw	r4,0(r16)
   14cc4:	80800417 	ldw	r2,16(r16)
   14cc8:	84c00217 	ldw	r19,8(r16)
   14ccc:	81c00517 	ldw	r7,20(r16)
   14cd0:	1100022e 	bgeu	r2,r4,14cdc <__sfvwrite_r+0x24c>
   14cd4:	99e7883a 	add	r19,r19,r7
   14cd8:	9dc01816 	blt	r19,r23,14d3c <__sfvwrite_r+0x2ac>
   14cdc:	b9c03b16 	blt	r23,r7,14dcc <__sfvwrite_r+0x33c>
   14ce0:	80800917 	ldw	r2,36(r16)
   14ce4:	81400717 	ldw	r5,28(r16)
   14ce8:	a809883a 	mov	r4,r21
   14cec:	d8c00015 	stw	r3,0(sp)
   14cf0:	e00d883a 	mov	r6,fp
   14cf4:	103ee83a 	callr	r2
   14cf8:	1027883a 	mov	r19,r2
   14cfc:	d8c00017 	ldw	r3,0(sp)
   14d00:	00bfe20e 	bge	zero,r2,14c8c <__sfvwrite_r+0x1fc>
   14d04:	b4edc83a 	sub	r22,r22,r19
   14d08:	b0001a26 	beq	r22,zero,14d74 <__sfvwrite_r+0x2e4>
   14d0c:	a0800217 	ldw	r2,8(r20)
   14d10:	e4f9883a 	add	fp,fp,r19
   14d14:	94e5c83a 	sub	r18,r18,r19
   14d18:	14e7c83a 	sub	r19,r2,r19
   14d1c:	a4c00215 	stw	r19,8(r20)
   14d20:	983f8c26 	beq	r19,zero,14b54 <__sfvwrite_r+0xc4>
   14d24:	903fe21e 	bne	r18,zero,14cb0 <__sfvwrite_r+0x220>
   14d28:	8f000017 	ldw	fp,0(r17)
   14d2c:	8c800117 	ldw	r18,4(r17)
   14d30:	0007883a 	mov	r3,zero
   14d34:	8c400204 	addi	r17,r17,8
   14d38:	003fdc06 	br	14cac <__sfvwrite_r+0x21c>
   14d3c:	e00b883a 	mov	r5,fp
   14d40:	980d883a 	mov	r6,r19
   14d44:	d8c00015 	stw	r3,0(sp)
   14d48:	0015ccc0 	call	15ccc <memmove>
   14d4c:	80800017 	ldw	r2,0(r16)
   14d50:	a809883a 	mov	r4,r21
   14d54:	800b883a 	mov	r5,r16
   14d58:	14c5883a 	add	r2,r2,r19
   14d5c:	80800015 	stw	r2,0(r16)
   14d60:	00141940 	call	14194 <_fflush_r>
   14d64:	d8c00017 	ldw	r3,0(sp)
   14d68:	103fc81e 	bne	r2,zero,14c8c <__sfvwrite_r+0x1fc>
   14d6c:	b4edc83a 	sub	r22,r22,r19
   14d70:	b03fe61e 	bne	r22,zero,14d0c <__sfvwrite_r+0x27c>
   14d74:	a809883a 	mov	r4,r21
   14d78:	800b883a 	mov	r5,r16
   14d7c:	00141940 	call	14194 <_fflush_r>
   14d80:	103fc21e 	bne	r2,zero,14c8c <__sfvwrite_r+0x1fc>
   14d84:	0007883a 	mov	r3,zero
   14d88:	003fe006 	br	14d0c <__sfvwrite_r+0x27c>
   14d8c:	81000017 	ldw	r4,0(r16)
   14d90:	80800417 	ldw	r2,16(r16)
   14d94:	1100022e 	bgeu	r2,r4,14da0 <__sfvwrite_r+0x310>
   14d98:	9839883a 	mov	fp,r19
   14d9c:	9c806036 	bltu	r19,r18,14f20 <__sfvwrite_r+0x490>
   14da0:	81c00517 	ldw	r7,20(r16)
   14da4:	91c01c36 	bltu	r18,r7,14e18 <__sfvwrite_r+0x388>
   14da8:	80800917 	ldw	r2,36(r16)
   14dac:	81400717 	ldw	r5,28(r16)
   14db0:	a809883a 	mov	r4,r21
   14db4:	b00d883a 	mov	r6,r22
   14db8:	103ee83a 	callr	r2
   14dbc:	1027883a 	mov	r19,r2
   14dc0:	00bfb20e 	bge	zero,r2,14c8c <__sfvwrite_r+0x1fc>
   14dc4:	1039883a 	mov	fp,r2
   14dc8:	003f9806 	br	14c2c <__sfvwrite_r+0x19c>
   14dcc:	b80d883a 	mov	r6,r23
   14dd0:	e00b883a 	mov	r5,fp
   14dd4:	d8c00015 	stw	r3,0(sp)
   14dd8:	0015ccc0 	call	15ccc <memmove>
   14ddc:	80800217 	ldw	r2,8(r16)
   14de0:	81000017 	ldw	r4,0(r16)
   14de4:	b827883a 	mov	r19,r23
   14de8:	15c5c83a 	sub	r2,r2,r23
   14dec:	25ef883a 	add	r23,r4,r23
   14df0:	80800215 	stw	r2,8(r16)
   14df4:	85c00015 	stw	r23,0(r16)
   14df8:	d8c00017 	ldw	r3,0(sp)
   14dfc:	003fc106 	br	14d04 <__sfvwrite_r+0x274>
   14e00:	81000017 	ldw	r4,0(r16)
   14e04:	902f883a 	mov	r23,r18
   14e08:	9039883a 	mov	fp,r18
   14e0c:	9027883a 	mov	r19,r18
   14e10:	900f883a 	mov	r7,r18
   14e14:	003f7a06 	br	14c00 <__sfvwrite_r+0x170>
   14e18:	b00b883a 	mov	r5,r22
   14e1c:	900d883a 	mov	r6,r18
   14e20:	0015ccc0 	call	15ccc <memmove>
   14e24:	80c00217 	ldw	r3,8(r16)
   14e28:	80800017 	ldw	r2,0(r16)
   14e2c:	9027883a 	mov	r19,r18
   14e30:	1c87c83a 	sub	r3,r3,r18
   14e34:	1485883a 	add	r2,r2,r18
   14e38:	80c00215 	stw	r3,8(r16)
   14e3c:	80800015 	stw	r2,0(r16)
   14e40:	9039883a 	mov	fp,r18
   14e44:	003f7906 	br	14c2c <__sfvwrite_r+0x19c>
   14e48:	e009883a 	mov	r4,fp
   14e4c:	01400284 	movi	r5,10
   14e50:	900d883a 	mov	r6,r18
   14e54:	0015adc0 	call	15adc <memchr>
   14e58:	10003c26 	beq	r2,zero,14f4c <__sfvwrite_r+0x4bc>
   14e5c:	15800044 	addi	r22,r2,1
   14e60:	b72dc83a 	sub	r22,r22,fp
   14e64:	00c00044 	movi	r3,1
   14e68:	003f9206 	br	14cb4 <__sfvwrite_r+0x224>
   14e6c:	81000517 	ldw	r4,20(r16)
   14e70:	81400417 	ldw	r5,16(r16)
   14e74:	80c00017 	ldw	r3,0(r16)
   14e78:	210d883a 	add	r6,r4,r4
   14e7c:	3109883a 	add	r4,r6,r4
   14e80:	2026d7fa 	srli	r19,r4,31
   14e84:	1979c83a 	sub	fp,r3,r5
   14e88:	e1800044 	addi	r6,fp,1
   14e8c:	9909883a 	add	r4,r19,r4
   14e90:	2027d07a 	srai	r19,r4,1
   14e94:	3489883a 	add	r4,r6,r18
   14e98:	980d883a 	mov	r6,r19
   14e9c:	9900022e 	bgeu	r19,r4,14ea8 <__sfvwrite_r+0x418>
   14ea0:	2027883a 	mov	r19,r4
   14ea4:	200d883a 	mov	r6,r4
   14ea8:	1081000c 	andi	r2,r2,1024
   14eac:	10bfffcc 	andi	r2,r2,65535
   14eb0:	10a0001c 	xori	r2,r2,32768
   14eb4:	10a00004 	addi	r2,r2,-32768
   14eb8:	a809883a 	mov	r4,r21
   14ebc:	103f6b26 	beq	r2,zero,14c6c <__sfvwrite_r+0x1dc>
   14ec0:	300b883a 	mov	r5,r6
   14ec4:	00153580 	call	15358 <_malloc_r>
   14ec8:	102f883a 	mov	r23,r2
   14ecc:	103f6d26 	beq	r2,zero,14c84 <__sfvwrite_r+0x1f4>
   14ed0:	81400417 	ldw	r5,16(r16)
   14ed4:	1009883a 	mov	r4,r2
   14ed8:	e00d883a 	mov	r6,fp
   14edc:	0015bd40 	call	15bd4 <memcpy>
   14ee0:	8080030b 	ldhu	r2,12(r16)
   14ee4:	00fedfc4 	movi	r3,-1153
   14ee8:	10c4703a 	and	r2,r2,r3
   14eec:	10802014 	ori	r2,r2,128
   14ef0:	8080030d 	sth	r2,12(r16)
   14ef4:	bf09883a 	add	r4,r23,fp
   14ef8:	9f07c83a 	sub	r3,r19,fp
   14efc:	85c00415 	stw	r23,16(r16)
   14f00:	84c00515 	stw	r19,20(r16)
   14f04:	81000015 	stw	r4,0(r16)
   14f08:	902f883a 	mov	r23,r18
   14f0c:	80c00215 	stw	r3,8(r16)
   14f10:	9039883a 	mov	fp,r18
   14f14:	9027883a 	mov	r19,r18
   14f18:	900f883a 	mov	r7,r18
   14f1c:	003f3806 	br	14c00 <__sfvwrite_r+0x170>
   14f20:	b00b883a 	mov	r5,r22
   14f24:	980d883a 	mov	r6,r19
   14f28:	0015ccc0 	call	15ccc <memmove>
   14f2c:	80800017 	ldw	r2,0(r16)
   14f30:	a809883a 	mov	r4,r21
   14f34:	800b883a 	mov	r5,r16
   14f38:	14c5883a 	add	r2,r2,r19
   14f3c:	80800015 	stw	r2,0(r16)
   14f40:	00141940 	call	14194 <_fflush_r>
   14f44:	103f3926 	beq	r2,zero,14c2c <__sfvwrite_r+0x19c>
   14f48:	003f5006 	br	14c8c <__sfvwrite_r+0x1fc>
   14f4c:	95800044 	addi	r22,r18,1
   14f50:	00c00044 	movi	r3,1
   14f54:	003f5706 	br	14cb4 <__sfvwrite_r+0x224>
   14f58:	80c0030b 	ldhu	r3,12(r16)
   14f5c:	00bfffc4 	movi	r2,-1
   14f60:	18c01014 	ori	r3,r3,64
   14f64:	80c0030d 	sth	r3,12(r16)
   14f68:	00c00244 	movi	r3,9
   14f6c:	a8c00015 	stw	r3,0(r21)
   14f70:	003ef906 	br	14b58 <__sfvwrite_r+0xc8>

00014f74 <_fwalk>:
   14f74:	defff904 	addi	sp,sp,-28
   14f78:	dcc00315 	stw	r19,12(sp)
   14f7c:	24c0b804 	addi	r19,r4,736
   14f80:	dd400515 	stw	r21,20(sp)
   14f84:	dd000415 	stw	r20,16(sp)
   14f88:	dfc00615 	stw	ra,24(sp)
   14f8c:	dc800215 	stw	r18,8(sp)
   14f90:	dc400115 	stw	r17,4(sp)
   14f94:	dc000015 	stw	r16,0(sp)
   14f98:	282b883a 	mov	r21,r5
   14f9c:	0029883a 	mov	r20,zero
   14fa0:	00146440 	call	14644 <__sfp_lock_acquire>
   14fa4:	98001226 	beq	r19,zero,14ff0 <_fwalk+0x7c>
   14fa8:	04bfffc4 	movi	r18,-1
   14fac:	9c400117 	ldw	r17,4(r19)
   14fb0:	9c000217 	ldw	r16,8(r19)
   14fb4:	8c7fffc4 	addi	r17,r17,-1
   14fb8:	88000b16 	blt	r17,zero,14fe8 <_fwalk+0x74>
   14fbc:	84000304 	addi	r16,r16,12
   14fc0:	80c0000f 	ldh	r3,0(r16)
   14fc4:	8c7fffc4 	addi	r17,r17,-1
   14fc8:	813ffd04 	addi	r4,r16,-12
   14fcc:	18000426 	beq	r3,zero,14fe0 <_fwalk+0x6c>
   14fd0:	80c0008f 	ldh	r3,2(r16)
   14fd4:	1c800226 	beq	r3,r18,14fe0 <_fwalk+0x6c>
   14fd8:	a83ee83a 	callr	r21
   14fdc:	a0a8b03a 	or	r20,r20,r2
   14fe0:	84001704 	addi	r16,r16,92
   14fe4:	8cbff61e 	bne	r17,r18,14fc0 <_fwalk+0x4c>
   14fe8:	9cc00017 	ldw	r19,0(r19)
   14fec:	983fef1e 	bne	r19,zero,14fac <_fwalk+0x38>
   14ff0:	00146480 	call	14648 <__sfp_lock_release>
   14ff4:	a005883a 	mov	r2,r20
   14ff8:	dfc00617 	ldw	ra,24(sp)
   14ffc:	dd400517 	ldw	r21,20(sp)
   15000:	dd000417 	ldw	r20,16(sp)
   15004:	dcc00317 	ldw	r19,12(sp)
   15008:	dc800217 	ldw	r18,8(sp)
   1500c:	dc400117 	ldw	r17,4(sp)
   15010:	dc000017 	ldw	r16,0(sp)
   15014:	dec00704 	addi	sp,sp,28
   15018:	f800283a 	ret

0001501c <_fwalk_reent>:
   1501c:	defff804 	addi	sp,sp,-32
   15020:	dcc00315 	stw	r19,12(sp)
   15024:	24c0b804 	addi	r19,r4,736
   15028:	dd800615 	stw	r22,24(sp)
   1502c:	dd400515 	stw	r21,20(sp)
   15030:	dd000415 	stw	r20,16(sp)
   15034:	dfc00715 	stw	ra,28(sp)
   15038:	dc800215 	stw	r18,8(sp)
   1503c:	dc400115 	stw	r17,4(sp)
   15040:	dc000015 	stw	r16,0(sp)
   15044:	2029883a 	mov	r20,r4
   15048:	282b883a 	mov	r21,r5
   1504c:	002d883a 	mov	r22,zero
   15050:	00146440 	call	14644 <__sfp_lock_acquire>
   15054:	98001326 	beq	r19,zero,150a4 <_fwalk_reent+0x88>
   15058:	04bfffc4 	movi	r18,-1
   1505c:	9c400117 	ldw	r17,4(r19)
   15060:	9c000217 	ldw	r16,8(r19)
   15064:	8c7fffc4 	addi	r17,r17,-1
   15068:	88000c16 	blt	r17,zero,1509c <_fwalk_reent+0x80>
   1506c:	84000304 	addi	r16,r16,12
   15070:	80c0000f 	ldh	r3,0(r16)
   15074:	8c7fffc4 	addi	r17,r17,-1
   15078:	817ffd04 	addi	r5,r16,-12
   1507c:	18000526 	beq	r3,zero,15094 <_fwalk_reent+0x78>
   15080:	80c0008f 	ldh	r3,2(r16)
   15084:	a009883a 	mov	r4,r20
   15088:	1c800226 	beq	r3,r18,15094 <_fwalk_reent+0x78>
   1508c:	a83ee83a 	callr	r21
   15090:	b0acb03a 	or	r22,r22,r2
   15094:	84001704 	addi	r16,r16,92
   15098:	8cbff51e 	bne	r17,r18,15070 <_fwalk_reent+0x54>
   1509c:	9cc00017 	ldw	r19,0(r19)
   150a0:	983fee1e 	bne	r19,zero,1505c <_fwalk_reent+0x40>
   150a4:	00146480 	call	14648 <__sfp_lock_release>
   150a8:	b005883a 	mov	r2,r22
   150ac:	dfc00717 	ldw	ra,28(sp)
   150b0:	dd800617 	ldw	r22,24(sp)
   150b4:	dd400517 	ldw	r21,20(sp)
   150b8:	dd000417 	ldw	r20,16(sp)
   150bc:	dcc00317 	ldw	r19,12(sp)
   150c0:	dc800217 	ldw	r18,8(sp)
   150c4:	dc400117 	ldw	r17,4(sp)
   150c8:	dc000017 	ldw	r16,0(sp)
   150cc:	dec00804 	addi	sp,sp,32
   150d0:	f800283a 	ret

000150d4 <_setlocale_r>:
   150d4:	defffc04 	addi	sp,sp,-16
   150d8:	dc800215 	stw	r18,8(sp)
   150dc:	dc400115 	stw	r17,4(sp)
   150e0:	dc000015 	stw	r16,0(sp)
   150e4:	dfc00315 	stw	ra,12(sp)
   150e8:	3021883a 	mov	r16,r6
   150ec:	2023883a 	mov	r17,r4
   150f0:	2825883a 	mov	r18,r5
   150f4:	30001626 	beq	r6,zero,15150 <_setlocale_r+0x7c>
   150f8:	3009883a 	mov	r4,r6
   150fc:	01400174 	movhi	r5,5
   15100:	29604004 	addi	r5,r5,-32512
   15104:	001767c0 	call	1767c <strcmp>
   15108:	10000a1e 	bne	r2,zero,15134 <_setlocale_r+0x60>
   1510c:	8c800c15 	stw	r18,48(r17)
   15110:	8c000d15 	stw	r16,52(r17)
   15114:	00800174 	movhi	r2,5
   15118:	10a04004 	addi	r2,r2,-32512
   1511c:	dfc00317 	ldw	ra,12(sp)
   15120:	dc800217 	ldw	r18,8(sp)
   15124:	dc400117 	ldw	r17,4(sp)
   15128:	dc000017 	ldw	r16,0(sp)
   1512c:	dec00404 	addi	sp,sp,16
   15130:	f800283a 	ret
   15134:	8009883a 	mov	r4,r16
   15138:	01400174 	movhi	r5,5
   1513c:	29602b04 	addi	r5,r5,-32596
   15140:	001767c0 	call	1767c <strcmp>
   15144:	103ff126 	beq	r2,zero,1510c <_setlocale_r+0x38>
   15148:	0005883a 	mov	r2,zero
   1514c:	003ff306 	br	1511c <_setlocale_r+0x48>
   15150:	00800174 	movhi	r2,5
   15154:	10a04004 	addi	r2,r2,-32512
   15158:	dfc00317 	ldw	ra,12(sp)
   1515c:	dc800217 	ldw	r18,8(sp)
   15160:	dc400117 	ldw	r17,4(sp)
   15164:	dc000017 	ldw	r16,0(sp)
   15168:	dec00404 	addi	sp,sp,16
   1516c:	f800283a 	ret

00015170 <__locale_charset>:
   15170:	00800174 	movhi	r2,5
   15174:	10a04104 	addi	r2,r2,-32508
   15178:	f800283a 	ret

0001517c <_localeconv_r>:
   1517c:	00800174 	movhi	r2,5
   15180:	10a04504 	addi	r2,r2,-32492
   15184:	f800283a 	ret

00015188 <setlocale>:
   15188:	00c00174 	movhi	r3,5
   1518c:	18e77404 	addi	r3,r3,-25136
   15190:	2005883a 	mov	r2,r4
   15194:	19000017 	ldw	r4,0(r3)
   15198:	280d883a 	mov	r6,r5
   1519c:	100b883a 	mov	r5,r2
   151a0:	00150d41 	jmpi	150d4 <_setlocale_r>

000151a4 <localeconv>:
   151a4:	00800174 	movhi	r2,5
   151a8:	10a04504 	addi	r2,r2,-32492
   151ac:	f800283a 	ret

000151b0 <__smakebuf_r>:
   151b0:	2880030b 	ldhu	r2,12(r5)
   151b4:	deffed04 	addi	sp,sp,-76
   151b8:	dc401015 	stw	r17,64(sp)
   151bc:	10c0008c 	andi	r3,r2,2
   151c0:	18ffffcc 	andi	r3,r3,65535
   151c4:	18e0001c 	xori	r3,r3,32768
   151c8:	dc000f15 	stw	r16,60(sp)
   151cc:	dfc01215 	stw	ra,72(sp)
   151d0:	dc801115 	stw	r18,68(sp)
   151d4:	18e00004 	addi	r3,r3,-32768
   151d8:	2821883a 	mov	r16,r5
   151dc:	2023883a 	mov	r17,r4
   151e0:	1800381e 	bne	r3,zero,152c4 <__smakebuf_r+0x114>
   151e4:	2940038f 	ldh	r5,14(r5)
   151e8:	28002d16 	blt	r5,zero,152a0 <__smakebuf_r+0xf0>
   151ec:	d80d883a 	mov	r6,sp
   151f0:	00179fc0 	call	179fc <_fstat_r>
   151f4:	10002916 	blt	r2,zero,1529c <__smakebuf_r+0xec>
   151f8:	d8800117 	ldw	r2,4(sp)
   151fc:	00e00014 	movui	r3,32768
   15200:	10bc000c 	andi	r2,r2,61440
   15204:	10c03c26 	beq	r2,r3,152f8 <__smakebuf_r+0x148>
   15208:	80c0030b 	ldhu	r3,12(r16)
   1520c:	18c20014 	ori	r3,r3,2048
   15210:	80c0030d 	sth	r3,12(r16)
   15214:	00c80004 	movi	r3,8192
   15218:	10c00c1e 	bne	r2,r3,1524c <__smakebuf_r+0x9c>
   1521c:	8140038f 	ldh	r5,14(r16)
   15220:	8809883a 	mov	r4,r17
   15224:	0017a640 	call	17a64 <_isatty_r>
   15228:	10000826 	beq	r2,zero,1524c <__smakebuf_r+0x9c>
   1522c:	80c0030b 	ldhu	r3,12(r16)
   15230:	808010c4 	addi	r2,r16,67
   15234:	80800015 	stw	r2,0(r16)
   15238:	18c00054 	ori	r3,r3,1
   1523c:	80800415 	stw	r2,16(r16)
   15240:	00800044 	movi	r2,1
   15244:	80c0030d 	sth	r3,12(r16)
   15248:	80800515 	stw	r2,20(r16)
   1524c:	04810004 	movi	r18,1024
   15250:	8809883a 	mov	r4,r17
   15254:	900b883a 	mov	r5,r18
   15258:	00153580 	call	15358 <_malloc_r>
   1525c:	10003026 	beq	r2,zero,15320 <__smakebuf_r+0x170>
   15260:	80c0030b 	ldhu	r3,12(r16)
   15264:	01000074 	movhi	r4,1
   15268:	2110ef04 	addi	r4,r4,17340
   1526c:	89000f15 	stw	r4,60(r17)
   15270:	18c02014 	ori	r3,r3,128
   15274:	80c0030d 	sth	r3,12(r16)
   15278:	80800015 	stw	r2,0(r16)
   1527c:	80800415 	stw	r2,16(r16)
   15280:	84800515 	stw	r18,20(r16)
   15284:	dfc01217 	ldw	ra,72(sp)
   15288:	dc801117 	ldw	r18,68(sp)
   1528c:	dc401017 	ldw	r17,64(sp)
   15290:	dc000f17 	ldw	r16,60(sp)
   15294:	dec01304 	addi	sp,sp,76
   15298:	f800283a 	ret
   1529c:	8080030b 	ldhu	r2,12(r16)
   152a0:	10c0200c 	andi	r3,r2,128
   152a4:	18ffffcc 	andi	r3,r3,65535
   152a8:	18e0001c 	xori	r3,r3,32768
   152ac:	18e00004 	addi	r3,r3,-32768
   152b0:	18000f1e 	bne	r3,zero,152f0 <__smakebuf_r+0x140>
   152b4:	04810004 	movi	r18,1024
   152b8:	10820014 	ori	r2,r2,2048
   152bc:	8080030d 	sth	r2,12(r16)
   152c0:	003fe306 	br	15250 <__smakebuf_r+0xa0>
   152c4:	288010c4 	addi	r2,r5,67
   152c8:	28800015 	stw	r2,0(r5)
   152cc:	28800415 	stw	r2,16(r5)
   152d0:	00800044 	movi	r2,1
   152d4:	28800515 	stw	r2,20(r5)
   152d8:	dfc01217 	ldw	ra,72(sp)
   152dc:	dc801117 	ldw	r18,68(sp)
   152e0:	dc401017 	ldw	r17,64(sp)
   152e4:	dc000f17 	ldw	r16,60(sp)
   152e8:	dec01304 	addi	sp,sp,76
   152ec:	f800283a 	ret
   152f0:	04801004 	movi	r18,64
   152f4:	003ff006 	br	152b8 <__smakebuf_r+0x108>
   152f8:	81000a17 	ldw	r4,40(r16)
   152fc:	00c00074 	movhi	r3,1
   15300:	18dd8604 	addi	r3,r3,30232
   15304:	20ffc01e 	bne	r4,r3,15208 <__smakebuf_r+0x58>
   15308:	8080030b 	ldhu	r2,12(r16)
   1530c:	00c10004 	movi	r3,1024
   15310:	80c01315 	stw	r3,76(r16)
   15314:	10c4b03a 	or	r2,r2,r3
   15318:	8080030d 	sth	r2,12(r16)
   1531c:	003fcb06 	br	1524c <__smakebuf_r+0x9c>
   15320:	8080030b 	ldhu	r2,12(r16)
   15324:	10c0800c 	andi	r3,r2,512
   15328:	18ffffcc 	andi	r3,r3,65535
   1532c:	18e0001c 	xori	r3,r3,32768
   15330:	18e00004 	addi	r3,r3,-32768
   15334:	183fd31e 	bne	r3,zero,15284 <__smakebuf_r+0xd4>
   15338:	10800094 	ori	r2,r2,2
   1533c:	80c010c4 	addi	r3,r16,67
   15340:	8080030d 	sth	r2,12(r16)
   15344:	00800044 	movi	r2,1
   15348:	80c00015 	stw	r3,0(r16)
   1534c:	80c00415 	stw	r3,16(r16)
   15350:	80800515 	stw	r2,20(r16)
   15354:	003fcb06 	br	15284 <__smakebuf_r+0xd4>

00015358 <_malloc_r>:
   15358:	defff604 	addi	sp,sp,-40
   1535c:	dc800215 	stw	r18,8(sp)
   15360:	dfc00915 	stw	ra,36(sp)
   15364:	df000815 	stw	fp,32(sp)
   15368:	ddc00715 	stw	r23,28(sp)
   1536c:	dd800615 	stw	r22,24(sp)
   15370:	dd400515 	stw	r21,20(sp)
   15374:	dd000415 	stw	r20,16(sp)
   15378:	dcc00315 	stw	r19,12(sp)
   1537c:	dc400115 	stw	r17,4(sp)
   15380:	dc000015 	stw	r16,0(sp)
   15384:	288002c4 	addi	r2,r5,11
   15388:	00c00584 	movi	r3,22
   1538c:	2025883a 	mov	r18,r4
   15390:	18802b2e 	bgeu	r3,r2,15440 <_malloc_r+0xe8>
   15394:	047ffe04 	movi	r17,-8
   15398:	1462703a 	and	r17,r2,r17
   1539c:	88002a16 	blt	r17,zero,15448 <_malloc_r+0xf0>
   153a0:	89402936 	bltu	r17,r5,15448 <_malloc_r+0xf0>
   153a4:	9009883a 	mov	r4,r18
   153a8:	0019f740 	call	19f74 <__malloc_lock>
   153ac:	00807dc4 	movi	r2,503
   153b0:	14402936 	bltu	r2,r17,15458 <_malloc_r+0x100>
   153b4:	8808d0fa 	srli	r4,r17,3
   153b8:	04c00174 	movhi	r19,5
   153bc:	9ce1ef04 	addi	r19,r19,-30788
   153c0:	2105883a 	add	r2,r4,r4
   153c4:	1085883a 	add	r2,r2,r2
   153c8:	1085883a 	add	r2,r2,r2
   153cc:	9885883a 	add	r2,r19,r2
   153d0:	14000317 	ldw	r16,12(r2)
   153d4:	80815526 	beq	r16,r2,1592c <_malloc_r+0x5d4>
   153d8:	81000117 	ldw	r4,4(r16)
   153dc:	00bfff04 	movi	r2,-4
   153e0:	80c00317 	ldw	r3,12(r16)
   153e4:	2084703a 	and	r2,r4,r2
   153e8:	8085883a 	add	r2,r16,r2
   153ec:	11800117 	ldw	r6,4(r2)
   153f0:	81400217 	ldw	r5,8(r16)
   153f4:	9009883a 	mov	r4,r18
   153f8:	31800054 	ori	r6,r6,1
   153fc:	11800115 	stw	r6,4(r2)
   15400:	28c00315 	stw	r3,12(r5)
   15404:	19400215 	stw	r5,8(r3)
   15408:	0019f940 	call	19f94 <__malloc_unlock>
   1540c:	80800204 	addi	r2,r16,8
   15410:	dfc00917 	ldw	ra,36(sp)
   15414:	df000817 	ldw	fp,32(sp)
   15418:	ddc00717 	ldw	r23,28(sp)
   1541c:	dd800617 	ldw	r22,24(sp)
   15420:	dd400517 	ldw	r21,20(sp)
   15424:	dd000417 	ldw	r20,16(sp)
   15428:	dcc00317 	ldw	r19,12(sp)
   1542c:	dc800217 	ldw	r18,8(sp)
   15430:	dc400117 	ldw	r17,4(sp)
   15434:	dc000017 	ldw	r16,0(sp)
   15438:	dec00a04 	addi	sp,sp,40
   1543c:	f800283a 	ret
   15440:	04400404 	movi	r17,16
   15444:	897fd72e 	bgeu	r17,r5,153a4 <_malloc_r+0x4c>
   15448:	00800304 	movi	r2,12
   1544c:	90800015 	stw	r2,0(r18)
   15450:	0005883a 	mov	r2,zero
   15454:	003fee06 	br	15410 <_malloc_r+0xb8>
   15458:	8808d27a 	srli	r4,r17,9
   1545c:	20007126 	beq	r4,zero,15624 <_malloc_r+0x2cc>
   15460:	00800104 	movi	r2,4
   15464:	1100eb36 	bltu	r2,r4,15814 <_malloc_r+0x4bc>
   15468:	8808d1ba 	srli	r4,r17,6
   1546c:	21000e04 	addi	r4,r4,56
   15470:	210b883a 	add	r5,r4,r4
   15474:	294b883a 	add	r5,r5,r5
   15478:	294b883a 	add	r5,r5,r5
   1547c:	04c00174 	movhi	r19,5
   15480:	9ce1ef04 	addi	r19,r19,-30788
   15484:	994b883a 	add	r5,r19,r5
   15488:	2c000317 	ldw	r16,12(r5)
   1548c:	2c000e26 	beq	r5,r16,154c8 <_malloc_r+0x170>
   15490:	80c00117 	ldw	r3,4(r16)
   15494:	01ffff04 	movi	r7,-4
   15498:	018003c4 	movi	r6,15
   1549c:	19c6703a 	and	r3,r3,r7
   154a0:	1c45c83a 	sub	r2,r3,r17
   154a4:	30800716 	blt	r6,r2,154c4 <_malloc_r+0x16c>
   154a8:	1000610e 	bge	r2,zero,15630 <_malloc_r+0x2d8>
   154ac:	84000317 	ldw	r16,12(r16)
   154b0:	2c000526 	beq	r5,r16,154c8 <_malloc_r+0x170>
   154b4:	80c00117 	ldw	r3,4(r16)
   154b8:	19c6703a 	and	r3,r3,r7
   154bc:	1c45c83a 	sub	r2,r3,r17
   154c0:	30bff90e 	bge	r6,r2,154a8 <_malloc_r+0x150>
   154c4:	213fffc4 	addi	r4,r4,-1
   154c8:	21000044 	addi	r4,r4,1
   154cc:	9c000417 	ldw	r16,16(r19)
   154d0:	00c00174 	movhi	r3,5
   154d4:	18e1ef04 	addi	r3,r3,-30788
   154d8:	1a400204 	addi	r9,r3,8
   154dc:	8240ff26 	beq	r16,r9,158dc <_malloc_r+0x584>
   154e0:	81400117 	ldw	r5,4(r16)
   154e4:	00bfff04 	movi	r2,-4
   154e8:	018003c4 	movi	r6,15
   154ec:	2884703a 	and	r2,r5,r2
   154f0:	144bc83a 	sub	r5,r2,r17
   154f4:	3140ea16 	blt	r6,r5,158a0 <_malloc_r+0x548>
   154f8:	1a400515 	stw	r9,20(r3)
   154fc:	1a400415 	stw	r9,16(r3)
   15500:	2800570e 	bge	r5,zero,15660 <_malloc_r+0x308>
   15504:	01407fc4 	movi	r5,511
   15508:	2880ca36 	bltu	r5,r2,15834 <_malloc_r+0x4dc>
   1550c:	1004d0fa 	srli	r2,r2,3
   15510:	02000044 	movi	r8,1
   15514:	19c00117 	ldw	r7,4(r3)
   15518:	108b883a 	add	r5,r2,r2
   1551c:	294b883a 	add	r5,r5,r5
   15520:	1005d0ba 	srai	r2,r2,2
   15524:	294b883a 	add	r5,r5,r5
   15528:	28cb883a 	add	r5,r5,r3
   1552c:	29800217 	ldw	r6,8(r5)
   15530:	4084983a 	sll	r2,r8,r2
   15534:	81400315 	stw	r5,12(r16)
   15538:	81800215 	stw	r6,8(r16)
   1553c:	11c4b03a 	or	r2,r2,r7
   15540:	18800115 	stw	r2,4(r3)
   15544:	2c000215 	stw	r16,8(r5)
   15548:	34000315 	stw	r16,12(r6)
   1554c:	200bd0ba 	srai	r5,r4,2
   15550:	00c00044 	movi	r3,1
   15554:	194a983a 	sll	r5,r3,r5
   15558:	11404936 	bltu	r2,r5,15680 <_malloc_r+0x328>
   1555c:	1146703a 	and	r3,r2,r5
   15560:	18000a1e 	bne	r3,zero,1558c <_malloc_r+0x234>
   15564:	00ffff04 	movi	r3,-4
   15568:	294b883a 	add	r5,r5,r5
   1556c:	20c8703a 	and	r4,r4,r3
   15570:	1146703a 	and	r3,r2,r5
   15574:	21000104 	addi	r4,r4,4
   15578:	1800041e 	bne	r3,zero,1558c <_malloc_r+0x234>
   1557c:	294b883a 	add	r5,r5,r5
   15580:	1146703a 	and	r3,r2,r5
   15584:	21000104 	addi	r4,r4,4
   15588:	183ffc26 	beq	r3,zero,1557c <_malloc_r+0x224>
   1558c:	023fff04 	movi	r8,-4
   15590:	01c003c4 	movi	r7,15
   15594:	2105883a 	add	r2,r4,r4
   15598:	1085883a 	add	r2,r2,r2
   1559c:	1085883a 	add	r2,r2,r2
   155a0:	9899883a 	add	r12,r19,r2
   155a4:	62800304 	addi	r10,r12,12
   155a8:	2017883a 	mov	r11,r4
   155ac:	54000017 	ldw	r16,0(r10)
   155b0:	51bffd04 	addi	r6,r10,-12
   155b4:	8180041e 	bne	r16,r6,155c8 <_malloc_r+0x270>
   155b8:	0000ca06 	br	158e4 <_malloc_r+0x58c>
   155bc:	10001c0e 	bge	r2,zero,15630 <_malloc_r+0x2d8>
   155c0:	84000317 	ldw	r16,12(r16)
   155c4:	8180c726 	beq	r16,r6,158e4 <_malloc_r+0x58c>
   155c8:	80c00117 	ldw	r3,4(r16)
   155cc:	1a06703a 	and	r3,r3,r8
   155d0:	1c45c83a 	sub	r2,r3,r17
   155d4:	38bff90e 	bge	r7,r2,155bc <_malloc_r+0x264>
   155d8:	81000317 	ldw	r4,12(r16)
   155dc:	81400217 	ldw	r5,8(r16)
   155e0:	8447883a 	add	r3,r16,r17
   155e4:	8c400054 	ori	r17,r17,1
   155e8:	29000315 	stw	r4,12(r5)
   155ec:	21400215 	stw	r5,8(r4)
   155f0:	84400115 	stw	r17,4(r16)
   155f4:	1889883a 	add	r4,r3,r2
   155f8:	11400054 	ori	r5,r2,1
   155fc:	98c00515 	stw	r3,20(r19)
   15600:	98c00415 	stw	r3,16(r19)
   15604:	20800015 	stw	r2,0(r4)
   15608:	1a400315 	stw	r9,12(r3)
   1560c:	1a400215 	stw	r9,8(r3)
   15610:	19400115 	stw	r5,4(r3)
   15614:	9009883a 	mov	r4,r18
   15618:	0019f940 	call	19f94 <__malloc_unlock>
   1561c:	80800204 	addi	r2,r16,8
   15620:	003f7b06 	br	15410 <_malloc_r+0xb8>
   15624:	8808d0fa 	srli	r4,r17,3
   15628:	210b883a 	add	r5,r4,r4
   1562c:	003f9106 	br	15474 <_malloc_r+0x11c>
   15630:	80c7883a 	add	r3,r16,r3
   15634:	19400117 	ldw	r5,4(r3)
   15638:	80800317 	ldw	r2,12(r16)
   1563c:	81000217 	ldw	r4,8(r16)
   15640:	29400054 	ori	r5,r5,1
   15644:	19400115 	stw	r5,4(r3)
   15648:	20800315 	stw	r2,12(r4)
   1564c:	11000215 	stw	r4,8(r2)
   15650:	9009883a 	mov	r4,r18
   15654:	0019f940 	call	19f94 <__malloc_unlock>
   15658:	80800204 	addi	r2,r16,8
   1565c:	003f6c06 	br	15410 <_malloc_r+0xb8>
   15660:	8085883a 	add	r2,r16,r2
   15664:	10c00117 	ldw	r3,4(r2)
   15668:	9009883a 	mov	r4,r18
   1566c:	18c00054 	ori	r3,r3,1
   15670:	10c00115 	stw	r3,4(r2)
   15674:	0019f940 	call	19f94 <__malloc_unlock>
   15678:	80800204 	addi	r2,r16,8
   1567c:	003f6406 	br	15410 <_malloc_r+0xb8>
   15680:	9c000217 	ldw	r16,8(r19)
   15684:	00bfff04 	movi	r2,-4
   15688:	85400117 	ldw	r21,4(r16)
   1568c:	a8aa703a 	and	r21,r21,r2
   15690:	ac400336 	bltu	r21,r17,156a0 <_malloc_r+0x348>
   15694:	ac45c83a 	sub	r2,r21,r17
   15698:	00c003c4 	movi	r3,15
   1569c:	18805316 	blt	r3,r2,157ec <_malloc_r+0x494>
   156a0:	d5e01917 	ldw	r23,-32668(gp)
   156a4:	d0e00317 	ldw	r3,-32756(gp)
   156a8:	00bfffc4 	movi	r2,-1
   156ac:	8579883a 	add	fp,r16,r21
   156b0:	8def883a 	add	r23,r17,r23
   156b4:	1880d226 	beq	r3,r2,15a00 <_malloc_r+0x6a8>
   156b8:	bdc403c4 	addi	r23,r23,4111
   156bc:	00bc0004 	movi	r2,-4096
   156c0:	b8ae703a 	and	r23,r23,r2
   156c4:	9009883a 	mov	r4,r18
   156c8:	b80b883a 	mov	r5,r23
   156cc:	00174d80 	call	174d8 <_sbrk_r>
   156d0:	1029883a 	mov	r20,r2
   156d4:	00bfffc4 	movi	r2,-1
   156d8:	a080d126 	beq	r20,r2,15a20 <_malloc_r+0x6c8>
   156dc:	a7009f36 	bltu	r20,fp,1595c <_malloc_r+0x604>
   156e0:	05800174 	movhi	r22,5
   156e4:	b5a79604 	addi	r22,r22,-25000
   156e8:	b0800017 	ldw	r2,0(r22)
   156ec:	b885883a 	add	r2,r23,r2
   156f0:	b0800015 	stw	r2,0(r22)
   156f4:	e500cf26 	beq	fp,r20,15a34 <_malloc_r+0x6dc>
   156f8:	d1200317 	ldw	r4,-32756(gp)
   156fc:	00ffffc4 	movi	r3,-1
   15700:	20c0e026 	beq	r4,r3,15a84 <_malloc_r+0x72c>
   15704:	a739c83a 	sub	fp,r20,fp
   15708:	1705883a 	add	r2,r2,fp
   1570c:	b0800015 	stw	r2,0(r22)
   15710:	a08001cc 	andi	r2,r20,7
   15714:	1000a526 	beq	r2,zero,159ac <_malloc_r+0x654>
   15718:	a0a9c83a 	sub	r20,r20,r2
   1571c:	00c40204 	movi	r3,4104
   15720:	a5000204 	addi	r20,r20,8
   15724:	1885c83a 	sub	r2,r3,r2
   15728:	a5c7883a 	add	r3,r20,r23
   1572c:	18c3ffcc 	andi	r3,r3,4095
   15730:	10efc83a 	sub	r23,r2,r3
   15734:	9009883a 	mov	r4,r18
   15738:	b80b883a 	mov	r5,r23
   1573c:	00174d80 	call	174d8 <_sbrk_r>
   15740:	00ffffc4 	movi	r3,-1
   15744:	10c0cc26 	beq	r2,r3,15a78 <_malloc_r+0x720>
   15748:	1505c83a 	sub	r2,r2,r20
   1574c:	b887883a 	add	r3,r23,r2
   15750:	18c00054 	ori	r3,r3,1
   15754:	b0800017 	ldw	r2,0(r22)
   15758:	9d000215 	stw	r20,8(r19)
   1575c:	a0c00115 	stw	r3,4(r20)
   15760:	b885883a 	add	r2,r23,r2
   15764:	b0800015 	stw	r2,0(r22)
   15768:	84c00e26 	beq	r16,r19,157a4 <_malloc_r+0x44c>
   1576c:	00c003c4 	movi	r3,15
   15770:	1d40902e 	bgeu	r3,r21,159b4 <_malloc_r+0x65c>
   15774:	ad7ffd04 	addi	r21,r21,-12
   15778:	013ffe04 	movi	r4,-8
   1577c:	a908703a 	and	r4,r21,r4
   15780:	810b883a 	add	r5,r16,r4
   15784:	01800144 	movi	r6,5
   15788:	29800115 	stw	r6,4(r5)
   1578c:	29800215 	stw	r6,8(r5)
   15790:	81400117 	ldw	r5,4(r16)
   15794:	2940004c 	andi	r5,r5,1
   15798:	214ab03a 	or	r5,r4,r5
   1579c:	81400115 	stw	r5,4(r16)
   157a0:	1900ae36 	bltu	r3,r4,15a5c <_malloc_r+0x704>
   157a4:	d0e01817 	ldw	r3,-32672(gp)
   157a8:	1880012e 	bgeu	r3,r2,157b0 <_malloc_r+0x458>
   157ac:	d0a01815 	stw	r2,-32672(gp)
   157b0:	d0e01717 	ldw	r3,-32676(gp)
   157b4:	9c000217 	ldw	r16,8(r19)
   157b8:	1880012e 	bgeu	r3,r2,157c0 <_malloc_r+0x468>
   157bc:	d0a01715 	stw	r2,-32676(gp)
   157c0:	80c00117 	ldw	r3,4(r16)
   157c4:	00bfff04 	movi	r2,-4
   157c8:	1886703a 	and	r3,r3,r2
   157cc:	1c45c83a 	sub	r2,r3,r17
   157d0:	1c400236 	bltu	r3,r17,157dc <_malloc_r+0x484>
   157d4:	00c003c4 	movi	r3,15
   157d8:	18800416 	blt	r3,r2,157ec <_malloc_r+0x494>
   157dc:	9009883a 	mov	r4,r18
   157e0:	0019f940 	call	19f94 <__malloc_unlock>
   157e4:	0005883a 	mov	r2,zero
   157e8:	003f0906 	br	15410 <_malloc_r+0xb8>
   157ec:	88c00054 	ori	r3,r17,1
   157f0:	10800054 	ori	r2,r2,1
   157f4:	80c00115 	stw	r3,4(r16)
   157f8:	8463883a 	add	r17,r16,r17
   157fc:	88800115 	stw	r2,4(r17)
   15800:	9009883a 	mov	r4,r18
   15804:	9c400215 	stw	r17,8(r19)
   15808:	0019f940 	call	19f94 <__malloc_unlock>
   1580c:	80800204 	addi	r2,r16,8
   15810:	003eff06 	br	15410 <_malloc_r+0xb8>
   15814:	00800504 	movi	r2,20
   15818:	1100492e 	bgeu	r2,r4,15940 <_malloc_r+0x5e8>
   1581c:	00801504 	movi	r2,84
   15820:	11005c36 	bltu	r2,r4,15994 <_malloc_r+0x63c>
   15824:	8808d33a 	srli	r4,r17,12
   15828:	21001b84 	addi	r4,r4,110
   1582c:	210b883a 	add	r5,r4,r4
   15830:	003f1006 	br	15474 <_malloc_r+0x11c>
   15834:	1006d27a 	srli	r3,r2,9
   15838:	01400104 	movi	r5,4
   1583c:	28c0432e 	bgeu	r5,r3,1594c <_malloc_r+0x5f4>
   15840:	01400504 	movi	r5,20
   15844:	28c07036 	bltu	r5,r3,15a08 <_malloc_r+0x6b0>
   15848:	194016c4 	addi	r5,r3,91
   1584c:	294d883a 	add	r6,r5,r5
   15850:	318d883a 	add	r6,r6,r6
   15854:	318d883a 	add	r6,r6,r6
   15858:	998d883a 	add	r6,r19,r6
   1585c:	30c00217 	ldw	r3,8(r6)
   15860:	01c00174 	movhi	r7,5
   15864:	39e1ef04 	addi	r7,r7,-30788
   15868:	19805726 	beq	r3,r6,159c8 <_malloc_r+0x670>
   1586c:	01ffff04 	movi	r7,-4
   15870:	19400117 	ldw	r5,4(r3)
   15874:	29ca703a 	and	r5,r5,r7
   15878:	1140022e 	bgeu	r2,r5,15884 <_malloc_r+0x52c>
   1587c:	18c00217 	ldw	r3,8(r3)
   15880:	30fffb1e 	bne	r6,r3,15870 <_malloc_r+0x518>
   15884:	19400317 	ldw	r5,12(r3)
   15888:	98800117 	ldw	r2,4(r19)
   1588c:	81400315 	stw	r5,12(r16)
   15890:	80c00215 	stw	r3,8(r16)
   15894:	2c000215 	stw	r16,8(r5)
   15898:	1c000315 	stw	r16,12(r3)
   1589c:	003f2b06 	br	1554c <_malloc_r+0x1f4>
   158a0:	8445883a 	add	r2,r16,r17
   158a4:	8c400054 	ori	r17,r17,1
   158a8:	18800515 	stw	r2,20(r3)
   158ac:	18800415 	stw	r2,16(r3)
   158b0:	29000054 	ori	r4,r5,1
   158b4:	1147883a 	add	r3,r2,r5
   158b8:	84400115 	stw	r17,4(r16)
   158bc:	11000115 	stw	r4,4(r2)
   158c0:	12400315 	stw	r9,12(r2)
   158c4:	12400215 	stw	r9,8(r2)
   158c8:	19400015 	stw	r5,0(r3)
   158cc:	9009883a 	mov	r4,r18
   158d0:	0019f940 	call	19f94 <__malloc_unlock>
   158d4:	80800204 	addi	r2,r16,8
   158d8:	003ecd06 	br	15410 <_malloc_r+0xb8>
   158dc:	18800117 	ldw	r2,4(r3)
   158e0:	003f1a06 	br	1554c <_malloc_r+0x1f4>
   158e4:	5ac00044 	addi	r11,r11,1
   158e8:	588000cc 	andi	r2,r11,3
   158ec:	52800204 	addi	r10,r10,8
   158f0:	103f2e1e 	bne	r2,zero,155ac <_malloc_r+0x254>
   158f4:	20c000cc 	andi	r3,r4,3
   158f8:	60bffe04 	addi	r2,r12,-8
   158fc:	18006f26 	beq	r3,zero,15abc <_malloc_r+0x764>
   15900:	63000017 	ldw	r12,0(r12)
   15904:	213fffc4 	addi	r4,r4,-1
   15908:	60bffa26 	beq	r12,r2,158f4 <_malloc_r+0x59c>
   1590c:	98800117 	ldw	r2,4(r19)
   15910:	294b883a 	add	r5,r5,r5
   15914:	117f5a36 	bltu	r2,r5,15680 <_malloc_r+0x328>
   15918:	283f5926 	beq	r5,zero,15680 <_malloc_r+0x328>
   1591c:	1146703a 	and	r3,r2,r5
   15920:	18001626 	beq	r3,zero,1597c <_malloc_r+0x624>
   15924:	5809883a 	mov	r4,r11
   15928:	003f1a06 	br	15594 <_malloc_r+0x23c>
   1592c:	80800204 	addi	r2,r16,8
   15930:	84000517 	ldw	r16,20(r16)
   15934:	143ea81e 	bne	r2,r16,153d8 <_malloc_r+0x80>
   15938:	21000084 	addi	r4,r4,2
   1593c:	003ee306 	br	154cc <_malloc_r+0x174>
   15940:	210016c4 	addi	r4,r4,91
   15944:	210b883a 	add	r5,r4,r4
   15948:	003eca06 	br	15474 <_malloc_r+0x11c>
   1594c:	100ad1ba 	srli	r5,r2,6
   15950:	29400e04 	addi	r5,r5,56
   15954:	294d883a 	add	r6,r5,r5
   15958:	003fbd06 	br	15850 <_malloc_r+0x4f8>
   1595c:	84ff6026 	beq	r16,r19,156e0 <_malloc_r+0x388>
   15960:	00800174 	movhi	r2,5
   15964:	10a1ef04 	addi	r2,r2,-30788
   15968:	14000217 	ldw	r16,8(r2)
   1596c:	00bfff04 	movi	r2,-4
   15970:	80c00117 	ldw	r3,4(r16)
   15974:	1886703a 	and	r3,r3,r2
   15978:	003f9406 	br	157cc <_malloc_r+0x474>
   1597c:	294b883a 	add	r5,r5,r5
   15980:	1146703a 	and	r3,r2,r5
   15984:	5ac00104 	addi	r11,r11,4
   15988:	183ffc26 	beq	r3,zero,1597c <_malloc_r+0x624>
   1598c:	5809883a 	mov	r4,r11
   15990:	003f0006 	br	15594 <_malloc_r+0x23c>
   15994:	00805504 	movi	r2,340
   15998:	11001336 	bltu	r2,r4,159e8 <_malloc_r+0x690>
   1599c:	8808d3fa 	srli	r4,r17,15
   159a0:	21001dc4 	addi	r4,r4,119
   159a4:	210b883a 	add	r5,r4,r4
   159a8:	003eb206 	br	15474 <_malloc_r+0x11c>
   159ac:	00840004 	movi	r2,4096
   159b0:	003f5d06 	br	15728 <_malloc_r+0x3d0>
   159b4:	00800044 	movi	r2,1
   159b8:	a0800115 	stw	r2,4(r20)
   159bc:	a021883a 	mov	r16,r20
   159c0:	0007883a 	mov	r3,zero
   159c4:	003f8106 	br	157cc <_malloc_r+0x474>
   159c8:	280bd0ba 	srai	r5,r5,2
   159cc:	01800044 	movi	r6,1
   159d0:	38800117 	ldw	r2,4(r7)
   159d4:	314c983a 	sll	r6,r6,r5
   159d8:	180b883a 	mov	r5,r3
   159dc:	3084b03a 	or	r2,r6,r2
   159e0:	38800115 	stw	r2,4(r7)
   159e4:	003fa906 	br	1588c <_malloc_r+0x534>
   159e8:	00815504 	movi	r2,1364
   159ec:	11001836 	bltu	r2,r4,15a50 <_malloc_r+0x6f8>
   159f0:	8808d4ba 	srli	r4,r17,18
   159f4:	21001f04 	addi	r4,r4,124
   159f8:	210b883a 	add	r5,r4,r4
   159fc:	003e9d06 	br	15474 <_malloc_r+0x11c>
   15a00:	bdc00404 	addi	r23,r23,16
   15a04:	003f2f06 	br	156c4 <_malloc_r+0x36c>
   15a08:	01401504 	movi	r5,84
   15a0c:	28c01f36 	bltu	r5,r3,15a8c <_malloc_r+0x734>
   15a10:	100ad33a 	srli	r5,r2,12
   15a14:	29401b84 	addi	r5,r5,110
   15a18:	294d883a 	add	r6,r5,r5
   15a1c:	003f8c06 	br	15850 <_malloc_r+0x4f8>
   15a20:	9c000217 	ldw	r16,8(r19)
   15a24:	00bfff04 	movi	r2,-4
   15a28:	80c00117 	ldw	r3,4(r16)
   15a2c:	1886703a 	and	r3,r3,r2
   15a30:	003f6606 	br	157cc <_malloc_r+0x474>
   15a34:	e0c3ffcc 	andi	r3,fp,4095
   15a38:	183f2f1e 	bne	r3,zero,156f8 <_malloc_r+0x3a0>
   15a3c:	98c00217 	ldw	r3,8(r19)
   15a40:	bd49883a 	add	r4,r23,r21
   15a44:	21000054 	ori	r4,r4,1
   15a48:	19000115 	stw	r4,4(r3)
   15a4c:	003f5506 	br	157a4 <_malloc_r+0x44c>
   15a50:	01403f04 	movi	r5,252
   15a54:	01001f84 	movi	r4,126
   15a58:	003e8606 	br	15474 <_malloc_r+0x11c>
   15a5c:	9009883a 	mov	r4,r18
   15a60:	81400204 	addi	r5,r16,8
   15a64:	00147c00 	call	147c0 <_free_r>
   15a68:	00800174 	movhi	r2,5
   15a6c:	10a79604 	addi	r2,r2,-25000
   15a70:	10800017 	ldw	r2,0(r2)
   15a74:	003f4b06 	br	157a4 <_malloc_r+0x44c>
   15a78:	00c00044 	movi	r3,1
   15a7c:	002f883a 	mov	r23,zero
   15a80:	003f3406 	br	15754 <_malloc_r+0x3fc>
   15a84:	d5200315 	stw	r20,-32756(gp)
   15a88:	003f2106 	br	15710 <_malloc_r+0x3b8>
   15a8c:	01405504 	movi	r5,340
   15a90:	28c00436 	bltu	r5,r3,15aa4 <_malloc_r+0x74c>
   15a94:	100ad3fa 	srli	r5,r2,15
   15a98:	29401dc4 	addi	r5,r5,119
   15a9c:	294d883a 	add	r6,r5,r5
   15aa0:	003f6b06 	br	15850 <_malloc_r+0x4f8>
   15aa4:	01415504 	movi	r5,1364
   15aa8:	28c00936 	bltu	r5,r3,15ad0 <_malloc_r+0x778>
   15aac:	100ad4ba 	srli	r5,r2,18
   15ab0:	29401f04 	addi	r5,r5,124
   15ab4:	294d883a 	add	r6,r5,r5
   15ab8:	003f6506 	br	15850 <_malloc_r+0x4f8>
   15abc:	98800117 	ldw	r2,4(r19)
   15ac0:	0146303a 	nor	r3,zero,r5
   15ac4:	1884703a 	and	r2,r3,r2
   15ac8:	98800115 	stw	r2,4(r19)
   15acc:	003f9006 	br	15910 <_malloc_r+0x5b8>
   15ad0:	01803f04 	movi	r6,252
   15ad4:	01401f84 	movi	r5,126
   15ad8:	003f5d06 	br	15850 <_malloc_r+0x4f8>

00015adc <memchr>:
   15adc:	008000c4 	movi	r2,3
   15ae0:	29403fcc 	andi	r5,r5,255
   15ae4:	1180282e 	bgeu	r2,r6,15b88 <memchr+0xac>
   15ae8:	2086703a 	and	r3,r4,r2
   15aec:	1800351e 	bne	r3,zero,15bc4 <memchr+0xe8>
   15af0:	2816923a 	slli	r11,r5,8
   15af4:	2093883a 	add	r9,r4,r2
   15af8:	22000084 	addi	r8,r4,2
   15afc:	5957883a 	add	r11,r11,r5
   15b00:	5816923a 	slli	r11,r11,8
   15b04:	20c00044 	addi	r3,r4,1
   15b08:	037fbff4 	movhi	r13,65279
   15b0c:	6b7fbfc4 	addi	r13,r13,-257
   15b10:	5957883a 	add	r11,r11,r5
   15b14:	5816923a 	slli	r11,r11,8
   15b18:	03202074 	movhi	r12,32897
   15b1c:	63202004 	addi	r12,r12,-32640
   15b20:	101d883a 	mov	r14,r2
   15b24:	5957883a 	add	r11,r11,r5
   15b28:	21c00017 	ldw	r7,0(r4)
   15b2c:	31bfff04 	addi	r6,r6,-4
   15b30:	1805883a 	mov	r2,r3
   15b34:	3acef03a 	xor	r7,r7,r11
   15b38:	3b55883a 	add	r10,r7,r13
   15b3c:	01ce303a 	nor	r7,zero,r7
   15b40:	51ce703a 	and	r7,r10,r7
   15b44:	3b0e703a 	and	r7,r7,r12
   15b48:	38000a26 	beq	r7,zero,15b74 <memchr+0x98>
   15b4c:	21c00003 	ldbu	r7,0(r4)
   15b50:	39401e26 	beq	r7,r5,15bcc <memchr+0xf0>
   15b54:	19c00003 	ldbu	r7,0(r3)
   15b58:	39401926 	beq	r7,r5,15bc0 <memchr+0xe4>
   15b5c:	41c00003 	ldbu	r7,0(r8)
   15b60:	4005883a 	mov	r2,r8
   15b64:	39401626 	beq	r7,r5,15bc0 <memchr+0xe4>
   15b68:	49c00003 	ldbu	r7,0(r9)
   15b6c:	4805883a 	mov	r2,r9
   15b70:	39401326 	beq	r7,r5,15bc0 <memchr+0xe4>
   15b74:	21000104 	addi	r4,r4,4
   15b78:	4a400104 	addi	r9,r9,4
   15b7c:	42000104 	addi	r8,r8,4
   15b80:	18c00104 	addi	r3,r3,4
   15b84:	71bfe836 	bltu	r14,r6,15b28 <memchr+0x4c>
   15b88:	2005883a 	mov	r2,r4
   15b8c:	30000a26 	beq	r6,zero,15bb8 <memchr+0xdc>
   15b90:	10c00003 	ldbu	r3,0(r2)
   15b94:	19400a26 	beq	r3,r5,15bc0 <memchr+0xe4>
   15b98:	10c00044 	addi	r3,r2,1
   15b9c:	118d883a 	add	r6,r2,r6
   15ba0:	00000306 	br	15bb0 <memchr+0xd4>
   15ba4:	11000003 	ldbu	r4,0(r2)
   15ba8:	18c00044 	addi	r3,r3,1
   15bac:	21400426 	beq	r4,r5,15bc0 <memchr+0xe4>
   15bb0:	1805883a 	mov	r2,r3
   15bb4:	19bffb1e 	bne	r3,r6,15ba4 <memchr+0xc8>
   15bb8:	0005883a 	mov	r2,zero
   15bbc:	f800283a 	ret
   15bc0:	f800283a 	ret
   15bc4:	2005883a 	mov	r2,r4
   15bc8:	003ff106 	br	15b90 <memchr+0xb4>
   15bcc:	2005883a 	mov	r2,r4
   15bd0:	f800283a 	ret

00015bd4 <memcpy>:
   15bd4:	00c003c4 	movi	r3,15
   15bd8:	2005883a 	mov	r2,r4
   15bdc:	3009883a 	mov	r4,r6
   15be0:	1980032e 	bgeu	r3,r6,15bf0 <memcpy+0x1c>
   15be4:	2886b03a 	or	r3,r5,r2
   15be8:	18c000cc 	andi	r3,r3,3
   15bec:	18000926 	beq	r3,zero,15c14 <memcpy+0x40>
   15bf0:	1007883a 	mov	r3,r2
   15bf4:	290f883a 	add	r7,r5,r4
   15bf8:	20000526 	beq	r4,zero,15c10 <memcpy+0x3c>
   15bfc:	29800003 	ldbu	r6,0(r5)
   15c00:	18c00044 	addi	r3,r3,1
   15c04:	29400044 	addi	r5,r5,1
   15c08:	19bfffc5 	stb	r6,-1(r3)
   15c0c:	29fffb1e 	bne	r5,r7,15bfc <memcpy+0x28>
   15c10:	f800283a 	ret
   15c14:	327ffc04 	addi	r9,r6,-16
   15c18:	4812d13a 	srli	r9,r9,4
   15c1c:	11000404 	addi	r4,r2,16
   15c20:	1007883a 	mov	r3,r2
   15c24:	4810913a 	slli	r8,r9,4
   15c28:	280f883a 	mov	r7,r5
   15c2c:	2209883a 	add	r4,r4,r8
   15c30:	3a000017 	ldw	r8,0(r7)
   15c34:	18c00404 	addi	r3,r3,16
   15c38:	39c00404 	addi	r7,r7,16
   15c3c:	1a3ffc15 	stw	r8,-16(r3)
   15c40:	3a3ffd17 	ldw	r8,-12(r7)
   15c44:	1a3ffd15 	stw	r8,-12(r3)
   15c48:	3a3ffe17 	ldw	r8,-8(r7)
   15c4c:	1a3ffe15 	stw	r8,-8(r3)
   15c50:	3a3fff17 	ldw	r8,-4(r7)
   15c54:	1a3fff15 	stw	r8,-4(r3)
   15c58:	193ff51e 	bne	r3,r4,15c30 <memcpy+0x5c>
   15c5c:	49c00044 	addi	r7,r9,1
   15c60:	380e913a 	slli	r7,r7,4
   15c64:	310003cc 	andi	r4,r6,15
   15c68:	018000c4 	movi	r6,3
   15c6c:	11c7883a 	add	r3,r2,r7
   15c70:	29cb883a 	add	r5,r5,r7
   15c74:	313fdf2e 	bgeu	r6,r4,15bf4 <memcpy+0x20>
   15c78:	213fff04 	addi	r4,r4,-4
   15c7c:	2014d0ba 	srli	r10,r4,2
   15c80:	1a400104 	addi	r9,r3,4
   15c84:	180d883a 	mov	r6,r3
   15c88:	528f883a 	add	r7,r10,r10
   15c8c:	39cf883a 	add	r7,r7,r7
   15c90:	49d3883a 	add	r9,r9,r7
   15c94:	280f883a 	mov	r7,r5
   15c98:	3a000017 	ldw	r8,0(r7)
   15c9c:	31800104 	addi	r6,r6,4
   15ca0:	39c00104 	addi	r7,r7,4
   15ca4:	323fff15 	stw	r8,-4(r6)
   15ca8:	327ffb1e 	bne	r6,r9,15c98 <memcpy+0xc4>
   15cac:	51800044 	addi	r6,r10,1
   15cb0:	52bfff24 	muli	r10,r10,-4
   15cb4:	318d883a 	add	r6,r6,r6
   15cb8:	318d883a 	add	r6,r6,r6
   15cbc:	5109883a 	add	r4,r10,r4
   15cc0:	298b883a 	add	r5,r5,r6
   15cc4:	1987883a 	add	r3,r3,r6
   15cc8:	003fca06 	br	15bf4 <memcpy+0x20>

00015ccc <memmove>:
   15ccc:	2005883a 	mov	r2,r4
   15cd0:	300f883a 	mov	r7,r6
   15cd4:	29000b2e 	bgeu	r5,r4,15d04 <memmove+0x38>
   15cd8:	2987883a 	add	r3,r5,r6
   15cdc:	20c0092e 	bgeu	r4,r3,15d04 <memmove+0x38>
   15ce0:	218b883a 	add	r5,r4,r6
   15ce4:	198fc83a 	sub	r7,r3,r6
   15ce8:	30003f26 	beq	r6,zero,15de8 <memmove+0x11c>
   15cec:	18ffffc4 	addi	r3,r3,-1
   15cf0:	19000003 	ldbu	r4,0(r3)
   15cf4:	297fffc4 	addi	r5,r5,-1
   15cf8:	29000005 	stb	r4,0(r5)
   15cfc:	19fffb1e 	bne	r3,r7,15cec <memmove+0x20>
   15d00:	f800283a 	ret
   15d04:	00c003c4 	movi	r3,15
   15d08:	1980382e 	bgeu	r3,r6,15dec <memmove+0x120>
   15d0c:	2886b03a 	or	r3,r5,r2
   15d10:	18c000cc 	andi	r3,r3,3
   15d14:	1800351e 	bne	r3,zero,15dec <memmove+0x120>
   15d18:	327ffc04 	addi	r9,r6,-16
   15d1c:	4812d13a 	srli	r9,r9,4
   15d20:	12000404 	addi	r8,r2,16
   15d24:	1007883a 	mov	r3,r2
   15d28:	4808913a 	slli	r4,r9,4
   15d2c:	280f883a 	mov	r7,r5
   15d30:	4111883a 	add	r8,r8,r4
   15d34:	39000017 	ldw	r4,0(r7)
   15d38:	18c00404 	addi	r3,r3,16
   15d3c:	39c00404 	addi	r7,r7,16
   15d40:	193ffc15 	stw	r4,-16(r3)
   15d44:	393ffd17 	ldw	r4,-12(r7)
   15d48:	193ffd15 	stw	r4,-12(r3)
   15d4c:	393ffe17 	ldw	r4,-8(r7)
   15d50:	193ffe15 	stw	r4,-8(r3)
   15d54:	393fff17 	ldw	r4,-4(r7)
   15d58:	193fff15 	stw	r4,-4(r3)
   15d5c:	1a3ff51e 	bne	r3,r8,15d34 <memmove+0x68>
   15d60:	49000044 	addi	r4,r9,1
   15d64:	2008913a 	slli	r4,r4,4
   15d68:	31c003cc 	andi	r7,r6,15
   15d6c:	1107883a 	add	r3,r2,r4
   15d70:	290b883a 	add	r5,r5,r4
   15d74:	010000c4 	movi	r4,3
   15d78:	21c0142e 	bgeu	r4,r7,15dcc <memmove+0x100>
   15d7c:	39ffff04 	addi	r7,r7,-4
   15d80:	3814d0ba 	srli	r10,r7,2
   15d84:	1a400104 	addi	r9,r3,4
   15d88:	180d883a 	mov	r6,r3
   15d8c:	5289883a 	add	r4,r10,r10
   15d90:	2109883a 	add	r4,r4,r4
   15d94:	4913883a 	add	r9,r9,r4
   15d98:	2809883a 	mov	r4,r5
   15d9c:	22000017 	ldw	r8,0(r4)
   15da0:	31800104 	addi	r6,r6,4
   15da4:	21000104 	addi	r4,r4,4
   15da8:	323fff15 	stw	r8,-4(r6)
   15dac:	327ffb1e 	bne	r6,r9,15d9c <memmove+0xd0>
   15db0:	51000044 	addi	r4,r10,1
   15db4:	52bfff24 	muli	r10,r10,-4
   15db8:	2109883a 	add	r4,r4,r4
   15dbc:	2109883a 	add	r4,r4,r4
   15dc0:	51cf883a 	add	r7,r10,r7
   15dc4:	290b883a 	add	r5,r5,r4
   15dc8:	1907883a 	add	r3,r3,r4
   15dcc:	38000626 	beq	r7,zero,15de8 <memmove+0x11c>
   15dd0:	19cf883a 	add	r7,r3,r7
   15dd4:	29800003 	ldbu	r6,0(r5)
   15dd8:	18c00044 	addi	r3,r3,1
   15ddc:	29400044 	addi	r5,r5,1
   15de0:	19bfffc5 	stb	r6,-1(r3)
   15de4:	19fffb1e 	bne	r3,r7,15dd4 <memmove+0x108>
   15de8:	f800283a 	ret
   15dec:	1007883a 	mov	r3,r2
   15df0:	003ff606 	br	15dcc <memmove+0x100>

00015df4 <memset>:
   15df4:	00c000c4 	movi	r3,3
   15df8:	2005883a 	mov	r2,r4
   15dfc:	29403fcc 	andi	r5,r5,255
   15e00:	19802d2e 	bgeu	r3,r6,15eb8 <memset+0xc4>
   15e04:	20c6703a 	and	r3,r4,r3
   15e08:	18002e1e 	bne	r3,zero,15ec4 <memset+0xd0>
   15e0c:	2806923a 	slli	r3,r5,8
   15e10:	010003c4 	movi	r4,15
   15e14:	3011883a 	mov	r8,r6
   15e18:	1946b03a 	or	r3,r3,r5
   15e1c:	180e943a 	slli	r7,r3,16
   15e20:	38ceb03a 	or	r7,r7,r3
   15e24:	1007883a 	mov	r3,r2
   15e28:	21800f2e 	bgeu	r4,r6,15e68 <memset+0x74>
   15e2c:	19c00015 	stw	r7,0(r3)
   15e30:	19c00115 	stw	r7,4(r3)
   15e34:	19c00215 	stw	r7,8(r3)
   15e38:	19c00315 	stw	r7,12(r3)
   15e3c:	423ffc04 	addi	r8,r8,-16
   15e40:	18c00404 	addi	r3,r3,16
   15e44:	223ff936 	bltu	r4,r8,15e2c <memset+0x38>
   15e48:	30fffc04 	addi	r3,r6,-16
   15e4c:	1806d13a 	srli	r3,r3,4
   15e50:	318003cc 	andi	r6,r6,15
   15e54:	010000c4 	movi	r4,3
   15e58:	18c00044 	addi	r3,r3,1
   15e5c:	1806913a 	slli	r3,r3,4
   15e60:	10c7883a 	add	r3,r2,r3
   15e64:	21800e2e 	bgeu	r4,r6,15ea0 <memset+0xac>
   15e68:	1813883a 	mov	r9,r3
   15e6c:	3011883a 	mov	r8,r6
   15e70:	010000c4 	movi	r4,3
   15e74:	49c00015 	stw	r7,0(r9)
   15e78:	423fff04 	addi	r8,r8,-4
   15e7c:	4a400104 	addi	r9,r9,4
   15e80:	223ffc36 	bltu	r4,r8,15e74 <memset+0x80>
   15e84:	313fff04 	addi	r4,r6,-4
   15e88:	2008d0ba 	srli	r4,r4,2
   15e8c:	318000cc 	andi	r6,r6,3
   15e90:	21000044 	addi	r4,r4,1
   15e94:	2109883a 	add	r4,r4,r4
   15e98:	2109883a 	add	r4,r4,r4
   15e9c:	1907883a 	add	r3,r3,r4
   15ea0:	30000a26 	beq	r6,zero,15ecc <memset+0xd8>
   15ea4:	198d883a 	add	r6,r3,r6
   15ea8:	19400005 	stb	r5,0(r3)
   15eac:	18c00044 	addi	r3,r3,1
   15eb0:	19bffd1e 	bne	r3,r6,15ea8 <memset+0xb4>
   15eb4:	f800283a 	ret
   15eb8:	2007883a 	mov	r3,r4
   15ebc:	303ff91e 	bne	r6,zero,15ea4 <memset+0xb0>
   15ec0:	00000206 	br	15ecc <memset+0xd8>
   15ec4:	2007883a 	mov	r3,r4
   15ec8:	003ff606 	br	15ea4 <memset+0xb0>
   15ecc:	f800283a 	ret

00015ed0 <_Balloc>:
   15ed0:	20801317 	ldw	r2,76(r4)
   15ed4:	defffc04 	addi	sp,sp,-16
   15ed8:	dc400115 	stw	r17,4(sp)
   15edc:	dc000015 	stw	r16,0(sp)
   15ee0:	dfc00315 	stw	ra,12(sp)
   15ee4:	dc800215 	stw	r18,8(sp)
   15ee8:	2023883a 	mov	r17,r4
   15eec:	2821883a 	mov	r16,r5
   15ef0:	10000f26 	beq	r2,zero,15f30 <_Balloc+0x60>
   15ef4:	8407883a 	add	r3,r16,r16
   15ef8:	18c7883a 	add	r3,r3,r3
   15efc:	10c7883a 	add	r3,r2,r3
   15f00:	18800017 	ldw	r2,0(r3)
   15f04:	10001126 	beq	r2,zero,15f4c <_Balloc+0x7c>
   15f08:	11000017 	ldw	r4,0(r2)
   15f0c:	19000015 	stw	r4,0(r3)
   15f10:	10000415 	stw	zero,16(r2)
   15f14:	10000315 	stw	zero,12(r2)
   15f18:	dfc00317 	ldw	ra,12(sp)
   15f1c:	dc800217 	ldw	r18,8(sp)
   15f20:	dc400117 	ldw	r17,4(sp)
   15f24:	dc000017 	ldw	r16,0(sp)
   15f28:	dec00404 	addi	sp,sp,16
   15f2c:	f800283a 	ret
   15f30:	01400104 	movi	r5,4
   15f34:	01800404 	movi	r6,16
   15f38:	001778c0 	call	1778c <_calloc_r>
   15f3c:	88801315 	stw	r2,76(r17)
   15f40:	103fec1e 	bne	r2,zero,15ef4 <_Balloc+0x24>
   15f44:	0005883a 	mov	r2,zero
   15f48:	003ff306 	br	15f18 <_Balloc+0x48>
   15f4c:	01400044 	movi	r5,1
   15f50:	2c24983a 	sll	r18,r5,r16
   15f54:	8809883a 	mov	r4,r17
   15f58:	91800144 	addi	r6,r18,5
   15f5c:	318d883a 	add	r6,r6,r6
   15f60:	318d883a 	add	r6,r6,r6
   15f64:	001778c0 	call	1778c <_calloc_r>
   15f68:	103ff626 	beq	r2,zero,15f44 <_Balloc+0x74>
   15f6c:	14000115 	stw	r16,4(r2)
   15f70:	14800215 	stw	r18,8(r2)
   15f74:	003fe606 	br	15f10 <_Balloc+0x40>

00015f78 <_Bfree>:
   15f78:	28000826 	beq	r5,zero,15f9c <_Bfree+0x24>
   15f7c:	28c00117 	ldw	r3,4(r5)
   15f80:	20801317 	ldw	r2,76(r4)
   15f84:	18c7883a 	add	r3,r3,r3
   15f88:	18c7883a 	add	r3,r3,r3
   15f8c:	10c5883a 	add	r2,r2,r3
   15f90:	10c00017 	ldw	r3,0(r2)
   15f94:	28c00015 	stw	r3,0(r5)
   15f98:	11400015 	stw	r5,0(r2)
   15f9c:	f800283a 	ret

00015fa0 <__multadd>:
   15fa0:	defffa04 	addi	sp,sp,-24
   15fa4:	dc000115 	stw	r16,4(sp)
   15fa8:	2c000417 	ldw	r16,16(r5)
   15fac:	dc800315 	stw	r18,12(sp)
   15fb0:	dc400215 	stw	r17,8(sp)
   15fb4:	dfc00515 	stw	ra,20(sp)
   15fb8:	dcc00415 	stw	r19,16(sp)
   15fbc:	2823883a 	mov	r17,r5
   15fc0:	2025883a 	mov	r18,r4
   15fc4:	28c00504 	addi	r3,r5,20
   15fc8:	0011883a 	mov	r8,zero
   15fcc:	1a800017 	ldw	r10,0(r3)
   15fd0:	18c00104 	addi	r3,r3,4
   15fd4:	42000044 	addi	r8,r8,1
   15fd8:	527fffcc 	andi	r9,r10,65535
   15fdc:	4993383a 	mul	r9,r9,r6
   15fe0:	5014d43a 	srli	r10,r10,16
   15fe4:	49d3883a 	add	r9,r9,r7
   15fe8:	480ed43a 	srli	r7,r9,16
   15fec:	5195383a 	mul	r10,r10,r6
   15ff0:	4a7fffcc 	andi	r9,r9,65535
   15ff4:	3a8f883a 	add	r7,r7,r10
   15ff8:	3814943a 	slli	r10,r7,16
   15ffc:	380ed43a 	srli	r7,r7,16
   16000:	5253883a 	add	r9,r10,r9
   16004:	1a7fff15 	stw	r9,-4(r3)
   16008:	443ff016 	blt	r8,r16,15fcc <__multadd+0x2c>
   1600c:	38000926 	beq	r7,zero,16034 <__multadd+0x94>
   16010:	88800217 	ldw	r2,8(r17)
   16014:	80800f0e 	bge	r16,r2,16054 <__multadd+0xb4>
   16018:	80800144 	addi	r2,r16,5
   1601c:	1085883a 	add	r2,r2,r2
   16020:	1085883a 	add	r2,r2,r2
   16024:	8885883a 	add	r2,r17,r2
   16028:	84000044 	addi	r16,r16,1
   1602c:	11c00015 	stw	r7,0(r2)
   16030:	8c000415 	stw	r16,16(r17)
   16034:	8805883a 	mov	r2,r17
   16038:	dfc00517 	ldw	ra,20(sp)
   1603c:	dcc00417 	ldw	r19,16(sp)
   16040:	dc800317 	ldw	r18,12(sp)
   16044:	dc400217 	ldw	r17,8(sp)
   16048:	dc000117 	ldw	r16,4(sp)
   1604c:	dec00604 	addi	sp,sp,24
   16050:	f800283a 	ret
   16054:	89400117 	ldw	r5,4(r17)
   16058:	9009883a 	mov	r4,r18
   1605c:	d9c00015 	stw	r7,0(sp)
   16060:	29400044 	addi	r5,r5,1
   16064:	0015ed00 	call	15ed0 <_Balloc>
   16068:	89800417 	ldw	r6,16(r17)
   1606c:	89400304 	addi	r5,r17,12
   16070:	11000304 	addi	r4,r2,12
   16074:	31800084 	addi	r6,r6,2
   16078:	318d883a 	add	r6,r6,r6
   1607c:	318d883a 	add	r6,r6,r6
   16080:	1027883a 	mov	r19,r2
   16084:	0015bd40 	call	15bd4 <memcpy>
   16088:	88c00117 	ldw	r3,4(r17)
   1608c:	90801317 	ldw	r2,76(r18)
   16090:	d9c00017 	ldw	r7,0(sp)
   16094:	18c7883a 	add	r3,r3,r3
   16098:	18c7883a 	add	r3,r3,r3
   1609c:	10c5883a 	add	r2,r2,r3
   160a0:	10c00017 	ldw	r3,0(r2)
   160a4:	88c00015 	stw	r3,0(r17)
   160a8:	14400015 	stw	r17,0(r2)
   160ac:	9823883a 	mov	r17,r19
   160b0:	003fd906 	br	16018 <__multadd+0x78>

000160b4 <__s2b>:
   160b4:	defff904 	addi	sp,sp,-28
   160b8:	dd000415 	stw	r20,16(sp)
   160bc:	dc400115 	stw	r17,4(sp)
   160c0:	2829883a 	mov	r20,r5
   160c4:	2023883a 	mov	r17,r4
   160c8:	01400244 	movi	r5,9
   160cc:	39000204 	addi	r4,r7,8
   160d0:	dcc00315 	stw	r19,12(sp)
   160d4:	dc800215 	stw	r18,8(sp)
   160d8:	dfc00615 	stw	ra,24(sp)
   160dc:	dd400515 	stw	r21,20(sp)
   160e0:	dc000015 	stw	r16,0(sp)
   160e4:	3825883a 	mov	r18,r7
   160e8:	3027883a 	mov	r19,r6
   160ec:	00107640 	call	10764 <__divsi3>
   160f0:	00c00044 	movi	r3,1
   160f4:	000b883a 	mov	r5,zero
   160f8:	1880030e 	bge	r3,r2,16108 <__s2b+0x54>
   160fc:	18c7883a 	add	r3,r3,r3
   16100:	29400044 	addi	r5,r5,1
   16104:	18bffd16 	blt	r3,r2,160fc <__s2b+0x48>
   16108:	8809883a 	mov	r4,r17
   1610c:	0015ed00 	call	15ed0 <_Balloc>
   16110:	d8c00717 	ldw	r3,28(sp)
   16114:	10c00515 	stw	r3,20(r2)
   16118:	00c00044 	movi	r3,1
   1611c:	10c00415 	stw	r3,16(r2)
   16120:	00c00244 	movi	r3,9
   16124:	1cc0210e 	bge	r3,r19,161ac <__s2b+0xf8>
   16128:	a0eb883a 	add	r21,r20,r3
   1612c:	a821883a 	mov	r16,r21
   16130:	a4e9883a 	add	r20,r20,r19
   16134:	81c00007 	ldb	r7,0(r16)
   16138:	8809883a 	mov	r4,r17
   1613c:	84000044 	addi	r16,r16,1
   16140:	100b883a 	mov	r5,r2
   16144:	01800284 	movi	r6,10
   16148:	39fff404 	addi	r7,r7,-48
   1614c:	0015fa00 	call	15fa0 <__multadd>
   16150:	853ff81e 	bne	r16,r20,16134 <__s2b+0x80>
   16154:	ace1883a 	add	r16,r21,r19
   16158:	843ffe04 	addi	r16,r16,-8
   1615c:	9c800a0e 	bge	r19,r18,16188 <__s2b+0xd4>
   16160:	94e5c83a 	sub	r18,r18,r19
   16164:	84a5883a 	add	r18,r16,r18
   16168:	81c00007 	ldb	r7,0(r16)
   1616c:	8809883a 	mov	r4,r17
   16170:	84000044 	addi	r16,r16,1
   16174:	100b883a 	mov	r5,r2
   16178:	01800284 	movi	r6,10
   1617c:	39fff404 	addi	r7,r7,-48
   16180:	0015fa00 	call	15fa0 <__multadd>
   16184:	84bff81e 	bne	r16,r18,16168 <__s2b+0xb4>
   16188:	dfc00617 	ldw	ra,24(sp)
   1618c:	dd400517 	ldw	r21,20(sp)
   16190:	dd000417 	ldw	r20,16(sp)
   16194:	dcc00317 	ldw	r19,12(sp)
   16198:	dc800217 	ldw	r18,8(sp)
   1619c:	dc400117 	ldw	r17,4(sp)
   161a0:	dc000017 	ldw	r16,0(sp)
   161a4:	dec00704 	addi	sp,sp,28
   161a8:	f800283a 	ret
   161ac:	a4000284 	addi	r16,r20,10
   161b0:	1827883a 	mov	r19,r3
   161b4:	003fe906 	br	1615c <__s2b+0xa8>

000161b8 <__hi0bits>:
   161b8:	20bfffec 	andhi	r2,r4,65535
   161bc:	1000141e 	bne	r2,zero,16210 <__hi0bits+0x58>
   161c0:	2008943a 	slli	r4,r4,16
   161c4:	00800404 	movi	r2,16
   161c8:	20ffc02c 	andhi	r3,r4,65280
   161cc:	1800021e 	bne	r3,zero,161d8 <__hi0bits+0x20>
   161d0:	2008923a 	slli	r4,r4,8
   161d4:	10800204 	addi	r2,r2,8
   161d8:	20fc002c 	andhi	r3,r4,61440
   161dc:	1800021e 	bne	r3,zero,161e8 <__hi0bits+0x30>
   161e0:	2008913a 	slli	r4,r4,4
   161e4:	10800104 	addi	r2,r2,4
   161e8:	20f0002c 	andhi	r3,r4,49152
   161ec:	1800031e 	bne	r3,zero,161fc <__hi0bits+0x44>
   161f0:	2109883a 	add	r4,r4,r4
   161f4:	10800084 	addi	r2,r2,2
   161f8:	2109883a 	add	r4,r4,r4
   161fc:	20000316 	blt	r4,zero,1620c <__hi0bits+0x54>
   16200:	2110002c 	andhi	r4,r4,16384
   16204:	2000041e 	bne	r4,zero,16218 <__hi0bits+0x60>
   16208:	00800804 	movi	r2,32
   1620c:	f800283a 	ret
   16210:	0005883a 	mov	r2,zero
   16214:	003fec06 	br	161c8 <__hi0bits+0x10>
   16218:	10800044 	addi	r2,r2,1
   1621c:	f800283a 	ret

00016220 <__lo0bits>:
   16220:	20c00017 	ldw	r3,0(r4)
   16224:	188001cc 	andi	r2,r3,7
   16228:	10000826 	beq	r2,zero,1624c <__lo0bits+0x2c>
   1622c:	1880004c 	andi	r2,r3,1
   16230:	1000211e 	bne	r2,zero,162b8 <__lo0bits+0x98>
   16234:	1880008c 	andi	r2,r3,2
   16238:	1000211e 	bne	r2,zero,162c0 <__lo0bits+0xa0>
   1623c:	1806d0ba 	srli	r3,r3,2
   16240:	00800084 	movi	r2,2
   16244:	20c00015 	stw	r3,0(r4)
   16248:	f800283a 	ret
   1624c:	18bfffcc 	andi	r2,r3,65535
   16250:	10001326 	beq	r2,zero,162a0 <__lo0bits+0x80>
   16254:	0005883a 	mov	r2,zero
   16258:	19403fcc 	andi	r5,r3,255
   1625c:	2800021e 	bne	r5,zero,16268 <__lo0bits+0x48>
   16260:	1806d23a 	srli	r3,r3,8
   16264:	10800204 	addi	r2,r2,8
   16268:	194003cc 	andi	r5,r3,15
   1626c:	2800021e 	bne	r5,zero,16278 <__lo0bits+0x58>
   16270:	1806d13a 	srli	r3,r3,4
   16274:	10800104 	addi	r2,r2,4
   16278:	194000cc 	andi	r5,r3,3
   1627c:	2800021e 	bne	r5,zero,16288 <__lo0bits+0x68>
   16280:	1806d0ba 	srli	r3,r3,2
   16284:	10800084 	addi	r2,r2,2
   16288:	1940004c 	andi	r5,r3,1
   1628c:	2800081e 	bne	r5,zero,162b0 <__lo0bits+0x90>
   16290:	1806d07a 	srli	r3,r3,1
   16294:	1800051e 	bne	r3,zero,162ac <__lo0bits+0x8c>
   16298:	00800804 	movi	r2,32
   1629c:	f800283a 	ret
   162a0:	1806d43a 	srli	r3,r3,16
   162a4:	00800404 	movi	r2,16
   162a8:	003feb06 	br	16258 <__lo0bits+0x38>
   162ac:	10800044 	addi	r2,r2,1
   162b0:	20c00015 	stw	r3,0(r4)
   162b4:	f800283a 	ret
   162b8:	0005883a 	mov	r2,zero
   162bc:	f800283a 	ret
   162c0:	1806d07a 	srli	r3,r3,1
   162c4:	00800044 	movi	r2,1
   162c8:	20c00015 	stw	r3,0(r4)
   162cc:	f800283a 	ret

000162d0 <__i2b>:
   162d0:	defffd04 	addi	sp,sp,-12
   162d4:	dc000015 	stw	r16,0(sp)
   162d8:	04000044 	movi	r16,1
   162dc:	dc400115 	stw	r17,4(sp)
   162e0:	2823883a 	mov	r17,r5
   162e4:	800b883a 	mov	r5,r16
   162e8:	dfc00215 	stw	ra,8(sp)
   162ec:	0015ed00 	call	15ed0 <_Balloc>
   162f0:	14400515 	stw	r17,20(r2)
   162f4:	14000415 	stw	r16,16(r2)
   162f8:	dfc00217 	ldw	ra,8(sp)
   162fc:	dc400117 	ldw	r17,4(sp)
   16300:	dc000017 	ldw	r16,0(sp)
   16304:	dec00304 	addi	sp,sp,12
   16308:	f800283a 	ret

0001630c <__multiply>:
   1630c:	defffa04 	addi	sp,sp,-24
   16310:	dcc00315 	stw	r19,12(sp)
   16314:	dc400115 	stw	r17,4(sp)
   16318:	34c00417 	ldw	r19,16(r6)
   1631c:	2c400417 	ldw	r17,16(r5)
   16320:	dd000415 	stw	r20,16(sp)
   16324:	dc800215 	stw	r18,8(sp)
   16328:	dfc00515 	stw	ra,20(sp)
   1632c:	dc000015 	stw	r16,0(sp)
   16330:	2825883a 	mov	r18,r5
   16334:	3029883a 	mov	r20,r6
   16338:	8cc0050e 	bge	r17,r19,16350 <__multiply+0x44>
   1633c:	8807883a 	mov	r3,r17
   16340:	3025883a 	mov	r18,r6
   16344:	9823883a 	mov	r17,r19
   16348:	2829883a 	mov	r20,r5
   1634c:	1827883a 	mov	r19,r3
   16350:	90800217 	ldw	r2,8(r18)
   16354:	8ce1883a 	add	r16,r17,r19
   16358:	91400117 	ldw	r5,4(r18)
   1635c:	1400010e 	bge	r2,r16,16364 <__multiply+0x58>
   16360:	29400044 	addi	r5,r5,1
   16364:	0015ed00 	call	15ed0 <_Balloc>
   16368:	83c00144 	addi	r15,r16,5
   1636c:	7bdf883a 	add	r15,r15,r15
   16370:	7bdf883a 	add	r15,r15,r15
   16374:	13800504 	addi	r14,r2,20
   16378:	13df883a 	add	r15,r2,r15
   1637c:	7007883a 	mov	r3,r14
   16380:	73c0032e 	bgeu	r14,r15,16390 <__multiply+0x84>
   16384:	18000015 	stw	zero,0(r3)
   16388:	18c00104 	addi	r3,r3,4
   1638c:	1bfffd36 	bltu	r3,r15,16384 <__multiply+0x78>
   16390:	99800144 	addi	r6,r19,5
   16394:	8b000144 	addi	r12,r17,5
   16398:	318d883a 	add	r6,r6,r6
   1639c:	6319883a 	add	r12,r12,r12
   163a0:	318d883a 	add	r6,r6,r6
   163a4:	6319883a 	add	r12,r12,r12
   163a8:	a3400504 	addi	r13,r20,20
   163ac:	a18d883a 	add	r6,r20,r6
   163b0:	94400504 	addi	r17,r18,20
   163b4:	9319883a 	add	r12,r18,r12
   163b8:	6980392e 	bgeu	r13,r6,164a0 <__multiply+0x194>
   163bc:	6a800017 	ldw	r10,0(r13)
   163c0:	52ffffcc 	andi	r11,r10,65535
   163c4:	58001826 	beq	r11,zero,16428 <__multiply+0x11c>
   163c8:	7007883a 	mov	r3,r14
   163cc:	8809883a 	mov	r4,r17
   163d0:	000b883a 	mov	r5,zero
   163d4:	22400017 	ldw	r9,0(r4)
   163d8:	1a000017 	ldw	r8,0(r3)
   163dc:	21000104 	addi	r4,r4,4
   163e0:	49ffffcc 	andi	r7,r9,65535
   163e4:	3acf383a 	mul	r7,r7,r11
   163e8:	4812d43a 	srli	r9,r9,16
   163ec:	42bfffcc 	andi	r10,r8,65535
   163f0:	3a8f883a 	add	r7,r7,r10
   163f4:	394f883a 	add	r7,r7,r5
   163f8:	4010d43a 	srli	r8,r8,16
   163fc:	4acb383a 	mul	r5,r9,r11
   16400:	3814d43a 	srli	r10,r7,16
   16404:	19c0000d 	sth	r7,0(r3)
   16408:	2a0b883a 	add	r5,r5,r8
   1640c:	2a8b883a 	add	r5,r5,r10
   16410:	1940008d 	sth	r5,2(r3)
   16414:	280ad43a 	srli	r5,r5,16
   16418:	18c00104 	addi	r3,r3,4
   1641c:	233fed36 	bltu	r4,r12,163d4 <__multiply+0xc8>
   16420:	19400015 	stw	r5,0(r3)
   16424:	6a800017 	ldw	r10,0(r13)
   16428:	5014d43a 	srli	r10,r10,16
   1642c:	50001926 	beq	r10,zero,16494 <__multiply+0x188>
   16430:	71400017 	ldw	r5,0(r14)
   16434:	7007883a 	mov	r3,r14
   16438:	8809883a 	mov	r4,r17
   1643c:	280f883a 	mov	r7,r5
   16440:	0017883a 	mov	r11,zero
   16444:	22400017 	ldw	r9,0(r4)
   16448:	380ed43a 	srli	r7,r7,16
   1644c:	1940000d 	sth	r5,0(r3)
   16450:	4a3fffcc 	andi	r8,r9,65535
   16454:	4291383a 	mul	r8,r8,r10
   16458:	4812d43a 	srli	r9,r9,16
   1645c:	18c00104 	addi	r3,r3,4
   16460:	41d1883a 	add	r8,r8,r7
   16464:	19c00017 	ldw	r7,0(r3)
   16468:	42d1883a 	add	r8,r8,r11
   1646c:	4a93383a 	mul	r9,r9,r10
   16470:	1a3fff8d 	sth	r8,-2(r3)
   16474:	4010d43a 	srli	r8,r8,16
   16478:	397fffcc 	andi	r5,r7,65535
   1647c:	2a4b883a 	add	r5,r5,r9
   16480:	2a0b883a 	add	r5,r5,r8
   16484:	21000104 	addi	r4,r4,4
   16488:	2816d43a 	srli	r11,r5,16
   1648c:	233fed36 	bltu	r4,r12,16444 <__multiply+0x138>
   16490:	19400015 	stw	r5,0(r3)
   16494:	6b400104 	addi	r13,r13,4
   16498:	73800104 	addi	r14,r14,4
   1649c:	69bfc736 	bltu	r13,r6,163bc <__multiply+0xb0>
   164a0:	0400090e 	bge	zero,r16,164c8 <__multiply+0x1bc>
   164a4:	78ffff17 	ldw	r3,-4(r15)
   164a8:	7bffff04 	addi	r15,r15,-4
   164ac:	18000326 	beq	r3,zero,164bc <__multiply+0x1b0>
   164b0:	00000506 	br	164c8 <__multiply+0x1bc>
   164b4:	78c00017 	ldw	r3,0(r15)
   164b8:	1800031e 	bne	r3,zero,164c8 <__multiply+0x1bc>
   164bc:	843fffc4 	addi	r16,r16,-1
   164c0:	7bffff04 	addi	r15,r15,-4
   164c4:	803ffb1e 	bne	r16,zero,164b4 <__multiply+0x1a8>
   164c8:	14000415 	stw	r16,16(r2)
   164cc:	dfc00517 	ldw	ra,20(sp)
   164d0:	dd000417 	ldw	r20,16(sp)
   164d4:	dcc00317 	ldw	r19,12(sp)
   164d8:	dc800217 	ldw	r18,8(sp)
   164dc:	dc400117 	ldw	r17,4(sp)
   164e0:	dc000017 	ldw	r16,0(sp)
   164e4:	dec00604 	addi	sp,sp,24
   164e8:	f800283a 	ret

000164ec <__pow5mult>:
   164ec:	defffb04 	addi	sp,sp,-20
   164f0:	dcc00315 	stw	r19,12(sp)
   164f4:	dc800215 	stw	r18,8(sp)
   164f8:	dc000015 	stw	r16,0(sp)
   164fc:	dfc00415 	stw	ra,16(sp)
   16500:	dc400115 	stw	r17,4(sp)
   16504:	308000cc 	andi	r2,r6,3
   16508:	3021883a 	mov	r16,r6
   1650c:	2027883a 	mov	r19,r4
   16510:	2825883a 	mov	r18,r5
   16514:	10002e1e 	bne	r2,zero,165d0 <__pow5mult+0xe4>
   16518:	8021d0ba 	srai	r16,r16,2
   1651c:	80001a26 	beq	r16,zero,16588 <__pow5mult+0x9c>
   16520:	9c401217 	ldw	r17,72(r19)
   16524:	8800061e 	bne	r17,zero,16540 <__pow5mult+0x54>
   16528:	00003406 	br	165fc <__pow5mult+0x110>
   1652c:	8021d07a 	srai	r16,r16,1
   16530:	80001526 	beq	r16,zero,16588 <__pow5mult+0x9c>
   16534:	88c00017 	ldw	r3,0(r17)
   16538:	18001b26 	beq	r3,zero,165a8 <__pow5mult+0xbc>
   1653c:	1823883a 	mov	r17,r3
   16540:	80c0004c 	andi	r3,r16,1
   16544:	183ff926 	beq	r3,zero,1652c <__pow5mult+0x40>
   16548:	900b883a 	mov	r5,r18
   1654c:	880d883a 	mov	r6,r17
   16550:	9809883a 	mov	r4,r19
   16554:	001630c0 	call	1630c <__multiply>
   16558:	90001b26 	beq	r18,zero,165c8 <__pow5mult+0xdc>
   1655c:	91000117 	ldw	r4,4(r18)
   16560:	98c01317 	ldw	r3,76(r19)
   16564:	8021d07a 	srai	r16,r16,1
   16568:	2109883a 	add	r4,r4,r4
   1656c:	2109883a 	add	r4,r4,r4
   16570:	1907883a 	add	r3,r3,r4
   16574:	19000017 	ldw	r4,0(r3)
   16578:	91000015 	stw	r4,0(r18)
   1657c:	1c800015 	stw	r18,0(r3)
   16580:	1025883a 	mov	r18,r2
   16584:	803feb1e 	bne	r16,zero,16534 <__pow5mult+0x48>
   16588:	9005883a 	mov	r2,r18
   1658c:	dfc00417 	ldw	ra,16(sp)
   16590:	dcc00317 	ldw	r19,12(sp)
   16594:	dc800217 	ldw	r18,8(sp)
   16598:	dc400117 	ldw	r17,4(sp)
   1659c:	dc000017 	ldw	r16,0(sp)
   165a0:	dec00504 	addi	sp,sp,20
   165a4:	f800283a 	ret
   165a8:	880b883a 	mov	r5,r17
   165ac:	880d883a 	mov	r6,r17
   165b0:	9809883a 	mov	r4,r19
   165b4:	001630c0 	call	1630c <__multiply>
   165b8:	88800015 	stw	r2,0(r17)
   165bc:	10000015 	stw	zero,0(r2)
   165c0:	1023883a 	mov	r17,r2
   165c4:	003fde06 	br	16540 <__pow5mult+0x54>
   165c8:	1025883a 	mov	r18,r2
   165cc:	003fd706 	br	1652c <__pow5mult+0x40>
   165d0:	10bfffc4 	addi	r2,r2,-1
   165d4:	1085883a 	add	r2,r2,r2
   165d8:	00c00174 	movhi	r3,5
   165dc:	18e09704 	addi	r3,r3,-32164
   165e0:	1085883a 	add	r2,r2,r2
   165e4:	1885883a 	add	r2,r3,r2
   165e8:	11800017 	ldw	r6,0(r2)
   165ec:	000f883a 	mov	r7,zero
   165f0:	0015fa00 	call	15fa0 <__multadd>
   165f4:	1025883a 	mov	r18,r2
   165f8:	003fc706 	br	16518 <__pow5mult+0x2c>
   165fc:	9809883a 	mov	r4,r19
   16600:	01409c44 	movi	r5,625
   16604:	00162d00 	call	162d0 <__i2b>
   16608:	98801215 	stw	r2,72(r19)
   1660c:	1023883a 	mov	r17,r2
   16610:	10000015 	stw	zero,0(r2)
   16614:	003fca06 	br	16540 <__pow5mult+0x54>

00016618 <__lshift>:
   16618:	defff904 	addi	sp,sp,-28
   1661c:	dd400515 	stw	r21,20(sp)
   16620:	dc400115 	stw	r17,4(sp)
   16624:	2d400417 	ldw	r21,16(r5)
   16628:	3023d17a 	srai	r17,r6,5
   1662c:	28800217 	ldw	r2,8(r5)
   16630:	dd000415 	stw	r20,16(sp)
   16634:	8d6b883a 	add	r21,r17,r21
   16638:	dcc00315 	stw	r19,12(sp)
   1663c:	dc800215 	stw	r18,8(sp)
   16640:	dc000015 	stw	r16,0(sp)
   16644:	dfc00615 	stw	ra,24(sp)
   16648:	ac000044 	addi	r16,r21,1
   1664c:	2825883a 	mov	r18,r5
   16650:	3029883a 	mov	r20,r6
   16654:	2027883a 	mov	r19,r4
   16658:	29400117 	ldw	r5,4(r5)
   1665c:	1400030e 	bge	r2,r16,1666c <__lshift+0x54>
   16660:	1085883a 	add	r2,r2,r2
   16664:	29400044 	addi	r5,r5,1
   16668:	143ffd16 	blt	r2,r16,16660 <__lshift+0x48>
   1666c:	9809883a 	mov	r4,r19
   16670:	0015ed00 	call	15ed0 <_Balloc>
   16674:	10c00504 	addi	r3,r2,20
   16678:	0440090e 	bge	zero,r17,166a0 <__lshift+0x88>
   1667c:	000f883a 	mov	r7,zero
   16680:	18000015 	stw	zero,0(r3)
   16684:	39c00044 	addi	r7,r7,1
   16688:	18c00104 	addi	r3,r3,4
   1668c:	3c7ffc1e 	bne	r7,r17,16680 <__lshift+0x68>
   16690:	38c00144 	addi	r3,r7,5
   16694:	18c7883a 	add	r3,r3,r3
   16698:	18c7883a 	add	r3,r3,r3
   1669c:	10c7883a 	add	r3,r2,r3
   166a0:	92000417 	ldw	r8,16(r18)
   166a4:	a18007cc 	andi	r6,r20,31
   166a8:	91c00504 	addi	r7,r18,20
   166ac:	42000144 	addi	r8,r8,5
   166b0:	4211883a 	add	r8,r8,r8
   166b4:	4211883a 	add	r8,r8,r8
   166b8:	9211883a 	add	r8,r18,r8
   166bc:	30002226 	beq	r6,zero,16748 <__lshift+0x130>
   166c0:	02800804 	movi	r10,32
   166c4:	5195c83a 	sub	r10,r10,r6
   166c8:	000b883a 	mov	r5,zero
   166cc:	3a400017 	ldw	r9,0(r7)
   166d0:	18c00104 	addi	r3,r3,4
   166d4:	39c00104 	addi	r7,r7,4
   166d8:	4992983a 	sll	r9,r9,r6
   166dc:	2a4ab03a 	or	r5,r5,r9
   166e0:	197fff15 	stw	r5,-4(r3)
   166e4:	397fff17 	ldw	r5,-4(r7)
   166e8:	2a8ad83a 	srl	r5,r5,r10
   166ec:	3a3ff736 	bltu	r7,r8,166cc <__lshift+0xb4>
   166f0:	19400015 	stw	r5,0(r3)
   166f4:	28000126 	beq	r5,zero,166fc <__lshift+0xe4>
   166f8:	ac000084 	addi	r16,r21,2
   166fc:	91000117 	ldw	r4,4(r18)
   16700:	98c01317 	ldw	r3,76(r19)
   16704:	843fffc4 	addi	r16,r16,-1
   16708:	2109883a 	add	r4,r4,r4
   1670c:	2109883a 	add	r4,r4,r4
   16710:	1907883a 	add	r3,r3,r4
   16714:	19000017 	ldw	r4,0(r3)
   16718:	14000415 	stw	r16,16(r2)
   1671c:	91000015 	stw	r4,0(r18)
   16720:	1c800015 	stw	r18,0(r3)
   16724:	dfc00617 	ldw	ra,24(sp)
   16728:	dd400517 	ldw	r21,20(sp)
   1672c:	dd000417 	ldw	r20,16(sp)
   16730:	dcc00317 	ldw	r19,12(sp)
   16734:	dc800217 	ldw	r18,8(sp)
   16738:	dc400117 	ldw	r17,4(sp)
   1673c:	dc000017 	ldw	r16,0(sp)
   16740:	dec00704 	addi	sp,sp,28
   16744:	f800283a 	ret
   16748:	39400017 	ldw	r5,0(r7)
   1674c:	18c00104 	addi	r3,r3,4
   16750:	39c00104 	addi	r7,r7,4
   16754:	197fff15 	stw	r5,-4(r3)
   16758:	3a3fe82e 	bgeu	r7,r8,166fc <__lshift+0xe4>
   1675c:	39400017 	ldw	r5,0(r7)
   16760:	18c00104 	addi	r3,r3,4
   16764:	39c00104 	addi	r7,r7,4
   16768:	197fff15 	stw	r5,-4(r3)
   1676c:	3a3ff636 	bltu	r7,r8,16748 <__lshift+0x130>
   16770:	003fe206 	br	166fc <__lshift+0xe4>

00016774 <__mcmp>:
   16774:	20800417 	ldw	r2,16(r4)
   16778:	28c00417 	ldw	r3,16(r5)
   1677c:	10c5c83a 	sub	r2,r2,r3
   16780:	10000f1e 	bne	r2,zero,167c0 <__mcmp+0x4c>
   16784:	18c00144 	addi	r3,r3,5
   16788:	18c7883a 	add	r3,r3,r3
   1678c:	18c7883a 	add	r3,r3,r3
   16790:	21c00504 	addi	r7,r4,20
   16794:	28cb883a 	add	r5,r5,r3
   16798:	20c9883a 	add	r4,r4,r3
   1679c:	213fff04 	addi	r4,r4,-4
   167a0:	297fff04 	addi	r5,r5,-4
   167a4:	21800017 	ldw	r6,0(r4)
   167a8:	28c00017 	ldw	r3,0(r5)
   167ac:	30c0021e 	bne	r6,r3,167b8 <__mcmp+0x44>
   167b0:	393ffa36 	bltu	r7,r4,1679c <__mcmp+0x28>
   167b4:	f800283a 	ret
   167b8:	30c00236 	bltu	r6,r3,167c4 <__mcmp+0x50>
   167bc:	00800044 	movi	r2,1
   167c0:	f800283a 	ret
   167c4:	00bfffc4 	movi	r2,-1
   167c8:	f800283a 	ret

000167cc <__mdiff>:
   167cc:	defffb04 	addi	sp,sp,-20
   167d0:	dc000015 	stw	r16,0(sp)
   167d4:	2821883a 	mov	r16,r5
   167d8:	dc800215 	stw	r18,8(sp)
   167dc:	300b883a 	mov	r5,r6
   167e0:	2025883a 	mov	r18,r4
   167e4:	8009883a 	mov	r4,r16
   167e8:	dc400115 	stw	r17,4(sp)
   167ec:	dfc00415 	stw	ra,16(sp)
   167f0:	dcc00315 	stw	r19,12(sp)
   167f4:	3023883a 	mov	r17,r6
   167f8:	00167740 	call	16774 <__mcmp>
   167fc:	10005026 	beq	r2,zero,16940 <__mdiff+0x174>
   16800:	10004a16 	blt	r2,zero,1692c <__mdiff+0x160>
   16804:	0027883a 	mov	r19,zero
   16808:	81400117 	ldw	r5,4(r16)
   1680c:	9009883a 	mov	r4,r18
   16810:	0015ed00 	call	15ed0 <_Balloc>
   16814:	82400417 	ldw	r9,16(r16)
   16818:	89800417 	ldw	r6,16(r17)
   1681c:	14c00315 	stw	r19,12(r2)
   16820:	4b800144 	addi	r14,r9,5
   16824:	31800144 	addi	r6,r6,5
   16828:	739d883a 	add	r14,r14,r14
   1682c:	318d883a 	add	r6,r6,r6
   16830:	739d883a 	add	r14,r14,r14
   16834:	318d883a 	add	r6,r6,r6
   16838:	81c00504 	addi	r7,r16,20
   1683c:	839d883a 	add	r14,r16,r14
   16840:	8a000504 	addi	r8,r17,20
   16844:	898d883a 	add	r6,r17,r6
   16848:	10c00504 	addi	r3,r2,20
   1684c:	0009883a 	mov	r4,zero
   16850:	3b000017 	ldw	r12,0(r7)
   16854:	42c00017 	ldw	r11,0(r8)
   16858:	42000104 	addi	r8,r8,4
   1685c:	62bfffcc 	andi	r10,r12,65535
   16860:	5b7fffcc 	andi	r13,r11,65535
   16864:	5109883a 	add	r4,r10,r4
   16868:	2355c83a 	sub	r10,r4,r13
   1686c:	5816d43a 	srli	r11,r11,16
   16870:	6008d43a 	srli	r4,r12,16
   16874:	501bd43a 	srai	r13,r10,16
   16878:	1a80000d 	sth	r10,0(r3)
   1687c:	22c9c83a 	sub	r4,r4,r11
   16880:	2349883a 	add	r4,r4,r13
   16884:	1900008d 	sth	r4,2(r3)
   16888:	39c00104 	addi	r7,r7,4
   1688c:	2009d43a 	srai	r4,r4,16
   16890:	18c00104 	addi	r3,r3,4
   16894:	41bfee36 	bltu	r8,r6,16850 <__mdiff+0x84>
   16898:	180b883a 	mov	r5,r3
   1689c:	3815883a 	mov	r10,r7
   168a0:	3b80132e 	bgeu	r7,r14,168f0 <__mdiff+0x124>
   168a4:	3a000017 	ldw	r8,0(r7)
   168a8:	18c00104 	addi	r3,r3,4
   168ac:	39c00104 	addi	r7,r7,4
   168b0:	41bfffcc 	andi	r6,r8,65535
   168b4:	310d883a 	add	r6,r6,r4
   168b8:	3009d43a 	srai	r4,r6,16
   168bc:	4010d43a 	srli	r8,r8,16
   168c0:	19bfff0d 	sth	r6,-4(r3)
   168c4:	2209883a 	add	r4,r4,r8
   168c8:	193fff8d 	sth	r4,-2(r3)
   168cc:	2009d43a 	srai	r4,r4,16
   168d0:	3bbff436 	bltu	r7,r14,168a4 <__mdiff+0xd8>
   168d4:	0286303a 	nor	r3,zero,r10
   168d8:	1b87883a 	add	r3,r3,r14
   168dc:	1806d0ba 	srli	r3,r3,2
   168e0:	18c00044 	addi	r3,r3,1
   168e4:	18c7883a 	add	r3,r3,r3
   168e8:	18c7883a 	add	r3,r3,r3
   168ec:	28c7883a 	add	r3,r5,r3
   168f0:	193fff17 	ldw	r4,-4(r3)
   168f4:	18ffff04 	addi	r3,r3,-4
   168f8:	2000041e 	bne	r4,zero,1690c <__mdiff+0x140>
   168fc:	18ffff04 	addi	r3,r3,-4
   16900:	19000017 	ldw	r4,0(r3)
   16904:	4a7fffc4 	addi	r9,r9,-1
   16908:	203ffc26 	beq	r4,zero,168fc <__mdiff+0x130>
   1690c:	12400415 	stw	r9,16(r2)
   16910:	dfc00417 	ldw	ra,16(sp)
   16914:	dcc00317 	ldw	r19,12(sp)
   16918:	dc800217 	ldw	r18,8(sp)
   1691c:	dc400117 	ldw	r17,4(sp)
   16920:	dc000017 	ldw	r16,0(sp)
   16924:	dec00504 	addi	sp,sp,20
   16928:	f800283a 	ret
   1692c:	8005883a 	mov	r2,r16
   16930:	04c00044 	movi	r19,1
   16934:	8821883a 	mov	r16,r17
   16938:	1023883a 	mov	r17,r2
   1693c:	003fb206 	br	16808 <__mdiff+0x3c>
   16940:	9009883a 	mov	r4,r18
   16944:	000b883a 	mov	r5,zero
   16948:	0015ed00 	call	15ed0 <_Balloc>
   1694c:	00c00044 	movi	r3,1
   16950:	10c00415 	stw	r3,16(r2)
   16954:	10000515 	stw	zero,20(r2)
   16958:	dfc00417 	ldw	ra,16(sp)
   1695c:	dcc00317 	ldw	r19,12(sp)
   16960:	dc800217 	ldw	r18,8(sp)
   16964:	dc400117 	ldw	r17,4(sp)
   16968:	dc000017 	ldw	r16,0(sp)
   1696c:	dec00504 	addi	sp,sp,20
   16970:	f800283a 	ret

00016974 <__ulp>:
   16974:	295ffc2c 	andhi	r5,r5,32752
   16978:	00bf3034 	movhi	r2,64704
   1697c:	2887883a 	add	r3,r5,r2
   16980:	00c0020e 	bge	zero,r3,1698c <__ulp+0x18>
   16984:	0005883a 	mov	r2,zero
   16988:	f800283a 	ret
   1698c:	00c7c83a 	sub	r3,zero,r3
   16990:	1805d53a 	srai	r2,r3,20
   16994:	00c004c4 	movi	r3,19
   16998:	18800a0e 	bge	r3,r2,169c4 <__ulp+0x50>
   1699c:	01000c84 	movi	r4,50
   169a0:	0007883a 	mov	r3,zero
   169a4:	20800516 	blt	r4,r2,169bc <__ulp+0x48>
   169a8:	01000cc4 	movi	r4,51
   169ac:	2085c83a 	sub	r2,r4,r2
   169b0:	01000044 	movi	r4,1
   169b4:	2084983a 	sll	r2,r4,r2
   169b8:	f800283a 	ret
   169bc:	00800044 	movi	r2,1
   169c0:	f800283a 	ret
   169c4:	00c00234 	movhi	r3,8
   169c8:	1887d83a 	sra	r3,r3,r2
   169cc:	0005883a 	mov	r2,zero
   169d0:	f800283a 	ret

000169d4 <__b2d>:
   169d4:	defffa04 	addi	sp,sp,-24
   169d8:	dc000015 	stw	r16,0(sp)
   169dc:	24000417 	ldw	r16,16(r4)
   169e0:	dc400115 	stw	r17,4(sp)
   169e4:	dcc00315 	stw	r19,12(sp)
   169e8:	84000144 	addi	r16,r16,5
   169ec:	8421883a 	add	r16,r16,r16
   169f0:	8421883a 	add	r16,r16,r16
   169f4:	2421883a 	add	r16,r4,r16
   169f8:	847fff17 	ldw	r17,-4(r16)
   169fc:	24c00504 	addi	r19,r4,20
   16a00:	dd000415 	stw	r20,16(sp)
   16a04:	8809883a 	mov	r4,r17
   16a08:	dc800215 	stw	r18,8(sp)
   16a0c:	2829883a 	mov	r20,r5
   16a10:	dfc00515 	stw	ra,20(sp)
   16a14:	00161b80 	call	161b8 <__hi0bits>
   16a18:	00c00804 	movi	r3,32
   16a1c:	1887c83a 	sub	r3,r3,r2
   16a20:	a0c00015 	stw	r3,0(r20)
   16a24:	00c00284 	movi	r3,10
   16a28:	84bfff04 	addi	r18,r16,-4
   16a2c:	18801216 	blt	r3,r2,16a78 <__b2d+0xa4>
   16a30:	010002c4 	movi	r4,11
   16a34:	2089c83a 	sub	r4,r4,r2
   16a38:	8906d83a 	srl	r3,r17,r4
   16a3c:	18cffc34 	orhi	r3,r3,16368
   16a40:	9c80322e 	bgeu	r19,r18,16b0c <__b2d+0x138>
   16a44:	817ffe17 	ldw	r5,-8(r16)
   16a48:	2908d83a 	srl	r4,r5,r4
   16a4c:	10800544 	addi	r2,r2,21
   16a50:	88a2983a 	sll	r17,r17,r2
   16a54:	2444b03a 	or	r2,r4,r17
   16a58:	dfc00517 	ldw	ra,20(sp)
   16a5c:	dd000417 	ldw	r20,16(sp)
   16a60:	dcc00317 	ldw	r19,12(sp)
   16a64:	dc800217 	ldw	r18,8(sp)
   16a68:	dc400117 	ldw	r17,4(sp)
   16a6c:	dc000017 	ldw	r16,0(sp)
   16a70:	dec00604 	addi	sp,sp,24
   16a74:	f800283a 	ret
   16a78:	9c801636 	bltu	r19,r18,16ad4 <__b2d+0x100>
   16a7c:	113ffd44 	addi	r4,r2,-11
   16a80:	000b883a 	mov	r5,zero
   16a84:	20001726 	beq	r4,zero,16ae4 <__b2d+0x110>
   16a88:	00c00ac4 	movi	r3,43
   16a8c:	1885c83a 	sub	r2,r3,r2
   16a90:	8906983a 	sll	r3,r17,r4
   16a94:	288cd83a 	srl	r6,r5,r2
   16a98:	18cffc34 	orhi	r3,r3,16368
   16a9c:	1986b03a 	or	r3,r3,r6
   16aa0:	9c801c2e 	bgeu	r19,r18,16b14 <__b2d+0x140>
   16aa4:	91bfff17 	ldw	r6,-4(r18)
   16aa8:	3084d83a 	srl	r2,r6,r2
   16aac:	2908983a 	sll	r4,r5,r4
   16ab0:	1104b03a 	or	r2,r2,r4
   16ab4:	dfc00517 	ldw	ra,20(sp)
   16ab8:	dd000417 	ldw	r20,16(sp)
   16abc:	dcc00317 	ldw	r19,12(sp)
   16ac0:	dc800217 	ldw	r18,8(sp)
   16ac4:	dc400117 	ldw	r17,4(sp)
   16ac8:	dc000017 	ldw	r16,0(sp)
   16acc:	dec00604 	addi	sp,sp,24
   16ad0:	f800283a 	ret
   16ad4:	113ffd44 	addi	r4,r2,-11
   16ad8:	84bffe04 	addi	r18,r16,-8
   16adc:	817ffe17 	ldw	r5,-8(r16)
   16ae0:	203fe91e 	bne	r4,zero,16a88 <__b2d+0xb4>
   16ae4:	88cffc34 	orhi	r3,r17,16368
   16ae8:	2805883a 	mov	r2,r5
   16aec:	dfc00517 	ldw	ra,20(sp)
   16af0:	dd000417 	ldw	r20,16(sp)
   16af4:	dcc00317 	ldw	r19,12(sp)
   16af8:	dc800217 	ldw	r18,8(sp)
   16afc:	dc400117 	ldw	r17,4(sp)
   16b00:	dc000017 	ldw	r16,0(sp)
   16b04:	dec00604 	addi	sp,sp,24
   16b08:	f800283a 	ret
   16b0c:	0009883a 	mov	r4,zero
   16b10:	003fce06 	br	16a4c <__b2d+0x78>
   16b14:	0005883a 	mov	r2,zero
   16b18:	003fe406 	br	16aac <__b2d+0xd8>

00016b1c <__d2b>:
   16b1c:	defff804 	addi	sp,sp,-32
   16b20:	dc400315 	stw	r17,12(sp)
   16b24:	3023883a 	mov	r17,r6
   16b28:	dc800415 	stw	r18,16(sp)
   16b2c:	8824907a 	slli	r18,r17,1
   16b30:	dcc00515 	stw	r19,20(sp)
   16b34:	2827883a 	mov	r19,r5
   16b38:	9024d57a 	srli	r18,r18,21
   16b3c:	01400044 	movi	r5,1
   16b40:	dd000615 	stw	r20,24(sp)
   16b44:	dc000215 	stw	r16,8(sp)
   16b48:	dfc00715 	stw	ra,28(sp)
   16b4c:	3829883a 	mov	r20,r7
   16b50:	0015ed00 	call	15ed0 <_Balloc>
   16b54:	1021883a 	mov	r16,r2
   16b58:	00800434 	movhi	r2,16
   16b5c:	10bfffc4 	addi	r2,r2,-1
   16b60:	88a2703a 	and	r17,r17,r2
   16b64:	90000126 	beq	r18,zero,16b6c <__d2b+0x50>
   16b68:	8c400434 	orhi	r17,r17,16
   16b6c:	dc400015 	stw	r17,0(sp)
   16b70:	98002226 	beq	r19,zero,16bfc <__d2b+0xe0>
   16b74:	d9000104 	addi	r4,sp,4
   16b78:	dcc00115 	stw	r19,4(sp)
   16b7c:	00162200 	call	16220 <__lo0bits>
   16b80:	d8c00017 	ldw	r3,0(sp)
   16b84:	10002d1e 	bne	r2,zero,16c3c <__d2b+0x120>
   16b88:	d9000117 	ldw	r4,4(sp)
   16b8c:	81000515 	stw	r4,20(r16)
   16b90:	1823003a 	cmpeq	r17,r3,zero
   16b94:	01000084 	movi	r4,2
   16b98:	2463c83a 	sub	r17,r4,r17
   16b9c:	80c00615 	stw	r3,24(r16)
   16ba0:	84400415 	stw	r17,16(r16)
   16ba4:	90001d1e 	bne	r18,zero,16c1c <__d2b+0x100>
   16ba8:	88c00104 	addi	r3,r17,4
   16bac:	18c7883a 	add	r3,r3,r3
   16bb0:	18c7883a 	add	r3,r3,r3
   16bb4:	80c7883a 	add	r3,r16,r3
   16bb8:	19000017 	ldw	r4,0(r3)
   16bbc:	10bef384 	addi	r2,r2,-1074
   16bc0:	a0800015 	stw	r2,0(r20)
   16bc4:	00161b80 	call	161b8 <__hi0bits>
   16bc8:	8822917a 	slli	r17,r17,5
   16bcc:	d8c00817 	ldw	r3,32(sp)
   16bd0:	8885c83a 	sub	r2,r17,r2
   16bd4:	18800015 	stw	r2,0(r3)
   16bd8:	8005883a 	mov	r2,r16
   16bdc:	dfc00717 	ldw	ra,28(sp)
   16be0:	dd000617 	ldw	r20,24(sp)
   16be4:	dcc00517 	ldw	r19,20(sp)
   16be8:	dc800417 	ldw	r18,16(sp)
   16bec:	dc400317 	ldw	r17,12(sp)
   16bf0:	dc000217 	ldw	r16,8(sp)
   16bf4:	dec00804 	addi	sp,sp,32
   16bf8:	f800283a 	ret
   16bfc:	d809883a 	mov	r4,sp
   16c00:	00162200 	call	16220 <__lo0bits>
   16c04:	d8c00017 	ldw	r3,0(sp)
   16c08:	04400044 	movi	r17,1
   16c0c:	84400415 	stw	r17,16(r16)
   16c10:	80c00515 	stw	r3,20(r16)
   16c14:	10800804 	addi	r2,r2,32
   16c18:	903fe326 	beq	r18,zero,16ba8 <__d2b+0x8c>
   16c1c:	00c00d44 	movi	r3,53
   16c20:	94bef344 	addi	r18,r18,-1075
   16c24:	90a5883a 	add	r18,r18,r2
   16c28:	1885c83a 	sub	r2,r3,r2
   16c2c:	d8c00817 	ldw	r3,32(sp)
   16c30:	a4800015 	stw	r18,0(r20)
   16c34:	18800015 	stw	r2,0(r3)
   16c38:	003fe706 	br	16bd8 <__d2b+0xbc>
   16c3c:	01000804 	movi	r4,32
   16c40:	2089c83a 	sub	r4,r4,r2
   16c44:	1908983a 	sll	r4,r3,r4
   16c48:	d9400117 	ldw	r5,4(sp)
   16c4c:	1886d83a 	srl	r3,r3,r2
   16c50:	2148b03a 	or	r4,r4,r5
   16c54:	81000515 	stw	r4,20(r16)
   16c58:	d8c00015 	stw	r3,0(sp)
   16c5c:	003fcc06 	br	16b90 <__d2b+0x74>

00016c60 <__ratio>:
   16c60:	defff904 	addi	sp,sp,-28
   16c64:	dc400315 	stw	r17,12(sp)
   16c68:	2823883a 	mov	r17,r5
   16c6c:	d9400104 	addi	r5,sp,4
   16c70:	dfc00615 	stw	ra,24(sp)
   16c74:	dcc00515 	stw	r19,20(sp)
   16c78:	dc800415 	stw	r18,16(sp)
   16c7c:	2027883a 	mov	r19,r4
   16c80:	dc000215 	stw	r16,8(sp)
   16c84:	00169d40 	call	169d4 <__b2d>
   16c88:	8809883a 	mov	r4,r17
   16c8c:	d80b883a 	mov	r5,sp
   16c90:	1025883a 	mov	r18,r2
   16c94:	1821883a 	mov	r16,r3
   16c98:	00169d40 	call	169d4 <__b2d>
   16c9c:	99400417 	ldw	r5,16(r19)
   16ca0:	89000417 	ldw	r4,16(r17)
   16ca4:	d9800117 	ldw	r6,4(sp)
   16ca8:	2909c83a 	sub	r4,r5,r4
   16cac:	d9400017 	ldw	r5,0(sp)
   16cb0:	2008917a 	slli	r4,r4,5
   16cb4:	314bc83a 	sub	r5,r6,r5
   16cb8:	290b883a 	add	r5,r5,r4
   16cbc:	01400e0e 	bge	zero,r5,16cf8 <__ratio+0x98>
   16cc0:	280a953a 	slli	r5,r5,20
   16cc4:	2c21883a 	add	r16,r5,r16
   16cc8:	9009883a 	mov	r4,r18
   16ccc:	800b883a 	mov	r5,r16
   16cd0:	100d883a 	mov	r6,r2
   16cd4:	180f883a 	mov	r7,r3
   16cd8:	0018de00 	call	18de0 <__divdf3>
   16cdc:	dfc00617 	ldw	ra,24(sp)
   16ce0:	dcc00517 	ldw	r19,20(sp)
   16ce4:	dc800417 	ldw	r18,16(sp)
   16ce8:	dc400317 	ldw	r17,12(sp)
   16cec:	dc000217 	ldw	r16,8(sp)
   16cf0:	dec00704 	addi	sp,sp,28
   16cf4:	f800283a 	ret
   16cf8:	280a953a 	slli	r5,r5,20
   16cfc:	1947c83a 	sub	r3,r3,r5
   16d00:	003ff106 	br	16cc8 <__ratio+0x68>

00016d04 <_mprec_log10>:
   16d04:	defffe04 	addi	sp,sp,-8
   16d08:	dc000015 	stw	r16,0(sp)
   16d0c:	dfc00115 	stw	ra,4(sp)
   16d10:	008005c4 	movi	r2,23
   16d14:	2021883a 	mov	r16,r4
   16d18:	11000d0e 	bge	r2,r4,16d50 <_mprec_log10+0x4c>
   16d1c:	0005883a 	mov	r2,zero
   16d20:	00cffc34 	movhi	r3,16368
   16d24:	843fffc4 	addi	r16,r16,-1
   16d28:	1009883a 	mov	r4,r2
   16d2c:	180b883a 	mov	r5,r3
   16d30:	000d883a 	mov	r6,zero
   16d34:	01d00934 	movhi	r7,16420
   16d38:	0018afc0 	call	18afc <__muldf3>
   16d3c:	803ff91e 	bne	r16,zero,16d24 <_mprec_log10+0x20>
   16d40:	dfc00117 	ldw	ra,4(sp)
   16d44:	dc000017 	ldw	r16,0(sp)
   16d48:	dec00204 	addi	sp,sp,8
   16d4c:	f800283a 	ret
   16d50:	202090fa 	slli	r16,r4,3
   16d54:	00800174 	movhi	r2,5
   16d58:	10a06504 	addi	r2,r2,-32364
   16d5c:	1421883a 	add	r16,r2,r16
   16d60:	80800017 	ldw	r2,0(r16)
   16d64:	80c00117 	ldw	r3,4(r16)
   16d68:	dfc00117 	ldw	ra,4(sp)
   16d6c:	dc000017 	ldw	r16,0(sp)
   16d70:	dec00204 	addi	sp,sp,8
   16d74:	f800283a 	ret

00016d78 <__copybits>:
   16d78:	297fffc4 	addi	r5,r5,-1
   16d7c:	31c00417 	ldw	r7,16(r6)
   16d80:	2811d17a 	srai	r8,r5,5
   16d84:	30800504 	addi	r2,r6,20
   16d88:	39c00144 	addi	r7,r7,5
   16d8c:	42000044 	addi	r8,r8,1
   16d90:	39cf883a 	add	r7,r7,r7
   16d94:	4211883a 	add	r8,r8,r8
   16d98:	39cf883a 	add	r7,r7,r7
   16d9c:	4211883a 	add	r8,r8,r8
   16da0:	31cf883a 	add	r7,r6,r7
   16da4:	2211883a 	add	r8,r4,r8
   16da8:	11c00d2e 	bgeu	r2,r7,16de0 <__copybits+0x68>
   16dac:	2007883a 	mov	r3,r4
   16db0:	11400017 	ldw	r5,0(r2)
   16db4:	18c00104 	addi	r3,r3,4
   16db8:	10800104 	addi	r2,r2,4
   16dbc:	197fff15 	stw	r5,-4(r3)
   16dc0:	11fffb36 	bltu	r2,r7,16db0 <__copybits+0x38>
   16dc4:	3985c83a 	sub	r2,r7,r6
   16dc8:	10bffac4 	addi	r2,r2,-21
   16dcc:	1004d0ba 	srli	r2,r2,2
   16dd0:	10800044 	addi	r2,r2,1
   16dd4:	1085883a 	add	r2,r2,r2
   16dd8:	1085883a 	add	r2,r2,r2
   16ddc:	2089883a 	add	r4,r4,r2
   16de0:	2200032e 	bgeu	r4,r8,16df0 <__copybits+0x78>
   16de4:	20000015 	stw	zero,0(r4)
   16de8:	21000104 	addi	r4,r4,4
   16dec:	223ffd36 	bltu	r4,r8,16de4 <__copybits+0x6c>
   16df0:	f800283a 	ret

00016df4 <__any_on>:
   16df4:	21800417 	ldw	r6,16(r4)
   16df8:	2805d17a 	srai	r2,r5,5
   16dfc:	20c00504 	addi	r3,r4,20
   16e00:	30800f0e 	bge	r6,r2,16e40 <__any_on+0x4c>
   16e04:	3005883a 	mov	r2,r6
   16e08:	10800144 	addi	r2,r2,5
   16e0c:	1085883a 	add	r2,r2,r2
   16e10:	1085883a 	add	r2,r2,r2
   16e14:	2089883a 	add	r4,r4,r2
   16e18:	1900152e 	bgeu	r3,r4,16e70 <__any_on+0x7c>
   16e1c:	20bfff17 	ldw	r2,-4(r4)
   16e20:	213fff04 	addi	r4,r4,-4
   16e24:	1000041e 	bne	r2,zero,16e38 <__any_on+0x44>
   16e28:	1900112e 	bgeu	r3,r4,16e70 <__any_on+0x7c>
   16e2c:	213fff04 	addi	r4,r4,-4
   16e30:	20800017 	ldw	r2,0(r4)
   16e34:	103ffc26 	beq	r2,zero,16e28 <__any_on+0x34>
   16e38:	00800044 	movi	r2,1
   16e3c:	f800283a 	ret
   16e40:	11bff10e 	bge	r2,r6,16e08 <__any_on+0x14>
   16e44:	294007cc 	andi	r5,r5,31
   16e48:	283fef26 	beq	r5,zero,16e08 <__any_on+0x14>
   16e4c:	11800144 	addi	r6,r2,5
   16e50:	318d883a 	add	r6,r6,r6
   16e54:	318d883a 	add	r6,r6,r6
   16e58:	218d883a 	add	r6,r4,r6
   16e5c:	31800017 	ldw	r6,0(r6)
   16e60:	314ed83a 	srl	r7,r6,r5
   16e64:	394a983a 	sll	r5,r7,r5
   16e68:	29bff31e 	bne	r5,r6,16e38 <__any_on+0x44>
   16e6c:	003fe606 	br	16e08 <__any_on+0x14>
   16e70:	0005883a 	mov	r2,zero
   16e74:	f800283a 	ret

00016e78 <_realloc_r>:
   16e78:	defff504 	addi	sp,sp,-44
   16e7c:	dd400615 	stw	r21,24(sp)
   16e80:	dc800315 	stw	r18,12(sp)
   16e84:	dc000115 	stw	r16,4(sp)
   16e88:	dfc00a15 	stw	ra,40(sp)
   16e8c:	df000915 	stw	fp,36(sp)
   16e90:	ddc00815 	stw	r23,32(sp)
   16e94:	dd800715 	stw	r22,28(sp)
   16e98:	dd000515 	stw	r20,20(sp)
   16e9c:	dcc00415 	stw	r19,16(sp)
   16ea0:	dc400215 	stw	r17,8(sp)
   16ea4:	2821883a 	mov	r16,r5
   16ea8:	202b883a 	mov	r21,r4
   16eac:	3025883a 	mov	r18,r6
   16eb0:	28009626 	beq	r5,zero,1710c <_realloc_r+0x294>
   16eb4:	0019f740 	call	19f74 <__malloc_lock>
   16eb8:	80bfff17 	ldw	r2,-4(r16)
   16ebc:	04ffff04 	movi	r19,-4
   16ec0:	90c002c4 	addi	r3,r18,11
   16ec4:	01000584 	movi	r4,22
   16ec8:	85bffe04 	addi	r22,r16,-8
   16ecc:	14e6703a 	and	r19,r2,r19
   16ed0:	20c0372e 	bgeu	r4,r3,16fb0 <_realloc_r+0x138>
   16ed4:	047ffe04 	movi	r17,-8
   16ed8:	1c62703a 	and	r17,r3,r17
   16edc:	8807883a 	mov	r3,r17
   16ee0:	88005a16 	blt	r17,zero,1704c <_realloc_r+0x1d4>
   16ee4:	8c805936 	bltu	r17,r18,1704c <_realloc_r+0x1d4>
   16ee8:	98c0340e 	bge	r19,r3,16fbc <_realloc_r+0x144>
   16eec:	07000174 	movhi	fp,5
   16ef0:	e721ef04 	addi	fp,fp,-30788
   16ef4:	e1400217 	ldw	r5,8(fp)
   16ef8:	b4c9883a 	add	r4,r22,r19
   16efc:	29009026 	beq	r5,r4,17140 <_realloc_r+0x2c8>
   16f00:	21800117 	ldw	r6,4(r4)
   16f04:	01ffff84 	movi	r7,-2
   16f08:	31ce703a 	and	r7,r6,r7
   16f0c:	21cf883a 	add	r7,r4,r7
   16f10:	39c00117 	ldw	r7,4(r7)
   16f14:	39c0004c 	andi	r7,r7,1
   16f18:	38004326 	beq	r7,zero,17028 <_realloc_r+0x1b0>
   16f1c:	000d883a 	mov	r6,zero
   16f20:	0009883a 	mov	r4,zero
   16f24:	1080004c 	andi	r2,r2,1
   16f28:	10005a1e 	bne	r2,zero,17094 <_realloc_r+0x21c>
   16f2c:	85fffe17 	ldw	r23,-8(r16)
   16f30:	00bfff04 	movi	r2,-4
   16f34:	b5efc83a 	sub	r23,r22,r23
   16f38:	b9c00117 	ldw	r7,4(r23)
   16f3c:	388e703a 	and	r7,r7,r2
   16f40:	3ccf883a 	add	r7,r7,r19
   16f44:	20005226 	beq	r4,zero,17090 <_realloc_r+0x218>
   16f48:	31e9883a 	add	r20,r6,r7
   16f4c:	2140c726 	beq	r4,r5,1726c <_realloc_r+0x3f4>
   16f50:	a0c04f16 	blt	r20,r3,17090 <_realloc_r+0x218>
   16f54:	20800317 	ldw	r2,12(r4)
   16f58:	20c00217 	ldw	r3,8(r4)
   16f5c:	99bfff04 	addi	r6,r19,-4
   16f60:	01000904 	movi	r4,36
   16f64:	18800315 	stw	r2,12(r3)
   16f68:	10c00215 	stw	r3,8(r2)
   16f6c:	b8c00217 	ldw	r3,8(r23)
   16f70:	b8800317 	ldw	r2,12(r23)
   16f74:	bc800204 	addi	r18,r23,8
   16f78:	18800315 	stw	r2,12(r3)
   16f7c:	10c00215 	stw	r3,8(r2)
   16f80:	2180ed36 	bltu	r4,r6,17338 <_realloc_r+0x4c0>
   16f84:	008004c4 	movi	r2,19
   16f88:	11809b2e 	bgeu	r2,r6,171f8 <_realloc_r+0x380>
   16f8c:	80800017 	ldw	r2,0(r16)
   16f90:	b8800215 	stw	r2,8(r23)
   16f94:	80800117 	ldw	r2,4(r16)
   16f98:	b8800315 	stw	r2,12(r23)
   16f9c:	008006c4 	movi	r2,27
   16fa0:	1180f936 	bltu	r2,r6,17388 <_realloc_r+0x510>
   16fa4:	b8800404 	addi	r2,r23,16
   16fa8:	80c00204 	addi	r3,r16,8
   16fac:	00009406 	br	17200 <_realloc_r+0x388>
   16fb0:	00c00404 	movi	r3,16
   16fb4:	1823883a 	mov	r17,r3
   16fb8:	003fca06 	br	16ee4 <_realloc_r+0x6c>
   16fbc:	9829883a 	mov	r20,r19
   16fc0:	a447c83a 	sub	r3,r20,r17
   16fc4:	010003c4 	movi	r4,15
   16fc8:	1080004c 	andi	r2,r2,1
   16fcc:	20c02336 	bltu	r4,r3,1705c <_realloc_r+0x1e4>
   16fd0:	1504b03a 	or	r2,r2,r20
   16fd4:	b0800115 	stw	r2,4(r22)
   16fd8:	b52d883a 	add	r22,r22,r20
   16fdc:	b0800117 	ldw	r2,4(r22)
   16fe0:	10800054 	ori	r2,r2,1
   16fe4:	b0800115 	stw	r2,4(r22)
   16fe8:	a809883a 	mov	r4,r21
   16fec:	0019f940 	call	19f94 <__malloc_unlock>
   16ff0:	8025883a 	mov	r18,r16
   16ff4:	9005883a 	mov	r2,r18
   16ff8:	dfc00a17 	ldw	ra,40(sp)
   16ffc:	df000917 	ldw	fp,36(sp)
   17000:	ddc00817 	ldw	r23,32(sp)
   17004:	dd800717 	ldw	r22,28(sp)
   17008:	dd400617 	ldw	r21,24(sp)
   1700c:	dd000517 	ldw	r20,20(sp)
   17010:	dcc00417 	ldw	r19,16(sp)
   17014:	dc800317 	ldw	r18,12(sp)
   17018:	dc400217 	ldw	r17,8(sp)
   1701c:	dc000117 	ldw	r16,4(sp)
   17020:	dec00b04 	addi	sp,sp,44
   17024:	f800283a 	ret
   17028:	01ffff04 	movi	r7,-4
   1702c:	31cc703a 	and	r6,r6,r7
   17030:	34e9883a 	add	r20,r6,r19
   17034:	a0ffbb16 	blt	r20,r3,16f24 <_realloc_r+0xac>
   17038:	20c00317 	ldw	r3,12(r4)
   1703c:	21000217 	ldw	r4,8(r4)
   17040:	20c00315 	stw	r3,12(r4)
   17044:	19000215 	stw	r4,8(r3)
   17048:	003fdd06 	br	16fc0 <_realloc_r+0x148>
   1704c:	00800304 	movi	r2,12
   17050:	a8800015 	stw	r2,0(r21)
   17054:	0025883a 	mov	r18,zero
   17058:	003fe606 	br	16ff4 <_realloc_r+0x17c>
   1705c:	1444b03a 	or	r2,r2,r17
   17060:	b0800115 	stw	r2,4(r22)
   17064:	b44b883a 	add	r5,r22,r17
   17068:	18800054 	ori	r2,r3,1
   1706c:	28800115 	stw	r2,4(r5)
   17070:	28c7883a 	add	r3,r5,r3
   17074:	18800117 	ldw	r2,4(r3)
   17078:	a809883a 	mov	r4,r21
   1707c:	29400204 	addi	r5,r5,8
   17080:	10800054 	ori	r2,r2,1
   17084:	18800115 	stw	r2,4(r3)
   17088:	00147c00 	call	147c0 <_free_r>
   1708c:	003fd606 	br	16fe8 <_realloc_r+0x170>
   17090:	38c0330e 	bge	r7,r3,17160 <_realloc_r+0x2e8>
   17094:	900b883a 	mov	r5,r18
   17098:	a809883a 	mov	r4,r21
   1709c:	00153580 	call	15358 <_malloc_r>
   170a0:	1025883a 	mov	r18,r2
   170a4:	10001626 	beq	r2,zero,17100 <_realloc_r+0x288>
   170a8:	80bfff17 	ldw	r2,-4(r16)
   170ac:	00ffff84 	movi	r3,-2
   170b0:	913ffe04 	addi	r4,r18,-8
   170b4:	10c6703a 	and	r3,r2,r3
   170b8:	b0c7883a 	add	r3,r22,r3
   170bc:	20c09926 	beq	r4,r3,17324 <_realloc_r+0x4ac>
   170c0:	99bfff04 	addi	r6,r19,-4
   170c4:	00800904 	movi	r2,36
   170c8:	11806436 	bltu	r2,r6,1725c <_realloc_r+0x3e4>
   170cc:	00c004c4 	movi	r3,19
   170d0:	19804036 	bltu	r3,r6,171d4 <_realloc_r+0x35c>
   170d4:	9005883a 	mov	r2,r18
   170d8:	8007883a 	mov	r3,r16
   170dc:	19000017 	ldw	r4,0(r3)
   170e0:	11000015 	stw	r4,0(r2)
   170e4:	19000117 	ldw	r4,4(r3)
   170e8:	11000115 	stw	r4,4(r2)
   170ec:	18c00217 	ldw	r3,8(r3)
   170f0:	10c00215 	stw	r3,8(r2)
   170f4:	a809883a 	mov	r4,r21
   170f8:	800b883a 	mov	r5,r16
   170fc:	00147c00 	call	147c0 <_free_r>
   17100:	a809883a 	mov	r4,r21
   17104:	0019f940 	call	19f94 <__malloc_unlock>
   17108:	003fba06 	br	16ff4 <_realloc_r+0x17c>
   1710c:	300b883a 	mov	r5,r6
   17110:	dfc00a17 	ldw	ra,40(sp)
   17114:	df000917 	ldw	fp,36(sp)
   17118:	ddc00817 	ldw	r23,32(sp)
   1711c:	dd800717 	ldw	r22,28(sp)
   17120:	dd400617 	ldw	r21,24(sp)
   17124:	dd000517 	ldw	r20,20(sp)
   17128:	dcc00417 	ldw	r19,16(sp)
   1712c:	dc800317 	ldw	r18,12(sp)
   17130:	dc400217 	ldw	r17,8(sp)
   17134:	dc000117 	ldw	r16,4(sp)
   17138:	dec00b04 	addi	sp,sp,44
   1713c:	00153581 	jmpi	15358 <_malloc_r>
   17140:	29800117 	ldw	r6,4(r5)
   17144:	013fff04 	movi	r4,-4
   17148:	89c00404 	addi	r7,r17,16
   1714c:	310c703a 	and	r6,r6,r4
   17150:	34c9883a 	add	r4,r6,r19
   17154:	21c0340e 	bge	r4,r7,17228 <_realloc_r+0x3b0>
   17158:	2809883a 	mov	r4,r5
   1715c:	003f7106 	br	16f24 <_realloc_r+0xac>
   17160:	b8800317 	ldw	r2,12(r23)
   17164:	b8c00217 	ldw	r3,8(r23)
   17168:	99bfff04 	addi	r6,r19,-4
   1716c:	01000904 	movi	r4,36
   17170:	18800315 	stw	r2,12(r3)
   17174:	10c00215 	stw	r3,8(r2)
   17178:	bc800204 	addi	r18,r23,8
   1717c:	21807836 	bltu	r4,r6,17360 <_realloc_r+0x4e8>
   17180:	008004c4 	movi	r2,19
   17184:	1180732e 	bgeu	r2,r6,17354 <_realloc_r+0x4dc>
   17188:	80800017 	ldw	r2,0(r16)
   1718c:	b8800215 	stw	r2,8(r23)
   17190:	80800117 	ldw	r2,4(r16)
   17194:	b8800315 	stw	r2,12(r23)
   17198:	008006c4 	movi	r2,27
   1719c:	11808936 	bltu	r2,r6,173c4 <_realloc_r+0x54c>
   171a0:	b8800404 	addi	r2,r23,16
   171a4:	80c00204 	addi	r3,r16,8
   171a8:	19000017 	ldw	r4,0(r3)
   171ac:	9021883a 	mov	r16,r18
   171b0:	3829883a 	mov	r20,r7
   171b4:	11000015 	stw	r4,0(r2)
   171b8:	19000117 	ldw	r4,4(r3)
   171bc:	b82d883a 	mov	r22,r23
   171c0:	11000115 	stw	r4,4(r2)
   171c4:	18c00217 	ldw	r3,8(r3)
   171c8:	10c00215 	stw	r3,8(r2)
   171cc:	b8800117 	ldw	r2,4(r23)
   171d0:	003f7b06 	br	16fc0 <_realloc_r+0x148>
   171d4:	80c00017 	ldw	r3,0(r16)
   171d8:	90c00015 	stw	r3,0(r18)
   171dc:	80c00117 	ldw	r3,4(r16)
   171e0:	90c00115 	stw	r3,4(r18)
   171e4:	00c006c4 	movi	r3,27
   171e8:	19804636 	bltu	r3,r6,17304 <_realloc_r+0x48c>
   171ec:	90800204 	addi	r2,r18,8
   171f0:	80c00204 	addi	r3,r16,8
   171f4:	003fb906 	br	170dc <_realloc_r+0x264>
   171f8:	9005883a 	mov	r2,r18
   171fc:	8007883a 	mov	r3,r16
   17200:	19000017 	ldw	r4,0(r3)
   17204:	9021883a 	mov	r16,r18
   17208:	b82d883a 	mov	r22,r23
   1720c:	11000015 	stw	r4,0(r2)
   17210:	19000117 	ldw	r4,4(r3)
   17214:	11000115 	stw	r4,4(r2)
   17218:	18c00217 	ldw	r3,8(r3)
   1721c:	10c00215 	stw	r3,8(r2)
   17220:	b8800117 	ldw	r2,4(r23)
   17224:	003f6606 	br	16fc0 <_realloc_r+0x148>
   17228:	2445c83a 	sub	r2,r4,r17
   1722c:	b46d883a 	add	r22,r22,r17
   17230:	10800054 	ori	r2,r2,1
   17234:	b0800115 	stw	r2,4(r22)
   17238:	80bfff17 	ldw	r2,-4(r16)
   1723c:	a809883a 	mov	r4,r21
   17240:	e5800215 	stw	r22,8(fp)
   17244:	1080004c 	andi	r2,r2,1
   17248:	88a2b03a 	or	r17,r17,r2
   1724c:	847fff15 	stw	r17,-4(r16)
   17250:	0019f940 	call	19f94 <__malloc_unlock>
   17254:	8025883a 	mov	r18,r16
   17258:	003f6606 	br	16ff4 <_realloc_r+0x17c>
   1725c:	9009883a 	mov	r4,r18
   17260:	800b883a 	mov	r5,r16
   17264:	0015ccc0 	call	15ccc <memmove>
   17268:	003fa206 	br	170f4 <_realloc_r+0x27c>
   1726c:	88800404 	addi	r2,r17,16
   17270:	a0bf8716 	blt	r20,r2,17090 <_realloc_r+0x218>
   17274:	b8800317 	ldw	r2,12(r23)
   17278:	b8c00217 	ldw	r3,8(r23)
   1727c:	99bfff04 	addi	r6,r19,-4
   17280:	01000904 	movi	r4,36
   17284:	18800315 	stw	r2,12(r3)
   17288:	10c00215 	stw	r3,8(r2)
   1728c:	bc800204 	addi	r18,r23,8
   17290:	21806536 	bltu	r4,r6,17428 <_realloc_r+0x5b0>
   17294:	008004c4 	movi	r2,19
   17298:	1180592e 	bgeu	r2,r6,17400 <_realloc_r+0x588>
   1729c:	80800017 	ldw	r2,0(r16)
   172a0:	b8800215 	stw	r2,8(r23)
   172a4:	80800117 	ldw	r2,4(r16)
   172a8:	b8800315 	stw	r2,12(r23)
   172ac:	008006c4 	movi	r2,27
   172b0:	11806136 	bltu	r2,r6,17438 <_realloc_r+0x5c0>
   172b4:	b8800404 	addi	r2,r23,16
   172b8:	80c00204 	addi	r3,r16,8
   172bc:	19000017 	ldw	r4,0(r3)
   172c0:	11000015 	stw	r4,0(r2)
   172c4:	19000117 	ldw	r4,4(r3)
   172c8:	11000115 	stw	r4,4(r2)
   172cc:	18c00217 	ldw	r3,8(r3)
   172d0:	10c00215 	stw	r3,8(r2)
   172d4:	a447c83a 	sub	r3,r20,r17
   172d8:	bc45883a 	add	r2,r23,r17
   172dc:	18c00054 	ori	r3,r3,1
   172e0:	10c00115 	stw	r3,4(r2)
   172e4:	b8c00117 	ldw	r3,4(r23)
   172e8:	e0800215 	stw	r2,8(fp)
   172ec:	a809883a 	mov	r4,r21
   172f0:	1880004c 	andi	r2,r3,1
   172f4:	88a2b03a 	or	r17,r17,r2
   172f8:	bc400115 	stw	r17,4(r23)
   172fc:	0019f940 	call	19f94 <__malloc_unlock>
   17300:	003f3c06 	br	16ff4 <_realloc_r+0x17c>
   17304:	80c00217 	ldw	r3,8(r16)
   17308:	90c00215 	stw	r3,8(r18)
   1730c:	80c00317 	ldw	r3,12(r16)
   17310:	90c00315 	stw	r3,12(r18)
   17314:	30802426 	beq	r6,r2,173a8 <_realloc_r+0x530>
   17318:	90800404 	addi	r2,r18,16
   1731c:	80c00404 	addi	r3,r16,16
   17320:	003f6e06 	br	170dc <_realloc_r+0x264>
   17324:	953fff17 	ldw	r20,-4(r18)
   17328:	00ffff04 	movi	r3,-4
   1732c:	a0e8703a 	and	r20,r20,r3
   17330:	a4e9883a 	add	r20,r20,r19
   17334:	003f2206 	br	16fc0 <_realloc_r+0x148>
   17338:	800b883a 	mov	r5,r16
   1733c:	9009883a 	mov	r4,r18
   17340:	0015ccc0 	call	15ccc <memmove>
   17344:	9021883a 	mov	r16,r18
   17348:	b8800117 	ldw	r2,4(r23)
   1734c:	b82d883a 	mov	r22,r23
   17350:	003f1b06 	br	16fc0 <_realloc_r+0x148>
   17354:	9005883a 	mov	r2,r18
   17358:	8007883a 	mov	r3,r16
   1735c:	003f9206 	br	171a8 <_realloc_r+0x330>
   17360:	800b883a 	mov	r5,r16
   17364:	9009883a 	mov	r4,r18
   17368:	d9c00015 	stw	r7,0(sp)
   1736c:	0015ccc0 	call	15ccc <memmove>
   17370:	d9c00017 	ldw	r7,0(sp)
   17374:	9021883a 	mov	r16,r18
   17378:	b8800117 	ldw	r2,4(r23)
   1737c:	3829883a 	mov	r20,r7
   17380:	b82d883a 	mov	r22,r23
   17384:	003f0e06 	br	16fc0 <_realloc_r+0x148>
   17388:	80800217 	ldw	r2,8(r16)
   1738c:	b8800415 	stw	r2,16(r23)
   17390:	80800317 	ldw	r2,12(r16)
   17394:	b8800515 	stw	r2,20(r23)
   17398:	31001226 	beq	r6,r4,173e4 <_realloc_r+0x56c>
   1739c:	b8800604 	addi	r2,r23,24
   173a0:	80c00404 	addi	r3,r16,16
   173a4:	003f9606 	br	17200 <_realloc_r+0x388>
   173a8:	81000417 	ldw	r4,16(r16)
   173ac:	90800604 	addi	r2,r18,24
   173b0:	80c00604 	addi	r3,r16,24
   173b4:	91000415 	stw	r4,16(r18)
   173b8:	81000517 	ldw	r4,20(r16)
   173bc:	91000515 	stw	r4,20(r18)
   173c0:	003f4606 	br	170dc <_realloc_r+0x264>
   173c4:	80800217 	ldw	r2,8(r16)
   173c8:	b8800415 	stw	r2,16(r23)
   173cc:	80800317 	ldw	r2,12(r16)
   173d0:	b8800515 	stw	r2,20(r23)
   173d4:	31000d26 	beq	r6,r4,1740c <_realloc_r+0x594>
   173d8:	b8800604 	addi	r2,r23,24
   173dc:	80c00404 	addi	r3,r16,16
   173e0:	003f7106 	br	171a8 <_realloc_r+0x330>
   173e4:	81000417 	ldw	r4,16(r16)
   173e8:	b8800804 	addi	r2,r23,32
   173ec:	80c00604 	addi	r3,r16,24
   173f0:	b9000615 	stw	r4,24(r23)
   173f4:	81000517 	ldw	r4,20(r16)
   173f8:	b9000715 	stw	r4,28(r23)
   173fc:	003f8006 	br	17200 <_realloc_r+0x388>
   17400:	9005883a 	mov	r2,r18
   17404:	8007883a 	mov	r3,r16
   17408:	003fac06 	br	172bc <_realloc_r+0x444>
   1740c:	81000417 	ldw	r4,16(r16)
   17410:	b8800804 	addi	r2,r23,32
   17414:	80c00604 	addi	r3,r16,24
   17418:	b9000615 	stw	r4,24(r23)
   1741c:	81000517 	ldw	r4,20(r16)
   17420:	b9000715 	stw	r4,28(r23)
   17424:	003f6006 	br	171a8 <_realloc_r+0x330>
   17428:	9009883a 	mov	r4,r18
   1742c:	800b883a 	mov	r5,r16
   17430:	0015ccc0 	call	15ccc <memmove>
   17434:	003fa706 	br	172d4 <_realloc_r+0x45c>
   17438:	80800217 	ldw	r2,8(r16)
   1743c:	b8800415 	stw	r2,16(r23)
   17440:	80800317 	ldw	r2,12(r16)
   17444:	b8800515 	stw	r2,20(r23)
   17448:	31000326 	beq	r6,r4,17458 <_realloc_r+0x5e0>
   1744c:	b8800604 	addi	r2,r23,24
   17450:	80c00404 	addi	r3,r16,16
   17454:	003f9906 	br	172bc <_realloc_r+0x444>
   17458:	81000417 	ldw	r4,16(r16)
   1745c:	b8800804 	addi	r2,r23,32
   17460:	80c00604 	addi	r3,r16,24
   17464:	b9000615 	stw	r4,24(r23)
   17468:	81000517 	ldw	r4,20(r16)
   1746c:	b9000715 	stw	r4,28(r23)
   17470:	003f9206 	br	172bc <_realloc_r+0x444>

00017474 <__isinfd>:
   17474:	0105c83a 	sub	r2,zero,r4
   17478:	1108b03a 	or	r4,r2,r4
   1747c:	2004d7fa 	srli	r2,r4,31
   17480:	00e00034 	movhi	r3,32768
   17484:	18ffffc4 	addi	r3,r3,-1
   17488:	28ca703a 	and	r5,r5,r3
   1748c:	1144b03a 	or	r2,r2,r5
   17490:	00dffc34 	movhi	r3,32752
   17494:	1885c83a 	sub	r2,r3,r2
   17498:	0087c83a 	sub	r3,zero,r2
   1749c:	1884b03a 	or	r2,r3,r2
   174a0:	1005d7fa 	srai	r2,r2,31
   174a4:	10800044 	addi	r2,r2,1
   174a8:	f800283a 	ret

000174ac <__isnand>:
   174ac:	0105c83a 	sub	r2,zero,r4
   174b0:	1108b03a 	or	r4,r2,r4
   174b4:	2004d7fa 	srli	r2,r4,31
   174b8:	00e00034 	movhi	r3,32768
   174bc:	18ffffc4 	addi	r3,r3,-1
   174c0:	28ca703a 	and	r5,r5,r3
   174c4:	1144b03a 	or	r2,r2,r5
   174c8:	00dffc34 	movhi	r3,32752
   174cc:	1885c83a 	sub	r2,r3,r2
   174d0:	1004d7fa 	srli	r2,r2,31
   174d4:	f800283a 	ret

000174d8 <_sbrk_r>:
   174d8:	defffd04 	addi	sp,sp,-12
   174dc:	dc400115 	stw	r17,4(sp)
   174e0:	dc000015 	stw	r16,0(sp)
   174e4:	2023883a 	mov	r17,r4
   174e8:	04000174 	movhi	r16,5
   174ec:	84278d04 	addi	r16,r16,-25036
   174f0:	2809883a 	mov	r4,r5
   174f4:	dfc00215 	stw	ra,8(sp)
   174f8:	80000015 	stw	zero,0(r16)
   174fc:	001a1540 	call	1a154 <sbrk>
   17500:	00ffffc4 	movi	r3,-1
   17504:	10c00526 	beq	r2,r3,1751c <_sbrk_r+0x44>
   17508:	dfc00217 	ldw	ra,8(sp)
   1750c:	dc400117 	ldw	r17,4(sp)
   17510:	dc000017 	ldw	r16,0(sp)
   17514:	dec00304 	addi	sp,sp,12
   17518:	f800283a 	ret
   1751c:	80c00017 	ldw	r3,0(r16)
   17520:	183ff926 	beq	r3,zero,17508 <_sbrk_r+0x30>
   17524:	88c00015 	stw	r3,0(r17)
   17528:	dfc00217 	ldw	ra,8(sp)
   1752c:	dc400117 	ldw	r17,4(sp)
   17530:	dc000017 	ldw	r16,0(sp)
   17534:	dec00304 	addi	sp,sp,12
   17538:	f800283a 	ret

0001753c <__sread>:
   1753c:	defffe04 	addi	sp,sp,-8
   17540:	dc000015 	stw	r16,0(sp)
   17544:	2821883a 	mov	r16,r5
   17548:	2940038f 	ldh	r5,14(r5)
   1754c:	dfc00115 	stw	ra,4(sp)
   17550:	0017b340 	call	17b34 <_read_r>
   17554:	10000716 	blt	r2,zero,17574 <__sread+0x38>
   17558:	80c01417 	ldw	r3,80(r16)
   1755c:	1887883a 	add	r3,r3,r2
   17560:	80c01415 	stw	r3,80(r16)
   17564:	dfc00117 	ldw	ra,4(sp)
   17568:	dc000017 	ldw	r16,0(sp)
   1756c:	dec00204 	addi	sp,sp,8
   17570:	f800283a 	ret
   17574:	80c0030b 	ldhu	r3,12(r16)
   17578:	18fbffcc 	andi	r3,r3,61439
   1757c:	80c0030d 	sth	r3,12(r16)
   17580:	dfc00117 	ldw	ra,4(sp)
   17584:	dc000017 	ldw	r16,0(sp)
   17588:	dec00204 	addi	sp,sp,8
   1758c:	f800283a 	ret

00017590 <__swrite>:
   17590:	2880030b 	ldhu	r2,12(r5)
   17594:	defffb04 	addi	sp,sp,-20
   17598:	dcc00315 	stw	r19,12(sp)
   1759c:	10c0400c 	andi	r3,r2,256
   175a0:	18ffffcc 	andi	r3,r3,65535
   175a4:	18e0001c 	xori	r3,r3,32768
   175a8:	dc800215 	stw	r18,8(sp)
   175ac:	dc400115 	stw	r17,4(sp)
   175b0:	dc000015 	stw	r16,0(sp)
   175b4:	dfc00415 	stw	ra,16(sp)
   175b8:	18e00004 	addi	r3,r3,-32768
   175bc:	2821883a 	mov	r16,r5
   175c0:	2027883a 	mov	r19,r4
   175c4:	3025883a 	mov	r18,r6
   175c8:	3823883a 	mov	r17,r7
   175cc:	18000526 	beq	r3,zero,175e4 <__swrite+0x54>
   175d0:	2940038f 	ldh	r5,14(r5)
   175d4:	000d883a 	mov	r6,zero
   175d8:	01c00084 	movi	r7,2
   175dc:	0017ac80 	call	17ac8 <_lseek_r>
   175e0:	8080030b 	ldhu	r2,12(r16)
   175e4:	8140038f 	ldh	r5,14(r16)
   175e8:	10bbffcc 	andi	r2,r2,61439
   175ec:	9809883a 	mov	r4,r19
   175f0:	900d883a 	mov	r6,r18
   175f4:	880f883a 	mov	r7,r17
   175f8:	8080030d 	sth	r2,12(r16)
   175fc:	dfc00417 	ldw	ra,16(sp)
   17600:	dcc00317 	ldw	r19,12(sp)
   17604:	dc800217 	ldw	r18,8(sp)
   17608:	dc400117 	ldw	r17,4(sp)
   1760c:	dc000017 	ldw	r16,0(sp)
   17610:	dec00504 	addi	sp,sp,20
   17614:	00177201 	jmpi	17720 <_write_r>

00017618 <__sseek>:
   17618:	defffe04 	addi	sp,sp,-8
   1761c:	dc000015 	stw	r16,0(sp)
   17620:	2821883a 	mov	r16,r5
   17624:	2940038f 	ldh	r5,14(r5)
   17628:	dfc00115 	stw	ra,4(sp)
   1762c:	0017ac80 	call	17ac8 <_lseek_r>
   17630:	00ffffc4 	movi	r3,-1
   17634:	10c00826 	beq	r2,r3,17658 <__sseek+0x40>
   17638:	80c0030b 	ldhu	r3,12(r16)
   1763c:	80801415 	stw	r2,80(r16)
   17640:	18c40014 	ori	r3,r3,4096
   17644:	80c0030d 	sth	r3,12(r16)
   17648:	dfc00117 	ldw	ra,4(sp)
   1764c:	dc000017 	ldw	r16,0(sp)
   17650:	dec00204 	addi	sp,sp,8
   17654:	f800283a 	ret
   17658:	80c0030b 	ldhu	r3,12(r16)
   1765c:	18fbffcc 	andi	r3,r3,61439
   17660:	80c0030d 	sth	r3,12(r16)
   17664:	dfc00117 	ldw	ra,4(sp)
   17668:	dc000017 	ldw	r16,0(sp)
   1766c:	dec00204 	addi	sp,sp,8
   17670:	f800283a 	ret

00017674 <__sclose>:
   17674:	2940038f 	ldh	r5,14(r5)
   17678:	00178481 	jmpi	17848 <_close_r>

0001767c <strcmp>:
   1767c:	2904b03a 	or	r2,r5,r4
   17680:	108000cc 	andi	r2,r2,3
   17684:	1000171e 	bne	r2,zero,176e4 <strcmp+0x68>
   17688:	20800017 	ldw	r2,0(r4)
   1768c:	28c00017 	ldw	r3,0(r5)
   17690:	10c0141e 	bne	r2,r3,176e4 <strcmp+0x68>
   17694:	027fbff4 	movhi	r9,65279
   17698:	4a7fbfc4 	addi	r9,r9,-257
   1769c:	1247883a 	add	r3,r2,r9
   176a0:	0084303a 	nor	r2,zero,r2
   176a4:	1884703a 	and	r2,r3,r2
   176a8:	02202074 	movhi	r8,32897
   176ac:	42202004 	addi	r8,r8,-32640
   176b0:	1204703a 	and	r2,r2,r8
   176b4:	10000226 	beq	r2,zero,176c0 <strcmp+0x44>
   176b8:	00001706 	br	17718 <strcmp+0x9c>
   176bc:	3000161e 	bne	r6,zero,17718 <strcmp+0x9c>
   176c0:	21000104 	addi	r4,r4,4
   176c4:	20800017 	ldw	r2,0(r4)
   176c8:	29400104 	addi	r5,r5,4
   176cc:	28c00017 	ldw	r3,0(r5)
   176d0:	124f883a 	add	r7,r2,r9
   176d4:	008c303a 	nor	r6,zero,r2
   176d8:	398c703a 	and	r6,r7,r6
   176dc:	320c703a 	and	r6,r6,r8
   176e0:	10fff626 	beq	r2,r3,176bc <strcmp+0x40>
   176e4:	20800007 	ldb	r2,0(r4)
   176e8:	1000051e 	bne	r2,zero,17700 <strcmp+0x84>
   176ec:	00000606 	br	17708 <strcmp+0x8c>
   176f0:	21000044 	addi	r4,r4,1
   176f4:	20800007 	ldb	r2,0(r4)
   176f8:	29400044 	addi	r5,r5,1
   176fc:	10000226 	beq	r2,zero,17708 <strcmp+0x8c>
   17700:	28c00007 	ldb	r3,0(r5)
   17704:	10fffa26 	beq	r2,r3,176f0 <strcmp+0x74>
   17708:	20c00003 	ldbu	r3,0(r4)
   1770c:	28800003 	ldbu	r2,0(r5)
   17710:	1885c83a 	sub	r2,r3,r2
   17714:	f800283a 	ret
   17718:	0005883a 	mov	r2,zero
   1771c:	f800283a 	ret

00017720 <_write_r>:
   17720:	defffd04 	addi	sp,sp,-12
   17724:	dc400115 	stw	r17,4(sp)
   17728:	dc000015 	stw	r16,0(sp)
   1772c:	2023883a 	mov	r17,r4
   17730:	04000174 	movhi	r16,5
   17734:	84278d04 	addi	r16,r16,-25036
   17738:	2809883a 	mov	r4,r5
   1773c:	300b883a 	mov	r5,r6
   17740:	380d883a 	mov	r6,r7
   17744:	dfc00215 	stw	ra,8(sp)
   17748:	80000015 	stw	zero,0(r16)
   1774c:	001a2540 	call	1a254 <write>
   17750:	00ffffc4 	movi	r3,-1
   17754:	10c00526 	beq	r2,r3,1776c <_write_r+0x4c>
   17758:	dfc00217 	ldw	ra,8(sp)
   1775c:	dc400117 	ldw	r17,4(sp)
   17760:	dc000017 	ldw	r16,0(sp)
   17764:	dec00304 	addi	sp,sp,12
   17768:	f800283a 	ret
   1776c:	80c00017 	ldw	r3,0(r16)
   17770:	183ff926 	beq	r3,zero,17758 <_write_r+0x38>
   17774:	88c00015 	stw	r3,0(r17)
   17778:	dfc00217 	ldw	ra,8(sp)
   1777c:	dc400117 	ldw	r17,4(sp)
   17780:	dc000017 	ldw	r16,0(sp)
   17784:	dec00304 	addi	sp,sp,12
   17788:	f800283a 	ret

0001778c <_calloc_r>:
   1778c:	314b383a 	mul	r5,r6,r5
   17790:	defffe04 	addi	sp,sp,-8
   17794:	dc000015 	stw	r16,0(sp)
   17798:	dfc00115 	stw	ra,4(sp)
   1779c:	00153580 	call	15358 <_malloc_r>
   177a0:	1021883a 	mov	r16,r2
   177a4:	10000c26 	beq	r2,zero,177d8 <_calloc_r+0x4c>
   177a8:	11bfff17 	ldw	r6,-4(r2)
   177ac:	00ffff04 	movi	r3,-4
   177b0:	00800904 	movi	r2,36
   177b4:	30cc703a 	and	r6,r6,r3
   177b8:	30cd883a 	add	r6,r6,r3
   177bc:	11801436 	bltu	r2,r6,17810 <_calloc_r+0x84>
   177c0:	00c004c4 	movi	r3,19
   177c4:	19800936 	bltu	r3,r6,177ec <_calloc_r+0x60>
   177c8:	8005883a 	mov	r2,r16
   177cc:	10000015 	stw	zero,0(r2)
   177d0:	10000115 	stw	zero,4(r2)
   177d4:	10000215 	stw	zero,8(r2)
   177d8:	8005883a 	mov	r2,r16
   177dc:	dfc00117 	ldw	ra,4(sp)
   177e0:	dc000017 	ldw	r16,0(sp)
   177e4:	dec00204 	addi	sp,sp,8
   177e8:	f800283a 	ret
   177ec:	80000015 	stw	zero,0(r16)
   177f0:	80000115 	stw	zero,4(r16)
   177f4:	00c006c4 	movi	r3,27
   177f8:	19800d2e 	bgeu	r3,r6,17830 <_calloc_r+0xa4>
   177fc:	80000215 	stw	zero,8(r16)
   17800:	80000315 	stw	zero,12(r16)
   17804:	30800c26 	beq	r6,r2,17838 <_calloc_r+0xac>
   17808:	80800404 	addi	r2,r16,16
   1780c:	003fef06 	br	177cc <_calloc_r+0x40>
   17810:	8009883a 	mov	r4,r16
   17814:	000b883a 	mov	r5,zero
   17818:	0015df40 	call	15df4 <memset>
   1781c:	8005883a 	mov	r2,r16
   17820:	dfc00117 	ldw	ra,4(sp)
   17824:	dc000017 	ldw	r16,0(sp)
   17828:	dec00204 	addi	sp,sp,8
   1782c:	f800283a 	ret
   17830:	80800204 	addi	r2,r16,8
   17834:	003fe506 	br	177cc <_calloc_r+0x40>
   17838:	80000415 	stw	zero,16(r16)
   1783c:	80000515 	stw	zero,20(r16)
   17840:	80800604 	addi	r2,r16,24
   17844:	003fe106 	br	177cc <_calloc_r+0x40>

00017848 <_close_r>:
   17848:	defffd04 	addi	sp,sp,-12
   1784c:	dc400115 	stw	r17,4(sp)
   17850:	dc000015 	stw	r16,0(sp)
   17854:	2023883a 	mov	r17,r4
   17858:	04000174 	movhi	r16,5
   1785c:	84278d04 	addi	r16,r16,-25036
   17860:	2809883a 	mov	r4,r5
   17864:	dfc00215 	stw	ra,8(sp)
   17868:	80000015 	stw	zero,0(r16)
   1786c:	0019a100 	call	19a10 <close>
   17870:	00ffffc4 	movi	r3,-1
   17874:	10c00526 	beq	r2,r3,1788c <_close_r+0x44>
   17878:	dfc00217 	ldw	ra,8(sp)
   1787c:	dc400117 	ldw	r17,4(sp)
   17880:	dc000017 	ldw	r16,0(sp)
   17884:	dec00304 	addi	sp,sp,12
   17888:	f800283a 	ret
   1788c:	80c00017 	ldw	r3,0(r16)
   17890:	183ff926 	beq	r3,zero,17878 <_close_r+0x30>
   17894:	88c00015 	stw	r3,0(r17)
   17898:	dfc00217 	ldw	ra,8(sp)
   1789c:	dc400117 	ldw	r17,4(sp)
   178a0:	dc000017 	ldw	r16,0(sp)
   178a4:	dec00304 	addi	sp,sp,12
   178a8:	f800283a 	ret

000178ac <_fclose_r>:
   178ac:	defffc04 	addi	sp,sp,-16
   178b0:	dc400115 	stw	r17,4(sp)
   178b4:	dc000015 	stw	r16,0(sp)
   178b8:	dfc00315 	stw	ra,12(sp)
   178bc:	dc800215 	stw	r18,8(sp)
   178c0:	2821883a 	mov	r16,r5
   178c4:	2023883a 	mov	r17,r4
   178c8:	28003426 	beq	r5,zero,1799c <_fclose_r+0xf0>
   178cc:	00146440 	call	14644 <__sfp_lock_acquire>
   178d0:	88000226 	beq	r17,zero,178dc <_fclose_r+0x30>
   178d4:	88800e17 	ldw	r2,56(r17)
   178d8:	10003826 	beq	r2,zero,179bc <_fclose_r+0x110>
   178dc:	8080030f 	ldh	r2,12(r16)
   178e0:	10002526 	beq	r2,zero,17978 <_fclose_r+0xcc>
   178e4:	8809883a 	mov	r4,r17
   178e8:	800b883a 	mov	r5,r16
   178ec:	00141940 	call	14194 <_fflush_r>
   178f0:	1025883a 	mov	r18,r2
   178f4:	80800b17 	ldw	r2,44(r16)
   178f8:	10000426 	beq	r2,zero,1790c <_fclose_r+0x60>
   178fc:	81400717 	ldw	r5,28(r16)
   17900:	8809883a 	mov	r4,r17
   17904:	103ee83a 	callr	r2
   17908:	10003516 	blt	r2,zero,179e0 <_fclose_r+0x134>
   1790c:	8080030b 	ldhu	r2,12(r16)
   17910:	1080200c 	andi	r2,r2,128
   17914:	10bfffcc 	andi	r2,r2,65535
   17918:	10a0001c 	xori	r2,r2,32768
   1791c:	10a00004 	addi	r2,r2,-32768
   17920:	10002b1e 	bne	r2,zero,179d0 <_fclose_r+0x124>
   17924:	81400c17 	ldw	r5,48(r16)
   17928:	28000526 	beq	r5,zero,17940 <_fclose_r+0x94>
   1792c:	80801004 	addi	r2,r16,64
   17930:	28800226 	beq	r5,r2,1793c <_fclose_r+0x90>
   17934:	8809883a 	mov	r4,r17
   17938:	00147c00 	call	147c0 <_free_r>
   1793c:	80000c15 	stw	zero,48(r16)
   17940:	81401117 	ldw	r5,68(r16)
   17944:	28000326 	beq	r5,zero,17954 <_fclose_r+0xa8>
   17948:	8809883a 	mov	r4,r17
   1794c:	00147c00 	call	147c0 <_free_r>
   17950:	80001115 	stw	zero,68(r16)
   17954:	8000030d 	sth	zero,12(r16)
   17958:	00146480 	call	14648 <__sfp_lock_release>
   1795c:	9005883a 	mov	r2,r18
   17960:	dfc00317 	ldw	ra,12(sp)
   17964:	dc800217 	ldw	r18,8(sp)
   17968:	dc400117 	ldw	r17,4(sp)
   1796c:	dc000017 	ldw	r16,0(sp)
   17970:	dec00404 	addi	sp,sp,16
   17974:	f800283a 	ret
   17978:	00146480 	call	14648 <__sfp_lock_release>
   1797c:	0025883a 	mov	r18,zero
   17980:	9005883a 	mov	r2,r18
   17984:	dfc00317 	ldw	ra,12(sp)
   17988:	dc800217 	ldw	r18,8(sp)
   1798c:	dc400117 	ldw	r17,4(sp)
   17990:	dc000017 	ldw	r16,0(sp)
   17994:	dec00404 	addi	sp,sp,16
   17998:	f800283a 	ret
   1799c:	0025883a 	mov	r18,zero
   179a0:	9005883a 	mov	r2,r18
   179a4:	dfc00317 	ldw	ra,12(sp)
   179a8:	dc800217 	ldw	r18,8(sp)
   179ac:	dc400117 	ldw	r17,4(sp)
   179b0:	dc000017 	ldw	r16,0(sp)
   179b4:	dec00404 	addi	sp,sp,16
   179b8:	f800283a 	ret
   179bc:	8809883a 	mov	r4,r17
   179c0:	001443c0 	call	1443c <__sinit>
   179c4:	8080030f 	ldh	r2,12(r16)
   179c8:	103fc61e 	bne	r2,zero,178e4 <_fclose_r+0x38>
   179cc:	003fea06 	br	17978 <_fclose_r+0xcc>
   179d0:	81400417 	ldw	r5,16(r16)
   179d4:	8809883a 	mov	r4,r17
   179d8:	00147c00 	call	147c0 <_free_r>
   179dc:	003fd106 	br	17924 <_fclose_r+0x78>
   179e0:	04bfffc4 	movi	r18,-1
   179e4:	003fc906 	br	1790c <_fclose_r+0x60>

000179e8 <fclose>:
   179e8:	00800174 	movhi	r2,5
   179ec:	10a77404 	addi	r2,r2,-25136
   179f0:	200b883a 	mov	r5,r4
   179f4:	11000017 	ldw	r4,0(r2)
   179f8:	00178ac1 	jmpi	178ac <_fclose_r>

000179fc <_fstat_r>:
   179fc:	defffd04 	addi	sp,sp,-12
   17a00:	dc400115 	stw	r17,4(sp)
   17a04:	dc000015 	stw	r16,0(sp)
   17a08:	2023883a 	mov	r17,r4
   17a0c:	04000174 	movhi	r16,5
   17a10:	84278d04 	addi	r16,r16,-25036
   17a14:	2809883a 	mov	r4,r5
   17a18:	300b883a 	mov	r5,r6
   17a1c:	dfc00215 	stw	ra,8(sp)
   17a20:	80000015 	stw	zero,0(r16)
   17a24:	0019b540 	call	19b54 <fstat>
   17a28:	00ffffc4 	movi	r3,-1
   17a2c:	10c00526 	beq	r2,r3,17a44 <_fstat_r+0x48>
   17a30:	dfc00217 	ldw	ra,8(sp)
   17a34:	dc400117 	ldw	r17,4(sp)
   17a38:	dc000017 	ldw	r16,0(sp)
   17a3c:	dec00304 	addi	sp,sp,12
   17a40:	f800283a 	ret
   17a44:	80c00017 	ldw	r3,0(r16)
   17a48:	183ff926 	beq	r3,zero,17a30 <_fstat_r+0x34>
   17a4c:	88c00015 	stw	r3,0(r17)
   17a50:	dfc00217 	ldw	ra,8(sp)
   17a54:	dc400117 	ldw	r17,4(sp)
   17a58:	dc000017 	ldw	r16,0(sp)
   17a5c:	dec00304 	addi	sp,sp,12
   17a60:	f800283a 	ret

00017a64 <_isatty_r>:
   17a64:	defffd04 	addi	sp,sp,-12
   17a68:	dc400115 	stw	r17,4(sp)
   17a6c:	dc000015 	stw	r16,0(sp)
   17a70:	2023883a 	mov	r17,r4
   17a74:	04000174 	movhi	r16,5
   17a78:	84278d04 	addi	r16,r16,-25036
   17a7c:	2809883a 	mov	r4,r5
   17a80:	dfc00215 	stw	ra,8(sp)
   17a84:	80000015 	stw	zero,0(r16)
   17a88:	0019c500 	call	19c50 <isatty>
   17a8c:	00ffffc4 	movi	r3,-1
   17a90:	10c00526 	beq	r2,r3,17aa8 <_isatty_r+0x44>
   17a94:	dfc00217 	ldw	ra,8(sp)
   17a98:	dc400117 	ldw	r17,4(sp)
   17a9c:	dc000017 	ldw	r16,0(sp)
   17aa0:	dec00304 	addi	sp,sp,12
   17aa4:	f800283a 	ret
   17aa8:	80c00017 	ldw	r3,0(r16)
   17aac:	183ff926 	beq	r3,zero,17a94 <_isatty_r+0x30>
   17ab0:	88c00015 	stw	r3,0(r17)
   17ab4:	dfc00217 	ldw	ra,8(sp)
   17ab8:	dc400117 	ldw	r17,4(sp)
   17abc:	dc000017 	ldw	r16,0(sp)
   17ac0:	dec00304 	addi	sp,sp,12
   17ac4:	f800283a 	ret

00017ac8 <_lseek_r>:
   17ac8:	defffd04 	addi	sp,sp,-12
   17acc:	dc400115 	stw	r17,4(sp)
   17ad0:	dc000015 	stw	r16,0(sp)
   17ad4:	2023883a 	mov	r17,r4
   17ad8:	04000174 	movhi	r16,5
   17adc:	84278d04 	addi	r16,r16,-25036
   17ae0:	2809883a 	mov	r4,r5
   17ae4:	300b883a 	mov	r5,r6
   17ae8:	380d883a 	mov	r6,r7
   17aec:	dfc00215 	stw	ra,8(sp)
   17af0:	80000015 	stw	zero,0(r16)
   17af4:	0019e2c0 	call	19e2c <lseek>
   17af8:	00ffffc4 	movi	r3,-1
   17afc:	10c00526 	beq	r2,r3,17b14 <_lseek_r+0x4c>
   17b00:	dfc00217 	ldw	ra,8(sp)
   17b04:	dc400117 	ldw	r17,4(sp)
   17b08:	dc000017 	ldw	r16,0(sp)
   17b0c:	dec00304 	addi	sp,sp,12
   17b10:	f800283a 	ret
   17b14:	80c00017 	ldw	r3,0(r16)
   17b18:	183ff926 	beq	r3,zero,17b00 <_lseek_r+0x38>
   17b1c:	88c00015 	stw	r3,0(r17)
   17b20:	dfc00217 	ldw	ra,8(sp)
   17b24:	dc400117 	ldw	r17,4(sp)
   17b28:	dc000017 	ldw	r16,0(sp)
   17b2c:	dec00304 	addi	sp,sp,12
   17b30:	f800283a 	ret

00017b34 <_read_r>:
   17b34:	defffd04 	addi	sp,sp,-12
   17b38:	dc400115 	stw	r17,4(sp)
   17b3c:	dc000015 	stw	r16,0(sp)
   17b40:	2023883a 	mov	r17,r4
   17b44:	04000174 	movhi	r16,5
   17b48:	84278d04 	addi	r16,r16,-25036
   17b4c:	2809883a 	mov	r4,r5
   17b50:	300b883a 	mov	r5,r6
   17b54:	380d883a 	mov	r6,r7
   17b58:	dfc00215 	stw	ra,8(sp)
   17b5c:	80000015 	stw	zero,0(r16)
   17b60:	001a0040 	call	1a004 <read>
   17b64:	00ffffc4 	movi	r3,-1
   17b68:	10c00526 	beq	r2,r3,17b80 <_read_r+0x4c>
   17b6c:	dfc00217 	ldw	ra,8(sp)
   17b70:	dc400117 	ldw	r17,4(sp)
   17b74:	dc000017 	ldw	r16,0(sp)
   17b78:	dec00304 	addi	sp,sp,12
   17b7c:	f800283a 	ret
   17b80:	80c00017 	ldw	r3,0(r16)
   17b84:	183ff926 	beq	r3,zero,17b6c <_read_r+0x38>
   17b88:	88c00015 	stw	r3,0(r17)
   17b8c:	dfc00217 	ldw	ra,8(sp)
   17b90:	dc400117 	ldw	r17,4(sp)
   17b94:	dc000017 	ldw	r16,0(sp)
   17b98:	dec00304 	addi	sp,sp,12
   17b9c:	f800283a 	ret

00017ba0 <__udivdi3>:
   17ba0:	defff504 	addi	sp,sp,-44
   17ba4:	dd000515 	stw	r20,20(sp)
   17ba8:	dcc00415 	stw	r19,16(sp)
   17bac:	dc800315 	stw	r18,12(sp)
   17bb0:	dc400215 	stw	r17,8(sp)
   17bb4:	dc000115 	stw	r16,4(sp)
   17bb8:	dfc00a15 	stw	ra,40(sp)
   17bbc:	df000915 	stw	fp,36(sp)
   17bc0:	ddc00815 	stw	r23,32(sp)
   17bc4:	dd800715 	stw	r22,28(sp)
   17bc8:	dd400615 	stw	r21,24(sp)
   17bcc:	2025883a 	mov	r18,r4
   17bd0:	2823883a 	mov	r17,r5
   17bd4:	3021883a 	mov	r16,r6
   17bd8:	2027883a 	mov	r19,r4
   17bdc:	2829883a 	mov	r20,r5
   17be0:	3800401e 	bne	r7,zero,17ce4 <__udivdi3+0x144>
   17be4:	2980602e 	bgeu	r5,r6,17d68 <__udivdi3+0x1c8>
   17be8:	00bfffd4 	movui	r2,65535
   17bec:	1180aa36 	bltu	r2,r6,17e98 <__udivdi3+0x2f8>
   17bf0:	00803fc4 	movi	r2,255
   17bf4:	11814436 	bltu	r2,r6,18108 <__udivdi3+0x568>
   17bf8:	0005883a 	mov	r2,zero
   17bfc:	0007883a 	mov	r3,zero
   17c00:	3084d83a 	srl	r2,r6,r2
   17c04:	01000174 	movhi	r4,5
   17c08:	21209f04 	addi	r4,r4,-32132
   17c0c:	2085883a 	add	r2,r4,r2
   17c10:	10800003 	ldbu	r2,0(r2)
   17c14:	10c7883a 	add	r3,r2,r3
   17c18:	00800804 	movi	r2,32
   17c1c:	10c5c83a 	sub	r2,r2,r3
   17c20:	10000526 	beq	r2,zero,17c38 <__udivdi3+0x98>
   17c24:	88a2983a 	sll	r17,r17,r2
   17c28:	90c6d83a 	srl	r3,r18,r3
   17c2c:	30a0983a 	sll	r16,r6,r2
   17c30:	90a6983a 	sll	r19,r18,r2
   17c34:	88e8b03a 	or	r20,r17,r3
   17c38:	8022d43a 	srli	r17,r16,16
   17c3c:	a009883a 	mov	r4,r20
   17c40:	857fffcc 	andi	r21,r16,65535
   17c44:	880b883a 	mov	r5,r17
   17c48:	00108180 	call	10818 <__umodsi3>
   17c4c:	a009883a 	mov	r4,r20
   17c50:	880b883a 	mov	r5,r17
   17c54:	102d883a 	mov	r22,r2
   17c58:	00108100 	call	10810 <__udivsi3>
   17c5c:	b02c943a 	slli	r22,r22,16
   17c60:	9806d43a 	srli	r3,r19,16
   17c64:	1549383a 	mul	r4,r2,r21
   17c68:	1025883a 	mov	r18,r2
   17c6c:	b0c6b03a 	or	r3,r22,r3
   17c70:	1900052e 	bgeu	r3,r4,17c88 <__udivdi3+0xe8>
   17c74:	1c07883a 	add	r3,r3,r16
   17c78:	10bfffc4 	addi	r2,r2,-1
   17c7c:	1c000136 	bltu	r3,r16,17c84 <__udivdi3+0xe4>
   17c80:	19013636 	bltu	r3,r4,1815c <__udivdi3+0x5bc>
   17c84:	1025883a 	mov	r18,r2
   17c88:	1929c83a 	sub	r20,r3,r4
   17c8c:	a009883a 	mov	r4,r20
   17c90:	880b883a 	mov	r5,r17
   17c94:	00108180 	call	10818 <__umodsi3>
   17c98:	102d883a 	mov	r22,r2
   17c9c:	a009883a 	mov	r4,r20
   17ca0:	880b883a 	mov	r5,r17
   17ca4:	00108100 	call	10810 <__udivsi3>
   17ca8:	b02c943a 	slli	r22,r22,16
   17cac:	156b383a 	mul	r21,r2,r21
   17cb0:	9cffffcc 	andi	r19,r19,65535
   17cb4:	b4e6b03a 	or	r19,r22,r19
   17cb8:	1009883a 	mov	r4,r2
   17cbc:	9d40052e 	bgeu	r19,r21,17cd4 <__udivdi3+0x134>
   17cc0:	9c27883a 	add	r19,r19,r16
   17cc4:	10bfffc4 	addi	r2,r2,-1
   17cc8:	9c00f736 	bltu	r19,r16,180a8 <__udivdi3+0x508>
   17ccc:	9d40f62e 	bgeu	r19,r21,180a8 <__udivdi3+0x508>
   17cd0:	213fff84 	addi	r4,r4,-2
   17cd4:	9004943a 	slli	r2,r18,16
   17cd8:	0007883a 	mov	r3,zero
   17cdc:	2084b03a 	or	r2,r4,r2
   17ce0:	00001506 	br	17d38 <__udivdi3+0x198>
   17ce4:	29c06536 	bltu	r5,r7,17e7c <__udivdi3+0x2dc>
   17ce8:	00bfffd4 	movui	r2,65535
   17cec:	11c0652e 	bgeu	r2,r7,17e84 <__udivdi3+0x2e4>
   17cf0:	00804034 	movhi	r2,256
   17cf4:	10bfffc4 	addi	r2,r2,-1
   17cf8:	11c0f736 	bltu	r2,r7,180d8 <__udivdi3+0x538>
   17cfc:	00c00404 	movi	r3,16
   17d00:	180b883a 	mov	r5,r3
   17d04:	38c6d83a 	srl	r3,r7,r3
   17d08:	01000174 	movhi	r4,5
   17d0c:	21209f04 	addi	r4,r4,-32132
   17d10:	04000804 	movi	r16,32
   17d14:	20c7883a 	add	r3,r4,r3
   17d18:	18800003 	ldbu	r2,0(r3)
   17d1c:	1145883a 	add	r2,r2,r5
   17d20:	80a1c83a 	sub	r16,r16,r2
   17d24:	8000691e 	bne	r16,zero,17ecc <__udivdi3+0x32c>
   17d28:	0007883a 	mov	r3,zero
   17d2c:	3c406536 	bltu	r7,r17,17ec4 <__udivdi3+0x324>
   17d30:	9180642e 	bgeu	r18,r6,17ec4 <__udivdi3+0x324>
   17d34:	0005883a 	mov	r2,zero
   17d38:	dfc00a17 	ldw	ra,40(sp)
   17d3c:	df000917 	ldw	fp,36(sp)
   17d40:	ddc00817 	ldw	r23,32(sp)
   17d44:	dd800717 	ldw	r22,28(sp)
   17d48:	dd400617 	ldw	r21,24(sp)
   17d4c:	dd000517 	ldw	r20,20(sp)
   17d50:	dcc00417 	ldw	r19,16(sp)
   17d54:	dc800317 	ldw	r18,12(sp)
   17d58:	dc400217 	ldw	r17,8(sp)
   17d5c:	dc000117 	ldw	r16,4(sp)
   17d60:	dec00b04 	addi	sp,sp,44
   17d64:	f800283a 	ret
   17d68:	3000041e 	bne	r6,zero,17d7c <__udivdi3+0x1dc>
   17d6c:	01000044 	movi	r4,1
   17d70:	000b883a 	mov	r5,zero
   17d74:	00108100 	call	10810 <__udivsi3>
   17d78:	1021883a 	mov	r16,r2
   17d7c:	00bfffd4 	movui	r2,65535
   17d80:	14004b2e 	bgeu	r2,r16,17eb0 <__udivdi3+0x310>
   17d84:	00804034 	movhi	r2,256
   17d88:	10bfffc4 	addi	r2,r2,-1
   17d8c:	1400d836 	bltu	r2,r16,180f0 <__udivdi3+0x550>
   17d90:	00800404 	movi	r2,16
   17d94:	1007883a 	mov	r3,r2
   17d98:	8084d83a 	srl	r2,r16,r2
   17d9c:	01000174 	movhi	r4,5
   17da0:	21209f04 	addi	r4,r4,-32132
   17da4:	2085883a 	add	r2,r4,r2
   17da8:	10800003 	ldbu	r2,0(r2)
   17dac:	10c7883a 	add	r3,r2,r3
   17db0:	00800804 	movi	r2,32
   17db4:	10c5c83a 	sub	r2,r2,r3
   17db8:	1000891e 	bne	r2,zero,17fe0 <__udivdi3+0x440>
   17dbc:	8028d43a 	srli	r20,r16,16
   17dc0:	8c23c83a 	sub	r17,r17,r16
   17dc4:	84bfffcc 	andi	r18,r16,65535
   17dc8:	00c00044 	movi	r3,1
   17dcc:	8809883a 	mov	r4,r17
   17dd0:	a00b883a 	mov	r5,r20
   17dd4:	d8c00015 	stw	r3,0(sp)
   17dd8:	00108180 	call	10818 <__umodsi3>
   17ddc:	8809883a 	mov	r4,r17
   17de0:	a00b883a 	mov	r5,r20
   17de4:	102b883a 	mov	r21,r2
   17de8:	00108100 	call	10810 <__udivsi3>
   17dec:	a82a943a 	slli	r21,r21,16
   17df0:	9808d43a 	srli	r4,r19,16
   17df4:	148b383a 	mul	r5,r2,r18
   17df8:	1023883a 	mov	r17,r2
   17dfc:	a908b03a 	or	r4,r21,r4
   17e00:	d8c00017 	ldw	r3,0(sp)
   17e04:	2140052e 	bgeu	r4,r5,17e1c <__udivdi3+0x27c>
   17e08:	2409883a 	add	r4,r4,r16
   17e0c:	10bfffc4 	addi	r2,r2,-1
   17e10:	24000136 	bltu	r4,r16,17e18 <__udivdi3+0x278>
   17e14:	2140ce36 	bltu	r4,r5,18150 <__udivdi3+0x5b0>
   17e18:	1023883a 	mov	r17,r2
   17e1c:	216bc83a 	sub	r21,r4,r5
   17e20:	a809883a 	mov	r4,r21
   17e24:	a00b883a 	mov	r5,r20
   17e28:	d8c00015 	stw	r3,0(sp)
   17e2c:	00108180 	call	10818 <__umodsi3>
   17e30:	102d883a 	mov	r22,r2
   17e34:	a809883a 	mov	r4,r21
   17e38:	a00b883a 	mov	r5,r20
   17e3c:	00108100 	call	10810 <__udivsi3>
   17e40:	b02c943a 	slli	r22,r22,16
   17e44:	14a5383a 	mul	r18,r2,r18
   17e48:	9cffffcc 	andi	r19,r19,65535
   17e4c:	b4e6b03a 	or	r19,r22,r19
   17e50:	1009883a 	mov	r4,r2
   17e54:	d8c00017 	ldw	r3,0(sp)
   17e58:	9c80052e 	bgeu	r19,r18,17e70 <__udivdi3+0x2d0>
   17e5c:	9c27883a 	add	r19,r19,r16
   17e60:	10bfffc4 	addi	r2,r2,-1
   17e64:	9c009236 	bltu	r19,r16,180b0 <__udivdi3+0x510>
   17e68:	9c80912e 	bgeu	r19,r18,180b0 <__udivdi3+0x510>
   17e6c:	213fff84 	addi	r4,r4,-2
   17e70:	8804943a 	slli	r2,r17,16
   17e74:	2084b03a 	or	r2,r4,r2
   17e78:	003faf06 	br	17d38 <__udivdi3+0x198>
   17e7c:	0007883a 	mov	r3,zero
   17e80:	003fac06 	br	17d34 <__udivdi3+0x194>
   17e84:	00803fc4 	movi	r2,255
   17e88:	11c09636 	bltu	r2,r7,180e4 <__udivdi3+0x544>
   17e8c:	0007883a 	mov	r3,zero
   17e90:	000b883a 	mov	r5,zero
   17e94:	003f9b06 	br	17d04 <__udivdi3+0x164>
   17e98:	00804034 	movhi	r2,256
   17e9c:	10bfffc4 	addi	r2,r2,-1
   17ea0:	11809636 	bltu	r2,r6,180fc <__udivdi3+0x55c>
   17ea4:	00800404 	movi	r2,16
   17ea8:	1007883a 	mov	r3,r2
   17eac:	003f5406 	br	17c00 <__udivdi3+0x60>
   17eb0:	00803fc4 	movi	r2,255
   17eb4:	14009736 	bltu	r2,r16,18114 <__udivdi3+0x574>
   17eb8:	0005883a 	mov	r2,zero
   17ebc:	0007883a 	mov	r3,zero
   17ec0:	003fb506 	br	17d98 <__udivdi3+0x1f8>
   17ec4:	00800044 	movi	r2,1
   17ec8:	003f9b06 	br	17d38 <__udivdi3+0x198>
   17ecc:	3086d83a 	srl	r3,r6,r2
   17ed0:	3c0e983a 	sll	r7,r7,r16
   17ed4:	88aad83a 	srl	r21,r17,r2
   17ed8:	9084d83a 	srl	r2,r18,r2
   17edc:	38e6b03a 	or	r19,r7,r3
   17ee0:	9828d43a 	srli	r20,r19,16
   17ee4:	8c22983a 	sll	r17,r17,r16
   17ee8:	a809883a 	mov	r4,r21
   17eec:	a00b883a 	mov	r5,r20
   17ef0:	342c983a 	sll	r22,r6,r16
   17ef4:	88a2b03a 	or	r17,r17,r2
   17ef8:	00108180 	call	10818 <__umodsi3>
   17efc:	a809883a 	mov	r4,r21
   17f00:	a00b883a 	mov	r5,r20
   17f04:	1039883a 	mov	fp,r2
   17f08:	00108100 	call	10810 <__udivsi3>
   17f0c:	102b883a 	mov	r21,r2
   17f10:	9dffffcc 	andi	r23,r19,65535
   17f14:	e008943a 	slli	r4,fp,16
   17f18:	8804d43a 	srli	r2,r17,16
   17f1c:	adcd383a 	mul	r6,r21,r23
   17f20:	2088b03a 	or	r4,r4,r2
   17f24:	2180042e 	bgeu	r4,r6,17f38 <__udivdi3+0x398>
   17f28:	24c9883a 	add	r4,r4,r19
   17f2c:	a8bfffc4 	addi	r2,r21,-1
   17f30:	24c07f2e 	bgeu	r4,r19,18130 <__udivdi3+0x590>
   17f34:	102b883a 	mov	r21,r2
   17f38:	21b9c83a 	sub	fp,r4,r6
   17f3c:	e009883a 	mov	r4,fp
   17f40:	a00b883a 	mov	r5,r20
   17f44:	00108180 	call	10818 <__umodsi3>
   17f48:	e009883a 	mov	r4,fp
   17f4c:	a00b883a 	mov	r5,r20
   17f50:	d8800015 	stw	r2,0(sp)
   17f54:	00108100 	call	10810 <__udivsi3>
   17f58:	d8c00017 	ldw	r3,0(sp)
   17f5c:	15cb383a 	mul	r5,r2,r23
   17f60:	8c7fffcc 	andi	r17,r17,65535
   17f64:	1806943a 	slli	r3,r3,16
   17f68:	1009883a 	mov	r4,r2
   17f6c:	1c46b03a 	or	r3,r3,r17
   17f70:	1940042e 	bgeu	r3,r5,17f84 <__udivdi3+0x3e4>
   17f74:	1cc7883a 	add	r3,r3,r19
   17f78:	10bfffc4 	addi	r2,r2,-1
   17f7c:	1cc0682e 	bgeu	r3,r19,18120 <__udivdi3+0x580>
   17f80:	1009883a 	mov	r4,r2
   17f84:	a804943a 	slli	r2,r21,16
   17f88:	b1ffffcc 	andi	r7,r22,65535
   17f8c:	b02cd43a 	srli	r22,r22,16
   17f90:	2084b03a 	or	r2,r4,r2
   17f94:	113fffcc 	andi	r4,r2,65535
   17f98:	100cd43a 	srli	r6,r2,16
   17f9c:	21d1383a 	mul	r8,r4,r7
   17fa0:	2589383a 	mul	r4,r4,r22
   17fa4:	31cf383a 	mul	r7,r6,r7
   17fa8:	4012d43a 	srli	r9,r8,16
   17fac:	1947c83a 	sub	r3,r3,r5
   17fb0:	3909883a 	add	r4,r7,r4
   17fb4:	2249883a 	add	r4,r4,r9
   17fb8:	35ad383a 	mul	r22,r6,r22
   17fbc:	21c0022e 	bgeu	r4,r7,17fc8 <__udivdi3+0x428>
   17fc0:	01400074 	movhi	r5,1
   17fc4:	b16d883a 	add	r22,r22,r5
   17fc8:	200ad43a 	srli	r5,r4,16
   17fcc:	b16d883a 	add	r22,r22,r5
   17fd0:	1d803e36 	bltu	r3,r22,180cc <__udivdi3+0x52c>
   17fd4:	1d803826 	beq	r3,r22,180b8 <__udivdi3+0x518>
   17fd8:	0007883a 	mov	r3,zero
   17fdc:	003f5606 	br	17d38 <__udivdi3+0x198>
   17fe0:	80a0983a 	sll	r16,r16,r2
   17fe4:	88ead83a 	srl	r21,r17,r3
   17fe8:	90c6d83a 	srl	r3,r18,r3
   17fec:	8028d43a 	srli	r20,r16,16
   17ff0:	88a2983a 	sll	r17,r17,r2
   17ff4:	a809883a 	mov	r4,r21
   17ff8:	a00b883a 	mov	r5,r20
   17ffc:	88ecb03a 	or	r22,r17,r3
   18000:	90a6983a 	sll	r19,r18,r2
   18004:	00108180 	call	10818 <__umodsi3>
   18008:	a809883a 	mov	r4,r21
   1800c:	a00b883a 	mov	r5,r20
   18010:	1023883a 	mov	r17,r2
   18014:	00108100 	call	10810 <__udivsi3>
   18018:	102b883a 	mov	r21,r2
   1801c:	84bfffcc 	andi	r18,r16,65535
   18020:	8808943a 	slli	r4,r17,16
   18024:	b004d43a 	srli	r2,r22,16
   18028:	ac87383a 	mul	r3,r21,r18
   1802c:	2088b03a 	or	r4,r4,r2
   18030:	20c0062e 	bgeu	r4,r3,1804c <__udivdi3+0x4ac>
   18034:	2409883a 	add	r4,r4,r16
   18038:	a8bfffc4 	addi	r2,r21,-1
   1803c:	24004236 	bltu	r4,r16,18148 <__udivdi3+0x5a8>
   18040:	20c0412e 	bgeu	r4,r3,18148 <__udivdi3+0x5a8>
   18044:	ad7fff84 	addi	r21,r21,-2
   18048:	2409883a 	add	r4,r4,r16
   1804c:	20efc83a 	sub	r23,r4,r3
   18050:	b809883a 	mov	r4,r23
   18054:	a00b883a 	mov	r5,r20
   18058:	00108180 	call	10818 <__umodsi3>
   1805c:	1023883a 	mov	r17,r2
   18060:	a00b883a 	mov	r5,r20
   18064:	b809883a 	mov	r4,r23
   18068:	00108100 	call	10810 <__udivsi3>
   1806c:	8822943a 	slli	r17,r17,16
   18070:	148b383a 	mul	r5,r2,r18
   18074:	b5bfffcc 	andi	r22,r22,65535
   18078:	8da2b03a 	or	r17,r17,r22
   1807c:	8940062e 	bgeu	r17,r5,18098 <__udivdi3+0x4f8>
   18080:	8c23883a 	add	r17,r17,r16
   18084:	10ffffc4 	addi	r3,r2,-1
   18088:	8c002d36 	bltu	r17,r16,18140 <__udivdi3+0x5a0>
   1808c:	89402c2e 	bgeu	r17,r5,18140 <__udivdi3+0x5a0>
   18090:	10bfff84 	addi	r2,r2,-2
   18094:	8c23883a 	add	r17,r17,r16
   18098:	a806943a 	slli	r3,r21,16
   1809c:	8963c83a 	sub	r17,r17,r5
   180a0:	10c6b03a 	or	r3,r2,r3
   180a4:	003f4906 	br	17dcc <__udivdi3+0x22c>
   180a8:	1009883a 	mov	r4,r2
   180ac:	003f0906 	br	17cd4 <__udivdi3+0x134>
   180b0:	1009883a 	mov	r4,r2
   180b4:	003f6e06 	br	17e70 <__udivdi3+0x2d0>
   180b8:	2008943a 	slli	r4,r4,16
   180bc:	9420983a 	sll	r16,r18,r16
   180c0:	423fffcc 	andi	r8,r8,65535
   180c4:	2209883a 	add	r4,r4,r8
   180c8:	813fc32e 	bgeu	r16,r4,17fd8 <__udivdi3+0x438>
   180cc:	10bfffc4 	addi	r2,r2,-1
   180d0:	0007883a 	mov	r3,zero
   180d4:	003f1806 	br	17d38 <__udivdi3+0x198>
   180d8:	00c00604 	movi	r3,24
   180dc:	180b883a 	mov	r5,r3
   180e0:	003f0806 	br	17d04 <__udivdi3+0x164>
   180e4:	00c00204 	movi	r3,8
   180e8:	180b883a 	mov	r5,r3
   180ec:	003f0506 	br	17d04 <__udivdi3+0x164>
   180f0:	00800604 	movi	r2,24
   180f4:	1007883a 	mov	r3,r2
   180f8:	003f2706 	br	17d98 <__udivdi3+0x1f8>
   180fc:	00800604 	movi	r2,24
   18100:	1007883a 	mov	r3,r2
   18104:	003ebe06 	br	17c00 <__udivdi3+0x60>
   18108:	00800204 	movi	r2,8
   1810c:	1007883a 	mov	r3,r2
   18110:	003ebb06 	br	17c00 <__udivdi3+0x60>
   18114:	00800204 	movi	r2,8
   18118:	1007883a 	mov	r3,r2
   1811c:	003f1e06 	br	17d98 <__udivdi3+0x1f8>
   18120:	197f972e 	bgeu	r3,r5,17f80 <__udivdi3+0x3e0>
   18124:	213fff84 	addi	r4,r4,-2
   18128:	1cc7883a 	add	r3,r3,r19
   1812c:	003f9506 	br	17f84 <__udivdi3+0x3e4>
   18130:	21bf802e 	bgeu	r4,r6,17f34 <__udivdi3+0x394>
   18134:	ad7fff84 	addi	r21,r21,-2
   18138:	24c9883a 	add	r4,r4,r19
   1813c:	003f7e06 	br	17f38 <__udivdi3+0x398>
   18140:	1805883a 	mov	r2,r3
   18144:	003fd406 	br	18098 <__udivdi3+0x4f8>
   18148:	102b883a 	mov	r21,r2
   1814c:	003fbf06 	br	1804c <__udivdi3+0x4ac>
   18150:	8c7fff84 	addi	r17,r17,-2
   18154:	2409883a 	add	r4,r4,r16
   18158:	003f3006 	br	17e1c <__udivdi3+0x27c>
   1815c:	94bfff84 	addi	r18,r18,-2
   18160:	1c07883a 	add	r3,r3,r16
   18164:	003ec806 	br	17c88 <__udivdi3+0xe8>

00018168 <__umoddi3>:
   18168:	defff504 	addi	sp,sp,-44
   1816c:	dd000515 	stw	r20,20(sp)
   18170:	dcc00415 	stw	r19,16(sp)
   18174:	dc800315 	stw	r18,12(sp)
   18178:	dc400215 	stw	r17,8(sp)
   1817c:	dc000115 	stw	r16,4(sp)
   18180:	dfc00a15 	stw	ra,40(sp)
   18184:	df000915 	stw	fp,36(sp)
   18188:	ddc00815 	stw	r23,32(sp)
   1818c:	dd800715 	stw	r22,28(sp)
   18190:	dd400615 	stw	r21,24(sp)
   18194:	2025883a 	mov	r18,r4
   18198:	2823883a 	mov	r17,r5
   1819c:	3021883a 	mov	r16,r6
   181a0:	2027883a 	mov	r19,r4
   181a4:	2829883a 	mov	r20,r5
   181a8:	3800351e 	bne	r7,zero,18280 <__umoddi3+0x118>
   181ac:	29804d2e 	bgeu	r5,r6,182e4 <__umoddi3+0x17c>
   181b0:	00bfffd4 	movui	r2,65535
   181b4:	11809a36 	bltu	r2,r6,18420 <__umoddi3+0x2b8>
   181b8:	00803fc4 	movi	r2,255
   181bc:	11813936 	bltu	r2,r6,186a4 <__umoddi3+0x53c>
   181c0:	0005883a 	mov	r2,zero
   181c4:	0009883a 	mov	r4,zero
   181c8:	3084d83a 	srl	r2,r6,r2
   181cc:	00c00174 	movhi	r3,5
   181d0:	18e09f04 	addi	r3,r3,-32132
   181d4:	05400804 	movi	r21,32
   181d8:	1885883a 	add	r2,r3,r2
   181dc:	10800003 	ldbu	r2,0(r2)
   181e0:	1109883a 	add	r4,r2,r4
   181e4:	a92bc83a 	sub	r21,r21,r4
   181e8:	a800ec26 	beq	r21,zero,1859c <__umoddi3+0x434>
   181ec:	8d62983a 	sll	r17,r17,r21
   181f0:	9108d83a 	srl	r4,r18,r4
   181f4:	3560983a 	sll	r16,r6,r21
   181f8:	9566983a 	sll	r19,r18,r21
   181fc:	8928b03a 	or	r20,r17,r4
   18200:	8022d43a 	srli	r17,r16,16
   18204:	a009883a 	mov	r4,r20
   18208:	84bfffcc 	andi	r18,r16,65535
   1820c:	880b883a 	mov	r5,r17
   18210:	00108180 	call	10818 <__umodsi3>
   18214:	a009883a 	mov	r4,r20
   18218:	880b883a 	mov	r5,r17
   1821c:	102d883a 	mov	r22,r2
   18220:	00108100 	call	10810 <__udivsi3>
   18224:	b02c943a 	slli	r22,r22,16
   18228:	9806d43a 	srli	r3,r19,16
   1822c:	1485383a 	mul	r2,r2,r18
   18230:	b0c6b03a 	or	r3,r22,r3
   18234:	1880042e 	bgeu	r3,r2,18248 <__umoddi3+0xe0>
   18238:	1c07883a 	add	r3,r3,r16
   1823c:	1c000236 	bltu	r3,r16,18248 <__umoddi3+0xe0>
   18240:	1880012e 	bgeu	r3,r2,18248 <__umoddi3+0xe0>
   18244:	1c07883a 	add	r3,r3,r16
   18248:	18a9c83a 	sub	r20,r3,r2
   1824c:	a009883a 	mov	r4,r20
   18250:	880b883a 	mov	r5,r17
   18254:	00108180 	call	10818 <__umodsi3>
   18258:	102d883a 	mov	r22,r2
   1825c:	a009883a 	mov	r4,r20
   18260:	880b883a 	mov	r5,r17
   18264:	00108100 	call	10810 <__udivsi3>
   18268:	b02c943a 	slli	r22,r22,16
   1826c:	1485383a 	mul	r2,r2,r18
   18270:	9cffffcc 	andi	r19,r19,65535
   18274:	b4e6b03a 	or	r19,r22,r19
   18278:	9880522e 	bgeu	r19,r2,183c4 <__umoddi3+0x25c>
   1827c:	00004d06 	br	183b4 <__umoddi3+0x24c>
   18280:	29c05436 	bltu	r5,r7,183d4 <__umoddi3+0x26c>
   18284:	00bfffd4 	movui	r2,65535
   18288:	11c0602e 	bgeu	r2,r7,1840c <__umoddi3+0x2a4>
   1828c:	00804034 	movhi	r2,256
   18290:	10bfffc4 	addi	r2,r2,-1
   18294:	11c0f736 	bltu	r2,r7,18674 <__umoddi3+0x50c>
   18298:	00c00404 	movi	r3,16
   1829c:	1827883a 	mov	r19,r3
   182a0:	38c6d83a 	srl	r3,r7,r3
   182a4:	01000174 	movhi	r4,5
   182a8:	21209f04 	addi	r4,r4,-32132
   182ac:	04000804 	movi	r16,32
   182b0:	20c7883a 	add	r3,r4,r3
   182b4:	18800003 	ldbu	r2,0(r3)
   182b8:	14e7883a 	add	r19,r2,r19
   182bc:	84e1c83a 	sub	r16,r16,r19
   182c0:	8000621e 	bne	r16,zero,1844c <__umoddi3+0x2e4>
   182c4:	3c400136 	bltu	r7,r17,182cc <__umoddi3+0x164>
   182c8:	91810336 	bltu	r18,r6,186d8 <__umoddi3+0x570>
   182cc:	9185c83a 	sub	r2,r18,r6
   182d0:	89e3c83a 	sub	r17,r17,r7
   182d4:	90a5803a 	cmpltu	r18,r18,r2
   182d8:	8ca9c83a 	sub	r20,r17,r18
   182dc:	a007883a 	mov	r3,r20
   182e0:	00003e06 	br	183dc <__umoddi3+0x274>
   182e4:	3000041e 	bne	r6,zero,182f8 <__umoddi3+0x190>
   182e8:	01000044 	movi	r4,1
   182ec:	000b883a 	mov	r5,zero
   182f0:	00108100 	call	10810 <__udivsi3>
   182f4:	1021883a 	mov	r16,r2
   182f8:	00bfffd4 	movui	r2,65535
   182fc:	14004e2e 	bgeu	r2,r16,18438 <__umoddi3+0x2d0>
   18300:	00804034 	movhi	r2,256
   18304:	10bfffc4 	addi	r2,r2,-1
   18308:	1400e336 	bltu	r2,r16,18698 <__umoddi3+0x530>
   1830c:	00800404 	movi	r2,16
   18310:	1007883a 	mov	r3,r2
   18314:	8084d83a 	srl	r2,r16,r2
   18318:	01000174 	movhi	r4,5
   1831c:	21209f04 	addi	r4,r4,-32132
   18320:	05400804 	movi	r21,32
   18324:	2085883a 	add	r2,r4,r2
   18328:	10800003 	ldbu	r2,0(r2)
   1832c:	10c7883a 	add	r3,r2,r3
   18330:	a8ebc83a 	sub	r21,r21,r3
   18334:	a8009b1e 	bne	r21,zero,185a4 <__umoddi3+0x43c>
   18338:	8028d43a 	srli	r20,r16,16
   1833c:	8c23c83a 	sub	r17,r17,r16
   18340:	85bfffcc 	andi	r22,r16,65535
   18344:	8809883a 	mov	r4,r17
   18348:	a00b883a 	mov	r5,r20
   1834c:	00108180 	call	10818 <__umodsi3>
   18350:	8809883a 	mov	r4,r17
   18354:	a00b883a 	mov	r5,r20
   18358:	1025883a 	mov	r18,r2
   1835c:	00108100 	call	10810 <__udivsi3>
   18360:	9024943a 	slli	r18,r18,16
   18364:	9806d43a 	srli	r3,r19,16
   18368:	1585383a 	mul	r2,r2,r22
   1836c:	90c6b03a 	or	r3,r18,r3
   18370:	1880032e 	bgeu	r3,r2,18380 <__umoddi3+0x218>
   18374:	1c07883a 	add	r3,r3,r16
   18378:	1c000136 	bltu	r3,r16,18380 <__umoddi3+0x218>
   1837c:	1880d436 	bltu	r3,r2,186d0 <__umoddi3+0x568>
   18380:	18a3c83a 	sub	r17,r3,r2
   18384:	8809883a 	mov	r4,r17
   18388:	a00b883a 	mov	r5,r20
   1838c:	00108180 	call	10818 <__umodsi3>
   18390:	1025883a 	mov	r18,r2
   18394:	8809883a 	mov	r4,r17
   18398:	a00b883a 	mov	r5,r20
   1839c:	00108100 	call	10810 <__udivsi3>
   183a0:	9024943a 	slli	r18,r18,16
   183a4:	1585383a 	mul	r2,r2,r22
   183a8:	9cffffcc 	andi	r19,r19,65535
   183ac:	94e6b03a 	or	r19,r18,r19
   183b0:	9880042e 	bgeu	r19,r2,183c4 <__umoddi3+0x25c>
   183b4:	9c27883a 	add	r19,r19,r16
   183b8:	9c000236 	bltu	r19,r16,183c4 <__umoddi3+0x25c>
   183bc:	9880012e 	bgeu	r19,r2,183c4 <__umoddi3+0x25c>
   183c0:	9c27883a 	add	r19,r19,r16
   183c4:	98a7c83a 	sub	r19,r19,r2
   183c8:	9d44d83a 	srl	r2,r19,r21
   183cc:	0007883a 	mov	r3,zero
   183d0:	00000206 	br	183dc <__umoddi3+0x274>
   183d4:	2005883a 	mov	r2,r4
   183d8:	2807883a 	mov	r3,r5
   183dc:	dfc00a17 	ldw	ra,40(sp)
   183e0:	df000917 	ldw	fp,36(sp)
   183e4:	ddc00817 	ldw	r23,32(sp)
   183e8:	dd800717 	ldw	r22,28(sp)
   183ec:	dd400617 	ldw	r21,24(sp)
   183f0:	dd000517 	ldw	r20,20(sp)
   183f4:	dcc00417 	ldw	r19,16(sp)
   183f8:	dc800317 	ldw	r18,12(sp)
   183fc:	dc400217 	ldw	r17,8(sp)
   18400:	dc000117 	ldw	r16,4(sp)
   18404:	dec00b04 	addi	sp,sp,44
   18408:	f800283a 	ret
   1840c:	00803fc4 	movi	r2,255
   18410:	11c09536 	bltu	r2,r7,18668 <__umoddi3+0x500>
   18414:	0007883a 	mov	r3,zero
   18418:	0027883a 	mov	r19,zero
   1841c:	003fa006 	br	182a0 <__umoddi3+0x138>
   18420:	00804034 	movhi	r2,256
   18424:	10bfffc4 	addi	r2,r2,-1
   18428:	11809536 	bltu	r2,r6,18680 <__umoddi3+0x518>
   1842c:	00800404 	movi	r2,16
   18430:	1009883a 	mov	r4,r2
   18434:	003f6406 	br	181c8 <__umoddi3+0x60>
   18438:	00803fc4 	movi	r2,255
   1843c:	14009336 	bltu	r2,r16,1868c <__umoddi3+0x524>
   18440:	0005883a 	mov	r2,zero
   18444:	0007883a 	mov	r3,zero
   18448:	003fb206 	br	18314 <__umoddi3+0x1ac>
   1844c:	34c4d83a 	srl	r2,r6,r19
   18450:	3c0e983a 	sll	r7,r7,r16
   18454:	8ceed83a 	srl	r23,r17,r19
   18458:	8c22983a 	sll	r17,r17,r16
   1845c:	38a8b03a 	or	r20,r7,r2
   18460:	a02ad43a 	srli	r21,r20,16
   18464:	94c4d83a 	srl	r2,r18,r19
   18468:	b809883a 	mov	r4,r23
   1846c:	a80b883a 	mov	r5,r21
   18470:	88a2b03a 	or	r17,r17,r2
   18474:	342c983a 	sll	r22,r6,r16
   18478:	00108180 	call	10818 <__umodsi3>
   1847c:	b809883a 	mov	r4,r23
   18480:	a80b883a 	mov	r5,r21
   18484:	d8800015 	stw	r2,0(sp)
   18488:	00108100 	call	10810 <__udivsi3>
   1848c:	d8c00017 	ldw	r3,0(sp)
   18490:	102f883a 	mov	r23,r2
   18494:	a73fffcc 	andi	fp,r20,65535
   18498:	180a943a 	slli	r5,r3,16
   1849c:	8804d43a 	srli	r2,r17,16
   184a0:	bf09383a 	mul	r4,r23,fp
   184a4:	9424983a 	sll	r18,r18,r16
   184a8:	288ab03a 	or	r5,r5,r2
   184ac:	2900042e 	bgeu	r5,r4,184c0 <__umoddi3+0x358>
   184b0:	2d0b883a 	add	r5,r5,r20
   184b4:	b8bfffc4 	addi	r2,r23,-1
   184b8:	2d00812e 	bgeu	r5,r20,186c0 <__umoddi3+0x558>
   184bc:	102f883a 	mov	r23,r2
   184c0:	2907c83a 	sub	r3,r5,r4
   184c4:	1809883a 	mov	r4,r3
   184c8:	a80b883a 	mov	r5,r21
   184cc:	d8c00015 	stw	r3,0(sp)
   184d0:	00108180 	call	10818 <__umodsi3>
   184d4:	d8c00017 	ldw	r3,0(sp)
   184d8:	a80b883a 	mov	r5,r21
   184dc:	d8800015 	stw	r2,0(sp)
   184e0:	1809883a 	mov	r4,r3
   184e4:	00108100 	call	10810 <__udivsi3>
   184e8:	d9800017 	ldw	r6,0(sp)
   184ec:	8c7fffcc 	andi	r17,r17,65535
   184f0:	3008943a 	slli	r4,r6,16
   184f4:	170d383a 	mul	r6,r2,fp
   184f8:	2448b03a 	or	r4,r4,r17
   184fc:	2180042e 	bgeu	r4,r6,18510 <__umoddi3+0x3a8>
   18500:	2509883a 	add	r4,r4,r20
   18504:	10ffffc4 	addi	r3,r2,-1
   18508:	2500692e 	bgeu	r4,r20,186b0 <__umoddi3+0x548>
   1850c:	1805883a 	mov	r2,r3
   18510:	b82e943a 	slli	r23,r23,16
   18514:	b010d43a 	srli	r8,r22,16
   18518:	b1ffffcc 	andi	r7,r22,65535
   1851c:	15eeb03a 	or	r23,r2,r23
   18520:	b8bfffcc 	andi	r2,r23,65535
   18524:	b82ed43a 	srli	r23,r23,16
   18528:	11c7383a 	mul	r3,r2,r7
   1852c:	1205383a 	mul	r2,r2,r8
   18530:	b9cf383a 	mul	r7,r23,r7
   18534:	400b883a 	mov	r5,r8
   18538:	1810d43a 	srli	r8,r3,16
   1853c:	3885883a 	add	r2,r7,r2
   18540:	2189c83a 	sub	r4,r4,r6
   18544:	1205883a 	add	r2,r2,r8
   18548:	b94b383a 	mul	r5,r23,r5
   1854c:	11c0022e 	bgeu	r2,r7,18558 <__umoddi3+0x3f0>
   18550:	01800074 	movhi	r6,1
   18554:	298b883a 	add	r5,r5,r6
   18558:	100cd43a 	srli	r6,r2,16
   1855c:	1004943a 	slli	r2,r2,16
   18560:	18ffffcc 	andi	r3,r3,65535
   18564:	298b883a 	add	r5,r5,r6
   18568:	10c5883a 	add	r2,r2,r3
   1856c:	21403836 	bltu	r4,r5,18650 <__umoddi3+0x4e8>
   18570:	21405c26 	beq	r4,r5,186e4 <__umoddi3+0x57c>
   18574:	2147c83a 	sub	r3,r4,r5
   18578:	102d883a 	mov	r22,r2
   1857c:	95adc83a 	sub	r22,r18,r22
   18580:	95a5803a 	cmpltu	r18,r18,r22
   18584:	1c87c83a 	sub	r3,r3,r18
   18588:	1cc4983a 	sll	r2,r3,r19
   1858c:	b42cd83a 	srl	r22,r22,r16
   18590:	1c06d83a 	srl	r3,r3,r16
   18594:	1584b03a 	or	r2,r2,r22
   18598:	003f9006 	br	183dc <__umoddi3+0x274>
   1859c:	002b883a 	mov	r21,zero
   185a0:	003f1706 	br	18200 <__umoddi3+0x98>
   185a4:	8560983a 	sll	r16,r16,r21
   185a8:	88e6d83a 	srl	r19,r17,r3
   185ac:	90c6d83a 	srl	r3,r18,r3
   185b0:	8028d43a 	srli	r20,r16,16
   185b4:	8d62983a 	sll	r17,r17,r21
   185b8:	9809883a 	mov	r4,r19
   185bc:	a00b883a 	mov	r5,r20
   185c0:	88eeb03a 	or	r23,r17,r3
   185c4:	00108180 	call	10818 <__umodsi3>
   185c8:	9809883a 	mov	r4,r19
   185cc:	a00b883a 	mov	r5,r20
   185d0:	1023883a 	mov	r17,r2
   185d4:	00108100 	call	10810 <__udivsi3>
   185d8:	85bfffcc 	andi	r22,r16,65535
   185dc:	880a943a 	slli	r5,r17,16
   185e0:	b806d43a 	srli	r3,r23,16
   185e4:	1585383a 	mul	r2,r2,r22
   185e8:	9566983a 	sll	r19,r18,r21
   185ec:	28cab03a 	or	r5,r5,r3
   185f0:	2880042e 	bgeu	r5,r2,18604 <__umoddi3+0x49c>
   185f4:	2c0b883a 	add	r5,r5,r16
   185f8:	2c000236 	bltu	r5,r16,18604 <__umoddi3+0x49c>
   185fc:	2880012e 	bgeu	r5,r2,18604 <__umoddi3+0x49c>
   18600:	2c0b883a 	add	r5,r5,r16
   18604:	28a5c83a 	sub	r18,r5,r2
   18608:	9009883a 	mov	r4,r18
   1860c:	a00b883a 	mov	r5,r20
   18610:	00108180 	call	10818 <__umodsi3>
   18614:	1023883a 	mov	r17,r2
   18618:	9009883a 	mov	r4,r18
   1861c:	a00b883a 	mov	r5,r20
   18620:	00108100 	call	10810 <__udivsi3>
   18624:	8822943a 	slli	r17,r17,16
   18628:	1585383a 	mul	r2,r2,r22
   1862c:	bdffffcc 	andi	r23,r23,65535
   18630:	8de2b03a 	or	r17,r17,r23
   18634:	8880042e 	bgeu	r17,r2,18648 <__umoddi3+0x4e0>
   18638:	8c23883a 	add	r17,r17,r16
   1863c:	8c000236 	bltu	r17,r16,18648 <__umoddi3+0x4e0>
   18640:	8880012e 	bgeu	r17,r2,18648 <__umoddi3+0x4e0>
   18644:	8c23883a 	add	r17,r17,r16
   18648:	88a3c83a 	sub	r17,r17,r2
   1864c:	003f3d06 	br	18344 <__umoddi3+0x1dc>
   18650:	15adc83a 	sub	r22,r2,r22
   18654:	2d07c83a 	sub	r3,r5,r20
   18658:	1585803a 	cmpltu	r2,r2,r22
   1865c:	1887c83a 	sub	r3,r3,r2
   18660:	20c7c83a 	sub	r3,r4,r3
   18664:	003fc506 	br	1857c <__umoddi3+0x414>
   18668:	00c00204 	movi	r3,8
   1866c:	1827883a 	mov	r19,r3
   18670:	003f0b06 	br	182a0 <__umoddi3+0x138>
   18674:	00c00604 	movi	r3,24
   18678:	1827883a 	mov	r19,r3
   1867c:	003f0806 	br	182a0 <__umoddi3+0x138>
   18680:	00800604 	movi	r2,24
   18684:	1009883a 	mov	r4,r2
   18688:	003ecf06 	br	181c8 <__umoddi3+0x60>
   1868c:	00800204 	movi	r2,8
   18690:	1007883a 	mov	r3,r2
   18694:	003f1f06 	br	18314 <__umoddi3+0x1ac>
   18698:	00800604 	movi	r2,24
   1869c:	1007883a 	mov	r3,r2
   186a0:	003f1c06 	br	18314 <__umoddi3+0x1ac>
   186a4:	00800204 	movi	r2,8
   186a8:	1009883a 	mov	r4,r2
   186ac:	003ec606 	br	181c8 <__umoddi3+0x60>
   186b0:	21bf962e 	bgeu	r4,r6,1850c <__umoddi3+0x3a4>
   186b4:	10bfff84 	addi	r2,r2,-2
   186b8:	2509883a 	add	r4,r4,r20
   186bc:	003f9406 	br	18510 <__umoddi3+0x3a8>
   186c0:	293f7e2e 	bgeu	r5,r4,184bc <__umoddi3+0x354>
   186c4:	bdffff84 	addi	r23,r23,-2
   186c8:	2d0b883a 	add	r5,r5,r20
   186cc:	003f7c06 	br	184c0 <__umoddi3+0x358>
   186d0:	1c07883a 	add	r3,r3,r16
   186d4:	003f2a06 	br	18380 <__umoddi3+0x218>
   186d8:	9005883a 	mov	r2,r18
   186dc:	a007883a 	mov	r3,r20
   186e0:	003f3e06 	br	183dc <__umoddi3+0x274>
   186e4:	90bfda36 	bltu	r18,r2,18650 <__umoddi3+0x4e8>
   186e8:	102d883a 	mov	r22,r2
   186ec:	0007883a 	mov	r3,zero
   186f0:	003fa206 	br	1857c <__umoddi3+0x414>

000186f4 <_fpadd_parts>:
   186f4:	2005883a 	mov	r2,r4
   186f8:	21000017 	ldw	r4,0(r4)
   186fc:	01c00044 	movi	r7,1
   18700:	3900622e 	bgeu	r7,r4,1888c <_fpadd_parts+0x198>
   18704:	28c00017 	ldw	r3,0(r5)
   18708:	38c05f2e 	bgeu	r7,r3,18888 <_fpadd_parts+0x194>
   1870c:	01c00104 	movi	r7,4
   18710:	21c0c626 	beq	r4,r7,18a2c <_fpadd_parts+0x338>
   18714:	19c05c26 	beq	r3,r7,18888 <_fpadd_parts+0x194>
   18718:	01c00084 	movi	r7,2
   1871c:	19c06b26 	beq	r3,r7,188cc <_fpadd_parts+0x1d8>
   18720:	21c05926 	beq	r4,r7,18888 <_fpadd_parts+0x194>
   18724:	11c00217 	ldw	r7,8(r2)
   18728:	2ac00217 	ldw	r11,8(r5)
   1872c:	13000317 	ldw	r12,12(r2)
   18730:	13400417 	ldw	r13,16(r2)
   18734:	3ac9c83a 	sub	r4,r7,r11
   18738:	2a000317 	ldw	r8,12(r5)
   1873c:	2a400417 	ldw	r9,16(r5)
   18740:	2015883a 	mov	r10,r4
   18744:	20007516 	blt	r4,zero,1891c <_fpadd_parts+0x228>
   18748:	00c00fc4 	movi	r3,63
   1874c:	1a805016 	blt	r3,r10,18890 <_fpadd_parts+0x19c>
   18750:	0100870e 	bge	zero,r4,18970 <_fpadd_parts+0x27c>
   18754:	50fff804 	addi	r3,r10,-32
   18758:	18009916 	blt	r3,zero,189c0 <_fpadd_parts+0x2cc>
   1875c:	48d6d83a 	srl	r11,r9,r3
   18760:	001d883a 	mov	r14,zero
   18764:	18009e16 	blt	r3,zero,189e0 <_fpadd_parts+0x2ec>
   18768:	01000044 	movi	r4,1
   1876c:	20c6983a 	sll	r3,r4,r3
   18770:	0015883a 	mov	r10,zero
   18774:	513fffc4 	addi	r4,r10,-1
   18778:	2295403a 	cmpgeu	r10,r4,r10
   1877c:	1a87c83a 	sub	r3,r3,r10
   18780:	1a52703a 	and	r9,r3,r9
   18784:	2210703a 	and	r8,r4,r8
   18788:	4250b03a 	or	r8,r8,r9
   1878c:	4010c03a 	cmpne	r8,r8,zero
   18790:	42d0b03a 	or	r8,r8,r11
   18794:	7013883a 	mov	r9,r14
   18798:	11000117 	ldw	r4,4(r2)
   1879c:	28800117 	ldw	r2,4(r5)
   187a0:	20804126 	beq	r4,r2,188a8 <_fpadd_parts+0x1b4>
   187a4:	20006326 	beq	r4,zero,18934 <_fpadd_parts+0x240>
   187a8:	4305c83a 	sub	r2,r8,r12
   187ac:	4091803a 	cmpltu	r8,r8,r2
   187b0:	4b47c83a 	sub	r3,r9,r13
   187b4:	1a07c83a 	sub	r3,r3,r8
   187b8:	18006316 	blt	r3,zero,18948 <_fpadd_parts+0x254>
   187bc:	30000115 	stw	zero,4(r6)
   187c0:	31c00215 	stw	r7,8(r6)
   187c4:	30800315 	stw	r2,12(r6)
   187c8:	30c00415 	stw	r3,16(r6)
   187cc:	11ffffc4 	addi	r7,r2,-1
   187d0:	388b403a 	cmpgeu	r5,r7,r2
   187d4:	194bc83a 	sub	r5,r3,r5
   187d8:	01040034 	movhi	r4,4096
   187dc:	213fffc4 	addi	r4,r4,-1
   187e0:	21401736 	bltu	r4,r5,18840 <_fpadd_parts+0x14c>
   187e4:	29008226 	beq	r5,r4,189f0 <_fpadd_parts+0x2fc>
   187e8:	31400217 	ldw	r5,8(r6)
   187ec:	02840034 	movhi	r10,4096
   187f0:	52bfffc4 	addi	r10,r10,-1
   187f4:	033fff84 	movi	r12,-2
   187f8:	297fffc4 	addi	r5,r5,-1
   187fc:	00000106 	br	18804 <_fpadd_parts+0x110>
   18800:	3a804a26 	beq	r7,r10,1892c <_fpadd_parts+0x238>
   18804:	1089883a 	add	r4,r2,r2
   18808:	2091803a 	cmpltu	r8,r4,r2
   1880c:	18c7883a 	add	r3,r3,r3
   18810:	227fffc4 	addi	r9,r4,-1
   18814:	40d1883a 	add	r8,r8,r3
   18818:	490f403a 	cmpgeu	r7,r9,r4
   1881c:	41cfc83a 	sub	r7,r8,r7
   18820:	2817883a 	mov	r11,r5
   18824:	2005883a 	mov	r2,r4
   18828:	4007883a 	mov	r3,r8
   1882c:	297fffc4 	addi	r5,r5,-1
   18830:	51fff32e 	bgeu	r10,r7,18800 <_fpadd_parts+0x10c>
   18834:	31000315 	stw	r4,12(r6)
   18838:	32000415 	stw	r8,16(r6)
   1883c:	32c00215 	stw	r11,8(r6)
   18840:	010000c4 	movi	r4,3
   18844:	31000015 	stw	r4,0(r6)
   18848:	01080034 	movhi	r4,8192
   1884c:	213fffc4 	addi	r4,r4,-1
   18850:	20c00b2e 	bgeu	r4,r3,18880 <_fpadd_parts+0x18c>
   18854:	180e97fa 	slli	r7,r3,31
   18858:	1008d07a 	srli	r4,r2,1
   1885c:	31400217 	ldw	r5,8(r6)
   18860:	1806d07a 	srli	r3,r3,1
   18864:	1080004c 	andi	r2,r2,1
   18868:	3908b03a 	or	r4,r7,r4
   1886c:	1108b03a 	or	r4,r2,r4
   18870:	29400044 	addi	r5,r5,1
   18874:	31000315 	stw	r4,12(r6)
   18878:	30c00415 	stw	r3,16(r6)
   1887c:	31400215 	stw	r5,8(r6)
   18880:	3005883a 	mov	r2,r6
   18884:	f800283a 	ret
   18888:	2805883a 	mov	r2,r5
   1888c:	f800283a 	ret
   18890:	59c01e0e 	bge	r11,r7,1890c <_fpadd_parts+0x218>
   18894:	11000117 	ldw	r4,4(r2)
   18898:	28800117 	ldw	r2,4(r5)
   1889c:	0011883a 	mov	r8,zero
   188a0:	0013883a 	mov	r9,zero
   188a4:	20bfbf1e 	bne	r4,r2,187a4 <_fpadd_parts+0xb0>
   188a8:	4305883a 	add	r2,r8,r12
   188ac:	1207803a 	cmpltu	r3,r2,r8
   188b0:	4b53883a 	add	r9,r9,r13
   188b4:	1a47883a 	add	r3,r3,r9
   188b8:	31000115 	stw	r4,4(r6)
   188bc:	31c00215 	stw	r7,8(r6)
   188c0:	30800315 	stw	r2,12(r6)
   188c4:	30c00415 	stw	r3,16(r6)
   188c8:	003fdd06 	br	18840 <_fpadd_parts+0x14c>
   188cc:	20ffef1e 	bne	r4,r3,1888c <_fpadd_parts+0x198>
   188d0:	31000015 	stw	r4,0(r6)
   188d4:	10c00117 	ldw	r3,4(r2)
   188d8:	30c00115 	stw	r3,4(r6)
   188dc:	10c00217 	ldw	r3,8(r2)
   188e0:	11000117 	ldw	r4,4(r2)
   188e4:	29400117 	ldw	r5,4(r5)
   188e8:	30c00215 	stw	r3,8(r6)
   188ec:	10c00317 	ldw	r3,12(r2)
   188f0:	2908703a 	and	r4,r5,r4
   188f4:	30c00315 	stw	r3,12(r6)
   188f8:	10c00417 	ldw	r3,16(r2)
   188fc:	31000115 	stw	r4,4(r6)
   18900:	3005883a 	mov	r2,r6
   18904:	30c00415 	stw	r3,16(r6)
   18908:	f800283a 	ret
   1890c:	580f883a 	mov	r7,r11
   18910:	0019883a 	mov	r12,zero
   18914:	001b883a 	mov	r13,zero
   18918:	003f9f06 	br	18798 <_fpadd_parts+0xa4>
   1891c:	0115c83a 	sub	r10,zero,r4
   18920:	00c00fc4 	movi	r3,63
   18924:	1abfda16 	blt	r3,r10,18890 <_fpadd_parts+0x19c>
   18928:	003f8906 	br	18750 <_fpadd_parts+0x5c>
   1892c:	627fb52e 	bgeu	r12,r9,18804 <_fpadd_parts+0x110>
   18930:	003fc006 	br	18834 <_fpadd_parts+0x140>
   18934:	6205c83a 	sub	r2,r12,r8
   18938:	6099803a 	cmpltu	r12,r12,r2
   1893c:	6a47c83a 	sub	r3,r13,r9
   18940:	1b07c83a 	sub	r3,r3,r12
   18944:	183f9d0e 	bge	r3,zero,187bc <_fpadd_parts+0xc8>
   18948:	0085c83a 	sub	r2,zero,r2
   1894c:	1008c03a 	cmpne	r4,r2,zero
   18950:	00c7c83a 	sub	r3,zero,r3
   18954:	1907c83a 	sub	r3,r3,r4
   18958:	01000044 	movi	r4,1
   1895c:	31000115 	stw	r4,4(r6)
   18960:	31c00215 	stw	r7,8(r6)
   18964:	30800315 	stw	r2,12(r6)
   18968:	30c00415 	stw	r3,16(r6)
   1896c:	003f9706 	br	187cc <_fpadd_parts+0xd8>
   18970:	203f8926 	beq	r4,zero,18798 <_fpadd_parts+0xa4>
   18974:	50fff804 	addi	r3,r10,-32
   18978:	3a8f883a 	add	r7,r7,r10
   1897c:	18002316 	blt	r3,zero,18a0c <_fpadd_parts+0x318>
   18980:	68d6d83a 	srl	r11,r13,r3
   18984:	001d883a 	mov	r14,zero
   18988:	18001c16 	blt	r3,zero,189fc <_fpadd_parts+0x308>
   1898c:	01000044 	movi	r4,1
   18990:	20c6983a 	sll	r3,r4,r3
   18994:	0015883a 	mov	r10,zero
   18998:	513fffc4 	addi	r4,r10,-1
   1899c:	2295403a 	cmpgeu	r10,r4,r10
   189a0:	1a87c83a 	sub	r3,r3,r10
   189a4:	1b5a703a 	and	r13,r3,r13
   189a8:	2318703a 	and	r12,r4,r12
   189ac:	6358b03a 	or	r12,r12,r13
   189b0:	6018c03a 	cmpne	r12,r12,zero
   189b4:	62d8b03a 	or	r12,r12,r11
   189b8:	701b883a 	mov	r13,r14
   189bc:	003f7606 	br	18798 <_fpadd_parts+0xa4>
   189c0:	4808907a 	slli	r4,r9,1
   189c4:	02c007c4 	movi	r11,31
   189c8:	5a97c83a 	sub	r11,r11,r10
   189cc:	22c8983a 	sll	r4,r4,r11
   189d0:	4296d83a 	srl	r11,r8,r10
   189d4:	4a9cd83a 	srl	r14,r9,r10
   189d8:	22d6b03a 	or	r11,r4,r11
   189dc:	003f6106 	br	18764 <_fpadd_parts+0x70>
   189e0:	00c00044 	movi	r3,1
   189e4:	1a94983a 	sll	r10,r3,r10
   189e8:	0007883a 	mov	r3,zero
   189ec:	003f6106 	br	18774 <_fpadd_parts+0x80>
   189f0:	013fff84 	movi	r4,-2
   189f4:	21ff7c2e 	bgeu	r4,r7,187e8 <_fpadd_parts+0xf4>
   189f8:	003f9106 	br	18840 <_fpadd_parts+0x14c>
   189fc:	00c00044 	movi	r3,1
   18a00:	1a94983a 	sll	r10,r3,r10
   18a04:	0007883a 	mov	r3,zero
   18a08:	003fe306 	br	18998 <_fpadd_parts+0x2a4>
   18a0c:	6816907a 	slli	r11,r13,1
   18a10:	010007c4 	movi	r4,31
   18a14:	2289c83a 	sub	r4,r4,r10
   18a18:	5908983a 	sll	r4,r11,r4
   18a1c:	6296d83a 	srl	r11,r12,r10
   18a20:	6a9cd83a 	srl	r14,r13,r10
   18a24:	22d6b03a 	or	r11,r4,r11
   18a28:	003fd706 	br	18988 <_fpadd_parts+0x294>
   18a2c:	193f971e 	bne	r3,r4,1888c <_fpadd_parts+0x198>
   18a30:	11000117 	ldw	r4,4(r2)
   18a34:	28c00117 	ldw	r3,4(r5)
   18a38:	20ff9426 	beq	r4,r3,1888c <_fpadd_parts+0x198>
   18a3c:	00800174 	movhi	r2,5
   18a40:	10a09a04 	addi	r2,r2,-32152
   18a44:	f800283a 	ret

00018a48 <__adddf3>:
   18a48:	deffec04 	addi	sp,sp,-80
   18a4c:	d9001115 	stw	r4,68(sp)
   18a50:	d9401215 	stw	r5,72(sp)
   18a54:	d9001104 	addi	r4,sp,68
   18a58:	d9400a04 	addi	r5,sp,40
   18a5c:	dfc01315 	stw	ra,76(sp)
   18a60:	d9c01015 	stw	r7,64(sp)
   18a64:	d9800f15 	stw	r6,60(sp)
   18a68:	00197640 	call	19764 <__unpack_d>
   18a6c:	d9000f04 	addi	r4,sp,60
   18a70:	d9400504 	addi	r5,sp,20
   18a74:	00197640 	call	19764 <__unpack_d>
   18a78:	d9000a04 	addi	r4,sp,40
   18a7c:	d9400504 	addi	r5,sp,20
   18a80:	d80d883a 	mov	r6,sp
   18a84:	00186f40 	call	186f4 <_fpadd_parts>
   18a88:	1009883a 	mov	r4,r2
   18a8c:	00195400 	call	19540 <__pack_d>
   18a90:	dfc01317 	ldw	ra,76(sp)
   18a94:	dec01404 	addi	sp,sp,80
   18a98:	f800283a 	ret

00018a9c <__subdf3>:
   18a9c:	deffec04 	addi	sp,sp,-80
   18aa0:	d9001115 	stw	r4,68(sp)
   18aa4:	d9401215 	stw	r5,72(sp)
   18aa8:	d9001104 	addi	r4,sp,68
   18aac:	d9400a04 	addi	r5,sp,40
   18ab0:	dfc01315 	stw	ra,76(sp)
   18ab4:	d9c01015 	stw	r7,64(sp)
   18ab8:	d9800f15 	stw	r6,60(sp)
   18abc:	00197640 	call	19764 <__unpack_d>
   18ac0:	d9000f04 	addi	r4,sp,60
   18ac4:	d9400504 	addi	r5,sp,20
   18ac8:	00197640 	call	19764 <__unpack_d>
   18acc:	d8800617 	ldw	r2,24(sp)
   18ad0:	d9000a04 	addi	r4,sp,40
   18ad4:	d9400504 	addi	r5,sp,20
   18ad8:	d80d883a 	mov	r6,sp
   18adc:	1080005c 	xori	r2,r2,1
   18ae0:	d8800615 	stw	r2,24(sp)
   18ae4:	00186f40 	call	186f4 <_fpadd_parts>
   18ae8:	1009883a 	mov	r4,r2
   18aec:	00195400 	call	19540 <__pack_d>
   18af0:	dfc01317 	ldw	ra,76(sp)
   18af4:	dec01404 	addi	sp,sp,80
   18af8:	f800283a 	ret

00018afc <__muldf3>:
   18afc:	deffe404 	addi	sp,sp,-112
   18b00:	d9001115 	stw	r4,68(sp)
   18b04:	d9401215 	stw	r5,72(sp)
   18b08:	d9001104 	addi	r4,sp,68
   18b0c:	d9400a04 	addi	r5,sp,40
   18b10:	dfc01b15 	stw	ra,108(sp)
   18b14:	d9800f15 	stw	r6,60(sp)
   18b18:	d9c01015 	stw	r7,64(sp)
   18b1c:	ddc01a15 	stw	r23,104(sp)
   18b20:	dd801915 	stw	r22,100(sp)
   18b24:	dd401815 	stw	r21,96(sp)
   18b28:	dd001715 	stw	r20,92(sp)
   18b2c:	dcc01615 	stw	r19,88(sp)
   18b30:	dc801515 	stw	r18,84(sp)
   18b34:	dc401415 	stw	r17,80(sp)
   18b38:	dc001315 	stw	r16,76(sp)
   18b3c:	00197640 	call	19764 <__unpack_d>
   18b40:	d9000f04 	addi	r4,sp,60
   18b44:	d9400504 	addi	r5,sp,20
   18b48:	00197640 	call	19764 <__unpack_d>
   18b4c:	d8c00a17 	ldw	r3,40(sp)
   18b50:	00800044 	movi	r2,1
   18b54:	10c01136 	bltu	r2,r3,18b9c <__muldf3+0xa0>
   18b58:	d8c00b17 	ldw	r3,44(sp)
   18b5c:	d8800617 	ldw	r2,24(sp)
   18b60:	d9000a04 	addi	r4,sp,40
   18b64:	1884c03a 	cmpne	r2,r3,r2
   18b68:	d8800b15 	stw	r2,44(sp)
   18b6c:	00195400 	call	19540 <__pack_d>
   18b70:	dfc01b17 	ldw	ra,108(sp)
   18b74:	ddc01a17 	ldw	r23,104(sp)
   18b78:	dd801917 	ldw	r22,100(sp)
   18b7c:	dd401817 	ldw	r21,96(sp)
   18b80:	dd001717 	ldw	r20,92(sp)
   18b84:	dcc01617 	ldw	r19,88(sp)
   18b88:	dc801517 	ldw	r18,84(sp)
   18b8c:	dc401417 	ldw	r17,80(sp)
   18b90:	dc001317 	ldw	r16,76(sp)
   18b94:	dec01c04 	addi	sp,sp,112
   18b98:	f800283a 	ret
   18b9c:	d9000517 	ldw	r4,20(sp)
   18ba0:	11000636 	bltu	r2,r4,18bbc <__muldf3+0xc0>
   18ba4:	d8800617 	ldw	r2,24(sp)
   18ba8:	d8c00b17 	ldw	r3,44(sp)
   18bac:	d9000504 	addi	r4,sp,20
   18bb0:	1884c03a 	cmpne	r2,r3,r2
   18bb4:	d8800615 	stw	r2,24(sp)
   18bb8:	003fec06 	br	18b6c <__muldf3+0x70>
   18bbc:	00800104 	movi	r2,4
   18bc0:	1880051e 	bne	r3,r2,18bd8 <__muldf3+0xdc>
   18bc4:	00800084 	movi	r2,2
   18bc8:	20bfe31e 	bne	r4,r2,18b58 <__muldf3+0x5c>
   18bcc:	01000174 	movhi	r4,5
   18bd0:	21209a04 	addi	r4,r4,-32152
   18bd4:	003fe506 	br	18b6c <__muldf3+0x70>
   18bd8:	2080031e 	bne	r4,r2,18be8 <__muldf3+0xec>
   18bdc:	00800084 	movi	r2,2
   18be0:	18bffa26 	beq	r3,r2,18bcc <__muldf3+0xd0>
   18be4:	003fef06 	br	18ba4 <__muldf3+0xa8>
   18be8:	00800084 	movi	r2,2
   18bec:	18bfda26 	beq	r3,r2,18b58 <__muldf3+0x5c>
   18bf0:	20bfec26 	beq	r4,r2,18ba4 <__muldf3+0xa8>
   18bf4:	dc000d17 	ldw	r16,52(sp)
   18bf8:	dd000817 	ldw	r20,32(sp)
   18bfc:	dc800917 	ldw	r18,36(sp)
   18c00:	8009883a 	mov	r4,r16
   18c04:	000b883a 	mov	r5,zero
   18c08:	a00d883a 	mov	r6,r20
   18c0c:	000f883a 	mov	r7,zero
   18c10:	00194340 	call	19434 <__muldi3>
   18c14:	dc400e17 	ldw	r17,56(sp)
   18c18:	9009883a 	mov	r4,r18
   18c1c:	800d883a 	mov	r6,r16
   18c20:	000b883a 	mov	r5,zero
   18c24:	000f883a 	mov	r7,zero
   18c28:	102f883a 	mov	r23,r2
   18c2c:	1827883a 	mov	r19,r3
   18c30:	00194340 	call	19434 <__muldi3>
   18c34:	900d883a 	mov	r6,r18
   18c38:	8809883a 	mov	r4,r17
   18c3c:	000b883a 	mov	r5,zero
   18c40:	000f883a 	mov	r7,zero
   18c44:	102b883a 	mov	r21,r2
   18c48:	1821883a 	mov	r16,r3
   18c4c:	00194340 	call	19434 <__muldi3>
   18c50:	8809883a 	mov	r4,r17
   18c54:	000b883a 	mov	r5,zero
   18c58:	a00d883a 	mov	r6,r20
   18c5c:	000f883a 	mov	r7,zero
   18c60:	102d883a 	mov	r22,r2
   18c64:	1825883a 	mov	r18,r3
   18c68:	00194340 	call	19434 <__muldi3>
   18c6c:	154b883a 	add	r5,r2,r21
   18c70:	2889803a 	cmpltu	r4,r5,r2
   18c74:	1c07883a 	add	r3,r3,r16
   18c78:	20c9883a 	add	r4,r4,r3
   18c7c:	24004b36 	bltu	r4,r16,18dac <__muldf3+0x2b0>
   18c80:	8100011e 	bne	r16,r4,18c88 <__muldf3+0x18c>
   18c84:	2d404936 	bltu	r5,r21,18dac <__muldf3+0x2b0>
   18c88:	0011883a 	mov	r8,zero
   18c8c:	0007883a 	mov	r3,zero
   18c90:	2ccb883a 	add	r5,r5,r19
   18c94:	b80d883a 	mov	r6,r23
   18c98:	2cc0012e 	bgeu	r5,r19,18ca0 <__muldf3+0x1a4>
   18c9c:	02000044 	movi	r8,1
   18ca0:	258f883a 	add	r7,r4,r22
   18ca4:	3909803a 	cmpltu	r4,r7,r4
   18ca8:	da400c17 	ldw	r9,48(sp)
   18cac:	2489883a 	add	r4,r4,r18
   18cb0:	d8800717 	ldw	r2,28(sp)
   18cb4:	20c9883a 	add	r4,r4,r3
   18cb8:	da800b17 	ldw	r10,44(sp)
   18cbc:	d8c00617 	ldw	r3,24(sp)
   18cc0:	3a11883a 	add	r8,r7,r8
   18cc4:	4885883a 	add	r2,r9,r2
   18cc8:	50c6c03a 	cmpne	r3,r10,r3
   18ccc:	41cf803a 	cmpltu	r7,r8,r7
   18cd0:	12400104 	addi	r9,r2,4
   18cd4:	d8c00115 	stw	r3,4(sp)
   18cd8:	3909883a 	add	r4,r7,r4
   18cdc:	da400215 	stw	r9,8(sp)
   18ce0:	03480034 	movhi	r13,8192
   18ce4:	6b7fffc4 	addi	r13,r13,-1
   18ce8:	4007883a 	mov	r3,r8
   18cec:	6900102e 	bgeu	r13,r4,18d30 <__muldf3+0x234>
   18cf0:	10800144 	addi	r2,r2,5
   18cf4:	180ed07a 	srli	r7,r3,1
   18cf8:	18c0004c 	andi	r3,r3,1
   18cfc:	201097fa 	slli	r8,r4,31
   18d00:	281697fa 	slli	r11,r5,31
   18d04:	2008d07a 	srli	r4,r4,1
   18d08:	3014d07a 	srli	r10,r6,1
   18d0c:	2812d07a 	srli	r9,r5,1
   18d10:	1019883a 	mov	r12,r2
   18d14:	18000226 	beq	r3,zero,18d20 <__muldf3+0x224>
   18d18:	5a8cb03a 	or	r6,r11,r10
   18d1c:	49600034 	orhi	r5,r9,32768
   18d20:	41c6b03a 	or	r3,r8,r7
   18d24:	10800044 	addi	r2,r2,1
   18d28:	693ff236 	bltu	r13,r4,18cf4 <__muldf3+0x1f8>
   18d2c:	db000215 	stw	r12,8(sp)
   18d30:	03440034 	movhi	r13,4096
   18d34:	6b7fffc4 	addi	r13,r13,-1
   18d38:	69001336 	bltu	r13,r4,18d88 <__muldf3+0x28c>
   18d3c:	d8800217 	ldw	r2,8(sp)
   18d40:	10bfffc4 	addi	r2,r2,-1
   18d44:	18d3883a 	add	r9,r3,r3
   18d48:	48c7803a 	cmpltu	r3,r9,r3
   18d4c:	2109883a 	add	r4,r4,r4
   18d50:	190f883a 	add	r7,r3,r4
   18d54:	3191883a 	add	r8,r6,r6
   18d58:	4197803a 	cmpltu	r11,r8,r6
   18d5c:	2955883a 	add	r10,r5,r5
   18d60:	1019883a 	mov	r12,r2
   18d64:	4807883a 	mov	r3,r9
   18d68:	3809883a 	mov	r4,r7
   18d6c:	2800010e 	bge	r5,zero,18d74 <__muldf3+0x278>
   18d70:	48c00054 	ori	r3,r9,1
   18d74:	400d883a 	mov	r6,r8
   18d78:	5a8b883a 	add	r5,r11,r10
   18d7c:	10bfffc4 	addi	r2,r2,-1
   18d80:	69fff02e 	bgeu	r13,r7,18d44 <__muldf3+0x248>
   18d84:	db000215 	stw	r12,8(sp)
   18d88:	18803fcc 	andi	r2,r3,255
   18d8c:	01c02004 	movi	r7,128
   18d90:	11c00926 	beq	r2,r7,18db8 <__muldf3+0x2bc>
   18d94:	008000c4 	movi	r2,3
   18d98:	d9000415 	stw	r4,16(sp)
   18d9c:	d8c00315 	stw	r3,12(sp)
   18da0:	d8800015 	stw	r2,0(sp)
   18da4:	d809883a 	mov	r4,sp
   18da8:	003f7006 	br	18b6c <__muldf3+0x70>
   18dac:	0011883a 	mov	r8,zero
   18db0:	00c00044 	movi	r3,1
   18db4:	003fb606 	br	18c90 <__muldf3+0x194>
   18db8:	19c0400c 	andi	r7,r3,256
   18dbc:	383ff51e 	bne	r7,zero,18d94 <__muldf3+0x298>
   18dc0:	314ab03a 	or	r5,r6,r5
   18dc4:	283ff326 	beq	r5,zero,18d94 <__muldf3+0x298>
   18dc8:	1885883a 	add	r2,r3,r2
   18dcc:	10cb803a 	cmpltu	r5,r2,r3
   18dd0:	00ffc004 	movi	r3,-256
   18dd4:	10c6703a 	and	r3,r2,r3
   18dd8:	2909883a 	add	r4,r5,r4
   18ddc:	003fed06 	br	18d94 <__muldf3+0x298>

00018de0 <__divdf3>:
   18de0:	defff104 	addi	sp,sp,-60
   18de4:	d9000c15 	stw	r4,48(sp)
   18de8:	d9400d15 	stw	r5,52(sp)
   18dec:	d9000c04 	addi	r4,sp,48
   18df0:	d9400504 	addi	r5,sp,20
   18df4:	dfc00e15 	stw	ra,56(sp)
   18df8:	d9800a15 	stw	r6,40(sp)
   18dfc:	d9c00b15 	stw	r7,44(sp)
   18e00:	00197640 	call	19764 <__unpack_d>
   18e04:	d9000a04 	addi	r4,sp,40
   18e08:	d80b883a 	mov	r5,sp
   18e0c:	00197640 	call	19764 <__unpack_d>
   18e10:	d8c00517 	ldw	r3,20(sp)
   18e14:	00800044 	movi	r2,1
   18e18:	10c00536 	bltu	r2,r3,18e30 <__divdf3+0x50>
   18e1c:	d9000504 	addi	r4,sp,20
   18e20:	00195400 	call	19540 <__pack_d>
   18e24:	dfc00e17 	ldw	ra,56(sp)
   18e28:	dec00f04 	addi	sp,sp,60
   18e2c:	f800283a 	ret
   18e30:	d9000017 	ldw	r4,0(sp)
   18e34:	11000536 	bltu	r2,r4,18e4c <__divdf3+0x6c>
   18e38:	d809883a 	mov	r4,sp
   18e3c:	00195400 	call	19540 <__pack_d>
   18e40:	dfc00e17 	ldw	ra,56(sp)
   18e44:	dec00f04 	addi	sp,sp,60
   18e48:	f800283a 	ret
   18e4c:	d9800617 	ldw	r6,24(sp)
   18e50:	d9400117 	ldw	r5,4(sp)
   18e54:	00800104 	movi	r2,4
   18e58:	314af03a 	xor	r5,r6,r5
   18e5c:	d9400615 	stw	r5,24(sp)
   18e60:	18800226 	beq	r3,r2,18e6c <__divdf3+0x8c>
   18e64:	01400084 	movi	r5,2
   18e68:	1940041e 	bne	r3,r5,18e7c <__divdf3+0x9c>
   18e6c:	193feb1e 	bne	r3,r4,18e1c <__divdf3+0x3c>
   18e70:	01000174 	movhi	r4,5
   18e74:	21209a04 	addi	r4,r4,-32152
   18e78:	003fe906 	br	18e20 <__divdf3+0x40>
   18e7c:	20803326 	beq	r4,r2,18f4c <__divdf3+0x16c>
   18e80:	21403726 	beq	r4,r5,18f60 <__divdf3+0x180>
   18e84:	d8800217 	ldw	r2,8(sp)
   18e88:	d9000717 	ldw	r4,28(sp)
   18e8c:	d8c00917 	ldw	r3,36(sp)
   18e90:	da000417 	ldw	r8,16(sp)
   18e94:	2089c83a 	sub	r4,r4,r2
   18e98:	d9000715 	stw	r4,28(sp)
   18e9c:	d8800817 	ldw	r2,32(sp)
   18ea0:	dbc00317 	ldw	r15,12(sp)
   18ea4:	1a000236 	bltu	r3,r8,18eb0 <__divdf3+0xd0>
   18ea8:	40c0081e 	bne	r8,r3,18ecc <__divdf3+0xec>
   18eac:	13c0072e 	bgeu	r2,r15,18ecc <__divdf3+0xec>
   18eb0:	108b883a 	add	r5,r2,r2
   18eb4:	288d803a 	cmpltu	r6,r5,r2
   18eb8:	18c7883a 	add	r3,r3,r3
   18ebc:	213fffc4 	addi	r4,r4,-1
   18ec0:	2805883a 	mov	r2,r5
   18ec4:	30c7883a 	add	r3,r6,r3
   18ec8:	d9000715 	stw	r4,28(sp)
   18ecc:	01400f44 	movi	r5,61
   18ed0:	000f883a 	mov	r7,zero
   18ed4:	01040034 	movhi	r4,4096
   18ed8:	0019883a 	mov	r12,zero
   18edc:	001b883a 	mov	r13,zero
   18ee0:	201697fa 	slli	r11,r4,31
   18ee4:	3814d07a 	srli	r10,r7,1
   18ee8:	297fffc4 	addi	r5,r5,-1
   18eec:	1a000936 	bltu	r3,r8,18f14 <__divdf3+0x134>
   18ef0:	13cdc83a 	sub	r6,r2,r15
   18ef4:	1193803a 	cmpltu	r9,r2,r6
   18ef8:	1a1dc83a 	sub	r14,r3,r8
   18efc:	40c0011e 	bne	r8,r3,18f04 <__divdf3+0x124>
   18f00:	13c00436 	bltu	r2,r15,18f14 <__divdf3+0x134>
   18f04:	3005883a 	mov	r2,r6
   18f08:	7247c83a 	sub	r3,r14,r9
   18f0c:	61d8b03a 	or	r12,r12,r7
   18f10:	691ab03a 	or	r13,r13,r4
   18f14:	108d883a 	add	r6,r2,r2
   18f18:	3093803a 	cmpltu	r9,r6,r2
   18f1c:	18c7883a 	add	r3,r3,r3
   18f20:	5a8eb03a 	or	r7,r11,r10
   18f24:	2008d07a 	srli	r4,r4,1
   18f28:	3005883a 	mov	r2,r6
   18f2c:	48c7883a 	add	r3,r9,r3
   18f30:	283feb1e 	bne	r5,zero,18ee0 <__divdf3+0x100>
   18f34:	61003fcc 	andi	r4,r12,255
   18f38:	01402004 	movi	r5,128
   18f3c:	21400b26 	beq	r4,r5,18f6c <__divdf3+0x18c>
   18f40:	db000815 	stw	r12,32(sp)
   18f44:	db400915 	stw	r13,36(sp)
   18f48:	003fb406 	br	18e1c <__divdf3+0x3c>
   18f4c:	d8000815 	stw	zero,32(sp)
   18f50:	d8000915 	stw	zero,36(sp)
   18f54:	d8000715 	stw	zero,28(sp)
   18f58:	d9000504 	addi	r4,sp,20
   18f5c:	003fb006 	br	18e20 <__divdf3+0x40>
   18f60:	d8800515 	stw	r2,20(sp)
   18f64:	d9000504 	addi	r4,sp,20
   18f68:	003fad06 	br	18e20 <__divdf3+0x40>
   18f6c:	6140400c 	andi	r5,r12,256
   18f70:	283ff31e 	bne	r5,zero,18f40 <__divdf3+0x160>
   18f74:	30c4b03a 	or	r2,r6,r3
   18f78:	103ff126 	beq	r2,zero,18f40 <__divdf3+0x160>
   18f7c:	6109883a 	add	r4,r12,r4
   18f80:	2305803a 	cmpltu	r2,r4,r12
   18f84:	033fc004 	movi	r12,-256
   18f88:	2318703a 	and	r12,r4,r12
   18f8c:	135b883a 	add	r13,r2,r13
   18f90:	003feb06 	br	18f40 <__divdf3+0x160>

00018f94 <__eqdf2>:
   18f94:	defff104 	addi	sp,sp,-60
   18f98:	d9000c15 	stw	r4,48(sp)
   18f9c:	d9400d15 	stw	r5,52(sp)
   18fa0:	d9000c04 	addi	r4,sp,48
   18fa4:	d9400504 	addi	r5,sp,20
   18fa8:	dfc00e15 	stw	ra,56(sp)
   18fac:	d9800a15 	stw	r6,40(sp)
   18fb0:	d9c00b15 	stw	r7,44(sp)
   18fb4:	00197640 	call	19764 <__unpack_d>
   18fb8:	d9000a04 	addi	r4,sp,40
   18fbc:	d80b883a 	mov	r5,sp
   18fc0:	00197640 	call	19764 <__unpack_d>
   18fc4:	d8c00517 	ldw	r3,20(sp)
   18fc8:	00800044 	movi	r2,1
   18fcc:	10c0052e 	bgeu	r2,r3,18fe4 <__eqdf2+0x50>
   18fd0:	d8c00017 	ldw	r3,0(sp)
   18fd4:	10c0032e 	bgeu	r2,r3,18fe4 <__eqdf2+0x50>
   18fd8:	d9000504 	addi	r4,sp,20
   18fdc:	d80b883a 	mov	r5,sp
   18fe0:	00198680 	call	19868 <__fpcmp_parts_d>
   18fe4:	dfc00e17 	ldw	ra,56(sp)
   18fe8:	dec00f04 	addi	sp,sp,60
   18fec:	f800283a 	ret

00018ff0 <__nedf2>:
   18ff0:	defff104 	addi	sp,sp,-60
   18ff4:	d9000c15 	stw	r4,48(sp)
   18ff8:	d9400d15 	stw	r5,52(sp)
   18ffc:	d9000c04 	addi	r4,sp,48
   19000:	d9400504 	addi	r5,sp,20
   19004:	dfc00e15 	stw	ra,56(sp)
   19008:	d9800a15 	stw	r6,40(sp)
   1900c:	d9c00b15 	stw	r7,44(sp)
   19010:	00197640 	call	19764 <__unpack_d>
   19014:	d9000a04 	addi	r4,sp,40
   19018:	d80b883a 	mov	r5,sp
   1901c:	00197640 	call	19764 <__unpack_d>
   19020:	d8c00517 	ldw	r3,20(sp)
   19024:	00800044 	movi	r2,1
   19028:	10c0052e 	bgeu	r2,r3,19040 <__nedf2+0x50>
   1902c:	d8c00017 	ldw	r3,0(sp)
   19030:	10c0032e 	bgeu	r2,r3,19040 <__nedf2+0x50>
   19034:	d9000504 	addi	r4,sp,20
   19038:	d80b883a 	mov	r5,sp
   1903c:	00198680 	call	19868 <__fpcmp_parts_d>
   19040:	dfc00e17 	ldw	ra,56(sp)
   19044:	dec00f04 	addi	sp,sp,60
   19048:	f800283a 	ret

0001904c <__gtdf2>:
   1904c:	defff104 	addi	sp,sp,-60
   19050:	d9000c15 	stw	r4,48(sp)
   19054:	d9400d15 	stw	r5,52(sp)
   19058:	d9000c04 	addi	r4,sp,48
   1905c:	d9400504 	addi	r5,sp,20
   19060:	dfc00e15 	stw	ra,56(sp)
   19064:	d9800a15 	stw	r6,40(sp)
   19068:	d9c00b15 	stw	r7,44(sp)
   1906c:	00197640 	call	19764 <__unpack_d>
   19070:	d9000a04 	addi	r4,sp,40
   19074:	d80b883a 	mov	r5,sp
   19078:	00197640 	call	19764 <__unpack_d>
   1907c:	d8c00517 	ldw	r3,20(sp)
   19080:	00800044 	movi	r2,1
   19084:	10c0082e 	bgeu	r2,r3,190a8 <__gtdf2+0x5c>
   19088:	d8c00017 	ldw	r3,0(sp)
   1908c:	10c0062e 	bgeu	r2,r3,190a8 <__gtdf2+0x5c>
   19090:	d9000504 	addi	r4,sp,20
   19094:	d80b883a 	mov	r5,sp
   19098:	00198680 	call	19868 <__fpcmp_parts_d>
   1909c:	dfc00e17 	ldw	ra,56(sp)
   190a0:	dec00f04 	addi	sp,sp,60
   190a4:	f800283a 	ret
   190a8:	00bfffc4 	movi	r2,-1
   190ac:	003ffb06 	br	1909c <__gtdf2+0x50>

000190b0 <__gedf2>:
   190b0:	defff104 	addi	sp,sp,-60
   190b4:	d9000c15 	stw	r4,48(sp)
   190b8:	d9400d15 	stw	r5,52(sp)
   190bc:	d9000c04 	addi	r4,sp,48
   190c0:	d9400504 	addi	r5,sp,20
   190c4:	dfc00e15 	stw	ra,56(sp)
   190c8:	d9800a15 	stw	r6,40(sp)
   190cc:	d9c00b15 	stw	r7,44(sp)
   190d0:	00197640 	call	19764 <__unpack_d>
   190d4:	d9000a04 	addi	r4,sp,40
   190d8:	d80b883a 	mov	r5,sp
   190dc:	00197640 	call	19764 <__unpack_d>
   190e0:	d8c00517 	ldw	r3,20(sp)
   190e4:	00800044 	movi	r2,1
   190e8:	10c0082e 	bgeu	r2,r3,1910c <__gedf2+0x5c>
   190ec:	d8c00017 	ldw	r3,0(sp)
   190f0:	10c0062e 	bgeu	r2,r3,1910c <__gedf2+0x5c>
   190f4:	d9000504 	addi	r4,sp,20
   190f8:	d80b883a 	mov	r5,sp
   190fc:	00198680 	call	19868 <__fpcmp_parts_d>
   19100:	dfc00e17 	ldw	ra,56(sp)
   19104:	dec00f04 	addi	sp,sp,60
   19108:	f800283a 	ret
   1910c:	00bfffc4 	movi	r2,-1
   19110:	003ffb06 	br	19100 <__gedf2+0x50>

00019114 <__ltdf2>:
   19114:	defff104 	addi	sp,sp,-60
   19118:	d9000c15 	stw	r4,48(sp)
   1911c:	d9400d15 	stw	r5,52(sp)
   19120:	d9000c04 	addi	r4,sp,48
   19124:	d9400504 	addi	r5,sp,20
   19128:	dfc00e15 	stw	ra,56(sp)
   1912c:	d9800a15 	stw	r6,40(sp)
   19130:	d9c00b15 	stw	r7,44(sp)
   19134:	00197640 	call	19764 <__unpack_d>
   19138:	d9000a04 	addi	r4,sp,40
   1913c:	d80b883a 	mov	r5,sp
   19140:	00197640 	call	19764 <__unpack_d>
   19144:	d8c00517 	ldw	r3,20(sp)
   19148:	00800044 	movi	r2,1
   1914c:	10c0052e 	bgeu	r2,r3,19164 <__ltdf2+0x50>
   19150:	d8c00017 	ldw	r3,0(sp)
   19154:	10c0032e 	bgeu	r2,r3,19164 <__ltdf2+0x50>
   19158:	d9000504 	addi	r4,sp,20
   1915c:	d80b883a 	mov	r5,sp
   19160:	00198680 	call	19868 <__fpcmp_parts_d>
   19164:	dfc00e17 	ldw	ra,56(sp)
   19168:	dec00f04 	addi	sp,sp,60
   1916c:	f800283a 	ret

00019170 <__floatsidf>:
   19170:	2004d7fa 	srli	r2,r4,31
   19174:	defff904 	addi	sp,sp,-28
   19178:	00c000c4 	movi	r3,3
   1917c:	dfc00615 	stw	ra,24(sp)
   19180:	dc000515 	stw	r16,20(sp)
   19184:	d8c00015 	stw	r3,0(sp)
   19188:	d8800115 	stw	r2,4(sp)
   1918c:	2000081e 	bne	r4,zero,191b0 <__floatsidf+0x40>
   19190:	00800084 	movi	r2,2
   19194:	d8800015 	stw	r2,0(sp)
   19198:	d809883a 	mov	r4,sp
   1919c:	00195400 	call	19540 <__pack_d>
   191a0:	dfc00617 	ldw	ra,24(sp)
   191a4:	dc000517 	ldw	r16,20(sp)
   191a8:	dec00704 	addi	sp,sp,28
   191ac:	f800283a 	ret
   191b0:	00c00f04 	movi	r3,60
   191b4:	d8c00215 	stw	r3,8(sp)
   191b8:	10000f1e 	bne	r2,zero,191f8 <__floatsidf+0x88>
   191bc:	2021883a 	mov	r16,r4
   191c0:	8009883a 	mov	r4,r16
   191c4:	00194940 	call	19494 <__clzsi2>
   191c8:	11000744 	addi	r4,r2,29
   191cc:	0100110e 	bge	zero,r4,19214 <__floatsidf+0xa4>
   191d0:	10ffff44 	addi	r3,r2,-3
   191d4:	18001216 	blt	r3,zero,19220 <__floatsidf+0xb0>
   191d8:	80c6983a 	sll	r3,r16,r3
   191dc:	0009883a 	mov	r4,zero
   191e0:	014007c4 	movi	r5,31
   191e4:	2885c83a 	sub	r2,r5,r2
   191e8:	d9000315 	stw	r4,12(sp)
   191ec:	d8c00415 	stw	r3,16(sp)
   191f0:	d8800215 	stw	r2,8(sp)
   191f4:	003fe806 	br	19198 <__floatsidf+0x28>
   191f8:	00a00034 	movhi	r2,32768
   191fc:	20800e26 	beq	r4,r2,19238 <__floatsidf+0xc8>
   19200:	0121c83a 	sub	r16,zero,r4
   19204:	8009883a 	mov	r4,r16
   19208:	00194940 	call	19494 <__clzsi2>
   1920c:	11000744 	addi	r4,r2,29
   19210:	013fef16 	blt	zero,r4,191d0 <__floatsidf+0x60>
   19214:	dc000315 	stw	r16,12(sp)
   19218:	d8000415 	stw	zero,16(sp)
   1921c:	003fde06 	br	19198 <__floatsidf+0x28>
   19220:	800ad07a 	srli	r5,r16,1
   19224:	00c007c4 	movi	r3,31
   19228:	1907c83a 	sub	r3,r3,r4
   1922c:	28c6d83a 	srl	r3,r5,r3
   19230:	8108983a 	sll	r4,r16,r4
   19234:	003fea06 	br	191e0 <__floatsidf+0x70>
   19238:	0005883a 	mov	r2,zero
   1923c:	00f07834 	movhi	r3,49632
   19240:	003fd706 	br	191a0 <__floatsidf+0x30>

00019244 <__fixdfsi>:
   19244:	defff804 	addi	sp,sp,-32
   19248:	d9000515 	stw	r4,20(sp)
   1924c:	d9400615 	stw	r5,24(sp)
   19250:	d9000504 	addi	r4,sp,20
   19254:	d80b883a 	mov	r5,sp
   19258:	dfc00715 	stw	ra,28(sp)
   1925c:	00197640 	call	19764 <__unpack_d>
   19260:	d8800017 	ldw	r2,0(sp)
   19264:	00c00084 	movi	r3,2
   19268:	10c01c26 	beq	r2,r3,192dc <__fixdfsi+0x98>
   1926c:	00c00044 	movi	r3,1
   19270:	18801a2e 	bgeu	r3,r2,192dc <__fixdfsi+0x98>
   19274:	00c00104 	movi	r3,4
   19278:	10c01126 	beq	r2,r3,192c0 <__fixdfsi+0x7c>
   1927c:	d8800217 	ldw	r2,8(sp)
   19280:	10001616 	blt	r2,zero,192dc <__fixdfsi+0x98>
   19284:	00c00784 	movi	r3,30
   19288:	18800d16 	blt	r3,r2,192c0 <__fixdfsi+0x7c>
   1928c:	00c00f04 	movi	r3,60
   19290:	1885c83a 	sub	r2,r3,r2
   19294:	10fff804 	addi	r3,r2,-32
   19298:	d9400317 	ldw	r5,12(sp)
   1929c:	d9000417 	ldw	r4,16(sp)
   192a0:	18001616 	blt	r3,zero,192fc <__fixdfsi+0xb8>
   192a4:	20c4d83a 	srl	r2,r4,r3
   192a8:	d8c00117 	ldw	r3,4(sp)
   192ac:	18000126 	beq	r3,zero,192b4 <__fixdfsi+0x70>
   192b0:	0085c83a 	sub	r2,zero,r2
   192b4:	dfc00717 	ldw	ra,28(sp)
   192b8:	dec00804 	addi	sp,sp,32
   192bc:	f800283a 	ret
   192c0:	d8800117 	ldw	r2,4(sp)
   192c4:	1000091e 	bne	r2,zero,192ec <__fixdfsi+0xa8>
   192c8:	00a00034 	movhi	r2,32768
   192cc:	10bfffc4 	addi	r2,r2,-1
   192d0:	dfc00717 	ldw	ra,28(sp)
   192d4:	dec00804 	addi	sp,sp,32
   192d8:	f800283a 	ret
   192dc:	0005883a 	mov	r2,zero
   192e0:	dfc00717 	ldw	ra,28(sp)
   192e4:	dec00804 	addi	sp,sp,32
   192e8:	f800283a 	ret
   192ec:	00a00034 	movhi	r2,32768
   192f0:	dfc00717 	ldw	ra,28(sp)
   192f4:	dec00804 	addi	sp,sp,32
   192f8:	f800283a 	ret
   192fc:	2008907a 	slli	r4,r4,1
   19300:	018007c4 	movi	r6,31
   19304:	308dc83a 	sub	r6,r6,r2
   19308:	2188983a 	sll	r4,r4,r6
   1930c:	2884d83a 	srl	r2,r5,r2
   19310:	2084b03a 	or	r2,r4,r2
   19314:	003fe406 	br	192a8 <__fixdfsi+0x64>

00019318 <__floatunsidf>:
   19318:	defff904 	addi	sp,sp,-28
   1931c:	dc000515 	stw	r16,20(sp)
   19320:	dfc00615 	stw	ra,24(sp)
   19324:	d8000115 	stw	zero,4(sp)
   19328:	2021883a 	mov	r16,r4
   1932c:	20001726 	beq	r4,zero,1938c <__floatunsidf+0x74>
   19330:	008000c4 	movi	r2,3
   19334:	d8800015 	stw	r2,0(sp)
   19338:	00800f04 	movi	r2,60
   1933c:	d8800215 	stw	r2,8(sp)
   19340:	00194940 	call	19494 <__clzsi2>
   19344:	10c00744 	addi	r3,r2,29
   19348:	18001816 	blt	r3,zero,193ac <__floatunsidf+0x94>
   1934c:	18002d26 	beq	r3,zero,19404 <__floatunsidf+0xec>
   19350:	113fff44 	addi	r4,r2,-3
   19354:	20002e16 	blt	r4,zero,19410 <__floatunsidf+0xf8>
   19358:	8108983a 	sll	r4,r16,r4
   1935c:	0021883a 	mov	r16,zero
   19360:	014007c4 	movi	r5,31
   19364:	2885c83a 	sub	r2,r5,r2
   19368:	dc000315 	stw	r16,12(sp)
   1936c:	d9000415 	stw	r4,16(sp)
   19370:	d8800215 	stw	r2,8(sp)
   19374:	d809883a 	mov	r4,sp
   19378:	00195400 	call	19540 <__pack_d>
   1937c:	dfc00617 	ldw	ra,24(sp)
   19380:	dc000517 	ldw	r16,20(sp)
   19384:	dec00704 	addi	sp,sp,28
   19388:	f800283a 	ret
   1938c:	00800084 	movi	r2,2
   19390:	d809883a 	mov	r4,sp
   19394:	d8800015 	stw	r2,0(sp)
   19398:	00195400 	call	19540 <__pack_d>
   1939c:	dfc00617 	ldw	ra,24(sp)
   193a0:	dc000517 	ldw	r16,20(sp)
   193a4:	dec00704 	addi	sp,sp,28
   193a8:	f800283a 	ret
   193ac:	00c7c83a 	sub	r3,zero,r3
   193b0:	193ff804 	addi	r4,r3,-32
   193b4:	20001c16 	blt	r4,zero,19428 <__floatunsidf+0x110>
   193b8:	000b883a 	mov	r5,zero
   193bc:	2009d7fa 	srai	r4,r4,31
   193c0:	80c6d83a 	srl	r3,r16,r3
   193c4:	297fffc4 	addi	r5,r5,-1
   193c8:	2c20703a 	and	r16,r5,r16
   193cc:	8020c03a 	cmpne	r16,r16,zero
   193d0:	1906703a 	and	r3,r3,r4
   193d4:	010007c4 	movi	r4,31
   193d8:	80c6b03a 	or	r3,r16,r3
   193dc:	2085c83a 	sub	r2,r4,r2
   193e0:	d809883a 	mov	r4,sp
   193e4:	d8c00315 	stw	r3,12(sp)
   193e8:	d8000415 	stw	zero,16(sp)
   193ec:	d8800215 	stw	r2,8(sp)
   193f0:	00195400 	call	19540 <__pack_d>
   193f4:	dfc00617 	ldw	ra,24(sp)
   193f8:	dc000517 	ldw	r16,20(sp)
   193fc:	dec00704 	addi	sp,sp,28
   19400:	f800283a 	ret
   19404:	dc000315 	stw	r16,12(sp)
   19408:	d8000415 	stw	zero,16(sp)
   1940c:	003fd906 	br	19374 <__floatunsidf+0x5c>
   19410:	800ad07a 	srli	r5,r16,1
   19414:	010007c4 	movi	r4,31
   19418:	20c9c83a 	sub	r4,r4,r3
   1941c:	2908d83a 	srl	r4,r5,r4
   19420:	80e0983a 	sll	r16,r16,r3
   19424:	003fce06 	br	19360 <__floatunsidf+0x48>
   19428:	01400044 	movi	r5,1
   1942c:	28ca983a 	sll	r5,r5,r3
   19430:	003fe206 	br	193bc <__floatunsidf+0xa4>

00019434 <__muldi3>:
   19434:	20bfffcc 	andi	r2,r4,65535
   19438:	2010d43a 	srli	r8,r4,16
   1943c:	30ffffcc 	andi	r3,r6,65535
   19440:	3014d43a 	srli	r10,r6,16
   19444:	1893383a 	mul	r9,r3,r2
   19448:	1a07383a 	mul	r3,r3,r8
   1944c:	5085383a 	mul	r2,r10,r2
   19450:	4816d43a 	srli	r11,r9,16
   19454:	5211383a 	mul	r8,r10,r8
   19458:	1885883a 	add	r2,r3,r2
   1945c:	12c5883a 	add	r2,r2,r11
   19460:	10c0022e 	bgeu	r2,r3,1946c <__muldi3+0x38>
   19464:	00c00074 	movhi	r3,1
   19468:	40d1883a 	add	r8,r8,r3
   1946c:	1014d43a 	srli	r10,r2,16
   19470:	21c9383a 	mul	r4,r4,r7
   19474:	314d383a 	mul	r6,r6,r5
   19478:	1004943a 	slli	r2,r2,16
   1947c:	4291883a 	add	r8,r8,r10
   19480:	4a7fffcc 	andi	r9,r9,65535
   19484:	2187883a 	add	r3,r4,r6
   19488:	1245883a 	add	r2,r2,r9
   1948c:	1a07883a 	add	r3,r3,r8
   19490:	f800283a 	ret

00019494 <__clzsi2>:
   19494:	00bfffd4 	movui	r2,65535
   19498:	11000b36 	bltu	r2,r4,194c8 <__clzsi2+0x34>
   1949c:	00803fc4 	movi	r2,255
   194a0:	11001e2e 	bgeu	r2,r4,1951c <__clzsi2+0x88>
   194a4:	00c00204 	movi	r3,8
   194a8:	20c8d83a 	srl	r4,r4,r3
   194ac:	00c00174 	movhi	r3,5
   194b0:	18e09f04 	addi	r3,r3,-32132
   194b4:	00800604 	movi	r2,24
   194b8:	1909883a 	add	r4,r3,r4
   194bc:	20c00003 	ldbu	r3,0(r4)
   194c0:	10c5c83a 	sub	r2,r2,r3
   194c4:	f800283a 	ret
   194c8:	00804034 	movhi	r2,256
   194cc:	10bfffc4 	addi	r2,r2,-1
   194d0:	11000936 	bltu	r2,r4,194f8 <__clzsi2+0x64>
   194d4:	00800404 	movi	r2,16
   194d8:	1007883a 	mov	r3,r2
   194dc:	20c8d83a 	srl	r4,r4,r3
   194e0:	00c00174 	movhi	r3,5
   194e4:	18e09f04 	addi	r3,r3,-32132
   194e8:	1909883a 	add	r4,r3,r4
   194ec:	20c00003 	ldbu	r3,0(r4)
   194f0:	10c5c83a 	sub	r2,r2,r3
   194f4:	f800283a 	ret
   194f8:	00c00604 	movi	r3,24
   194fc:	20c8d83a 	srl	r4,r4,r3
   19500:	00c00174 	movhi	r3,5
   19504:	18e09f04 	addi	r3,r3,-32132
   19508:	00800204 	movi	r2,8
   1950c:	1909883a 	add	r4,r3,r4
   19510:	20c00003 	ldbu	r3,0(r4)
   19514:	10c5c83a 	sub	r2,r2,r3
   19518:	f800283a 	ret
   1951c:	0007883a 	mov	r3,zero
   19520:	20c8d83a 	srl	r4,r4,r3
   19524:	00c00174 	movhi	r3,5
   19528:	18e09f04 	addi	r3,r3,-32132
   1952c:	00800804 	movi	r2,32
   19530:	1909883a 	add	r4,r3,r4
   19534:	20c00003 	ldbu	r3,0(r4)
   19538:	10c5c83a 	sub	r2,r2,r3
   1953c:	f800283a 	ret

00019540 <__pack_d>:
   19540:	20800017 	ldw	r2,0(r4)
   19544:	defff804 	addi	sp,sp,-32
   19548:	dcc00315 	stw	r19,12(sp)
   1954c:	dc800215 	stw	r18,8(sp)
   19550:	dfc00715 	stw	ra,28(sp)
   19554:	dd800615 	stw	r22,24(sp)
   19558:	dd400515 	stw	r21,20(sp)
   1955c:	dd000415 	stw	r20,16(sp)
   19560:	dc400115 	stw	r17,4(sp)
   19564:	dc000015 	stw	r16,0(sp)
   19568:	04800044 	movi	r18,1
   1956c:	24400317 	ldw	r17,12(r4)
   19570:	24000417 	ldw	r16,16(r4)
   19574:	24c00117 	ldw	r19,4(r4)
   19578:	9080422e 	bgeu	r18,r2,19684 <__pack_d+0x144>
   1957c:	00c00104 	movi	r3,4
   19580:	10c03c26 	beq	r2,r3,19674 <__pack_d+0x134>
   19584:	00c00084 	movi	r3,2
   19588:	10c01926 	beq	r2,r3,195f0 <__pack_d+0xb0>
   1958c:	8c04b03a 	or	r2,r17,r16
   19590:	10001726 	beq	r2,zero,195f0 <__pack_d+0xb0>
   19594:	21000217 	ldw	r4,8(r4)
   19598:	00bf0084 	movi	r2,-1022
   1959c:	20804016 	blt	r4,r2,196a0 <__pack_d+0x160>
   195a0:	0080ffc4 	movi	r2,1023
   195a4:	11003316 	blt	r2,r4,19674 <__pack_d+0x134>
   195a8:	88803fcc 	andi	r2,r17,255
   195ac:	00c02004 	movi	r3,128
   195b0:	10c02926 	beq	r2,r3,19658 <__pack_d+0x118>
   195b4:	88801fc4 	addi	r2,r17,127
   195b8:	1463803a 	cmpltu	r17,r2,r17
   195bc:	8c21883a 	add	r16,r17,r16
   195c0:	1023883a 	mov	r17,r2
   195c4:	00880034 	movhi	r2,8192
   195c8:	10bfffc4 	addi	r2,r2,-1
   195cc:	14001c36 	bltu	r2,r16,19640 <__pack_d+0x100>
   195d0:	2100ffc4 	addi	r4,r4,1023
   195d4:	8006963a 	slli	r3,r16,24
   195d8:	8804d23a 	srli	r2,r17,8
   195dc:	8020913a 	slli	r16,r16,4
   195e0:	2101ffcc 	andi	r4,r4,2047
   195e4:	1884b03a 	or	r2,r3,r2
   195e8:	8020d33a 	srli	r16,r16,12
   195ec:	00000306 	br	195fc <__pack_d+0xbc>
   195f0:	0009883a 	mov	r4,zero
   195f4:	0005883a 	mov	r2,zero
   195f8:	0021883a 	mov	r16,zero
   195fc:	2008953a 	slli	r4,r4,20
   19600:	982697fa 	slli	r19,r19,31
   19604:	00c00434 	movhi	r3,16
   19608:	18ffffc4 	addi	r3,r3,-1
   1960c:	80e0703a 	and	r16,r16,r3
   19610:	8106b03a 	or	r3,r16,r4
   19614:	1cc6b03a 	or	r3,r3,r19
   19618:	dfc00717 	ldw	ra,28(sp)
   1961c:	dd800617 	ldw	r22,24(sp)
   19620:	dd400517 	ldw	r21,20(sp)
   19624:	dd000417 	ldw	r20,16(sp)
   19628:	dcc00317 	ldw	r19,12(sp)
   1962c:	dc800217 	ldw	r18,8(sp)
   19630:	dc400117 	ldw	r17,4(sp)
   19634:	dc000017 	ldw	r16,0(sp)
   19638:	dec00804 	addi	sp,sp,32
   1963c:	f800283a 	ret
   19640:	800697fa 	slli	r3,r16,31
   19644:	8804d07a 	srli	r2,r17,1
   19648:	21010004 	addi	r4,r4,1024
   1964c:	8020d07a 	srli	r16,r16,1
   19650:	18a2b03a 	or	r17,r3,r2
   19654:	003fdf06 	br	195d4 <__pack_d+0x94>
   19658:	88c0400c 	andi	r3,r17,256
   1965c:	183fd926 	beq	r3,zero,195c4 <__pack_d+0x84>
   19660:	8885883a 	add	r2,r17,r2
   19664:	1463803a 	cmpltu	r17,r2,r17
   19668:	8c21883a 	add	r16,r17,r16
   1966c:	1023883a 	mov	r17,r2
   19670:	003fd406 	br	195c4 <__pack_d+0x84>
   19674:	0101ffc4 	movi	r4,2047
   19678:	0005883a 	mov	r2,zero
   1967c:	0021883a 	mov	r16,zero
   19680:	003fde06 	br	195fc <__pack_d+0xbc>
   19684:	84000234 	orhi	r16,r16,8
   19688:	00c00434 	movhi	r3,16
   1968c:	18ffffc4 	addi	r3,r3,-1
   19690:	8805883a 	mov	r2,r17
   19694:	80e0703a 	and	r16,r16,r3
   19698:	0101ffc4 	movi	r4,2047
   1969c:	003fd706 	br	195fc <__pack_d+0xbc>
   196a0:	1129c83a 	sub	r20,r2,r4
   196a4:	00800e04 	movi	r2,56
   196a8:	15002716 	blt	r2,r20,19748 <__pack_d+0x208>
   196ac:	800b883a 	mov	r5,r16
   196b0:	a00d883a 	mov	r6,r20
   196b4:	8809883a 	mov	r4,r17
   196b8:	00199380 	call	19938 <__lshrdi3>
   196bc:	9009883a 	mov	r4,r18
   196c0:	000b883a 	mov	r5,zero
   196c4:	a00d883a 	mov	r6,r20
   196c8:	102d883a 	mov	r22,r2
   196cc:	182b883a 	mov	r21,r3
   196d0:	001997c0 	call	1997c <__ashldi3>
   196d4:	1009003a 	cmpeq	r4,r2,zero
   196d8:	1907c83a 	sub	r3,r3,r4
   196dc:	10bfffc4 	addi	r2,r2,-1
   196e0:	1c20703a 	and	r16,r3,r16
   196e4:	1444703a 	and	r2,r2,r17
   196e8:	1404b03a 	or	r2,r2,r16
   196ec:	1004c03a 	cmpne	r2,r2,zero
   196f0:	1584b03a 	or	r2,r2,r22
   196f4:	11003fcc 	andi	r4,r2,255
   196f8:	01402004 	movi	r5,128
   196fc:	a807883a 	mov	r3,r21
   19700:	2140131e 	bne	r4,r5,19750 <__pack_d+0x210>
   19704:	1140400c 	andi	r5,r2,256
   19708:	28000426 	beq	r5,zero,1971c <__pack_d+0x1dc>
   1970c:	1109883a 	add	r4,r2,r4
   19710:	2085803a 	cmpltu	r2,r4,r2
   19714:	1547883a 	add	r3,r2,r21
   19718:	2005883a 	mov	r2,r4
   1971c:	1808963a 	slli	r4,r3,24
   19720:	1004d23a 	srli	r2,r2,8
   19724:	1820913a 	slli	r16,r3,4
   19728:	01440034 	movhi	r5,4096
   1972c:	297fffc4 	addi	r5,r5,-1
   19730:	2084b03a 	or	r2,r4,r2
   19734:	8020d33a 	srli	r16,r16,12
   19738:	01000044 	movi	r4,1
   1973c:	28ffaf36 	bltu	r5,r3,195fc <__pack_d+0xbc>
   19740:	0009883a 	mov	r4,zero
   19744:	003fad06 	br	195fc <__pack_d+0xbc>
   19748:	0005883a 	mov	r2,zero
   1974c:	0007883a 	mov	r3,zero
   19750:	11001fc4 	addi	r4,r2,127
   19754:	2085803a 	cmpltu	r2,r4,r2
   19758:	10c7883a 	add	r3,r2,r3
   1975c:	2005883a 	mov	r2,r4
   19760:	003fee06 	br	1971c <__pack_d+0x1dc>

00019764 <__unpack_d>:
   19764:	21800117 	ldw	r6,4(r4)
   19768:	20c00017 	ldw	r3,0(r4)
   1976c:	3004d7fa 	srli	r2,r6,31
   19770:	3008d53a 	srli	r4,r6,20
   19774:	28800115 	stw	r2,4(r5)
   19778:	2101ffcc 	andi	r4,r4,2047
   1977c:	00800434 	movhi	r2,16
   19780:	10bfffc4 	addi	r2,r2,-1
   19784:	3084703a 	and	r2,r6,r2
   19788:	20001a1e 	bne	r4,zero,197f4 <__unpack_d+0x90>
   1978c:	1888b03a 	or	r4,r3,r2
   19790:	20002626 	beq	r4,zero,1982c <__unpack_d+0xc8>
   19794:	1808d63a 	srli	r4,r3,24
   19798:	1004923a 	slli	r2,r2,8
   1979c:	01bf0084 	movi	r6,-1022
   197a0:	29800215 	stw	r6,8(r5)
   197a4:	2084b03a 	or	r2,r4,r2
   197a8:	010000c4 	movi	r4,3
   197ac:	29000015 	stw	r4,0(r5)
   197b0:	02040034 	movhi	r8,4096
   197b4:	423fffc4 	addi	r8,r8,-1
   197b8:	1806923a 	slli	r3,r3,8
   197bc:	40801836 	bltu	r8,r2,19820 <__unpack_d+0xbc>
   197c0:	013f0044 	movi	r4,-1023
   197c4:	18cd883a 	add	r6,r3,r3
   197c8:	30c7803a 	cmpltu	r3,r6,r3
   197cc:	1085883a 	add	r2,r2,r2
   197d0:	1885883a 	add	r2,r3,r2
   197d4:	200f883a 	mov	r7,r4
   197d8:	3007883a 	mov	r3,r6
   197dc:	213fffc4 	addi	r4,r4,-1
   197e0:	40bff82e 	bgeu	r8,r2,197c4 <__unpack_d+0x60>
   197e4:	29c00215 	stw	r7,8(r5)
   197e8:	28c00315 	stw	r3,12(r5)
   197ec:	28800415 	stw	r2,16(r5)
   197f0:	f800283a 	ret
   197f4:	01c1ffc4 	movi	r7,2047
   197f8:	21c00f26 	beq	r4,r7,19838 <__unpack_d+0xd4>
   197fc:	180cd63a 	srli	r6,r3,24
   19800:	1004923a 	slli	r2,r2,8
   19804:	213f0044 	addi	r4,r4,-1023
   19808:	1806923a 	slli	r3,r3,8
   1980c:	3084b03a 	or	r2,r6,r2
   19810:	29000215 	stw	r4,8(r5)
   19814:	010000c4 	movi	r4,3
   19818:	10840034 	orhi	r2,r2,4096
   1981c:	29000015 	stw	r4,0(r5)
   19820:	28c00315 	stw	r3,12(r5)
   19824:	28800415 	stw	r2,16(r5)
   19828:	f800283a 	ret
   1982c:	00800084 	movi	r2,2
   19830:	28800015 	stw	r2,0(r5)
   19834:	f800283a 	ret
   19838:	1888b03a 	or	r4,r3,r2
   1983c:	20000526 	beq	r4,zero,19854 <__unpack_d+0xf0>
   19840:	3180022c 	andhi	r6,r6,8
   19844:	30000626 	beq	r6,zero,19860 <__unpack_d+0xfc>
   19848:	01000044 	movi	r4,1
   1984c:	29000015 	stw	r4,0(r5)
   19850:	003ff306 	br	19820 <__unpack_d+0xbc>
   19854:	00800104 	movi	r2,4
   19858:	28800015 	stw	r2,0(r5)
   1985c:	f800283a 	ret
   19860:	28000015 	stw	zero,0(r5)
   19864:	003fee06 	br	19820 <__unpack_d+0xbc>

00019868 <__fpcmp_parts_d>:
   19868:	20c00017 	ldw	r3,0(r4)
   1986c:	00800044 	movi	r2,1
   19870:	10c0142e 	bgeu	r2,r3,198c4 <__fpcmp_parts_d+0x5c>
   19874:	29800017 	ldw	r6,0(r5)
   19878:	1180122e 	bgeu	r2,r6,198c4 <__fpcmp_parts_d+0x5c>
   1987c:	01c00104 	movi	r7,4
   19880:	19c02826 	beq	r3,r7,19924 <__fpcmp_parts_d+0xbc>
   19884:	31c00926 	beq	r6,r7,198ac <__fpcmp_parts_d+0x44>
   19888:	01c00084 	movi	r7,2
   1988c:	19c00626 	beq	r3,r7,198a8 <__fpcmp_parts_d+0x40>
   19890:	31c00a26 	beq	r6,r7,198bc <__fpcmp_parts_d+0x54>
   19894:	20c00117 	ldw	r3,4(r4)
   19898:	29800117 	ldw	r6,4(r5)
   1989c:	19800b26 	beq	r3,r6,198cc <__fpcmp_parts_d+0x64>
   198a0:	1800041e 	bne	r3,zero,198b4 <__fpcmp_parts_d+0x4c>
   198a4:	f800283a 	ret
   198a8:	30c01a26 	beq	r6,r3,19914 <__fpcmp_parts_d+0xac>
   198ac:	28800117 	ldw	r2,4(r5)
   198b0:	1000041e 	bne	r2,zero,198c4 <__fpcmp_parts_d+0x5c>
   198b4:	00bfffc4 	movi	r2,-1
   198b8:	f800283a 	ret
   198bc:	20800117 	ldw	r2,4(r4)
   198c0:	103ffc1e 	bne	r2,zero,198b4 <__fpcmp_parts_d+0x4c>
   198c4:	00800044 	movi	r2,1
   198c8:	f800283a 	ret
   198cc:	21c00217 	ldw	r7,8(r4)
   198d0:	29800217 	ldw	r6,8(r5)
   198d4:	31c0020e 	bge	r6,r7,198e0 <__fpcmp_parts_d+0x78>
   198d8:	183ff61e 	bne	r3,zero,198b4 <__fpcmp_parts_d+0x4c>
   198dc:	f800283a 	ret
   198e0:	39800a16 	blt	r7,r6,1990c <__fpcmp_parts_d+0xa4>
   198e4:	20800417 	ldw	r2,16(r4)
   198e8:	29800417 	ldw	r6,16(r5)
   198ec:	21c00317 	ldw	r7,12(r4)
   198f0:	29000317 	ldw	r4,12(r5)
   198f4:	30800936 	bltu	r6,r2,1991c <__fpcmp_parts_d+0xb4>
   198f8:	1180011e 	bne	r2,r6,19900 <__fpcmp_parts_d+0x98>
   198fc:	21c00736 	bltu	r4,r7,1991c <__fpcmp_parts_d+0xb4>
   19900:	11800236 	bltu	r2,r6,1990c <__fpcmp_parts_d+0xa4>
   19904:	3080031e 	bne	r6,r2,19914 <__fpcmp_parts_d+0xac>
   19908:	3900022e 	bgeu	r7,r4,19914 <__fpcmp_parts_d+0xac>
   1990c:	183fe926 	beq	r3,zero,198b4 <__fpcmp_parts_d+0x4c>
   19910:	003fec06 	br	198c4 <__fpcmp_parts_d+0x5c>
   19914:	0005883a 	mov	r2,zero
   19918:	f800283a 	ret
   1991c:	183fe926 	beq	r3,zero,198c4 <__fpcmp_parts_d+0x5c>
   19920:	003fe406 	br	198b4 <__fpcmp_parts_d+0x4c>
   19924:	30ffe51e 	bne	r6,r3,198bc <__fpcmp_parts_d+0x54>
   19928:	28c00117 	ldw	r3,4(r5)
   1992c:	20800117 	ldw	r2,4(r4)
   19930:	1885c83a 	sub	r2,r3,r2
   19934:	f800283a 	ret

00019938 <__lshrdi3>:
   19938:	2005883a 	mov	r2,r4
   1993c:	2807883a 	mov	r3,r5
   19940:	30000826 	beq	r6,zero,19964 <__lshrdi3+0x2c>
   19944:	01000804 	movi	r4,32
   19948:	2189c83a 	sub	r4,r4,r6
   1994c:	0100060e 	bge	zero,r4,19968 <__lshrdi3+0x30>
   19950:	1184d83a 	srl	r2,r2,r6
   19954:	2908983a 	sll	r4,r5,r4
   19958:	298cd83a 	srl	r6,r5,r6
   1995c:	2084b03a 	or	r2,r4,r2
   19960:	3007883a 	mov	r3,r6
   19964:	f800283a 	ret
   19968:	0105c83a 	sub	r2,zero,r4
   1996c:	000d883a 	mov	r6,zero
   19970:	2884d83a 	srl	r2,r5,r2
   19974:	3007883a 	mov	r3,r6
   19978:	003ffa06 	br	19964 <__lshrdi3+0x2c>

0001997c <__ashldi3>:
   1997c:	2005883a 	mov	r2,r4
   19980:	2807883a 	mov	r3,r5
   19984:	30000826 	beq	r6,zero,199a8 <__ashldi3+0x2c>
   19988:	01000804 	movi	r4,32
   1998c:	2189c83a 	sub	r4,r4,r6
   19990:	0100060e 	bge	zero,r4,199ac <__ashldi3+0x30>
   19994:	1108d83a 	srl	r4,r2,r4
   19998:	2986983a 	sll	r3,r5,r6
   1999c:	118c983a 	sll	r6,r2,r6
   199a0:	20c6b03a 	or	r3,r4,r3
   199a4:	3005883a 	mov	r2,r6
   199a8:	f800283a 	ret
   199ac:	0107c83a 	sub	r3,zero,r4
   199b0:	000d883a 	mov	r6,zero
   199b4:	10c6983a 	sll	r3,r2,r3
   199b8:	3005883a 	mov	r2,r6
   199bc:	003ffa06 	br	199a8 <__ashldi3+0x2c>

000199c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   199c0:	defffe04 	addi	sp,sp,-8
   199c4:	dfc00115 	stw	ra,4(sp)
   199c8:	df000015 	stw	fp,0(sp)
   199cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   199d0:	00800174 	movhi	r2,5
   199d4:	10a77d04 	addi	r2,r2,-25100
   199d8:	10800017 	ldw	r2,0(r2)
   199dc:	10000526 	beq	r2,zero,199f4 <alt_get_errno+0x34>
   199e0:	00800174 	movhi	r2,5
   199e4:	10a77d04 	addi	r2,r2,-25100
   199e8:	10800017 	ldw	r2,0(r2)
   199ec:	103ee83a 	callr	r2
   199f0:	00000206 	br	199fc <alt_get_errno+0x3c>
   199f4:	00800174 	movhi	r2,5
   199f8:	10a78d04 	addi	r2,r2,-25036
}
   199fc:	e037883a 	mov	sp,fp
   19a00:	dfc00117 	ldw	ra,4(sp)
   19a04:	df000017 	ldw	fp,0(sp)
   19a08:	dec00204 	addi	sp,sp,8
   19a0c:	f800283a 	ret

00019a10 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19a10:	defffb04 	addi	sp,sp,-20
   19a14:	dfc00415 	stw	ra,16(sp)
   19a18:	df000315 	stw	fp,12(sp)
   19a1c:	df000304 	addi	fp,sp,12
   19a20:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19a24:	e0bfff17 	ldw	r2,-4(fp)
   19a28:	10000616 	blt	r2,zero,19a44 <close+0x34>
   19a2c:	e0bfff17 	ldw	r2,-4(fp)
   19a30:	10c00324 	muli	r3,r2,12
   19a34:	00800174 	movhi	r2,5
   19a38:	10a2fb04 	addi	r2,r2,-29716
   19a3c:	1885883a 	add	r2,r3,r2
   19a40:	00000106 	br	19a48 <close+0x38>
   19a44:	0005883a 	mov	r2,zero
   19a48:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   19a4c:	e0bffd17 	ldw	r2,-12(fp)
   19a50:	10001826 	beq	r2,zero,19ab4 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   19a54:	e0bffd17 	ldw	r2,-12(fp)
   19a58:	10800017 	ldw	r2,0(r2)
   19a5c:	10800417 	ldw	r2,16(r2)
   19a60:	10000626 	beq	r2,zero,19a7c <close+0x6c>
   19a64:	e0bffd17 	ldw	r2,-12(fp)
   19a68:	10800017 	ldw	r2,0(r2)
   19a6c:	10800417 	ldw	r2,16(r2)
   19a70:	e13ffd17 	ldw	r4,-12(fp)
   19a74:	103ee83a 	callr	r2
   19a78:	00000106 	br	19a80 <close+0x70>
   19a7c:	0005883a 	mov	r2,zero
   19a80:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   19a84:	e13fff17 	ldw	r4,-4(fp)
   19a88:	001a0f40 	call	1a0f4 <alt_release_fd>
    if (rval < 0)
   19a8c:	e0bffe17 	ldw	r2,-8(fp)
   19a90:	1000060e 	bge	r2,zero,19aac <close+0x9c>
    {
      ALT_ERRNO = -rval;
   19a94:	00199c00 	call	199c0 <alt_get_errno>
   19a98:	e0fffe17 	ldw	r3,-8(fp)
   19a9c:	00c7c83a 	sub	r3,zero,r3
   19aa0:	10c00015 	stw	r3,0(r2)
      return -1;
   19aa4:	00bfffc4 	movi	r2,-1
   19aa8:	00000606 	br	19ac4 <close+0xb4>
    }
    return 0;
   19aac:	0005883a 	mov	r2,zero
   19ab0:	00000406 	br	19ac4 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19ab4:	00199c00 	call	199c0 <alt_get_errno>
   19ab8:	00c01444 	movi	r3,81
   19abc:	10c00015 	stw	r3,0(r2)
    return -1;
   19ac0:	00bfffc4 	movi	r2,-1
  }
}
   19ac4:	e037883a 	mov	sp,fp
   19ac8:	dfc00117 	ldw	ra,4(sp)
   19acc:	df000017 	ldw	fp,0(sp)
   19ad0:	dec00204 	addi	sp,sp,8
   19ad4:	f800283a 	ret

00019ad8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19ad8:	defffc04 	addi	sp,sp,-16
   19adc:	df000315 	stw	fp,12(sp)
   19ae0:	df000304 	addi	fp,sp,12
   19ae4:	e13ffd15 	stw	r4,-12(fp)
   19ae8:	e17ffe15 	stw	r5,-8(fp)
   19aec:	e1bfff15 	stw	r6,-4(fp)
  return len;
   19af0:	e0bfff17 	ldw	r2,-4(fp)
}
   19af4:	e037883a 	mov	sp,fp
   19af8:	df000017 	ldw	fp,0(sp)
   19afc:	dec00104 	addi	sp,sp,4
   19b00:	f800283a 	ret

00019b04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19b04:	defffe04 	addi	sp,sp,-8
   19b08:	dfc00115 	stw	ra,4(sp)
   19b0c:	df000015 	stw	fp,0(sp)
   19b10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19b14:	00800174 	movhi	r2,5
   19b18:	10a77d04 	addi	r2,r2,-25100
   19b1c:	10800017 	ldw	r2,0(r2)
   19b20:	10000526 	beq	r2,zero,19b38 <alt_get_errno+0x34>
   19b24:	00800174 	movhi	r2,5
   19b28:	10a77d04 	addi	r2,r2,-25100
   19b2c:	10800017 	ldw	r2,0(r2)
   19b30:	103ee83a 	callr	r2
   19b34:	00000206 	br	19b40 <alt_get_errno+0x3c>
   19b38:	00800174 	movhi	r2,5
   19b3c:	10a78d04 	addi	r2,r2,-25036
}
   19b40:	e037883a 	mov	sp,fp
   19b44:	dfc00117 	ldw	ra,4(sp)
   19b48:	df000017 	ldw	fp,0(sp)
   19b4c:	dec00204 	addi	sp,sp,8
   19b50:	f800283a 	ret

00019b54 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19b54:	defffb04 	addi	sp,sp,-20
   19b58:	dfc00415 	stw	ra,16(sp)
   19b5c:	df000315 	stw	fp,12(sp)
   19b60:	df000304 	addi	fp,sp,12
   19b64:	e13ffe15 	stw	r4,-8(fp)
   19b68:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19b6c:	e0bffe17 	ldw	r2,-8(fp)
   19b70:	10000616 	blt	r2,zero,19b8c <fstat+0x38>
   19b74:	e0bffe17 	ldw	r2,-8(fp)
   19b78:	10c00324 	muli	r3,r2,12
   19b7c:	00800174 	movhi	r2,5
   19b80:	10a2fb04 	addi	r2,r2,-29716
   19b84:	1885883a 	add	r2,r3,r2
   19b88:	00000106 	br	19b90 <fstat+0x3c>
   19b8c:	0005883a 	mov	r2,zero
   19b90:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   19b94:	e0bffd17 	ldw	r2,-12(fp)
   19b98:	10001026 	beq	r2,zero,19bdc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   19b9c:	e0bffd17 	ldw	r2,-12(fp)
   19ba0:	10800017 	ldw	r2,0(r2)
   19ba4:	10800817 	ldw	r2,32(r2)
   19ba8:	10000726 	beq	r2,zero,19bc8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   19bac:	e0bffd17 	ldw	r2,-12(fp)
   19bb0:	10800017 	ldw	r2,0(r2)
   19bb4:	10800817 	ldw	r2,32(r2)
   19bb8:	e13ffd17 	ldw	r4,-12(fp)
   19bbc:	e17fff17 	ldw	r5,-4(fp)
   19bc0:	103ee83a 	callr	r2
   19bc4:	00000906 	br	19bec <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   19bc8:	e0bfff17 	ldw	r2,-4(fp)
   19bcc:	00c80004 	movi	r3,8192
   19bd0:	10c00115 	stw	r3,4(r2)
      return 0;
   19bd4:	0005883a 	mov	r2,zero
   19bd8:	00000406 	br	19bec <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19bdc:	0019b040 	call	19b04 <alt_get_errno>
   19be0:	00c01444 	movi	r3,81
   19be4:	10c00015 	stw	r3,0(r2)
    return -1;
   19be8:	00bfffc4 	movi	r2,-1
  }
}
   19bec:	e037883a 	mov	sp,fp
   19bf0:	dfc00117 	ldw	ra,4(sp)
   19bf4:	df000017 	ldw	fp,0(sp)
   19bf8:	dec00204 	addi	sp,sp,8
   19bfc:	f800283a 	ret

00019c00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19c00:	defffe04 	addi	sp,sp,-8
   19c04:	dfc00115 	stw	ra,4(sp)
   19c08:	df000015 	stw	fp,0(sp)
   19c0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19c10:	00800174 	movhi	r2,5
   19c14:	10a77d04 	addi	r2,r2,-25100
   19c18:	10800017 	ldw	r2,0(r2)
   19c1c:	10000526 	beq	r2,zero,19c34 <alt_get_errno+0x34>
   19c20:	00800174 	movhi	r2,5
   19c24:	10a77d04 	addi	r2,r2,-25100
   19c28:	10800017 	ldw	r2,0(r2)
   19c2c:	103ee83a 	callr	r2
   19c30:	00000206 	br	19c3c <alt_get_errno+0x3c>
   19c34:	00800174 	movhi	r2,5
   19c38:	10a78d04 	addi	r2,r2,-25036
}
   19c3c:	e037883a 	mov	sp,fp
   19c40:	dfc00117 	ldw	ra,4(sp)
   19c44:	df000017 	ldw	fp,0(sp)
   19c48:	dec00204 	addi	sp,sp,8
   19c4c:	f800283a 	ret

00019c50 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   19c50:	deffed04 	addi	sp,sp,-76
   19c54:	dfc01215 	stw	ra,72(sp)
   19c58:	df001115 	stw	fp,68(sp)
   19c5c:	df001104 	addi	fp,sp,68
   19c60:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19c64:	e0bfff17 	ldw	r2,-4(fp)
   19c68:	10000616 	blt	r2,zero,19c84 <isatty+0x34>
   19c6c:	e0bfff17 	ldw	r2,-4(fp)
   19c70:	10c00324 	muli	r3,r2,12
   19c74:	00800174 	movhi	r2,5
   19c78:	10a2fb04 	addi	r2,r2,-29716
   19c7c:	1885883a 	add	r2,r3,r2
   19c80:	00000106 	br	19c88 <isatty+0x38>
   19c84:	0005883a 	mov	r2,zero
   19c88:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   19c8c:	e0bfef17 	ldw	r2,-68(fp)
   19c90:	10000e26 	beq	r2,zero,19ccc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   19c94:	e0bfef17 	ldw	r2,-68(fp)
   19c98:	10800017 	ldw	r2,0(r2)
   19c9c:	10800817 	ldw	r2,32(r2)
   19ca0:	1000021e 	bne	r2,zero,19cac <isatty+0x5c>
    {
      return 1;
   19ca4:	00800044 	movi	r2,1
   19ca8:	00000c06 	br	19cdc <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   19cac:	e0bff004 	addi	r2,fp,-64
   19cb0:	e13fff17 	ldw	r4,-4(fp)
   19cb4:	100b883a 	mov	r5,r2
   19cb8:	0019b540 	call	19b54 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   19cbc:	e0bff117 	ldw	r2,-60(fp)
   19cc0:	10880020 	cmpeqi	r2,r2,8192
   19cc4:	10803fcc 	andi	r2,r2,255
   19cc8:	00000406 	br	19cdc <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19ccc:	0019c000 	call	19c00 <alt_get_errno>
   19cd0:	00c01444 	movi	r3,81
   19cd4:	10c00015 	stw	r3,0(r2)
    return 0;
   19cd8:	0005883a 	mov	r2,zero
  }
}
   19cdc:	e037883a 	mov	sp,fp
   19ce0:	dfc00117 	ldw	ra,4(sp)
   19ce4:	df000017 	ldw	fp,0(sp)
   19ce8:	dec00204 	addi	sp,sp,8
   19cec:	f800283a 	ret

00019cf0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   19cf0:	defffc04 	addi	sp,sp,-16
   19cf4:	df000315 	stw	fp,12(sp)
   19cf8:	df000304 	addi	fp,sp,12
   19cfc:	e13ffd15 	stw	r4,-12(fp)
   19d00:	e17ffe15 	stw	r5,-8(fp)
   19d04:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   19d08:	e0fffe17 	ldw	r3,-8(fp)
   19d0c:	e0bffd17 	ldw	r2,-12(fp)
   19d10:	18800e26 	beq	r3,r2,19d4c <alt_load_section+0x5c>
  {
    while( to != end )
   19d14:	00000a06 	br	19d40 <alt_load_section+0x50>
    {
      *to++ = *from++;
   19d18:	e0bffd17 	ldw	r2,-12(fp)
   19d1c:	10c00017 	ldw	r3,0(r2)
   19d20:	e0bffe17 	ldw	r2,-8(fp)
   19d24:	10c00015 	stw	r3,0(r2)
   19d28:	e0bffe17 	ldw	r2,-8(fp)
   19d2c:	10800104 	addi	r2,r2,4
   19d30:	e0bffe15 	stw	r2,-8(fp)
   19d34:	e0bffd17 	ldw	r2,-12(fp)
   19d38:	10800104 	addi	r2,r2,4
   19d3c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   19d40:	e0fffe17 	ldw	r3,-8(fp)
   19d44:	e0bfff17 	ldw	r2,-4(fp)
   19d48:	18bff31e 	bne	r3,r2,19d18 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   19d4c:	e037883a 	mov	sp,fp
   19d50:	df000017 	ldw	fp,0(sp)
   19d54:	dec00104 	addi	sp,sp,4
   19d58:	f800283a 	ret

00019d5c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   19d5c:	defffe04 	addi	sp,sp,-8
   19d60:	dfc00115 	stw	ra,4(sp)
   19d64:	df000015 	stw	fp,0(sp)
   19d68:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   19d6c:	010000b4 	movhi	r4,2
   19d70:	2130bb04 	addi	r4,r4,-15636
   19d74:	01400174 	movhi	r5,5
   19d78:	2960ec04 	addi	r5,r5,-31824
   19d7c:	01800174 	movhi	r6,5
   19d80:	31a78204 	addi	r6,r6,-25080
   19d84:	0019cf00 	call	19cf0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   19d88:	01000074 	movhi	r4,1
   19d8c:	21000804 	addi	r4,r4,32
   19d90:	01400074 	movhi	r5,1
   19d94:	29400804 	addi	r5,r5,32
   19d98:	01800074 	movhi	r6,1
   19d9c:	31806e04 	addi	r6,r6,440
   19da0:	0019cf00 	call	19cf0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   19da4:	01000174 	movhi	r4,5
   19da8:	21200004 	addi	r4,r4,-32768
   19dac:	01400174 	movhi	r5,5
   19db0:	29600004 	addi	r5,r5,-32768
   19db4:	01800174 	movhi	r6,5
   19db8:	31a0ec04 	addi	r6,r6,-31824
   19dbc:	0019cf00 	call	19cf0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   19dc0:	001b2140 	call	1b214 <alt_dcache_flush_all>
  alt_icache_flush_all();
   19dc4:	001b3d80 	call	1b3d8 <alt_icache_flush_all>
}
   19dc8:	e037883a 	mov	sp,fp
   19dcc:	dfc00117 	ldw	ra,4(sp)
   19dd0:	df000017 	ldw	fp,0(sp)
   19dd4:	dec00204 	addi	sp,sp,8
   19dd8:	f800283a 	ret

00019ddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19ddc:	defffe04 	addi	sp,sp,-8
   19de0:	dfc00115 	stw	ra,4(sp)
   19de4:	df000015 	stw	fp,0(sp)
   19de8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19dec:	00800174 	movhi	r2,5
   19df0:	10a77d04 	addi	r2,r2,-25100
   19df4:	10800017 	ldw	r2,0(r2)
   19df8:	10000526 	beq	r2,zero,19e10 <alt_get_errno+0x34>
   19dfc:	00800174 	movhi	r2,5
   19e00:	10a77d04 	addi	r2,r2,-25100
   19e04:	10800017 	ldw	r2,0(r2)
   19e08:	103ee83a 	callr	r2
   19e0c:	00000206 	br	19e18 <alt_get_errno+0x3c>
   19e10:	00800174 	movhi	r2,5
   19e14:	10a78d04 	addi	r2,r2,-25036
}
   19e18:	e037883a 	mov	sp,fp
   19e1c:	dfc00117 	ldw	ra,4(sp)
   19e20:	df000017 	ldw	fp,0(sp)
   19e24:	dec00204 	addi	sp,sp,8
   19e28:	f800283a 	ret

00019e2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   19e2c:	defff904 	addi	sp,sp,-28
   19e30:	dfc00615 	stw	ra,24(sp)
   19e34:	df000515 	stw	fp,20(sp)
   19e38:	df000504 	addi	fp,sp,20
   19e3c:	e13ffd15 	stw	r4,-12(fp)
   19e40:	e17ffe15 	stw	r5,-8(fp)
   19e44:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   19e48:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19e4c:	e0bffd17 	ldw	r2,-12(fp)
   19e50:	10000616 	blt	r2,zero,19e6c <lseek+0x40>
   19e54:	e0bffd17 	ldw	r2,-12(fp)
   19e58:	10c00324 	muli	r3,r2,12
   19e5c:	00800174 	movhi	r2,5
   19e60:	10a2fb04 	addi	r2,r2,-29716
   19e64:	1885883a 	add	r2,r3,r2
   19e68:	00000106 	br	19e70 <lseek+0x44>
   19e6c:	0005883a 	mov	r2,zero
   19e70:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   19e74:	e0bffc17 	ldw	r2,-16(fp)
   19e78:	10001026 	beq	r2,zero,19ebc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   19e7c:	e0bffc17 	ldw	r2,-16(fp)
   19e80:	10800017 	ldw	r2,0(r2)
   19e84:	10800717 	ldw	r2,28(r2)
   19e88:	10000926 	beq	r2,zero,19eb0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   19e8c:	e0bffc17 	ldw	r2,-16(fp)
   19e90:	10800017 	ldw	r2,0(r2)
   19e94:	10800717 	ldw	r2,28(r2)
   19e98:	e13ffc17 	ldw	r4,-16(fp)
   19e9c:	e17ffe17 	ldw	r5,-8(fp)
   19ea0:	e1bfff17 	ldw	r6,-4(fp)
   19ea4:	103ee83a 	callr	r2
   19ea8:	e0bffb15 	stw	r2,-20(fp)
   19eac:	00000506 	br	19ec4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   19eb0:	00bfde84 	movi	r2,-134
   19eb4:	e0bffb15 	stw	r2,-20(fp)
   19eb8:	00000206 	br	19ec4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   19ebc:	00bfebc4 	movi	r2,-81
   19ec0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   19ec4:	e0bffb17 	ldw	r2,-20(fp)
   19ec8:	1000060e 	bge	r2,zero,19ee4 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
   19ecc:	0019ddc0 	call	19ddc <alt_get_errno>
   19ed0:	e0fffb17 	ldw	r3,-20(fp)
   19ed4:	00c7c83a 	sub	r3,zero,r3
   19ed8:	10c00015 	stw	r3,0(r2)
    rc = -1;
   19edc:	00bfffc4 	movi	r2,-1
   19ee0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   19ee4:	e0bffb17 	ldw	r2,-20(fp)
}
   19ee8:	e037883a 	mov	sp,fp
   19eec:	dfc00117 	ldw	ra,4(sp)
   19ef0:	df000017 	ldw	fp,0(sp)
   19ef4:	dec00204 	addi	sp,sp,8
   19ef8:	f800283a 	ret

00019efc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   19efc:	defffd04 	addi	sp,sp,-12
   19f00:	dfc00215 	stw	ra,8(sp)
   19f04:	df000115 	stw	fp,4(sp)
   19f08:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   19f0c:	0009883a 	mov	r4,zero
   19f10:	001a3780 	call	1a378 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   19f14:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   19f18:	001a3ac0 	call	1a3ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   19f1c:	01000174 	movhi	r4,5
   19f20:	2120e204 	addi	r4,r4,-31864
   19f24:	01400174 	movhi	r5,5
   19f28:	2960e204 	addi	r5,r5,-31864
   19f2c:	01800174 	movhi	r6,5
   19f30:	31a0e204 	addi	r6,r6,-31864
   19f34:	001b7900 	call	1b790 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   19f38:	001b3200 	call	1b320 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   19f3c:	010000b4 	movhi	r4,2
   19f40:	212cdf04 	addi	r4,r4,-19588
   19f44:	001bf180 	call	1bf18 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   19f48:	d1201b17 	ldw	r4,-32660(gp)
   19f4c:	d0e01c17 	ldw	r3,-32656(gp)
   19f50:	d0a01d17 	ldw	r2,-32652(gp)
   19f54:	180b883a 	mov	r5,r3
   19f58:	100d883a 	mov	r6,r2
   19f5c:	00105ac0 	call	105ac <main>
   19f60:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   19f64:	01000044 	movi	r4,1
   19f68:	0019a100 	call	19a10 <close>
  exit (result);
   19f6c:	e13fff17 	ldw	r4,-4(fp)
   19f70:	001bf2c0 	call	1bf2c <exit>

00019f74 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   19f74:	defffe04 	addi	sp,sp,-8
   19f78:	df000115 	stw	fp,4(sp)
   19f7c:	df000104 	addi	fp,sp,4
   19f80:	e13fff15 	stw	r4,-4(fp)
}
   19f84:	e037883a 	mov	sp,fp
   19f88:	df000017 	ldw	fp,0(sp)
   19f8c:	dec00104 	addi	sp,sp,4
   19f90:	f800283a 	ret

00019f94 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   19f94:	defffe04 	addi	sp,sp,-8
   19f98:	df000115 	stw	fp,4(sp)
   19f9c:	df000104 	addi	fp,sp,4
   19fa0:	e13fff15 	stw	r4,-4(fp)
}
   19fa4:	e037883a 	mov	sp,fp
   19fa8:	df000017 	ldw	fp,0(sp)
   19fac:	dec00104 	addi	sp,sp,4
   19fb0:	f800283a 	ret

00019fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19fb4:	defffe04 	addi	sp,sp,-8
   19fb8:	dfc00115 	stw	ra,4(sp)
   19fbc:	df000015 	stw	fp,0(sp)
   19fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19fc4:	00800174 	movhi	r2,5
   19fc8:	10a77d04 	addi	r2,r2,-25100
   19fcc:	10800017 	ldw	r2,0(r2)
   19fd0:	10000526 	beq	r2,zero,19fe8 <alt_get_errno+0x34>
   19fd4:	00800174 	movhi	r2,5
   19fd8:	10a77d04 	addi	r2,r2,-25100
   19fdc:	10800017 	ldw	r2,0(r2)
   19fe0:	103ee83a 	callr	r2
   19fe4:	00000206 	br	19ff0 <alt_get_errno+0x3c>
   19fe8:	00800174 	movhi	r2,5
   19fec:	10a78d04 	addi	r2,r2,-25036
}
   19ff0:	e037883a 	mov	sp,fp
   19ff4:	dfc00117 	ldw	ra,4(sp)
   19ff8:	df000017 	ldw	fp,0(sp)
   19ffc:	dec00204 	addi	sp,sp,8
   1a000:	f800283a 	ret

0001a004 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a004:	defff904 	addi	sp,sp,-28
   1a008:	dfc00615 	stw	ra,24(sp)
   1a00c:	df000515 	stw	fp,20(sp)
   1a010:	df000504 	addi	fp,sp,20
   1a014:	e13ffd15 	stw	r4,-12(fp)
   1a018:	e17ffe15 	stw	r5,-8(fp)
   1a01c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a020:	e0bffd17 	ldw	r2,-12(fp)
   1a024:	10000616 	blt	r2,zero,1a040 <read+0x3c>
   1a028:	e0bffd17 	ldw	r2,-12(fp)
   1a02c:	10c00324 	muli	r3,r2,12
   1a030:	00800174 	movhi	r2,5
   1a034:	10a2fb04 	addi	r2,r2,-29716
   1a038:	1885883a 	add	r2,r3,r2
   1a03c:	00000106 	br	1a044 <read+0x40>
   1a040:	0005883a 	mov	r2,zero
   1a044:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a048:	e0bffb17 	ldw	r2,-20(fp)
   1a04c:	10002026 	beq	r2,zero,1a0d0 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a050:	e0bffb17 	ldw	r2,-20(fp)
   1a054:	10800217 	ldw	r2,8(r2)
   1a058:	108000cc 	andi	r2,r2,3
   1a05c:	10800060 	cmpeqi	r2,r2,1
   1a060:	1000171e 	bne	r2,zero,1a0c0 <read+0xbc>
        (fd->dev->read))
   1a064:	e0bffb17 	ldw	r2,-20(fp)
   1a068:	10800017 	ldw	r2,0(r2)
   1a06c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a070:	10001326 	beq	r2,zero,1a0c0 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a074:	e0bffb17 	ldw	r2,-20(fp)
   1a078:	10800017 	ldw	r2,0(r2)
   1a07c:	10c00517 	ldw	r3,20(r2)
   1a080:	e0bfff17 	ldw	r2,-4(fp)
   1a084:	e13ffb17 	ldw	r4,-20(fp)
   1a088:	e17ffe17 	ldw	r5,-8(fp)
   1a08c:	100d883a 	mov	r6,r2
   1a090:	183ee83a 	callr	r3
   1a094:	e0bffc15 	stw	r2,-16(fp)
   1a098:	e0bffc17 	ldw	r2,-16(fp)
   1a09c:	1000060e 	bge	r2,zero,1a0b8 <read+0xb4>
        {
          ALT_ERRNO = -rval;
   1a0a0:	0019fb40 	call	19fb4 <alt_get_errno>
   1a0a4:	e0fffc17 	ldw	r3,-16(fp)
   1a0a8:	00c7c83a 	sub	r3,zero,r3
   1a0ac:	10c00015 	stw	r3,0(r2)
          return -1;
   1a0b0:	00bfffc4 	movi	r2,-1
   1a0b4:	00000a06 	br	1a0e0 <read+0xdc>
        }
        return rval;
   1a0b8:	e0bffc17 	ldw	r2,-16(fp)
   1a0bc:	00000806 	br	1a0e0 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a0c0:	0019fb40 	call	19fb4 <alt_get_errno>
   1a0c4:	00c00344 	movi	r3,13
   1a0c8:	10c00015 	stw	r3,0(r2)
   1a0cc:	00000306 	br	1a0dc <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a0d0:	0019fb40 	call	19fb4 <alt_get_errno>
   1a0d4:	00c01444 	movi	r3,81
   1a0d8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1a0dc:	00bfffc4 	movi	r2,-1
}
   1a0e0:	e037883a 	mov	sp,fp
   1a0e4:	dfc00117 	ldw	ra,4(sp)
   1a0e8:	df000017 	ldw	fp,0(sp)
   1a0ec:	dec00204 	addi	sp,sp,8
   1a0f0:	f800283a 	ret

0001a0f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a0f4:	defffe04 	addi	sp,sp,-8
   1a0f8:	df000115 	stw	fp,4(sp)
   1a0fc:	df000104 	addi	fp,sp,4
   1a100:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a104:	e0bfff17 	ldw	r2,-4(fp)
   1a108:	108000d0 	cmplti	r2,r2,3
   1a10c:	10000d1e 	bne	r2,zero,1a144 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a110:	00c00174 	movhi	r3,5
   1a114:	18e2fb04 	addi	r3,r3,-29716
   1a118:	e0bfff17 	ldw	r2,-4(fp)
   1a11c:	10800324 	muli	r2,r2,12
   1a120:	1885883a 	add	r2,r3,r2
   1a124:	10800204 	addi	r2,r2,8
   1a128:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1a12c:	00c00174 	movhi	r3,5
   1a130:	18e2fb04 	addi	r3,r3,-29716
   1a134:	e0bfff17 	ldw	r2,-4(fp)
   1a138:	10800324 	muli	r2,r2,12
   1a13c:	1885883a 	add	r2,r3,r2
   1a140:	10000015 	stw	zero,0(r2)
  }
}
   1a144:	e037883a 	mov	sp,fp
   1a148:	df000017 	ldw	fp,0(sp)
   1a14c:	dec00104 	addi	sp,sp,4
   1a150:	f800283a 	ret

0001a154 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a154:	defff904 	addi	sp,sp,-28
   1a158:	df000615 	stw	fp,24(sp)
   1a15c:	df000604 	addi	fp,sp,24
   1a160:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a164:	0005303a 	rdctl	r2,status
   1a168:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a16c:	e0fffc17 	ldw	r3,-16(fp)
   1a170:	00bfff84 	movi	r2,-2
   1a174:	1884703a 	and	r2,r3,r2
   1a178:	1001703a 	wrctl	status,r2
  
  return context;
   1a17c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a180:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a184:	d0a00b17 	ldw	r2,-32724(gp)
   1a188:	10c000c4 	addi	r3,r2,3
   1a18c:	00bfff04 	movi	r2,-4
   1a190:	1884703a 	and	r2,r3,r2
   1a194:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a198:	d0e00b17 	ldw	r3,-32724(gp)
   1a19c:	e0bfff17 	ldw	r2,-4(fp)
   1a1a0:	1885883a 	add	r2,r3,r2
   1a1a4:	00c00174 	movhi	r3,5
   1a1a8:	18c00004 	addi	r3,r3,0
   1a1ac:	1880062e 	bgeu	r3,r2,1a1c8 <sbrk+0x74>
   1a1b0:	e0bffa17 	ldw	r2,-24(fp)
   1a1b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a1b8:	e0bffd17 	ldw	r2,-12(fp)
   1a1bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a1c0:	00bfffc4 	movi	r2,-1
   1a1c4:	00000b06 	br	1a1f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1a1c8:	d0a00b17 	ldw	r2,-32724(gp)
   1a1cc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   1a1d0:	d0e00b17 	ldw	r3,-32724(gp)
   1a1d4:	e0bfff17 	ldw	r2,-4(fp)
   1a1d8:	1885883a 	add	r2,r3,r2
   1a1dc:	d0a00b15 	stw	r2,-32724(gp)
   1a1e0:	e0bffa17 	ldw	r2,-24(fp)
   1a1e4:	e0bffe15 	stw	r2,-8(fp)
   1a1e8:	e0bffe17 	ldw	r2,-8(fp)
   1a1ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a1f0:	e0bffb17 	ldw	r2,-20(fp)
} 
   1a1f4:	e037883a 	mov	sp,fp
   1a1f8:	df000017 	ldw	fp,0(sp)
   1a1fc:	dec00104 	addi	sp,sp,4
   1a200:	f800283a 	ret

0001a204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a204:	defffe04 	addi	sp,sp,-8
   1a208:	dfc00115 	stw	ra,4(sp)
   1a20c:	df000015 	stw	fp,0(sp)
   1a210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a214:	00800174 	movhi	r2,5
   1a218:	10a77d04 	addi	r2,r2,-25100
   1a21c:	10800017 	ldw	r2,0(r2)
   1a220:	10000526 	beq	r2,zero,1a238 <alt_get_errno+0x34>
   1a224:	00800174 	movhi	r2,5
   1a228:	10a77d04 	addi	r2,r2,-25100
   1a22c:	10800017 	ldw	r2,0(r2)
   1a230:	103ee83a 	callr	r2
   1a234:	00000206 	br	1a240 <alt_get_errno+0x3c>
   1a238:	00800174 	movhi	r2,5
   1a23c:	10a78d04 	addi	r2,r2,-25036
}
   1a240:	e037883a 	mov	sp,fp
   1a244:	dfc00117 	ldw	ra,4(sp)
   1a248:	df000017 	ldw	fp,0(sp)
   1a24c:	dec00204 	addi	sp,sp,8
   1a250:	f800283a 	ret

0001a254 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1a254:	defff904 	addi	sp,sp,-28
   1a258:	dfc00615 	stw	ra,24(sp)
   1a25c:	df000515 	stw	fp,20(sp)
   1a260:	df000504 	addi	fp,sp,20
   1a264:	e13ffd15 	stw	r4,-12(fp)
   1a268:	e17ffe15 	stw	r5,-8(fp)
   1a26c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a270:	e0bffd17 	ldw	r2,-12(fp)
   1a274:	10000616 	blt	r2,zero,1a290 <write+0x3c>
   1a278:	e0bffd17 	ldw	r2,-12(fp)
   1a27c:	10c00324 	muli	r3,r2,12
   1a280:	00800174 	movhi	r2,5
   1a284:	10a2fb04 	addi	r2,r2,-29716
   1a288:	1885883a 	add	r2,r3,r2
   1a28c:	00000106 	br	1a294 <write+0x40>
   1a290:	0005883a 	mov	r2,zero
   1a294:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a298:	e0bffb17 	ldw	r2,-20(fp)
   1a29c:	10001f26 	beq	r2,zero,1a31c <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1a2a0:	e0bffb17 	ldw	r2,-20(fp)
   1a2a4:	10800217 	ldw	r2,8(r2)
   1a2a8:	108000cc 	andi	r2,r2,3
   1a2ac:	10001726 	beq	r2,zero,1a30c <write+0xb8>
   1a2b0:	e0bffb17 	ldw	r2,-20(fp)
   1a2b4:	10800017 	ldw	r2,0(r2)
   1a2b8:	10800617 	ldw	r2,24(r2)
   1a2bc:	10001326 	beq	r2,zero,1a30c <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a2c0:	e0bffb17 	ldw	r2,-20(fp)
   1a2c4:	10800017 	ldw	r2,0(r2)
   1a2c8:	10c00617 	ldw	r3,24(r2)
   1a2cc:	e0bfff17 	ldw	r2,-4(fp)
   1a2d0:	e13ffb17 	ldw	r4,-20(fp)
   1a2d4:	e17ffe17 	ldw	r5,-8(fp)
   1a2d8:	100d883a 	mov	r6,r2
   1a2dc:	183ee83a 	callr	r3
   1a2e0:	e0bffc15 	stw	r2,-16(fp)
   1a2e4:	e0bffc17 	ldw	r2,-16(fp)
   1a2e8:	1000060e 	bge	r2,zero,1a304 <write+0xb0>
      {
        ALT_ERRNO = -rval;
   1a2ec:	001a2040 	call	1a204 <alt_get_errno>
   1a2f0:	e0fffc17 	ldw	r3,-16(fp)
   1a2f4:	00c7c83a 	sub	r3,zero,r3
   1a2f8:	10c00015 	stw	r3,0(r2)
        return -1;
   1a2fc:	00bfffc4 	movi	r2,-1
   1a300:	00000a06 	br	1a32c <write+0xd8>
      }
      return rval;
   1a304:	e0bffc17 	ldw	r2,-16(fp)
   1a308:	00000806 	br	1a32c <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a30c:	001a2040 	call	1a204 <alt_get_errno>
   1a310:	00c00344 	movi	r3,13
   1a314:	10c00015 	stw	r3,0(r2)
   1a318:	00000306 	br	1a328 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a31c:	001a2040 	call	1a204 <alt_get_errno>
   1a320:	00c01444 	movi	r3,81
   1a324:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1a328:	00bfffc4 	movi	r2,-1
}
   1a32c:	e037883a 	mov	sp,fp
   1a330:	dfc00117 	ldw	ra,4(sp)
   1a334:	df000017 	ldw	fp,0(sp)
   1a338:	dec00204 	addi	sp,sp,8
   1a33c:	f800283a 	ret

0001a340 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a340:	defffd04 	addi	sp,sp,-12
   1a344:	dfc00215 	stw	ra,8(sp)
   1a348:	df000115 	stw	fp,4(sp)
   1a34c:	df000104 	addi	fp,sp,4
   1a350:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a354:	e13fff17 	ldw	r4,-4(fp)
   1a358:	01400174 	movhi	r5,5
   1a35c:	29677a04 	addi	r5,r5,-25112
   1a360:	001b2800 	call	1b280 <alt_dev_llist_insert>
}
   1a364:	e037883a 	mov	sp,fp
   1a368:	dfc00117 	ldw	ra,4(sp)
   1a36c:	df000017 	ldw	fp,0(sp)
   1a370:	dec00204 	addi	sp,sp,8
   1a374:	f800283a 	ret

0001a378 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a378:	defffd04 	addi	sp,sp,-12
   1a37c:	dfc00215 	stw	ra,8(sp)
   1a380:	df000115 	stw	fp,4(sp)
   1a384:	df000104 	addi	fp,sp,4
   1a388:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   1a38c:	001bc140 	call	1bc14 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a390:	00800044 	movi	r2,1
   1a394:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a398:	e037883a 	mov	sp,fp
   1a39c:	dfc00117 	ldw	ra,4(sp)
   1a3a0:	df000017 	ldw	fp,0(sp)
   1a3a4:	dec00204 	addi	sp,sp,8
   1a3a8:	f800283a 	ret

0001a3ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a3ac:	defffe04 	addi	sp,sp,-8
   1a3b0:	dfc00115 	stw	ra,4(sp)
   1a3b4:	df000015 	stw	fp,0(sp)
   1a3b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_SCALE_TIMER_0, high_scale_timer_0);
   1a3bc:	00800174 	movhi	r2,5
   1a3c0:	10a79104 	addi	r2,r2,-25020
   1a3c4:	00c00174 	movhi	r3,5
   1a3c8:	18c40004 	addi	r3,r3,4096
   1a3cc:	10c00015 	stw	r3,0(r2)
   1a3d0:	00800174 	movhi	r2,5
   1a3d4:	10a79204 	addi	r2,r2,-25016
   1a3d8:	00c0bef4 	movhi	r3,763
   1a3dc:	18fc2004 	addi	r3,r3,-3968
   1a3e0:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1a3e4:	01000174 	movhi	r4,5
   1a3e8:	21040804 	addi	r4,r4,4128
   1a3ec:	000b883a 	mov	r5,zero
   1a3f0:	01800044 	movi	r6,1
   1a3f4:	01c0fa04 	movi	r7,1000
   1a3f8:	001af0c0 	call	1af0c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1a3fc:	01000174 	movhi	r4,5
   1a400:	21236504 	addi	r4,r4,-29292
   1a404:	000b883a 	mov	r5,zero
   1a408:	01800404 	movi	r6,16
   1a40c:	001a5980 	call	1a598 <altera_avalon_jtag_uart_init>
   1a410:	01000174 	movhi	r4,5
   1a414:	21235b04 	addi	r4,r4,-29332
   1a418:	001a3400 	call	1a340 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   1a41c:	0001883a 	nop
}
   1a420:	e037883a 	mov	sp,fp
   1a424:	dfc00117 	ldw	ra,4(sp)
   1a428:	df000017 	ldw	fp,0(sp)
   1a42c:	dec00204 	addi	sp,sp,8
   1a430:	f800283a 	ret

0001a434 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1a434:	defffa04 	addi	sp,sp,-24
   1a438:	dfc00515 	stw	ra,20(sp)
   1a43c:	df000415 	stw	fp,16(sp)
   1a440:	df000404 	addi	fp,sp,16
   1a444:	e13ffd15 	stw	r4,-12(fp)
   1a448:	e17ffe15 	stw	r5,-8(fp)
   1a44c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a450:	e0bffd17 	ldw	r2,-12(fp)
   1a454:	10800017 	ldw	r2,0(r2)
   1a458:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a45c:	e0bffc17 	ldw	r2,-16(fp)
   1a460:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1a464:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a468:	10800217 	ldw	r2,8(r2)
   1a46c:	1809883a 	mov	r4,r3
   1a470:	e17ffe17 	ldw	r5,-8(fp)
   1a474:	e1bfff17 	ldw	r6,-4(fp)
   1a478:	100f883a 	mov	r7,r2
   1a47c:	001aa5c0 	call	1aa5c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1a480:	e037883a 	mov	sp,fp
   1a484:	dfc00117 	ldw	ra,4(sp)
   1a488:	df000017 	ldw	fp,0(sp)
   1a48c:	dec00204 	addi	sp,sp,8
   1a490:	f800283a 	ret

0001a494 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1a494:	defffa04 	addi	sp,sp,-24
   1a498:	dfc00515 	stw	ra,20(sp)
   1a49c:	df000415 	stw	fp,16(sp)
   1a4a0:	df000404 	addi	fp,sp,16
   1a4a4:	e13ffd15 	stw	r4,-12(fp)
   1a4a8:	e17ffe15 	stw	r5,-8(fp)
   1a4ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a4b0:	e0bffd17 	ldw	r2,-12(fp)
   1a4b4:	10800017 	ldw	r2,0(r2)
   1a4b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a4bc:	e0bffc17 	ldw	r2,-16(fp)
   1a4c0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1a4c4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a4c8:	10800217 	ldw	r2,8(r2)
   1a4cc:	1809883a 	mov	r4,r3
   1a4d0:	e17ffe17 	ldw	r5,-8(fp)
   1a4d4:	e1bfff17 	ldw	r6,-4(fp)
   1a4d8:	100f883a 	mov	r7,r2
   1a4dc:	001ac740 	call	1ac74 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1a4e0:	e037883a 	mov	sp,fp
   1a4e4:	dfc00117 	ldw	ra,4(sp)
   1a4e8:	df000017 	ldw	fp,0(sp)
   1a4ec:	dec00204 	addi	sp,sp,8
   1a4f0:	f800283a 	ret

0001a4f4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1a4f4:	defffc04 	addi	sp,sp,-16
   1a4f8:	dfc00315 	stw	ra,12(sp)
   1a4fc:	df000215 	stw	fp,8(sp)
   1a500:	df000204 	addi	fp,sp,8
   1a504:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a508:	e0bfff17 	ldw	r2,-4(fp)
   1a50c:	10800017 	ldw	r2,0(r2)
   1a510:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1a514:	e0bffe17 	ldw	r2,-8(fp)
   1a518:	10c00a04 	addi	r3,r2,40
   1a51c:	e0bfff17 	ldw	r2,-4(fp)
   1a520:	10800217 	ldw	r2,8(r2)
   1a524:	1809883a 	mov	r4,r3
   1a528:	100b883a 	mov	r5,r2
   1a52c:	001a9000 	call	1a900 <altera_avalon_jtag_uart_close>
}
   1a530:	e037883a 	mov	sp,fp
   1a534:	dfc00117 	ldw	ra,4(sp)
   1a538:	df000017 	ldw	fp,0(sp)
   1a53c:	dec00204 	addi	sp,sp,8
   1a540:	f800283a 	ret

0001a544 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1a544:	defffa04 	addi	sp,sp,-24
   1a548:	dfc00515 	stw	ra,20(sp)
   1a54c:	df000415 	stw	fp,16(sp)
   1a550:	df000404 	addi	fp,sp,16
   1a554:	e13ffd15 	stw	r4,-12(fp)
   1a558:	e17ffe15 	stw	r5,-8(fp)
   1a55c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1a560:	e0bffd17 	ldw	r2,-12(fp)
   1a564:	10800017 	ldw	r2,0(r2)
   1a568:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1a56c:	e0bffc17 	ldw	r2,-16(fp)
   1a570:	10800a04 	addi	r2,r2,40
   1a574:	1009883a 	mov	r4,r2
   1a578:	e17ffe17 	ldw	r5,-8(fp)
   1a57c:	e1bfff17 	ldw	r6,-4(fp)
   1a580:	001a9680 	call	1a968 <altera_avalon_jtag_uart_ioctl>
}
   1a584:	e037883a 	mov	sp,fp
   1a588:	dfc00117 	ldw	ra,4(sp)
   1a58c:	df000017 	ldw	fp,0(sp)
   1a590:	dec00204 	addi	sp,sp,8
   1a594:	f800283a 	ret

0001a598 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1a598:	defffa04 	addi	sp,sp,-24
   1a59c:	dfc00515 	stw	ra,20(sp)
   1a5a0:	df000415 	stw	fp,16(sp)
   1a5a4:	df000404 	addi	fp,sp,16
   1a5a8:	e13ffd15 	stw	r4,-12(fp)
   1a5ac:	e17ffe15 	stw	r5,-8(fp)
   1a5b0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a5b4:	e0bffd17 	ldw	r2,-12(fp)
   1a5b8:	00c00044 	movi	r3,1
   1a5bc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1a5c0:	e0bffd17 	ldw	r2,-12(fp)
   1a5c4:	10800017 	ldw	r2,0(r2)
   1a5c8:	10800104 	addi	r2,r2,4
   1a5cc:	e0fffd17 	ldw	r3,-12(fp)
   1a5d0:	18c00817 	ldw	r3,32(r3)
   1a5d4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1a5d8:	e0fffe17 	ldw	r3,-8(fp)
   1a5dc:	e0bfff17 	ldw	r2,-4(fp)
   1a5e0:	d8000015 	stw	zero,0(sp)
   1a5e4:	1809883a 	mov	r4,r3
   1a5e8:	100b883a 	mov	r5,r2
   1a5ec:	018000b4 	movhi	r6,2
   1a5f0:	31a99604 	addi	r6,r6,-22952
   1a5f4:	e1fffd17 	ldw	r7,-12(fp)
   1a5f8:	001b4080 	call	1b408 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1a5fc:	e0bffd17 	ldw	r2,-12(fp)
   1a600:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1a604:	e0bffd17 	ldw	r2,-12(fp)
   1a608:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1a60c:	00800174 	movhi	r2,5
   1a610:	10a79404 	addi	r2,r2,-25008
   1a614:	10800017 	ldw	r2,0(r2)
   1a618:	1809883a 	mov	r4,r3
   1a61c:	100b883a 	mov	r5,r2
   1a620:	018000b4 	movhi	r6,2
   1a624:	31aa1704 	addi	r6,r6,-22436
   1a628:	e1fffd17 	ldw	r7,-12(fp)
   1a62c:	001b0d40 	call	1b0d4 <alt_alarm_start>
   1a630:	1000040e 	bge	r2,zero,1a644 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1a634:	e0bffd17 	ldw	r2,-12(fp)
   1a638:	00e00034 	movhi	r3,32768
   1a63c:	18ffffc4 	addi	r3,r3,-1
   1a640:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1a644:	e037883a 	mov	sp,fp
   1a648:	dfc00117 	ldw	ra,4(sp)
   1a64c:	df000017 	ldw	fp,0(sp)
   1a650:	dec00204 	addi	sp,sp,8
   1a654:	f800283a 	ret

0001a658 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1a658:	defff804 	addi	sp,sp,-32
   1a65c:	df000715 	stw	fp,28(sp)
   1a660:	df000704 	addi	fp,sp,28
   1a664:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1a668:	e0bfff17 	ldw	r2,-4(fp)
   1a66c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1a670:	e0bffb17 	ldw	r2,-20(fp)
   1a674:	10800017 	ldw	r2,0(r2)
   1a678:	e0bffc15 	stw	r2,-16(fp)
   1a67c:	00000106 	br	1a684 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   1a680:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a684:	e0bffc17 	ldw	r2,-16(fp)
   1a688:	10800104 	addi	r2,r2,4
   1a68c:	10800037 	ldwio	r2,0(r2)
   1a690:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1a694:	e0bffd17 	ldw	r2,-12(fp)
   1a698:	1080c00c 	andi	r2,r2,768
   1a69c:	10006a26 	beq	r2,zero,1a848 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1a6a0:	e0bffd17 	ldw	r2,-12(fp)
   1a6a4:	1080400c 	andi	r2,r2,256
   1a6a8:	10003326 	beq	r2,zero,1a778 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1a6ac:	00800074 	movhi	r2,1
   1a6b0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a6b4:	e0bffb17 	ldw	r2,-20(fp)
   1a6b8:	10800a17 	ldw	r2,40(r2)
   1a6bc:	10800044 	addi	r2,r2,1
   1a6c0:	1081ffcc 	andi	r2,r2,2047
   1a6c4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1a6c8:	e0bffb17 	ldw	r2,-20(fp)
   1a6cc:	10c00b17 	ldw	r3,44(r2)
   1a6d0:	e0bffe17 	ldw	r2,-8(fp)
   1a6d4:	18801426 	beq	r3,r2,1a728 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1a6d8:	e0bffc17 	ldw	r2,-16(fp)
   1a6dc:	10800037 	ldwio	r2,0(r2)
   1a6e0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1a6e4:	e0bff917 	ldw	r2,-28(fp)
   1a6e8:	10a0000c 	andi	r2,r2,32768
   1a6ec:	10001026 	beq	r2,zero,1a730 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1a6f0:	e0bffb17 	ldw	r2,-20(fp)
   1a6f4:	10800a17 	ldw	r2,40(r2)
   1a6f8:	e0fff917 	ldw	r3,-28(fp)
   1a6fc:	e13ffb17 	ldw	r4,-20(fp)
   1a700:	2085883a 	add	r2,r4,r2
   1a704:	10800e04 	addi	r2,r2,56
   1a708:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a70c:	e0bffb17 	ldw	r2,-20(fp)
   1a710:	10800a17 	ldw	r2,40(r2)
   1a714:	10800044 	addi	r2,r2,1
   1a718:	10c1ffcc 	andi	r3,r2,2047
   1a71c:	e0bffb17 	ldw	r2,-20(fp)
   1a720:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1a724:	003fe306 	br	1a6b4 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1a728:	0001883a 	nop
   1a72c:	00000106 	br	1a734 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1a730:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1a734:	e0bff917 	ldw	r2,-28(fp)
   1a738:	10bfffec 	andhi	r2,r2,65535
   1a73c:	10000e26 	beq	r2,zero,1a778 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a740:	e0bffb17 	ldw	r2,-20(fp)
   1a744:	10c00817 	ldw	r3,32(r2)
   1a748:	00bfff84 	movi	r2,-2
   1a74c:	1886703a 	and	r3,r3,r2
   1a750:	e0bffb17 	ldw	r2,-20(fp)
   1a754:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1a758:	e0bffc17 	ldw	r2,-16(fp)
   1a75c:	10800104 	addi	r2,r2,4
   1a760:	e0fffb17 	ldw	r3,-20(fp)
   1a764:	18c00817 	ldw	r3,32(r3)
   1a768:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a76c:	e0bffc17 	ldw	r2,-16(fp)
   1a770:	10800104 	addi	r2,r2,4
   1a774:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1a778:	e0bffd17 	ldw	r2,-12(fp)
   1a77c:	1080800c 	andi	r2,r2,512
   1a780:	103fbf26 	beq	r2,zero,1a680 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1a784:	e0bffd17 	ldw	r2,-12(fp)
   1a788:	1004d43a 	srli	r2,r2,16
   1a78c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a790:	00001406 	br	1a7e4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1a794:	e0bffc17 	ldw	r2,-16(fp)
   1a798:	e0fffb17 	ldw	r3,-20(fp)
   1a79c:	18c00d17 	ldw	r3,52(r3)
   1a7a0:	e13ffb17 	ldw	r4,-20(fp)
   1a7a4:	20c7883a 	add	r3,r4,r3
   1a7a8:	18c20e04 	addi	r3,r3,2104
   1a7ac:	18c00003 	ldbu	r3,0(r3)
   1a7b0:	18c03fcc 	andi	r3,r3,255
   1a7b4:	18c0201c 	xori	r3,r3,128
   1a7b8:	18ffe004 	addi	r3,r3,-128
   1a7bc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a7c0:	e0bffb17 	ldw	r2,-20(fp)
   1a7c4:	10800d17 	ldw	r2,52(r2)
   1a7c8:	10800044 	addi	r2,r2,1
   1a7cc:	10c1ffcc 	andi	r3,r2,2047
   1a7d0:	e0bffb17 	ldw	r2,-20(fp)
   1a7d4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1a7d8:	e0bffa17 	ldw	r2,-24(fp)
   1a7dc:	10bfffc4 	addi	r2,r2,-1
   1a7e0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a7e4:	e0bffa17 	ldw	r2,-24(fp)
   1a7e8:	10000526 	beq	r2,zero,1a800 <altera_avalon_jtag_uart_irq+0x1a8>
   1a7ec:	e0bffb17 	ldw	r2,-20(fp)
   1a7f0:	10c00d17 	ldw	r3,52(r2)
   1a7f4:	e0bffb17 	ldw	r2,-20(fp)
   1a7f8:	10800c17 	ldw	r2,48(r2)
   1a7fc:	18bfe51e 	bne	r3,r2,1a794 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1a800:	e0bffa17 	ldw	r2,-24(fp)
   1a804:	103f9e26 	beq	r2,zero,1a680 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1a808:	e0bffb17 	ldw	r2,-20(fp)
   1a80c:	10c00817 	ldw	r3,32(r2)
   1a810:	00bfff44 	movi	r2,-3
   1a814:	1886703a 	and	r3,r3,r2
   1a818:	e0bffb17 	ldw	r2,-20(fp)
   1a81c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1a820:	e0bffb17 	ldw	r2,-20(fp)
   1a824:	10800017 	ldw	r2,0(r2)
   1a828:	10800104 	addi	r2,r2,4
   1a82c:	e0fffb17 	ldw	r3,-20(fp)
   1a830:	18c00817 	ldw	r3,32(r3)
   1a834:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a838:	e0bffc17 	ldw	r2,-16(fp)
   1a83c:	10800104 	addi	r2,r2,4
   1a840:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1a844:	003f8e06 	br	1a680 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1a848:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1a84c:	e037883a 	mov	sp,fp
   1a850:	df000017 	ldw	fp,0(sp)
   1a854:	dec00104 	addi	sp,sp,4
   1a858:	f800283a 	ret

0001a85c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1a85c:	defffc04 	addi	sp,sp,-16
   1a860:	df000315 	stw	fp,12(sp)
   1a864:	df000304 	addi	fp,sp,12
   1a868:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1a86c:	e0bfff17 	ldw	r2,-4(fp)
   1a870:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1a874:	e0bffd17 	ldw	r2,-12(fp)
   1a878:	10800017 	ldw	r2,0(r2)
   1a87c:	10800104 	addi	r2,r2,4
   1a880:	10800037 	ldwio	r2,0(r2)
   1a884:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1a888:	e0bffe17 	ldw	r2,-8(fp)
   1a88c:	1081000c 	andi	r2,r2,1024
   1a890:	10000a26 	beq	r2,zero,1a8bc <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1a894:	e0bffd17 	ldw	r2,-12(fp)
   1a898:	10800017 	ldw	r2,0(r2)
   1a89c:	10800104 	addi	r2,r2,4
   1a8a0:	e0fffd17 	ldw	r3,-12(fp)
   1a8a4:	18c00817 	ldw	r3,32(r3)
   1a8a8:	18c10014 	ori	r3,r3,1024
   1a8ac:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1a8b0:	e0bffd17 	ldw	r2,-12(fp)
   1a8b4:	10000915 	stw	zero,36(r2)
   1a8b8:	00000a06 	br	1a8e4 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1a8bc:	e0bffd17 	ldw	r2,-12(fp)
   1a8c0:	10800917 	ldw	r2,36(r2)
   1a8c4:	00e00034 	movhi	r3,32768
   1a8c8:	18ffff04 	addi	r3,r3,-4
   1a8cc:	18800536 	bltu	r3,r2,1a8e4 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   1a8d0:	e0bffd17 	ldw	r2,-12(fp)
   1a8d4:	10800917 	ldw	r2,36(r2)
   1a8d8:	10c00044 	addi	r3,r2,1
   1a8dc:	e0bffd17 	ldw	r2,-12(fp)
   1a8e0:	10c00915 	stw	r3,36(r2)
   1a8e4:	00800174 	movhi	r2,5
   1a8e8:	10a79404 	addi	r2,r2,-25008
   1a8ec:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1a8f0:	e037883a 	mov	sp,fp
   1a8f4:	df000017 	ldw	fp,0(sp)
   1a8f8:	dec00104 	addi	sp,sp,4
   1a8fc:	f800283a 	ret

0001a900 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1a900:	defffd04 	addi	sp,sp,-12
   1a904:	df000215 	stw	fp,8(sp)
   1a908:	df000204 	addi	fp,sp,8
   1a90c:	e13ffe15 	stw	r4,-8(fp)
   1a910:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a914:	00000506 	br	1a92c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1a918:	e0bfff17 	ldw	r2,-4(fp)
   1a91c:	1090000c 	andi	r2,r2,16384
   1a920:	10000226 	beq	r2,zero,1a92c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1a924:	00bffd44 	movi	r2,-11
   1a928:	00000b06 	br	1a958 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a92c:	e0bffe17 	ldw	r2,-8(fp)
   1a930:	10c00d17 	ldw	r3,52(r2)
   1a934:	e0bffe17 	ldw	r2,-8(fp)
   1a938:	10800c17 	ldw	r2,48(r2)
   1a93c:	18800526 	beq	r3,r2,1a954 <altera_avalon_jtag_uart_close+0x54>
   1a940:	e0bffe17 	ldw	r2,-8(fp)
   1a944:	10c00917 	ldw	r3,36(r2)
   1a948:	e0bffe17 	ldw	r2,-8(fp)
   1a94c:	10800117 	ldw	r2,4(r2)
   1a950:	18bff136 	bltu	r3,r2,1a918 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1a954:	0005883a 	mov	r2,zero
}
   1a958:	e037883a 	mov	sp,fp
   1a95c:	df000017 	ldw	fp,0(sp)
   1a960:	dec00104 	addi	sp,sp,4
   1a964:	f800283a 	ret

0001a968 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1a968:	defffa04 	addi	sp,sp,-24
   1a96c:	df000515 	stw	fp,20(sp)
   1a970:	df000504 	addi	fp,sp,20
   1a974:	e13ffd15 	stw	r4,-12(fp)
   1a978:	e17ffe15 	stw	r5,-8(fp)
   1a97c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1a980:	00bff9c4 	movi	r2,-25
   1a984:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1a988:	e0bffe17 	ldw	r2,-8(fp)
   1a98c:	10da8060 	cmpeqi	r3,r2,27137
   1a990:	1800031e 	bne	r3,zero,1a9a0 <altera_avalon_jtag_uart_ioctl+0x38>
   1a994:	109a80a0 	cmpeqi	r2,r2,27138
   1a998:	1000181e 	bne	r2,zero,1a9fc <altera_avalon_jtag_uart_ioctl+0x94>
   1a99c:	00002606 	br	1aa38 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1a9a0:	e0bffd17 	ldw	r2,-12(fp)
   1a9a4:	10c00117 	ldw	r3,4(r2)
   1a9a8:	00a00034 	movhi	r2,32768
   1a9ac:	10bfffc4 	addi	r2,r2,-1
   1a9b0:	18802226 	beq	r3,r2,1aa3c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   1a9b4:	e0bfff17 	ldw	r2,-4(fp)
   1a9b8:	10800017 	ldw	r2,0(r2)
   1a9bc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1a9c0:	e0bffc17 	ldw	r2,-16(fp)
   1a9c4:	10800090 	cmplti	r2,r2,2
   1a9c8:	1000061e 	bne	r2,zero,1a9e4 <altera_avalon_jtag_uart_ioctl+0x7c>
   1a9cc:	e0fffc17 	ldw	r3,-16(fp)
   1a9d0:	00a00034 	movhi	r2,32768
   1a9d4:	10bfffc4 	addi	r2,r2,-1
   1a9d8:	18800226 	beq	r3,r2,1a9e4 <altera_avalon_jtag_uart_ioctl+0x7c>
   1a9dc:	e0bffc17 	ldw	r2,-16(fp)
   1a9e0:	00000206 	br	1a9ec <altera_avalon_jtag_uart_ioctl+0x84>
   1a9e4:	00a00034 	movhi	r2,32768
   1a9e8:	10bfff84 	addi	r2,r2,-2
   1a9ec:	e0fffd17 	ldw	r3,-12(fp)
   1a9f0:	18800115 	stw	r2,4(r3)
      rc = 0;
   1a9f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a9f8:	00001006 	br	1aa3c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1a9fc:	e0bffd17 	ldw	r2,-12(fp)
   1aa00:	10c00117 	ldw	r3,4(r2)
   1aa04:	00a00034 	movhi	r2,32768
   1aa08:	10bfffc4 	addi	r2,r2,-1
   1aa0c:	18800d26 	beq	r3,r2,1aa44 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1aa10:	e0bffd17 	ldw	r2,-12(fp)
   1aa14:	10c00917 	ldw	r3,36(r2)
   1aa18:	e0bffd17 	ldw	r2,-12(fp)
   1aa1c:	10800117 	ldw	r2,4(r2)
   1aa20:	1885803a 	cmpltu	r2,r3,r2
   1aa24:	10c03fcc 	andi	r3,r2,255
   1aa28:	e0bfff17 	ldw	r2,-4(fp)
   1aa2c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1aa30:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1aa34:	00000306 	br	1aa44 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   1aa38:	00000306 	br	1aa48 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1aa3c:	0001883a 	nop
   1aa40:	00000106 	br	1aa48 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1aa44:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1aa48:	e0bffb17 	ldw	r2,-20(fp)
}
   1aa4c:	e037883a 	mov	sp,fp
   1aa50:	df000017 	ldw	fp,0(sp)
   1aa54:	dec00104 	addi	sp,sp,4
   1aa58:	f800283a 	ret

0001aa5c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1aa5c:	defff304 	addi	sp,sp,-52
   1aa60:	dfc00c15 	stw	ra,48(sp)
   1aa64:	df000b15 	stw	fp,44(sp)
   1aa68:	df000b04 	addi	fp,sp,44
   1aa6c:	e13ffc15 	stw	r4,-16(fp)
   1aa70:	e17ffd15 	stw	r5,-12(fp)
   1aa74:	e1bffe15 	stw	r6,-8(fp)
   1aa78:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1aa7c:	e0bffd17 	ldw	r2,-12(fp)
   1aa80:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1aa84:	00004706 	br	1aba4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1aa88:	e0bffc17 	ldw	r2,-16(fp)
   1aa8c:	10800a17 	ldw	r2,40(r2)
   1aa90:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1aa94:	e0bffc17 	ldw	r2,-16(fp)
   1aa98:	10800b17 	ldw	r2,44(r2)
   1aa9c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1aaa0:	e0fff717 	ldw	r3,-36(fp)
   1aaa4:	e0bff817 	ldw	r2,-32(fp)
   1aaa8:	18800536 	bltu	r3,r2,1aac0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1aaac:	e0fff717 	ldw	r3,-36(fp)
   1aab0:	e0bff817 	ldw	r2,-32(fp)
   1aab4:	1885c83a 	sub	r2,r3,r2
   1aab8:	e0bff615 	stw	r2,-40(fp)
   1aabc:	00000406 	br	1aad0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1aac0:	00c20004 	movi	r3,2048
   1aac4:	e0bff817 	ldw	r2,-32(fp)
   1aac8:	1885c83a 	sub	r2,r3,r2
   1aacc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1aad0:	e0bff617 	ldw	r2,-40(fp)
   1aad4:	10001e26 	beq	r2,zero,1ab50 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1aad8:	e0fffe17 	ldw	r3,-8(fp)
   1aadc:	e0bff617 	ldw	r2,-40(fp)
   1aae0:	1880022e 	bgeu	r3,r2,1aaec <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1aae4:	e0bffe17 	ldw	r2,-8(fp)
   1aae8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1aaec:	e0bff817 	ldw	r2,-32(fp)
   1aaf0:	10800e04 	addi	r2,r2,56
   1aaf4:	e0fffc17 	ldw	r3,-16(fp)
   1aaf8:	1885883a 	add	r2,r3,r2
   1aafc:	e13ff517 	ldw	r4,-44(fp)
   1ab00:	100b883a 	mov	r5,r2
   1ab04:	e1bff617 	ldw	r6,-40(fp)
   1ab08:	0015bd40 	call	15bd4 <memcpy>
      ptr   += n;
   1ab0c:	e0fff517 	ldw	r3,-44(fp)
   1ab10:	e0bff617 	ldw	r2,-40(fp)
   1ab14:	1885883a 	add	r2,r3,r2
   1ab18:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1ab1c:	e0fffe17 	ldw	r3,-8(fp)
   1ab20:	e0bff617 	ldw	r2,-40(fp)
   1ab24:	1885c83a 	sub	r2,r3,r2
   1ab28:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ab2c:	e0fff817 	ldw	r3,-32(fp)
   1ab30:	e0bff617 	ldw	r2,-40(fp)
   1ab34:	1885883a 	add	r2,r3,r2
   1ab38:	10c1ffcc 	andi	r3,r2,2047
   1ab3c:	e0bffc17 	ldw	r2,-16(fp)
   1ab40:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1ab44:	e0bffe17 	ldw	r2,-8(fp)
   1ab48:	00bfcf16 	blt	zero,r2,1aa88 <altera_avalon_jtag_uart_read+0x2c>
   1ab4c:	00000106 	br	1ab54 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1ab50:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1ab54:	e0fff517 	ldw	r3,-44(fp)
   1ab58:	e0bffd17 	ldw	r2,-12(fp)
   1ab5c:	1880141e 	bne	r3,r2,1abb0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1ab60:	e0bfff17 	ldw	r2,-4(fp)
   1ab64:	1090000c 	andi	r2,r2,16384
   1ab68:	1000131e 	bne	r2,zero,1abb8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1ab6c:	0001883a 	nop
   1ab70:	e0bffc17 	ldw	r2,-16(fp)
   1ab74:	10c00a17 	ldw	r3,40(r2)
   1ab78:	e0bff717 	ldw	r2,-36(fp)
   1ab7c:	1880051e 	bne	r3,r2,1ab94 <altera_avalon_jtag_uart_read+0x138>
   1ab80:	e0bffc17 	ldw	r2,-16(fp)
   1ab84:	10c00917 	ldw	r3,36(r2)
   1ab88:	e0bffc17 	ldw	r2,-16(fp)
   1ab8c:	10800117 	ldw	r2,4(r2)
   1ab90:	18bff736 	bltu	r3,r2,1ab70 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1ab94:	e0bffc17 	ldw	r2,-16(fp)
   1ab98:	10c00a17 	ldw	r3,40(r2)
   1ab9c:	e0bff717 	ldw	r2,-36(fp)
   1aba0:	18800726 	beq	r3,r2,1abc0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1aba4:	e0bffe17 	ldw	r2,-8(fp)
   1aba8:	00bfb716 	blt	zero,r2,1aa88 <altera_avalon_jtag_uart_read+0x2c>
   1abac:	00000506 	br	1abc4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1abb0:	0001883a 	nop
   1abb4:	00000306 	br	1abc4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1abb8:	0001883a 	nop
   1abbc:	00000106 	br	1abc4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1abc0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1abc4:	e0fff517 	ldw	r3,-44(fp)
   1abc8:	e0bffd17 	ldw	r2,-12(fp)
   1abcc:	18801726 	beq	r3,r2,1ac2c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1abd0:	0005303a 	rdctl	r2,status
   1abd4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1abd8:	e0fffa17 	ldw	r3,-24(fp)
   1abdc:	00bfff84 	movi	r2,-2
   1abe0:	1884703a 	and	r2,r3,r2
   1abe4:	1001703a 	wrctl	status,r2
  
  return context;
   1abe8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1abec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1abf0:	e0bffc17 	ldw	r2,-16(fp)
   1abf4:	10800817 	ldw	r2,32(r2)
   1abf8:	10c00054 	ori	r3,r2,1
   1abfc:	e0bffc17 	ldw	r2,-16(fp)
   1ac00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ac04:	e0bffc17 	ldw	r2,-16(fp)
   1ac08:	10800017 	ldw	r2,0(r2)
   1ac0c:	10800104 	addi	r2,r2,4
   1ac10:	e0fffc17 	ldw	r3,-16(fp)
   1ac14:	18c00817 	ldw	r3,32(r3)
   1ac18:	10c00035 	stwio	r3,0(r2)
   1ac1c:	e0bff917 	ldw	r2,-28(fp)
   1ac20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ac24:	e0bffb17 	ldw	r2,-20(fp)
   1ac28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1ac2c:	e0fff517 	ldw	r3,-44(fp)
   1ac30:	e0bffd17 	ldw	r2,-12(fp)
   1ac34:	18800426 	beq	r3,r2,1ac48 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   1ac38:	e0fff517 	ldw	r3,-44(fp)
   1ac3c:	e0bffd17 	ldw	r2,-12(fp)
   1ac40:	1885c83a 	sub	r2,r3,r2
   1ac44:	00000606 	br	1ac60 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   1ac48:	e0bfff17 	ldw	r2,-4(fp)
   1ac4c:	1090000c 	andi	r2,r2,16384
   1ac50:	10000226 	beq	r2,zero,1ac5c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   1ac54:	00bffd44 	movi	r2,-11
   1ac58:	00000106 	br	1ac60 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   1ac5c:	00bffec4 	movi	r2,-5
}
   1ac60:	e037883a 	mov	sp,fp
   1ac64:	dfc00117 	ldw	ra,4(sp)
   1ac68:	df000017 	ldw	fp,0(sp)
   1ac6c:	dec00204 	addi	sp,sp,8
   1ac70:	f800283a 	ret

0001ac74 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1ac74:	defff304 	addi	sp,sp,-52
   1ac78:	dfc00c15 	stw	ra,48(sp)
   1ac7c:	df000b15 	stw	fp,44(sp)
   1ac80:	df000b04 	addi	fp,sp,44
   1ac84:	e13ffc15 	stw	r4,-16(fp)
   1ac88:	e17ffd15 	stw	r5,-12(fp)
   1ac8c:	e1bffe15 	stw	r6,-8(fp)
   1ac90:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1ac94:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1ac98:	e0bffd17 	ldw	r2,-12(fp)
   1ac9c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1aca0:	00003706 	br	1ad80 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1aca4:	e0bffc17 	ldw	r2,-16(fp)
   1aca8:	10800c17 	ldw	r2,48(r2)
   1acac:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   1acb0:	e0bffc17 	ldw	r2,-16(fp)
   1acb4:	10800d17 	ldw	r2,52(r2)
   1acb8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1acbc:	e0fff817 	ldw	r3,-32(fp)
   1acc0:	e0bff517 	ldw	r2,-44(fp)
   1acc4:	1880062e 	bgeu	r3,r2,1ace0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1acc8:	e0fff517 	ldw	r3,-44(fp)
   1accc:	e0bff817 	ldw	r2,-32(fp)
   1acd0:	1885c83a 	sub	r2,r3,r2
   1acd4:	10bfffc4 	addi	r2,r2,-1
   1acd8:	e0bff615 	stw	r2,-40(fp)
   1acdc:	00000b06 	br	1ad0c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1ace0:	e0bff517 	ldw	r2,-44(fp)
   1ace4:	10000526 	beq	r2,zero,1acfc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1ace8:	00c20004 	movi	r3,2048
   1acec:	e0bff817 	ldw	r2,-32(fp)
   1acf0:	1885c83a 	sub	r2,r3,r2
   1acf4:	e0bff615 	stw	r2,-40(fp)
   1acf8:	00000406 	br	1ad0c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1acfc:	00c1ffc4 	movi	r3,2047
   1ad00:	e0bff817 	ldw	r2,-32(fp)
   1ad04:	1885c83a 	sub	r2,r3,r2
   1ad08:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1ad0c:	e0bff617 	ldw	r2,-40(fp)
   1ad10:	10001e26 	beq	r2,zero,1ad8c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1ad14:	e0fffe17 	ldw	r3,-8(fp)
   1ad18:	e0bff617 	ldw	r2,-40(fp)
   1ad1c:	1880022e 	bgeu	r3,r2,1ad28 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1ad20:	e0bffe17 	ldw	r2,-8(fp)
   1ad24:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1ad28:	e0bff817 	ldw	r2,-32(fp)
   1ad2c:	10820e04 	addi	r2,r2,2104
   1ad30:	e0fffc17 	ldw	r3,-16(fp)
   1ad34:	1885883a 	add	r2,r3,r2
   1ad38:	1009883a 	mov	r4,r2
   1ad3c:	e17ffd17 	ldw	r5,-12(fp)
   1ad40:	e1bff617 	ldw	r6,-40(fp)
   1ad44:	0015bd40 	call	15bd4 <memcpy>
      ptr   += n;
   1ad48:	e0fffd17 	ldw	r3,-12(fp)
   1ad4c:	e0bff617 	ldw	r2,-40(fp)
   1ad50:	1885883a 	add	r2,r3,r2
   1ad54:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1ad58:	e0fffe17 	ldw	r3,-8(fp)
   1ad5c:	e0bff617 	ldw	r2,-40(fp)
   1ad60:	1885c83a 	sub	r2,r3,r2
   1ad64:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ad68:	e0fff817 	ldw	r3,-32(fp)
   1ad6c:	e0bff617 	ldw	r2,-40(fp)
   1ad70:	1885883a 	add	r2,r3,r2
   1ad74:	10c1ffcc 	andi	r3,r2,2047
   1ad78:	e0bffc17 	ldw	r2,-16(fp)
   1ad7c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1ad80:	e0bffe17 	ldw	r2,-8(fp)
   1ad84:	00bfc716 	blt	zero,r2,1aca4 <altera_avalon_jtag_uart_write+0x30>
   1ad88:	00000106 	br	1ad90 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1ad8c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ad90:	0005303a 	rdctl	r2,status
   1ad94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ad98:	e0fffa17 	ldw	r3,-24(fp)
   1ad9c:	00bfff84 	movi	r2,-2
   1ada0:	1884703a 	and	r2,r3,r2
   1ada4:	1001703a 	wrctl	status,r2
  
  return context;
   1ada8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1adac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1adb0:	e0bffc17 	ldw	r2,-16(fp)
   1adb4:	10800817 	ldw	r2,32(r2)
   1adb8:	10c00094 	ori	r3,r2,2
   1adbc:	e0bffc17 	ldw	r2,-16(fp)
   1adc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1adc4:	e0bffc17 	ldw	r2,-16(fp)
   1adc8:	10800017 	ldw	r2,0(r2)
   1adcc:	10800104 	addi	r2,r2,4
   1add0:	e0fffc17 	ldw	r3,-16(fp)
   1add4:	18c00817 	ldw	r3,32(r3)
   1add8:	10c00035 	stwio	r3,0(r2)
   1addc:	e0bff917 	ldw	r2,-28(fp)
   1ade0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ade4:	e0bffb17 	ldw	r2,-20(fp)
   1ade8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1adec:	e0bffe17 	ldw	r2,-8(fp)
   1adf0:	0080110e 	bge	zero,r2,1ae38 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1adf4:	e0bfff17 	ldw	r2,-4(fp)
   1adf8:	1090000c 	andi	r2,r2,16384
   1adfc:	1000111e 	bne	r2,zero,1ae44 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1ae00:	0001883a 	nop
   1ae04:	e0bffc17 	ldw	r2,-16(fp)
   1ae08:	10c00d17 	ldw	r3,52(r2)
   1ae0c:	e0bff517 	ldw	r2,-44(fp)
   1ae10:	1880051e 	bne	r3,r2,1ae28 <altera_avalon_jtag_uart_write+0x1b4>
   1ae14:	e0bffc17 	ldw	r2,-16(fp)
   1ae18:	10c00917 	ldw	r3,36(r2)
   1ae1c:	e0bffc17 	ldw	r2,-16(fp)
   1ae20:	10800117 	ldw	r2,4(r2)
   1ae24:	18bff736 	bltu	r3,r2,1ae04 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1ae28:	e0bffc17 	ldw	r2,-16(fp)
   1ae2c:	10c00d17 	ldw	r3,52(r2)
   1ae30:	e0bff517 	ldw	r2,-44(fp)
   1ae34:	18800526 	beq	r3,r2,1ae4c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1ae38:	e0bffe17 	ldw	r2,-8(fp)
   1ae3c:	00bfd016 	blt	zero,r2,1ad80 <altera_avalon_jtag_uart_write+0x10c>
   1ae40:	00000306 	br	1ae50 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1ae44:	0001883a 	nop
   1ae48:	00000106 	br	1ae50 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   1ae4c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1ae50:	e0fffd17 	ldw	r3,-12(fp)
   1ae54:	e0bff717 	ldw	r2,-36(fp)
   1ae58:	18800426 	beq	r3,r2,1ae6c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1ae5c:	e0fffd17 	ldw	r3,-12(fp)
   1ae60:	e0bff717 	ldw	r2,-36(fp)
   1ae64:	1885c83a 	sub	r2,r3,r2
   1ae68:	00000606 	br	1ae84 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1ae6c:	e0bfff17 	ldw	r2,-4(fp)
   1ae70:	1090000c 	andi	r2,r2,16384
   1ae74:	10000226 	beq	r2,zero,1ae80 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1ae78:	00bffd44 	movi	r2,-11
   1ae7c:	00000106 	br	1ae84 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1ae80:	00bffec4 	movi	r2,-5
}
   1ae84:	e037883a 	mov	sp,fp
   1ae88:	dfc00117 	ldw	ra,4(sp)
   1ae8c:	df000017 	ldw	fp,0(sp)
   1ae90:	dec00204 	addi	sp,sp,8
   1ae94:	f800283a 	ret

0001ae98 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1ae98:	defffa04 	addi	sp,sp,-24
   1ae9c:	dfc00515 	stw	ra,20(sp)
   1aea0:	df000415 	stw	fp,16(sp)
   1aea4:	df000404 	addi	fp,sp,16
   1aea8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1aeac:	0007883a 	mov	r3,zero
   1aeb0:	e0bfff17 	ldw	r2,-4(fp)
   1aeb4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1aeb8:	e0bfff17 	ldw	r2,-4(fp)
   1aebc:	10800104 	addi	r2,r2,4
   1aec0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aec4:	0005303a 	rdctl	r2,status
   1aec8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aecc:	e0fffd17 	ldw	r3,-12(fp)
   1aed0:	00bfff84 	movi	r2,-2
   1aed4:	1884703a 	and	r2,r3,r2
   1aed8:	1001703a 	wrctl	status,r2
  
  return context;
   1aedc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1aee0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1aee4:	001bb100 	call	1bb10 <alt_tick>
   1aee8:	e0bffc17 	ldw	r2,-16(fp)
   1aeec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aef0:	e0bffe17 	ldw	r2,-8(fp)
   1aef4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1aef8:	e037883a 	mov	sp,fp
   1aefc:	dfc00117 	ldw	ra,4(sp)
   1af00:	df000017 	ldw	fp,0(sp)
   1af04:	dec00204 	addi	sp,sp,8
   1af08:	f800283a 	ret

0001af0c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1af0c:	defff804 	addi	sp,sp,-32
   1af10:	dfc00715 	stw	ra,28(sp)
   1af14:	df000615 	stw	fp,24(sp)
   1af18:	df000604 	addi	fp,sp,24
   1af1c:	e13ffc15 	stw	r4,-16(fp)
   1af20:	e17ffd15 	stw	r5,-12(fp)
   1af24:	e1bffe15 	stw	r6,-8(fp)
   1af28:	e1ffff15 	stw	r7,-4(fp)
   1af2c:	e0bfff17 	ldw	r2,-4(fp)
   1af30:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1af34:	00800174 	movhi	r2,5
   1af38:	10a79404 	addi	r2,r2,-25008
   1af3c:	10800017 	ldw	r2,0(r2)
   1af40:	1000041e 	bne	r2,zero,1af54 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1af44:	00800174 	movhi	r2,5
   1af48:	10a79404 	addi	r2,r2,-25008
   1af4c:	e0fffb17 	ldw	r3,-20(fp)
   1af50:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1af54:	e0bffc17 	ldw	r2,-16(fp)
   1af58:	10800104 	addi	r2,r2,4
   1af5c:	00c001c4 	movi	r3,7
   1af60:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1af64:	d8000015 	stw	zero,0(sp)
   1af68:	e13ffd17 	ldw	r4,-12(fp)
   1af6c:	e17ffe17 	ldw	r5,-8(fp)
   1af70:	018000b4 	movhi	r6,2
   1af74:	31aba604 	addi	r6,r6,-20840
   1af78:	e1fffc17 	ldw	r7,-16(fp)
   1af7c:	001b4080 	call	1b408 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1af80:	e037883a 	mov	sp,fp
   1af84:	dfc00117 	ldw	ra,4(sp)
   1af88:	df000017 	ldw	fp,0(sp)
   1af8c:	dec00204 	addi	sp,sp,8
   1af90:	f800283a 	ret

0001af94 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   1af94:	defffe04 	addi	sp,sp,-8
   1af98:	df000115 	stw	fp,4(sp)
   1af9c:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   1afa0:	00800174 	movhi	r2,5
   1afa4:	10a79104 	addi	r2,r2,-25020
   1afa8:	10800017 	ldw	r2,0(r2)
   1afac:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   1afb0:	00800174 	movhi	r2,5
   1afb4:	10a79204 	addi	r2,r2,-25016
   1afb8:	10800017 	ldw	r2,0(r2)
   1afbc:	1000021e 	bne	r2,zero,1afc8 <alt_timestamp_start+0x34>
  {
    return -1;
   1afc0:	00bfffc4 	movi	r2,-1
   1afc4:	00001106 	br	1b00c <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   1afc8:	e0bfff17 	ldw	r2,-4(fp)
   1afcc:	10800104 	addi	r2,r2,4
   1afd0:	00c00204 	movi	r3,8
   1afd4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   1afd8:	e0bfff17 	ldw	r2,-4(fp)
   1afdc:	10800204 	addi	r2,r2,8
   1afe0:	00ffffd4 	movui	r3,65535
   1afe4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   1afe8:	e0bfff17 	ldw	r2,-4(fp)
   1afec:	10800304 	addi	r2,r2,12
   1aff0:	00ffffd4 	movui	r3,65535
   1aff4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   1aff8:	e0bfff17 	ldw	r2,-4(fp)
   1affc:	10800104 	addi	r2,r2,4
   1b000:	00c00104 	movi	r3,4
   1b004:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   1b008:	0005883a 	mov	r2,zero
}
   1b00c:	e037883a 	mov	sp,fp
   1b010:	df000017 	ldw	fp,0(sp)
   1b014:	dec00104 	addi	sp,sp,4
   1b018:	f800283a 	ret

0001b01c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   1b01c:	defffc04 	addi	sp,sp,-16
   1b020:	df000315 	stw	fp,12(sp)
   1b024:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   1b028:	00800174 	movhi	r2,5
   1b02c:	10a79104 	addi	r2,r2,-25020
   1b030:	10800017 	ldw	r2,0(r2)
   1b034:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   1b038:	00800174 	movhi	r2,5
   1b03c:	10a79204 	addi	r2,r2,-25016
   1b040:	10800017 	ldw	r2,0(r2)
   1b044:	1000021e 	bne	r2,zero,1b050 <alt_timestamp+0x34>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   1b048:	00bfffc4 	movi	r2,-1
   1b04c:	00001306 	br	1b09c <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1b050:	e0bffd17 	ldw	r2,-12(fp)
   1b054:	10800404 	addi	r2,r2,16
   1b058:	0007883a 	mov	r3,zero
   1b05c:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1b060:	e0bffd17 	ldw	r2,-12(fp)
   1b064:	10800404 	addi	r2,r2,16
   1b068:	10800037 	ldwio	r2,0(r2)
   1b06c:	10bfffcc 	andi	r2,r2,65535
   1b070:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   1b074:	e0bffd17 	ldw	r2,-12(fp)
   1b078:	10800504 	addi	r2,r2,20
   1b07c:	10800037 	ldwio	r2,0(r2)
   1b080:	10bfffcc 	andi	r2,r2,65535
   1b084:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1b088:	e0bfff17 	ldw	r2,-4(fp)
   1b08c:	1006943a 	slli	r3,r2,16
   1b090:	e0bffe17 	ldw	r2,-8(fp)
   1b094:	1884b03a 	or	r2,r3,r2
   1b098:	0084303a 	nor	r2,zero,r2
    }  
  }
}
   1b09c:	e037883a 	mov	sp,fp
   1b0a0:	df000017 	ldw	fp,0(sp)
   1b0a4:	dec00104 	addi	sp,sp,4
   1b0a8:	f800283a 	ret

0001b0ac <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   1b0ac:	deffff04 	addi	sp,sp,-4
   1b0b0:	df000015 	stw	fp,0(sp)
   1b0b4:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1b0b8:	00800174 	movhi	r2,5
   1b0bc:	10a79204 	addi	r2,r2,-25016
   1b0c0:	10800017 	ldw	r2,0(r2)
}
   1b0c4:	e037883a 	mov	sp,fp
   1b0c8:	df000017 	ldw	fp,0(sp)
   1b0cc:	dec00104 	addi	sp,sp,4
   1b0d0:	f800283a 	ret

0001b0d4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1b0d4:	defff504 	addi	sp,sp,-44
   1b0d8:	df000a15 	stw	fp,40(sp)
   1b0dc:	df000a04 	addi	fp,sp,40
   1b0e0:	e13ffc15 	stw	r4,-16(fp)
   1b0e4:	e17ffd15 	stw	r5,-12(fp)
   1b0e8:	e1bffe15 	stw	r6,-8(fp)
   1b0ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1b0f0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b0f4:	00800174 	movhi	r2,5
   1b0f8:	10a79404 	addi	r2,r2,-25008
   1b0fc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1b100:	10003f26 	beq	r2,zero,1b200 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1b104:	e0bffc17 	ldw	r2,-16(fp)
   1b108:	10003b26 	beq	r2,zero,1b1f8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1b10c:	e0bffc17 	ldw	r2,-16(fp)
   1b110:	e0fffe17 	ldw	r3,-8(fp)
   1b114:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1b118:	e0bffc17 	ldw	r2,-16(fp)
   1b11c:	e0ffff17 	ldw	r3,-4(fp)
   1b120:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b124:	0005303a 	rdctl	r2,status
   1b128:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b12c:	e0fff817 	ldw	r3,-32(fp)
   1b130:	00bfff84 	movi	r2,-2
   1b134:	1884703a 	and	r2,r3,r2
   1b138:	1001703a 	wrctl	status,r2
  
  return context;
   1b13c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1b140:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b144:	00800174 	movhi	r2,5
   1b148:	10a79504 	addi	r2,r2,-25004
   1b14c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1b150:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b154:	e0fffd17 	ldw	r3,-12(fp)
   1b158:	e0bff617 	ldw	r2,-40(fp)
   1b15c:	1885883a 	add	r2,r3,r2
   1b160:	10c00044 	addi	r3,r2,1
   1b164:	e0bffc17 	ldw	r2,-16(fp)
   1b168:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b16c:	e0bffc17 	ldw	r2,-16(fp)
   1b170:	10c00217 	ldw	r3,8(r2)
   1b174:	e0bff617 	ldw	r2,-40(fp)
   1b178:	1880042e 	bgeu	r3,r2,1b18c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1b17c:	e0bffc17 	ldw	r2,-16(fp)
   1b180:	00c00044 	movi	r3,1
   1b184:	10c00405 	stb	r3,16(r2)
   1b188:	00000206 	br	1b194 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1b18c:	e0bffc17 	ldw	r2,-16(fp)
   1b190:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b194:	e0bffc17 	ldw	r2,-16(fp)
   1b198:	00c00174 	movhi	r3,5
   1b19c:	18e78004 	addi	r3,r3,-25088
   1b1a0:	e0fff915 	stw	r3,-28(fp)
   1b1a4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b1a8:	e0bffa17 	ldw	r2,-24(fp)
   1b1ac:	e0fff917 	ldw	r3,-28(fp)
   1b1b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b1b4:	e0bff917 	ldw	r2,-28(fp)
   1b1b8:	10c00017 	ldw	r3,0(r2)
   1b1bc:	e0bffa17 	ldw	r2,-24(fp)
   1b1c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b1c4:	e0bff917 	ldw	r2,-28(fp)
   1b1c8:	10800017 	ldw	r2,0(r2)
   1b1cc:	e0fffa17 	ldw	r3,-24(fp)
   1b1d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b1d4:	e0bff917 	ldw	r2,-28(fp)
   1b1d8:	e0fffa17 	ldw	r3,-24(fp)
   1b1dc:	10c00015 	stw	r3,0(r2)
   1b1e0:	e0bff717 	ldw	r2,-36(fp)
   1b1e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b1e8:	e0bffb17 	ldw	r2,-20(fp)
   1b1ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b1f0:	0005883a 	mov	r2,zero
   1b1f4:	00000306 	br	1b204 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1b1f8:	00bffa84 	movi	r2,-22
   1b1fc:	00000106 	br	1b204 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1b200:	00bfde84 	movi	r2,-134
  }
}
   1b204:	e037883a 	mov	sp,fp
   1b208:	df000017 	ldw	fp,0(sp)
   1b20c:	dec00104 	addi	sp,sp,4
   1b210:	f800283a 	ret

0001b214 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b214:	deffff04 	addi	sp,sp,-4
   1b218:	df000015 	stw	fp,0(sp)
   1b21c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b220:	e037883a 	mov	sp,fp
   1b224:	df000017 	ldw	fp,0(sp)
   1b228:	dec00104 	addi	sp,sp,4
   1b22c:	f800283a 	ret

0001b230 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b230:	defffe04 	addi	sp,sp,-8
   1b234:	dfc00115 	stw	ra,4(sp)
   1b238:	df000015 	stw	fp,0(sp)
   1b23c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b240:	00800174 	movhi	r2,5
   1b244:	10a77d04 	addi	r2,r2,-25100
   1b248:	10800017 	ldw	r2,0(r2)
   1b24c:	10000526 	beq	r2,zero,1b264 <alt_get_errno+0x34>
   1b250:	00800174 	movhi	r2,5
   1b254:	10a77d04 	addi	r2,r2,-25100
   1b258:	10800017 	ldw	r2,0(r2)
   1b25c:	103ee83a 	callr	r2
   1b260:	00000206 	br	1b26c <alt_get_errno+0x3c>
   1b264:	00800174 	movhi	r2,5
   1b268:	10a78d04 	addi	r2,r2,-25036
}
   1b26c:	e037883a 	mov	sp,fp
   1b270:	dfc00117 	ldw	ra,4(sp)
   1b274:	df000017 	ldw	fp,0(sp)
   1b278:	dec00204 	addi	sp,sp,8
   1b27c:	f800283a 	ret

0001b280 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1b280:	defffa04 	addi	sp,sp,-24
   1b284:	dfc00515 	stw	ra,20(sp)
   1b288:	df000415 	stw	fp,16(sp)
   1b28c:	df000404 	addi	fp,sp,16
   1b290:	e13ffe15 	stw	r4,-8(fp)
   1b294:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1b298:	e0bffe17 	ldw	r2,-8(fp)
   1b29c:	10000326 	beq	r2,zero,1b2ac <alt_dev_llist_insert+0x2c>
   1b2a0:	e0bffe17 	ldw	r2,-8(fp)
   1b2a4:	10800217 	ldw	r2,8(r2)
   1b2a8:	1000051e 	bne	r2,zero,1b2c0 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   1b2ac:	001b2300 	call	1b230 <alt_get_errno>
   1b2b0:	00c00584 	movi	r3,22
   1b2b4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1b2b8:	00bffa84 	movi	r2,-22
   1b2bc:	00001306 	br	1b30c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1b2c0:	e0bffe17 	ldw	r2,-8(fp)
   1b2c4:	e0ffff17 	ldw	r3,-4(fp)
   1b2c8:	e0fffc15 	stw	r3,-16(fp)
   1b2cc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b2d0:	e0bffd17 	ldw	r2,-12(fp)
   1b2d4:	e0fffc17 	ldw	r3,-16(fp)
   1b2d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b2dc:	e0bffc17 	ldw	r2,-16(fp)
   1b2e0:	10c00017 	ldw	r3,0(r2)
   1b2e4:	e0bffd17 	ldw	r2,-12(fp)
   1b2e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b2ec:	e0bffc17 	ldw	r2,-16(fp)
   1b2f0:	10800017 	ldw	r2,0(r2)
   1b2f4:	e0fffd17 	ldw	r3,-12(fp)
   1b2f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b2fc:	e0bffc17 	ldw	r2,-16(fp)
   1b300:	e0fffd17 	ldw	r3,-12(fp)
   1b304:	10c00015 	stw	r3,0(r2)

  return 0;  
   1b308:	0005883a 	mov	r2,zero
}
   1b30c:	e037883a 	mov	sp,fp
   1b310:	dfc00117 	ldw	ra,4(sp)
   1b314:	df000017 	ldw	fp,0(sp)
   1b318:	dec00204 	addi	sp,sp,8
   1b31c:	f800283a 	ret

0001b320 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1b320:	defffd04 	addi	sp,sp,-12
   1b324:	dfc00215 	stw	ra,8(sp)
   1b328:	df000115 	stw	fp,4(sp)
   1b32c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b330:	008000b4 	movhi	r2,2
   1b334:	10b0ba04 	addi	r2,r2,-15640
   1b338:	e0bfff15 	stw	r2,-4(fp)
   1b33c:	00000606 	br	1b358 <_do_ctors+0x38>
        (*ctor) (); 
   1b340:	e0bfff17 	ldw	r2,-4(fp)
   1b344:	10800017 	ldw	r2,0(r2)
   1b348:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b34c:	e0bfff17 	ldw	r2,-4(fp)
   1b350:	10bfff04 	addi	r2,r2,-4
   1b354:	e0bfff15 	stw	r2,-4(fp)
   1b358:	e0ffff17 	ldw	r3,-4(fp)
   1b35c:	008000b4 	movhi	r2,2
   1b360:	10b0bb04 	addi	r2,r2,-15636
   1b364:	18bff62e 	bgeu	r3,r2,1b340 <_do_ctors+0x20>
        (*ctor) (); 
}
   1b368:	e037883a 	mov	sp,fp
   1b36c:	dfc00117 	ldw	ra,4(sp)
   1b370:	df000017 	ldw	fp,0(sp)
   1b374:	dec00204 	addi	sp,sp,8
   1b378:	f800283a 	ret

0001b37c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1b37c:	defffd04 	addi	sp,sp,-12
   1b380:	dfc00215 	stw	ra,8(sp)
   1b384:	df000115 	stw	fp,4(sp)
   1b388:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b38c:	008000b4 	movhi	r2,2
   1b390:	10b0ba04 	addi	r2,r2,-15640
   1b394:	e0bfff15 	stw	r2,-4(fp)
   1b398:	00000606 	br	1b3b4 <_do_dtors+0x38>
        (*dtor) (); 
   1b39c:	e0bfff17 	ldw	r2,-4(fp)
   1b3a0:	10800017 	ldw	r2,0(r2)
   1b3a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b3a8:	e0bfff17 	ldw	r2,-4(fp)
   1b3ac:	10bfff04 	addi	r2,r2,-4
   1b3b0:	e0bfff15 	stw	r2,-4(fp)
   1b3b4:	e0ffff17 	ldw	r3,-4(fp)
   1b3b8:	008000b4 	movhi	r2,2
   1b3bc:	10b0bb04 	addi	r2,r2,-15636
   1b3c0:	18bff62e 	bgeu	r3,r2,1b39c <_do_dtors+0x20>
        (*dtor) (); 
}
   1b3c4:	e037883a 	mov	sp,fp
   1b3c8:	dfc00117 	ldw	ra,4(sp)
   1b3cc:	df000017 	ldw	fp,0(sp)
   1b3d0:	dec00204 	addi	sp,sp,8
   1b3d4:	f800283a 	ret

0001b3d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1b3d8:	defffe04 	addi	sp,sp,-8
   1b3dc:	dfc00115 	stw	ra,4(sp)
   1b3e0:	df000015 	stw	fp,0(sp)
   1b3e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1b3e8:	0009883a 	mov	r4,zero
   1b3ec:	01440004 	movi	r5,4096
   1b3f0:	001be8c0 	call	1be8c <alt_icache_flush>
#endif
}
   1b3f4:	e037883a 	mov	sp,fp
   1b3f8:	dfc00117 	ldw	ra,4(sp)
   1b3fc:	df000017 	ldw	fp,0(sp)
   1b400:	dec00204 	addi	sp,sp,8
   1b404:	f800283a 	ret

0001b408 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b408:	defff904 	addi	sp,sp,-28
   1b40c:	dfc00615 	stw	ra,24(sp)
   1b410:	df000515 	stw	fp,20(sp)
   1b414:	df000504 	addi	fp,sp,20
   1b418:	e13ffc15 	stw	r4,-16(fp)
   1b41c:	e17ffd15 	stw	r5,-12(fp)
   1b420:	e1bffe15 	stw	r6,-8(fp)
   1b424:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1b428:	e0800217 	ldw	r2,8(fp)
   1b42c:	d8800015 	stw	r2,0(sp)
   1b430:	e13ffc17 	ldw	r4,-16(fp)
   1b434:	e17ffd17 	ldw	r5,-12(fp)
   1b438:	e1bffe17 	ldw	r6,-8(fp)
   1b43c:	e1ffff17 	ldw	r7,-4(fp)
   1b440:	001b5e00 	call	1b5e0 <alt_iic_isr_register>
}  
   1b444:	e037883a 	mov	sp,fp
   1b448:	dfc00117 	ldw	ra,4(sp)
   1b44c:	df000017 	ldw	fp,0(sp)
   1b450:	dec00204 	addi	sp,sp,8
   1b454:	f800283a 	ret

0001b458 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1b458:	defff904 	addi	sp,sp,-28
   1b45c:	df000615 	stw	fp,24(sp)
   1b460:	df000604 	addi	fp,sp,24
   1b464:	e13ffe15 	stw	r4,-8(fp)
   1b468:	e17fff15 	stw	r5,-4(fp)
   1b46c:	e0bfff17 	ldw	r2,-4(fp)
   1b470:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b474:	0005303a 	rdctl	r2,status
   1b478:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b47c:	e0fffb17 	ldw	r3,-20(fp)
   1b480:	00bfff84 	movi	r2,-2
   1b484:	1884703a 	and	r2,r3,r2
   1b488:	1001703a 	wrctl	status,r2
  
  return context;
   1b48c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b490:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1b494:	e0bffa17 	ldw	r2,-24(fp)
   1b498:	00c00044 	movi	r3,1
   1b49c:	1884983a 	sll	r2,r3,r2
   1b4a0:	1007883a 	mov	r3,r2
   1b4a4:	00800174 	movhi	r2,5
   1b4a8:	10a79304 	addi	r2,r2,-25012
   1b4ac:	10800017 	ldw	r2,0(r2)
   1b4b0:	1886b03a 	or	r3,r3,r2
   1b4b4:	00800174 	movhi	r2,5
   1b4b8:	10a79304 	addi	r2,r2,-25012
   1b4bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b4c0:	00800174 	movhi	r2,5
   1b4c4:	10a79304 	addi	r2,r2,-25012
   1b4c8:	10800017 	ldw	r2,0(r2)
   1b4cc:	100170fa 	wrctl	ienable,r2
   1b4d0:	e0bffc17 	ldw	r2,-16(fp)
   1b4d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b4d8:	e0bffd17 	ldw	r2,-12(fp)
   1b4dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b4e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1b4e4:	e037883a 	mov	sp,fp
   1b4e8:	df000017 	ldw	fp,0(sp)
   1b4ec:	dec00104 	addi	sp,sp,4
   1b4f0:	f800283a 	ret

0001b4f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1b4f4:	defff904 	addi	sp,sp,-28
   1b4f8:	df000615 	stw	fp,24(sp)
   1b4fc:	df000604 	addi	fp,sp,24
   1b500:	e13ffe15 	stw	r4,-8(fp)
   1b504:	e17fff15 	stw	r5,-4(fp)
   1b508:	e0bfff17 	ldw	r2,-4(fp)
   1b50c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b510:	0005303a 	rdctl	r2,status
   1b514:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b518:	e0fffb17 	ldw	r3,-20(fp)
   1b51c:	00bfff84 	movi	r2,-2
   1b520:	1884703a 	and	r2,r3,r2
   1b524:	1001703a 	wrctl	status,r2
  
  return context;
   1b528:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b52c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1b530:	e0bffa17 	ldw	r2,-24(fp)
   1b534:	00c00044 	movi	r3,1
   1b538:	1884983a 	sll	r2,r3,r2
   1b53c:	0084303a 	nor	r2,zero,r2
   1b540:	1007883a 	mov	r3,r2
   1b544:	00800174 	movhi	r2,5
   1b548:	10a79304 	addi	r2,r2,-25012
   1b54c:	10800017 	ldw	r2,0(r2)
   1b550:	1886703a 	and	r3,r3,r2
   1b554:	00800174 	movhi	r2,5
   1b558:	10a79304 	addi	r2,r2,-25012
   1b55c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b560:	00800174 	movhi	r2,5
   1b564:	10a79304 	addi	r2,r2,-25012
   1b568:	10800017 	ldw	r2,0(r2)
   1b56c:	100170fa 	wrctl	ienable,r2
   1b570:	e0bffc17 	ldw	r2,-16(fp)
   1b574:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b578:	e0bffd17 	ldw	r2,-12(fp)
   1b57c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b580:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1b584:	e037883a 	mov	sp,fp
   1b588:	df000017 	ldw	fp,0(sp)
   1b58c:	dec00104 	addi	sp,sp,4
   1b590:	f800283a 	ret

0001b594 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1b594:	defffc04 	addi	sp,sp,-16
   1b598:	df000315 	stw	fp,12(sp)
   1b59c:	df000304 	addi	fp,sp,12
   1b5a0:	e13ffe15 	stw	r4,-8(fp)
   1b5a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1b5a8:	000530fa 	rdctl	r2,ienable
   1b5ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1b5b0:	e0bfff17 	ldw	r2,-4(fp)
   1b5b4:	00c00044 	movi	r3,1
   1b5b8:	1884983a 	sll	r2,r3,r2
   1b5bc:	1007883a 	mov	r3,r2
   1b5c0:	e0bffd17 	ldw	r2,-12(fp)
   1b5c4:	1884703a 	and	r2,r3,r2
   1b5c8:	1004c03a 	cmpne	r2,r2,zero
   1b5cc:	10803fcc 	andi	r2,r2,255
}
   1b5d0:	e037883a 	mov	sp,fp
   1b5d4:	df000017 	ldw	fp,0(sp)
   1b5d8:	dec00104 	addi	sp,sp,4
   1b5dc:	f800283a 	ret

0001b5e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b5e0:	defff504 	addi	sp,sp,-44
   1b5e4:	dfc00a15 	stw	ra,40(sp)
   1b5e8:	df000915 	stw	fp,36(sp)
   1b5ec:	df000904 	addi	fp,sp,36
   1b5f0:	e13ffc15 	stw	r4,-16(fp)
   1b5f4:	e17ffd15 	stw	r5,-12(fp)
   1b5f8:	e1bffe15 	stw	r6,-8(fp)
   1b5fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1b600:	00bffa84 	movi	r2,-22
   1b604:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1b608:	e0bffd17 	ldw	r2,-12(fp)
   1b60c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1b610:	e0bff817 	ldw	r2,-32(fp)
   1b614:	10800808 	cmpgei	r2,r2,32
   1b618:	1000271e 	bne	r2,zero,1b6b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b61c:	0005303a 	rdctl	r2,status
   1b620:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b624:	e0fffa17 	ldw	r3,-24(fp)
   1b628:	00bfff84 	movi	r2,-2
   1b62c:	1884703a 	and	r2,r3,r2
   1b630:	1001703a 	wrctl	status,r2
  
  return context;
   1b634:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1b638:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   1b63c:	00c00174 	movhi	r3,5
   1b640:	18e7a004 	addi	r3,r3,-24960
   1b644:	e0bff817 	ldw	r2,-32(fp)
   1b648:	100490fa 	slli	r2,r2,3
   1b64c:	1885883a 	add	r2,r3,r2
   1b650:	e0fffe17 	ldw	r3,-8(fp)
   1b654:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1b658:	00c00174 	movhi	r3,5
   1b65c:	18e7a004 	addi	r3,r3,-24960
   1b660:	e0bff817 	ldw	r2,-32(fp)
   1b664:	100490fa 	slli	r2,r2,3
   1b668:	1885883a 	add	r2,r3,r2
   1b66c:	10800104 	addi	r2,r2,4
   1b670:	e0ffff17 	ldw	r3,-4(fp)
   1b674:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1b678:	e0bffe17 	ldw	r2,-8(fp)
   1b67c:	10000526 	beq	r2,zero,1b694 <alt_iic_isr_register+0xb4>
   1b680:	e0bff817 	ldw	r2,-32(fp)
   1b684:	e13ffc17 	ldw	r4,-16(fp)
   1b688:	100b883a 	mov	r5,r2
   1b68c:	001b4580 	call	1b458 <alt_ic_irq_enable>
   1b690:	00000406 	br	1b6a4 <alt_iic_isr_register+0xc4>
   1b694:	e0bff817 	ldw	r2,-32(fp)
   1b698:	e13ffc17 	ldw	r4,-16(fp)
   1b69c:	100b883a 	mov	r5,r2
   1b6a0:	001b4f40 	call	1b4f4 <alt_ic_irq_disable>
   1b6a4:	e0bff715 	stw	r2,-36(fp)
   1b6a8:	e0bff917 	ldw	r2,-28(fp)
   1b6ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b6b0:	e0bffb17 	ldw	r2,-20(fp)
   1b6b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1b6b8:	e0bff717 	ldw	r2,-36(fp)
}
   1b6bc:	e037883a 	mov	sp,fp
   1b6c0:	dfc00117 	ldw	ra,4(sp)
   1b6c4:	df000017 	ldw	fp,0(sp)
   1b6c8:	dec00204 	addi	sp,sp,8
   1b6cc:	f800283a 	ret

0001b6d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1b6d0:	defff904 	addi	sp,sp,-28
   1b6d4:	dfc00615 	stw	ra,24(sp)
   1b6d8:	df000515 	stw	fp,20(sp)
   1b6dc:	df000504 	addi	fp,sp,20
   1b6e0:	e13ffc15 	stw	r4,-16(fp)
   1b6e4:	e17ffd15 	stw	r5,-12(fp)
   1b6e8:	e1bffe15 	stw	r6,-8(fp)
   1b6ec:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1b6f0:	e13ffd17 	ldw	r4,-12(fp)
   1b6f4:	e17ffe17 	ldw	r5,-8(fp)
   1b6f8:	e1bfff17 	ldw	r6,-4(fp)
   1b6fc:	001b9240 	call	1b924 <open>
   1b700:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1b704:	e0bffb17 	ldw	r2,-20(fp)
   1b708:	10001c16 	blt	r2,zero,1b77c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1b70c:	00c00174 	movhi	r3,5
   1b710:	18e2fb04 	addi	r3,r3,-29716
   1b714:	e0bffb17 	ldw	r2,-20(fp)
   1b718:	10800324 	muli	r2,r2,12
   1b71c:	1885883a 	add	r2,r3,r2
   1b720:	10c00017 	ldw	r3,0(r2)
   1b724:	e0bffc17 	ldw	r2,-16(fp)
   1b728:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1b72c:	00c00174 	movhi	r3,5
   1b730:	18e2fb04 	addi	r3,r3,-29716
   1b734:	e0bffb17 	ldw	r2,-20(fp)
   1b738:	10800324 	muli	r2,r2,12
   1b73c:	1885883a 	add	r2,r3,r2
   1b740:	10800104 	addi	r2,r2,4
   1b744:	10c00017 	ldw	r3,0(r2)
   1b748:	e0bffc17 	ldw	r2,-16(fp)
   1b74c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1b750:	00c00174 	movhi	r3,5
   1b754:	18e2fb04 	addi	r3,r3,-29716
   1b758:	e0bffb17 	ldw	r2,-20(fp)
   1b75c:	10800324 	muli	r2,r2,12
   1b760:	1885883a 	add	r2,r3,r2
   1b764:	10800204 	addi	r2,r2,8
   1b768:	10c00017 	ldw	r3,0(r2)
   1b76c:	e0bffc17 	ldw	r2,-16(fp)
   1b770:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1b774:	e13ffb17 	ldw	r4,-20(fp)
   1b778:	001a0f40 	call	1a0f4 <alt_release_fd>
  }
} 
   1b77c:	e037883a 	mov	sp,fp
   1b780:	dfc00117 	ldw	ra,4(sp)
   1b784:	df000017 	ldw	fp,0(sp)
   1b788:	dec00204 	addi	sp,sp,8
   1b78c:	f800283a 	ret

0001b790 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1b790:	defffb04 	addi	sp,sp,-20
   1b794:	dfc00415 	stw	ra,16(sp)
   1b798:	df000315 	stw	fp,12(sp)
   1b79c:	df000304 	addi	fp,sp,12
   1b7a0:	e13ffd15 	stw	r4,-12(fp)
   1b7a4:	e17ffe15 	stw	r5,-8(fp)
   1b7a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1b7ac:	01000174 	movhi	r4,5
   1b7b0:	2122fe04 	addi	r4,r4,-29704
   1b7b4:	e17ffd17 	ldw	r5,-12(fp)
   1b7b8:	01800044 	movi	r6,1
   1b7bc:	01c07fc4 	movi	r7,511
   1b7c0:	001b6d00 	call	1b6d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1b7c4:	01000174 	movhi	r4,5
   1b7c8:	2122fb04 	addi	r4,r4,-29716
   1b7cc:	e17ffe17 	ldw	r5,-8(fp)
   1b7d0:	000d883a 	mov	r6,zero
   1b7d4:	01c07fc4 	movi	r7,511
   1b7d8:	001b6d00 	call	1b6d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1b7dc:	01000174 	movhi	r4,5
   1b7e0:	21230104 	addi	r4,r4,-29692
   1b7e4:	e17fff17 	ldw	r5,-4(fp)
   1b7e8:	01800044 	movi	r6,1
   1b7ec:	01c07fc4 	movi	r7,511
   1b7f0:	001b6d00 	call	1b6d0 <alt_open_fd>
}  
   1b7f4:	e037883a 	mov	sp,fp
   1b7f8:	dfc00117 	ldw	ra,4(sp)
   1b7fc:	df000017 	ldw	fp,0(sp)
   1b800:	dec00204 	addi	sp,sp,8
   1b804:	f800283a 	ret

0001b808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b808:	defffe04 	addi	sp,sp,-8
   1b80c:	dfc00115 	stw	ra,4(sp)
   1b810:	df000015 	stw	fp,0(sp)
   1b814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b818:	00800174 	movhi	r2,5
   1b81c:	10a77d04 	addi	r2,r2,-25100
   1b820:	10800017 	ldw	r2,0(r2)
   1b824:	10000526 	beq	r2,zero,1b83c <alt_get_errno+0x34>
   1b828:	00800174 	movhi	r2,5
   1b82c:	10a77d04 	addi	r2,r2,-25100
   1b830:	10800017 	ldw	r2,0(r2)
   1b834:	103ee83a 	callr	r2
   1b838:	00000206 	br	1b844 <alt_get_errno+0x3c>
   1b83c:	00800174 	movhi	r2,5
   1b840:	10a78d04 	addi	r2,r2,-25036
}
   1b844:	e037883a 	mov	sp,fp
   1b848:	dfc00117 	ldw	ra,4(sp)
   1b84c:	df000017 	ldw	fp,0(sp)
   1b850:	dec00204 	addi	sp,sp,8
   1b854:	f800283a 	ret

0001b858 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1b858:	defffd04 	addi	sp,sp,-12
   1b85c:	df000215 	stw	fp,8(sp)
   1b860:	df000204 	addi	fp,sp,8
   1b864:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1b868:	e0bfff17 	ldw	r2,-4(fp)
   1b86c:	10800217 	ldw	r2,8(r2)
   1b870:	10d00034 	orhi	r3,r2,16384
   1b874:	e0bfff17 	ldw	r2,-4(fp)
   1b878:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b87c:	e03ffe15 	stw	zero,-8(fp)
   1b880:	00001d06 	br	1b8f8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b884:	00c00174 	movhi	r3,5
   1b888:	18e2fb04 	addi	r3,r3,-29716
   1b88c:	e0bffe17 	ldw	r2,-8(fp)
   1b890:	10800324 	muli	r2,r2,12
   1b894:	1885883a 	add	r2,r3,r2
   1b898:	10c00017 	ldw	r3,0(r2)
   1b89c:	e0bfff17 	ldw	r2,-4(fp)
   1b8a0:	10800017 	ldw	r2,0(r2)
   1b8a4:	1880111e 	bne	r3,r2,1b8ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b8a8:	00c00174 	movhi	r3,5
   1b8ac:	18e2fb04 	addi	r3,r3,-29716
   1b8b0:	e0bffe17 	ldw	r2,-8(fp)
   1b8b4:	10800324 	muli	r2,r2,12
   1b8b8:	1885883a 	add	r2,r3,r2
   1b8bc:	10800204 	addi	r2,r2,8
   1b8c0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b8c4:	1000090e 	bge	r2,zero,1b8ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1b8c8:	e0bffe17 	ldw	r2,-8(fp)
   1b8cc:	10c00324 	muli	r3,r2,12
   1b8d0:	00800174 	movhi	r2,5
   1b8d4:	10a2fb04 	addi	r2,r2,-29716
   1b8d8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b8dc:	e0bfff17 	ldw	r2,-4(fp)
   1b8e0:	18800226 	beq	r3,r2,1b8ec <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1b8e4:	00bffcc4 	movi	r2,-13
   1b8e8:	00000a06 	br	1b914 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b8ec:	e0bffe17 	ldw	r2,-8(fp)
   1b8f0:	10800044 	addi	r2,r2,1
   1b8f4:	e0bffe15 	stw	r2,-8(fp)
   1b8f8:	00800174 	movhi	r2,5
   1b8fc:	10a77c04 	addi	r2,r2,-25104
   1b900:	10800017 	ldw	r2,0(r2)
   1b904:	1007883a 	mov	r3,r2
   1b908:	e0bffe17 	ldw	r2,-8(fp)
   1b90c:	18bfdd2e 	bgeu	r3,r2,1b884 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1b910:	0005883a 	mov	r2,zero
}
   1b914:	e037883a 	mov	sp,fp
   1b918:	df000017 	ldw	fp,0(sp)
   1b91c:	dec00104 	addi	sp,sp,4
   1b920:	f800283a 	ret

0001b924 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1b924:	defff604 	addi	sp,sp,-40
   1b928:	dfc00915 	stw	ra,36(sp)
   1b92c:	df000815 	stw	fp,32(sp)
   1b930:	df000804 	addi	fp,sp,32
   1b934:	e13ffd15 	stw	r4,-12(fp)
   1b938:	e17ffe15 	stw	r5,-8(fp)
   1b93c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1b940:	00bfffc4 	movi	r2,-1
   1b944:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1b948:	00bffb44 	movi	r2,-19
   1b94c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1b950:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1b954:	e13ffd17 	ldw	r4,-12(fp)
   1b958:	01400174 	movhi	r5,5
   1b95c:	29677a04 	addi	r5,r5,-25112
   1b960:	001bc340 	call	1bc34 <alt_find_dev>
   1b964:	e0bff815 	stw	r2,-32(fp)
   1b968:	e0bff817 	ldw	r2,-32(fp)
   1b96c:	1000051e 	bne	r2,zero,1b984 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1b970:	e13ffd17 	ldw	r4,-12(fp)
   1b974:	001bcc40 	call	1bcc4 <alt_find_file>
   1b978:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1b97c:	00800044 	movi	r2,1
   1b980:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1b984:	e0bff817 	ldw	r2,-32(fp)
   1b988:	10002926 	beq	r2,zero,1ba30 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1b98c:	e13ff817 	ldw	r4,-32(fp)
   1b990:	001bdd80 	call	1bdd8 <alt_get_fd>
   1b994:	e0bff915 	stw	r2,-28(fp)
   1b998:	e0bff917 	ldw	r2,-28(fp)
   1b99c:	1000030e 	bge	r2,zero,1b9ac <open+0x88>
    {
      status = index;
   1b9a0:	e0bff917 	ldw	r2,-28(fp)
   1b9a4:	e0bffa15 	stw	r2,-24(fp)
   1b9a8:	00002306 	br	1ba38 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1b9ac:	e0bff917 	ldw	r2,-28(fp)
   1b9b0:	10c00324 	muli	r3,r2,12
   1b9b4:	00800174 	movhi	r2,5
   1b9b8:	10a2fb04 	addi	r2,r2,-29716
   1b9bc:	1885883a 	add	r2,r3,r2
   1b9c0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1b9c4:	e0fffe17 	ldw	r3,-8(fp)
   1b9c8:	00900034 	movhi	r2,16384
   1b9cc:	10bfffc4 	addi	r2,r2,-1
   1b9d0:	1886703a 	and	r3,r3,r2
   1b9d4:	e0bffc17 	ldw	r2,-16(fp)
   1b9d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1b9dc:	e0bffb17 	ldw	r2,-20(fp)
   1b9e0:	1000051e 	bne	r2,zero,1b9f8 <open+0xd4>
   1b9e4:	e13ffc17 	ldw	r4,-16(fp)
   1b9e8:	001b8580 	call	1b858 <alt_file_locked>
   1b9ec:	e0bffa15 	stw	r2,-24(fp)
   1b9f0:	e0bffa17 	ldw	r2,-24(fp)
   1b9f4:	10001016 	blt	r2,zero,1ba38 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1b9f8:	e0bff817 	ldw	r2,-32(fp)
   1b9fc:	10800317 	ldw	r2,12(r2)
   1ba00:	10000826 	beq	r2,zero,1ba24 <open+0x100>
   1ba04:	e0bff817 	ldw	r2,-32(fp)
   1ba08:	10800317 	ldw	r2,12(r2)
   1ba0c:	e13ffc17 	ldw	r4,-16(fp)
   1ba10:	e17ffd17 	ldw	r5,-12(fp)
   1ba14:	e1bffe17 	ldw	r6,-8(fp)
   1ba18:	e1ffff17 	ldw	r7,-4(fp)
   1ba1c:	103ee83a 	callr	r2
   1ba20:	00000106 	br	1ba28 <open+0x104>
   1ba24:	0005883a 	mov	r2,zero
   1ba28:	e0bffa15 	stw	r2,-24(fp)
   1ba2c:	00000206 	br	1ba38 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1ba30:	00bffb44 	movi	r2,-19
   1ba34:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1ba38:	e0bffa17 	ldw	r2,-24(fp)
   1ba3c:	1000080e 	bge	r2,zero,1ba60 <open+0x13c>
  {
    alt_release_fd (index);  
   1ba40:	e13ff917 	ldw	r4,-28(fp)
   1ba44:	001a0f40 	call	1a0f4 <alt_release_fd>
    ALT_ERRNO = -status;
   1ba48:	001b8080 	call	1b808 <alt_get_errno>
   1ba4c:	e0fffa17 	ldw	r3,-24(fp)
   1ba50:	00c7c83a 	sub	r3,zero,r3
   1ba54:	10c00015 	stw	r3,0(r2)
    return -1;
   1ba58:	00bfffc4 	movi	r2,-1
   1ba5c:	00000106 	br	1ba64 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1ba60:	e0bff917 	ldw	r2,-28(fp)
}
   1ba64:	e037883a 	mov	sp,fp
   1ba68:	dfc00117 	ldw	ra,4(sp)
   1ba6c:	df000017 	ldw	fp,0(sp)
   1ba70:	dec00204 	addi	sp,sp,8
   1ba74:	f800283a 	ret

0001ba78 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1ba78:	defffa04 	addi	sp,sp,-24
   1ba7c:	df000515 	stw	fp,20(sp)
   1ba80:	df000504 	addi	fp,sp,20
   1ba84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba88:	0005303a 	rdctl	r2,status
   1ba8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba90:	e0fffc17 	ldw	r3,-16(fp)
   1ba94:	00bfff84 	movi	r2,-2
   1ba98:	1884703a 	and	r2,r3,r2
   1ba9c:	1001703a 	wrctl	status,r2
  
  return context;
   1baa0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1baa4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1baa8:	e0bfff17 	ldw	r2,-4(fp)
   1baac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1bab0:	e0bffd17 	ldw	r2,-12(fp)
   1bab4:	10800017 	ldw	r2,0(r2)
   1bab8:	e0fffd17 	ldw	r3,-12(fp)
   1babc:	18c00117 	ldw	r3,4(r3)
   1bac0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1bac4:	e0bffd17 	ldw	r2,-12(fp)
   1bac8:	10800117 	ldw	r2,4(r2)
   1bacc:	e0fffd17 	ldw	r3,-12(fp)
   1bad0:	18c00017 	ldw	r3,0(r3)
   1bad4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1bad8:	e0bffd17 	ldw	r2,-12(fp)
   1badc:	e0fffd17 	ldw	r3,-12(fp)
   1bae0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1bae4:	e0bffd17 	ldw	r2,-12(fp)
   1bae8:	e0fffd17 	ldw	r3,-12(fp)
   1baec:	10c00015 	stw	r3,0(r2)
   1baf0:	e0bffb17 	ldw	r2,-20(fp)
   1baf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1baf8:	e0bffe17 	ldw	r2,-8(fp)
   1bafc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1bb00:	e037883a 	mov	sp,fp
   1bb04:	df000017 	ldw	fp,0(sp)
   1bb08:	dec00104 	addi	sp,sp,4
   1bb0c:	f800283a 	ret

0001bb10 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1bb10:	defffb04 	addi	sp,sp,-20
   1bb14:	dfc00415 	stw	ra,16(sp)
   1bb18:	df000315 	stw	fp,12(sp)
   1bb1c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1bb20:	d0a00d17 	ldw	r2,-32716(gp)
   1bb24:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1bb28:	d0a02217 	ldw	r2,-32632(gp)
   1bb2c:	10800044 	addi	r2,r2,1
   1bb30:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1bb34:	00002e06 	br	1bbf0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1bb38:	e0bffd17 	ldw	r2,-12(fp)
   1bb3c:	10800017 	ldw	r2,0(r2)
   1bb40:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1bb44:	e0bffd17 	ldw	r2,-12(fp)
   1bb48:	10800403 	ldbu	r2,16(r2)
   1bb4c:	10803fcc 	andi	r2,r2,255
   1bb50:	10000426 	beq	r2,zero,1bb64 <alt_tick+0x54>
   1bb54:	d0a02217 	ldw	r2,-32632(gp)
   1bb58:	1000021e 	bne	r2,zero,1bb64 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1bb5c:	e0bffd17 	ldw	r2,-12(fp)
   1bb60:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1bb64:	e0bffd17 	ldw	r2,-12(fp)
   1bb68:	10800217 	ldw	r2,8(r2)
   1bb6c:	d0e02217 	ldw	r3,-32632(gp)
   1bb70:	18801d36 	bltu	r3,r2,1bbe8 <alt_tick+0xd8>
   1bb74:	e0bffd17 	ldw	r2,-12(fp)
   1bb78:	10800403 	ldbu	r2,16(r2)
   1bb7c:	10803fcc 	andi	r2,r2,255
   1bb80:	1000191e 	bne	r2,zero,1bbe8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1bb84:	e0bffd17 	ldw	r2,-12(fp)
   1bb88:	10c00317 	ldw	r3,12(r2)
   1bb8c:	e0bffd17 	ldw	r2,-12(fp)
   1bb90:	10800517 	ldw	r2,20(r2)
   1bb94:	1009883a 	mov	r4,r2
   1bb98:	183ee83a 	callr	r3
   1bb9c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1bba0:	e0bfff17 	ldw	r2,-4(fp)
   1bba4:	1000031e 	bne	r2,zero,1bbb4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1bba8:	e13ffd17 	ldw	r4,-12(fp)
   1bbac:	001ba780 	call	1ba78 <alt_alarm_stop>
   1bbb0:	00000d06 	br	1bbe8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1bbb4:	e0bffd17 	ldw	r2,-12(fp)
   1bbb8:	10c00217 	ldw	r3,8(r2)
   1bbbc:	e0bfff17 	ldw	r2,-4(fp)
   1bbc0:	1887883a 	add	r3,r3,r2
   1bbc4:	e0bffd17 	ldw	r2,-12(fp)
   1bbc8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1bbcc:	e0bffd17 	ldw	r2,-12(fp)
   1bbd0:	10c00217 	ldw	r3,8(r2)
   1bbd4:	d0a02217 	ldw	r2,-32632(gp)
   1bbd8:	1880032e 	bgeu	r3,r2,1bbe8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1bbdc:	e0bffd17 	ldw	r2,-12(fp)
   1bbe0:	00c00044 	movi	r3,1
   1bbe4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1bbe8:	e0bffe17 	ldw	r2,-8(fp)
   1bbec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1bbf0:	e0fffd17 	ldw	r3,-12(fp)
   1bbf4:	d0a00d04 	addi	r2,gp,-32716
   1bbf8:	18bfcf1e 	bne	r3,r2,1bb38 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1bbfc:	0001883a 	nop
}
   1bc00:	e037883a 	mov	sp,fp
   1bc04:	dfc00117 	ldw	ra,4(sp)
   1bc08:	df000017 	ldw	fp,0(sp)
   1bc0c:	dec00204 	addi	sp,sp,8
   1bc10:	f800283a 	ret

0001bc14 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1bc14:	deffff04 	addi	sp,sp,-4
   1bc18:	df000015 	stw	fp,0(sp)
   1bc1c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1bc20:	000170fa 	wrctl	ienable,zero
}
   1bc24:	e037883a 	mov	sp,fp
   1bc28:	df000017 	ldw	fp,0(sp)
   1bc2c:	dec00104 	addi	sp,sp,4
   1bc30:	f800283a 	ret

0001bc34 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1bc34:	defffa04 	addi	sp,sp,-24
   1bc38:	dfc00515 	stw	ra,20(sp)
   1bc3c:	df000415 	stw	fp,16(sp)
   1bc40:	df000404 	addi	fp,sp,16
   1bc44:	e13ffe15 	stw	r4,-8(fp)
   1bc48:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1bc4c:	e0bfff17 	ldw	r2,-4(fp)
   1bc50:	10800017 	ldw	r2,0(r2)
   1bc54:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1bc58:	e13ffe17 	ldw	r4,-8(fp)
   1bc5c:	00109200 	call	10920 <strlen>
   1bc60:	10800044 	addi	r2,r2,1
   1bc64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1bc68:	00000d06 	br	1bca0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1bc6c:	e0bffc17 	ldw	r2,-16(fp)
   1bc70:	10c00217 	ldw	r3,8(r2)
   1bc74:	e0bffd17 	ldw	r2,-12(fp)
   1bc78:	1809883a 	mov	r4,r3
   1bc7c:	e17ffe17 	ldw	r5,-8(fp)
   1bc80:	100d883a 	mov	r6,r2
   1bc84:	001bf640 	call	1bf64 <memcmp>
   1bc88:	1000021e 	bne	r2,zero,1bc94 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1bc8c:	e0bffc17 	ldw	r2,-16(fp)
   1bc90:	00000706 	br	1bcb0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1bc94:	e0bffc17 	ldw	r2,-16(fp)
   1bc98:	10800017 	ldw	r2,0(r2)
   1bc9c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1bca0:	e0fffc17 	ldw	r3,-16(fp)
   1bca4:	e0bfff17 	ldw	r2,-4(fp)
   1bca8:	18bff01e 	bne	r3,r2,1bc6c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1bcac:	0005883a 	mov	r2,zero
}
   1bcb0:	e037883a 	mov	sp,fp
   1bcb4:	dfc00117 	ldw	ra,4(sp)
   1bcb8:	df000017 	ldw	fp,0(sp)
   1bcbc:	dec00204 	addi	sp,sp,8
   1bcc0:	f800283a 	ret

0001bcc4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1bcc4:	defffb04 	addi	sp,sp,-20
   1bcc8:	dfc00415 	stw	ra,16(sp)
   1bccc:	df000315 	stw	fp,12(sp)
   1bcd0:	df000304 	addi	fp,sp,12
   1bcd4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1bcd8:	00800174 	movhi	r2,5
   1bcdc:	10a77804 	addi	r2,r2,-25120
   1bce0:	10800017 	ldw	r2,0(r2)
   1bce4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bce8:	00003106 	br	1bdb0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1bcec:	e0bffd17 	ldw	r2,-12(fp)
   1bcf0:	10800217 	ldw	r2,8(r2)
   1bcf4:	1009883a 	mov	r4,r2
   1bcf8:	00109200 	call	10920 <strlen>
   1bcfc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1bd00:	e0bffd17 	ldw	r2,-12(fp)
   1bd04:	10c00217 	ldw	r3,8(r2)
   1bd08:	e0bffe17 	ldw	r2,-8(fp)
   1bd0c:	10bfffc4 	addi	r2,r2,-1
   1bd10:	1885883a 	add	r2,r3,r2
   1bd14:	10800003 	ldbu	r2,0(r2)
   1bd18:	10803fcc 	andi	r2,r2,255
   1bd1c:	1080201c 	xori	r2,r2,128
   1bd20:	10bfe004 	addi	r2,r2,-128
   1bd24:	10800bd8 	cmpnei	r2,r2,47
   1bd28:	1000031e 	bne	r2,zero,1bd38 <alt_find_file+0x74>
    {
      len -= 1;
   1bd2c:	e0bffe17 	ldw	r2,-8(fp)
   1bd30:	10bfffc4 	addi	r2,r2,-1
   1bd34:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bd38:	e0bffe17 	ldw	r2,-8(fp)
   1bd3c:	e0ffff17 	ldw	r3,-4(fp)
   1bd40:	1885883a 	add	r2,r3,r2
   1bd44:	10800003 	ldbu	r2,0(r2)
   1bd48:	10803fcc 	andi	r2,r2,255
   1bd4c:	1080201c 	xori	r2,r2,128
   1bd50:	10bfe004 	addi	r2,r2,-128
   1bd54:	10800be0 	cmpeqi	r2,r2,47
   1bd58:	1000081e 	bne	r2,zero,1bd7c <alt_find_file+0xb8>
   1bd5c:	e0bffe17 	ldw	r2,-8(fp)
   1bd60:	e0ffff17 	ldw	r3,-4(fp)
   1bd64:	1885883a 	add	r2,r3,r2
   1bd68:	10800003 	ldbu	r2,0(r2)
   1bd6c:	10803fcc 	andi	r2,r2,255
   1bd70:	1080201c 	xori	r2,r2,128
   1bd74:	10bfe004 	addi	r2,r2,-128
   1bd78:	10000a1e 	bne	r2,zero,1bda4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1bd7c:	e0bffd17 	ldw	r2,-12(fp)
   1bd80:	10c00217 	ldw	r3,8(r2)
   1bd84:	e0bffe17 	ldw	r2,-8(fp)
   1bd88:	1809883a 	mov	r4,r3
   1bd8c:	e17fff17 	ldw	r5,-4(fp)
   1bd90:	100d883a 	mov	r6,r2
   1bd94:	001bf640 	call	1bf64 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bd98:	1000021e 	bne	r2,zero,1bda4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1bd9c:	e0bffd17 	ldw	r2,-12(fp)
   1bda0:	00000806 	br	1bdc4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1bda4:	e0bffd17 	ldw	r2,-12(fp)
   1bda8:	10800017 	ldw	r2,0(r2)
   1bdac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bdb0:	e0fffd17 	ldw	r3,-12(fp)
   1bdb4:	00800174 	movhi	r2,5
   1bdb8:	10a77804 	addi	r2,r2,-25120
   1bdbc:	18bfcb1e 	bne	r3,r2,1bcec <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1bdc0:	0005883a 	mov	r2,zero
}
   1bdc4:	e037883a 	mov	sp,fp
   1bdc8:	dfc00117 	ldw	ra,4(sp)
   1bdcc:	df000017 	ldw	fp,0(sp)
   1bdd0:	dec00204 	addi	sp,sp,8
   1bdd4:	f800283a 	ret

0001bdd8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1bdd8:	defffc04 	addi	sp,sp,-16
   1bddc:	df000315 	stw	fp,12(sp)
   1bde0:	df000304 	addi	fp,sp,12
   1bde4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1bde8:	00bffa04 	movi	r2,-24
   1bdec:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1bdf0:	e03ffd15 	stw	zero,-12(fp)
   1bdf4:	00001d06 	br	1be6c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   1bdf8:	00c00174 	movhi	r3,5
   1bdfc:	18e2fb04 	addi	r3,r3,-29716
   1be00:	e0bffd17 	ldw	r2,-12(fp)
   1be04:	10800324 	muli	r2,r2,12
   1be08:	1885883a 	add	r2,r3,r2
   1be0c:	10800017 	ldw	r2,0(r2)
   1be10:	1000131e 	bne	r2,zero,1be60 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   1be14:	00c00174 	movhi	r3,5
   1be18:	18e2fb04 	addi	r3,r3,-29716
   1be1c:	e0bffd17 	ldw	r2,-12(fp)
   1be20:	10800324 	muli	r2,r2,12
   1be24:	1885883a 	add	r2,r3,r2
   1be28:	e0ffff17 	ldw	r3,-4(fp)
   1be2c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1be30:	00800174 	movhi	r2,5
   1be34:	10a77c04 	addi	r2,r2,-25104
   1be38:	10c00017 	ldw	r3,0(r2)
   1be3c:	e0bffd17 	ldw	r2,-12(fp)
   1be40:	1880040e 	bge	r3,r2,1be54 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   1be44:	00800174 	movhi	r2,5
   1be48:	10a77c04 	addi	r2,r2,-25104
   1be4c:	e0fffd17 	ldw	r3,-12(fp)
   1be50:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1be54:	e0bffd17 	ldw	r2,-12(fp)
   1be58:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1be5c:	00000606 	br	1be78 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1be60:	e0bffd17 	ldw	r2,-12(fp)
   1be64:	10800044 	addi	r2,r2,1
   1be68:	e0bffd15 	stw	r2,-12(fp)
   1be6c:	e0bffd17 	ldw	r2,-12(fp)
   1be70:	10800810 	cmplti	r2,r2,32
   1be74:	103fe01e 	bne	r2,zero,1bdf8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1be78:	e0bffe17 	ldw	r2,-8(fp)
}
   1be7c:	e037883a 	mov	sp,fp
   1be80:	df000017 	ldw	fp,0(sp)
   1be84:	dec00104 	addi	sp,sp,4
   1be88:	f800283a 	ret

0001be8c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1be8c:	defffb04 	addi	sp,sp,-20
   1be90:	df000415 	stw	fp,16(sp)
   1be94:	df000404 	addi	fp,sp,16
   1be98:	e13ffe15 	stw	r4,-8(fp)
   1be9c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1bea0:	e0bfff17 	ldw	r2,-4(fp)
   1bea4:	10840070 	cmpltui	r2,r2,4097
   1bea8:	1000021e 	bne	r2,zero,1beb4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1beac:	00840004 	movi	r2,4096
   1beb0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1beb4:	e0fffe17 	ldw	r3,-8(fp)
   1beb8:	e0bfff17 	ldw	r2,-4(fp)
   1bebc:	1885883a 	add	r2,r3,r2
   1bec0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1bec4:	e0bffe17 	ldw	r2,-8(fp)
   1bec8:	e0bffc15 	stw	r2,-16(fp)
   1becc:	00000506 	br	1bee4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1bed0:	e0bffc17 	ldw	r2,-16(fp)
   1bed4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1bed8:	e0bffc17 	ldw	r2,-16(fp)
   1bedc:	10800804 	addi	r2,r2,32
   1bee0:	e0bffc15 	stw	r2,-16(fp)
   1bee4:	e0fffc17 	ldw	r3,-16(fp)
   1bee8:	e0bffd17 	ldw	r2,-12(fp)
   1beec:	18bff836 	bltu	r3,r2,1bed0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1bef0:	e0bffe17 	ldw	r2,-8(fp)
   1bef4:	108007cc 	andi	r2,r2,31
   1bef8:	10000226 	beq	r2,zero,1bf04 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1befc:	e0bffc17 	ldw	r2,-16(fp)
   1bf00:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1bf04:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1bf08:	e037883a 	mov	sp,fp
   1bf0c:	df000017 	ldw	fp,0(sp)
   1bf10:	dec00104 	addi	sp,sp,4
   1bf14:	f800283a 	ret

0001bf18 <atexit>:
   1bf18:	200b883a 	mov	r5,r4
   1bf1c:	000d883a 	mov	r6,zero
   1bf20:	0009883a 	mov	r4,zero
   1bf24:	000f883a 	mov	r7,zero
   1bf28:	001bfe01 	jmpi	1bfe0 <__register_exitproc>

0001bf2c <exit>:
   1bf2c:	defffe04 	addi	sp,sp,-8
   1bf30:	000b883a 	mov	r5,zero
   1bf34:	dc000015 	stw	r16,0(sp)
   1bf38:	dfc00115 	stw	ra,4(sp)
   1bf3c:	2021883a 	mov	r16,r4
   1bf40:	001c1100 	call	1c110 <__call_exitprocs>
   1bf44:	00800174 	movhi	r2,5
   1bf48:	10a77304 	addi	r2,r2,-25140
   1bf4c:	11000017 	ldw	r4,0(r2)
   1bf50:	20800f17 	ldw	r2,60(r4)
   1bf54:	10000126 	beq	r2,zero,1bf5c <exit+0x30>
   1bf58:	103ee83a 	callr	r2
   1bf5c:	8009883a 	mov	r4,r16
   1bf60:	001c2b00 	call	1c2b0 <_exit>

0001bf64 <memcmp>:
   1bf64:	01c000c4 	movi	r7,3
   1bf68:	3980192e 	bgeu	r7,r6,1bfd0 <memcmp+0x6c>
   1bf6c:	2904b03a 	or	r2,r5,r4
   1bf70:	11c4703a 	and	r2,r2,r7
   1bf74:	10000f26 	beq	r2,zero,1bfb4 <memcmp+0x50>
   1bf78:	20c00003 	ldbu	r3,0(r4)
   1bf7c:	28800003 	ldbu	r2,0(r5)
   1bf80:	1880151e 	bne	r3,r2,1bfd8 <memcmp+0x74>
   1bf84:	31bfff84 	addi	r6,r6,-2
   1bf88:	01ffffc4 	movi	r7,-1
   1bf8c:	00000406 	br	1bfa0 <memcmp+0x3c>
   1bf90:	20c00003 	ldbu	r3,0(r4)
   1bf94:	28800003 	ldbu	r2,0(r5)
   1bf98:	31bfffc4 	addi	r6,r6,-1
   1bf9c:	18800e1e 	bne	r3,r2,1bfd8 <memcmp+0x74>
   1bfa0:	21000044 	addi	r4,r4,1
   1bfa4:	29400044 	addi	r5,r5,1
   1bfa8:	31fff91e 	bne	r6,r7,1bf90 <memcmp+0x2c>
   1bfac:	0005883a 	mov	r2,zero
   1bfb0:	f800283a 	ret
   1bfb4:	20c00017 	ldw	r3,0(r4)
   1bfb8:	28800017 	ldw	r2,0(r5)
   1bfbc:	1880041e 	bne	r3,r2,1bfd0 <memcmp+0x6c>
   1bfc0:	31bfff04 	addi	r6,r6,-4
   1bfc4:	21000104 	addi	r4,r4,4
   1bfc8:	29400104 	addi	r5,r5,4
   1bfcc:	39bff936 	bltu	r7,r6,1bfb4 <memcmp+0x50>
   1bfd0:	303fe91e 	bne	r6,zero,1bf78 <memcmp+0x14>
   1bfd4:	003ff506 	br	1bfac <memcmp+0x48>
   1bfd8:	1885c83a 	sub	r2,r3,r2
   1bfdc:	f800283a 	ret

0001bfe0 <__register_exitproc>:
   1bfe0:	defffa04 	addi	sp,sp,-24
   1bfe4:	00800174 	movhi	r2,5
   1bfe8:	10a77304 	addi	r2,r2,-25140
   1bfec:	dc000315 	stw	r16,12(sp)
   1bff0:	14000017 	ldw	r16,0(r2)
   1bff4:	dc400415 	stw	r17,16(sp)
   1bff8:	dfc00515 	stw	ra,20(sp)
   1bffc:	80805217 	ldw	r2,328(r16)
   1c000:	2023883a 	mov	r17,r4
   1c004:	10003e26 	beq	r2,zero,1c100 <__register_exitproc+0x120>
   1c008:	10c00117 	ldw	r3,4(r2)
   1c00c:	020007c4 	movi	r8,31
   1c010:	40c0180e 	bge	r8,r3,1c074 <__register_exitproc+0x94>
   1c014:	00800034 	movhi	r2,0
   1c018:	10800004 	addi	r2,r2,0
   1c01c:	1000061e 	bne	r2,zero,1c038 <__register_exitproc+0x58>
   1c020:	00bfffc4 	movi	r2,-1
   1c024:	dfc00517 	ldw	ra,20(sp)
   1c028:	dc400417 	ldw	r17,16(sp)
   1c02c:	dc000317 	ldw	r16,12(sp)
   1c030:	dec00604 	addi	sp,sp,24
   1c034:	f800283a 	ret
   1c038:	01006404 	movi	r4,400
   1c03c:	d9400015 	stw	r5,0(sp)
   1c040:	d9800115 	stw	r6,4(sp)
   1c044:	d9c00215 	stw	r7,8(sp)
   1c048:	00000000 	call	0 <__alt_mem_ins_mem0-0x10000>
   1c04c:	d9400017 	ldw	r5,0(sp)
   1c050:	d9800117 	ldw	r6,4(sp)
   1c054:	d9c00217 	ldw	r7,8(sp)
   1c058:	103ff126 	beq	r2,zero,1c020 <__register_exitproc+0x40>
   1c05c:	80c05217 	ldw	r3,328(r16)
   1c060:	10000115 	stw	zero,4(r2)
   1c064:	10c00015 	stw	r3,0(r2)
   1c068:	80805215 	stw	r2,328(r16)
   1c06c:	10006215 	stw	zero,392(r2)
   1c070:	10006315 	stw	zero,396(r2)
   1c074:	10c00117 	ldw	r3,4(r2)
   1c078:	88000d1e 	bne	r17,zero,1c0b0 <__register_exitproc+0xd0>
   1c07c:	19000084 	addi	r4,r3,2
   1c080:	2109883a 	add	r4,r4,r4
   1c084:	18c00044 	addi	r3,r3,1
   1c088:	2109883a 	add	r4,r4,r4
   1c08c:	1109883a 	add	r4,r2,r4
   1c090:	10c00115 	stw	r3,4(r2)
   1c094:	0005883a 	mov	r2,zero
   1c098:	21400015 	stw	r5,0(r4)
   1c09c:	dfc00517 	ldw	ra,20(sp)
   1c0a0:	dc400417 	ldw	r17,16(sp)
   1c0a4:	dc000317 	ldw	r16,12(sp)
   1c0a8:	dec00604 	addi	sp,sp,24
   1c0ac:	f800283a 	ret
   1c0b0:	02400044 	movi	r9,1
   1c0b4:	12806217 	ldw	r10,392(r2)
   1c0b8:	48d2983a 	sll	r9,r9,r3
   1c0bc:	19000804 	addi	r4,r3,32
   1c0c0:	18d1883a 	add	r8,r3,r3
   1c0c4:	2109883a 	add	r4,r4,r4
   1c0c8:	4211883a 	add	r8,r8,r8
   1c0cc:	2109883a 	add	r4,r4,r4
   1c0d0:	1109883a 	add	r4,r2,r4
   1c0d4:	1211883a 	add	r8,r2,r8
   1c0d8:	5254b03a 	or	r10,r10,r9
   1c0dc:	21c02215 	stw	r7,136(r4)
   1c0e0:	41802215 	stw	r6,136(r8)
   1c0e4:	12806215 	stw	r10,392(r2)
   1c0e8:	01000084 	movi	r4,2
   1c0ec:	893fe31e 	bne	r17,r4,1c07c <__register_exitproc+0x9c>
   1c0f0:	11006317 	ldw	r4,396(r2)
   1c0f4:	2252b03a 	or	r9,r4,r9
   1c0f8:	12406315 	stw	r9,396(r2)
   1c0fc:	003fdf06 	br	1c07c <__register_exitproc+0x9c>
   1c100:	00800174 	movhi	r2,5
   1c104:	10a7e004 	addi	r2,r2,-24704
   1c108:	80805215 	stw	r2,328(r16)
   1c10c:	003fbe06 	br	1c008 <__register_exitproc+0x28>

0001c110 <__call_exitprocs>:
   1c110:	00800174 	movhi	r2,5
   1c114:	10a77304 	addi	r2,r2,-25140
   1c118:	10800017 	ldw	r2,0(r2)
   1c11c:	defff304 	addi	sp,sp,-52
   1c120:	df000b15 	stw	fp,44(sp)
   1c124:	d8800015 	stw	r2,0(sp)
   1c128:	10805204 	addi	r2,r2,328
   1c12c:	dd400815 	stw	r21,32(sp)
   1c130:	dfc00c15 	stw	ra,48(sp)
   1c134:	ddc00a15 	stw	r23,40(sp)
   1c138:	dd800915 	stw	r22,36(sp)
   1c13c:	dd000715 	stw	r20,28(sp)
   1c140:	dcc00615 	stw	r19,24(sp)
   1c144:	dc800515 	stw	r18,20(sp)
   1c148:	dc400415 	stw	r17,16(sp)
   1c14c:	dc000315 	stw	r16,12(sp)
   1c150:	d9000115 	stw	r4,4(sp)
   1c154:	2839883a 	mov	fp,r5
   1c158:	d8800215 	stw	r2,8(sp)
   1c15c:	057fffc4 	movi	r21,-1
   1c160:	d8800017 	ldw	r2,0(sp)
   1c164:	ddc00217 	ldw	r23,8(sp)
   1c168:	14805217 	ldw	r18,328(r2)
   1c16c:	90001726 	beq	r18,zero,1c1cc <__call_exitprocs+0xbc>
   1c170:	94400117 	ldw	r17,4(r18)
   1c174:	8c3fffc4 	addi	r16,r17,-1
   1c178:	80001116 	blt	r16,zero,1c1c0 <__call_exitprocs+0xb0>
   1c17c:	8c400044 	addi	r17,r17,1
   1c180:	8427883a 	add	r19,r16,r16
   1c184:	8c63883a 	add	r17,r17,r17
   1c188:	95802204 	addi	r22,r18,136
   1c18c:	9ce7883a 	add	r19,r19,r19
   1c190:	8c63883a 	add	r17,r17,r17
   1c194:	b4e7883a 	add	r19,r22,r19
   1c198:	9463883a 	add	r17,r18,r17
   1c19c:	e0001726 	beq	fp,zero,1c1fc <__call_exitprocs+0xec>
   1c1a0:	8c87c83a 	sub	r3,r17,r18
   1c1a4:	b0c7883a 	add	r3,r22,r3
   1c1a8:	18c01e17 	ldw	r3,120(r3)
   1c1ac:	1f001326 	beq	r3,fp,1c1fc <__call_exitprocs+0xec>
   1c1b0:	843fffc4 	addi	r16,r16,-1
   1c1b4:	9cffff04 	addi	r19,r19,-4
   1c1b8:	8c7fff04 	addi	r17,r17,-4
   1c1bc:	857ff71e 	bne	r16,r21,1c19c <__call_exitprocs+0x8c>
   1c1c0:	00800034 	movhi	r2,0
   1c1c4:	10800004 	addi	r2,r2,0
   1c1c8:	10002a1e 	bne	r2,zero,1c274 <__call_exitprocs+0x164>
   1c1cc:	dfc00c17 	ldw	ra,48(sp)
   1c1d0:	df000b17 	ldw	fp,44(sp)
   1c1d4:	ddc00a17 	ldw	r23,40(sp)
   1c1d8:	dd800917 	ldw	r22,36(sp)
   1c1dc:	dd400817 	ldw	r21,32(sp)
   1c1e0:	dd000717 	ldw	r20,28(sp)
   1c1e4:	dcc00617 	ldw	r19,24(sp)
   1c1e8:	dc800517 	ldw	r18,20(sp)
   1c1ec:	dc400417 	ldw	r17,16(sp)
   1c1f0:	dc000317 	ldw	r16,12(sp)
   1c1f4:	dec00d04 	addi	sp,sp,52
   1c1f8:	f800283a 	ret
   1c1fc:	91000117 	ldw	r4,4(r18)
   1c200:	88c00017 	ldw	r3,0(r17)
   1c204:	213fffc4 	addi	r4,r4,-1
   1c208:	24001526 	beq	r4,r16,1c260 <__call_exitprocs+0x150>
   1c20c:	88000015 	stw	zero,0(r17)
   1c210:	183fe726 	beq	r3,zero,1c1b0 <__call_exitprocs+0xa0>
   1c214:	00800044 	movi	r2,1
   1c218:	1408983a 	sll	r4,r2,r16
   1c21c:	91406217 	ldw	r5,392(r18)
   1c220:	95000117 	ldw	r20,4(r18)
   1c224:	214a703a 	and	r5,r4,r5
   1c228:	28000b26 	beq	r5,zero,1c258 <__call_exitprocs+0x148>
   1c22c:	91406317 	ldw	r5,396(r18)
   1c230:	2148703a 	and	r4,r4,r5
   1c234:	20000c1e 	bne	r4,zero,1c268 <__call_exitprocs+0x158>
   1c238:	99400017 	ldw	r5,0(r19)
   1c23c:	d9000117 	ldw	r4,4(sp)
   1c240:	183ee83a 	callr	r3
   1c244:	90c00117 	ldw	r3,4(r18)
   1c248:	1d3fc51e 	bne	r3,r20,1c160 <__call_exitprocs+0x50>
   1c24c:	b8c00017 	ldw	r3,0(r23)
   1c250:	1cbfd726 	beq	r3,r18,1c1b0 <__call_exitprocs+0xa0>
   1c254:	003fc206 	br	1c160 <__call_exitprocs+0x50>
   1c258:	183ee83a 	callr	r3
   1c25c:	003ff906 	br	1c244 <__call_exitprocs+0x134>
   1c260:	94000115 	stw	r16,4(r18)
   1c264:	003fea06 	br	1c210 <__call_exitprocs+0x100>
   1c268:	99000017 	ldw	r4,0(r19)
   1c26c:	183ee83a 	callr	r3
   1c270:	003ff406 	br	1c244 <__call_exitprocs+0x134>
   1c274:	90c00117 	ldw	r3,4(r18)
   1c278:	1800071e 	bne	r3,zero,1c298 <__call_exitprocs+0x188>
   1c27c:	90c00017 	ldw	r3,0(r18)
   1c280:	18000926 	beq	r3,zero,1c2a8 <__call_exitprocs+0x198>
   1c284:	9009883a 	mov	r4,r18
   1c288:	b8c00015 	stw	r3,0(r23)
   1c28c:	00000000 	call	0 <__alt_mem_ins_mem0-0x10000>
   1c290:	bc800017 	ldw	r18,0(r23)
   1c294:	003fb506 	br	1c16c <__call_exitprocs+0x5c>
   1c298:	90c00017 	ldw	r3,0(r18)
   1c29c:	902f883a 	mov	r23,r18
   1c2a0:	1825883a 	mov	r18,r3
   1c2a4:	003fb106 	br	1c16c <__call_exitprocs+0x5c>
   1c2a8:	0007883a 	mov	r3,zero
   1c2ac:	003ffb06 	br	1c29c <__call_exitprocs+0x18c>

0001c2b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1c2b0:	defffc04 	addi	sp,sp,-16
   1c2b4:	df000315 	stw	fp,12(sp)
   1c2b8:	df000304 	addi	fp,sp,12
   1c2bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1c2c0:	0001883a 	nop
   1c2c4:	e0bfff17 	ldw	r2,-4(fp)
   1c2c8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   1c2cc:	e0bffd17 	ldw	r2,-12(fp)
   1c2d0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1c2d4:	e0bffe17 	ldw	r2,-8(fp)
   1c2d8:	10000226 	beq	r2,zero,1c2e4 <_exit+0x34>
    ALT_SIM_FAIL();
   1c2dc:	002af070 	cmpltui	zero,zero,43969
   1c2e0:	00000106 	br	1c2e8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1c2e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1c2e8:	003fff06 	br	1c2e8 <_exit+0x38>
