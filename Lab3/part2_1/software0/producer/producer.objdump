
producer.elf:     file format elf32-littlenios2
producer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000c740 memsz 0x0000c740 flags r-x
    LOAD off    0x0000e000 vaddr 0x00010000 paddr 0x0000c760 align 2**12
         filesz 0x00001dbc memsz 0x000020bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c5a8  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000364  00010000  0000c760  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  00010364  0000cac4  0000e364  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00011dbc  0000e51c  0000fdbc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fdbc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d80  00000000  00000000  0000fde0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022e3f  00000000  00000000  00010b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008f80  00000000  00000000  0003399f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a166  00000000  00000000  0003c91f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001a64  00000000  00000000  00046a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000307e  00000000  00000000  000484ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00011002  00000000  00000000  0004b56a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0005c56c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005c580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000602e3  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  000602e6  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000602eb  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000602ec  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  000602ed  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  000602f8  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00060303  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000003  00000000  00000000  0006030e  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000058  00000000  00000000  00060311  2**0
                  CONTENTS, READONLY
 25 .jdi          000086d8  00000000  00000000  00060369  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000734aa  00000000  00000000  00068a41  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010364 l    d  .rwdata	00000000 .rwdata
00011dbc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../producer_bsp//obj/HAL/src/crt0.o
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 producer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000053c l     F .text	00000034 __sprint_r
00010082 l     O .rodata	00000010 blanks.3515
00010092 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002584 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003ff4 l     F .text	00000008 __fp_lock
00003ffc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010364 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
000100c8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010210 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000085d8 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009318 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00009aac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009bc8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00009bf4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00009cf4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00009de8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00009ed4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a0b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011dac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000a324 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a464 l     F .text	00000038 alt_dev_reg
00010d20 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ac44 l     F .text	00000204 altera_avalon_jtag_uart_irq
0000ae48 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b484 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b6dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bb68 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000bcc0 l     F .text	00000050 alt_get_errno
0000bd10 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00006ab4 g     F .text	00000074 _mprec_log10
00006ba4 g     F .text	00000084 __any_on
00007824 g     F .text	00000064 _isatty_r
000100f8 g     O .rodata	00000028 __mprec_tinytens
00009ff8 g     F .text	00000078 alt_main
00009a68 g     F .text	00000044 __ashldi3
00000418 g     F .text	00000084 _puts_r
00011dbc g     O .bss	00000004 writep
00011e2c g     O .bss	00000100 alt_irq
00007888 g     F .text	0000006c _lseek_r
0000a7b0 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0000cac4 g       *ABS*	00000000 __flash_rwdata_start
00008e78 g     F .text	0000005c __eqdf2
00000280 g     F .text	0000003c FIFO_1_INIT
000120bc g       *ABS*	00000000 __alt_heap_start
000003dc g     F .text	0000003c printf
000073c8 g     F .text	0000005c __sseek
00004098 g     F .text	0000010c __sinit
00004d30 g     F .text	0000009c _setlocale_r
00004010 g     F .text	00000078 __sfmoreglue
0000a090 g     F .text	00000020 __malloc_unlock
00011dc0 g     O .bss	00000004 readp
00005970 g     F .text	0000018c memmove
0000a530 g     F .text	00000098 altera_avalon_fifo_init
00004088 g     F .text	00000010 _cleanup
0000a860 g     F .text	00000058 altera_avalon_fifo_write_fifo
00005bd8 g     F .text	000000a8 _Balloc
00008f30 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g       *ABS*	00000000 __alt_mem_data_mem_0
00000000 g     F .entry	0000000c __reset
0000a9f8 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00000020 g       *ABS*	00000000 __flash_exceptions_start
000077bc g     F .text	00000068 _fstat_r
00011de8 g     O .bss	00000004 errno
00011df0 g     O .bss	00000004 alt_argv
00019d80 g       *ABS*	00000000 _gp
0000a6fc g     F .text	0000005c altera_avalon_fifo_clear_event
00010ba0 g     O .rwdata	00000180 alt_fd_list
0000c114 g     F .text	00000090 alt_find_dev
00005830 g     F .text	00000140 memcpy
00004004 g     F .text	0000000c _cleanup_r
00009054 g     F .text	000000d4 __floatsidf
0000bc48 g     F .text	00000078 alt_io_redirect
00008ff8 g     F .text	0000005c __ltdf2
0000c760 g       *ABS*	00000000 __DTOR_END__
0000049c g     F .text	00000014 puts
00006a10 g     F .text	000000a4 __ratio
0000b048 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000003b0 g     F .text	0000002c _printf_r
00009438 g     F .text	00000008 __udivsi3
00009d44 g     F .text	000000a4 isatty
00010148 g     O .rodata	000000c8 __mprec_tens
00004dcc g     F .text	0000000c __locale_charset
00011de4 g     O .bss	00000004 __malloc_top_pad
00011d88 g     O .rwdata	00000004 __mb_cur_max
00004dd8 g     F .text	0000000c _localeconv_r
00006008 g     F .text	0000003c __i2b
000046ec g     F .text	000004e4 __sfvwrite_r
00007288 g     F .text	00000064 _sbrk_r
00011dc4 g     O .bss	00000004 fullp
000078f4 g     F .text	0000006c _read_r
00010764 g     O .rwdata	0000000c __lc_ctype
00011da4 g     O .rwdata	00000004 alt_max_fd
00009850 g     F .text	00000104 __unpack_d
0000766c g     F .text	0000013c _fclose_r
00003fc4 g     F .text	00000030 fflush
00011de0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000892c g     F .text	00000054 __adddf3
00006784 g     F .text	00000148 __b2d
00007fb0 g     F .text	00000628 __umoddi3
00009f24 g     F .text	000000d4 lseek
00011d80 g     O .rwdata	00000004 _global_impure_ptr
00006c28 g     F .text	000005fc _realloc_r
000120bc g       *ABS*	00000000 __bss_end
0000ba78 g     F .text	000000f0 alt_iic_isr_register
0000bff0 g     F .text	00000104 alt_tick
00007960 g     F .text	00000650 __udivdi3
00010120 g     O .rodata	00000028 __mprec_bigtens
00005dec g     F .text	00000104 __s2b
000091fc g     F .text	0000011c __floatunsidf
00006524 g     F .text	00000058 __mcmp
000042b0 g     F .text	00000018 __fp_lock_all
0000ba2c g     F .text	0000004c alt_ic_irq_enabled
000002d4 g     F .text	0000009c producer
0000bf58 g     F .text	00000098 alt_alarm_stop
00011df8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000cc alt_irq_handler
00010b78 g     O .rwdata	00000028 alt_dev_null
0000b6c0 g     F .text	0000001c alt_dcache_flush_all
00005ef0 g     F .text	00000068 __hi0bits
00009128 g     F .text	000000d4 __fixdfsi
0000a758 g     F .text	00000058 altera_avalon_fifo_write_ienable
00011dbc g       *ABS*	00000000 __ram_rwdata_end
0000a66c g     F .text	0000002c altera_avalon_fifo_read_almostempty
00011d9c g     O .rwdata	00000008 alt_dev_list
0000a374 g     F .text	000000f0 write
00010364 g       *ABS*	00000000 __ram_rodata_end
00009c44 g     F .text	000000b0 fstat
00009a24 g     F .text	00000044 __lshrdi3
0000629c g     F .text	0000012c __pow5mult
00011dd8 g     O .bss	00000004 __nlocale_changed
00009440 g     F .text	00000008 __umodsi3
000120bc g       *ABS*	00000000 end
0000ab84 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000a698 g     F .text	0000003c altera_avalon_fifo_read_event
0000c760 g       *ABS*	00000000 __CTOR_LIST__
00018000 g       *ABS*	00000000 __alt_stack_pointer
0000b4f8 g     F .text	00000088 alt_avalon_timer_sc_init
00009580 g     F .text	000000ac __clzsi2
0000b260 g     F .text	00000224 altera_avalon_jtag_uart_write
000042a0 g     F .text	00000004 __sfp_lock_acquire
0000a924 g     F .text	0000004c altera_avalon_fifo_read_fifo
00005738 g     F .text	000000f8 memchr
00000570 g     F .text	00001e7c ___vfprintf_internal_r
0000441c g     F .text	000002d0 _free_r
0000c584 g     F .text	000001a0 __call_exitprocs
00011dd4 g     O .bss	00000004 __mlocale_changed
00011d8c g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00011dfc g     O .bss	00000004 _alt_tick_rate
000063c8 g     F .text	0000015c __lshift
00011e00 g     O .bss	00000004 _alt_nticks
0000a100 g     F .text	000000f4 read
0000a4d0 g     F .text	00000060 alt_sys_init
0000c454 g     F .text	00000130 __register_exitproc
00006044 g     F .text	00000258 __multiply
0000aeec g     F .text	00000068 altera_avalon_jtag_uart_close
00009448 g     F .text	00000028 __mulsi3
00010364 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00011e04 g     O .bss	00000028 __malloc_current_mallinfo
000068cc g     F .text	00000144 __d2b
0000aa20 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c2b8 g     F .text	000000d4 alt_get_fd
00009954 g     F .text	000000d0 __fpcmp_parts_d
00007608 g     F .text	00000064 _close_r
0000c3d8 g     F .text	0000007c memcmp
0000aae0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000120bc g       *ABS*	00000000 __alt_stack_base
0000ab30 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002410 g     F .text	00000174 __swsetup_r
0000a5c8 g     F .text	0000003c altera_avalon_fifo_read_status
00008cc4 g     F .text	000001b4 __divdf3
000041a4 g     F .text	000000fc __sfp
00006b28 g     F .text	0000007c __copybits
00010770 g     O .rwdata	00000408 __malloc_av_
000042ac g     F .text	00000004 __sinit_lock_release
000089e0 g     F .text	000002e4 __muldf3
000072ec g     F .text	00000054 __sread
0000a9cc g     F .text	0000002c altera_avalon_fifo_read_other_info
0000c1a4 g     F .text	00000114 alt_find_file
0000b72c g     F .text	000000a0 alt_dev_llist_insert
0000a070 g     F .text	00000020 __malloc_lock
0000a274 g     F .text	000000b0 sbrk
00003ddc g     F .text	000001e8 _fflush_r
0000753c g     F .text	000000cc _calloc_r
00011dbc g       *ABS*	00000000 __bss_start
00005afc g     F .text	000000dc memset
000002bc g     F .text	00000018 main
00011df4 g     O .bss	00000004 alt_envp
00011ddc g     O .bss	00000004 __malloc_max_total_mem
0000aa80 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a6d4 g     F .text	00000028 altera_avalon_fifo_read_level
00007424 g     F .text	00000008 __sclose
00018000 g       *ABS*	00000000 __alt_heap_limit
000077a8 g     F .text	00000014 fclose
00011f2c g     O .bss	00000190 _atexit0
000027c0 g     F .text	0000161c _dtoa_r
00004fb4 g     F .text	00000784 _malloc_r
00011da8 g     O .rwdata	00000004 alt_errno
00004bd0 g     F .text	000000a8 _fwalk
000001f4 g     F .text	00000048 WRITE_FIFO_1
0000938c g     F .text	00000050 __divsi3
0001021c g     O .rodata	00000014 __thenan_df
000042e0 g     F .text	0000013c _malloc_trim_r
0000c760 g       *ABS*	00000000 __CTOR_END__
0000742c g     F .text	000000a4 strcmp
0000c760 g       *ABS*	00000000 __flash_rodata_start
0000c760 g       *ABS*	00000000 __DTOR_LIST__
00000370 g     F .text	00000040 delay
00008ed4 g     F .text	0000005c __nedf2
0000a49c g     F .text	00000034 alt_irq_init
0000a1f4 g     F .text	00000080 alt_release_fd
00010230 g     O .rodata	00000100 __clz_tab
00011dd0 g     O .bss	00000004 _PathLocale
0000c38c g     F .text	00000014 atexit
000074d0 g     F .text	0000006c _write_r
00004de4 g     F .text	0000001c setlocale
00011d84 g     O .rwdata	00000004 _impure_ptr
00011dec g     O .bss	00000004 alt_argc
0000b828 g     F .text	0000005c _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00006724 g     F .text	00000060 __ulp
00007224 g     F .text	00000038 __isinfd
000042c8 g     F .text	00000018 __fp_unlock_all
00011d94 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004e00 g     F .text	0000000c localeconv
0000a970 g     F .text	0000005c altera_avalon_fifo_write_other_info
0000b8a0 g     F .text	00000050 alt_ic_isr_register
00011dbc g       *ABS*	00000000 _edata
000120bc g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
0000af54 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000b98c g     F .text	000000a0 alt_ic_irq_disable
00007340 g     F .text	00000088 __swrite
00011d90 g     O .rwdata	00000004 __malloc_trim_threshold
0000c0f4 g     F .text	00000020 altera_nios2_qsys_irq_init
0000c3a0 g     F .text	00000038 exit
00004c78 g     F .text	000000b8 _fwalk_reent
0000657c g     F .text	000001a8 __mdiff
000093dc g     F .text	0000005c __modsi3
0000a604 g     F .text	0000003c altera_avalon_fifo_read_ienable
00018000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000042a4 g     F .text	00000004 __sfp_lock_release
0000c724 g     F .text	0000003c _exit
0000725c g     F .text	0000002c __isnand
0000b580 g     F .text	00000140 alt_alarm_start
00009470 g     F .text	00000110 __muldi3
0000a640 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00004e0c g     F .text	000001a8 __smakebuf_r
000004b0 g     F .text	0000008c strlen
0000be00 g     F .text	00000158 open
0000a8b8 g     F .text	0000006c altera_avalon_read_fifo
00008f94 g     F .text	00000064 __gedf2
0000023c g     F .text	00000044 READ_FIFO_1
0000b884 g     F .text	0000001c alt_icache_flush_all
00011db0 g     O .rwdata	00000004 alt_priority_mask
00011dc8 g     O .bss	00000004 emptyp
0000b8f0 g     F .text	0000009c alt_ic_irq_enable
000023ec g     F .text	00000024 __vfprintf_internal
00008980 g     F .text	00000060 __subdf3
00005f58 g     F .text	000000b0 __lo0bits
0000a808 g     F .text	00000058 altera_avalon_fifo_write_almostempty
00011db4 g     O .rwdata	00000008 alt_alarm_list
0000b7cc g     F .text	0000005c _do_ctors
00011dcc g     O .bss	00000004 countp
00000000 g       *ABS*	00000000 __alt_mem_ins_mem_0
00009afc g     F .text	000000cc close
00009e54 g     F .text	00000080 alt_load
0000962c g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
000042a8 g     F .text	00000004 __sinit_lock_acquire
00005ca8 g     F .text	00000144 __multadd
00005c80 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406e14 	ori	at,at,440
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c00074 	movhi	r3,1
 130:	18c78b04 	addi	r3,r3,7724
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	01000074 	movhi	r4,1
 148:	21078b04 	addi	r4,r4,7724
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6a76014 	ori	gp,gp,40320
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	10876f14 	ori	r2,r2,7612

    movhi r3, %hi(__bss_end)
     1d0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d4:	18c82f14 	ori	r3,r3,8380

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	0009e540 	call	9e54 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	0009ff80 	call	9ff8 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <WRITE_FIFO_1>:

#include "FIFO_1.h"


void WRITE_FIFO_1(int *buffer)
{
     1f4:	defffd04 	addi	sp,sp,-12
     1f8:	dfc00215 	stw	ra,8(sp)
     1fc:	df000115 	stw	fp,4(sp)
     200:	df000104 	addi	fp,sp,4
     204:	e13fff15 	stw	r4,-4(fp)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 enrty

	altera_avalon_fifo_write_fifo(IN_BASE,CONTROL_BASE,*buffer);
     208:	e0bfff17 	ldw	r2,-4(fp)
     20c:	10800017 	ldw	r2,0(r2)
     210:	010000b4 	movhi	r4,2
     214:	21241b04 	addi	r4,r4,-28564
     218:	014000b4 	movhi	r5,2
     21c:	29640804 	addi	r5,r5,-28640
     220:	100d883a 	mov	r6,r2
     224:	000a8600 	call	a860 <altera_avalon_fifo_write_fifo>
}
     228:	e037883a 	mov	sp,fp
     22c:	dfc00117 	ldw	ra,4(sp)
     230:	df000017 	ldw	fp,0(sp)
     234:	dec00204 	addi	sp,sp,8
     238:	f800283a 	ret

0000023c <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
     23c:	defffd04 	addi	sp,sp,-12
     240:	dfc00215 	stw	ra,8(sp)
     244:	df000115 	stw	fp,4(sp)
     248:	df000104 	addi	fp,sp,4
     24c:	e13fff15 	stw	r4,-4(fp)
	// Update "count" in shared mem

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 enrty less than capacity
	*buffer = altera_avalon_fifo_read_fifo(OUT_BASE,CONTROL_BASE);
     250:	010000b4 	movhi	r4,2
     254:	21241304 	addi	r4,r4,-28596
     258:	014000b4 	movhi	r5,2
     25c:	29640804 	addi	r5,r5,-28640
     260:	000a9240 	call	a924 <altera_avalon_fifo_read_fifo>
     264:	e0ffff17 	ldw	r3,-4(fp)
     268:	18800015 	stw	r2,0(r3)
}
     26c:	e037883a 	mov	sp,fp
     270:	dfc00117 	ldw	ra,4(sp)
     274:	df000017 	ldw	fp,0(sp)
     278:	dec00204 	addi	sp,sp,8
     27c:	f800283a 	ret

00000280 <FIFO_1_INIT>:



//Initialization
void FIFO_1_INIT()
{
     280:	defffe04 	addi	sp,sp,-8
     284:	dfc00115 	stw	ra,4(sp)
     288:	df000015 	stw	fp,0(sp)
     28c:	d839883a 	mov	fp,sp
	altera_avalon_fifo_init(CONTROL_BASE,0x0,ALMOST_EMPTY,ALMOST_FULL);
     290:	010000b4 	movhi	r4,2
     294:	21240804 	addi	r4,r4,-28640
     298:	000b883a 	mov	r5,zero
     29c:	01800084 	movi	r6,2
     2a0:	01c00f84 	movi	r7,62
     2a4:	000a5300 	call	a530 <altera_avalon_fifo_init>
}
     2a8:	e037883a 	mov	sp,fp
     2ac:	dfc00117 	ldw	ra,4(sp)
     2b0:	df000017 	ldw	fp,0(sp)
     2b4:	dec00204 	addi	sp,sp,8
     2b8:	f800283a 	ret

000002bc <main>:
void delay(int n);
int producer();


int main()
{
     2bc:	defffe04 	addi	sp,sp,-8
     2c0:	dfc00115 	stw	ra,4(sp)
     2c4:	df000015 	stw	fp,0(sp)
     2c8:	d839883a 	mov	fp,sp
	producer();
     2cc:	00002d40 	call	2d4 <producer>

	while(1) { }
     2d0:	003fff06 	br	2d0 <main+0x14>

000002d4 <producer>:
	return 0;
}


int producer()
{
     2d4:	defffd04 	addi	sp,sp,-12
     2d8:	dfc00215 	stw	ra,8(sp)
     2dc:	df000115 	stw	fp,4(sp)
     2e0:	df000104 	addi	fp,sp,4
	printf("Producer starting..\n");
     2e4:	01000074 	movhi	r4,1
     2e8:	21000004 	addi	r4,r4,0
     2ec:	000049c0 	call	49c <puts>

	FIFO_1_INIT(); // Initialize the FIFO
     2f0:	00002800 	call	280 <FIFO_1_INIT>

	int j = 5;
     2f4:	00800144 	movi	r2,5
     2f8:	e0bfff15 	stw	r2,-4(fp)
	while(j<=500)
     2fc:	00001006 	br	340 <producer+0x6c>
	{
		delay(100000);
     300:	010000b4 	movhi	r4,2
     304:	2121a804 	addi	r4,r4,-31072
     308:	00003700 	call	370 <delay>
		WRITE_FIFO_1(&j); // Write to the producer-consumer fifo
     30c:	e13fff04 	addi	r4,fp,-4
     310:	00001f40 	call	1f4 <WRITE_FIFO_1>
		delay(100000);
     314:	010000b4 	movhi	r4,2
     318:	2121a804 	addi	r4,r4,-31072
     31c:	00003700 	call	370 <delay>

		printf("Producer sent [%i]\n",j);
     320:	e0bfff17 	ldw	r2,-4(fp)
     324:	01000074 	movhi	r4,1
     328:	21000504 	addi	r4,r4,20
     32c:	100b883a 	mov	r5,r2
     330:	00003dc0 	call	3dc <printf>
		j+=10;
     334:	e0bfff17 	ldw	r2,-4(fp)
     338:	10800284 	addi	r2,r2,10
     33c:	e0bfff15 	stw	r2,-4(fp)
	printf("Producer starting..\n");

	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
	while(j<=500)
     340:	e0bfff17 	ldw	r2,-4(fp)
     344:	10807d50 	cmplti	r2,r2,501
     348:	103fed1e 	bne	r2,zero,300 <producer+0x2c>

		printf("Producer sent [%i]\n",j);
		j+=10;
	}

	printf("Producer finished..\n");
     34c:	01000074 	movhi	r4,1
     350:	21000a04 	addi	r4,r4,40
     354:	000049c0 	call	49c <puts>
	return 0;
     358:	0005883a 	mov	r2,zero
}
     35c:	e037883a 	mov	sp,fp
     360:	dfc00117 	ldw	ra,4(sp)
     364:	df000017 	ldw	fp,0(sp)
     368:	dec00204 	addi	sp,sp,8
     36c:	f800283a 	ret

00000370 <delay>:


void delay(int n)
{
     370:	defffd04 	addi	sp,sp,-12
     374:	df000215 	stw	fp,8(sp)
     378:	df000204 	addi	fp,sp,8
     37c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
     380:	e0bfff17 	ldw	r2,-4(fp)
     384:	e0bffe15 	stw	r2,-8(fp)
     388:	00000306 	br	398 <delay+0x28>
     38c:	e0bffe17 	ldw	r2,-8(fp)
     390:	10bfffc4 	addi	r2,r2,-1
     394:	e0bffe15 	stw	r2,-8(fp)
     398:	e0bffe17 	ldw	r2,-8(fp)
     39c:	00bffb16 	blt	zero,r2,38c <delay+0x1c>
	{
		continue;
	}
     3a0:	e037883a 	mov	sp,fp
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00104 	addi	sp,sp,4
     3ac:	f800283a 	ret

000003b0 <_printf_r>:
     3b0:	defffd04 	addi	sp,sp,-12
     3b4:	dfc00015 	stw	ra,0(sp)
     3b8:	d9800115 	stw	r6,4(sp)
     3bc:	d9c00215 	stw	r7,8(sp)
     3c0:	280d883a 	mov	r6,r5
     3c4:	21400217 	ldw	r5,8(r4)
     3c8:	d9c00104 	addi	r7,sp,4
     3cc:	00005700 	call	570 <___vfprintf_internal_r>
     3d0:	dfc00017 	ldw	ra,0(sp)
     3d4:	dec00304 	addi	sp,sp,12
     3d8:	f800283a 	ret

000003dc <printf>:
     3dc:	defffc04 	addi	sp,sp,-16
     3e0:	dfc00015 	stw	ra,0(sp)
     3e4:	d9400115 	stw	r5,4(sp)
     3e8:	d9800215 	stw	r6,8(sp)
     3ec:	d9c00315 	stw	r7,12(sp)
     3f0:	00800074 	movhi	r2,1
     3f4:	10876104 	addi	r2,r2,7556
     3f8:	10800017 	ldw	r2,0(r2)
     3fc:	200b883a 	mov	r5,r4
     400:	d9800104 	addi	r6,sp,4
     404:	11000217 	ldw	r4,8(r2)
     408:	00023ec0 	call	23ec <__vfprintf_internal>
     40c:	dfc00017 	ldw	ra,0(sp)
     410:	dec00404 	addi	sp,sp,16
     414:	f800283a 	ret

00000418 <_puts_r>:
     418:	defff604 	addi	sp,sp,-40
     41c:	dc400815 	stw	r17,32(sp)
     420:	2023883a 	mov	r17,r4
     424:	2809883a 	mov	r4,r5
     428:	dc000715 	stw	r16,28(sp)
     42c:	dfc00915 	stw	ra,36(sp)
     430:	2821883a 	mov	r16,r5
     434:	00004b00 	call	4b0 <strlen>
     438:	10c00044 	addi	r3,r2,1
     43c:	d8800115 	stw	r2,4(sp)
     440:	89400217 	ldw	r5,8(r17)
     444:	00800074 	movhi	r2,1
     448:	10800f04 	addi	r2,r2,60
     44c:	d8800215 	stw	r2,8(sp)
     450:	00800044 	movi	r2,1
     454:	d8800315 	stw	r2,12(sp)
     458:	8809883a 	mov	r4,r17
     45c:	00800084 	movi	r2,2
     460:	d9800404 	addi	r6,sp,16
     464:	dc000015 	stw	r16,0(sp)
     468:	d8c00615 	stw	r3,24(sp)
     46c:	dec00415 	stw	sp,16(sp)
     470:	d8800515 	stw	r2,20(sp)
     474:	00046ec0 	call	46ec <__sfvwrite_r>
     478:	1000061e 	bne	r2,zero,494 <_puts_r+0x7c>
     47c:	00800284 	movi	r2,10
     480:	dfc00917 	ldw	ra,36(sp)
     484:	dc400817 	ldw	r17,32(sp)
     488:	dc000717 	ldw	r16,28(sp)
     48c:	dec00a04 	addi	sp,sp,40
     490:	f800283a 	ret
     494:	00bfffc4 	movi	r2,-1
     498:	003ff906 	br	480 <_puts_r+0x68>

0000049c <puts>:
     49c:	00800074 	movhi	r2,1
     4a0:	10876104 	addi	r2,r2,7556
     4a4:	200b883a 	mov	r5,r4
     4a8:	11000017 	ldw	r4,0(r2)
     4ac:	00004181 	jmpi	418 <_puts_r>

000004b0 <strlen>:
     4b0:	208000cc 	andi	r2,r4,3
     4b4:	10001f1e 	bne	r2,zero,534 <strlen+0x84>
     4b8:	20800017 	ldw	r2,0(r4)
     4bc:	01ffbff4 	movhi	r7,65279
     4c0:	39ffbfc4 	addi	r7,r7,-257
     4c4:	01a02074 	movhi	r6,32897
     4c8:	31a02004 	addi	r6,r6,-32640
     4cc:	11c7883a 	add	r3,r2,r7
     4d0:	0084303a 	nor	r2,zero,r2
     4d4:	1886703a 	and	r3,r3,r2
     4d8:	1986703a 	and	r3,r3,r6
     4dc:	2005883a 	mov	r2,r4
     4e0:	1800101e 	bne	r3,zero,524 <strlen+0x74>
     4e4:	10800104 	addi	r2,r2,4
     4e8:	10c00017 	ldw	r3,0(r2)
     4ec:	19cb883a 	add	r5,r3,r7
     4f0:	00c6303a 	nor	r3,zero,r3
     4f4:	28c6703a 	and	r3,r5,r3
     4f8:	1986703a 	and	r3,r3,r6
     4fc:	1800091e 	bne	r3,zero,524 <strlen+0x74>
     500:	10800104 	addi	r2,r2,4
     504:	10c00017 	ldw	r3,0(r2)
     508:	19cb883a 	add	r5,r3,r7
     50c:	00c6303a 	nor	r3,zero,r3
     510:	28c6703a 	and	r3,r5,r3
     514:	1986703a 	and	r3,r3,r6
     518:	183ff226 	beq	r3,zero,4e4 <strlen+0x34>
     51c:	00000106 	br	524 <strlen+0x74>
     520:	10800044 	addi	r2,r2,1
     524:	10c00007 	ldb	r3,0(r2)
     528:	183ffd1e 	bne	r3,zero,520 <strlen+0x70>
     52c:	1105c83a 	sub	r2,r2,r4
     530:	f800283a 	ret
     534:	2005883a 	mov	r2,r4
     538:	003ffa06 	br	524 <strlen+0x74>

0000053c <__sprint_r>:
     53c:	30800217 	ldw	r2,8(r6)
     540:	defffe04 	addi	sp,sp,-8
     544:	dc000015 	stw	r16,0(sp)
     548:	dfc00115 	stw	ra,4(sp)
     54c:	3021883a 	mov	r16,r6
     550:	10000226 	beq	r2,zero,55c <__sprint_r+0x20>
     554:	00046ec0 	call	46ec <__sfvwrite_r>
     558:	80000215 	stw	zero,8(r16)
     55c:	80000115 	stw	zero,4(r16)
     560:	dfc00117 	ldw	ra,4(sp)
     564:	dc000017 	ldw	r16,0(sp)
     568:	dec00204 	addi	sp,sp,8
     56c:	f800283a 	ret

00000570 <___vfprintf_internal_r>:
     570:	defeb904 	addi	sp,sp,-1308
     574:	dc013d15 	stw	r16,1268(sp)
     578:	d9013015 	stw	r4,1216(sp)
     57c:	dfc14615 	stw	ra,1304(sp)
     580:	df014515 	stw	fp,1300(sp)
     584:	ddc14415 	stw	r23,1296(sp)
     588:	dd814315 	stw	r22,1292(sp)
     58c:	dd414215 	stw	r21,1288(sp)
     590:	dd014115 	stw	r20,1284(sp)
     594:	dcc14015 	stw	r19,1280(sp)
     598:	dc813f15 	stw	r18,1276(sp)
     59c:	dc413e15 	stw	r17,1272(sp)
     5a0:	d9412915 	stw	r5,1188(sp)
     5a4:	3021883a 	mov	r16,r6
     5a8:	d9c12d15 	stw	r7,1204(sp)
     5ac:	0004dd80 	call	4dd8 <_localeconv_r>
     5b0:	10800017 	ldw	r2,0(r2)
     5b4:	d9013017 	ldw	r4,1216(sp)
     5b8:	d8013315 	stw	zero,1228(sp)
     5bc:	d8813715 	stw	r2,1244(sp)
     5c0:	d8013415 	stw	zero,1232(sp)
     5c4:	20000226 	beq	r4,zero,5d0 <___vfprintf_internal_r+0x60>
     5c8:	20800e17 	ldw	r2,56(r4)
     5cc:	10014b26 	beq	r2,zero,afc <___vfprintf_internal_r+0x58c>
     5d0:	d8c12917 	ldw	r3,1188(sp)
     5d4:	1880030b 	ldhu	r2,12(r3)
     5d8:	10c0020c 	andi	r3,r2,8
     5dc:	18ffffcc 	andi	r3,r3,65535
     5e0:	18e0001c 	xori	r3,r3,32768
     5e4:	18e00004 	addi	r3,r3,-32768
     5e8:	1800ed26 	beq	r3,zero,9a0 <___vfprintf_internal_r+0x430>
     5ec:	d9012917 	ldw	r4,1188(sp)
     5f0:	20c00417 	ldw	r3,16(r4)
     5f4:	1800ea26 	beq	r3,zero,9a0 <___vfprintf_internal_r+0x430>
     5f8:	1100068c 	andi	r4,r2,26
     5fc:	00c00284 	movi	r3,10
     600:	20c0f026 	beq	r4,r3,9c4 <___vfprintf_internal_r+0x454>
     604:	d9010dc4 	addi	r4,sp,1079
     608:	d8810e04 	addi	r2,sp,1080
     60c:	dc413017 	ldw	r17,1216(sp)
     610:	d8c00404 	addi	r3,sp,16
     614:	d9012615 	stw	r4,1176(sp)
     618:	1109c83a 	sub	r4,r2,r4
     61c:	d8812715 	stw	r2,1180(sp)
     620:	d8c11b15 	stw	r3,1132(sp)
     624:	d8011d15 	stw	zero,1140(sp)
     628:	d8011c15 	stw	zero,1136(sp)
     62c:	802b883a 	mov	r21,r16
     630:	d8013215 	stw	zero,1224(sp)
     634:	d8013615 	stw	zero,1240(sp)
     638:	d8013515 	stw	zero,1236(sp)
     63c:	d8012c15 	stw	zero,1200(sp)
     640:	1813883a 	mov	r9,r3
     644:	d9013915 	stw	r4,1252(sp)
     648:	a8800007 	ldb	r2,0(r21)
     64c:	1002f326 	beq	r2,zero,121c <___vfprintf_internal_r+0xcac>
     650:	00c00944 	movi	r3,37
     654:	a825883a 	mov	r18,r21
     658:	10c0021e 	bne	r2,r3,664 <___vfprintf_internal_r+0xf4>
     65c:	00001406 	br	6b0 <___vfprintf_internal_r+0x140>
     660:	10c00326 	beq	r2,r3,670 <___vfprintf_internal_r+0x100>
     664:	94800044 	addi	r18,r18,1
     668:	90800007 	ldb	r2,0(r18)
     66c:	103ffc1e 	bne	r2,zero,660 <___vfprintf_internal_r+0xf0>
     670:	9561c83a 	sub	r16,r18,r21
     674:	80000e26 	beq	r16,zero,6b0 <___vfprintf_internal_r+0x140>
     678:	da011d17 	ldw	r8,1140(sp)
     67c:	d8c11c17 	ldw	r3,1136(sp)
     680:	4d400015 	stw	r21,0(r9)
     684:	4c000115 	stw	r16,4(r9)
     688:	4411883a 	add	r8,r8,r16
     68c:	18c00044 	addi	r3,r3,1
     690:	da011d15 	stw	r8,1140(sp)
     694:	d8c11c15 	stw	r3,1136(sp)
     698:	008001c4 	movi	r2,7
     69c:	10c11016 	blt	r2,r3,ae0 <___vfprintf_internal_r+0x570>
     6a0:	4a400204 	addi	r9,r9,8
     6a4:	d8812c17 	ldw	r2,1200(sp)
     6a8:	1405883a 	add	r2,r2,r16
     6ac:	d8812c15 	stw	r2,1200(sp)
     6b0:	90800007 	ldb	r2,0(r18)
     6b4:	1000ee26 	beq	r2,zero,a70 <___vfprintf_internal_r+0x500>
     6b8:	95400044 	addi	r21,r18,1
     6bc:	94800047 	ldb	r18,1(r18)
     6c0:	073fffc4 	movi	fp,-1
     6c4:	e007883a 	mov	r3,fp
     6c8:	d8012585 	stb	zero,1174(sp)
     6cc:	d8012e15 	stw	zero,1208(sp)
     6d0:	0021883a 	mov	r16,zero
     6d4:	05001604 	movi	r20,88
     6d8:	04c00244 	movi	r19,9
     6dc:	4839883a 	mov	fp,r9
     6e0:	ad400044 	addi	r21,r21,1
     6e4:	90bff804 	addi	r2,r18,-32
     6e8:	a080462e 	bgeu	r20,r2,804 <___vfprintf_internal_r+0x294>
     6ec:	e013883a 	mov	r9,fp
     6f0:	9000df26 	beq	r18,zero,a70 <___vfprintf_internal_r+0x500>
     6f4:	00c00044 	movi	r3,1
     6f8:	d8c12815 	stw	r3,1184(sp)
     6fc:	dc810405 	stb	r18,1040(sp)
     700:	d8012585 	stb	zero,1174(sp)
     704:	d8c12b15 	stw	r3,1196(sp)
     708:	dcc10404 	addi	r19,sp,1040
     70c:	d8013115 	stw	zero,1220(sp)
     710:	80c0008c 	andi	r3,r16,2
     714:	d8c12a15 	stw	r3,1192(sp)
     718:	18000326 	beq	r3,zero,728 <___vfprintf_internal_r+0x1b8>
     71c:	d8c12817 	ldw	r3,1184(sp)
     720:	18c00084 	addi	r3,r3,2
     724:	d8c12815 	stw	r3,1184(sp)
     728:	80c0210c 	andi	r3,r16,132
     72c:	d8c12f15 	stw	r3,1212(sp)
     730:	1802251e 	bne	r3,zero,fc8 <___vfprintf_internal_r+0xa58>
     734:	d9012e17 	ldw	r4,1208(sp)
     738:	d8c12817 	ldw	r3,1184(sp)
     73c:	20edc83a 	sub	r22,r4,r3
     740:	0582210e 	bge	zero,r22,fc8 <___vfprintf_internal_r+0xa58>
     744:	02800404 	movi	r10,16
     748:	da011d17 	ldw	r8,1140(sp)
     74c:	d8c11c17 	ldw	r3,1136(sp)
     750:	05c00074 	movhi	r23,1
     754:	bdc02084 	addi	r23,r23,130
     758:	5580200e 	bge	r10,r22,7dc <___vfprintf_internal_r+0x26c>
     75c:	dc813815 	stw	r18,1248(sp)
     760:	5039883a 	mov	fp,r10
     764:	b825883a 	mov	r18,r23
     768:	050001c4 	movi	r20,7
     76c:	b02f883a 	mov	r23,r22
     770:	802d883a 	mov	r22,r16
     774:	dc012917 	ldw	r16,1188(sp)
     778:	00000306 	br	788 <___vfprintf_internal_r+0x218>
     77c:	bdfffc04 	addi	r23,r23,-16
     780:	4a400204 	addi	r9,r9,8
     784:	e5c0110e 	bge	fp,r23,7cc <___vfprintf_internal_r+0x25c>
     788:	4c800015 	stw	r18,0(r9)
     78c:	4f000115 	stw	fp,4(r9)
     790:	42000404 	addi	r8,r8,16
     794:	18c00044 	addi	r3,r3,1
     798:	da011d15 	stw	r8,1140(sp)
     79c:	d8c11c15 	stw	r3,1136(sp)
     7a0:	a0fff60e 	bge	r20,r3,77c <___vfprintf_internal_r+0x20c>
     7a4:	8809883a 	mov	r4,r17
     7a8:	800b883a 	mov	r5,r16
     7ac:	d9811b04 	addi	r6,sp,1132
     7b0:	000053c0 	call	53c <__sprint_r>
     7b4:	1000b41e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
     7b8:	bdfffc04 	addi	r23,r23,-16
     7bc:	da011d17 	ldw	r8,1140(sp)
     7c0:	d8c11c17 	ldw	r3,1136(sp)
     7c4:	da400404 	addi	r9,sp,16
     7c8:	e5ffef16 	blt	fp,r23,788 <___vfprintf_internal_r+0x218>
     7cc:	b021883a 	mov	r16,r22
     7d0:	b82d883a 	mov	r22,r23
     7d4:	902f883a 	mov	r23,r18
     7d8:	dc813817 	ldw	r18,1248(sp)
     7dc:	4dc00015 	stw	r23,0(r9)
     7e0:	4d800115 	stw	r22,4(r9)
     7e4:	4591883a 	add	r8,r8,r22
     7e8:	18c00044 	addi	r3,r3,1
     7ec:	da011d15 	stw	r8,1140(sp)
     7f0:	d8c11c15 	stw	r3,1136(sp)
     7f4:	008001c4 	movi	r2,7
     7f8:	10c3fe16 	blt	r2,r3,17f4 <___vfprintf_internal_r+0x1284>
     7fc:	4a400204 	addi	r9,r9,8
     800:	0001f306 	br	fd0 <___vfprintf_internal_r+0xa60>
     804:	1085883a 	add	r2,r2,r2
     808:	1085883a 	add	r2,r2,r2
     80c:	01000034 	movhi	r4,0
     810:	21020804 	addi	r4,r4,2080
     814:	1105883a 	add	r2,r2,r4
     818:	10800017 	ldw	r2,0(r2)
     81c:	1000683a 	jmp	r2
     820:	00000efc 	xorhi	zero,zero,59
     824:	000006ec 	andhi	zero,zero,27
     828:	000006ec 	andhi	zero,zero,27
     82c:	00000f14 	movui	zero,60
     830:	000006ec 	andhi	zero,zero,27
     834:	000006ec 	andhi	zero,zero,27
     838:	000006ec 	andhi	zero,zero,27
     83c:	000006ec 	andhi	zero,zero,27
     840:	000006ec 	andhi	zero,zero,27
     844:	000006ec 	andhi	zero,zero,27
     848:	00000dcc 	andi	zero,zero,55
     84c:	00000f60 	cmpeqi	zero,zero,61
     850:	000006ec 	andhi	zero,zero,27
     854:	00000994 	movui	zero,38
     858:	00000d34 	movhi	zero,52
     85c:	000006ec 	andhi	zero,zero,27
     860:	00000f20 	cmpeqi	zero,zero,60
     864:	00000f2c 	andhi	zero,zero,60
     868:	00000f2c 	andhi	zero,zero,60
     86c:	00000f2c 	andhi	zero,zero,60
     870:	00000f2c 	andhi	zero,zero,60
     874:	00000f2c 	andhi	zero,zero,60
     878:	00000f2c 	andhi	zero,zero,60
     87c:	00000f2c 	andhi	zero,zero,60
     880:	00000f2c 	andhi	zero,zero,60
     884:	00000f2c 	andhi	zero,zero,60
     888:	000006ec 	andhi	zero,zero,27
     88c:	000006ec 	andhi	zero,zero,27
     890:	000006ec 	andhi	zero,zero,27
     894:	000006ec 	andhi	zero,zero,27
     898:	000006ec 	andhi	zero,zero,27
     89c:	000006ec 	andhi	zero,zero,27
     8a0:	000006ec 	andhi	zero,zero,27
     8a4:	000006ec 	andhi	zero,zero,27
     8a8:	000006ec 	andhi	zero,zero,27
     8ac:	000006ec 	andhi	zero,zero,27
     8b0:	00000b04 	movi	zero,44
     8b4:	00000bc4 	movi	zero,47
     8b8:	000006ec 	andhi	zero,zero,27
     8bc:	00000bc4 	movi	zero,47
     8c0:	000006ec 	andhi	zero,zero,27
     8c4:	000006ec 	andhi	zero,zero,27
     8c8:	000006ec 	andhi	zero,zero,27
     8cc:	000006ec 	andhi	zero,zero,27
     8d0:	00000c58 	cmpnei	zero,zero,49
     8d4:	000006ec 	andhi	zero,zero,27
     8d8:	000006ec 	andhi	zero,zero,27
     8dc:	00000c64 	muli	zero,zero,49
     8e0:	000006ec 	andhi	zero,zero,27
     8e4:	000006ec 	andhi	zero,zero,27
     8e8:	000006ec 	andhi	zero,zero,27
     8ec:	000006ec 	andhi	zero,zero,27
     8f0:	000006ec 	andhi	zero,zero,27
     8f4:	00000c9c 	xori	zero,zero,50
     8f8:	000006ec 	andhi	zero,zero,27
     8fc:	000006ec 	andhi	zero,zero,27
     900:	00000cd8 	cmpnei	zero,zero,51
     904:	000006ec 	andhi	zero,zero,27
     908:	000006ec 	andhi	zero,zero,27
     90c:	000006ec 	andhi	zero,zero,27
     910:	000006ec 	andhi	zero,zero,27
     914:	000006ec 	andhi	zero,zero,27
     918:	000006ec 	andhi	zero,zero,27
     91c:	000006ec 	andhi	zero,zero,27
     920:	000006ec 	andhi	zero,zero,27
     924:	000006ec 	andhi	zero,zero,27
     928:	000006ec 	andhi	zero,zero,27
     92c:	00000f70 	cmpltui	zero,zero,61
     930:	00000fa4 	muli	zero,zero,62
     934:	00000bc4 	movi	zero,47
     938:	00000bc4 	movi	zero,47
     93c:	00000bc4 	movi	zero,47
     940:	00000ef0 	cmpltui	zero,zero,59
     944:	00000fa4 	muli	zero,zero,62
     948:	000006ec 	andhi	zero,zero,27
     94c:	000006ec 	andhi	zero,zero,27
     950:	00000d7c 	xorhi	zero,zero,53
     954:	000006ec 	andhi	zero,zero,27
     958:	00000d94 	movui	zero,54
     95c:	00000fb0 	cmpltui	zero,zero,62
     960:	00000df4 	movhi	zero,55
     964:	00000e44 	movi	zero,57
     968:	000006ec 	andhi	zero,zero,27
     96c:	00000e50 	cmplti	zero,zero,57
     970:	000006ec 	andhi	zero,zero,27
     974:	00000fbc 	xorhi	zero,zero,62
     978:	000006ec 	andhi	zero,zero,27
     97c:	000006ec 	andhi	zero,zero,27
     980:	00000eb4 	movhi	zero,58
     984:	d9012e17 	ldw	r4,1208(sp)
     988:	d8812d15 	stw	r2,1204(sp)
     98c:	0109c83a 	sub	r4,zero,r4
     990:	d9012e15 	stw	r4,1208(sp)
     994:	84000114 	ori	r16,r16,4
     998:	ac800007 	ldb	r18,0(r21)
     99c:	003f5006 	br	6e0 <___vfprintf_internal_r+0x170>
     9a0:	d9013017 	ldw	r4,1216(sp)
     9a4:	d9412917 	ldw	r5,1188(sp)
     9a8:	00024100 	call	2410 <__swsetup_r>
     9ac:	10003d1e 	bne	r2,zero,aa4 <___vfprintf_internal_r+0x534>
     9b0:	d8c12917 	ldw	r3,1188(sp)
     9b4:	1880030b 	ldhu	r2,12(r3)
     9b8:	00c00284 	movi	r3,10
     9bc:	1100068c 	andi	r4,r2,26
     9c0:	20ff101e 	bne	r4,r3,604 <___vfprintf_internal_r+0x94>
     9c4:	d9012917 	ldw	r4,1188(sp)
     9c8:	20c0038b 	ldhu	r3,14(r4)
     9cc:	193fffcc 	andi	r4,r3,65535
     9d0:	2120001c 	xori	r4,r4,32768
     9d4:	21200004 	addi	r4,r4,-32768
     9d8:	203f0a16 	blt	r4,zero,604 <___vfprintf_internal_r+0x94>
     9dc:	d9012917 	ldw	r4,1188(sp)
     9e0:	d9c12d17 	ldw	r7,1204(sp)
     9e4:	10bfff4c 	andi	r2,r2,65533
     9e8:	22800717 	ldw	r10,28(r4)
     9ec:	22400917 	ldw	r9,36(r4)
     9f0:	d9013017 	ldw	r4,1216(sp)
     9f4:	02010004 	movi	r8,1024
     9f8:	d881070d 	sth	r2,1052(sp)
     9fc:	d9410404 	addi	r5,sp,1040
     a00:	d8800404 	addi	r2,sp,16
     a04:	800d883a 	mov	r6,r16
     a08:	d8c1078d 	sth	r3,1054(sp)
     a0c:	da810b15 	stw	r10,1068(sp)
     a10:	da410d15 	stw	r9,1076(sp)
     a14:	d8810415 	stw	r2,1040(sp)
     a18:	d8810815 	stw	r2,1056(sp)
     a1c:	da010615 	stw	r8,1048(sp)
     a20:	da010915 	stw	r8,1060(sp)
     a24:	d8010a15 	stw	zero,1064(sp)
     a28:	00005700 	call	570 <___vfprintf_internal_r>
     a2c:	d8812c15 	stw	r2,1200(sp)
     a30:	10000416 	blt	r2,zero,a44 <___vfprintf_internal_r+0x4d4>
     a34:	d9013017 	ldw	r4,1216(sp)
     a38:	d9410404 	addi	r5,sp,1040
     a3c:	0003ddc0 	call	3ddc <_fflush_r>
     a40:	1006501e 	bne	r2,zero,2384 <___vfprintf_internal_r+0x1e14>
     a44:	d881070b 	ldhu	r2,1052(sp)
     a48:	1080100c 	andi	r2,r2,64
     a4c:	10bfffcc 	andi	r2,r2,65535
     a50:	10a0001c 	xori	r2,r2,32768
     a54:	10a00004 	addi	r2,r2,-32768
     a58:	10001426 	beq	r2,zero,aac <___vfprintf_internal_r+0x53c>
     a5c:	d8c12917 	ldw	r3,1188(sp)
     a60:	1880030b 	ldhu	r2,12(r3)
     a64:	10801014 	ori	r2,r2,64
     a68:	1880030d 	sth	r2,12(r3)
     a6c:	00000f06 	br	aac <___vfprintf_internal_r+0x53c>
     a70:	d8811d17 	ldw	r2,1140(sp)
     a74:	10000426 	beq	r2,zero,a88 <___vfprintf_internal_r+0x518>
     a78:	d9013017 	ldw	r4,1216(sp)
     a7c:	d9412917 	ldw	r5,1188(sp)
     a80:	d9811b04 	addi	r6,sp,1132
     a84:	000053c0 	call	53c <__sprint_r>
     a88:	d8c12917 	ldw	r3,1188(sp)
     a8c:	1880030b 	ldhu	r2,12(r3)
     a90:	1080100c 	andi	r2,r2,64
     a94:	10bfffcc 	andi	r2,r2,65535
     a98:	10a0001c 	xori	r2,r2,32768
     a9c:	10a00004 	addi	r2,r2,-32768
     aa0:	10000226 	beq	r2,zero,aac <___vfprintf_internal_r+0x53c>
     aa4:	00bfffc4 	movi	r2,-1
     aa8:	d8812c15 	stw	r2,1200(sp)
     aac:	d8812c17 	ldw	r2,1200(sp)
     ab0:	dfc14617 	ldw	ra,1304(sp)
     ab4:	df014517 	ldw	fp,1300(sp)
     ab8:	ddc14417 	ldw	r23,1296(sp)
     abc:	dd814317 	ldw	r22,1292(sp)
     ac0:	dd414217 	ldw	r21,1288(sp)
     ac4:	dd014117 	ldw	r20,1284(sp)
     ac8:	dcc14017 	ldw	r19,1280(sp)
     acc:	dc813f17 	ldw	r18,1276(sp)
     ad0:	dc413e17 	ldw	r17,1272(sp)
     ad4:	dc013d17 	ldw	r16,1268(sp)
     ad8:	dec14704 	addi	sp,sp,1308
     adc:	f800283a 	ret
     ae0:	d9412917 	ldw	r5,1188(sp)
     ae4:	8809883a 	mov	r4,r17
     ae8:	d9811b04 	addi	r6,sp,1132
     aec:	000053c0 	call	53c <__sprint_r>
     af0:	103fe51e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
     af4:	da400404 	addi	r9,sp,16
     af8:	003eea06 	br	6a4 <___vfprintf_internal_r+0x134>
     afc:	00040980 	call	4098 <__sinit>
     b00:	003eb306 	br	5d0 <___vfprintf_internal_r+0x60>
     b04:	e013883a 	mov	r9,fp
     b08:	84000414 	ori	r16,r16,16
     b0c:	1839883a 	mov	fp,r3
     b10:	8080080c 	andi	r2,r16,32
     b14:	10034426 	beq	r2,zero,1828 <___vfprintf_internal_r+0x12b8>
     b18:	d8c12d17 	ldw	r3,1204(sp)
     b1c:	18800117 	ldw	r2,4(r3)
     b20:	1dc00017 	ldw	r23,0(r3)
     b24:	18c00204 	addi	r3,r3,8
     b28:	d8c12d15 	stw	r3,1204(sp)
     b2c:	102d883a 	mov	r22,r2
     b30:	1003020e 	bge	r2,zero,173c <___vfprintf_internal_r+0x11cc>
     b34:	05efc83a 	sub	r23,zero,r23
     b38:	b804c03a 	cmpne	r2,r23,zero
     b3c:	05adc83a 	sub	r22,zero,r22
     b40:	b0adc83a 	sub	r22,r22,r2
     b44:	00800b44 	movi	r2,45
     b48:	d8812585 	stb	r2,1174(sp)
     b4c:	00c00044 	movi	r3,1
     b50:	bd84b03a 	or	r2,r23,r22
     b54:	e0000216 	blt	fp,zero,b60 <___vfprintf_internal_r+0x5f0>
     b58:	013fdfc4 	movi	r4,-129
     b5c:	8120703a 	and	r16,r16,r4
     b60:	1001cc1e 	bne	r2,zero,1294 <___vfprintf_internal_r+0xd24>
     b64:	e001cb1e 	bne	fp,zero,1294 <___vfprintf_internal_r+0xd24>
     b68:	18c03fcc 	andi	r3,r3,255
     b6c:	1802ca1e 	bne	r3,zero,1698 <___vfprintf_internal_r+0x1128>
     b70:	8080004c 	andi	r2,r16,1
     b74:	1002c826 	beq	r2,zero,1698 <___vfprintf_internal_r+0x1128>
     b78:	d8c13917 	ldw	r3,1252(sp)
     b7c:	00800c04 	movi	r2,48
     b80:	d8810dc5 	stb	r2,1079(sp)
     b84:	d8c12b15 	stw	r3,1196(sp)
     b88:	dcc10dc4 	addi	r19,sp,1079
     b8c:	d8812b17 	ldw	r2,1196(sp)
     b90:	d8812815 	stw	r2,1184(sp)
     b94:	1700010e 	bge	r2,fp,b9c <___vfprintf_internal_r+0x62c>
     b98:	df012815 	stw	fp,1184(sp)
     b9c:	d8812583 	ldbu	r2,1174(sp)
     ba0:	df013115 	stw	fp,1220(sp)
     ba4:	10803fcc 	andi	r2,r2,255
     ba8:	1080201c 	xori	r2,r2,128
     bac:	10bfe004 	addi	r2,r2,-128
     bb0:	103ed726 	beq	r2,zero,710 <___vfprintf_internal_r+0x1a0>
     bb4:	d8c12817 	ldw	r3,1184(sp)
     bb8:	18c00044 	addi	r3,r3,1
     bbc:	d8c12815 	stw	r3,1184(sp)
     bc0:	003ed306 	br	710 <___vfprintf_internal_r+0x1a0>
     bc4:	8080020c 	andi	r2,r16,8
     bc8:	e013883a 	mov	r9,fp
     bcc:	1839883a 	mov	fp,r3
     bd0:	1003a626 	beq	r2,zero,1a6c <___vfprintf_internal_r+0x14fc>
     bd4:	d9012d17 	ldw	r4,1204(sp)
     bd8:	25800017 	ldw	r22,0(r4)
     bdc:	25000117 	ldw	r20,4(r4)
     be0:	21000204 	addi	r4,r4,8
     be4:	d9012d15 	stw	r4,1204(sp)
     be8:	dd813315 	stw	r22,1228(sp)
     bec:	dd013415 	stw	r20,1232(sp)
     bf0:	b009883a 	mov	r4,r22
     bf4:	a00b883a 	mov	r5,r20
     bf8:	da413c15 	stw	r9,1264(sp)
     bfc:	00072240 	call	7224 <__isinfd>
     c00:	da413c17 	ldw	r9,1264(sp)
     c04:	b009883a 	mov	r4,r22
     c08:	a00b883a 	mov	r5,r20
     c0c:	10041d26 	beq	r2,zero,1c84 <___vfprintf_internal_r+0x1714>
     c10:	000d883a 	mov	r6,zero
     c14:	000f883a 	mov	r7,zero
     c18:	0008ff80 	call	8ff8 <__ltdf2>
     c1c:	da413c17 	ldw	r9,1264(sp)
     c20:	1004da16 	blt	r2,zero,1f8c <___vfprintf_internal_r+0x1a1c>
     c24:	d8812583 	ldbu	r2,1174(sp)
     c28:	00c011c4 	movi	r3,71
     c2c:	1c83d116 	blt	r3,r18,1b74 <___vfprintf_internal_r+0x1604>
     c30:	04c00074 	movhi	r19,1
     c34:	9cc01004 	addi	r19,r19,64
     c38:	00c000c4 	movi	r3,3
     c3c:	d8c12815 	stw	r3,1184(sp)
     c40:	00ffdfc4 	movi	r3,-129
     c44:	80e0703a 	and	r16,r16,r3
     c48:	d8c12817 	ldw	r3,1184(sp)
     c4c:	d8013115 	stw	zero,1220(sp)
     c50:	d8c12b15 	stw	r3,1196(sp)
     c54:	003fd306 	br	ba4 <___vfprintf_internal_r+0x634>
     c58:	84000214 	ori	r16,r16,8
     c5c:	ac800007 	ldb	r18,0(r21)
     c60:	003e9f06 	br	6e0 <___vfprintf_internal_r+0x170>
     c64:	e013883a 	mov	r9,fp
     c68:	84000414 	ori	r16,r16,16
     c6c:	1839883a 	mov	fp,r3
     c70:	8080080c 	andi	r2,r16,32
     c74:	10031d26 	beq	r2,zero,18ec <___vfprintf_internal_r+0x137c>
     c78:	d8812d17 	ldw	r2,1204(sp)
     c7c:	0007883a 	mov	r3,zero
     c80:	15c00017 	ldw	r23,0(r2)
     c84:	15800117 	ldw	r22,4(r2)
     c88:	10800204 	addi	r2,r2,8
     c8c:	d8812d15 	stw	r2,1204(sp)
     c90:	d8012585 	stb	zero,1174(sp)
     c94:	bd84b03a 	or	r2,r23,r22
     c98:	003fae06 	br	b54 <___vfprintf_internal_r+0x5e4>
     c9c:	e013883a 	mov	r9,fp
     ca0:	84000414 	ori	r16,r16,16
     ca4:	1839883a 	mov	fp,r3
     ca8:	8080080c 	andi	r2,r16,32
     cac:	1002e726 	beq	r2,zero,184c <___vfprintf_internal_r+0x12dc>
     cb0:	d8c12d17 	ldw	r3,1204(sp)
     cb4:	d9012d17 	ldw	r4,1204(sp)
     cb8:	1dc00017 	ldw	r23,0(r3)
     cbc:	1d800117 	ldw	r22,4(r3)
     cc0:	21000204 	addi	r4,r4,8
     cc4:	00c00044 	movi	r3,1
     cc8:	d9012d15 	stw	r4,1204(sp)
     ccc:	bd84b03a 	or	r2,r23,r22
     cd0:	d8012585 	stb	zero,1174(sp)
     cd4:	003f9f06 	br	b54 <___vfprintf_internal_r+0x5e4>
     cd8:	e013883a 	mov	r9,fp
     cdc:	1839883a 	mov	fp,r3
     ce0:	00c00074 	movhi	r3,1
     ce4:	18c01404 	addi	r3,r3,80
     ce8:	d8c13615 	stw	r3,1240(sp)
     cec:	8080080c 	andi	r2,r16,32
     cf0:	10007726 	beq	r2,zero,ed0 <___vfprintf_internal_r+0x960>
     cf4:	d9012d17 	ldw	r4,1204(sp)
     cf8:	25c00017 	ldw	r23,0(r4)
     cfc:	25800117 	ldw	r22,4(r4)
     d00:	21000204 	addi	r4,r4,8
     d04:	d9012d15 	stw	r4,1204(sp)
     d08:	8080004c 	andi	r2,r16,1
     d0c:	1002c226 	beq	r2,zero,1818 <___vfprintf_internal_r+0x12a8>
     d10:	bd84b03a 	or	r2,r23,r22
     d14:	10035d26 	beq	r2,zero,1a8c <___vfprintf_internal_r+0x151c>
     d18:	00c00c04 	movi	r3,48
     d1c:	d8c12505 	stb	r3,1172(sp)
     d20:	dc812545 	stb	r18,1173(sp)
     d24:	84000094 	ori	r16,r16,2
     d28:	00c00084 	movi	r3,2
     d2c:	d8012585 	stb	zero,1174(sp)
     d30:	003f8806 	br	b54 <___vfprintf_internal_r+0x5e4>
     d34:	ac800007 	ldb	r18,0(r21)
     d38:	00c00a84 	movi	r3,42
     d3c:	adc00044 	addi	r23,r21,1
     d40:	90c57526 	beq	r18,r3,2318 <___vfprintf_internal_r+0x1da8>
     d44:	95bff404 	addi	r22,r18,-48
     d48:	0009883a 	mov	r4,zero
     d4c:	9d84ff36 	bltu	r19,r22,214c <___vfprintf_internal_r+0x1bdc>
     d50:	01400284 	movi	r5,10
     d54:	00094480 	call	9448 <__mulsi3>
     d58:	bc800007 	ldb	r18,0(r23)
     d5c:	b089883a 	add	r4,r22,r2
     d60:	bdc00044 	addi	r23,r23,1
     d64:	95bff404 	addi	r22,r18,-48
     d68:	9dbff92e 	bgeu	r19,r22,d50 <___vfprintf_internal_r+0x7e0>
     d6c:	2007883a 	mov	r3,r4
     d70:	20044316 	blt	r4,zero,1e80 <___vfprintf_internal_r+0x1910>
     d74:	b82b883a 	mov	r21,r23
     d78:	003e5a06 	br	6e4 <___vfprintf_internal_r+0x174>
     d7c:	ac800007 	ldb	r18,0(r21)
     d80:	01001b04 	movi	r4,108
     d84:	a805883a 	mov	r2,r21
     d88:	91045526 	beq	r18,r4,1ee0 <___vfprintf_internal_r+0x1970>
     d8c:	84000414 	ori	r16,r16,16
     d90:	003e5306 	br	6e0 <___vfprintf_internal_r+0x170>
     d94:	8080080c 	andi	r2,r16,32
     d98:	e013883a 	mov	r9,fp
     d9c:	10034026 	beq	r2,zero,1aa0 <___vfprintf_internal_r+0x1530>
     da0:	d9012d17 	ldw	r4,1204(sp)
     da4:	20800017 	ldw	r2,0(r4)
     da8:	d9012c17 	ldw	r4,1200(sp)
     dac:	2007d7fa 	srai	r3,r4,31
     db0:	d9012d17 	ldw	r4,1204(sp)
     db4:	10c00115 	stw	r3,4(r2)
     db8:	21000104 	addi	r4,r4,4
     dbc:	d9012d15 	stw	r4,1204(sp)
     dc0:	d9012c17 	ldw	r4,1200(sp)
     dc4:	11000015 	stw	r4,0(r2)
     dc8:	003e1f06 	br	648 <___vfprintf_internal_r+0xd8>
     dcc:	d9012d17 	ldw	r4,1204(sp)
     dd0:	21000017 	ldw	r4,0(r4)
     dd4:	d9012e15 	stw	r4,1208(sp)
     dd8:	d9012d17 	ldw	r4,1204(sp)
     ddc:	20800104 	addi	r2,r4,4
     de0:	d9012e17 	ldw	r4,1208(sp)
     de4:	203ee716 	blt	r4,zero,984 <___vfprintf_internal_r+0x414>
     de8:	d8812d15 	stw	r2,1204(sp)
     dec:	ac800007 	ldb	r18,0(r21)
     df0:	003e3b06 	br	6e0 <___vfprintf_internal_r+0x170>
     df4:	e013883a 	mov	r9,fp
     df8:	1839883a 	mov	fp,r3
     dfc:	d8c12d17 	ldw	r3,1204(sp)
     e00:	00800c04 	movi	r2,48
     e04:	01000074 	movhi	r4,1
     e08:	21001904 	addi	r4,r4,100
     e0c:	1dc00017 	ldw	r23,0(r3)
     e10:	18c00104 	addi	r3,r3,4
     e14:	d8812505 	stb	r2,1172(sp)
     e18:	00801e04 	movi	r2,120
     e1c:	d8812545 	stb	r2,1173(sp)
     e20:	d8c12d15 	stw	r3,1204(sp)
     e24:	002d883a 	mov	r22,zero
     e28:	84000094 	ori	r16,r16,2
     e2c:	d9013615 	stw	r4,1240(sp)
     e30:	00c00084 	movi	r3,2
     e34:	04801e04 	movi	r18,120
     e38:	b805883a 	mov	r2,r23
     e3c:	d8012585 	stb	zero,1174(sp)
     e40:	003f4406 	br	b54 <___vfprintf_internal_r+0x5e4>
     e44:	84000814 	ori	r16,r16,32
     e48:	ac800007 	ldb	r18,0(r21)
     e4c:	003e2406 	br	6e0 <___vfprintf_internal_r+0x170>
     e50:	d8812d17 	ldw	r2,1204(sp)
     e54:	d8012585 	stb	zero,1174(sp)
     e58:	e013883a 	mov	r9,fp
     e5c:	14c00017 	ldw	r19,0(r2)
     e60:	1839883a 	mov	fp,r3
     e64:	15c00104 	addi	r23,r2,4
     e68:	98045526 	beq	r19,zero,1fc0 <___vfprintf_internal_r+0x1a50>
     e6c:	9809883a 	mov	r4,r19
     e70:	18043116 	blt	r3,zero,1f38 <___vfprintf_internal_r+0x19c8>
     e74:	000b883a 	mov	r5,zero
     e78:	180d883a 	mov	r6,r3
     e7c:	da413c15 	stw	r9,1264(sp)
     e80:	00057380 	call	5738 <memchr>
     e84:	da413c17 	ldw	r9,1264(sp)
     e88:	10047a26 	beq	r2,zero,2074 <___vfprintf_internal_r+0x1b04>
     e8c:	14c5c83a 	sub	r2,r2,r19
     e90:	d8812b15 	stw	r2,1196(sp)
     e94:	e083d40e 	bge	fp,r2,1de8 <___vfprintf_internal_r+0x1878>
     e98:	df012815 	stw	fp,1184(sp)
     e9c:	e004e416 	blt	fp,zero,2230 <___vfprintf_internal_r+0x1cc0>
     ea0:	d8812583 	ldbu	r2,1174(sp)
     ea4:	df012b15 	stw	fp,1196(sp)
     ea8:	ddc12d15 	stw	r23,1204(sp)
     eac:	d8013115 	stw	zero,1220(sp)
     eb0:	003f3c06 	br	ba4 <___vfprintf_internal_r+0x634>
     eb4:	00800074 	movhi	r2,1
     eb8:	10801904 	addi	r2,r2,100
     ebc:	d8813615 	stw	r2,1240(sp)
     ec0:	8080080c 	andi	r2,r16,32
     ec4:	e013883a 	mov	r9,fp
     ec8:	1839883a 	mov	fp,r3
     ecc:	103f891e 	bne	r2,zero,cf4 <___vfprintf_internal_r+0x784>
     ed0:	8080040c 	andi	r2,r16,16
     ed4:	1002c326 	beq	r2,zero,19e4 <___vfprintf_internal_r+0x1474>
     ed8:	d8812d17 	ldw	r2,1204(sp)
     edc:	002d883a 	mov	r22,zero
     ee0:	15c00017 	ldw	r23,0(r2)
     ee4:	10800104 	addi	r2,r2,4
     ee8:	d8812d15 	stw	r2,1204(sp)
     eec:	003f8606 	br	d08 <___vfprintf_internal_r+0x798>
     ef0:	84001014 	ori	r16,r16,64
     ef4:	ac800007 	ldb	r18,0(r21)
     ef8:	003df906 	br	6e0 <___vfprintf_internal_r+0x170>
     efc:	d8812587 	ldb	r2,1174(sp)
     f00:	1002e51e 	bne	r2,zero,1a98 <___vfprintf_internal_r+0x1528>
     f04:	00800804 	movi	r2,32
     f08:	d8812585 	stb	r2,1174(sp)
     f0c:	ac800007 	ldb	r18,0(r21)
     f10:	003df306 	br	6e0 <___vfprintf_internal_r+0x170>
     f14:	84000054 	ori	r16,r16,1
     f18:	ac800007 	ldb	r18,0(r21)
     f1c:	003df006 	br	6e0 <___vfprintf_internal_r+0x170>
     f20:	84002014 	ori	r16,r16,128
     f24:	ac800007 	ldb	r18,0(r21)
     f28:	003ded06 	br	6e0 <___vfprintf_internal_r+0x170>
     f2c:	0009883a 	mov	r4,zero
     f30:	95bff404 	addi	r22,r18,-48
     f34:	182f883a 	mov	r23,r3
     f38:	01400284 	movi	r5,10
     f3c:	00094480 	call	9448 <__mulsi3>
     f40:	ac800007 	ldb	r18,0(r21)
     f44:	1589883a 	add	r4,r2,r22
     f48:	ad400044 	addi	r21,r21,1
     f4c:	95bff404 	addi	r22,r18,-48
     f50:	9dbff92e 	bgeu	r19,r22,f38 <___vfprintf_internal_r+0x9c8>
     f54:	b807883a 	mov	r3,r23
     f58:	d9012e15 	stw	r4,1208(sp)
     f5c:	003de106 	br	6e4 <___vfprintf_internal_r+0x174>
     f60:	00800ac4 	movi	r2,43
     f64:	d8812585 	stb	r2,1174(sp)
     f68:	ac800007 	ldb	r18,0(r21)
     f6c:	003ddc06 	br	6e0 <___vfprintf_internal_r+0x170>
     f70:	d8c12d17 	ldw	r3,1204(sp)
     f74:	d9012d17 	ldw	r4,1204(sp)
     f78:	e013883a 	mov	r9,fp
     f7c:	18800017 	ldw	r2,0(r3)
     f80:	21000104 	addi	r4,r4,4
     f84:	00c00044 	movi	r3,1
     f88:	d8c12815 	stw	r3,1184(sp)
     f8c:	d8012585 	stb	zero,1174(sp)
     f90:	d8810405 	stb	r2,1040(sp)
     f94:	d9012d15 	stw	r4,1204(sp)
     f98:	d8c12b15 	stw	r3,1196(sp)
     f9c:	dcc10404 	addi	r19,sp,1040
     fa0:	003dda06 	br	70c <___vfprintf_internal_r+0x19c>
     fa4:	e013883a 	mov	r9,fp
     fa8:	1839883a 	mov	fp,r3
     fac:	003ed806 	br	b10 <___vfprintf_internal_r+0x5a0>
     fb0:	e013883a 	mov	r9,fp
     fb4:	1839883a 	mov	fp,r3
     fb8:	003f2d06 	br	c70 <___vfprintf_internal_r+0x700>
     fbc:	e013883a 	mov	r9,fp
     fc0:	1839883a 	mov	fp,r3
     fc4:	003f3806 	br	ca8 <___vfprintf_internal_r+0x738>
     fc8:	da011d17 	ldw	r8,1140(sp)
     fcc:	d8c11c17 	ldw	r3,1136(sp)
     fd0:	d8812587 	ldb	r2,1174(sp)
     fd4:	10000b26 	beq	r2,zero,1004 <___vfprintf_internal_r+0xa94>
     fd8:	d8812584 	addi	r2,sp,1174
     fdc:	48800015 	stw	r2,0(r9)
     fe0:	00800044 	movi	r2,1
     fe4:	48800115 	stw	r2,4(r9)
     fe8:	4091883a 	add	r8,r8,r2
     fec:	1887883a 	add	r3,r3,r2
     ff0:	da011d15 	stw	r8,1140(sp)
     ff4:	d8c11c15 	stw	r3,1136(sp)
     ff8:	008001c4 	movi	r2,7
     ffc:	10c18e16 	blt	r2,r3,1638 <___vfprintf_internal_r+0x10c8>
    1000:	4a400204 	addi	r9,r9,8
    1004:	d9012a17 	ldw	r4,1192(sp)
    1008:	20000b26 	beq	r4,zero,1038 <___vfprintf_internal_r+0xac8>
    100c:	d8812504 	addi	r2,sp,1172
    1010:	48800015 	stw	r2,0(r9)
    1014:	00800084 	movi	r2,2
    1018:	48800115 	stw	r2,4(r9)
    101c:	4091883a 	add	r8,r8,r2
    1020:	18c00044 	addi	r3,r3,1
    1024:	da011d15 	stw	r8,1140(sp)
    1028:	d8c11c15 	stw	r3,1136(sp)
    102c:	008001c4 	movi	r2,7
    1030:	10c17816 	blt	r2,r3,1614 <___vfprintf_internal_r+0x10a4>
    1034:	4a400204 	addi	r9,r9,8
    1038:	d9012f17 	ldw	r4,1212(sp)
    103c:	00802004 	movi	r2,128
    1040:	2080fc26 	beq	r4,r2,1434 <___vfprintf_internal_r+0xec4>
    1044:	d8813117 	ldw	r2,1220(sp)
    1048:	d9012b17 	ldw	r4,1196(sp)
    104c:	112fc83a 	sub	r23,r2,r4
    1050:	05c02a0e 	bge	zero,r23,10fc <___vfprintf_internal_r+0xb8c>
    1054:	07000404 	movi	fp,16
    1058:	05000074 	movhi	r20,1
    105c:	a5002484 	addi	r20,r20,146
    1060:	e5c01d0e 	bge	fp,r23,10d8 <___vfprintf_internal_r+0xb68>
    1064:	dc812a15 	stw	r18,1192(sp)
    1068:	058001c4 	movi	r22,7
    106c:	a025883a 	mov	r18,r20
    1070:	8029883a 	mov	r20,r16
    1074:	dc012917 	ldw	r16,1188(sp)
    1078:	00000306 	br	1088 <___vfprintf_internal_r+0xb18>
    107c:	bdfffc04 	addi	r23,r23,-16
    1080:	4a400204 	addi	r9,r9,8
    1084:	e5c0110e 	bge	fp,r23,10cc <___vfprintf_internal_r+0xb5c>
    1088:	4c800015 	stw	r18,0(r9)
    108c:	4f000115 	stw	fp,4(r9)
    1090:	42000404 	addi	r8,r8,16
    1094:	18c00044 	addi	r3,r3,1
    1098:	da011d15 	stw	r8,1140(sp)
    109c:	d8c11c15 	stw	r3,1136(sp)
    10a0:	b0fff60e 	bge	r22,r3,107c <___vfprintf_internal_r+0xb0c>
    10a4:	8809883a 	mov	r4,r17
    10a8:	800b883a 	mov	r5,r16
    10ac:	d9811b04 	addi	r6,sp,1132
    10b0:	000053c0 	call	53c <__sprint_r>
    10b4:	103e741e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    10b8:	bdfffc04 	addi	r23,r23,-16
    10bc:	da011d17 	ldw	r8,1140(sp)
    10c0:	d8c11c17 	ldw	r3,1136(sp)
    10c4:	da400404 	addi	r9,sp,16
    10c8:	e5ffef16 	blt	fp,r23,1088 <___vfprintf_internal_r+0xb18>
    10cc:	a021883a 	mov	r16,r20
    10d0:	9029883a 	mov	r20,r18
    10d4:	dc812a17 	ldw	r18,1192(sp)
    10d8:	4d000015 	stw	r20,0(r9)
    10dc:	4dc00115 	stw	r23,4(r9)
    10e0:	45d1883a 	add	r8,r8,r23
    10e4:	18c00044 	addi	r3,r3,1
    10e8:	da011d15 	stw	r8,1140(sp)
    10ec:	d8c11c15 	stw	r3,1136(sp)
    10f0:	008001c4 	movi	r2,7
    10f4:	10c13e16 	blt	r2,r3,15f0 <___vfprintf_internal_r+0x1080>
    10f8:	4a400204 	addi	r9,r9,8
    10fc:	8080400c 	andi	r2,r16,256
    1100:	1000831e 	bne	r2,zero,1310 <___vfprintf_internal_r+0xda0>
    1104:	d8812b17 	ldw	r2,1196(sp)
    1108:	4cc00015 	stw	r19,0(r9)
    110c:	48800115 	stw	r2,4(r9)
    1110:	4091883a 	add	r8,r8,r2
    1114:	18c00044 	addi	r3,r3,1
    1118:	da011d15 	stw	r8,1140(sp)
    111c:	d8c11c15 	stw	r3,1136(sp)
    1120:	008001c4 	movi	r2,7
    1124:	10c05316 	blt	r2,r3,1274 <___vfprintf_internal_r+0xd04>
    1128:	4a400204 	addi	r9,r9,8
    112c:	8400010c 	andi	r16,r16,4
    1130:	80002e26 	beq	r16,zero,11ec <___vfprintf_internal_r+0xc7c>
    1134:	d8812e17 	ldw	r2,1208(sp)
    1138:	d8c12817 	ldw	r3,1184(sp)
    113c:	10e1c83a 	sub	r16,r2,r3
    1140:	04002a0e 	bge	zero,r16,11ec <___vfprintf_internal_r+0xc7c>
    1144:	04800404 	movi	r18,16
    1148:	d8c11c17 	ldw	r3,1136(sp)
    114c:	05c00074 	movhi	r23,1
    1150:	bdc02084 	addi	r23,r23,130
    1154:	9400170e 	bge	r18,r16,11b4 <___vfprintf_internal_r+0xc44>
    1158:	04c001c4 	movi	r19,7
    115c:	dd012917 	ldw	r20,1188(sp)
    1160:	00000306 	br	1170 <___vfprintf_internal_r+0xc00>
    1164:	843ffc04 	addi	r16,r16,-16
    1168:	4a400204 	addi	r9,r9,8
    116c:	9400110e 	bge	r18,r16,11b4 <___vfprintf_internal_r+0xc44>
    1170:	4dc00015 	stw	r23,0(r9)
    1174:	4c800115 	stw	r18,4(r9)
    1178:	42000404 	addi	r8,r8,16
    117c:	18c00044 	addi	r3,r3,1
    1180:	da011d15 	stw	r8,1140(sp)
    1184:	d8c11c15 	stw	r3,1136(sp)
    1188:	98fff60e 	bge	r19,r3,1164 <___vfprintf_internal_r+0xbf4>
    118c:	8809883a 	mov	r4,r17
    1190:	a00b883a 	mov	r5,r20
    1194:	d9811b04 	addi	r6,sp,1132
    1198:	000053c0 	call	53c <__sprint_r>
    119c:	103e3a1e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    11a0:	843ffc04 	addi	r16,r16,-16
    11a4:	da011d17 	ldw	r8,1140(sp)
    11a8:	d8c11c17 	ldw	r3,1136(sp)
    11ac:	da400404 	addi	r9,sp,16
    11b0:	943fef16 	blt	r18,r16,1170 <___vfprintf_internal_r+0xc00>
    11b4:	4dc00015 	stw	r23,0(r9)
    11b8:	4c000115 	stw	r16,4(r9)
    11bc:	8211883a 	add	r8,r16,r8
    11c0:	18c00044 	addi	r3,r3,1
    11c4:	da011d15 	stw	r8,1140(sp)
    11c8:	d8c11c15 	stw	r3,1136(sp)
    11cc:	008001c4 	movi	r2,7
    11d0:	10c0060e 	bge	r2,r3,11ec <___vfprintf_internal_r+0xc7c>
    11d4:	d9412917 	ldw	r5,1188(sp)
    11d8:	8809883a 	mov	r4,r17
    11dc:	d9811b04 	addi	r6,sp,1132
    11e0:	000053c0 	call	53c <__sprint_r>
    11e4:	103e281e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    11e8:	da011d17 	ldw	r8,1140(sp)
    11ec:	dd012817 	ldw	r20,1184(sp)
    11f0:	d9012e17 	ldw	r4,1208(sp)
    11f4:	a100010e 	bge	r20,r4,11fc <___vfprintf_internal_r+0xc8c>
    11f8:	2029883a 	mov	r20,r4
    11fc:	d8812c17 	ldw	r2,1200(sp)
    1200:	1505883a 	add	r2,r2,r20
    1204:	d8812c15 	stw	r2,1200(sp)
    1208:	4000b91e 	bne	r8,zero,14f0 <___vfprintf_internal_r+0xf80>
    120c:	d8011c15 	stw	zero,1136(sp)
    1210:	a8800007 	ldb	r2,0(r21)
    1214:	da400404 	addi	r9,sp,16
    1218:	103d0d1e 	bne	r2,zero,650 <___vfprintf_internal_r+0xe0>
    121c:	a825883a 	mov	r18,r21
    1220:	003d2306 	br	6b0 <___vfprintf_internal_r+0x140>
    1224:	d9412917 	ldw	r5,1188(sp)
    1228:	8809883a 	mov	r4,r17
    122c:	d9811b04 	addi	r6,sp,1132
    1230:	000053c0 	call	53c <__sprint_r>
    1234:	103e141e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1238:	da011d17 	ldw	r8,1140(sp)
    123c:	da400404 	addi	r9,sp,16
    1240:	8080004c 	andi	r2,r16,1
    1244:	103fb926 	beq	r2,zero,112c <___vfprintf_internal_r+0xbbc>
    1248:	d8c11c17 	ldw	r3,1136(sp)
    124c:	d9013717 	ldw	r4,1244(sp)
    1250:	00800044 	movi	r2,1
    1254:	48800115 	stw	r2,4(r9)
    1258:	49000015 	stw	r4,0(r9)
    125c:	4091883a 	add	r8,r8,r2
    1260:	1887883a 	add	r3,r3,r2
    1264:	da011d15 	stw	r8,1140(sp)
    1268:	d8c11c15 	stw	r3,1136(sp)
    126c:	008001c4 	movi	r2,7
    1270:	10ffad0e 	bge	r2,r3,1128 <___vfprintf_internal_r+0xbb8>
    1274:	d9412917 	ldw	r5,1188(sp)
    1278:	8809883a 	mov	r4,r17
    127c:	d9811b04 	addi	r6,sp,1132
    1280:	000053c0 	call	53c <__sprint_r>
    1284:	103e001e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1288:	da400404 	addi	r9,sp,16
    128c:	da011d17 	ldw	r8,1140(sp)
    1290:	003fa606 	br	112c <___vfprintf_internal_r+0xbbc>
    1294:	18803fcc 	andi	r2,r3,255
    1298:	00c00044 	movi	r3,1
    129c:	10c10126 	beq	r2,r3,16a4 <___vfprintf_internal_r+0x1134>
    12a0:	00c00084 	movi	r3,2
    12a4:	10c0ed26 	beq	r2,r3,165c <___vfprintf_internal_r+0x10ec>
    12a8:	d8c10dc4 	addi	r3,sp,1079
    12ac:	b808d0fa 	srli	r4,r23,3
    12b0:	b00a977a 	slli	r5,r22,29
    12b4:	b02cd0fa 	srli	r22,r22,3
    12b8:	bdc001cc 	andi	r23,r23,7
    12bc:	b8800c04 	addi	r2,r23,48
    12c0:	292eb03a 	or	r23,r5,r4
    12c4:	18800005 	stb	r2,0(r3)
    12c8:	bd88b03a 	or	r4,r23,r22
    12cc:	1827883a 	mov	r19,r3
    12d0:	18ffffc4 	addi	r3,r3,-1
    12d4:	203ff51e 	bne	r4,zero,12ac <___vfprintf_internal_r+0xd3c>
    12d8:	8100004c 	andi	r4,r16,1
    12dc:	980b883a 	mov	r5,r19
    12e0:	20000726 	beq	r4,zero,1300 <___vfprintf_internal_r+0xd90>
    12e4:	10803fcc 	andi	r2,r2,255
    12e8:	1080201c 	xori	r2,r2,128
    12ec:	10bfe004 	addi	r2,r2,-128
    12f0:	01000c04 	movi	r4,48
    12f4:	11000226 	beq	r2,r4,1300 <___vfprintf_internal_r+0xd90>
    12f8:	1827883a 	mov	r19,r3
    12fc:	293fffc5 	stb	r4,-1(r5)
    1300:	d8812717 	ldw	r2,1180(sp)
    1304:	14c5c83a 	sub	r2,r2,r19
    1308:	d8812b15 	stw	r2,1196(sp)
    130c:	003e1f06 	br	b8c <___vfprintf_internal_r+0x61c>
    1310:	00801944 	movi	r2,101
    1314:	14807c0e 	bge	r2,r18,1508 <___vfprintf_internal_r+0xf98>
    1318:	d9013317 	ldw	r4,1228(sp)
    131c:	d9413417 	ldw	r5,1232(sp)
    1320:	000d883a 	mov	r6,zero
    1324:	000f883a 	mov	r7,zero
    1328:	d8c13b15 	stw	r3,1260(sp)
    132c:	da013a15 	stw	r8,1256(sp)
    1330:	da413c15 	stw	r9,1264(sp)
    1334:	0008e780 	call	8e78 <__eqdf2>
    1338:	d8c13b17 	ldw	r3,1260(sp)
    133c:	da013a17 	ldw	r8,1256(sp)
    1340:	da413c17 	ldw	r9,1264(sp)
    1344:	1001001e 	bne	r2,zero,1748 <___vfprintf_internal_r+0x11d8>
    1348:	00800074 	movhi	r2,1
    134c:	10802004 	addi	r2,r2,128
    1350:	48800015 	stw	r2,0(r9)
    1354:	00800044 	movi	r2,1
    1358:	48800115 	stw	r2,4(r9)
    135c:	4091883a 	add	r8,r8,r2
    1360:	1887883a 	add	r3,r3,r2
    1364:	da011d15 	stw	r8,1140(sp)
    1368:	d8c11c15 	stw	r3,1136(sp)
    136c:	008001c4 	movi	r2,7
    1370:	10c20316 	blt	r2,r3,1b80 <___vfprintf_internal_r+0x1610>
    1374:	4a400204 	addi	r9,r9,8
    1378:	d8812417 	ldw	r2,1168(sp)
    137c:	d8c13217 	ldw	r3,1224(sp)
    1380:	10c00216 	blt	r2,r3,138c <___vfprintf_internal_r+0xe1c>
    1384:	8080004c 	andi	r2,r16,1
    1388:	103f6826 	beq	r2,zero,112c <___vfprintf_internal_r+0xbbc>
    138c:	d8c11c17 	ldw	r3,1136(sp)
    1390:	d9013717 	ldw	r4,1244(sp)
    1394:	00800044 	movi	r2,1
    1398:	48800115 	stw	r2,4(r9)
    139c:	49000015 	stw	r4,0(r9)
    13a0:	4091883a 	add	r8,r8,r2
    13a4:	1887883a 	add	r3,r3,r2
    13a8:	da011d15 	stw	r8,1140(sp)
    13ac:	d8c11c15 	stw	r3,1136(sp)
    13b0:	008001c4 	movi	r2,7
    13b4:	10c2ce16 	blt	r2,r3,1ef0 <___vfprintf_internal_r+0x1980>
    13b8:	4a400204 	addi	r9,r9,8
    13bc:	d8813217 	ldw	r2,1224(sp)
    13c0:	14bfffc4 	addi	r18,r2,-1
    13c4:	04bf590e 	bge	zero,r18,112c <___vfprintf_internal_r+0xbbc>
    13c8:	04c00404 	movi	r19,16
    13cc:	d8c11c17 	ldw	r3,1136(sp)
    13d0:	05000074 	movhi	r20,1
    13d4:	a5002484 	addi	r20,r20,146
    13d8:	9c818a0e 	bge	r19,r18,1a04 <___vfprintf_internal_r+0x1494>
    13dc:	058001c4 	movi	r22,7
    13e0:	ddc12917 	ldw	r23,1188(sp)
    13e4:	00000306 	br	13f4 <___vfprintf_internal_r+0xe84>
    13e8:	4a400204 	addi	r9,r9,8
    13ec:	94bffc04 	addi	r18,r18,-16
    13f0:	9c81840e 	bge	r19,r18,1a04 <___vfprintf_internal_r+0x1494>
    13f4:	4d000015 	stw	r20,0(r9)
    13f8:	4cc00115 	stw	r19,4(r9)
    13fc:	42000404 	addi	r8,r8,16
    1400:	18c00044 	addi	r3,r3,1
    1404:	da011d15 	stw	r8,1140(sp)
    1408:	d8c11c15 	stw	r3,1136(sp)
    140c:	b0fff60e 	bge	r22,r3,13e8 <___vfprintf_internal_r+0xe78>
    1410:	8809883a 	mov	r4,r17
    1414:	b80b883a 	mov	r5,r23
    1418:	d9811b04 	addi	r6,sp,1132
    141c:	000053c0 	call	53c <__sprint_r>
    1420:	103d991e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1424:	da011d17 	ldw	r8,1140(sp)
    1428:	d8c11c17 	ldw	r3,1136(sp)
    142c:	da400404 	addi	r9,sp,16
    1430:	003fee06 	br	13ec <___vfprintf_internal_r+0xe7c>
    1434:	d8812e17 	ldw	r2,1208(sp)
    1438:	d9012817 	ldw	r4,1184(sp)
    143c:	112fc83a 	sub	r23,r2,r4
    1440:	05ff000e 	bge	zero,r23,1044 <___vfprintf_internal_r+0xad4>
    1444:	07000404 	movi	fp,16
    1448:	05000074 	movhi	r20,1
    144c:	a5002484 	addi	r20,r20,146
    1450:	e5c01d0e 	bge	fp,r23,14c8 <___vfprintf_internal_r+0xf58>
    1454:	dc812a15 	stw	r18,1192(sp)
    1458:	058001c4 	movi	r22,7
    145c:	a025883a 	mov	r18,r20
    1460:	8029883a 	mov	r20,r16
    1464:	dc012917 	ldw	r16,1188(sp)
    1468:	00000306 	br	1478 <___vfprintf_internal_r+0xf08>
    146c:	bdfffc04 	addi	r23,r23,-16
    1470:	4a400204 	addi	r9,r9,8
    1474:	e5c0110e 	bge	fp,r23,14bc <___vfprintf_internal_r+0xf4c>
    1478:	4c800015 	stw	r18,0(r9)
    147c:	4f000115 	stw	fp,4(r9)
    1480:	42000404 	addi	r8,r8,16
    1484:	18c00044 	addi	r3,r3,1
    1488:	da011d15 	stw	r8,1140(sp)
    148c:	d8c11c15 	stw	r3,1136(sp)
    1490:	b0fff60e 	bge	r22,r3,146c <___vfprintf_internal_r+0xefc>
    1494:	8809883a 	mov	r4,r17
    1498:	800b883a 	mov	r5,r16
    149c:	d9811b04 	addi	r6,sp,1132
    14a0:	000053c0 	call	53c <__sprint_r>
    14a4:	103d781e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    14a8:	bdfffc04 	addi	r23,r23,-16
    14ac:	da011d17 	ldw	r8,1140(sp)
    14b0:	d8c11c17 	ldw	r3,1136(sp)
    14b4:	da400404 	addi	r9,sp,16
    14b8:	e5ffef16 	blt	fp,r23,1478 <___vfprintf_internal_r+0xf08>
    14bc:	a021883a 	mov	r16,r20
    14c0:	9029883a 	mov	r20,r18
    14c4:	dc812a17 	ldw	r18,1192(sp)
    14c8:	4d000015 	stw	r20,0(r9)
    14cc:	4dc00115 	stw	r23,4(r9)
    14d0:	45d1883a 	add	r8,r8,r23
    14d4:	18c00044 	addi	r3,r3,1
    14d8:	da011d15 	stw	r8,1140(sp)
    14dc:	d8c11c15 	stw	r3,1136(sp)
    14e0:	008001c4 	movi	r2,7
    14e4:	10c13616 	blt	r2,r3,19c0 <___vfprintf_internal_r+0x1450>
    14e8:	4a400204 	addi	r9,r9,8
    14ec:	003ed506 	br	1044 <___vfprintf_internal_r+0xad4>
    14f0:	d9412917 	ldw	r5,1188(sp)
    14f4:	8809883a 	mov	r4,r17
    14f8:	d9811b04 	addi	r6,sp,1132
    14fc:	000053c0 	call	53c <__sprint_r>
    1500:	103f4226 	beq	r2,zero,120c <___vfprintf_internal_r+0xc9c>
    1504:	003d6006 	br	a88 <___vfprintf_internal_r+0x518>
    1508:	d9013217 	ldw	r4,1224(sp)
    150c:	00800044 	movi	r2,1
    1510:	4cc00015 	stw	r19,0(r9)
    1514:	1101000e 	bge	r2,r4,1918 <___vfprintf_internal_r+0x13a8>
    1518:	00800044 	movi	r2,1
    151c:	48800115 	stw	r2,4(r9)
    1520:	4091883a 	add	r8,r8,r2
    1524:	1887883a 	add	r3,r3,r2
    1528:	da011d15 	stw	r8,1140(sp)
    152c:	d8c11c15 	stw	r3,1136(sp)
    1530:	008001c4 	movi	r2,7
    1534:	10c10c16 	blt	r2,r3,1968 <___vfprintf_internal_r+0x13f8>
    1538:	4a400204 	addi	r9,r9,8
    153c:	d8813717 	ldw	r2,1244(sp)
    1540:	48800015 	stw	r2,0(r9)
    1544:	00800044 	movi	r2,1
    1548:	48800115 	stw	r2,4(r9)
    154c:	4091883a 	add	r8,r8,r2
    1550:	1887883a 	add	r3,r3,r2
    1554:	da011d15 	stw	r8,1140(sp)
    1558:	d8c11c15 	stw	r3,1136(sp)
    155c:	008001c4 	movi	r2,7
    1560:	10c10a16 	blt	r2,r3,198c <___vfprintf_internal_r+0x141c>
    1564:	4c800204 	addi	r18,r9,8
    1568:	d9013317 	ldw	r4,1228(sp)
    156c:	d9413417 	ldw	r5,1232(sp)
    1570:	000d883a 	mov	r6,zero
    1574:	000f883a 	mov	r7,zero
    1578:	d8c13b15 	stw	r3,1260(sp)
    157c:	da013a15 	stw	r8,1256(sp)
    1580:	0008ed40 	call	8ed4 <__nedf2>
    1584:	d8c13b17 	ldw	r3,1260(sp)
    1588:	da013a17 	ldw	r8,1256(sp)
    158c:	1000ba26 	beq	r2,zero,1878 <___vfprintf_internal_r+0x1308>
    1590:	d9013217 	ldw	r4,1224(sp)
    1594:	9cc00044 	addi	r19,r19,1
    1598:	94c00015 	stw	r19,0(r18)
    159c:	20bfffc4 	addi	r2,r4,-1
    15a0:	90800115 	stw	r2,4(r18)
    15a4:	4091883a 	add	r8,r8,r2
    15a8:	18c00044 	addi	r3,r3,1
    15ac:	da011d15 	stw	r8,1140(sp)
    15b0:	d8c11c15 	stw	r3,1136(sp)
    15b4:	008001c4 	movi	r2,7
    15b8:	10c0e216 	blt	r2,r3,1944 <___vfprintf_internal_r+0x13d4>
    15bc:	94800204 	addi	r18,r18,8
    15c0:	d9013517 	ldw	r4,1236(sp)
    15c4:	d8811fc4 	addi	r2,sp,1151
    15c8:	90800015 	stw	r2,0(r18)
    15cc:	91000115 	stw	r4,4(r18)
    15d0:	4111883a 	add	r8,r8,r4
    15d4:	18c00044 	addi	r3,r3,1
    15d8:	da011d15 	stw	r8,1140(sp)
    15dc:	d8c11c15 	stw	r3,1136(sp)
    15e0:	008001c4 	movi	r2,7
    15e4:	10ff2316 	blt	r2,r3,1274 <___vfprintf_internal_r+0xd04>
    15e8:	92400204 	addi	r9,r18,8
    15ec:	003ecf06 	br	112c <___vfprintf_internal_r+0xbbc>
    15f0:	d9412917 	ldw	r5,1188(sp)
    15f4:	8809883a 	mov	r4,r17
    15f8:	d9811b04 	addi	r6,sp,1132
    15fc:	000053c0 	call	53c <__sprint_r>
    1600:	103d211e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1604:	da011d17 	ldw	r8,1140(sp)
    1608:	d8c11c17 	ldw	r3,1136(sp)
    160c:	da400404 	addi	r9,sp,16
    1610:	003eba06 	br	10fc <___vfprintf_internal_r+0xb8c>
    1614:	d9412917 	ldw	r5,1188(sp)
    1618:	8809883a 	mov	r4,r17
    161c:	d9811b04 	addi	r6,sp,1132
    1620:	000053c0 	call	53c <__sprint_r>
    1624:	103d181e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1628:	da011d17 	ldw	r8,1140(sp)
    162c:	d8c11c17 	ldw	r3,1136(sp)
    1630:	da400404 	addi	r9,sp,16
    1634:	003e8006 	br	1038 <___vfprintf_internal_r+0xac8>
    1638:	d9412917 	ldw	r5,1188(sp)
    163c:	8809883a 	mov	r4,r17
    1640:	d9811b04 	addi	r6,sp,1132
    1644:	000053c0 	call	53c <__sprint_r>
    1648:	103d0f1e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    164c:	da011d17 	ldw	r8,1140(sp)
    1650:	d8c11c17 	ldw	r3,1136(sp)
    1654:	da400404 	addi	r9,sp,16
    1658:	003e6a06 	br	1004 <___vfprintf_internal_r+0xa94>
    165c:	d9413617 	ldw	r5,1240(sp)
    1660:	d8810dc4 	addi	r2,sp,1079
    1664:	b8c003cc 	andi	r3,r23,15
    1668:	b008973a 	slli	r4,r22,28
    166c:	28c7883a 	add	r3,r5,r3
    1670:	b82ed13a 	srli	r23,r23,4
    1674:	18c00003 	ldbu	r3,0(r3)
    1678:	b02cd13a 	srli	r22,r22,4
    167c:	25eeb03a 	or	r23,r4,r23
    1680:	10c00005 	stb	r3,0(r2)
    1684:	bd86b03a 	or	r3,r23,r22
    1688:	1027883a 	mov	r19,r2
    168c:	10bfffc4 	addi	r2,r2,-1
    1690:	183ff41e 	bne	r3,zero,1664 <___vfprintf_internal_r+0x10f4>
    1694:	003f1a06 	br	1300 <___vfprintf_internal_r+0xd90>
    1698:	d8012b15 	stw	zero,1196(sp)
    169c:	dcc10e04 	addi	r19,sp,1080
    16a0:	003d3a06 	br	b8c <___vfprintf_internal_r+0x61c>
    16a4:	b0025426 	beq	r22,zero,1ff8 <___vfprintf_internal_r+0x1a88>
    16a8:	b807883a 	mov	r3,r23
    16ac:	d8810dc4 	addi	r2,sp,1079
    16b0:	882f883a 	mov	r23,r17
    16b4:	04c00244 	movi	r19,9
    16b8:	8023883a 	mov	r17,r16
    16bc:	da412815 	stw	r9,1184(sp)
    16c0:	1821883a 	mov	r16,r3
    16c4:	8009883a 	mov	r4,r16
    16c8:	b00b883a 	mov	r5,r22
    16cc:	01800284 	movi	r6,10
    16d0:	000f883a 	mov	r7,zero
    16d4:	1029883a 	mov	r20,r2
    16d8:	0007fb00 	call	7fb0 <__umoddi3>
    16dc:	10800c04 	addi	r2,r2,48
    16e0:	8009883a 	mov	r4,r16
    16e4:	b00b883a 	mov	r5,r22
    16e8:	a0800005 	stb	r2,0(r20)
    16ec:	01800284 	movi	r6,10
    16f0:	000f883a 	mov	r7,zero
    16f4:	00079600 	call	7960 <__udivdi3>
    16f8:	1021883a 	mov	r16,r2
    16fc:	182d883a 	mov	r22,r3
    1700:	a0bfffc4 	addi	r2,r20,-1
    1704:	183fef1e 	bne	r3,zero,16c4 <___vfprintf_internal_r+0x1154>
    1708:	9c3fee36 	bltu	r19,r16,16c4 <___vfprintf_internal_r+0x1154>
    170c:	da412817 	ldw	r9,1184(sp)
    1710:	8005883a 	mov	r2,r16
    1714:	8821883a 	mov	r16,r17
    1718:	b823883a 	mov	r17,r23
    171c:	102f883a 	mov	r23,r2
    1720:	d8812717 	ldw	r2,1180(sp)
    1724:	a4ffffc4 	addi	r19,r20,-1
    1728:	bdc00c04 	addi	r23,r23,48
    172c:	14c5c83a 	sub	r2,r2,r19
    1730:	a5ffffc5 	stb	r23,-1(r20)
    1734:	d8812b15 	stw	r2,1196(sp)
    1738:	003d1406 	br	b8c <___vfprintf_internal_r+0x61c>
    173c:	00c00044 	movi	r3,1
    1740:	bd84b03a 	or	r2,r23,r22
    1744:	003d0306 	br	b54 <___vfprintf_internal_r+0x5e4>
    1748:	dc812417 	ldw	r18,1168(sp)
    174c:	0481140e 	bge	zero,r18,1ba0 <___vfprintf_internal_r+0x1630>
    1750:	d9013217 	ldw	r4,1224(sp)
    1754:	4cc00015 	stw	r19,0(r9)
    1758:	9100ec16 	blt	r18,r4,1b0c <___vfprintf_internal_r+0x159c>
    175c:	49000115 	stw	r4,4(r9)
    1760:	4111883a 	add	r8,r8,r4
    1764:	18c00044 	addi	r3,r3,1
    1768:	da011d15 	stw	r8,1140(sp)
    176c:	d8c11c15 	stw	r3,1136(sp)
    1770:	008001c4 	movi	r2,7
    1774:	10c23616 	blt	r2,r3,2050 <___vfprintf_internal_r+0x1ae0>
    1778:	4a400204 	addi	r9,r9,8
    177c:	d8813217 	ldw	r2,1224(sp)
    1780:	90a5c83a 	sub	r18,r18,r2
    1784:	04beae0e 	bge	zero,r18,1240 <___vfprintf_internal_r+0xcd0>
    1788:	04c00404 	movi	r19,16
    178c:	d8c11c17 	ldw	r3,1136(sp)
    1790:	05000074 	movhi	r20,1
    1794:	a5002484 	addi	r20,r20,146
    1798:	9c81dd0e 	bge	r19,r18,1f10 <___vfprintf_internal_r+0x19a0>
    179c:	058001c4 	movi	r22,7
    17a0:	ddc12917 	ldw	r23,1188(sp)
    17a4:	00000306 	br	17b4 <___vfprintf_internal_r+0x1244>
    17a8:	4a400204 	addi	r9,r9,8
    17ac:	94bffc04 	addi	r18,r18,-16
    17b0:	9c81d70e 	bge	r19,r18,1f10 <___vfprintf_internal_r+0x19a0>
    17b4:	4d000015 	stw	r20,0(r9)
    17b8:	4cc00115 	stw	r19,4(r9)
    17bc:	42000404 	addi	r8,r8,16
    17c0:	18c00044 	addi	r3,r3,1
    17c4:	da011d15 	stw	r8,1140(sp)
    17c8:	d8c11c15 	stw	r3,1136(sp)
    17cc:	b0fff60e 	bge	r22,r3,17a8 <___vfprintf_internal_r+0x1238>
    17d0:	8809883a 	mov	r4,r17
    17d4:	b80b883a 	mov	r5,r23
    17d8:	d9811b04 	addi	r6,sp,1132
    17dc:	000053c0 	call	53c <__sprint_r>
    17e0:	103ca91e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    17e4:	da011d17 	ldw	r8,1140(sp)
    17e8:	d8c11c17 	ldw	r3,1136(sp)
    17ec:	da400404 	addi	r9,sp,16
    17f0:	003fee06 	br	17ac <___vfprintf_internal_r+0x123c>
    17f4:	d9412917 	ldw	r5,1188(sp)
    17f8:	8809883a 	mov	r4,r17
    17fc:	d9811b04 	addi	r6,sp,1132
    1800:	000053c0 	call	53c <__sprint_r>
    1804:	103ca01e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1808:	da011d17 	ldw	r8,1140(sp)
    180c:	d8c11c17 	ldw	r3,1136(sp)
    1810:	da400404 	addi	r9,sp,16
    1814:	003dee06 	br	fd0 <___vfprintf_internal_r+0xa60>
    1818:	00c00084 	movi	r3,2
    181c:	bd84b03a 	or	r2,r23,r22
    1820:	d8012585 	stb	zero,1174(sp)
    1824:	003ccb06 	br	b54 <___vfprintf_internal_r+0x5e4>
    1828:	8080040c 	andi	r2,r16,16
    182c:	1000ae26 	beq	r2,zero,1ae8 <___vfprintf_internal_r+0x1578>
    1830:	d9012d17 	ldw	r4,1204(sp)
    1834:	25c00017 	ldw	r23,0(r4)
    1838:	21000104 	addi	r4,r4,4
    183c:	d9012d15 	stw	r4,1204(sp)
    1840:	b82dd7fa 	srai	r22,r23,31
    1844:	b005883a 	mov	r2,r22
    1848:	003cb906 	br	b30 <___vfprintf_internal_r+0x5c0>
    184c:	8080040c 	andi	r2,r16,16
    1850:	10007026 	beq	r2,zero,1a14 <___vfprintf_internal_r+0x14a4>
    1854:	d8812d17 	ldw	r2,1204(sp)
    1858:	002d883a 	mov	r22,zero
    185c:	00c00044 	movi	r3,1
    1860:	15c00017 	ldw	r23,0(r2)
    1864:	10800104 	addi	r2,r2,4
    1868:	d8812d15 	stw	r2,1204(sp)
    186c:	d8012585 	stb	zero,1174(sp)
    1870:	b805883a 	mov	r2,r23
    1874:	003cb706 	br	b54 <___vfprintf_internal_r+0x5e4>
    1878:	d8813217 	ldw	r2,1224(sp)
    187c:	14ffffc4 	addi	r19,r2,-1
    1880:	04ff4f0e 	bge	zero,r19,15c0 <___vfprintf_internal_r+0x1050>
    1884:	05800404 	movi	r22,16
    1888:	05000074 	movhi	r20,1
    188c:	a5002484 	addi	r20,r20,146
    1890:	b4c0470e 	bge	r22,r19,19b0 <___vfprintf_internal_r+0x1440>
    1894:	05c001c4 	movi	r23,7
    1898:	df012917 	ldw	fp,1188(sp)
    189c:	00000306 	br	18ac <___vfprintf_internal_r+0x133c>
    18a0:	94800204 	addi	r18,r18,8
    18a4:	9cfffc04 	addi	r19,r19,-16
    18a8:	b4c0410e 	bge	r22,r19,19b0 <___vfprintf_internal_r+0x1440>
    18ac:	95000015 	stw	r20,0(r18)
    18b0:	95800115 	stw	r22,4(r18)
    18b4:	42000404 	addi	r8,r8,16
    18b8:	18c00044 	addi	r3,r3,1
    18bc:	da011d15 	stw	r8,1140(sp)
    18c0:	d8c11c15 	stw	r3,1136(sp)
    18c4:	b8fff60e 	bge	r23,r3,18a0 <___vfprintf_internal_r+0x1330>
    18c8:	8809883a 	mov	r4,r17
    18cc:	e00b883a 	mov	r5,fp
    18d0:	d9811b04 	addi	r6,sp,1132
    18d4:	000053c0 	call	53c <__sprint_r>
    18d8:	103c6b1e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    18dc:	da011d17 	ldw	r8,1140(sp)
    18e0:	d8c11c17 	ldw	r3,1136(sp)
    18e4:	dc800404 	addi	r18,sp,16
    18e8:	003fee06 	br	18a4 <___vfprintf_internal_r+0x1334>
    18ec:	8080040c 	andi	r2,r16,16
    18f0:	10005326 	beq	r2,zero,1a40 <___vfprintf_internal_r+0x14d0>
    18f4:	d8c12d17 	ldw	r3,1204(sp)
    18f8:	002d883a 	mov	r22,zero
    18fc:	1dc00017 	ldw	r23,0(r3)
    1900:	18c00104 	addi	r3,r3,4
    1904:	d8c12d15 	stw	r3,1204(sp)
    1908:	b805883a 	mov	r2,r23
    190c:	0007883a 	mov	r3,zero
    1910:	d8012585 	stb	zero,1174(sp)
    1914:	003c8f06 	br	b54 <___vfprintf_internal_r+0x5e4>
    1918:	8088703a 	and	r4,r16,r2
    191c:	203efe1e 	bne	r4,zero,1518 <___vfprintf_internal_r+0xfa8>
    1920:	48800115 	stw	r2,4(r9)
    1924:	42000044 	addi	r8,r8,1
    1928:	18c00044 	addi	r3,r3,1
    192c:	da011d15 	stw	r8,1140(sp)
    1930:	d8c11c15 	stw	r3,1136(sp)
    1934:	008001c4 	movi	r2,7
    1938:	10c00216 	blt	r2,r3,1944 <___vfprintf_internal_r+0x13d4>
    193c:	4c800204 	addi	r18,r9,8
    1940:	003f1f06 	br	15c0 <___vfprintf_internal_r+0x1050>
    1944:	d9412917 	ldw	r5,1188(sp)
    1948:	8809883a 	mov	r4,r17
    194c:	d9811b04 	addi	r6,sp,1132
    1950:	000053c0 	call	53c <__sprint_r>
    1954:	103c4c1e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1958:	dc800404 	addi	r18,sp,16
    195c:	da011d17 	ldw	r8,1140(sp)
    1960:	d8c11c17 	ldw	r3,1136(sp)
    1964:	003f1606 	br	15c0 <___vfprintf_internal_r+0x1050>
    1968:	d9412917 	ldw	r5,1188(sp)
    196c:	8809883a 	mov	r4,r17
    1970:	d9811b04 	addi	r6,sp,1132
    1974:	000053c0 	call	53c <__sprint_r>
    1978:	103c431e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    197c:	da011d17 	ldw	r8,1140(sp)
    1980:	d8c11c17 	ldw	r3,1136(sp)
    1984:	da400404 	addi	r9,sp,16
    1988:	003eec06 	br	153c <___vfprintf_internal_r+0xfcc>
    198c:	d9412917 	ldw	r5,1188(sp)
    1990:	8809883a 	mov	r4,r17
    1994:	d9811b04 	addi	r6,sp,1132
    1998:	000053c0 	call	53c <__sprint_r>
    199c:	103c3a1e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    19a0:	da011d17 	ldw	r8,1140(sp)
    19a4:	d8c11c17 	ldw	r3,1136(sp)
    19a8:	dc800404 	addi	r18,sp,16
    19ac:	003eee06 	br	1568 <___vfprintf_internal_r+0xff8>
    19b0:	95000015 	stw	r20,0(r18)
    19b4:	94c00115 	stw	r19,4(r18)
    19b8:	44d1883a 	add	r8,r8,r19
    19bc:	003efa06 	br	15a8 <___vfprintf_internal_r+0x1038>
    19c0:	d9412917 	ldw	r5,1188(sp)
    19c4:	8809883a 	mov	r4,r17
    19c8:	d9811b04 	addi	r6,sp,1132
    19cc:	000053c0 	call	53c <__sprint_r>
    19d0:	103c2d1e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    19d4:	da011d17 	ldw	r8,1140(sp)
    19d8:	d8c11c17 	ldw	r3,1136(sp)
    19dc:	da400404 	addi	r9,sp,16
    19e0:	003d9806 	br	1044 <___vfprintf_internal_r+0xad4>
    19e4:	8080100c 	andi	r2,r16,64
    19e8:	10011626 	beq	r2,zero,1e44 <___vfprintf_internal_r+0x18d4>
    19ec:	d8c12d17 	ldw	r3,1204(sp)
    19f0:	002d883a 	mov	r22,zero
    19f4:	1dc0000b 	ldhu	r23,0(r3)
    19f8:	18c00104 	addi	r3,r3,4
    19fc:	d8c12d15 	stw	r3,1204(sp)
    1a00:	003cc106 	br	d08 <___vfprintf_internal_r+0x798>
    1a04:	4d000015 	stw	r20,0(r9)
    1a08:	4c800115 	stw	r18,4(r9)
    1a0c:	4491883a 	add	r8,r8,r18
    1a10:	003dc006 	br	1114 <___vfprintf_internal_r+0xba4>
    1a14:	8080100c 	andi	r2,r16,64
    1a18:	10010126 	beq	r2,zero,1e20 <___vfprintf_internal_r+0x18b0>
    1a1c:	d8c12d17 	ldw	r3,1204(sp)
    1a20:	002d883a 	mov	r22,zero
    1a24:	1dc0000b 	ldhu	r23,0(r3)
    1a28:	18c00104 	addi	r3,r3,4
    1a2c:	d8c12d15 	stw	r3,1204(sp)
    1a30:	b805883a 	mov	r2,r23
    1a34:	00c00044 	movi	r3,1
    1a38:	d8012585 	stb	zero,1174(sp)
    1a3c:	003c4506 	br	b54 <___vfprintf_internal_r+0x5e4>
    1a40:	8080100c 	andi	r2,r16,64
    1a44:	10010526 	beq	r2,zero,1e5c <___vfprintf_internal_r+0x18ec>
    1a48:	d9012d17 	ldw	r4,1204(sp)
    1a4c:	002d883a 	mov	r22,zero
    1a50:	0007883a 	mov	r3,zero
    1a54:	25c0000b 	ldhu	r23,0(r4)
    1a58:	21000104 	addi	r4,r4,4
    1a5c:	d9012d15 	stw	r4,1204(sp)
    1a60:	b805883a 	mov	r2,r23
    1a64:	d8012585 	stb	zero,1174(sp)
    1a68:	003c3a06 	br	b54 <___vfprintf_internal_r+0x5e4>
    1a6c:	d8812d17 	ldw	r2,1204(sp)
    1a70:	15800017 	ldw	r22,0(r2)
    1a74:	15000117 	ldw	r20,4(r2)
    1a78:	10800204 	addi	r2,r2,8
    1a7c:	d8812d15 	stw	r2,1204(sp)
    1a80:	dd813315 	stw	r22,1228(sp)
    1a84:	dd013415 	stw	r20,1232(sp)
    1a88:	003c5906 	br	bf0 <___vfprintf_internal_r+0x680>
    1a8c:	00c00084 	movi	r3,2
    1a90:	d8012585 	stb	zero,1174(sp)
    1a94:	003c2f06 	br	b54 <___vfprintf_internal_r+0x5e4>
    1a98:	ac800007 	ldb	r18,0(r21)
    1a9c:	003b1006 	br	6e0 <___vfprintf_internal_r+0x170>
    1aa0:	8080040c 	andi	r2,r16,16
    1aa4:	1000091e 	bne	r2,zero,1acc <___vfprintf_internal_r+0x155c>
    1aa8:	8400100c 	andi	r16,r16,64
    1aac:	80000726 	beq	r16,zero,1acc <___vfprintf_internal_r+0x155c>
    1ab0:	d8c12d17 	ldw	r3,1204(sp)
    1ab4:	d9012c17 	ldw	r4,1200(sp)
    1ab8:	18800017 	ldw	r2,0(r3)
    1abc:	18c00104 	addi	r3,r3,4
    1ac0:	d8c12d15 	stw	r3,1204(sp)
    1ac4:	1100000d 	sth	r4,0(r2)
    1ac8:	003adf06 	br	648 <___vfprintf_internal_r+0xd8>
    1acc:	d8c12d17 	ldw	r3,1204(sp)
    1ad0:	d9012c17 	ldw	r4,1200(sp)
    1ad4:	18800017 	ldw	r2,0(r3)
    1ad8:	18c00104 	addi	r3,r3,4
    1adc:	d8c12d15 	stw	r3,1204(sp)
    1ae0:	11000015 	stw	r4,0(r2)
    1ae4:	003ad806 	br	648 <___vfprintf_internal_r+0xd8>
    1ae8:	8080100c 	andi	r2,r16,64
    1aec:	1000c526 	beq	r2,zero,1e04 <___vfprintf_internal_r+0x1894>
    1af0:	d8812d17 	ldw	r2,1204(sp)
    1af4:	15c0000f 	ldh	r23,0(r2)
    1af8:	10800104 	addi	r2,r2,4
    1afc:	d8812d15 	stw	r2,1204(sp)
    1b00:	b82dd7fa 	srai	r22,r23,31
    1b04:	b005883a 	mov	r2,r22
    1b08:	003c0906 	br	b30 <___vfprintf_internal_r+0x5c0>
    1b0c:	4c800115 	stw	r18,4(r9)
    1b10:	9211883a 	add	r8,r18,r8
    1b14:	18c00044 	addi	r3,r3,1
    1b18:	da011d15 	stw	r8,1140(sp)
    1b1c:	d8c11c15 	stw	r3,1136(sp)
    1b20:	008001c4 	movi	r2,7
    1b24:	10c14016 	blt	r2,r3,2028 <___vfprintf_internal_r+0x1ab8>
    1b28:	4a400204 	addi	r9,r9,8
    1b2c:	d8813717 	ldw	r2,1244(sp)
    1b30:	9ca7883a 	add	r19,r19,r18
    1b34:	48800015 	stw	r2,0(r9)
    1b38:	00800044 	movi	r2,1
    1b3c:	48800115 	stw	r2,4(r9)
    1b40:	4091883a 	add	r8,r8,r2
    1b44:	1887883a 	add	r3,r3,r2
    1b48:	da011d15 	stw	r8,1140(sp)
    1b4c:	d8c11c15 	stw	r3,1136(sp)
    1b50:	008001c4 	movi	r2,7
    1b54:	10c12c16 	blt	r2,r3,2008 <___vfprintf_internal_r+0x1a98>
    1b58:	4a400204 	addi	r9,r9,8
    1b5c:	d9013217 	ldw	r4,1224(sp)
    1b60:	da011d17 	ldw	r8,1140(sp)
    1b64:	d8c11c17 	ldw	r3,1136(sp)
    1b68:	24a5c83a 	sub	r18,r4,r18
    1b6c:	4cc00015 	stw	r19,0(r9)
    1b70:	003fa506 	br	1a08 <___vfprintf_internal_r+0x1498>
    1b74:	04c00074 	movhi	r19,1
    1b78:	9cc01104 	addi	r19,r19,68
    1b7c:	003c2e06 	br	c38 <___vfprintf_internal_r+0x6c8>
    1b80:	d9412917 	ldw	r5,1188(sp)
    1b84:	8809883a 	mov	r4,r17
    1b88:	d9811b04 	addi	r6,sp,1132
    1b8c:	000053c0 	call	53c <__sprint_r>
    1b90:	103bbd1e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1b94:	da011d17 	ldw	r8,1140(sp)
    1b98:	da400404 	addi	r9,sp,16
    1b9c:	003df606 	br	1378 <___vfprintf_internal_r+0xe08>
    1ba0:	00800074 	movhi	r2,1
    1ba4:	10802004 	addi	r2,r2,128
    1ba8:	48800015 	stw	r2,0(r9)
    1bac:	00800044 	movi	r2,1
    1bb0:	48800115 	stw	r2,4(r9)
    1bb4:	4091883a 	add	r8,r8,r2
    1bb8:	1887883a 	add	r3,r3,r2
    1bbc:	da011d15 	stw	r8,1140(sp)
    1bc0:	d8c11c15 	stw	r3,1136(sp)
    1bc4:	008001c4 	movi	r2,7
    1bc8:	10c0bc16 	blt	r2,r3,1ebc <___vfprintf_internal_r+0x194c>
    1bcc:	4a400204 	addi	r9,r9,8
    1bd0:	9000041e 	bne	r18,zero,1be4 <___vfprintf_internal_r+0x1674>
    1bd4:	d8c13217 	ldw	r3,1224(sp)
    1bd8:	1800021e 	bne	r3,zero,1be4 <___vfprintf_internal_r+0x1674>
    1bdc:	8080004c 	andi	r2,r16,1
    1be0:	103d5226 	beq	r2,zero,112c <___vfprintf_internal_r+0xbbc>
    1be4:	d8c11c17 	ldw	r3,1136(sp)
    1be8:	d9013717 	ldw	r4,1244(sp)
    1bec:	00800044 	movi	r2,1
    1bf0:	48800115 	stw	r2,4(r9)
    1bf4:	49000015 	stw	r4,0(r9)
    1bf8:	4091883a 	add	r8,r8,r2
    1bfc:	1887883a 	add	r3,r3,r2
    1c00:	da011d15 	stw	r8,1140(sp)
    1c04:	d8c11c15 	stw	r3,1136(sp)
    1c08:	008001c4 	movi	r2,7
    1c0c:	10c14516 	blt	r2,r3,2124 <___vfprintf_internal_r+0x1bb4>
    1c10:	4a400204 	addi	r9,r9,8
    1c14:	04a5c83a 	sub	r18,zero,r18
    1c18:	0480d70e 	bge	zero,r18,1f78 <___vfprintf_internal_r+0x1a08>
    1c1c:	05800404 	movi	r22,16
    1c20:	05000074 	movhi	r20,1
    1c24:	a5002484 	addi	r20,r20,146
    1c28:	b480db0e 	bge	r22,r18,1f98 <___vfprintf_internal_r+0x1a28>
    1c2c:	05c001c4 	movi	r23,7
    1c30:	df012917 	ldw	fp,1188(sp)
    1c34:	00000306 	br	1c44 <___vfprintf_internal_r+0x16d4>
    1c38:	4a400204 	addi	r9,r9,8
    1c3c:	94bffc04 	addi	r18,r18,-16
    1c40:	b480d50e 	bge	r22,r18,1f98 <___vfprintf_internal_r+0x1a28>
    1c44:	4d000015 	stw	r20,0(r9)
    1c48:	4d800115 	stw	r22,4(r9)
    1c4c:	42000404 	addi	r8,r8,16
    1c50:	18c00044 	addi	r3,r3,1
    1c54:	da011d15 	stw	r8,1140(sp)
    1c58:	d8c11c15 	stw	r3,1136(sp)
    1c5c:	b8fff60e 	bge	r23,r3,1c38 <___vfprintf_internal_r+0x16c8>
    1c60:	8809883a 	mov	r4,r17
    1c64:	e00b883a 	mov	r5,fp
    1c68:	d9811b04 	addi	r6,sp,1132
    1c6c:	000053c0 	call	53c <__sprint_r>
    1c70:	103b851e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1c74:	da011d17 	ldw	r8,1140(sp)
    1c78:	d8c11c17 	ldw	r3,1136(sp)
    1c7c:	da400404 	addi	r9,sp,16
    1c80:	003fee06 	br	1c3c <___vfprintf_internal_r+0x16cc>
    1c84:	da413c15 	stw	r9,1264(sp)
    1c88:	000725c0 	call	725c <__isnand>
    1c8c:	da413c17 	ldw	r9,1264(sp)
    1c90:	10007e1e 	bne	r2,zero,1e8c <___vfprintf_internal_r+0x191c>
    1c94:	00bfffc4 	movi	r2,-1
    1c98:	e0816a26 	beq	fp,r2,2244 <___vfprintf_internal_r+0x1cd4>
    1c9c:	008019c4 	movi	r2,103
    1ca0:	90816526 	beq	r18,r2,2238 <___vfprintf_internal_r+0x1cc8>
    1ca4:	008011c4 	movi	r2,71
    1ca8:	90816326 	beq	r18,r2,2238 <___vfprintf_internal_r+0x1cc8>
    1cac:	80c04014 	ori	r3,r16,256
    1cb0:	d8c12a15 	stw	r3,1192(sp)
    1cb4:	a0016516 	blt	r20,zero,224c <___vfprintf_internal_r+0x1cdc>
    1cb8:	d8012f05 	stb	zero,1212(sp)
    1cbc:	00801984 	movi	r2,102
    1cc0:	9080f226 	beq	r18,r2,208c <___vfprintf_internal_r+0x1b1c>
    1cc4:	00801184 	movi	r2,70
    1cc8:	9080f026 	beq	r18,r2,208c <___vfprintf_internal_r+0x1b1c>
    1ccc:	00801944 	movi	r2,101
    1cd0:	90818d26 	beq	r18,r2,2308 <___vfprintf_internal_r+0x1d98>
    1cd4:	00801144 	movi	r2,69
    1cd8:	90818b26 	beq	r18,r2,2308 <___vfprintf_internal_r+0x1d98>
    1cdc:	e02f883a 	mov	r23,fp
    1ce0:	d8812404 	addi	r2,sp,1168
    1ce4:	d8800115 	stw	r2,4(sp)
    1ce8:	d8812304 	addi	r2,sp,1164
    1cec:	d8800215 	stw	r2,8(sp)
    1cf0:	d8812204 	addi	r2,sp,1160
    1cf4:	ddc00015 	stw	r23,0(sp)
    1cf8:	d8800315 	stw	r2,12(sp)
    1cfc:	8809883a 	mov	r4,r17
    1d00:	b00b883a 	mov	r5,r22
    1d04:	a00d883a 	mov	r6,r20
    1d08:	01c00084 	movi	r7,2
    1d0c:	da413c15 	stw	r9,1264(sp)
    1d10:	00027c00 	call	27c0 <_dtoa_r>
    1d14:	1027883a 	mov	r19,r2
    1d18:	008019c4 	movi	r2,103
    1d1c:	da413c17 	ldw	r9,1264(sp)
    1d20:	9081951e 	bne	r18,r2,2378 <___vfprintf_internal_r+0x1e08>
    1d24:	8080004c 	andi	r2,r16,1
    1d28:	10017926 	beq	r2,zero,2310 <___vfprintf_internal_r+0x1da0>
    1d2c:	00801184 	movi	r2,70
    1d30:	9dc7883a 	add	r3,r19,r23
    1d34:	9080e626 	beq	r18,r2,20d0 <___vfprintf_internal_r+0x1b60>
    1d38:	b009883a 	mov	r4,r22
    1d3c:	a00b883a 	mov	r5,r20
    1d40:	000d883a 	mov	r6,zero
    1d44:	000f883a 	mov	r7,zero
    1d48:	d8c13b15 	stw	r3,1260(sp)
    1d4c:	da413c15 	stw	r9,1264(sp)
    1d50:	0008e780 	call	8e78 <__eqdf2>
    1d54:	d8c13b17 	ldw	r3,1260(sp)
    1d58:	da413c17 	ldw	r9,1264(sp)
    1d5c:	10000726 	beq	r2,zero,1d7c <___vfprintf_internal_r+0x180c>
    1d60:	d8812217 	ldw	r2,1160(sp)
    1d64:	10c18a2e 	bgeu	r2,r3,2390 <___vfprintf_internal_r+0x1e20>
    1d68:	01000c04 	movi	r4,48
    1d6c:	11000005 	stb	r4,0(r2)
    1d70:	10800044 	addi	r2,r2,1
    1d74:	d8812215 	stw	r2,1160(sp)
    1d78:	10fffc1e 	bne	r2,r3,1d6c <___vfprintf_internal_r+0x17fc>
    1d7c:	1cc7c83a 	sub	r3,r3,r19
    1d80:	d8c13215 	stw	r3,1224(sp)
    1d84:	008019c4 	movi	r2,103
    1d88:	9080fa26 	beq	r18,r2,2174 <___vfprintf_internal_r+0x1c04>
    1d8c:	008011c4 	movi	r2,71
    1d90:	9080f826 	beq	r18,r2,2174 <___vfprintf_internal_r+0x1c04>
    1d94:	00801984 	movi	r2,102
    1d98:	90818e1e 	bne	r18,r2,23d4 <___vfprintf_internal_r+0x1e64>
    1d9c:	d8812417 	ldw	r2,1168(sp)
    1da0:	d8812b15 	stw	r2,1196(sp)
    1da4:	00817c0e 	bge	zero,r2,2398 <___vfprintf_internal_r+0x1e28>
    1da8:	e000021e 	bne	fp,zero,1db4 <___vfprintf_internal_r+0x1844>
    1dac:	8400004c 	andi	r16,r16,1
    1db0:	80000426 	beq	r16,zero,1dc4 <___vfprintf_internal_r+0x1854>
    1db4:	d8812b17 	ldw	r2,1196(sp)
    1db8:	e2000044 	addi	r8,fp,1
    1dbc:	1205883a 	add	r2,r2,r8
    1dc0:	d8812b15 	stw	r2,1196(sp)
    1dc4:	d8812815 	stw	r2,1184(sp)
    1dc8:	10010b16 	blt	r2,zero,21f8 <___vfprintf_internal_r+0x1c88>
    1dcc:	ddc12f07 	ldb	r23,1212(sp)
    1dd0:	b800e426 	beq	r23,zero,2164 <___vfprintf_internal_r+0x1bf4>
    1dd4:	00800b44 	movi	r2,45
    1dd8:	d8812585 	stb	r2,1174(sp)
    1ddc:	dc012a17 	ldw	r16,1192(sp)
    1de0:	d8013115 	stw	zero,1220(sp)
    1de4:	003b7306 	br	bb4 <___vfprintf_internal_r+0x644>
    1de8:	d8812b17 	ldw	r2,1196(sp)
    1dec:	d8812815 	stw	r2,1184(sp)
    1df0:	10005716 	blt	r2,zero,1f50 <___vfprintf_internal_r+0x19e0>
    1df4:	d8812583 	ldbu	r2,1174(sp)
    1df8:	ddc12d15 	stw	r23,1204(sp)
    1dfc:	d8013115 	stw	zero,1220(sp)
    1e00:	003b6806 	br	ba4 <___vfprintf_internal_r+0x634>
    1e04:	d8c12d17 	ldw	r3,1204(sp)
    1e08:	1dc00017 	ldw	r23,0(r3)
    1e0c:	18c00104 	addi	r3,r3,4
    1e10:	d8c12d15 	stw	r3,1204(sp)
    1e14:	b82dd7fa 	srai	r22,r23,31
    1e18:	b005883a 	mov	r2,r22
    1e1c:	003b4406 	br	b30 <___vfprintf_internal_r+0x5c0>
    1e20:	d9012d17 	ldw	r4,1204(sp)
    1e24:	002d883a 	mov	r22,zero
    1e28:	00c00044 	movi	r3,1
    1e2c:	25c00017 	ldw	r23,0(r4)
    1e30:	21000104 	addi	r4,r4,4
    1e34:	d9012d15 	stw	r4,1204(sp)
    1e38:	b805883a 	mov	r2,r23
    1e3c:	d8012585 	stb	zero,1174(sp)
    1e40:	003b4406 	br	b54 <___vfprintf_internal_r+0x5e4>
    1e44:	d9012d17 	ldw	r4,1204(sp)
    1e48:	002d883a 	mov	r22,zero
    1e4c:	25c00017 	ldw	r23,0(r4)
    1e50:	21000104 	addi	r4,r4,4
    1e54:	d9012d15 	stw	r4,1204(sp)
    1e58:	003bab06 	br	d08 <___vfprintf_internal_r+0x798>
    1e5c:	d8812d17 	ldw	r2,1204(sp)
    1e60:	002d883a 	mov	r22,zero
    1e64:	0007883a 	mov	r3,zero
    1e68:	15c00017 	ldw	r23,0(r2)
    1e6c:	10800104 	addi	r2,r2,4
    1e70:	d8812d15 	stw	r2,1204(sp)
    1e74:	d8012585 	stb	zero,1174(sp)
    1e78:	b805883a 	mov	r2,r23
    1e7c:	003b3506 	br	b54 <___vfprintf_internal_r+0x5e4>
    1e80:	00ffffc4 	movi	r3,-1
    1e84:	b82b883a 	mov	r21,r23
    1e88:	003a1606 	br	6e4 <___vfprintf_internal_r+0x174>
    1e8c:	008011c4 	movi	r2,71
    1e90:	1480b116 	blt	r2,r18,2158 <___vfprintf_internal_r+0x1be8>
    1e94:	04c00074 	movhi	r19,1
    1e98:	9cc01204 	addi	r19,r19,72
    1e9c:	00c000c4 	movi	r3,3
    1ea0:	00bfdfc4 	movi	r2,-129
    1ea4:	80a0703a 	and	r16,r16,r2
    1ea8:	d8c12815 	stw	r3,1184(sp)
    1eac:	d8812583 	ldbu	r2,1174(sp)
    1eb0:	d8c12b15 	stw	r3,1196(sp)
    1eb4:	d8013115 	stw	zero,1220(sp)
    1eb8:	003b3a06 	br	ba4 <___vfprintf_internal_r+0x634>
    1ebc:	d9412917 	ldw	r5,1188(sp)
    1ec0:	8809883a 	mov	r4,r17
    1ec4:	d9811b04 	addi	r6,sp,1132
    1ec8:	000053c0 	call	53c <__sprint_r>
    1ecc:	103aee1e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1ed0:	dc812417 	ldw	r18,1168(sp)
    1ed4:	da011d17 	ldw	r8,1140(sp)
    1ed8:	da400404 	addi	r9,sp,16
    1edc:	003f3c06 	br	1bd0 <___vfprintf_internal_r+0x1660>
    1ee0:	ad400044 	addi	r21,r21,1
    1ee4:	84000814 	ori	r16,r16,32
    1ee8:	14800047 	ldb	r18,1(r2)
    1eec:	0039fc06 	br	6e0 <___vfprintf_internal_r+0x170>
    1ef0:	d9412917 	ldw	r5,1188(sp)
    1ef4:	8809883a 	mov	r4,r17
    1ef8:	d9811b04 	addi	r6,sp,1132
    1efc:	000053c0 	call	53c <__sprint_r>
    1f00:	103ae11e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1f04:	da011d17 	ldw	r8,1140(sp)
    1f08:	da400404 	addi	r9,sp,16
    1f0c:	003d2b06 	br	13bc <___vfprintf_internal_r+0xe4c>
    1f10:	4d000015 	stw	r20,0(r9)
    1f14:	4c800115 	stw	r18,4(r9)
    1f18:	4491883a 	add	r8,r8,r18
    1f1c:	18c00044 	addi	r3,r3,1
    1f20:	da011d15 	stw	r8,1140(sp)
    1f24:	d8c11c15 	stw	r3,1136(sp)
    1f28:	008001c4 	movi	r2,7
    1f2c:	10fcbd16 	blt	r2,r3,1224 <___vfprintf_internal_r+0xcb4>
    1f30:	4a400204 	addi	r9,r9,8
    1f34:	003cc206 	br	1240 <___vfprintf_internal_r+0xcd0>
    1f38:	da413c15 	stw	r9,1264(sp)
    1f3c:	00004b00 	call	4b0 <strlen>
    1f40:	d8812b15 	stw	r2,1196(sp)
    1f44:	d8812815 	stw	r2,1184(sp)
    1f48:	da413c17 	ldw	r9,1264(sp)
    1f4c:	103fa90e 	bge	r2,zero,1df4 <___vfprintf_internal_r+0x1884>
    1f50:	d8012815 	stw	zero,1184(sp)
    1f54:	003fa706 	br	1df4 <___vfprintf_internal_r+0x1884>
    1f58:	d9412917 	ldw	r5,1188(sp)
    1f5c:	8809883a 	mov	r4,r17
    1f60:	d9811b04 	addi	r6,sp,1132
    1f64:	000053c0 	call	53c <__sprint_r>
    1f68:	103ac71e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    1f6c:	da011d17 	ldw	r8,1140(sp)
    1f70:	d8c11c17 	ldw	r3,1136(sp)
    1f74:	da400404 	addi	r9,sp,16
    1f78:	d8813217 	ldw	r2,1224(sp)
    1f7c:	4cc00015 	stw	r19,0(r9)
    1f80:	48800115 	stw	r2,4(r9)
    1f84:	4091883a 	add	r8,r8,r2
    1f88:	003c6206 	br	1114 <___vfprintf_internal_r+0xba4>
    1f8c:	00800b44 	movi	r2,45
    1f90:	d8812585 	stb	r2,1174(sp)
    1f94:	003b2406 	br	c28 <___vfprintf_internal_r+0x6b8>
    1f98:	4d000015 	stw	r20,0(r9)
    1f9c:	4c800115 	stw	r18,4(r9)
    1fa0:	4491883a 	add	r8,r8,r18
    1fa4:	18c00044 	addi	r3,r3,1
    1fa8:	da011d15 	stw	r8,1140(sp)
    1fac:	d8c11c15 	stw	r3,1136(sp)
    1fb0:	008001c4 	movi	r2,7
    1fb4:	10ffe816 	blt	r2,r3,1f58 <___vfprintf_internal_r+0x19e8>
    1fb8:	4a400204 	addi	r9,r9,8
    1fbc:	003fee06 	br	1f78 <___vfprintf_internal_r+0x1a08>
    1fc0:	d8c12b15 	stw	r3,1196(sp)
    1fc4:	00800184 	movi	r2,6
    1fc8:	10c0062e 	bgeu	r2,r3,1fe4 <___vfprintf_internal_r+0x1a74>
    1fcc:	d8812b15 	stw	r2,1196(sp)
    1fd0:	d8812815 	stw	r2,1184(sp)
    1fd4:	ddc12d15 	stw	r23,1204(sp)
    1fd8:	04c00074 	movhi	r19,1
    1fdc:	9cc01e04 	addi	r19,r19,120
    1fe0:	0039ca06 	br	70c <___vfprintf_internal_r+0x19c>
    1fe4:	d8812b17 	ldw	r2,1196(sp)
    1fe8:	d8812815 	stw	r2,1184(sp)
    1fec:	103ff90e 	bge	r2,zero,1fd4 <___vfprintf_internal_r+0x1a64>
    1ff0:	d8012815 	stw	zero,1184(sp)
    1ff4:	003ff706 	br	1fd4 <___vfprintf_internal_r+0x1a64>
    1ff8:	00800244 	movi	r2,9
    1ffc:	15fdaa36 	bltu	r2,r23,16a8 <___vfprintf_internal_r+0x1138>
    2000:	dd010e04 	addi	r20,sp,1080
    2004:	003dc606 	br	1720 <___vfprintf_internal_r+0x11b0>
    2008:	d9412917 	ldw	r5,1188(sp)
    200c:	8809883a 	mov	r4,r17
    2010:	d9811b04 	addi	r6,sp,1132
    2014:	000053c0 	call	53c <__sprint_r>
    2018:	103a9b1e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    201c:	dc812417 	ldw	r18,1168(sp)
    2020:	da400404 	addi	r9,sp,16
    2024:	003ecd06 	br	1b5c <___vfprintf_internal_r+0x15ec>
    2028:	d9412917 	ldw	r5,1188(sp)
    202c:	8809883a 	mov	r4,r17
    2030:	d9811b04 	addi	r6,sp,1132
    2034:	000053c0 	call	53c <__sprint_r>
    2038:	103a931e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    203c:	dc812417 	ldw	r18,1168(sp)
    2040:	da011d17 	ldw	r8,1140(sp)
    2044:	d8c11c17 	ldw	r3,1136(sp)
    2048:	da400404 	addi	r9,sp,16
    204c:	003eb706 	br	1b2c <___vfprintf_internal_r+0x15bc>
    2050:	d9412917 	ldw	r5,1188(sp)
    2054:	8809883a 	mov	r4,r17
    2058:	d9811b04 	addi	r6,sp,1132
    205c:	000053c0 	call	53c <__sprint_r>
    2060:	103a891e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    2064:	dc812417 	ldw	r18,1168(sp)
    2068:	da011d17 	ldw	r8,1140(sp)
    206c:	da400404 	addi	r9,sp,16
    2070:	003dc206 	br	177c <___vfprintf_internal_r+0x120c>
    2074:	df012815 	stw	fp,1184(sp)
    2078:	d8812583 	ldbu	r2,1174(sp)
    207c:	df012b15 	stw	fp,1196(sp)
    2080:	ddc12d15 	stw	r23,1204(sp)
    2084:	d8013115 	stw	zero,1220(sp)
    2088:	003ac606 	br	ba4 <___vfprintf_internal_r+0x634>
    208c:	d8812404 	addi	r2,sp,1168
    2090:	d8800115 	stw	r2,4(sp)
    2094:	d8812304 	addi	r2,sp,1164
    2098:	d8800215 	stw	r2,8(sp)
    209c:	d8812204 	addi	r2,sp,1160
    20a0:	df000015 	stw	fp,0(sp)
    20a4:	d8800315 	stw	r2,12(sp)
    20a8:	8809883a 	mov	r4,r17
    20ac:	b00b883a 	mov	r5,r22
    20b0:	a00d883a 	mov	r6,r20
    20b4:	01c000c4 	movi	r7,3
    20b8:	da413c15 	stw	r9,1264(sp)
    20bc:	00027c00 	call	27c0 <_dtoa_r>
    20c0:	da413c17 	ldw	r9,1264(sp)
    20c4:	1027883a 	mov	r19,r2
    20c8:	1707883a 	add	r3,r2,fp
    20cc:	e02f883a 	mov	r23,fp
    20d0:	99000007 	ldb	r4,0(r19)
    20d4:	00800c04 	movi	r2,48
    20d8:	20800326 	beq	r4,r2,20e8 <___vfprintf_internal_r+0x1b78>
    20dc:	da812417 	ldw	r10,1168(sp)
    20e0:	1a87883a 	add	r3,r3,r10
    20e4:	003f1406 	br	1d38 <___vfprintf_internal_r+0x17c8>
    20e8:	b009883a 	mov	r4,r22
    20ec:	a00b883a 	mov	r5,r20
    20f0:	000d883a 	mov	r6,zero
    20f4:	000f883a 	mov	r7,zero
    20f8:	d8c13b15 	stw	r3,1260(sp)
    20fc:	da413c15 	stw	r9,1264(sp)
    2100:	0008ed40 	call	8ed4 <__nedf2>
    2104:	d8c13b17 	ldw	r3,1260(sp)
    2108:	da413c17 	ldw	r9,1264(sp)
    210c:	103ff326 	beq	r2,zero,20dc <___vfprintf_internal_r+0x1b6c>
    2110:	00800044 	movi	r2,1
    2114:	15d5c83a 	sub	r10,r2,r23
    2118:	da812415 	stw	r10,1168(sp)
    211c:	1a87883a 	add	r3,r3,r10
    2120:	003f0506 	br	1d38 <___vfprintf_internal_r+0x17c8>
    2124:	d9412917 	ldw	r5,1188(sp)
    2128:	8809883a 	mov	r4,r17
    212c:	d9811b04 	addi	r6,sp,1132
    2130:	000053c0 	call	53c <__sprint_r>
    2134:	103a541e 	bne	r2,zero,a88 <___vfprintf_internal_r+0x518>
    2138:	dc812417 	ldw	r18,1168(sp)
    213c:	da011d17 	ldw	r8,1140(sp)
    2140:	d8c11c17 	ldw	r3,1136(sp)
    2144:	da400404 	addi	r9,sp,16
    2148:	003eb206 	br	1c14 <___vfprintf_internal_r+0x16a4>
    214c:	b82b883a 	mov	r21,r23
    2150:	0007883a 	mov	r3,zero
    2154:	00396306 	br	6e4 <___vfprintf_internal_r+0x174>
    2158:	04c00074 	movhi	r19,1
    215c:	9cc01304 	addi	r19,r19,76
    2160:	003f4e06 	br	1e9c <___vfprintf_internal_r+0x192c>
    2164:	d8812583 	ldbu	r2,1174(sp)
    2168:	dc012a17 	ldw	r16,1192(sp)
    216c:	d8013115 	stw	zero,1220(sp)
    2170:	003a8c06 	br	ba4 <___vfprintf_internal_r+0x634>
    2174:	d8812417 	ldw	r2,1168(sp)
    2178:	d8812b15 	stw	r2,1196(sp)
    217c:	1029883a 	mov	r20,r2
    2180:	00bfff44 	movi	r2,-3
    2184:	a0800116 	blt	r20,r2,218c <___vfprintf_internal_r+0x1c1c>
    2188:	e5001d0e 	bge	fp,r20,2200 <___vfprintf_internal_r+0x1c90>
    218c:	94bfff84 	addi	r18,r18,-2
    2190:	a53fffc4 	addi	r20,r20,-1
    2194:	dd012415 	stw	r20,1168(sp)
    2198:	dc811fc5 	stb	r18,1151(sp)
    219c:	a0007216 	blt	r20,zero,2368 <___vfprintf_internal_r+0x1df8>
    21a0:	00800ac4 	movi	r2,43
    21a4:	d8812005 	stb	r2,1152(sp)
    21a8:	00800244 	movi	r2,9
    21ac:	15003516 	blt	r2,r20,2284 <___vfprintf_internal_r+0x1d14>
    21b0:	00800c04 	movi	r2,48
    21b4:	a5000c04 	addi	r20,r20,48
    21b8:	d8812045 	stb	r2,1153(sp)
    21bc:	dd012085 	stb	r20,1154(sp)
    21c0:	d8c120c4 	addi	r3,sp,1155
    21c4:	d8811fc4 	addi	r2,sp,1151
    21c8:	1885c83a 	sub	r2,r3,r2
    21cc:	d8c13217 	ldw	r3,1224(sp)
    21d0:	d8813515 	stw	r2,1236(sp)
    21d4:	1885883a 	add	r2,r3,r2
    21d8:	d8812b15 	stw	r2,1196(sp)
    21dc:	00800044 	movi	r2,1
    21e0:	10c0580e 	bge	r2,r3,2344 <___vfprintf_internal_r+0x1dd4>
    21e4:	d8812b17 	ldw	r2,1196(sp)
    21e8:	10800044 	addi	r2,r2,1
    21ec:	d8812b15 	stw	r2,1196(sp)
    21f0:	d8812815 	stw	r2,1184(sp)
    21f4:	103ef50e 	bge	r2,zero,1dcc <___vfprintf_internal_r+0x185c>
    21f8:	d8012815 	stw	zero,1184(sp)
    21fc:	003ef306 	br	1dcc <___vfprintf_internal_r+0x185c>
    2200:	d8812b17 	ldw	r2,1196(sp)
    2204:	d8c13217 	ldw	r3,1224(sp)
    2208:	10c01416 	blt	r2,r3,225c <___vfprintf_internal_r+0x1cec>
    220c:	8400004c 	andi	r16,r16,1
    2210:	80000326 	beq	r16,zero,2220 <___vfprintf_internal_r+0x1cb0>
    2214:	d8812b17 	ldw	r2,1196(sp)
    2218:	10800044 	addi	r2,r2,1
    221c:	d8812b15 	stw	r2,1196(sp)
    2220:	d8812815 	stw	r2,1184(sp)
    2224:	10001416 	blt	r2,zero,2278 <___vfprintf_internal_r+0x1d08>
    2228:	048019c4 	movi	r18,103
    222c:	003ee706 	br	1dcc <___vfprintf_internal_r+0x185c>
    2230:	d8012815 	stw	zero,1184(sp)
    2234:	003b1a06 	br	ea0 <___vfprintf_internal_r+0x930>
    2238:	e03e9c1e 	bne	fp,zero,1cac <___vfprintf_internal_r+0x173c>
    223c:	07000044 	movi	fp,1
    2240:	003e9a06 	br	1cac <___vfprintf_internal_r+0x173c>
    2244:	07000184 	movi	fp,6
    2248:	003e9806 	br	1cac <___vfprintf_internal_r+0x173c>
    224c:	00c00b44 	movi	r3,45
    2250:	a520003c 	xorhi	r20,r20,32768
    2254:	d8c12f05 	stb	r3,1212(sp)
    2258:	003e9806 	br	1cbc <___vfprintf_internal_r+0x174c>
    225c:	05003f0e 	bge	zero,r20,235c <___vfprintf_internal_r+0x1dec>
    2260:	05000044 	movi	r20,1
    2264:	d8c13217 	ldw	r3,1224(sp)
    2268:	a0e9883a 	add	r20,r20,r3
    226c:	dd012b15 	stw	r20,1196(sp)
    2270:	dd012815 	stw	r20,1184(sp)
    2274:	a03fec0e 	bge	r20,zero,2228 <___vfprintf_internal_r+0x1cb8>
    2278:	d8012815 	stw	zero,1184(sp)
    227c:	048019c4 	movi	r18,103
    2280:	003ed206 	br	1dcc <___vfprintf_internal_r+0x185c>
    2284:	d8c11f84 	addi	r3,sp,1150
    2288:	102f883a 	mov	r23,r2
    228c:	4839883a 	mov	fp,r9
    2290:	a009883a 	mov	r4,r20
    2294:	01400284 	movi	r5,10
    2298:	182d883a 	mov	r22,r3
    229c:	00093dc0 	call	93dc <__modsi3>
    22a0:	10800c04 	addi	r2,r2,48
    22a4:	a009883a 	mov	r4,r20
    22a8:	b0800005 	stb	r2,0(r22)
    22ac:	01400284 	movi	r5,10
    22b0:	000938c0 	call	938c <__divsi3>
    22b4:	1029883a 	mov	r20,r2
    22b8:	b0ffffc4 	addi	r3,r22,-1
    22bc:	b8bff416 	blt	r23,r2,2290 <___vfprintf_internal_r+0x1d20>
    22c0:	11400c04 	addi	r5,r2,48
    22c4:	b17fffc5 	stb	r5,-1(r22)
    22c8:	d8811fc4 	addi	r2,sp,1151
    22cc:	e013883a 	mov	r9,fp
    22d0:	18803e2e 	bgeu	r3,r2,23cc <___vfprintf_internal_r+0x1e5c>
    22d4:	b007883a 	mov	r3,r22
    22d8:	d9012044 	addi	r4,sp,1153
    22dc:	00000206 	br	22e8 <___vfprintf_internal_r+0x1d78>
    22e0:	19400003 	ldbu	r5,0(r3)
    22e4:	18c00044 	addi	r3,r3,1
    22e8:	21400005 	stb	r5,0(r4)
    22ec:	21000044 	addi	r4,r4,1
    22f0:	10fffb1e 	bne	r2,r3,22e0 <___vfprintf_internal_r+0x1d70>
    22f4:	d8c12004 	addi	r3,sp,1152
    22f8:	1d87c83a 	sub	r3,r3,r22
    22fc:	d9012044 	addi	r4,sp,1153
    2300:	20c7883a 	add	r3,r4,r3
    2304:	003fb006 	br	21c8 <___vfprintf_internal_r+0x1c58>
    2308:	e5c00044 	addi	r23,fp,1
    230c:	003e7406 	br	1ce0 <___vfprintf_internal_r+0x1770>
    2310:	d8c12217 	ldw	r3,1160(sp)
    2314:	003e9906 	br	1d7c <___vfprintf_internal_r+0x180c>
    2318:	d9012d17 	ldw	r4,1204(sp)
    231c:	ac800043 	ldbu	r18,1(r21)
    2320:	b82b883a 	mov	r21,r23
    2324:	20c00017 	ldw	r3,0(r4)
    2328:	20800104 	addi	r2,r4,4
    232c:	d8812d15 	stw	r2,1204(sp)
    2330:	18002116 	blt	r3,zero,23b8 <___vfprintf_internal_r+0x1e48>
    2334:	94803fcc 	andi	r18,r18,255
    2338:	9480201c 	xori	r18,r18,128
    233c:	94bfe004 	addi	r18,r18,-128
    2340:	0038e706 	br	6e0 <___vfprintf_internal_r+0x170>
    2344:	80a0703a 	and	r16,r16,r2
    2348:	803fa61e 	bne	r16,zero,21e4 <___vfprintf_internal_r+0x1c74>
    234c:	d8812b17 	ldw	r2,1196(sp)
    2350:	d8812815 	stw	r2,1184(sp)
    2354:	103e9d0e 	bge	r2,zero,1dcc <___vfprintf_internal_r+0x185c>
    2358:	003fa706 	br	21f8 <___vfprintf_internal_r+0x1c88>
    235c:	00800084 	movi	r2,2
    2360:	1529c83a 	sub	r20,r2,r20
    2364:	003fbf06 	br	2264 <___vfprintf_internal_r+0x1cf4>
    2368:	00800b44 	movi	r2,45
    236c:	0529c83a 	sub	r20,zero,r20
    2370:	d8812005 	stb	r2,1152(sp)
    2374:	003f8c06 	br	21a8 <___vfprintf_internal_r+0x1c38>
    2378:	008011c4 	movi	r2,71
    237c:	90be6926 	beq	r18,r2,1d24 <___vfprintf_internal_r+0x17b4>
    2380:	003e6a06 	br	1d2c <___vfprintf_internal_r+0x17bc>
    2384:	00bfffc4 	movi	r2,-1
    2388:	d8812c15 	stw	r2,1200(sp)
    238c:	0039ad06 	br	a44 <___vfprintf_internal_r+0x4d4>
    2390:	1007883a 	mov	r3,r2
    2394:	003e7906 	br	1d7c <___vfprintf_internal_r+0x180c>
    2398:	e000021e 	bne	fp,zero,23a4 <___vfprintf_internal_r+0x1e34>
    239c:	8400004c 	andi	r16,r16,1
    23a0:	80000e26 	beq	r16,zero,23dc <___vfprintf_internal_r+0x1e6c>
    23a4:	e7000084 	addi	fp,fp,2
    23a8:	df012b15 	stw	fp,1196(sp)
    23ac:	df012815 	stw	fp,1184(sp)
    23b0:	e03e860e 	bge	fp,zero,1dcc <___vfprintf_internal_r+0x185c>
    23b4:	003f9006 	br	21f8 <___vfprintf_internal_r+0x1c88>
    23b8:	94803fcc 	andi	r18,r18,255
    23bc:	9480201c 	xori	r18,r18,128
    23c0:	00ffffc4 	movi	r3,-1
    23c4:	94bfe004 	addi	r18,r18,-128
    23c8:	0038c506 	br	6e0 <___vfprintf_internal_r+0x170>
    23cc:	d8c12044 	addi	r3,sp,1153
    23d0:	003f7d06 	br	21c8 <___vfprintf_internal_r+0x1c58>
    23d4:	dd012417 	ldw	r20,1168(sp)
    23d8:	003f6d06 	br	2190 <___vfprintf_internal_r+0x1c20>
    23dc:	00c00044 	movi	r3,1
    23e0:	d8c12815 	stw	r3,1184(sp)
    23e4:	d8c12b15 	stw	r3,1196(sp)
    23e8:	003e7806 	br	1dcc <___vfprintf_internal_r+0x185c>

000023ec <__vfprintf_internal>:
    23ec:	00800074 	movhi	r2,1
    23f0:	10876104 	addi	r2,r2,7556
    23f4:	2007883a 	mov	r3,r4
    23f8:	11000017 	ldw	r4,0(r2)
    23fc:	2805883a 	mov	r2,r5
    2400:	300f883a 	mov	r7,r6
    2404:	180b883a 	mov	r5,r3
    2408:	100d883a 	mov	r6,r2
    240c:	00005701 	jmpi	570 <___vfprintf_internal_r>

00002410 <__swsetup_r>:
    2410:	00800074 	movhi	r2,1
    2414:	10876104 	addi	r2,r2,7556
    2418:	10800017 	ldw	r2,0(r2)
    241c:	defffd04 	addi	sp,sp,-12
    2420:	dc400115 	stw	r17,4(sp)
    2424:	dc000015 	stw	r16,0(sp)
    2428:	dfc00215 	stw	ra,8(sp)
    242c:	2023883a 	mov	r17,r4
    2430:	2821883a 	mov	r16,r5
    2434:	10000226 	beq	r2,zero,2440 <__swsetup_r+0x30>
    2438:	10c00e17 	ldw	r3,56(r2)
    243c:	18003d26 	beq	r3,zero,2534 <__swsetup_r+0x124>
    2440:	8080030b 	ldhu	r2,12(r16)
    2444:	10c0020c 	andi	r3,r2,8
    2448:	18ffffcc 	andi	r3,r3,65535
    244c:	18e0001c 	xori	r3,r3,32768
    2450:	18e00004 	addi	r3,r3,-32768
    2454:	18001226 	beq	r3,zero,24a0 <__swsetup_r+0x90>
    2458:	80c00417 	ldw	r3,16(r16)
    245c:	18001f26 	beq	r3,zero,24dc <__swsetup_r+0xcc>
    2460:	1100004c 	andi	r4,r2,1
    2464:	2000261e 	bne	r4,zero,2500 <__swsetup_r+0xf0>
    2468:	1080008c 	andi	r2,r2,2
    246c:	10bfffcc 	andi	r2,r2,65535
    2470:	10a0001c 	xori	r2,r2,32768
    2474:	10a00004 	addi	r2,r2,-32768
    2478:	1000311e 	bne	r2,zero,2540 <__swsetup_r+0x130>
    247c:	80800517 	ldw	r2,20(r16)
    2480:	80800215 	stw	r2,8(r16)
    2484:	18002326 	beq	r3,zero,2514 <__swsetup_r+0x104>
    2488:	0005883a 	mov	r2,zero
    248c:	dfc00217 	ldw	ra,8(sp)
    2490:	dc400117 	ldw	r17,4(sp)
    2494:	dc000017 	ldw	r16,0(sp)
    2498:	dec00304 	addi	sp,sp,12
    249c:	f800283a 	ret
    24a0:	10c0040c 	andi	r3,r2,16
    24a4:	18ffffcc 	andi	r3,r3,65535
    24a8:	18e0001c 	xori	r3,r3,32768
    24ac:	18e00004 	addi	r3,r3,-32768
    24b0:	18001e26 	beq	r3,zero,252c <__swsetup_r+0x11c>
    24b4:	10c0010c 	andi	r3,r2,4
    24b8:	18ffffcc 	andi	r3,r3,65535
    24bc:	18e0001c 	xori	r3,r3,32768
    24c0:	18e00004 	addi	r3,r3,-32768
    24c4:	1800211e 	bne	r3,zero,254c <__swsetup_r+0x13c>
    24c8:	80c00417 	ldw	r3,16(r16)
    24cc:	11400214 	ori	r5,r2,8
    24d0:	8140030d 	sth	r5,12(r16)
    24d4:	2805883a 	mov	r2,r5
    24d8:	183fe11e 	bne	r3,zero,2460 <__swsetup_r+0x50>
    24dc:	1140a00c 	andi	r5,r2,640
    24e0:	01008004 	movi	r4,512
    24e4:	293fde26 	beq	r5,r4,2460 <__swsetup_r+0x50>
    24e8:	8809883a 	mov	r4,r17
    24ec:	800b883a 	mov	r5,r16
    24f0:	0004e0c0 	call	4e0c <__smakebuf_r>
    24f4:	8080030b 	ldhu	r2,12(r16)
    24f8:	80c00417 	ldw	r3,16(r16)
    24fc:	003fd806 	br	2460 <__swsetup_r+0x50>
    2500:	80800517 	ldw	r2,20(r16)
    2504:	80000215 	stw	zero,8(r16)
    2508:	0085c83a 	sub	r2,zero,r2
    250c:	80800615 	stw	r2,24(r16)
    2510:	183fdd1e 	bne	r3,zero,2488 <__swsetup_r+0x78>
    2514:	8080030b 	ldhu	r2,12(r16)
    2518:	1080200c 	andi	r2,r2,128
    251c:	10bfffcc 	andi	r2,r2,65535
    2520:	10a0001c 	xori	r2,r2,32768
    2524:	10a00004 	addi	r2,r2,-32768
    2528:	103fd826 	beq	r2,zero,248c <__swsetup_r+0x7c>
    252c:	00bfffc4 	movi	r2,-1
    2530:	003fd606 	br	248c <__swsetup_r+0x7c>
    2534:	1009883a 	mov	r4,r2
    2538:	00040980 	call	4098 <__sinit>
    253c:	003fc006 	br	2440 <__swsetup_r+0x30>
    2540:	0005883a 	mov	r2,zero
    2544:	80800215 	stw	r2,8(r16)
    2548:	003fce06 	br	2484 <__swsetup_r+0x74>
    254c:	81400c17 	ldw	r5,48(r16)
    2550:	28000626 	beq	r5,zero,256c <__swsetup_r+0x15c>
    2554:	80c01004 	addi	r3,r16,64
    2558:	28c00326 	beq	r5,r3,2568 <__swsetup_r+0x158>
    255c:	8809883a 	mov	r4,r17
    2560:	000441c0 	call	441c <_free_r>
    2564:	8080030b 	ldhu	r2,12(r16)
    2568:	80000c15 	stw	zero,48(r16)
    256c:	80c00417 	ldw	r3,16(r16)
    2570:	013ff6c4 	movi	r4,-37
    2574:	2084703a 	and	r2,r4,r2
    2578:	80000115 	stw	zero,4(r16)
    257c:	80c00015 	stw	r3,0(r16)
    2580:	003fd206 	br	24cc <__swsetup_r+0xbc>

00002584 <quorem>:
    2584:	defff204 	addi	sp,sp,-56
    2588:	dd000815 	stw	r20,32(sp)
    258c:	20800417 	ldw	r2,16(r4)
    2590:	2d000417 	ldw	r20,16(r5)
    2594:	dcc00715 	stw	r19,28(sp)
    2598:	dfc00d15 	stw	ra,52(sp)
    259c:	df000c15 	stw	fp,48(sp)
    25a0:	ddc00b15 	stw	r23,44(sp)
    25a4:	dd800a15 	stw	r22,40(sp)
    25a8:	dd400915 	stw	r21,36(sp)
    25ac:	dc800615 	stw	r18,24(sp)
    25b0:	dc400515 	stw	r17,20(sp)
    25b4:	dc000415 	stw	r16,16(sp)
    25b8:	d9400015 	stw	r5,0(sp)
    25bc:	2027883a 	mov	r19,r4
    25c0:	15007d16 	blt	r2,r20,27b8 <quorem+0x234>
    25c4:	a0800104 	addi	r2,r20,4
    25c8:	1085883a 	add	r2,r2,r2
    25cc:	1085883a 	add	r2,r2,r2
    25d0:	28ad883a 	add	r22,r5,r2
    25d4:	2085883a 	add	r2,r4,r2
    25d8:	10800017 	ldw	r2,0(r2)
    25dc:	b1400017 	ldw	r5,0(r22)
    25e0:	a53fffc4 	addi	r20,r20,-1
    25e4:	1009883a 	mov	r4,r2
    25e8:	29400044 	addi	r5,r5,1
    25ec:	d8800115 	stw	r2,4(sp)
    25f0:	00094380 	call	9438 <__udivsi3>
    25f4:	1025883a 	mov	r18,r2
    25f8:	d8800017 	ldw	r2,0(sp)
    25fc:	9f000504 	addi	fp,r19,20
    2600:	14000504 	addi	r16,r2,20
    2604:	90003626 	beq	r18,zero,26e0 <quorem+0x15c>
    2608:	802b883a 	mov	r21,r16
    260c:	e023883a 	mov	r17,fp
    2610:	0007883a 	mov	r3,zero
    2614:	002f883a 	mov	r23,zero
    2618:	a9800017 	ldw	r6,0(r21)
    261c:	900b883a 	mov	r5,r18
    2620:	d8c00315 	stw	r3,12(sp)
    2624:	313fffcc 	andi	r4,r6,65535
    2628:	d9800215 	stw	r6,8(sp)
    262c:	00094480 	call	9448 <__mulsi3>
    2630:	d9800217 	ldw	r6,8(sp)
    2634:	d8c00317 	ldw	r3,12(sp)
    2638:	900b883a 	mov	r5,r18
    263c:	3008d43a 	srli	r4,r6,16
    2640:	1887883a 	add	r3,r3,r2
    2644:	d8c00315 	stw	r3,12(sp)
    2648:	00094480 	call	9448 <__mulsi3>
    264c:	89400017 	ldw	r5,0(r17)
    2650:	d8c00317 	ldw	r3,12(sp)
    2654:	ad400104 	addi	r21,r21,4
    2658:	293fffcc 	andi	r4,r5,65535
    265c:	1810d43a 	srli	r8,r3,16
    2660:	25c9883a 	add	r4,r4,r23
    2664:	18ffffcc 	andi	r3,r3,65535
    2668:	20c9c83a 	sub	r4,r4,r3
    266c:	280cd43a 	srli	r6,r5,16
    2670:	4085883a 	add	r2,r8,r2
    2674:	2007d43a 	srai	r3,r4,16
    2678:	117fffcc 	andi	r5,r2,65535
    267c:	314bc83a 	sub	r5,r6,r5
    2680:	28cb883a 	add	r5,r5,r3
    2684:	8940008d 	sth	r5,2(r17)
    2688:	8900000d 	sth	r4,0(r17)
    268c:	1006d43a 	srli	r3,r2,16
    2690:	282fd43a 	srai	r23,r5,16
    2694:	8c400104 	addi	r17,r17,4
    2698:	b57fdf2e 	bgeu	r22,r21,2618 <quorem+0x94>
    269c:	d8c00117 	ldw	r3,4(sp)
    26a0:	18000f1e 	bne	r3,zero,26e0 <quorem+0x15c>
    26a4:	a0800144 	addi	r2,r20,5
    26a8:	1085883a 	add	r2,r2,r2
    26ac:	1085883a 	add	r2,r2,r2
    26b0:	9887883a 	add	r3,r19,r2
    26b4:	18bfff04 	addi	r2,r3,-4
    26b8:	e080082e 	bgeu	fp,r2,26dc <quorem+0x158>
    26bc:	18ffff17 	ldw	r3,-4(r3)
    26c0:	18000326 	beq	r3,zero,26d0 <quorem+0x14c>
    26c4:	00000506 	br	26dc <quorem+0x158>
    26c8:	10c00017 	ldw	r3,0(r2)
    26cc:	1800031e 	bne	r3,zero,26dc <quorem+0x158>
    26d0:	10bfff04 	addi	r2,r2,-4
    26d4:	a53fffc4 	addi	r20,r20,-1
    26d8:	e0bffb36 	bltu	fp,r2,26c8 <quorem+0x144>
    26dc:	9d000415 	stw	r20,16(r19)
    26e0:	d9400017 	ldw	r5,0(sp)
    26e4:	9809883a 	mov	r4,r19
    26e8:	00065240 	call	6524 <__mcmp>
    26ec:	10002516 	blt	r2,zero,2784 <quorem+0x200>
    26f0:	94800044 	addi	r18,r18,1
    26f4:	e007883a 	mov	r3,fp
    26f8:	000d883a 	mov	r6,zero
    26fc:	18800017 	ldw	r2,0(r3)
    2700:	82000017 	ldw	r8,0(r16)
    2704:	84000104 	addi	r16,r16,4
    2708:	11ffffcc 	andi	r7,r2,65535
    270c:	413fffcc 	andi	r4,r8,65535
    2710:	398d883a 	add	r6,r7,r6
    2714:	310fc83a 	sub	r7,r6,r4
    2718:	4010d43a 	srli	r8,r8,16
    271c:	100cd43a 	srli	r6,r2,16
    2720:	3809d43a 	srai	r4,r7,16
    2724:	19c0000d 	sth	r7,0(r3)
    2728:	320dc83a 	sub	r6,r6,r8
    272c:	310d883a 	add	r6,r6,r4
    2730:	1980008d 	sth	r6,2(r3)
    2734:	300dd43a 	srai	r6,r6,16
    2738:	18c00104 	addi	r3,r3,4
    273c:	b43fef2e 	bgeu	r22,r16,26fc <quorem+0x178>
    2740:	a0800144 	addi	r2,r20,5
    2744:	1085883a 	add	r2,r2,r2
    2748:	1085883a 	add	r2,r2,r2
    274c:	9885883a 	add	r2,r19,r2
    2750:	10c00017 	ldw	r3,0(r2)
    2754:	18000b1e 	bne	r3,zero,2784 <quorem+0x200>
    2758:	10ffff04 	addi	r3,r2,-4
    275c:	e0c0082e 	bgeu	fp,r3,2780 <quorem+0x1fc>
    2760:	10bfff17 	ldw	r2,-4(r2)
    2764:	10000326 	beq	r2,zero,2774 <quorem+0x1f0>
    2768:	00000506 	br	2780 <quorem+0x1fc>
    276c:	18800017 	ldw	r2,0(r3)
    2770:	1000031e 	bne	r2,zero,2780 <quorem+0x1fc>
    2774:	18ffff04 	addi	r3,r3,-4
    2778:	a53fffc4 	addi	r20,r20,-1
    277c:	e0fffb36 	bltu	fp,r3,276c <quorem+0x1e8>
    2780:	9d000415 	stw	r20,16(r19)
    2784:	9005883a 	mov	r2,r18
    2788:	dfc00d17 	ldw	ra,52(sp)
    278c:	df000c17 	ldw	fp,48(sp)
    2790:	ddc00b17 	ldw	r23,44(sp)
    2794:	dd800a17 	ldw	r22,40(sp)
    2798:	dd400917 	ldw	r21,36(sp)
    279c:	dd000817 	ldw	r20,32(sp)
    27a0:	dcc00717 	ldw	r19,28(sp)
    27a4:	dc800617 	ldw	r18,24(sp)
    27a8:	dc400517 	ldw	r17,20(sp)
    27ac:	dc000417 	ldw	r16,16(sp)
    27b0:	dec00e04 	addi	sp,sp,56
    27b4:	f800283a 	ret
    27b8:	0005883a 	mov	r2,zero
    27bc:	003ff206 	br	2788 <quorem+0x204>

000027c0 <_dtoa_r>:
    27c0:	20801017 	ldw	r2,64(r4)
    27c4:	deffdf04 	addi	sp,sp,-132
    27c8:	dcc01a15 	stw	r19,104(sp)
    27cc:	dc801915 	stw	r18,100(sp)
    27d0:	dc401815 	stw	r17,96(sp)
    27d4:	dc001715 	stw	r16,92(sp)
    27d8:	dfc02015 	stw	ra,128(sp)
    27dc:	df001f15 	stw	fp,124(sp)
    27e0:	ddc01e15 	stw	r23,120(sp)
    27e4:	dd801d15 	stw	r22,116(sp)
    27e8:	dd401c15 	stw	r21,112(sp)
    27ec:	dd001b15 	stw	r20,108(sp)
    27f0:	d9400315 	stw	r5,12(sp)
    27f4:	d9c00415 	stw	r7,16(sp)
    27f8:	2021883a 	mov	r16,r4
    27fc:	3025883a 	mov	r18,r6
    2800:	dcc02317 	ldw	r19,140(sp)
    2804:	3023883a 	mov	r17,r6
    2808:	10000826 	beq	r2,zero,282c <_dtoa_r+0x6c>
    280c:	20c01117 	ldw	r3,68(r4)
    2810:	01800044 	movi	r6,1
    2814:	100b883a 	mov	r5,r2
    2818:	30cc983a 	sll	r6,r6,r3
    281c:	10c00115 	stw	r3,4(r2)
    2820:	11800215 	stw	r6,8(r2)
    2824:	0005c800 	call	5c80 <_Bfree>
    2828:	80001015 	stw	zero,64(r16)
    282c:	90002f16 	blt	r18,zero,28ec <_dtoa_r+0x12c>
    2830:	98000015 	stw	zero,0(r19)
    2834:	90dffc2c 	andhi	r3,r18,32752
    2838:	009ffc34 	movhi	r2,32752
    283c:	18801c26 	beq	r3,r2,28b0 <_dtoa_r+0xf0>
    2840:	d9000317 	ldw	r4,12(sp)
    2844:	880b883a 	mov	r5,r17
    2848:	000d883a 	mov	r6,zero
    284c:	000f883a 	mov	r7,zero
    2850:	0008e780 	call	8e78 <__eqdf2>
    2854:	10002c1e 	bne	r2,zero,2908 <_dtoa_r+0x148>
    2858:	d9002217 	ldw	r4,136(sp)
    285c:	d9c02417 	ldw	r7,144(sp)
    2860:	00800044 	movi	r2,1
    2864:	20800015 	stw	r2,0(r4)
    2868:	38019426 	beq	r7,zero,2ebc <_dtoa_r+0x6fc>
    286c:	00800074 	movhi	r2,1
    2870:	10802044 	addi	r2,r2,129
    2874:	38800015 	stw	r2,0(r7)
    2878:	15ffffc4 	addi	r23,r2,-1
    287c:	b805883a 	mov	r2,r23
    2880:	dfc02017 	ldw	ra,128(sp)
    2884:	df001f17 	ldw	fp,124(sp)
    2888:	ddc01e17 	ldw	r23,120(sp)
    288c:	dd801d17 	ldw	r22,116(sp)
    2890:	dd401c17 	ldw	r21,112(sp)
    2894:	dd001b17 	ldw	r20,108(sp)
    2898:	dcc01a17 	ldw	r19,104(sp)
    289c:	dc801917 	ldw	r18,100(sp)
    28a0:	dc401817 	ldw	r17,96(sp)
    28a4:	dc001717 	ldw	r16,92(sp)
    28a8:	dec02104 	addi	sp,sp,132
    28ac:	f800283a 	ret
    28b0:	d8c02217 	ldw	r3,136(sp)
    28b4:	d9000317 	ldw	r4,12(sp)
    28b8:	0089c3c4 	movi	r2,9999
    28bc:	18800015 	stw	r2,0(r3)
    28c0:	20016c26 	beq	r4,zero,2e74 <_dtoa_r+0x6b4>
    28c4:	05c00074 	movhi	r23,1
    28c8:	bdc02c04 	addi	r23,r23,176
    28cc:	d9c02417 	ldw	r7,144(sp)
    28d0:	383fea26 	beq	r7,zero,287c <_dtoa_r+0xbc>
    28d4:	b88000c7 	ldb	r2,3(r23)
    28d8:	10016d1e 	bne	r2,zero,2e90 <_dtoa_r+0x6d0>
    28dc:	b88000c4 	addi	r2,r23,3
    28e0:	d8c02417 	ldw	r3,144(sp)
    28e4:	18800015 	stw	r2,0(r3)
    28e8:	003fe406 	br	287c <_dtoa_r+0xbc>
    28ec:	04600034 	movhi	r17,32768
    28f0:	8c7fffc4 	addi	r17,r17,-1
    28f4:	9462703a 	and	r17,r18,r17
    28f8:	00800044 	movi	r2,1
    28fc:	98800015 	stw	r2,0(r19)
    2900:	8825883a 	mov	r18,r17
    2904:	003fcb06 	br	2834 <_dtoa_r+0x74>
    2908:	d9400317 	ldw	r5,12(sp)
    290c:	9028d53a 	srli	r20,r18,20
    2910:	d8800204 	addi	r2,sp,8
    2914:	d8800015 	stw	r2,0(sp)
    2918:	8009883a 	mov	r4,r16
    291c:	880d883a 	mov	r6,r17
    2920:	d9c00104 	addi	r7,sp,4
    2924:	00068cc0 	call	68cc <__d2b>
    2928:	a501ffcc 	andi	r20,r20,2047
    292c:	1039883a 	mov	fp,r2
    2930:	a001591e 	bne	r20,zero,2e98 <_dtoa_r+0x6d8>
    2934:	dd400217 	ldw	r21,8(sp)
    2938:	dd000117 	ldw	r20,4(sp)
    293c:	00befbc4 	movi	r2,-1041
    2940:	ad29883a 	add	r20,r21,r20
    2944:	a082d216 	blt	r20,r2,3490 <_dtoa_r+0xcd0>
    2948:	d8c00317 	ldw	r3,12(sp)
    294c:	013f0384 	movi	r4,-1010
    2950:	2509c83a 	sub	r4,r4,r20
    2954:	a0810484 	addi	r2,r20,1042
    2958:	9124983a 	sll	r18,r18,r4
    295c:	1884d83a 	srl	r2,r3,r2
    2960:	9088b03a 	or	r4,r18,r2
    2964:	00091fc0 	call	91fc <__floatunsidf>
    2968:	1009883a 	mov	r4,r2
    296c:	017f8434 	movhi	r5,65040
    2970:	00800044 	movi	r2,1
    2974:	194b883a 	add	r5,r3,r5
    2978:	a53fffc4 	addi	r20,r20,-1
    297c:	d8800f15 	stw	r2,60(sp)
    2980:	000d883a 	mov	r6,zero
    2984:	01cffe34 	movhi	r7,16376
    2988:	00089800 	call	8980 <__subdf3>
    298c:	1009883a 	mov	r4,r2
    2990:	180b883a 	mov	r5,r3
    2994:	0198dbf4 	movhi	r6,25455
    2998:	3190d844 	addi	r6,r6,17249
    299c:	01cff4f4 	movhi	r7,16339
    29a0:	39e1e9c4 	addi	r7,r7,-30809
    29a4:	00089e00 	call	89e0 <__muldf3>
    29a8:	180b883a 	mov	r5,r3
    29ac:	01a2d874 	movhi	r6,35681
    29b0:	31b22cc4 	addi	r6,r6,-14157
    29b4:	01cff1f4 	movhi	r7,16327
    29b8:	39e28a04 	addi	r7,r7,-30168
    29bc:	1009883a 	mov	r4,r2
    29c0:	000892c0 	call	892c <__adddf3>
    29c4:	a009883a 	mov	r4,r20
    29c8:	1027883a 	mov	r19,r2
    29cc:	1825883a 	mov	r18,r3
    29d0:	00090540 	call	9054 <__floatsidf>
    29d4:	1009883a 	mov	r4,r2
    29d8:	180b883a 	mov	r5,r3
    29dc:	019427f4 	movhi	r6,20639
    29e0:	319e7ec4 	addi	r6,r6,31227
    29e4:	01cff4f4 	movhi	r7,16339
    29e8:	39d104c4 	addi	r7,r7,17427
    29ec:	00089e00 	call	89e0 <__muldf3>
    29f0:	9809883a 	mov	r4,r19
    29f4:	900b883a 	mov	r5,r18
    29f8:	100d883a 	mov	r6,r2
    29fc:	180f883a 	mov	r7,r3
    2a00:	000892c0 	call	892c <__adddf3>
    2a04:	1009883a 	mov	r4,r2
    2a08:	180b883a 	mov	r5,r3
    2a0c:	1027883a 	mov	r19,r2
    2a10:	1825883a 	mov	r18,r3
    2a14:	00091280 	call	9128 <__fixdfsi>
    2a18:	9809883a 	mov	r4,r19
    2a1c:	900b883a 	mov	r5,r18
    2a20:	000d883a 	mov	r6,zero
    2a24:	000f883a 	mov	r7,zero
    2a28:	d8800615 	stw	r2,24(sp)
    2a2c:	0008ff80 	call	8ff8 <__ltdf2>
    2a30:	10027e16 	blt	r2,zero,342c <_dtoa_r+0xc6c>
    2a34:	d8c00617 	ldw	r3,24(sp)
    2a38:	00800584 	movi	r2,22
    2a3c:	10c26c36 	bltu	r2,r3,33f0 <_dtoa_r+0xc30>
    2a40:	180490fa 	slli	r2,r3,3
    2a44:	00c00074 	movhi	r3,1
    2a48:	18c05204 	addi	r3,r3,328
    2a4c:	d9800317 	ldw	r6,12(sp)
    2a50:	1885883a 	add	r2,r3,r2
    2a54:	11000017 	ldw	r4,0(r2)
    2a58:	11400117 	ldw	r5,4(r2)
    2a5c:	880f883a 	mov	r7,r17
    2a60:	0008f300 	call	8f30 <__gtdf2>
    2a64:	00828f0e 	bge	zero,r2,34a4 <_dtoa_r+0xce4>
    2a68:	d8800617 	ldw	r2,24(sp)
    2a6c:	d8000d15 	stw	zero,52(sp)
    2a70:	10bfffc4 	addi	r2,r2,-1
    2a74:	d8800615 	stw	r2,24(sp)
    2a78:	ad29c83a 	sub	r20,r21,r20
    2a7c:	a53fffc4 	addi	r20,r20,-1
    2a80:	a0026616 	blt	r20,zero,341c <_dtoa_r+0xc5c>
    2a84:	dd000715 	stw	r20,28(sp)
    2a88:	d8000815 	stw	zero,32(sp)
    2a8c:	d8800617 	ldw	r2,24(sp)
    2a90:	10025a16 	blt	r2,zero,33fc <_dtoa_r+0xc3c>
    2a94:	d8c00717 	ldw	r3,28(sp)
    2a98:	d8800b15 	stw	r2,44(sp)
    2a9c:	d8000a15 	stw	zero,40(sp)
    2aa0:	1887883a 	add	r3,r3,r2
    2aa4:	d8c00715 	stw	r3,28(sp)
    2aa8:	d9c00417 	ldw	r7,16(sp)
    2aac:	00800244 	movi	r2,9
    2ab0:	11c10536 	bltu	r2,r7,2ec8 <_dtoa_r+0x708>
    2ab4:	00800144 	movi	r2,5
    2ab8:	11c4c60e 	bge	r2,r7,3dd4 <_dtoa_r+0x1614>
    2abc:	39ffff04 	addi	r7,r7,-4
    2ac0:	d9c00415 	stw	r7,16(sp)
    2ac4:	0027883a 	mov	r19,zero
    2ac8:	d9c00417 	ldw	r7,16(sp)
    2acc:	008000c4 	movi	r2,3
    2ad0:	3883a226 	beq	r7,r2,395c <_dtoa_r+0x119c>
    2ad4:	11c2bc16 	blt	r2,r7,35c8 <_dtoa_r+0xe08>
    2ad8:	00800084 	movi	r2,2
    2adc:	3880fb1e 	bne	r7,r2,2ecc <_dtoa_r+0x70c>
    2ae0:	d8000c15 	stw	zero,48(sp)
    2ae4:	d9002117 	ldw	r4,132(sp)
    2ae8:	0103ae0e 	bge	zero,r4,39a4 <_dtoa_r+0x11e4>
    2aec:	2025883a 	mov	r18,r4
    2af0:	d9000e15 	stw	r4,56(sp)
    2af4:	d9000915 	stw	r4,36(sp)
    2af8:	80001115 	stw	zero,68(r16)
    2afc:	008005c4 	movi	r2,23
    2b00:	1484b22e 	bgeu	r2,r18,3dcc <_dtoa_r+0x160c>
    2b04:	00c00044 	movi	r3,1
    2b08:	00800104 	movi	r2,4
    2b0c:	1085883a 	add	r2,r2,r2
    2b10:	11000504 	addi	r4,r2,20
    2b14:	180b883a 	mov	r5,r3
    2b18:	18c00044 	addi	r3,r3,1
    2b1c:	913ffb2e 	bgeu	r18,r4,2b0c <_dtoa_r+0x34c>
    2b20:	81401115 	stw	r5,68(r16)
    2b24:	8009883a 	mov	r4,r16
    2b28:	0005bd80 	call	5bd8 <_Balloc>
    2b2c:	102f883a 	mov	r23,r2
    2b30:	80801015 	stw	r2,64(r16)
    2b34:	00800384 	movi	r2,14
    2b38:	1480f036 	bltu	r2,r18,2efc <_dtoa_r+0x73c>
    2b3c:	9800ef26 	beq	r19,zero,2efc <_dtoa_r+0x73c>
    2b40:	d8800617 	ldw	r2,24(sp)
    2b44:	00839c0e 	bge	zero,r2,39b8 <_dtoa_r+0x11f8>
    2b48:	d8c00617 	ldw	r3,24(sp)
    2b4c:	108003cc 	andi	r2,r2,15
    2b50:	100490fa 	slli	r2,r2,3
    2b54:	182bd13a 	srai	r21,r3,4
    2b58:	00c00074 	movhi	r3,1
    2b5c:	18c05204 	addi	r3,r3,328
    2b60:	1885883a 	add	r2,r3,r2
    2b64:	a8c0040c 	andi	r3,r21,16
    2b68:	12800017 	ldw	r10,0(r2)
    2b6c:	15800117 	ldw	r22,4(r2)
    2b70:	18038726 	beq	r3,zero,3990 <_dtoa_r+0x11d0>
    2b74:	00800074 	movhi	r2,1
    2b78:	10804804 	addi	r2,r2,288
    2b7c:	11800817 	ldw	r6,32(r2)
    2b80:	11c00917 	ldw	r7,36(r2)
    2b84:	d9000317 	ldw	r4,12(sp)
    2b88:	880b883a 	mov	r5,r17
    2b8c:	da801515 	stw	r10,84(sp)
    2b90:	0008cc40 	call	8cc4 <__divdf3>
    2b94:	da801517 	ldw	r10,84(sp)
    2b98:	d8801015 	stw	r2,64(sp)
    2b9c:	1829883a 	mov	r20,r3
    2ba0:	ad4003cc 	andi	r21,r21,15
    2ba4:	048000c4 	movi	r18,3
    2ba8:	a8001126 	beq	r21,zero,2bf0 <_dtoa_r+0x430>
    2bac:	04c00074 	movhi	r19,1
    2bb0:	9cc04804 	addi	r19,r19,288
    2bb4:	5005883a 	mov	r2,r10
    2bb8:	b007883a 	mov	r3,r22
    2bbc:	a980004c 	andi	r6,r21,1
    2bc0:	1009883a 	mov	r4,r2
    2bc4:	a82bd07a 	srai	r21,r21,1
    2bc8:	180b883a 	mov	r5,r3
    2bcc:	30000426 	beq	r6,zero,2be0 <_dtoa_r+0x420>
    2bd0:	99800017 	ldw	r6,0(r19)
    2bd4:	99c00117 	ldw	r7,4(r19)
    2bd8:	94800044 	addi	r18,r18,1
    2bdc:	00089e00 	call	89e0 <__muldf3>
    2be0:	9cc00204 	addi	r19,r19,8
    2be4:	a83ff51e 	bne	r21,zero,2bbc <_dtoa_r+0x3fc>
    2be8:	1015883a 	mov	r10,r2
    2bec:	182d883a 	mov	r22,r3
    2bf0:	d9001017 	ldw	r4,64(sp)
    2bf4:	a00b883a 	mov	r5,r20
    2bf8:	500d883a 	mov	r6,r10
    2bfc:	b00f883a 	mov	r7,r22
    2c00:	0008cc40 	call	8cc4 <__divdf3>
    2c04:	1027883a 	mov	r19,r2
    2c08:	1829883a 	mov	r20,r3
    2c0c:	d8c00d17 	ldw	r3,52(sp)
    2c10:	18000626 	beq	r3,zero,2c2c <_dtoa_r+0x46c>
    2c14:	9809883a 	mov	r4,r19
    2c18:	a00b883a 	mov	r5,r20
    2c1c:	000d883a 	mov	r6,zero
    2c20:	01cffc34 	movhi	r7,16368
    2c24:	0008ff80 	call	8ff8 <__ltdf2>
    2c28:	10040e16 	blt	r2,zero,3c64 <_dtoa_r+0x14a4>
    2c2c:	9009883a 	mov	r4,r18
    2c30:	00090540 	call	9054 <__floatsidf>
    2c34:	1009883a 	mov	r4,r2
    2c38:	180b883a 	mov	r5,r3
    2c3c:	980d883a 	mov	r6,r19
    2c40:	a00f883a 	mov	r7,r20
    2c44:	00089e00 	call	89e0 <__muldf3>
    2c48:	1009883a 	mov	r4,r2
    2c4c:	180b883a 	mov	r5,r3
    2c50:	000d883a 	mov	r6,zero
    2c54:	01d00734 	movhi	r7,16412
    2c58:	000892c0 	call	892c <__adddf3>
    2c5c:	057f3034 	movhi	r21,64704
    2c60:	1d6b883a 	add	r21,r3,r21
    2c64:	d8c00917 	ldw	r3,36(sp)
    2c68:	1025883a 	mov	r18,r2
    2c6c:	18031f26 	beq	r3,zero,38ec <_dtoa_r+0x112c>
    2c70:	d8800617 	ldw	r2,24(sp)
    2c74:	dac00917 	ldw	r11,36(sp)
    2c78:	d8801315 	stw	r2,76(sp)
    2c7c:	d8c00c17 	ldw	r3,48(sp)
    2c80:	18039026 	beq	r3,zero,3ac4 <_dtoa_r+0x1304>
    2c84:	58bfffc4 	addi	r2,r11,-1
    2c88:	100490fa 	slli	r2,r2,3
    2c8c:	00c00074 	movhi	r3,1
    2c90:	18c05204 	addi	r3,r3,328
    2c94:	0009883a 	mov	r4,zero
    2c98:	1885883a 	add	r2,r3,r2
    2c9c:	11800017 	ldw	r6,0(r2)
    2ca0:	11c00117 	ldw	r7,4(r2)
    2ca4:	014ff834 	movhi	r5,16352
    2ca8:	dac01615 	stw	r11,88(sp)
    2cac:	0008cc40 	call	8cc4 <__divdf3>
    2cb0:	900d883a 	mov	r6,r18
    2cb4:	a80f883a 	mov	r7,r21
    2cb8:	1009883a 	mov	r4,r2
    2cbc:	180b883a 	mov	r5,r3
    2cc0:	00089800 	call	8980 <__subdf3>
    2cc4:	a00b883a 	mov	r5,r20
    2cc8:	9809883a 	mov	r4,r19
    2ccc:	182b883a 	mov	r21,r3
    2cd0:	d8801015 	stw	r2,64(sp)
    2cd4:	00091280 	call	9128 <__fixdfsi>
    2cd8:	1009883a 	mov	r4,r2
    2cdc:	d8801515 	stw	r2,84(sp)
    2ce0:	00090540 	call	9054 <__floatsidf>
    2ce4:	9809883a 	mov	r4,r19
    2ce8:	a00b883a 	mov	r5,r20
    2cec:	100d883a 	mov	r6,r2
    2cf0:	180f883a 	mov	r7,r3
    2cf4:	00089800 	call	8980 <__subdf3>
    2cf8:	da401517 	ldw	r9,84(sp)
    2cfc:	d9001017 	ldw	r4,64(sp)
    2d00:	a80b883a 	mov	r5,r21
    2d04:	4d000c04 	addi	r20,r9,48
    2d08:	bd000005 	stb	r20,0(r23)
    2d0c:	100d883a 	mov	r6,r2
    2d10:	180f883a 	mov	r7,r3
    2d14:	bd800044 	addi	r22,r23,1
    2d18:	1025883a 	mov	r18,r2
    2d1c:	1827883a 	mov	r19,r3
    2d20:	0008f300 	call	8f30 <__gtdf2>
    2d24:	00842216 	blt	zero,r2,3db0 <_dtoa_r+0x15f0>
    2d28:	0009883a 	mov	r4,zero
    2d2c:	014ffc34 	movhi	r5,16368
    2d30:	900d883a 	mov	r6,r18
    2d34:	980f883a 	mov	r7,r19
    2d38:	00089800 	call	8980 <__subdf3>
    2d3c:	d9001017 	ldw	r4,64(sp)
    2d40:	a80b883a 	mov	r5,r21
    2d44:	100d883a 	mov	r6,r2
    2d48:	180f883a 	mov	r7,r3
    2d4c:	0008f300 	call	8f30 <__gtdf2>
    2d50:	dac01617 	ldw	r11,88(sp)
    2d54:	00841316 	blt	zero,r2,3da4 <_dtoa_r+0x15e4>
    2d58:	00800044 	movi	r2,1
    2d5c:	12c0670e 	bge	r2,r11,2efc <_dtoa_r+0x73c>
    2d60:	bad7883a 	add	r11,r23,r11
    2d64:	df001115 	stw	fp,68(sp)
    2d68:	dc401215 	stw	r17,72(sp)
    2d6c:	5839883a 	mov	fp,r11
    2d70:	dc401017 	ldw	r17,64(sp)
    2d74:	00000806 	br	2d98 <_dtoa_r+0x5d8>
    2d78:	00089800 	call	8980 <__subdf3>
    2d7c:	1009883a 	mov	r4,r2
    2d80:	180b883a 	mov	r5,r3
    2d84:	880d883a 	mov	r6,r17
    2d88:	a80f883a 	mov	r7,r21
    2d8c:	0008ff80 	call	8ff8 <__ltdf2>
    2d90:	1003ee16 	blt	r2,zero,3d4c <_dtoa_r+0x158c>
    2d94:	b703f126 	beq	r22,fp,3d5c <_dtoa_r+0x159c>
    2d98:	8809883a 	mov	r4,r17
    2d9c:	a80b883a 	mov	r5,r21
    2da0:	000d883a 	mov	r6,zero
    2da4:	01d00934 	movhi	r7,16420
    2da8:	00089e00 	call	89e0 <__muldf3>
    2dac:	000d883a 	mov	r6,zero
    2db0:	01d00934 	movhi	r7,16420
    2db4:	9009883a 	mov	r4,r18
    2db8:	980b883a 	mov	r5,r19
    2dbc:	1023883a 	mov	r17,r2
    2dc0:	182b883a 	mov	r21,r3
    2dc4:	00089e00 	call	89e0 <__muldf3>
    2dc8:	180b883a 	mov	r5,r3
    2dcc:	1009883a 	mov	r4,r2
    2dd0:	1825883a 	mov	r18,r3
    2dd4:	1027883a 	mov	r19,r2
    2dd8:	00091280 	call	9128 <__fixdfsi>
    2ddc:	1009883a 	mov	r4,r2
    2de0:	1029883a 	mov	r20,r2
    2de4:	00090540 	call	9054 <__floatsidf>
    2de8:	9809883a 	mov	r4,r19
    2dec:	900b883a 	mov	r5,r18
    2df0:	100d883a 	mov	r6,r2
    2df4:	180f883a 	mov	r7,r3
    2df8:	00089800 	call	8980 <__subdf3>
    2dfc:	a5000c04 	addi	r20,r20,48
    2e00:	b5000005 	stb	r20,0(r22)
    2e04:	1009883a 	mov	r4,r2
    2e08:	180b883a 	mov	r5,r3
    2e0c:	880d883a 	mov	r6,r17
    2e10:	a80f883a 	mov	r7,r21
    2e14:	1025883a 	mov	r18,r2
    2e18:	1827883a 	mov	r19,r3
    2e1c:	0008ff80 	call	8ff8 <__ltdf2>
    2e20:	b5800044 	addi	r22,r22,1
    2e24:	0009883a 	mov	r4,zero
    2e28:	014ffc34 	movhi	r5,16368
    2e2c:	900d883a 	mov	r6,r18
    2e30:	980f883a 	mov	r7,r19
    2e34:	103fd00e 	bge	r2,zero,2d78 <_dtoa_r+0x5b8>
    2e38:	d9001317 	ldw	r4,76(sp)
    2e3c:	df001117 	ldw	fp,68(sp)
    2e40:	d9000615 	stw	r4,24(sp)
    2e44:	8009883a 	mov	r4,r16
    2e48:	e00b883a 	mov	r5,fp
    2e4c:	0005c800 	call	5c80 <_Bfree>
    2e50:	d9c00617 	ldw	r7,24(sp)
    2e54:	d8c02217 	ldw	r3,136(sp)
    2e58:	d9002417 	ldw	r4,144(sp)
    2e5c:	b0000005 	stb	zero,0(r22)
    2e60:	38800044 	addi	r2,r7,1
    2e64:	18800015 	stw	r2,0(r3)
    2e68:	203e8426 	beq	r4,zero,287c <_dtoa_r+0xbc>
    2e6c:	25800015 	stw	r22,0(r4)
    2e70:	003e8206 	br	287c <_dtoa_r+0xbc>
    2e74:	00800434 	movhi	r2,16
    2e78:	10bfffc4 	addi	r2,r2,-1
    2e7c:	90a4703a 	and	r18,r18,r2
    2e80:	903e901e 	bne	r18,zero,28c4 <_dtoa_r+0x104>
    2e84:	05c00074 	movhi	r23,1
    2e88:	bdc02904 	addi	r23,r23,164
    2e8c:	003e8f06 	br	28cc <_dtoa_r+0x10c>
    2e90:	b8800204 	addi	r2,r23,8
    2e94:	003e9206 	br	28e0 <_dtoa_r+0x120>
    2e98:	01400434 	movhi	r5,16
    2e9c:	297fffc4 	addi	r5,r5,-1
    2ea0:	894a703a 	and	r5,r17,r5
    2ea4:	d9000317 	ldw	r4,12(sp)
    2ea8:	294ffc34 	orhi	r5,r5,16368
    2eac:	a53f0044 	addi	r20,r20,-1023
    2eb0:	dd400217 	ldw	r21,8(sp)
    2eb4:	d8000f15 	stw	zero,60(sp)
    2eb8:	003eb106 	br	2980 <_dtoa_r+0x1c0>
    2ebc:	05c00074 	movhi	r23,1
    2ec0:	bdc02004 	addi	r23,r23,128
    2ec4:	003e6d06 	br	287c <_dtoa_r+0xbc>
    2ec8:	d8000415 	stw	zero,16(sp)
    2ecc:	80001115 	stw	zero,68(r16)
    2ed0:	8009883a 	mov	r4,r16
    2ed4:	000b883a 	mov	r5,zero
    2ed8:	0005bd80 	call	5bd8 <_Balloc>
    2edc:	01ffffc4 	movi	r7,-1
    2ee0:	102f883a 	mov	r23,r2
    2ee4:	80801015 	stw	r2,64(r16)
    2ee8:	00800044 	movi	r2,1
    2eec:	d9c00915 	stw	r7,36(sp)
    2ef0:	d8002115 	stw	zero,132(sp)
    2ef4:	d9c00e15 	stw	r7,56(sp)
    2ef8:	d8800c15 	stw	r2,48(sp)
    2efc:	d8800117 	ldw	r2,4(sp)
    2f00:	10008b16 	blt	r2,zero,3130 <_dtoa_r+0x970>
    2f04:	d9000617 	ldw	r4,24(sp)
    2f08:	00c00384 	movi	r3,14
    2f0c:	19008816 	blt	r3,r4,3130 <_dtoa_r+0x970>
    2f10:	200490fa 	slli	r2,r4,3
    2f14:	d9c02117 	ldw	r7,132(sp)
    2f18:	00c00074 	movhi	r3,1
    2f1c:	18c05204 	addi	r3,r3,328
    2f20:	1885883a 	add	r2,r3,r2
    2f24:	14800017 	ldw	r18,0(r2)
    2f28:	14c00117 	ldw	r19,4(r2)
    2f2c:	3801c916 	blt	r7,zero,3654 <_dtoa_r+0xe94>
    2f30:	d9000317 	ldw	r4,12(sp)
    2f34:	900d883a 	mov	r6,r18
    2f38:	980f883a 	mov	r7,r19
    2f3c:	880b883a 	mov	r5,r17
    2f40:	0008cc40 	call	8cc4 <__divdf3>
    2f44:	180b883a 	mov	r5,r3
    2f48:	1009883a 	mov	r4,r2
    2f4c:	00091280 	call	9128 <__fixdfsi>
    2f50:	1009883a 	mov	r4,r2
    2f54:	102b883a 	mov	r21,r2
    2f58:	00090540 	call	9054 <__floatsidf>
    2f5c:	1009883a 	mov	r4,r2
    2f60:	180b883a 	mov	r5,r3
    2f64:	900d883a 	mov	r6,r18
    2f68:	980f883a 	mov	r7,r19
    2f6c:	00089e00 	call	89e0 <__muldf3>
    2f70:	d9000317 	ldw	r4,12(sp)
    2f74:	880b883a 	mov	r5,r17
    2f78:	100d883a 	mov	r6,r2
    2f7c:	180f883a 	mov	r7,r3
    2f80:	00089800 	call	8980 <__subdf3>
    2f84:	d9c00917 	ldw	r7,36(sp)
    2f88:	1009883a 	mov	r4,r2
    2f8c:	a8800c04 	addi	r2,r21,48
    2f90:	b8800005 	stb	r2,0(r23)
    2f94:	01800044 	movi	r6,1
    2f98:	180b883a 	mov	r5,r3
    2f9c:	2005883a 	mov	r2,r4
    2fa0:	bd800044 	addi	r22,r23,1
    2fa4:	39803726 	beq	r7,r6,3084 <_dtoa_r+0x8c4>
    2fa8:	000d883a 	mov	r6,zero
    2fac:	01d00934 	movhi	r7,16420
    2fb0:	00089e00 	call	89e0 <__muldf3>
    2fb4:	1009883a 	mov	r4,r2
    2fb8:	180b883a 	mov	r5,r3
    2fbc:	000d883a 	mov	r6,zero
    2fc0:	000f883a 	mov	r7,zero
    2fc4:	1029883a 	mov	r20,r2
    2fc8:	1823883a 	mov	r17,r3
    2fcc:	0008e780 	call	8e78 <__eqdf2>
    2fd0:	103f9c26 	beq	r2,zero,2e44 <_dtoa_r+0x684>
    2fd4:	dd400917 	ldw	r21,36(sp)
    2fd8:	dc000415 	stw	r16,16(sp)
    2fdc:	00000906 	br	3004 <_dtoa_r+0x844>
    2fe0:	00089e00 	call	89e0 <__muldf3>
    2fe4:	1009883a 	mov	r4,r2
    2fe8:	180b883a 	mov	r5,r3
    2fec:	000d883a 	mov	r6,zero
    2ff0:	000f883a 	mov	r7,zero
    2ff4:	1029883a 	mov	r20,r2
    2ff8:	1823883a 	mov	r17,r3
    2ffc:	0008e780 	call	8e78 <__eqdf2>
    3000:	10022926 	beq	r2,zero,38a8 <_dtoa_r+0x10e8>
    3004:	900d883a 	mov	r6,r18
    3008:	980f883a 	mov	r7,r19
    300c:	a009883a 	mov	r4,r20
    3010:	880b883a 	mov	r5,r17
    3014:	0008cc40 	call	8cc4 <__divdf3>
    3018:	180b883a 	mov	r5,r3
    301c:	1009883a 	mov	r4,r2
    3020:	00091280 	call	9128 <__fixdfsi>
    3024:	1009883a 	mov	r4,r2
    3028:	1021883a 	mov	r16,r2
    302c:	00090540 	call	9054 <__floatsidf>
    3030:	1009883a 	mov	r4,r2
    3034:	180b883a 	mov	r5,r3
    3038:	900d883a 	mov	r6,r18
    303c:	980f883a 	mov	r7,r19
    3040:	00089e00 	call	89e0 <__muldf3>
    3044:	a009883a 	mov	r4,r20
    3048:	880b883a 	mov	r5,r17
    304c:	100d883a 	mov	r6,r2
    3050:	180f883a 	mov	r7,r3
    3054:	00089800 	call	8980 <__subdf3>
    3058:	82400c04 	addi	r9,r16,48
    305c:	b2400005 	stb	r9,0(r22)
    3060:	b5800044 	addi	r22,r22,1
    3064:	b5d3c83a 	sub	r9,r22,r23
    3068:	000d883a 	mov	r6,zero
    306c:	01d00934 	movhi	r7,16420
    3070:	1009883a 	mov	r4,r2
    3074:	180b883a 	mov	r5,r3
    3078:	aa7fd91e 	bne	r21,r9,2fe0 <_dtoa_r+0x820>
    307c:	802b883a 	mov	r21,r16
    3080:	dc000417 	ldw	r16,16(sp)
    3084:	1009883a 	mov	r4,r2
    3088:	180b883a 	mov	r5,r3
    308c:	100d883a 	mov	r6,r2
    3090:	180f883a 	mov	r7,r3
    3094:	000892c0 	call	892c <__adddf3>
    3098:	9009883a 	mov	r4,r18
    309c:	980b883a 	mov	r5,r19
    30a0:	100d883a 	mov	r6,r2
    30a4:	180f883a 	mov	r7,r3
    30a8:	1023883a 	mov	r17,r2
    30ac:	1829883a 	mov	r20,r3
    30b0:	0008ff80 	call	8ff8 <__ltdf2>
    30b4:	10000816 	blt	r2,zero,30d8 <_dtoa_r+0x918>
    30b8:	9009883a 	mov	r4,r18
    30bc:	980b883a 	mov	r5,r19
    30c0:	880d883a 	mov	r6,r17
    30c4:	a00f883a 	mov	r7,r20
    30c8:	0008e780 	call	8e78 <__eqdf2>
    30cc:	103f5d1e 	bne	r2,zero,2e44 <_dtoa_r+0x684>
    30d0:	ad40004c 	andi	r21,r21,1
    30d4:	a83f5b26 	beq	r21,zero,2e44 <_dtoa_r+0x684>
    30d8:	b53fffc3 	ldbu	r20,-1(r22)
    30dc:	b0ffff84 	addi	r3,r22,-2
    30e0:	01400e44 	movi	r5,57
    30e4:	00000306 	br	30f4 <_dtoa_r+0x934>
    30e8:	1d000003 	ldbu	r20,0(r3)
    30ec:	102d883a 	mov	r22,r2
    30f0:	18ffffc4 	addi	r3,r3,-1
    30f4:	a1003fcc 	andi	r4,r20,255
    30f8:	2100201c 	xori	r4,r4,128
    30fc:	213fe004 	addi	r4,r4,-128
    3100:	b0bfffc4 	addi	r2,r22,-1
    3104:	2142ca1e 	bne	r4,r5,3c30 <_dtoa_r+0x1470>
    3108:	b8bff71e 	bne	r23,r2,30e8 <_dtoa_r+0x928>
    310c:	d8800617 	ldw	r2,24(sp)
    3110:	05000c44 	movi	r20,49
    3114:	10800044 	addi	r2,r2,1
    3118:	d8800615 	stw	r2,24(sp)
    311c:	00800c04 	movi	r2,48
    3120:	b8800005 	stb	r2,0(r23)
    3124:	b805883a 	mov	r2,r23
    3128:	15000005 	stb	r20,0(r2)
    312c:	003f4506 	br	2e44 <_dtoa_r+0x684>
    3130:	d9c00c17 	ldw	r7,48(sp)
    3134:	3800c926 	beq	r7,zero,345c <_dtoa_r+0xc9c>
    3138:	d9c00417 	ldw	r7,16(sp)
    313c:	00c00044 	movi	r3,1
    3140:	19c16c0e 	bge	r3,r7,36f4 <_dtoa_r+0xf34>
    3144:	d9000917 	ldw	r4,36(sp)
    3148:	d9c00a17 	ldw	r7,40(sp)
    314c:	24ffffc4 	addi	r19,r4,-1
    3150:	3cc20716 	blt	r7,r19,3970 <_dtoa_r+0x11b0>
    3154:	3ce7c83a 	sub	r19,r7,r19
    3158:	d9c00917 	ldw	r7,36(sp)
    315c:	3802ae16 	blt	r7,zero,3c18 <_dtoa_r+0x1458>
    3160:	dc800817 	ldw	r18,32(sp)
    3164:	d8800917 	ldw	r2,36(sp)
    3168:	d8c00817 	ldw	r3,32(sp)
    316c:	d9c00717 	ldw	r7,28(sp)
    3170:	8009883a 	mov	r4,r16
    3174:	1887883a 	add	r3,r3,r2
    3178:	388f883a 	add	r7,r7,r2
    317c:	01400044 	movi	r5,1
    3180:	d8c00815 	stw	r3,32(sp)
    3184:	d9c00715 	stw	r7,28(sp)
    3188:	00060080 	call	6008 <__i2b>
    318c:	102b883a 	mov	r21,r2
    3190:	90000a26 	beq	r18,zero,31bc <_dtoa_r+0x9fc>
    3194:	d8800717 	ldw	r2,28(sp)
    3198:	0080080e 	bge	zero,r2,31bc <_dtoa_r+0x9fc>
    319c:	90812b16 	blt	r18,r2,364c <_dtoa_r+0xe8c>
    31a0:	d8c00817 	ldw	r3,32(sp)
    31a4:	d9000717 	ldw	r4,28(sp)
    31a8:	90a5c83a 	sub	r18,r18,r2
    31ac:	1887c83a 	sub	r3,r3,r2
    31b0:	2089c83a 	sub	r4,r4,r2
    31b4:	d8c00815 	stw	r3,32(sp)
    31b8:	d9000715 	stw	r4,28(sp)
    31bc:	d9c00a17 	ldw	r7,40(sp)
    31c0:	01c0140e 	bge	zero,r7,3214 <_dtoa_r+0xa54>
    31c4:	d8800c17 	ldw	r2,48(sp)
    31c8:	1001de26 	beq	r2,zero,3944 <_dtoa_r+0x1184>
    31cc:	04c00e0e 	bge	zero,r19,3208 <_dtoa_r+0xa48>
    31d0:	a80b883a 	mov	r5,r21
    31d4:	8009883a 	mov	r4,r16
    31d8:	980d883a 	mov	r6,r19
    31dc:	000629c0 	call	629c <__pow5mult>
    31e0:	e00d883a 	mov	r6,fp
    31e4:	8009883a 	mov	r4,r16
    31e8:	100b883a 	mov	r5,r2
    31ec:	102b883a 	mov	r21,r2
    31f0:	00060440 	call	6044 <__multiply>
    31f4:	1029883a 	mov	r20,r2
    31f8:	e00b883a 	mov	r5,fp
    31fc:	8009883a 	mov	r4,r16
    3200:	0005c800 	call	5c80 <_Bfree>
    3204:	a039883a 	mov	fp,r20
    3208:	d8c00a17 	ldw	r3,40(sp)
    320c:	1ccdc83a 	sub	r6,r3,r19
    3210:	3001291e 	bne	r6,zero,36b8 <_dtoa_r+0xef8>
    3214:	8009883a 	mov	r4,r16
    3218:	01400044 	movi	r5,1
    321c:	00060080 	call	6008 <__i2b>
    3220:	d9000b17 	ldw	r4,44(sp)
    3224:	1029883a 	mov	r20,r2
    3228:	0100050e 	bge	zero,r4,3240 <_dtoa_r+0xa80>
    322c:	d9800b17 	ldw	r6,44(sp)
    3230:	8009883a 	mov	r4,r16
    3234:	100b883a 	mov	r5,r2
    3238:	000629c0 	call	629c <__pow5mult>
    323c:	1029883a 	mov	r20,r2
    3240:	d9c00417 	ldw	r7,16(sp)
    3244:	00800044 	movi	r2,1
    3248:	11c0f00e 	bge	r2,r7,360c <_dtoa_r+0xe4c>
    324c:	0023883a 	mov	r17,zero
    3250:	d8800b17 	ldw	r2,44(sp)
    3254:	1001741e 	bne	r2,zero,3828 <_dtoa_r+0x1068>
    3258:	00800044 	movi	r2,1
    325c:	d8c00717 	ldw	r3,28(sp)
    3260:	10c5883a 	add	r2,r2,r3
    3264:	108007cc 	andi	r2,r2,31
    3268:	10008026 	beq	r2,zero,346c <_dtoa_r+0xcac>
    326c:	01000804 	movi	r4,32
    3270:	2089c83a 	sub	r4,r4,r2
    3274:	00c00104 	movi	r3,4
    3278:	1902d00e 	bge	r3,r4,3dbc <_dtoa_r+0x15fc>
    327c:	d9000817 	ldw	r4,32(sp)
    3280:	d9c00717 	ldw	r7,28(sp)
    3284:	00c00704 	movi	r3,28
    3288:	1885c83a 	sub	r2,r3,r2
    328c:	2089883a 	add	r4,r4,r2
    3290:	388f883a 	add	r7,r7,r2
    3294:	d9000815 	stw	r4,32(sp)
    3298:	90a5883a 	add	r18,r18,r2
    329c:	d9c00715 	stw	r7,28(sp)
    32a0:	d9c00817 	ldw	r7,32(sp)
    32a4:	01c0050e 	bge	zero,r7,32bc <_dtoa_r+0xafc>
    32a8:	e00b883a 	mov	r5,fp
    32ac:	8009883a 	mov	r4,r16
    32b0:	380d883a 	mov	r6,r7
    32b4:	00063c80 	call	63c8 <__lshift>
    32b8:	1039883a 	mov	fp,r2
    32bc:	d8800717 	ldw	r2,28(sp)
    32c0:	0080050e 	bge	zero,r2,32d8 <_dtoa_r+0xb18>
    32c4:	a00b883a 	mov	r5,r20
    32c8:	8009883a 	mov	r4,r16
    32cc:	100d883a 	mov	r6,r2
    32d0:	00063c80 	call	63c8 <__lshift>
    32d4:	1029883a 	mov	r20,r2
    32d8:	d8c00d17 	ldw	r3,52(sp)
    32dc:	1801401e 	bne	r3,zero,37e0 <_dtoa_r+0x1020>
    32e0:	d8800917 	ldw	r2,36(sp)
    32e4:	00815a0e 	bge	zero,r2,3850 <_dtoa_r+0x1090>
    32e8:	d8c00c17 	ldw	r3,48(sp)
    32ec:	18006f1e 	bne	r3,zero,34ac <_dtoa_r+0xcec>
    32f0:	b823883a 	mov	r17,r23
    32f4:	dc800917 	ldw	r18,36(sp)
    32f8:	00000206 	br	3304 <_dtoa_r+0xb44>
    32fc:	0005ca80 	call	5ca8 <__multadd>
    3300:	1039883a 	mov	fp,r2
    3304:	e009883a 	mov	r4,fp
    3308:	a00b883a 	mov	r5,r20
    330c:	00025840 	call	2584 <quorem>
    3310:	10800c04 	addi	r2,r2,48
    3314:	88800005 	stb	r2,0(r17)
    3318:	8c400044 	addi	r17,r17,1
    331c:	8dc7c83a 	sub	r3,r17,r23
    3320:	8009883a 	mov	r4,r16
    3324:	e00b883a 	mov	r5,fp
    3328:	01800284 	movi	r6,10
    332c:	000f883a 	mov	r7,zero
    3330:	1cbff216 	blt	r3,r18,32fc <_dtoa_r+0xb3c>
    3334:	dd800917 	ldw	r22,36(sp)
    3338:	1007883a 	mov	r3,r2
    333c:	05823a0e 	bge	zero,r22,3c28 <_dtoa_r+0x1468>
    3340:	bdad883a 	add	r22,r23,r22
    3344:	0023883a 	mov	r17,zero
    3348:	e00b883a 	mov	r5,fp
    334c:	01800044 	movi	r6,1
    3350:	8009883a 	mov	r4,r16
    3354:	d8c01515 	stw	r3,84(sp)
    3358:	00063c80 	call	63c8 <__lshift>
    335c:	1009883a 	mov	r4,r2
    3360:	a00b883a 	mov	r5,r20
    3364:	1039883a 	mov	fp,r2
    3368:	00065240 	call	6524 <__mcmp>
    336c:	d8c01517 	ldw	r3,84(sp)
    3370:	0080d60e 	bge	zero,r2,36cc <_dtoa_r+0xf0c>
    3374:	b13fffc3 	ldbu	r4,-1(r22)
    3378:	b0ffff84 	addi	r3,r22,-2
    337c:	01800e44 	movi	r6,57
    3380:	00000306 	br	3390 <_dtoa_r+0xbd0>
    3384:	19000003 	ldbu	r4,0(r3)
    3388:	102d883a 	mov	r22,r2
    338c:	18ffffc4 	addi	r3,r3,-1
    3390:	21403fcc 	andi	r5,r4,255
    3394:	2940201c 	xori	r5,r5,128
    3398:	297fe004 	addi	r5,r5,-128
    339c:	b0bfffc4 	addi	r2,r22,-1
    33a0:	2981a71e 	bne	r5,r6,3a40 <_dtoa_r+0x1280>
    33a4:	b8bff71e 	bne	r23,r2,3384 <_dtoa_r+0xbc4>
    33a8:	d8800617 	ldw	r2,24(sp)
    33ac:	10800044 	addi	r2,r2,1
    33b0:	d8800615 	stw	r2,24(sp)
    33b4:	00800c44 	movi	r2,49
    33b8:	b8800005 	stb	r2,0(r23)
    33bc:	8009883a 	mov	r4,r16
    33c0:	a00b883a 	mov	r5,r20
    33c4:	0005c800 	call	5c80 <_Bfree>
    33c8:	a83e9e26 	beq	r21,zero,2e44 <_dtoa_r+0x684>
    33cc:	88000426 	beq	r17,zero,33e0 <_dtoa_r+0xc20>
    33d0:	8d400326 	beq	r17,r21,33e0 <_dtoa_r+0xc20>
    33d4:	8009883a 	mov	r4,r16
    33d8:	880b883a 	mov	r5,r17
    33dc:	0005c800 	call	5c80 <_Bfree>
    33e0:	8009883a 	mov	r4,r16
    33e4:	a80b883a 	mov	r5,r21
    33e8:	0005c800 	call	5c80 <_Bfree>
    33ec:	003e9506 	br	2e44 <_dtoa_r+0x684>
    33f0:	00c00044 	movi	r3,1
    33f4:	d8c00d15 	stw	r3,52(sp)
    33f8:	003d9f06 	br	2a78 <_dtoa_r+0x2b8>
    33fc:	d9000817 	ldw	r4,32(sp)
    3400:	d8800617 	ldw	r2,24(sp)
    3404:	d8000b15 	stw	zero,44(sp)
    3408:	2089c83a 	sub	r4,r4,r2
    340c:	0087c83a 	sub	r3,zero,r2
    3410:	d9000815 	stw	r4,32(sp)
    3414:	d8c00a15 	stw	r3,40(sp)
    3418:	003da306 	br	2aa8 <_dtoa_r+0x2e8>
    341c:	0529c83a 	sub	r20,zero,r20
    3420:	dd000815 	stw	r20,32(sp)
    3424:	d8000715 	stw	zero,28(sp)
    3428:	003d9806 	br	2a8c <_dtoa_r+0x2cc>
    342c:	d9000617 	ldw	r4,24(sp)
    3430:	00090540 	call	9054 <__floatsidf>
    3434:	1009883a 	mov	r4,r2
    3438:	180b883a 	mov	r5,r3
    343c:	980d883a 	mov	r6,r19
    3440:	900f883a 	mov	r7,r18
    3444:	0008ed40 	call	8ed4 <__nedf2>
    3448:	103d7a26 	beq	r2,zero,2a34 <_dtoa_r+0x274>
    344c:	d8800617 	ldw	r2,24(sp)
    3450:	10bfffc4 	addi	r2,r2,-1
    3454:	d8800615 	stw	r2,24(sp)
    3458:	003d7606 	br	2a34 <_dtoa_r+0x274>
    345c:	dcc00a17 	ldw	r19,40(sp)
    3460:	dc800817 	ldw	r18,32(sp)
    3464:	002b883a 	mov	r21,zero
    3468:	003f4906 	br	3190 <_dtoa_r+0x9d0>
    346c:	00800704 	movi	r2,28
    3470:	d8c00817 	ldw	r3,32(sp)
    3474:	d9000717 	ldw	r4,28(sp)
    3478:	90a5883a 	add	r18,r18,r2
    347c:	1887883a 	add	r3,r3,r2
    3480:	2089883a 	add	r4,r4,r2
    3484:	d8c00815 	stw	r3,32(sp)
    3488:	d9000715 	stw	r4,28(sp)
    348c:	003f8406 	br	32a0 <_dtoa_r+0xae0>
    3490:	d9c00317 	ldw	r7,12(sp)
    3494:	013efb84 	movi	r4,-1042
    3498:	2509c83a 	sub	r4,r4,r20
    349c:	3908983a 	sll	r4,r7,r4
    34a0:	003d3006 	br	2964 <_dtoa_r+0x1a4>
    34a4:	d8000d15 	stw	zero,52(sp)
    34a8:	003d7306 	br	2a78 <_dtoa_r+0x2b8>
    34ac:	0480050e 	bge	zero,r18,34c4 <_dtoa_r+0xd04>
    34b0:	a80b883a 	mov	r5,r21
    34b4:	8009883a 	mov	r4,r16
    34b8:	900d883a 	mov	r6,r18
    34bc:	00063c80 	call	63c8 <__lshift>
    34c0:	102b883a 	mov	r21,r2
    34c4:	8801611e 	bne	r17,zero,3a4c <_dtoa_r+0x128c>
    34c8:	a827883a 	mov	r19,r21
    34cc:	d8c00317 	ldw	r3,12(sp)
    34d0:	d9000917 	ldw	r4,36(sp)
    34d4:	b8bfffc4 	addi	r2,r23,-1
    34d8:	18c0004c 	andi	r3,r3,1
    34dc:	1105883a 	add	r2,r2,r4
    34e0:	b825883a 	mov	r18,r23
    34e4:	d8800515 	stw	r2,20(sp)
    34e8:	a823883a 	mov	r17,r21
    34ec:	d8c00315 	stw	r3,12(sp)
    34f0:	ddc00715 	stw	r23,28(sp)
    34f4:	e009883a 	mov	r4,fp
    34f8:	a00b883a 	mov	r5,r20
    34fc:	00025840 	call	2584 <quorem>
    3500:	e009883a 	mov	r4,fp
    3504:	880b883a 	mov	r5,r17
    3508:	102d883a 	mov	r22,r2
    350c:	00065240 	call	6524 <__mcmp>
    3510:	980d883a 	mov	r6,r19
    3514:	8009883a 	mov	r4,r16
    3518:	a00b883a 	mov	r5,r20
    351c:	102b883a 	mov	r21,r2
    3520:	000657c0 	call	657c <__mdiff>
    3524:	100d883a 	mov	r6,r2
    3528:	10800317 	ldw	r2,12(r2)
    352c:	b5c00c04 	addi	r23,r22,48
    3530:	10008c26 	beq	r2,zero,3764 <_dtoa_r+0xfa4>
    3534:	8009883a 	mov	r4,r16
    3538:	300b883a 	mov	r5,r6
    353c:	0005c800 	call	5c80 <_Bfree>
    3540:	00800044 	movi	r2,1
    3544:	a8007116 	blt	r21,zero,370c <_dtoa_r+0xf4c>
    3548:	a800041e 	bne	r21,zero,355c <_dtoa_r+0xd9c>
    354c:	d9c00417 	ldw	r7,16(sp)
    3550:	3800021e 	bne	r7,zero,355c <_dtoa_r+0xd9c>
    3554:	d8c00317 	ldw	r3,12(sp)
    3558:	18006c26 	beq	r3,zero,370c <_dtoa_r+0xf4c>
    355c:	00814c16 	blt	zero,r2,3a90 <_dtoa_r+0x12d0>
    3560:	d8c00517 	ldw	r3,20(sp)
    3564:	95400044 	addi	r21,r18,1
    3568:	95c00005 	stb	r23,0(r18)
    356c:	a82d883a 	mov	r22,r21
    3570:	90c14d26 	beq	r18,r3,3aa8 <_dtoa_r+0x12e8>
    3574:	e00b883a 	mov	r5,fp
    3578:	8009883a 	mov	r4,r16
    357c:	01800284 	movi	r6,10
    3580:	000f883a 	mov	r7,zero
    3584:	0005ca80 	call	5ca8 <__multadd>
    3588:	1039883a 	mov	fp,r2
    358c:	8cc08b26 	beq	r17,r19,37bc <_dtoa_r+0xffc>
    3590:	880b883a 	mov	r5,r17
    3594:	01800284 	movi	r6,10
    3598:	000f883a 	mov	r7,zero
    359c:	8009883a 	mov	r4,r16
    35a0:	0005ca80 	call	5ca8 <__multadd>
    35a4:	980b883a 	mov	r5,r19
    35a8:	8009883a 	mov	r4,r16
    35ac:	01800284 	movi	r6,10
    35b0:	000f883a 	mov	r7,zero
    35b4:	1023883a 	mov	r17,r2
    35b8:	0005ca80 	call	5ca8 <__multadd>
    35bc:	1027883a 	mov	r19,r2
    35c0:	a825883a 	mov	r18,r21
    35c4:	003fcb06 	br	34f4 <_dtoa_r+0xd34>
    35c8:	d9c00417 	ldw	r7,16(sp)
    35cc:	00800104 	movi	r2,4
    35d0:	3880e426 	beq	r7,r2,3964 <_dtoa_r+0x11a4>
    35d4:	00800144 	movi	r2,5
    35d8:	38be3c1e 	bne	r7,r2,2ecc <_dtoa_r+0x70c>
    35dc:	00c00044 	movi	r3,1
    35e0:	d8c00c15 	stw	r3,48(sp)
    35e4:	d9c02117 	ldw	r7,132(sp)
    35e8:	d8800617 	ldw	r2,24(sp)
    35ec:	388f883a 	add	r7,r7,r2
    35f0:	3c800044 	addi	r18,r7,1
    35f4:	d9c00e15 	stw	r7,56(sp)
    35f8:	dc800915 	stw	r18,36(sp)
    35fc:	04bd3e16 	blt	zero,r18,2af8 <_dtoa_r+0x338>
    3600:	80001115 	stw	zero,68(r16)
    3604:	000b883a 	mov	r5,zero
    3608:	003d4606 	br	2b24 <_dtoa_r+0x364>
    360c:	d8c00317 	ldw	r3,12(sp)
    3610:	183f0e1e 	bne	r3,zero,324c <_dtoa_r+0xa8c>
    3614:	00c00434 	movhi	r3,16
    3618:	18ffffc4 	addi	r3,r3,-1
    361c:	88c6703a 	and	r3,r17,r3
    3620:	183f0a1e 	bne	r3,zero,324c <_dtoa_r+0xa8c>
    3624:	8c5ffc2c 	andhi	r17,r17,32752
    3628:	883f0826 	beq	r17,zero,324c <_dtoa_r+0xa8c>
    362c:	d9000817 	ldw	r4,32(sp)
    3630:	d9c00717 	ldw	r7,28(sp)
    3634:	1023883a 	mov	r17,r2
    3638:	2089883a 	add	r4,r4,r2
    363c:	388f883a 	add	r7,r7,r2
    3640:	d9000815 	stw	r4,32(sp)
    3644:	d9c00715 	stw	r7,28(sp)
    3648:	003f0106 	br	3250 <_dtoa_r+0xa90>
    364c:	9005883a 	mov	r2,r18
    3650:	003ed306 	br	31a0 <_dtoa_r+0x9e0>
    3654:	d8800917 	ldw	r2,36(sp)
    3658:	00be3516 	blt	zero,r2,2f30 <_dtoa_r+0x770>
    365c:	1000b61e 	bne	r2,zero,3938 <_dtoa_r+0x1178>
    3660:	9009883a 	mov	r4,r18
    3664:	980b883a 	mov	r5,r19
    3668:	000d883a 	mov	r6,zero
    366c:	01d00534 	movhi	r7,16404
    3670:	00089e00 	call	89e0 <__muldf3>
    3674:	d9800317 	ldw	r6,12(sp)
    3678:	1009883a 	mov	r4,r2
    367c:	180b883a 	mov	r5,r3
    3680:	880f883a 	mov	r7,r17
    3684:	0008f940 	call	8f94 <__gedf2>
    3688:	0029883a 	mov	r20,zero
    368c:	002b883a 	mov	r21,zero
    3690:	10007e16 	blt	r2,zero,388c <_dtoa_r+0x10cc>
    3694:	d8802117 	ldw	r2,132(sp)
    3698:	b82d883a 	mov	r22,r23
    369c:	0084303a 	nor	r2,zero,r2
    36a0:	d8800615 	stw	r2,24(sp)
    36a4:	8009883a 	mov	r4,r16
    36a8:	a00b883a 	mov	r5,r20
    36ac:	0005c800 	call	5c80 <_Bfree>
    36b0:	a83f4b1e 	bne	r21,zero,33e0 <_dtoa_r+0xc20>
    36b4:	003de306 	br	2e44 <_dtoa_r+0x684>
    36b8:	e00b883a 	mov	r5,fp
    36bc:	8009883a 	mov	r4,r16
    36c0:	000629c0 	call	629c <__pow5mult>
    36c4:	1039883a 	mov	fp,r2
    36c8:	003ed206 	br	3214 <_dtoa_r+0xa54>
    36cc:	1000021e 	bne	r2,zero,36d8 <_dtoa_r+0xf18>
    36d0:	18c0004c 	andi	r3,r3,1
    36d4:	183f271e 	bne	r3,zero,3374 <_dtoa_r+0xbb4>
    36d8:	01000c04 	movi	r4,48
    36dc:	00000106 	br	36e4 <_dtoa_r+0xf24>
    36e0:	102d883a 	mov	r22,r2
    36e4:	b0bfffc4 	addi	r2,r22,-1
    36e8:	10c00007 	ldb	r3,0(r2)
    36ec:	193ffc26 	beq	r3,r4,36e0 <_dtoa_r+0xf20>
    36f0:	003f3206 	br	33bc <_dtoa_r+0xbfc>
    36f4:	d8c00f17 	ldw	r3,60(sp)
    36f8:	18015026 	beq	r3,zero,3c3c <_dtoa_r+0x147c>
    36fc:	10810cc4 	addi	r2,r2,1075
    3700:	dcc00a17 	ldw	r19,40(sp)
    3704:	dc800817 	ldw	r18,32(sp)
    3708:	003e9706 	br	3168 <_dtoa_r+0x9a8>
    370c:	b807883a 	mov	r3,r23
    3710:	182b883a 	mov	r21,r3
    3714:	ddc00717 	ldw	r23,28(sp)
    3718:	00800e0e 	bge	zero,r2,3754 <_dtoa_r+0xf94>
    371c:	e00b883a 	mov	r5,fp
    3720:	01800044 	movi	r6,1
    3724:	8009883a 	mov	r4,r16
    3728:	d8c01515 	stw	r3,84(sp)
    372c:	00063c80 	call	63c8 <__lshift>
    3730:	1009883a 	mov	r4,r2
    3734:	a00b883a 	mov	r5,r20
    3738:	1039883a 	mov	fp,r2
    373c:	00065240 	call	6524 <__mcmp>
    3740:	d8c01517 	ldw	r3,84(sp)
    3744:	0081880e 	bge	zero,r2,3d68 <_dtoa_r+0x15a8>
    3748:	00800e44 	movi	r2,57
    374c:	b0c00c44 	addi	r3,r22,49
    3750:	a8816326 	beq	r21,r2,3ce0 <_dtoa_r+0x1520>
    3754:	90c00005 	stb	r3,0(r18)
    3758:	95800044 	addi	r22,r18,1
    375c:	982b883a 	mov	r21,r19
    3760:	003f1606 	br	33bc <_dtoa_r+0xbfc>
    3764:	300b883a 	mov	r5,r6
    3768:	e009883a 	mov	r4,fp
    376c:	d9801515 	stw	r6,84(sp)
    3770:	00065240 	call	6524 <__mcmp>
    3774:	d9801517 	ldw	r6,84(sp)
    3778:	8009883a 	mov	r4,r16
    377c:	d8801515 	stw	r2,84(sp)
    3780:	300b883a 	mov	r5,r6
    3784:	0005c800 	call	5c80 <_Bfree>
    3788:	d8801517 	ldw	r2,84(sp)
    378c:	103f6d1e 	bne	r2,zero,3544 <_dtoa_r+0xd84>
    3790:	d9c00417 	ldw	r7,16(sp)
    3794:	383f6b1e 	bne	r7,zero,3544 <_dtoa_r+0xd84>
    3798:	d8c00317 	ldw	r3,12(sp)
    379c:	183f691e 	bne	r3,zero,3544 <_dtoa_r+0xd84>
    37a0:	b807883a 	mov	r3,r23
    37a4:	00800e44 	movi	r2,57
    37a8:	ddc00717 	ldw	r23,28(sp)
    37ac:	18814c26 	beq	r3,r2,3ce0 <_dtoa_r+0x1520>
    37b0:	057fe80e 	bge	zero,r21,3754 <_dtoa_r+0xf94>
    37b4:	b0c00c44 	addi	r3,r22,49
    37b8:	003fe606 	br	3754 <_dtoa_r+0xf94>
    37bc:	880b883a 	mov	r5,r17
    37c0:	8009883a 	mov	r4,r16
    37c4:	01800284 	movi	r6,10
    37c8:	000f883a 	mov	r7,zero
    37cc:	0005ca80 	call	5ca8 <__multadd>
    37d0:	1023883a 	mov	r17,r2
    37d4:	1027883a 	mov	r19,r2
    37d8:	a825883a 	mov	r18,r21
    37dc:	003f4506 	br	34f4 <_dtoa_r+0xd34>
    37e0:	e009883a 	mov	r4,fp
    37e4:	a00b883a 	mov	r5,r20
    37e8:	00065240 	call	6524 <__mcmp>
    37ec:	103ebc0e 	bge	r2,zero,32e0 <_dtoa_r+0xb20>
    37f0:	e00b883a 	mov	r5,fp
    37f4:	8009883a 	mov	r4,r16
    37f8:	01800284 	movi	r6,10
    37fc:	000f883a 	mov	r7,zero
    3800:	0005ca80 	call	5ca8 <__multadd>
    3804:	1039883a 	mov	fp,r2
    3808:	d8800617 	ldw	r2,24(sp)
    380c:	d8c00c17 	ldw	r3,48(sp)
    3810:	10bfffc4 	addi	r2,r2,-1
    3814:	d8800615 	stw	r2,24(sp)
    3818:	1801571e 	bne	r3,zero,3d78 <_dtoa_r+0x15b8>
    381c:	d9c00e17 	ldw	r7,56(sp)
    3820:	d9c00915 	stw	r7,36(sp)
    3824:	003eae06 	br	32e0 <_dtoa_r+0xb20>
    3828:	a0800417 	ldw	r2,16(r20)
    382c:	10800104 	addi	r2,r2,4
    3830:	1085883a 	add	r2,r2,r2
    3834:	1085883a 	add	r2,r2,r2
    3838:	a085883a 	add	r2,r20,r2
    383c:	11000017 	ldw	r4,0(r2)
    3840:	0005ef00 	call	5ef0 <__hi0bits>
    3844:	00c00804 	movi	r3,32
    3848:	1885c83a 	sub	r2,r3,r2
    384c:	003e8306 	br	325c <_dtoa_r+0xa9c>
    3850:	d9c00417 	ldw	r7,16(sp)
    3854:	00800084 	movi	r2,2
    3858:	11fea30e 	bge	r2,r7,32e8 <_dtoa_r+0xb28>
    385c:	d8800917 	ldw	r2,36(sp)
    3860:	103f8c1e 	bne	r2,zero,3694 <_dtoa_r+0xed4>
    3864:	a00b883a 	mov	r5,r20
    3868:	8009883a 	mov	r4,r16
    386c:	01800144 	movi	r6,5
    3870:	000f883a 	mov	r7,zero
    3874:	0005ca80 	call	5ca8 <__multadd>
    3878:	e009883a 	mov	r4,fp
    387c:	100b883a 	mov	r5,r2
    3880:	1029883a 	mov	r20,r2
    3884:	00065240 	call	6524 <__mcmp>
    3888:	00bf820e 	bge	zero,r2,3694 <_dtoa_r+0xed4>
    388c:	00800c44 	movi	r2,49
    3890:	b8800005 	stb	r2,0(r23)
    3894:	d8800617 	ldw	r2,24(sp)
    3898:	bd800044 	addi	r22,r23,1
    389c:	10800044 	addi	r2,r2,1
    38a0:	d8800615 	stw	r2,24(sp)
    38a4:	003f7f06 	br	36a4 <_dtoa_r+0xee4>
    38a8:	dc000417 	ldw	r16,16(sp)
    38ac:	003d6506 	br	2e44 <_dtoa_r+0x684>
    38b0:	9009883a 	mov	r4,r18
    38b4:	00090540 	call	9054 <__floatsidf>
    38b8:	1009883a 	mov	r4,r2
    38bc:	180b883a 	mov	r5,r3
    38c0:	980d883a 	mov	r6,r19
    38c4:	a00f883a 	mov	r7,r20
    38c8:	00089e00 	call	89e0 <__muldf3>
    38cc:	1009883a 	mov	r4,r2
    38d0:	180b883a 	mov	r5,r3
    38d4:	000d883a 	mov	r6,zero
    38d8:	01d00734 	movhi	r7,16412
    38dc:	000892c0 	call	892c <__adddf3>
    38e0:	057f3034 	movhi	r21,64704
    38e4:	1025883a 	mov	r18,r2
    38e8:	1d6b883a 	add	r21,r3,r21
    38ec:	9809883a 	mov	r4,r19
    38f0:	a00b883a 	mov	r5,r20
    38f4:	000d883a 	mov	r6,zero
    38f8:	01d00534 	movhi	r7,16404
    38fc:	00089800 	call	8980 <__subdf3>
    3900:	1009883a 	mov	r4,r2
    3904:	180b883a 	mov	r5,r3
    3908:	900d883a 	mov	r6,r18
    390c:	a80f883a 	mov	r7,r21
    3910:	1027883a 	mov	r19,r2
    3914:	1829883a 	mov	r20,r3
    3918:	0008f300 	call	8f30 <__gtdf2>
    391c:	00806616 	blt	zero,r2,3ab8 <_dtoa_r+0x12f8>
    3920:	a9e0003c 	xorhi	r7,r21,32768
    3924:	9809883a 	mov	r4,r19
    3928:	a00b883a 	mov	r5,r20
    392c:	900d883a 	mov	r6,r18
    3930:	0008ff80 	call	8ff8 <__ltdf2>
    3934:	103d710e 	bge	r2,zero,2efc <_dtoa_r+0x73c>
    3938:	0029883a 	mov	r20,zero
    393c:	002b883a 	mov	r21,zero
    3940:	003f5406 	br	3694 <_dtoa_r+0xed4>
    3944:	d9800a17 	ldw	r6,40(sp)
    3948:	e00b883a 	mov	r5,fp
    394c:	8009883a 	mov	r4,r16
    3950:	000629c0 	call	629c <__pow5mult>
    3954:	1039883a 	mov	fp,r2
    3958:	003e2e06 	br	3214 <_dtoa_r+0xa54>
    395c:	d8000c15 	stw	zero,48(sp)
    3960:	003f2006 	br	35e4 <_dtoa_r+0xe24>
    3964:	00800044 	movi	r2,1
    3968:	d8800c15 	stw	r2,48(sp)
    396c:	003c5d06 	br	2ae4 <_dtoa_r+0x324>
    3970:	d8c00a17 	ldw	r3,40(sp)
    3974:	d9000b17 	ldw	r4,44(sp)
    3978:	dcc00a15 	stw	r19,40(sp)
    397c:	98c5c83a 	sub	r2,r19,r3
    3980:	2089883a 	add	r4,r4,r2
    3984:	d9000b15 	stw	r4,44(sp)
    3988:	0027883a 	mov	r19,zero
    398c:	003df206 	br	3158 <_dtoa_r+0x998>
    3990:	d9000317 	ldw	r4,12(sp)
    3994:	8829883a 	mov	r20,r17
    3998:	04800084 	movi	r18,2
    399c:	d9001015 	stw	r4,64(sp)
    39a0:	003c8106 	br	2ba8 <_dtoa_r+0x3e8>
    39a4:	04800044 	movi	r18,1
    39a8:	dc800e15 	stw	r18,56(sp)
    39ac:	dc800915 	stw	r18,36(sp)
    39b0:	dc802115 	stw	r18,132(sp)
    39b4:	003f1206 	br	3600 <_dtoa_r+0xe40>
    39b8:	d8800617 	ldw	r2,24(sp)
    39bc:	00abc83a 	sub	r21,zero,r2
    39c0:	a800a426 	beq	r21,zero,3c54 <_dtoa_r+0x1494>
    39c4:	a88003cc 	andi	r2,r21,15
    39c8:	100490fa 	slli	r2,r2,3
    39cc:	00c00074 	movhi	r3,1
    39d0:	18c05204 	addi	r3,r3,328
    39d4:	d9000317 	ldw	r4,12(sp)
    39d8:	1885883a 	add	r2,r3,r2
    39dc:	11800017 	ldw	r6,0(r2)
    39e0:	11c00117 	ldw	r7,4(r2)
    39e4:	a82bd13a 	srai	r21,r21,4
    39e8:	880b883a 	mov	r5,r17
    39ec:	00089e00 	call	89e0 <__muldf3>
    39f0:	1027883a 	mov	r19,r2
    39f4:	1829883a 	mov	r20,r3
    39f8:	a800e826 	beq	r21,zero,3d9c <_dtoa_r+0x15dc>
    39fc:	05800074 	movhi	r22,1
    3a00:	b5804804 	addi	r22,r22,288
    3a04:	04800084 	movi	r18,2
    3a08:	a980004c 	andi	r6,r21,1
    3a0c:	1009883a 	mov	r4,r2
    3a10:	a82bd07a 	srai	r21,r21,1
    3a14:	180b883a 	mov	r5,r3
    3a18:	30000426 	beq	r6,zero,3a2c <_dtoa_r+0x126c>
    3a1c:	b1800017 	ldw	r6,0(r22)
    3a20:	b1c00117 	ldw	r7,4(r22)
    3a24:	94800044 	addi	r18,r18,1
    3a28:	00089e00 	call	89e0 <__muldf3>
    3a2c:	b5800204 	addi	r22,r22,8
    3a30:	a83ff51e 	bne	r21,zero,3a08 <_dtoa_r+0x1248>
    3a34:	1027883a 	mov	r19,r2
    3a38:	1829883a 	mov	r20,r3
    3a3c:	003c7306 	br	2c0c <_dtoa_r+0x44c>
    3a40:	21000044 	addi	r4,r4,1
    3a44:	11000005 	stb	r4,0(r2)
    3a48:	003e5c06 	br	33bc <_dtoa_r+0xbfc>
    3a4c:	a9400117 	ldw	r5,4(r21)
    3a50:	8009883a 	mov	r4,r16
    3a54:	0005bd80 	call	5bd8 <_Balloc>
    3a58:	a9800417 	ldw	r6,16(r21)
    3a5c:	11000304 	addi	r4,r2,12
    3a60:	a9400304 	addi	r5,r21,12
    3a64:	31800084 	addi	r6,r6,2
    3a68:	318d883a 	add	r6,r6,r6
    3a6c:	318d883a 	add	r6,r6,r6
    3a70:	1023883a 	mov	r17,r2
    3a74:	00058300 	call	5830 <memcpy>
    3a78:	8009883a 	mov	r4,r16
    3a7c:	880b883a 	mov	r5,r17
    3a80:	01800044 	movi	r6,1
    3a84:	00063c80 	call	63c8 <__lshift>
    3a88:	1027883a 	mov	r19,r2
    3a8c:	003e8f06 	br	34cc <_dtoa_r+0xd0c>
    3a90:	b807883a 	mov	r3,r23
    3a94:	00800e44 	movi	r2,57
    3a98:	ddc00717 	ldw	r23,28(sp)
    3a9c:	18809026 	beq	r3,r2,3ce0 <_dtoa_r+0x1520>
    3aa0:	18c00044 	addi	r3,r3,1
    3aa4:	003f2b06 	br	3754 <_dtoa_r+0xf94>
    3aa8:	b807883a 	mov	r3,r23
    3aac:	982b883a 	mov	r21,r19
    3ab0:	ddc00717 	ldw	r23,28(sp)
    3ab4:	003e2406 	br	3348 <_dtoa_r+0xb88>
    3ab8:	0029883a 	mov	r20,zero
    3abc:	002b883a 	mov	r21,zero
    3ac0:	003f7206 	br	388c <_dtoa_r+0x10cc>
    3ac4:	593fffc4 	addi	r4,r11,-1
    3ac8:	200490fa 	slli	r2,r4,3
    3acc:	00c00074 	movhi	r3,1
    3ad0:	18c05204 	addi	r3,r3,328
    3ad4:	d9001015 	stw	r4,64(sp)
    3ad8:	1885883a 	add	r2,r3,r2
    3adc:	11000017 	ldw	r4,0(r2)
    3ae0:	11400117 	ldw	r5,4(r2)
    3ae4:	900d883a 	mov	r6,r18
    3ae8:	a80f883a 	mov	r7,r21
    3aec:	dac01615 	stw	r11,88(sp)
    3af0:	00089e00 	call	89e0 <__muldf3>
    3af4:	a00b883a 	mov	r5,r20
    3af8:	9809883a 	mov	r4,r19
    3afc:	d8c01215 	stw	r3,72(sp)
    3b00:	d8801115 	stw	r2,68(sp)
    3b04:	00091280 	call	9128 <__fixdfsi>
    3b08:	1009883a 	mov	r4,r2
    3b0c:	1025883a 	mov	r18,r2
    3b10:	00090540 	call	9054 <__floatsidf>
    3b14:	9809883a 	mov	r4,r19
    3b18:	a00b883a 	mov	r5,r20
    3b1c:	100d883a 	mov	r6,r2
    3b20:	180f883a 	mov	r7,r3
    3b24:	94800c04 	addi	r18,r18,48
    3b28:	00089800 	call	8980 <__subdf3>
    3b2c:	bc800005 	stb	r18,0(r23)
    3b30:	dac01617 	ldw	r11,88(sp)
    3b34:	102b883a 	mov	r21,r2
    3b38:	00800044 	movi	r2,1
    3b3c:	bd800044 	addi	r22,r23,1
    3b40:	1815883a 	mov	r10,r3
    3b44:	58802226 	beq	r11,r2,3bd0 <_dtoa_r+0x1410>
    3b48:	bad7883a 	add	r11,r23,r11
    3b4c:	dc001415 	stw	r16,80(sp)
    3b50:	a805883a 	mov	r2,r21
    3b54:	b027883a 	mov	r19,r22
    3b58:	5821883a 	mov	r16,r11
    3b5c:	882b883a 	mov	r21,r17
    3b60:	000d883a 	mov	r6,zero
    3b64:	01d00934 	movhi	r7,16420
    3b68:	1009883a 	mov	r4,r2
    3b6c:	180b883a 	mov	r5,r3
    3b70:	00089e00 	call	89e0 <__muldf3>
    3b74:	180b883a 	mov	r5,r3
    3b78:	1009883a 	mov	r4,r2
    3b7c:	1829883a 	mov	r20,r3
    3b80:	1023883a 	mov	r17,r2
    3b84:	00091280 	call	9128 <__fixdfsi>
    3b88:	1009883a 	mov	r4,r2
    3b8c:	1025883a 	mov	r18,r2
    3b90:	00090540 	call	9054 <__floatsidf>
    3b94:	8809883a 	mov	r4,r17
    3b98:	a00b883a 	mov	r5,r20
    3b9c:	100d883a 	mov	r6,r2
    3ba0:	180f883a 	mov	r7,r3
    3ba4:	94800c04 	addi	r18,r18,48
    3ba8:	00089800 	call	8980 <__subdf3>
    3bac:	9cc00044 	addi	r19,r19,1
    3bb0:	9cbfffc5 	stb	r18,-1(r19)
    3bb4:	9c3fea1e 	bne	r19,r16,3b60 <_dtoa_r+0x13a0>
    3bb8:	1815883a 	mov	r10,r3
    3bbc:	d8c01017 	ldw	r3,64(sp)
    3bc0:	dc001417 	ldw	r16,80(sp)
    3bc4:	a823883a 	mov	r17,r21
    3bc8:	b0ed883a 	add	r22,r22,r3
    3bcc:	102b883a 	mov	r21,r2
    3bd0:	d9001117 	ldw	r4,68(sp)
    3bd4:	d9401217 	ldw	r5,72(sp)
    3bd8:	000d883a 	mov	r6,zero
    3bdc:	01cff834 	movhi	r7,16352
    3be0:	da801515 	stw	r10,84(sp)
    3be4:	000892c0 	call	892c <__adddf3>
    3be8:	da801517 	ldw	r10,84(sp)
    3bec:	1009883a 	mov	r4,r2
    3bf0:	180b883a 	mov	r5,r3
    3bf4:	500f883a 	mov	r7,r10
    3bf8:	a80d883a 	mov	r6,r21
    3bfc:	0008ff80 	call	8ff8 <__ltdf2>
    3c00:	da801517 	ldw	r10,84(sp)
    3c04:	10003b0e 	bge	r2,zero,3cf4 <_dtoa_r+0x1534>
    3c08:	d9c01317 	ldw	r7,76(sp)
    3c0c:	b53fffc3 	ldbu	r20,-1(r22)
    3c10:	d9c00615 	stw	r7,24(sp)
    3c14:	003d3106 	br	30dc <_dtoa_r+0x91c>
    3c18:	d8800817 	ldw	r2,32(sp)
    3c1c:	11e5c83a 	sub	r18,r2,r7
    3c20:	0005883a 	mov	r2,zero
    3c24:	003d5006 	br	3168 <_dtoa_r+0x9a8>
    3c28:	05800044 	movi	r22,1
    3c2c:	003dc406 	br	3340 <_dtoa_r+0xb80>
    3c30:	a5000044 	addi	r20,r20,1
    3c34:	15000005 	stb	r20,0(r2)
    3c38:	003c8206 	br	2e44 <_dtoa_r+0x684>
    3c3c:	d8800217 	ldw	r2,8(sp)
    3c40:	00c00d84 	movi	r3,54
    3c44:	dcc00a17 	ldw	r19,40(sp)
    3c48:	1885c83a 	sub	r2,r3,r2
    3c4c:	dc800817 	ldw	r18,32(sp)
    3c50:	003d4506 	br	3168 <_dtoa_r+0x9a8>
    3c54:	dcc00317 	ldw	r19,12(sp)
    3c58:	8829883a 	mov	r20,r17
    3c5c:	04800084 	movi	r18,2
    3c60:	003bea06 	br	2c0c <_dtoa_r+0x44c>
    3c64:	d9000917 	ldw	r4,36(sp)
    3c68:	203f1126 	beq	r4,zero,38b0 <_dtoa_r+0x10f0>
    3c6c:	d9c00e17 	ldw	r7,56(sp)
    3c70:	01fca20e 	bge	zero,r7,2efc <_dtoa_r+0x73c>
    3c74:	a00b883a 	mov	r5,r20
    3c78:	9809883a 	mov	r4,r19
    3c7c:	000d883a 	mov	r6,zero
    3c80:	01d00934 	movhi	r7,16420
    3c84:	00089e00 	call	89e0 <__muldf3>
    3c88:	91000044 	addi	r4,r18,1
    3c8c:	1027883a 	mov	r19,r2
    3c90:	1829883a 	mov	r20,r3
    3c94:	00090540 	call	9054 <__floatsidf>
    3c98:	9809883a 	mov	r4,r19
    3c9c:	a00b883a 	mov	r5,r20
    3ca0:	100d883a 	mov	r6,r2
    3ca4:	180f883a 	mov	r7,r3
    3ca8:	00089e00 	call	89e0 <__muldf3>
    3cac:	1009883a 	mov	r4,r2
    3cb0:	180b883a 	mov	r5,r3
    3cb4:	000d883a 	mov	r6,zero
    3cb8:	01d00734 	movhi	r7,16412
    3cbc:	000892c0 	call	892c <__adddf3>
    3cc0:	1025883a 	mov	r18,r2
    3cc4:	d8800617 	ldw	r2,24(sp)
    3cc8:	057f3034 	movhi	r21,64704
    3ccc:	1d6b883a 	add	r21,r3,r21
    3cd0:	10bfffc4 	addi	r2,r2,-1
    3cd4:	d8801315 	stw	r2,76(sp)
    3cd8:	dac00e17 	ldw	r11,56(sp)
    3cdc:	003be706 	br	2c7c <_dtoa_r+0x4bc>
    3ce0:	01000e44 	movi	r4,57
    3ce4:	91000005 	stb	r4,0(r18)
    3ce8:	95800044 	addi	r22,r18,1
    3cec:	982b883a 	mov	r21,r19
    3cf0:	003da106 	br	3378 <_dtoa_r+0xbb8>
    3cf4:	d9801117 	ldw	r6,68(sp)
    3cf8:	d9c01217 	ldw	r7,72(sp)
    3cfc:	0009883a 	mov	r4,zero
    3d00:	014ff834 	movhi	r5,16352
    3d04:	da801515 	stw	r10,84(sp)
    3d08:	00089800 	call	8980 <__subdf3>
    3d0c:	da801517 	ldw	r10,84(sp)
    3d10:	1009883a 	mov	r4,r2
    3d14:	180b883a 	mov	r5,r3
    3d18:	a80d883a 	mov	r6,r21
    3d1c:	500f883a 	mov	r7,r10
    3d20:	0008f300 	call	8f30 <__gtdf2>
    3d24:	00bc750e 	bge	zero,r2,2efc <_dtoa_r+0x73c>
    3d28:	01000c04 	movi	r4,48
    3d2c:	00000106 	br	3d34 <_dtoa_r+0x1574>
    3d30:	102d883a 	mov	r22,r2
    3d34:	b0bfffc4 	addi	r2,r22,-1
    3d38:	10c00007 	ldb	r3,0(r2)
    3d3c:	193ffc26 	beq	r3,r4,3d30 <_dtoa_r+0x1570>
    3d40:	d8801317 	ldw	r2,76(sp)
    3d44:	d8800615 	stw	r2,24(sp)
    3d48:	003c3e06 	br	2e44 <_dtoa_r+0x684>
    3d4c:	d9001317 	ldw	r4,76(sp)
    3d50:	df001117 	ldw	fp,68(sp)
    3d54:	d9000615 	stw	r4,24(sp)
    3d58:	003ce006 	br	30dc <_dtoa_r+0x91c>
    3d5c:	df001117 	ldw	fp,68(sp)
    3d60:	dc401217 	ldw	r17,72(sp)
    3d64:	003c6506 	br	2efc <_dtoa_r+0x73c>
    3d68:	103e7a1e 	bne	r2,zero,3754 <_dtoa_r+0xf94>
    3d6c:	1880004c 	andi	r2,r3,1
    3d70:	103e7826 	beq	r2,zero,3754 <_dtoa_r+0xf94>
    3d74:	003e7406 	br	3748 <_dtoa_r+0xf88>
    3d78:	8009883a 	mov	r4,r16
    3d7c:	a80b883a 	mov	r5,r21
    3d80:	01800284 	movi	r6,10
    3d84:	000f883a 	mov	r7,zero
    3d88:	0005ca80 	call	5ca8 <__multadd>
    3d8c:	d9000e17 	ldw	r4,56(sp)
    3d90:	102b883a 	mov	r21,r2
    3d94:	d9000915 	stw	r4,36(sp)
    3d98:	003d5106 	br	32e0 <_dtoa_r+0xb20>
    3d9c:	04800084 	movi	r18,2
    3da0:	003b9a06 	br	2c0c <_dtoa_r+0x44c>
    3da4:	d8c01317 	ldw	r3,76(sp)
    3da8:	d8c00615 	stw	r3,24(sp)
    3dac:	003ccb06 	br	30dc <_dtoa_r+0x91c>
    3db0:	d8c01317 	ldw	r3,76(sp)
    3db4:	d8c00615 	stw	r3,24(sp)
    3db8:	003c2206 	br	2e44 <_dtoa_r+0x684>
    3dbc:	20fd3826 	beq	r4,r3,32a0 <_dtoa_r+0xae0>
    3dc0:	00c00f04 	movi	r3,60
    3dc4:	1885c83a 	sub	r2,r3,r2
    3dc8:	003da906 	br	3470 <_dtoa_r+0xcb0>
    3dcc:	000b883a 	mov	r5,zero
    3dd0:	003b5406 	br	2b24 <_dtoa_r+0x364>
    3dd4:	04c00044 	movi	r19,1
    3dd8:	003b3b06 	br	2ac8 <_dtoa_r+0x308>

00003ddc <_fflush_r>:
    3ddc:	defffb04 	addi	sp,sp,-20
    3de0:	dcc00315 	stw	r19,12(sp)
    3de4:	dc400115 	stw	r17,4(sp)
    3de8:	dfc00415 	stw	ra,16(sp)
    3dec:	dc800215 	stw	r18,8(sp)
    3df0:	dc000015 	stw	r16,0(sp)
    3df4:	2027883a 	mov	r19,r4
    3df8:	2823883a 	mov	r17,r5
    3dfc:	20000226 	beq	r4,zero,3e08 <_fflush_r+0x2c>
    3e00:	20800e17 	ldw	r2,56(r4)
    3e04:	10005726 	beq	r2,zero,3f64 <_fflush_r+0x188>
    3e08:	8880030b 	ldhu	r2,12(r17)
    3e0c:	10c0020c 	andi	r3,r2,8
    3e10:	18ffffcc 	andi	r3,r3,65535
    3e14:	18e0001c 	xori	r3,r3,32768
    3e18:	18e00004 	addi	r3,r3,-32768
    3e1c:	1800311e 	bne	r3,zero,3ee4 <_fflush_r+0x108>
    3e20:	89000117 	ldw	r4,4(r17)
    3e24:	10c20014 	ori	r3,r2,2048
    3e28:	88c0030d 	sth	r3,12(r17)
    3e2c:	180b883a 	mov	r5,r3
    3e30:	0100520e 	bge	zero,r4,3f7c <_fflush_r+0x1a0>
    3e34:	88c00a17 	ldw	r3,40(r17)
    3e38:	18002226 	beq	r3,zero,3ec4 <_fflush_r+0xe8>
    3e3c:	1084000c 	andi	r2,r2,4096
    3e40:	10bfffcc 	andi	r2,r2,65535
    3e44:	10a0001c 	xori	r2,r2,32768
    3e48:	10a00004 	addi	r2,r2,-32768
    3e4c:	10004e26 	beq	r2,zero,3f88 <_fflush_r+0x1ac>
    3e50:	8c001417 	ldw	r16,80(r17)
    3e54:	2940010c 	andi	r5,r5,4
    3e58:	297fffcc 	andi	r5,r5,65535
    3e5c:	2960001c 	xori	r5,r5,32768
    3e60:	29600004 	addi	r5,r5,-32768
    3e64:	28000626 	beq	r5,zero,3e80 <_fflush_r+0xa4>
    3e68:	89000117 	ldw	r4,4(r17)
    3e6c:	88800c17 	ldw	r2,48(r17)
    3e70:	8121c83a 	sub	r16,r16,r4
    3e74:	10000226 	beq	r2,zero,3e80 <_fflush_r+0xa4>
    3e78:	88800f17 	ldw	r2,60(r17)
    3e7c:	80a1c83a 	sub	r16,r16,r2
    3e80:	89400717 	ldw	r5,28(r17)
    3e84:	9809883a 	mov	r4,r19
    3e88:	800d883a 	mov	r6,r16
    3e8c:	000f883a 	mov	r7,zero
    3e90:	183ee83a 	callr	r3
    3e94:	8080281e 	bne	r16,r2,3f38 <_fflush_r+0x15c>
    3e98:	8880030b 	ldhu	r2,12(r17)
    3e9c:	88c00417 	ldw	r3,16(r17)
    3ea0:	88000115 	stw	zero,4(r17)
    3ea4:	113dffcc 	andi	r4,r2,63487
    3ea8:	1084000c 	andi	r2,r2,4096
    3eac:	10bfffcc 	andi	r2,r2,65535
    3eb0:	10a0001c 	xori	r2,r2,32768
    3eb4:	8900030d 	sth	r4,12(r17)
    3eb8:	88c00015 	stw	r3,0(r17)
    3ebc:	10a00004 	addi	r2,r2,-32768
    3ec0:	10002c1e 	bne	r2,zero,3f74 <_fflush_r+0x198>
    3ec4:	0005883a 	mov	r2,zero
    3ec8:	dfc00417 	ldw	ra,16(sp)
    3ecc:	dcc00317 	ldw	r19,12(sp)
    3ed0:	dc800217 	ldw	r18,8(sp)
    3ed4:	dc400117 	ldw	r17,4(sp)
    3ed8:	dc000017 	ldw	r16,0(sp)
    3edc:	dec00504 	addi	sp,sp,20
    3ee0:	f800283a 	ret
    3ee4:	8c800417 	ldw	r18,16(r17)
    3ee8:	903ff626 	beq	r18,zero,3ec4 <_fflush_r+0xe8>
    3eec:	8c000017 	ldw	r16,0(r17)
    3ef0:	108000cc 	andi	r2,r2,3
    3ef4:	8c800015 	stw	r18,0(r17)
    3ef8:	84a1c83a 	sub	r16,r16,r18
    3efc:	10001b1e 	bne	r2,zero,3f6c <_fflush_r+0x190>
    3f00:	88800517 	ldw	r2,20(r17)
    3f04:	88800215 	stw	r2,8(r17)
    3f08:	04000316 	blt	zero,r16,3f18 <_fflush_r+0x13c>
    3f0c:	003fed06 	br	3ec4 <_fflush_r+0xe8>
    3f10:	90a5883a 	add	r18,r18,r2
    3f14:	043feb0e 	bge	zero,r16,3ec4 <_fflush_r+0xe8>
    3f18:	88800917 	ldw	r2,36(r17)
    3f1c:	89400717 	ldw	r5,28(r17)
    3f20:	800f883a 	mov	r7,r16
    3f24:	900d883a 	mov	r6,r18
    3f28:	9809883a 	mov	r4,r19
    3f2c:	103ee83a 	callr	r2
    3f30:	80a1c83a 	sub	r16,r16,r2
    3f34:	00bff616 	blt	zero,r2,3f10 <_fflush_r+0x134>
    3f38:	88c0030b 	ldhu	r3,12(r17)
    3f3c:	00bfffc4 	movi	r2,-1
    3f40:	18c01014 	ori	r3,r3,64
    3f44:	88c0030d 	sth	r3,12(r17)
    3f48:	dfc00417 	ldw	ra,16(sp)
    3f4c:	dcc00317 	ldw	r19,12(sp)
    3f50:	dc800217 	ldw	r18,8(sp)
    3f54:	dc400117 	ldw	r17,4(sp)
    3f58:	dc000017 	ldw	r16,0(sp)
    3f5c:	dec00504 	addi	sp,sp,20
    3f60:	f800283a 	ret
    3f64:	00040980 	call	4098 <__sinit>
    3f68:	003fa706 	br	3e08 <_fflush_r+0x2c>
    3f6c:	0005883a 	mov	r2,zero
    3f70:	003fe406 	br	3f04 <_fflush_r+0x128>
    3f74:	8c001415 	stw	r16,80(r17)
    3f78:	003fd206 	br	3ec4 <_fflush_r+0xe8>
    3f7c:	88c00f17 	ldw	r3,60(r17)
    3f80:	00ffac16 	blt	zero,r3,3e34 <_fflush_r+0x58>
    3f84:	003fcf06 	br	3ec4 <_fflush_r+0xe8>
    3f88:	89400717 	ldw	r5,28(r17)
    3f8c:	9809883a 	mov	r4,r19
    3f90:	000d883a 	mov	r6,zero
    3f94:	01c00044 	movi	r7,1
    3f98:	183ee83a 	callr	r3
    3f9c:	1021883a 	mov	r16,r2
    3fa0:	00bfffc4 	movi	r2,-1
    3fa4:	80800326 	beq	r16,r2,3fb4 <_fflush_r+0x1d8>
    3fa8:	8940030b 	ldhu	r5,12(r17)
    3fac:	88c00a17 	ldw	r3,40(r17)
    3fb0:	003fa806 	br	3e54 <_fflush_r+0x78>
    3fb4:	98c00017 	ldw	r3,0(r19)
    3fb8:	00800744 	movi	r2,29
    3fbc:	18bfde1e 	bne	r3,r2,3f38 <_fflush_r+0x15c>
    3fc0:	003fc006 	br	3ec4 <_fflush_r+0xe8>

00003fc4 <fflush>:
    3fc4:	200b883a 	mov	r5,r4
    3fc8:	20000426 	beq	r4,zero,3fdc <fflush+0x18>
    3fcc:	00800074 	movhi	r2,1
    3fd0:	10876104 	addi	r2,r2,7556
    3fd4:	11000017 	ldw	r4,0(r2)
    3fd8:	0003ddc1 	jmpi	3ddc <_fflush_r>
    3fdc:	00800074 	movhi	r2,1
    3fe0:	10876004 	addi	r2,r2,7552
    3fe4:	11000017 	ldw	r4,0(r2)
    3fe8:	01400034 	movhi	r5,0
    3fec:	294f7704 	addi	r5,r5,15836
    3ff0:	0004c781 	jmpi	4c78 <_fwalk_reent>

00003ff4 <__fp_lock>:
    3ff4:	0005883a 	mov	r2,zero
    3ff8:	f800283a 	ret

00003ffc <__fp_unlock>:
    3ffc:	0005883a 	mov	r2,zero
    4000:	f800283a 	ret

00004004 <_cleanup_r>:
    4004:	01400034 	movhi	r5,0
    4008:	295dea04 	addi	r5,r5,30632
    400c:	0004bd01 	jmpi	4bd0 <_fwalk>

00004010 <__sfmoreglue>:
    4010:	defffc04 	addi	sp,sp,-16
    4014:	dc800215 	stw	r18,8(sp)
    4018:	2825883a 	mov	r18,r5
    401c:	dc000015 	stw	r16,0(sp)
    4020:	01401704 	movi	r5,92
    4024:	2021883a 	mov	r16,r4
    4028:	9009883a 	mov	r4,r18
    402c:	dfc00315 	stw	ra,12(sp)
    4030:	dc400115 	stw	r17,4(sp)
    4034:	00094480 	call	9448 <__mulsi3>
    4038:	8009883a 	mov	r4,r16
    403c:	11400304 	addi	r5,r2,12
    4040:	1023883a 	mov	r17,r2
    4044:	0004fb40 	call	4fb4 <_malloc_r>
    4048:	1021883a 	mov	r16,r2
    404c:	10000726 	beq	r2,zero,406c <__sfmoreglue+0x5c>
    4050:	11000304 	addi	r4,r2,12
    4054:	10000015 	stw	zero,0(r2)
    4058:	14800115 	stw	r18,4(r2)
    405c:	11000215 	stw	r4,8(r2)
    4060:	000b883a 	mov	r5,zero
    4064:	880d883a 	mov	r6,r17
    4068:	0005afc0 	call	5afc <memset>
    406c:	8005883a 	mov	r2,r16
    4070:	dfc00317 	ldw	ra,12(sp)
    4074:	dc800217 	ldw	r18,8(sp)
    4078:	dc400117 	ldw	r17,4(sp)
    407c:	dc000017 	ldw	r16,0(sp)
    4080:	dec00404 	addi	sp,sp,16
    4084:	f800283a 	ret

00004088 <_cleanup>:
    4088:	00800074 	movhi	r2,1
    408c:	10876004 	addi	r2,r2,7552
    4090:	11000017 	ldw	r4,0(r2)
    4094:	00040041 	jmpi	4004 <_cleanup_r>

00004098 <__sinit>:
    4098:	20800e17 	ldw	r2,56(r4)
    409c:	1000401e 	bne	r2,zero,41a0 <__sinit+0x108>
    40a0:	21400117 	ldw	r5,4(r4)
    40a4:	01800034 	movhi	r6,0
    40a8:	31900104 	addi	r6,r6,16388
    40ac:	20c00217 	ldw	r3,8(r4)
    40b0:	21800f15 	stw	r6,60(r4)
    40b4:	2080bb04 	addi	r2,r4,748
    40b8:	02400044 	movi	r9,1
    40bc:	018000c4 	movi	r6,3
    40c0:	2180b915 	stw	r6,740(r4)
    40c4:	2080ba15 	stw	r2,744(r4)
    40c8:	22400e15 	stw	r9,56(r4)
    40cc:	20800317 	ldw	r2,12(r4)
    40d0:	2000b815 	stw	zero,736(r4)
    40d4:	02000034 	movhi	r8,0
    40d8:	421cbb04 	addi	r8,r8,29420
    40dc:	01c00034 	movhi	r7,0
    40e0:	39dcd004 	addi	r7,r7,29504
    40e4:	01800034 	movhi	r6,0
    40e8:	319cf204 	addi	r6,r6,29640
    40ec:	01000034 	movhi	r4,0
    40f0:	211d0904 	addi	r4,r4,29732
    40f4:	02800104 	movi	r10,4
    40f8:	28000015 	stw	zero,0(r5)
    40fc:	28000115 	stw	zero,4(r5)
    4100:	28000215 	stw	zero,8(r5)
    4104:	2a80030d 	sth	r10,12(r5)
    4108:	2800038d 	sth	zero,14(r5)
    410c:	28000415 	stw	zero,16(r5)
    4110:	28000515 	stw	zero,20(r5)
    4114:	28000615 	stw	zero,24(r5)
    4118:	29400715 	stw	r5,28(r5)
    411c:	2a000815 	stw	r8,32(r5)
    4120:	29c00915 	stw	r7,36(r5)
    4124:	29800a15 	stw	r6,40(r5)
    4128:	29000b15 	stw	r4,44(r5)
    412c:	01400284 	movi	r5,10
    4130:	18000015 	stw	zero,0(r3)
    4134:	18000115 	stw	zero,4(r3)
    4138:	18000215 	stw	zero,8(r3)
    413c:	1940030d 	sth	r5,12(r3)
    4140:	1a40038d 	sth	r9,14(r3)
    4144:	18000415 	stw	zero,16(r3)
    4148:	18000515 	stw	zero,20(r3)
    414c:	18000615 	stw	zero,24(r3)
    4150:	18c00715 	stw	r3,28(r3)
    4154:	1a000815 	stw	r8,32(r3)
    4158:	19c00915 	stw	r7,36(r3)
    415c:	19800a15 	stw	r6,40(r3)
    4160:	19000b15 	stw	r4,44(r3)
    4164:	00c00484 	movi	r3,18
    4168:	10c0030d 	sth	r3,12(r2)
    416c:	00c00084 	movi	r3,2
    4170:	10000015 	stw	zero,0(r2)
    4174:	10000115 	stw	zero,4(r2)
    4178:	10000215 	stw	zero,8(r2)
    417c:	10c0038d 	sth	r3,14(r2)
    4180:	10000415 	stw	zero,16(r2)
    4184:	10000515 	stw	zero,20(r2)
    4188:	10000615 	stw	zero,24(r2)
    418c:	10800715 	stw	r2,28(r2)
    4190:	12000815 	stw	r8,32(r2)
    4194:	11c00915 	stw	r7,36(r2)
    4198:	11800a15 	stw	r6,40(r2)
    419c:	11000b15 	stw	r4,44(r2)
    41a0:	f800283a 	ret

000041a4 <__sfp>:
    41a4:	defffc04 	addi	sp,sp,-16
    41a8:	00800074 	movhi	r2,1
    41ac:	10876004 	addi	r2,r2,7552
    41b0:	dc400115 	stw	r17,4(sp)
    41b4:	14400017 	ldw	r17,0(r2)
    41b8:	dc800215 	stw	r18,8(sp)
    41bc:	dfc00315 	stw	ra,12(sp)
    41c0:	88800e17 	ldw	r2,56(r17)
    41c4:	dc000015 	stw	r16,0(sp)
    41c8:	2025883a 	mov	r18,r4
    41cc:	10002826 	beq	r2,zero,4270 <__sfp+0xcc>
    41d0:	8c40b804 	addi	r17,r17,736
    41d4:	043fffc4 	movi	r16,-1
    41d8:	89400117 	ldw	r5,4(r17)
    41dc:	88800217 	ldw	r2,8(r17)
    41e0:	297fffc4 	addi	r5,r5,-1
    41e4:	28000a16 	blt	r5,zero,4210 <__sfp+0x6c>
    41e8:	10c0030f 	ldh	r3,12(r2)
    41ec:	18000c26 	beq	r3,zero,4220 <__sfp+0x7c>
    41f0:	10c01a04 	addi	r3,r2,104
    41f4:	00000206 	br	4200 <__sfp+0x5c>
    41f8:	19bfe90f 	ldh	r6,-92(r3)
    41fc:	30000826 	beq	r6,zero,4220 <__sfp+0x7c>
    4200:	297fffc4 	addi	r5,r5,-1
    4204:	18bffd04 	addi	r2,r3,-12
    4208:	18c01704 	addi	r3,r3,92
    420c:	2c3ffa1e 	bne	r5,r16,41f8 <__sfp+0x54>
    4210:	88800017 	ldw	r2,0(r17)
    4214:	10001926 	beq	r2,zero,427c <__sfp+0xd8>
    4218:	1023883a 	mov	r17,r2
    421c:	003fee06 	br	41d8 <__sfp+0x34>
    4220:	00ffffc4 	movi	r3,-1
    4224:	10c0038d 	sth	r3,14(r2)
    4228:	00c00044 	movi	r3,1
    422c:	10c0030d 	sth	r3,12(r2)
    4230:	10000015 	stw	zero,0(r2)
    4234:	10000215 	stw	zero,8(r2)
    4238:	10000115 	stw	zero,4(r2)
    423c:	10000415 	stw	zero,16(r2)
    4240:	10000515 	stw	zero,20(r2)
    4244:	10000615 	stw	zero,24(r2)
    4248:	10000c15 	stw	zero,48(r2)
    424c:	10000d15 	stw	zero,52(r2)
    4250:	10001115 	stw	zero,68(r2)
    4254:	10001215 	stw	zero,72(r2)
    4258:	dfc00317 	ldw	ra,12(sp)
    425c:	dc800217 	ldw	r18,8(sp)
    4260:	dc400117 	ldw	r17,4(sp)
    4264:	dc000017 	ldw	r16,0(sp)
    4268:	dec00404 	addi	sp,sp,16
    426c:	f800283a 	ret
    4270:	8809883a 	mov	r4,r17
    4274:	00040980 	call	4098 <__sinit>
    4278:	003fd506 	br	41d0 <__sfp+0x2c>
    427c:	9009883a 	mov	r4,r18
    4280:	01400104 	movi	r5,4
    4284:	00040100 	call	4010 <__sfmoreglue>
    4288:	88800015 	stw	r2,0(r17)
    428c:	103fe21e 	bne	r2,zero,4218 <__sfp+0x74>
    4290:	00800304 	movi	r2,12
    4294:	90800015 	stw	r2,0(r18)
    4298:	0005883a 	mov	r2,zero
    429c:	003fee06 	br	4258 <__sfp+0xb4>

000042a0 <__sfp_lock_acquire>:
    42a0:	f800283a 	ret

000042a4 <__sfp_lock_release>:
    42a4:	f800283a 	ret

000042a8 <__sinit_lock_acquire>:
    42a8:	f800283a 	ret

000042ac <__sinit_lock_release>:
    42ac:	f800283a 	ret

000042b0 <__fp_lock_all>:
    42b0:	00800074 	movhi	r2,1
    42b4:	10876104 	addi	r2,r2,7556
    42b8:	11000017 	ldw	r4,0(r2)
    42bc:	01400034 	movhi	r5,0
    42c0:	294ffd04 	addi	r5,r5,16372
    42c4:	0004bd01 	jmpi	4bd0 <_fwalk>

000042c8 <__fp_unlock_all>:
    42c8:	00800074 	movhi	r2,1
    42cc:	10876104 	addi	r2,r2,7556
    42d0:	11000017 	ldw	r4,0(r2)
    42d4:	01400034 	movhi	r5,0
    42d8:	294fff04 	addi	r5,r5,16380
    42dc:	0004bd01 	jmpi	4bd0 <_fwalk>

000042e0 <_malloc_trim_r>:
    42e0:	defffb04 	addi	sp,sp,-20
    42e4:	dcc00315 	stw	r19,12(sp)
    42e8:	dc800215 	stw	r18,8(sp)
    42ec:	dc400115 	stw	r17,4(sp)
    42f0:	dc000015 	stw	r16,0(sp)
    42f4:	2827883a 	mov	r19,r5
    42f8:	dfc00415 	stw	ra,16(sp)
    42fc:	04400074 	movhi	r17,1
    4300:	8c41dc04 	addi	r17,r17,1904
    4304:	2021883a 	mov	r16,r4
    4308:	000a0700 	call	a070 <__malloc_lock>
    430c:	88800217 	ldw	r2,8(r17)
    4310:	14800117 	ldw	r18,4(r2)
    4314:	00bfff04 	movi	r2,-4
    4318:	90a4703a 	and	r18,r18,r2
    431c:	9083fbc4 	addi	r2,r18,4079
    4320:	14e7c83a 	sub	r19,r2,r19
    4324:	9826d33a 	srli	r19,r19,12
    4328:	0083ffc4 	movi	r2,4095
    432c:	9cffffc4 	addi	r19,r19,-1
    4330:	9826933a 	slli	r19,r19,12
    4334:	14c0060e 	bge	r2,r19,4350 <_malloc_trim_r+0x70>
    4338:	8009883a 	mov	r4,r16
    433c:	000b883a 	mov	r5,zero
    4340:	00072880 	call	7288 <_sbrk_r>
    4344:	88c00217 	ldw	r3,8(r17)
    4348:	1c87883a 	add	r3,r3,r18
    434c:	10c00a26 	beq	r2,r3,4378 <_malloc_trim_r+0x98>
    4350:	8009883a 	mov	r4,r16
    4354:	000a0900 	call	a090 <__malloc_unlock>
    4358:	0005883a 	mov	r2,zero
    435c:	dfc00417 	ldw	ra,16(sp)
    4360:	dcc00317 	ldw	r19,12(sp)
    4364:	dc800217 	ldw	r18,8(sp)
    4368:	dc400117 	ldw	r17,4(sp)
    436c:	dc000017 	ldw	r16,0(sp)
    4370:	dec00504 	addi	sp,sp,20
    4374:	f800283a 	ret
    4378:	8009883a 	mov	r4,r16
    437c:	04cbc83a 	sub	r5,zero,r19
    4380:	00072880 	call	7288 <_sbrk_r>
    4384:	00ffffc4 	movi	r3,-1
    4388:	10c01326 	beq	r2,r3,43d8 <_malloc_trim_r+0xf8>
    438c:	00800074 	movhi	r2,1
    4390:	10878104 	addi	r2,r2,7684
    4394:	11000017 	ldw	r4,0(r2)
    4398:	88c00217 	ldw	r3,8(r17)
    439c:	94e5c83a 	sub	r18,r18,r19
    43a0:	94800054 	ori	r18,r18,1
    43a4:	24e7c83a 	sub	r19,r4,r19
    43a8:	1c800115 	stw	r18,4(r3)
    43ac:	8009883a 	mov	r4,r16
    43b0:	14c00015 	stw	r19,0(r2)
    43b4:	000a0900 	call	a090 <__malloc_unlock>
    43b8:	00800044 	movi	r2,1
    43bc:	dfc00417 	ldw	ra,16(sp)
    43c0:	dcc00317 	ldw	r19,12(sp)
    43c4:	dc800217 	ldw	r18,8(sp)
    43c8:	dc400117 	ldw	r17,4(sp)
    43cc:	dc000017 	ldw	r16,0(sp)
    43d0:	dec00504 	addi	sp,sp,20
    43d4:	f800283a 	ret
    43d8:	8009883a 	mov	r4,r16
    43dc:	000b883a 	mov	r5,zero
    43e0:	00072880 	call	7288 <_sbrk_r>
    43e4:	88c00217 	ldw	r3,8(r17)
    43e8:	014003c4 	movi	r5,15
    43ec:	10c9c83a 	sub	r4,r2,r3
    43f0:	293fd70e 	bge	r5,r4,4350 <_malloc_trim_r+0x70>
    43f4:	01400074 	movhi	r5,1
    43f8:	29476304 	addi	r5,r5,7564
    43fc:	29400017 	ldw	r5,0(r5)
    4400:	21000054 	ori	r4,r4,1
    4404:	19000115 	stw	r4,4(r3)
    4408:	1145c83a 	sub	r2,r2,r5
    440c:	01400074 	movhi	r5,1
    4410:	29478104 	addi	r5,r5,7684
    4414:	28800015 	stw	r2,0(r5)
    4418:	003fcd06 	br	4350 <_malloc_trim_r+0x70>

0000441c <_free_r>:
    441c:	defffd04 	addi	sp,sp,-12
    4420:	dc400115 	stw	r17,4(sp)
    4424:	dc000015 	stw	r16,0(sp)
    4428:	dfc00215 	stw	ra,8(sp)
    442c:	2821883a 	mov	r16,r5
    4430:	2023883a 	mov	r17,r4
    4434:	28004b26 	beq	r5,zero,4564 <_free_r+0x148>
    4438:	000a0700 	call	a070 <__malloc_lock>
    443c:	823fff17 	ldw	r8,-4(r16)
    4440:	00bfff84 	movi	r2,-2
    4444:	81bffe04 	addi	r6,r16,-8
    4448:	4084703a 	and	r2,r8,r2
    444c:	3087883a 	add	r3,r6,r2
    4450:	01400074 	movhi	r5,1
    4454:	2941dc04 	addi	r5,r5,1904
    4458:	1a400117 	ldw	r9,4(r3)
    445c:	29000217 	ldw	r4,8(r5)
    4460:	01ffff04 	movi	r7,-4
    4464:	49ce703a 	and	r7,r9,r7
    4468:	20c06526 	beq	r4,r3,4600 <_free_r+0x1e4>
    446c:	19c00115 	stw	r7,4(r3)
    4470:	4200004c 	andi	r8,r8,1
    4474:	40003026 	beq	r8,zero,4538 <_free_r+0x11c>
    4478:	0009883a 	mov	r4,zero
    447c:	19d1883a 	add	r8,r3,r7
    4480:	42000117 	ldw	r8,4(r8)
    4484:	4200004c 	andi	r8,r8,1
    4488:	4000061e 	bne	r8,zero,44a4 <_free_r+0x88>
    448c:	11c5883a 	add	r2,r2,r7
    4490:	19c00217 	ldw	r7,8(r3)
    4494:	20004e26 	beq	r4,zero,45d0 <_free_r+0x1b4>
    4498:	18c00317 	ldw	r3,12(r3)
    449c:	38c00315 	stw	r3,12(r7)
    44a0:	19c00215 	stw	r7,8(r3)
    44a4:	11c00054 	ori	r7,r2,1
    44a8:	3087883a 	add	r3,r6,r2
    44ac:	31c00115 	stw	r7,4(r6)
    44b0:	18800015 	stw	r2,0(r3)
    44b4:	20001a1e 	bne	r4,zero,4520 <_free_r+0x104>
    44b8:	00c07fc4 	movi	r3,511
    44bc:	18802e2e 	bgeu	r3,r2,4578 <_free_r+0x15c>
    44c0:	1006d27a 	srli	r3,r2,9
    44c4:	01000104 	movi	r4,4
    44c8:	20c06636 	bltu	r4,r3,4664 <_free_r+0x248>
    44cc:	1008d1ba 	srli	r4,r2,6
    44d0:	21000e04 	addi	r4,r4,56
    44d4:	210f883a 	add	r7,r4,r4
    44d8:	39cf883a 	add	r7,r7,r7
    44dc:	39cf883a 	add	r7,r7,r7
    44e0:	29cf883a 	add	r7,r5,r7
    44e4:	38c00217 	ldw	r3,8(r7)
    44e8:	01400074 	movhi	r5,1
    44ec:	2941dc04 	addi	r5,r5,1904
    44f0:	19c06126 	beq	r3,r7,4678 <_free_r+0x25c>
    44f4:	013fff04 	movi	r4,-4
    44f8:	19400117 	ldw	r5,4(r3)
    44fc:	290a703a 	and	r5,r5,r4
    4500:	1140022e 	bgeu	r2,r5,450c <_free_r+0xf0>
    4504:	18c00217 	ldw	r3,8(r3)
    4508:	38fffb1e 	bne	r7,r3,44f8 <_free_r+0xdc>
    450c:	18800317 	ldw	r2,12(r3)
    4510:	30800315 	stw	r2,12(r6)
    4514:	30c00215 	stw	r3,8(r6)
    4518:	11800215 	stw	r6,8(r2)
    451c:	19800315 	stw	r6,12(r3)
    4520:	8809883a 	mov	r4,r17
    4524:	dfc00217 	ldw	ra,8(sp)
    4528:	dc400117 	ldw	r17,4(sp)
    452c:	dc000017 	ldw	r16,0(sp)
    4530:	dec00304 	addi	sp,sp,12
    4534:	000a0901 	jmpi	a090 <__malloc_unlock>
    4538:	813ffe17 	ldw	r4,-8(r16)
    453c:	2a400204 	addi	r9,r5,8
    4540:	310dc83a 	sub	r6,r6,r4
    4544:	32000217 	ldw	r8,8(r6)
    4548:	1105883a 	add	r2,r2,r4
    454c:	42404326 	beq	r8,r9,465c <_free_r+0x240>
    4550:	32400317 	ldw	r9,12(r6)
    4554:	0009883a 	mov	r4,zero
    4558:	42400315 	stw	r9,12(r8)
    455c:	4a000215 	stw	r8,8(r9)
    4560:	003fc606 	br	447c <_free_r+0x60>
    4564:	dfc00217 	ldw	ra,8(sp)
    4568:	dc400117 	ldw	r17,4(sp)
    456c:	dc000017 	ldw	r16,0(sp)
    4570:	dec00304 	addi	sp,sp,12
    4574:	f800283a 	ret
    4578:	1004d0fa 	srli	r2,r2,3
    457c:	02000044 	movi	r8,1
    4580:	29c00117 	ldw	r7,4(r5)
    4584:	1087883a 	add	r3,r2,r2
    4588:	18c7883a 	add	r3,r3,r3
    458c:	1005d0ba 	srai	r2,r2,2
    4590:	18c7883a 	add	r3,r3,r3
    4594:	28c7883a 	add	r3,r5,r3
    4598:	19000217 	ldw	r4,8(r3)
    459c:	4084983a 	sll	r2,r8,r2
    45a0:	30c00315 	stw	r3,12(r6)
    45a4:	31000215 	stw	r4,8(r6)
    45a8:	11c4b03a 	or	r2,r2,r7
    45ac:	21800315 	stw	r6,12(r4)
    45b0:	8809883a 	mov	r4,r17
    45b4:	28800115 	stw	r2,4(r5)
    45b8:	19800215 	stw	r6,8(r3)
    45bc:	dfc00217 	ldw	ra,8(sp)
    45c0:	dc400117 	ldw	r17,4(sp)
    45c4:	dc000017 	ldw	r16,0(sp)
    45c8:	dec00304 	addi	sp,sp,12
    45cc:	000a0901 	jmpi	a090 <__malloc_unlock>
    45d0:	02000074 	movhi	r8,1
    45d4:	4201de04 	addi	r8,r8,1912
    45d8:	3a3faf1e 	bne	r7,r8,4498 <_free_r+0x7c>
    45dc:	29800515 	stw	r6,20(r5)
    45e0:	29800415 	stw	r6,16(r5)
    45e4:	11000054 	ori	r4,r2,1
    45e8:	3087883a 	add	r3,r6,r2
    45ec:	31c00315 	stw	r7,12(r6)
    45f0:	31c00215 	stw	r7,8(r6)
    45f4:	31000115 	stw	r4,4(r6)
    45f8:	18800015 	stw	r2,0(r3)
    45fc:	003fc806 	br	4520 <_free_r+0x104>
    4600:	4200004c 	andi	r8,r8,1
    4604:	3885883a 	add	r2,r7,r2
    4608:	4000071e 	bne	r8,zero,4628 <_free_r+0x20c>
    460c:	81fffe17 	ldw	r7,-8(r16)
    4610:	31cdc83a 	sub	r6,r6,r7
    4614:	30c00317 	ldw	r3,12(r6)
    4618:	31000217 	ldw	r4,8(r6)
    461c:	11c5883a 	add	r2,r2,r7
    4620:	20c00315 	stw	r3,12(r4)
    4624:	19000215 	stw	r4,8(r3)
    4628:	00c00074 	movhi	r3,1
    462c:	18c76404 	addi	r3,r3,7568
    4630:	18c00017 	ldw	r3,0(r3)
    4634:	11000054 	ori	r4,r2,1
    4638:	31000115 	stw	r4,4(r6)
    463c:	29800215 	stw	r6,8(r5)
    4640:	10ffb736 	bltu	r2,r3,4520 <_free_r+0x104>
    4644:	00800074 	movhi	r2,1
    4648:	10877904 	addi	r2,r2,7652
    464c:	11400017 	ldw	r5,0(r2)
    4650:	8809883a 	mov	r4,r17
    4654:	00042e00 	call	42e0 <_malloc_trim_r>
    4658:	003fb106 	br	4520 <_free_r+0x104>
    465c:	01000044 	movi	r4,1
    4660:	003f8606 	br	447c <_free_r+0x60>
    4664:	01000504 	movi	r4,20
    4668:	20c00b36 	bltu	r4,r3,4698 <_free_r+0x27c>
    466c:	190016c4 	addi	r4,r3,91
    4670:	210f883a 	add	r7,r4,r4
    4674:	003f9806 	br	44d8 <_free_r+0xbc>
    4678:	2009d0ba 	srai	r4,r4,2
    467c:	00800044 	movi	r2,1
    4680:	29c00117 	ldw	r7,4(r5)
    4684:	1108983a 	sll	r4,r2,r4
    4688:	1805883a 	mov	r2,r3
    468c:	21c8b03a 	or	r4,r4,r7
    4690:	29000115 	stw	r4,4(r5)
    4694:	003f9e06 	br	4510 <_free_r+0xf4>
    4698:	01001504 	movi	r4,84
    469c:	20c00436 	bltu	r4,r3,46b0 <_free_r+0x294>
    46a0:	1008d33a 	srli	r4,r2,12
    46a4:	21001b84 	addi	r4,r4,110
    46a8:	210f883a 	add	r7,r4,r4
    46ac:	003f8a06 	br	44d8 <_free_r+0xbc>
    46b0:	01005504 	movi	r4,340
    46b4:	20c00436 	bltu	r4,r3,46c8 <_free_r+0x2ac>
    46b8:	1008d3fa 	srli	r4,r2,15
    46bc:	21001dc4 	addi	r4,r4,119
    46c0:	210f883a 	add	r7,r4,r4
    46c4:	003f8406 	br	44d8 <_free_r+0xbc>
    46c8:	01015504 	movi	r4,1364
    46cc:	20c00436 	bltu	r4,r3,46e0 <_free_r+0x2c4>
    46d0:	1008d4ba 	srli	r4,r2,18
    46d4:	21001f04 	addi	r4,r4,124
    46d8:	210f883a 	add	r7,r4,r4
    46dc:	003f7e06 	br	44d8 <_free_r+0xbc>
    46e0:	01c03f04 	movi	r7,252
    46e4:	01001f84 	movi	r4,126
    46e8:	003f7b06 	br	44d8 <_free_r+0xbc>

000046ec <__sfvwrite_r>:
    46ec:	30800217 	ldw	r2,8(r6)
    46f0:	defff504 	addi	sp,sp,-44
    46f4:	dd400615 	stw	r21,24(sp)
    46f8:	dd000515 	stw	r20,20(sp)
    46fc:	dc000115 	stw	r16,4(sp)
    4700:	dfc00a15 	stw	ra,40(sp)
    4704:	df000915 	stw	fp,36(sp)
    4708:	ddc00815 	stw	r23,32(sp)
    470c:	dd800715 	stw	r22,28(sp)
    4710:	dcc00415 	stw	r19,16(sp)
    4714:	dc800315 	stw	r18,12(sp)
    4718:	dc400215 	stw	r17,8(sp)
    471c:	3029883a 	mov	r20,r6
    4720:	202b883a 	mov	r21,r4
    4724:	2821883a 	mov	r16,r5
    4728:	10002126 	beq	r2,zero,47b0 <__sfvwrite_r+0xc4>
    472c:	2880030b 	ldhu	r2,12(r5)
    4730:	10c0020c 	andi	r3,r2,8
    4734:	18ffffcc 	andi	r3,r3,65535
    4738:	18e0001c 	xori	r3,r3,32768
    473c:	18e00004 	addi	r3,r3,-32768
    4740:	18002826 	beq	r3,zero,47e4 <__sfvwrite_r+0xf8>
    4744:	28c00417 	ldw	r3,16(r5)
    4748:	18002626 	beq	r3,zero,47e4 <__sfvwrite_r+0xf8>
    474c:	10c0008c 	andi	r3,r2,2
    4750:	18ffffcc 	andi	r3,r3,65535
    4754:	18e0001c 	xori	r3,r3,32768
    4758:	18e00004 	addi	r3,r3,-32768
    475c:	a4400017 	ldw	r17,0(r20)
    4760:	18002b26 	beq	r3,zero,4810 <__sfvwrite_r+0x124>
    4764:	0027883a 	mov	r19,zero
    4768:	0025883a 	mov	r18,zero
    476c:	05810004 	movi	r22,1024
    4770:	980d883a 	mov	r6,r19
    4774:	a809883a 	mov	r4,r21
    4778:	90004f26 	beq	r18,zero,48b8 <__sfvwrite_r+0x1cc>
    477c:	900f883a 	mov	r7,r18
    4780:	81400717 	ldw	r5,28(r16)
    4784:	b480012e 	bgeu	r22,r18,478c <__sfvwrite_r+0xa0>
    4788:	01c10004 	movi	r7,1024
    478c:	80800917 	ldw	r2,36(r16)
    4790:	103ee83a 	callr	r2
    4794:	0080540e 	bge	zero,r2,48e8 <__sfvwrite_r+0x1fc>
    4798:	a0c00217 	ldw	r3,8(r20)
    479c:	98a7883a 	add	r19,r19,r2
    47a0:	90a5c83a 	sub	r18,r18,r2
    47a4:	1885c83a 	sub	r2,r3,r2
    47a8:	a0800215 	stw	r2,8(r20)
    47ac:	103ff01e 	bne	r2,zero,4770 <__sfvwrite_r+0x84>
    47b0:	0005883a 	mov	r2,zero
    47b4:	dfc00a17 	ldw	ra,40(sp)
    47b8:	df000917 	ldw	fp,36(sp)
    47bc:	ddc00817 	ldw	r23,32(sp)
    47c0:	dd800717 	ldw	r22,28(sp)
    47c4:	dd400617 	ldw	r21,24(sp)
    47c8:	dd000517 	ldw	r20,20(sp)
    47cc:	dcc00417 	ldw	r19,16(sp)
    47d0:	dc800317 	ldw	r18,12(sp)
    47d4:	dc400217 	ldw	r17,8(sp)
    47d8:	dc000117 	ldw	r16,4(sp)
    47dc:	dec00b04 	addi	sp,sp,44
    47e0:	f800283a 	ret
    47e4:	a809883a 	mov	r4,r21
    47e8:	800b883a 	mov	r5,r16
    47ec:	00024100 	call	2410 <__swsetup_r>
    47f0:	1000f01e 	bne	r2,zero,4bb4 <__sfvwrite_r+0x4c8>
    47f4:	8080030b 	ldhu	r2,12(r16)
    47f8:	a4400017 	ldw	r17,0(r20)
    47fc:	10c0008c 	andi	r3,r2,2
    4800:	18ffffcc 	andi	r3,r3,65535
    4804:	18e0001c 	xori	r3,r3,32768
    4808:	18e00004 	addi	r3,r3,-32768
    480c:	183fd51e 	bne	r3,zero,4764 <__sfvwrite_r+0x78>
    4810:	10c0004c 	andi	r3,r2,1
    4814:	002d883a 	mov	r22,zero
    4818:	1800381e 	bne	r3,zero,48fc <__sfvwrite_r+0x210>
    481c:	0025883a 	mov	r18,zero
    4820:	90002126 	beq	r18,zero,48a8 <__sfvwrite_r+0x1bc>
    4824:	10c0800c 	andi	r3,r2,512
    4828:	18ffffcc 	andi	r3,r3,65535
    482c:	18e0001c 	xori	r3,r3,32768
    4830:	18e00004 	addi	r3,r3,-32768
    4834:	84c00217 	ldw	r19,8(r16)
    4838:	18006b26 	beq	r3,zero,49e8 <__sfvwrite_r+0x2fc>
    483c:	980f883a 	mov	r7,r19
    4840:	94c08636 	bltu	r18,r19,4a5c <__sfvwrite_r+0x370>
    4844:	10c1200c 	andi	r3,r2,1152
    4848:	18009f1e 	bne	r3,zero,4ac8 <__sfvwrite_r+0x3dc>
    484c:	81000017 	ldw	r4,0(r16)
    4850:	982f883a 	mov	r23,r19
    4854:	9039883a 	mov	fp,r18
    4858:	9027883a 	mov	r19,r18
    485c:	380d883a 	mov	r6,r7
    4860:	b00b883a 	mov	r5,r22
    4864:	d9c00015 	stw	r7,0(sp)
    4868:	00059700 	call	5970 <memmove>
    486c:	d9c00017 	ldw	r7,0(sp)
    4870:	81000217 	ldw	r4,8(r16)
    4874:	80800017 	ldw	r2,0(r16)
    4878:	25efc83a 	sub	r23,r4,r23
    487c:	11cf883a 	add	r7,r2,r7
    4880:	85c00215 	stw	r23,8(r16)
    4884:	81c00015 	stw	r7,0(r16)
    4888:	a0800217 	ldw	r2,8(r20)
    488c:	b72d883a 	add	r22,r22,fp
    4890:	9725c83a 	sub	r18,r18,fp
    4894:	14e7c83a 	sub	r19,r2,r19
    4898:	a4c00215 	stw	r19,8(r20)
    489c:	983fc426 	beq	r19,zero,47b0 <__sfvwrite_r+0xc4>
    48a0:	8080030b 	ldhu	r2,12(r16)
    48a4:	903fdf1e 	bne	r18,zero,4824 <__sfvwrite_r+0x138>
    48a8:	8d800017 	ldw	r22,0(r17)
    48ac:	8c800117 	ldw	r18,4(r17)
    48b0:	8c400204 	addi	r17,r17,8
    48b4:	003fda06 	br	4820 <__sfvwrite_r+0x134>
    48b8:	8cc00017 	ldw	r19,0(r17)
    48bc:	8c800117 	ldw	r18,4(r17)
    48c0:	8c400204 	addi	r17,r17,8
    48c4:	003faa06 	br	4770 <__sfvwrite_r+0x84>
    48c8:	0006c280 	call	6c28 <_realloc_r>
    48cc:	102f883a 	mov	r23,r2
    48d0:	10009f1e 	bne	r2,zero,4b50 <__sfvwrite_r+0x464>
    48d4:	81400417 	ldw	r5,16(r16)
    48d8:	a809883a 	mov	r4,r21
    48dc:	000441c0 	call	441c <_free_r>
    48e0:	00800304 	movi	r2,12
    48e4:	a8800015 	stw	r2,0(r21)
    48e8:	80c0030b 	ldhu	r3,12(r16)
    48ec:	00bfffc4 	movi	r2,-1
    48f0:	18c01014 	ori	r3,r3,64
    48f4:	80c0030d 	sth	r3,12(r16)
    48f8:	003fae06 	br	47b4 <__sfvwrite_r+0xc8>
    48fc:	0007883a 	mov	r3,zero
    4900:	0039883a 	mov	fp,zero
    4904:	0025883a 	mov	r18,zero
    4908:	90001e26 	beq	r18,zero,4984 <__sfvwrite_r+0x298>
    490c:	18006526 	beq	r3,zero,4aa4 <__sfvwrite_r+0x3b8>
    4910:	b02f883a 	mov	r23,r22
    4914:	9580012e 	bgeu	r18,r22,491c <__sfvwrite_r+0x230>
    4918:	902f883a 	mov	r23,r18
    491c:	81000017 	ldw	r4,0(r16)
    4920:	80800417 	ldw	r2,16(r16)
    4924:	84c00217 	ldw	r19,8(r16)
    4928:	81c00517 	ldw	r7,20(r16)
    492c:	1100022e 	bgeu	r2,r4,4938 <__sfvwrite_r+0x24c>
    4930:	99e7883a 	add	r19,r19,r7
    4934:	9dc01816 	blt	r19,r23,4998 <__sfvwrite_r+0x2ac>
    4938:	b9c03b16 	blt	r23,r7,4a28 <__sfvwrite_r+0x33c>
    493c:	80800917 	ldw	r2,36(r16)
    4940:	81400717 	ldw	r5,28(r16)
    4944:	a809883a 	mov	r4,r21
    4948:	d8c00015 	stw	r3,0(sp)
    494c:	e00d883a 	mov	r6,fp
    4950:	103ee83a 	callr	r2
    4954:	1027883a 	mov	r19,r2
    4958:	d8c00017 	ldw	r3,0(sp)
    495c:	00bfe20e 	bge	zero,r2,48e8 <__sfvwrite_r+0x1fc>
    4960:	b4edc83a 	sub	r22,r22,r19
    4964:	b0001a26 	beq	r22,zero,49d0 <__sfvwrite_r+0x2e4>
    4968:	a0800217 	ldw	r2,8(r20)
    496c:	e4f9883a 	add	fp,fp,r19
    4970:	94e5c83a 	sub	r18,r18,r19
    4974:	14e7c83a 	sub	r19,r2,r19
    4978:	a4c00215 	stw	r19,8(r20)
    497c:	983f8c26 	beq	r19,zero,47b0 <__sfvwrite_r+0xc4>
    4980:	903fe21e 	bne	r18,zero,490c <__sfvwrite_r+0x220>
    4984:	8f000017 	ldw	fp,0(r17)
    4988:	8c800117 	ldw	r18,4(r17)
    498c:	0007883a 	mov	r3,zero
    4990:	8c400204 	addi	r17,r17,8
    4994:	003fdc06 	br	4908 <__sfvwrite_r+0x21c>
    4998:	e00b883a 	mov	r5,fp
    499c:	980d883a 	mov	r6,r19
    49a0:	d8c00015 	stw	r3,0(sp)
    49a4:	00059700 	call	5970 <memmove>
    49a8:	80800017 	ldw	r2,0(r16)
    49ac:	a809883a 	mov	r4,r21
    49b0:	800b883a 	mov	r5,r16
    49b4:	14c5883a 	add	r2,r2,r19
    49b8:	80800015 	stw	r2,0(r16)
    49bc:	0003ddc0 	call	3ddc <_fflush_r>
    49c0:	d8c00017 	ldw	r3,0(sp)
    49c4:	103fc81e 	bne	r2,zero,48e8 <__sfvwrite_r+0x1fc>
    49c8:	b4edc83a 	sub	r22,r22,r19
    49cc:	b03fe61e 	bne	r22,zero,4968 <__sfvwrite_r+0x27c>
    49d0:	a809883a 	mov	r4,r21
    49d4:	800b883a 	mov	r5,r16
    49d8:	0003ddc0 	call	3ddc <_fflush_r>
    49dc:	103fc21e 	bne	r2,zero,48e8 <__sfvwrite_r+0x1fc>
    49e0:	0007883a 	mov	r3,zero
    49e4:	003fe006 	br	4968 <__sfvwrite_r+0x27c>
    49e8:	81000017 	ldw	r4,0(r16)
    49ec:	80800417 	ldw	r2,16(r16)
    49f0:	1100022e 	bgeu	r2,r4,49fc <__sfvwrite_r+0x310>
    49f4:	9839883a 	mov	fp,r19
    49f8:	9c806036 	bltu	r19,r18,4b7c <__sfvwrite_r+0x490>
    49fc:	81c00517 	ldw	r7,20(r16)
    4a00:	91c01c36 	bltu	r18,r7,4a74 <__sfvwrite_r+0x388>
    4a04:	80800917 	ldw	r2,36(r16)
    4a08:	81400717 	ldw	r5,28(r16)
    4a0c:	a809883a 	mov	r4,r21
    4a10:	b00d883a 	mov	r6,r22
    4a14:	103ee83a 	callr	r2
    4a18:	1027883a 	mov	r19,r2
    4a1c:	00bfb20e 	bge	zero,r2,48e8 <__sfvwrite_r+0x1fc>
    4a20:	1039883a 	mov	fp,r2
    4a24:	003f9806 	br	4888 <__sfvwrite_r+0x19c>
    4a28:	b80d883a 	mov	r6,r23
    4a2c:	e00b883a 	mov	r5,fp
    4a30:	d8c00015 	stw	r3,0(sp)
    4a34:	00059700 	call	5970 <memmove>
    4a38:	80800217 	ldw	r2,8(r16)
    4a3c:	81000017 	ldw	r4,0(r16)
    4a40:	b827883a 	mov	r19,r23
    4a44:	15c5c83a 	sub	r2,r2,r23
    4a48:	25ef883a 	add	r23,r4,r23
    4a4c:	80800215 	stw	r2,8(r16)
    4a50:	85c00015 	stw	r23,0(r16)
    4a54:	d8c00017 	ldw	r3,0(sp)
    4a58:	003fc106 	br	4960 <__sfvwrite_r+0x274>
    4a5c:	81000017 	ldw	r4,0(r16)
    4a60:	902f883a 	mov	r23,r18
    4a64:	9039883a 	mov	fp,r18
    4a68:	9027883a 	mov	r19,r18
    4a6c:	900f883a 	mov	r7,r18
    4a70:	003f7a06 	br	485c <__sfvwrite_r+0x170>
    4a74:	b00b883a 	mov	r5,r22
    4a78:	900d883a 	mov	r6,r18
    4a7c:	00059700 	call	5970 <memmove>
    4a80:	80c00217 	ldw	r3,8(r16)
    4a84:	80800017 	ldw	r2,0(r16)
    4a88:	9027883a 	mov	r19,r18
    4a8c:	1c87c83a 	sub	r3,r3,r18
    4a90:	1485883a 	add	r2,r2,r18
    4a94:	80c00215 	stw	r3,8(r16)
    4a98:	80800015 	stw	r2,0(r16)
    4a9c:	9039883a 	mov	fp,r18
    4aa0:	003f7906 	br	4888 <__sfvwrite_r+0x19c>
    4aa4:	e009883a 	mov	r4,fp
    4aa8:	01400284 	movi	r5,10
    4aac:	900d883a 	mov	r6,r18
    4ab0:	00057380 	call	5738 <memchr>
    4ab4:	10003c26 	beq	r2,zero,4ba8 <__sfvwrite_r+0x4bc>
    4ab8:	15800044 	addi	r22,r2,1
    4abc:	b72dc83a 	sub	r22,r22,fp
    4ac0:	00c00044 	movi	r3,1
    4ac4:	003f9206 	br	4910 <__sfvwrite_r+0x224>
    4ac8:	81000517 	ldw	r4,20(r16)
    4acc:	81400417 	ldw	r5,16(r16)
    4ad0:	80c00017 	ldw	r3,0(r16)
    4ad4:	210d883a 	add	r6,r4,r4
    4ad8:	3109883a 	add	r4,r6,r4
    4adc:	2026d7fa 	srli	r19,r4,31
    4ae0:	1979c83a 	sub	fp,r3,r5
    4ae4:	e1800044 	addi	r6,fp,1
    4ae8:	9909883a 	add	r4,r19,r4
    4aec:	2027d07a 	srai	r19,r4,1
    4af0:	3489883a 	add	r4,r6,r18
    4af4:	980d883a 	mov	r6,r19
    4af8:	9900022e 	bgeu	r19,r4,4b04 <__sfvwrite_r+0x418>
    4afc:	2027883a 	mov	r19,r4
    4b00:	200d883a 	mov	r6,r4
    4b04:	1081000c 	andi	r2,r2,1024
    4b08:	10bfffcc 	andi	r2,r2,65535
    4b0c:	10a0001c 	xori	r2,r2,32768
    4b10:	10a00004 	addi	r2,r2,-32768
    4b14:	a809883a 	mov	r4,r21
    4b18:	103f6b26 	beq	r2,zero,48c8 <__sfvwrite_r+0x1dc>
    4b1c:	300b883a 	mov	r5,r6
    4b20:	0004fb40 	call	4fb4 <_malloc_r>
    4b24:	102f883a 	mov	r23,r2
    4b28:	103f6d26 	beq	r2,zero,48e0 <__sfvwrite_r+0x1f4>
    4b2c:	81400417 	ldw	r5,16(r16)
    4b30:	1009883a 	mov	r4,r2
    4b34:	e00d883a 	mov	r6,fp
    4b38:	00058300 	call	5830 <memcpy>
    4b3c:	8080030b 	ldhu	r2,12(r16)
    4b40:	00fedfc4 	movi	r3,-1153
    4b44:	10c4703a 	and	r2,r2,r3
    4b48:	10802014 	ori	r2,r2,128
    4b4c:	8080030d 	sth	r2,12(r16)
    4b50:	bf09883a 	add	r4,r23,fp
    4b54:	9f07c83a 	sub	r3,r19,fp
    4b58:	85c00415 	stw	r23,16(r16)
    4b5c:	84c00515 	stw	r19,20(r16)
    4b60:	81000015 	stw	r4,0(r16)
    4b64:	902f883a 	mov	r23,r18
    4b68:	80c00215 	stw	r3,8(r16)
    4b6c:	9039883a 	mov	fp,r18
    4b70:	9027883a 	mov	r19,r18
    4b74:	900f883a 	mov	r7,r18
    4b78:	003f3806 	br	485c <__sfvwrite_r+0x170>
    4b7c:	b00b883a 	mov	r5,r22
    4b80:	980d883a 	mov	r6,r19
    4b84:	00059700 	call	5970 <memmove>
    4b88:	80800017 	ldw	r2,0(r16)
    4b8c:	a809883a 	mov	r4,r21
    4b90:	800b883a 	mov	r5,r16
    4b94:	14c5883a 	add	r2,r2,r19
    4b98:	80800015 	stw	r2,0(r16)
    4b9c:	0003ddc0 	call	3ddc <_fflush_r>
    4ba0:	103f3926 	beq	r2,zero,4888 <__sfvwrite_r+0x19c>
    4ba4:	003f5006 	br	48e8 <__sfvwrite_r+0x1fc>
    4ba8:	95800044 	addi	r22,r18,1
    4bac:	00c00044 	movi	r3,1
    4bb0:	003f5706 	br	4910 <__sfvwrite_r+0x224>
    4bb4:	80c0030b 	ldhu	r3,12(r16)
    4bb8:	00bfffc4 	movi	r2,-1
    4bbc:	18c01014 	ori	r3,r3,64
    4bc0:	80c0030d 	sth	r3,12(r16)
    4bc4:	00c00244 	movi	r3,9
    4bc8:	a8c00015 	stw	r3,0(r21)
    4bcc:	003ef906 	br	47b4 <__sfvwrite_r+0xc8>

00004bd0 <_fwalk>:
    4bd0:	defff904 	addi	sp,sp,-28
    4bd4:	dcc00315 	stw	r19,12(sp)
    4bd8:	24c0b804 	addi	r19,r4,736
    4bdc:	dd400515 	stw	r21,20(sp)
    4be0:	dd000415 	stw	r20,16(sp)
    4be4:	dfc00615 	stw	ra,24(sp)
    4be8:	dc800215 	stw	r18,8(sp)
    4bec:	dc400115 	stw	r17,4(sp)
    4bf0:	dc000015 	stw	r16,0(sp)
    4bf4:	282b883a 	mov	r21,r5
    4bf8:	0029883a 	mov	r20,zero
    4bfc:	00042a00 	call	42a0 <__sfp_lock_acquire>
    4c00:	98001226 	beq	r19,zero,4c4c <_fwalk+0x7c>
    4c04:	04bfffc4 	movi	r18,-1
    4c08:	9c400117 	ldw	r17,4(r19)
    4c0c:	9c000217 	ldw	r16,8(r19)
    4c10:	8c7fffc4 	addi	r17,r17,-1
    4c14:	88000b16 	blt	r17,zero,4c44 <_fwalk+0x74>
    4c18:	84000304 	addi	r16,r16,12
    4c1c:	80c0000f 	ldh	r3,0(r16)
    4c20:	8c7fffc4 	addi	r17,r17,-1
    4c24:	813ffd04 	addi	r4,r16,-12
    4c28:	18000426 	beq	r3,zero,4c3c <_fwalk+0x6c>
    4c2c:	80c0008f 	ldh	r3,2(r16)
    4c30:	1c800226 	beq	r3,r18,4c3c <_fwalk+0x6c>
    4c34:	a83ee83a 	callr	r21
    4c38:	a0a8b03a 	or	r20,r20,r2
    4c3c:	84001704 	addi	r16,r16,92
    4c40:	8cbff61e 	bne	r17,r18,4c1c <_fwalk+0x4c>
    4c44:	9cc00017 	ldw	r19,0(r19)
    4c48:	983fef1e 	bne	r19,zero,4c08 <_fwalk+0x38>
    4c4c:	00042a40 	call	42a4 <__sfp_lock_release>
    4c50:	a005883a 	mov	r2,r20
    4c54:	dfc00617 	ldw	ra,24(sp)
    4c58:	dd400517 	ldw	r21,20(sp)
    4c5c:	dd000417 	ldw	r20,16(sp)
    4c60:	dcc00317 	ldw	r19,12(sp)
    4c64:	dc800217 	ldw	r18,8(sp)
    4c68:	dc400117 	ldw	r17,4(sp)
    4c6c:	dc000017 	ldw	r16,0(sp)
    4c70:	dec00704 	addi	sp,sp,28
    4c74:	f800283a 	ret

00004c78 <_fwalk_reent>:
    4c78:	defff804 	addi	sp,sp,-32
    4c7c:	dcc00315 	stw	r19,12(sp)
    4c80:	24c0b804 	addi	r19,r4,736
    4c84:	dd800615 	stw	r22,24(sp)
    4c88:	dd400515 	stw	r21,20(sp)
    4c8c:	dd000415 	stw	r20,16(sp)
    4c90:	dfc00715 	stw	ra,28(sp)
    4c94:	dc800215 	stw	r18,8(sp)
    4c98:	dc400115 	stw	r17,4(sp)
    4c9c:	dc000015 	stw	r16,0(sp)
    4ca0:	2029883a 	mov	r20,r4
    4ca4:	282b883a 	mov	r21,r5
    4ca8:	002d883a 	mov	r22,zero
    4cac:	00042a00 	call	42a0 <__sfp_lock_acquire>
    4cb0:	98001326 	beq	r19,zero,4d00 <_fwalk_reent+0x88>
    4cb4:	04bfffc4 	movi	r18,-1
    4cb8:	9c400117 	ldw	r17,4(r19)
    4cbc:	9c000217 	ldw	r16,8(r19)
    4cc0:	8c7fffc4 	addi	r17,r17,-1
    4cc4:	88000c16 	blt	r17,zero,4cf8 <_fwalk_reent+0x80>
    4cc8:	84000304 	addi	r16,r16,12
    4ccc:	80c0000f 	ldh	r3,0(r16)
    4cd0:	8c7fffc4 	addi	r17,r17,-1
    4cd4:	817ffd04 	addi	r5,r16,-12
    4cd8:	18000526 	beq	r3,zero,4cf0 <_fwalk_reent+0x78>
    4cdc:	80c0008f 	ldh	r3,2(r16)
    4ce0:	a009883a 	mov	r4,r20
    4ce4:	1c800226 	beq	r3,r18,4cf0 <_fwalk_reent+0x78>
    4ce8:	a83ee83a 	callr	r21
    4cec:	b0acb03a 	or	r22,r22,r2
    4cf0:	84001704 	addi	r16,r16,92
    4cf4:	8cbff51e 	bne	r17,r18,4ccc <_fwalk_reent+0x54>
    4cf8:	9cc00017 	ldw	r19,0(r19)
    4cfc:	983fee1e 	bne	r19,zero,4cb8 <_fwalk_reent+0x40>
    4d00:	00042a40 	call	42a4 <__sfp_lock_release>
    4d04:	b005883a 	mov	r2,r22
    4d08:	dfc00717 	ldw	ra,28(sp)
    4d0c:	dd800617 	ldw	r22,24(sp)
    4d10:	dd400517 	ldw	r21,20(sp)
    4d14:	dd000417 	ldw	r20,16(sp)
    4d18:	dcc00317 	ldw	r19,12(sp)
    4d1c:	dc800217 	ldw	r18,8(sp)
    4d20:	dc400117 	ldw	r17,4(sp)
    4d24:	dc000017 	ldw	r16,0(sp)
    4d28:	dec00804 	addi	sp,sp,32
    4d2c:	f800283a 	ret

00004d30 <_setlocale_r>:
    4d30:	defffc04 	addi	sp,sp,-16
    4d34:	dc800215 	stw	r18,8(sp)
    4d38:	dc400115 	stw	r17,4(sp)
    4d3c:	dc000015 	stw	r16,0(sp)
    4d40:	dfc00315 	stw	ra,12(sp)
    4d44:	3021883a 	mov	r16,r6
    4d48:	2023883a 	mov	r17,r4
    4d4c:	2825883a 	mov	r18,r5
    4d50:	30001626 	beq	r6,zero,4dac <_setlocale_r+0x7c>
    4d54:	3009883a 	mov	r4,r6
    4d58:	01400074 	movhi	r5,1
    4d5c:	29402d04 	addi	r5,r5,180
    4d60:	000742c0 	call	742c <strcmp>
    4d64:	10000a1e 	bne	r2,zero,4d90 <_setlocale_r+0x60>
    4d68:	8c800c15 	stw	r18,48(r17)
    4d6c:	8c000d15 	stw	r16,52(r17)
    4d70:	00800074 	movhi	r2,1
    4d74:	10802d04 	addi	r2,r2,180
    4d78:	dfc00317 	ldw	ra,12(sp)
    4d7c:	dc800217 	ldw	r18,8(sp)
    4d80:	dc400117 	ldw	r17,4(sp)
    4d84:	dc000017 	ldw	r16,0(sp)
    4d88:	dec00404 	addi	sp,sp,16
    4d8c:	f800283a 	ret
    4d90:	8009883a 	mov	r4,r16
    4d94:	01400074 	movhi	r5,1
    4d98:	29401804 	addi	r5,r5,96
    4d9c:	000742c0 	call	742c <strcmp>
    4da0:	103ff126 	beq	r2,zero,4d68 <_setlocale_r+0x38>
    4da4:	0005883a 	mov	r2,zero
    4da8:	003ff306 	br	4d78 <_setlocale_r+0x48>
    4dac:	00800074 	movhi	r2,1
    4db0:	10802d04 	addi	r2,r2,180
    4db4:	dfc00317 	ldw	ra,12(sp)
    4db8:	dc800217 	ldw	r18,8(sp)
    4dbc:	dc400117 	ldw	r17,4(sp)
    4dc0:	dc000017 	ldw	r16,0(sp)
    4dc4:	dec00404 	addi	sp,sp,16
    4dc8:	f800283a 	ret

00004dcc <__locale_charset>:
    4dcc:	00800074 	movhi	r2,1
    4dd0:	10802e04 	addi	r2,r2,184
    4dd4:	f800283a 	ret

00004dd8 <_localeconv_r>:
    4dd8:	00800074 	movhi	r2,1
    4ddc:	10803204 	addi	r2,r2,200
    4de0:	f800283a 	ret

00004de4 <setlocale>:
    4de4:	00c00074 	movhi	r3,1
    4de8:	18c76104 	addi	r3,r3,7556
    4dec:	2005883a 	mov	r2,r4
    4df0:	19000017 	ldw	r4,0(r3)
    4df4:	280d883a 	mov	r6,r5
    4df8:	100b883a 	mov	r5,r2
    4dfc:	0004d301 	jmpi	4d30 <_setlocale_r>

00004e00 <localeconv>:
    4e00:	00800074 	movhi	r2,1
    4e04:	10803204 	addi	r2,r2,200
    4e08:	f800283a 	ret

00004e0c <__smakebuf_r>:
    4e0c:	2880030b 	ldhu	r2,12(r5)
    4e10:	deffed04 	addi	sp,sp,-76
    4e14:	dc401015 	stw	r17,64(sp)
    4e18:	10c0008c 	andi	r3,r2,2
    4e1c:	18ffffcc 	andi	r3,r3,65535
    4e20:	18e0001c 	xori	r3,r3,32768
    4e24:	dc000f15 	stw	r16,60(sp)
    4e28:	dfc01215 	stw	ra,72(sp)
    4e2c:	dc801115 	stw	r18,68(sp)
    4e30:	18e00004 	addi	r3,r3,-32768
    4e34:	2821883a 	mov	r16,r5
    4e38:	2023883a 	mov	r17,r4
    4e3c:	1800381e 	bne	r3,zero,4f20 <__smakebuf_r+0x114>
    4e40:	2940038f 	ldh	r5,14(r5)
    4e44:	28002d16 	blt	r5,zero,4efc <__smakebuf_r+0xf0>
    4e48:	d80d883a 	mov	r6,sp
    4e4c:	00077bc0 	call	77bc <_fstat_r>
    4e50:	10002916 	blt	r2,zero,4ef8 <__smakebuf_r+0xec>
    4e54:	d8800117 	ldw	r2,4(sp)
    4e58:	00e00014 	movui	r3,32768
    4e5c:	10bc000c 	andi	r2,r2,61440
    4e60:	10c03c26 	beq	r2,r3,4f54 <__smakebuf_r+0x148>
    4e64:	80c0030b 	ldhu	r3,12(r16)
    4e68:	18c20014 	ori	r3,r3,2048
    4e6c:	80c0030d 	sth	r3,12(r16)
    4e70:	00c80004 	movi	r3,8192
    4e74:	10c00c1e 	bne	r2,r3,4ea8 <__smakebuf_r+0x9c>
    4e78:	8140038f 	ldh	r5,14(r16)
    4e7c:	8809883a 	mov	r4,r17
    4e80:	00078240 	call	7824 <_isatty_r>
    4e84:	10000826 	beq	r2,zero,4ea8 <__smakebuf_r+0x9c>
    4e88:	80c0030b 	ldhu	r3,12(r16)
    4e8c:	808010c4 	addi	r2,r16,67
    4e90:	80800015 	stw	r2,0(r16)
    4e94:	18c00054 	ori	r3,r3,1
    4e98:	80800415 	stw	r2,16(r16)
    4e9c:	00800044 	movi	r2,1
    4ea0:	80c0030d 	sth	r3,12(r16)
    4ea4:	80800515 	stw	r2,20(r16)
    4ea8:	04810004 	movi	r18,1024
    4eac:	8809883a 	mov	r4,r17
    4eb0:	900b883a 	mov	r5,r18
    4eb4:	0004fb40 	call	4fb4 <_malloc_r>
    4eb8:	10003026 	beq	r2,zero,4f7c <__smakebuf_r+0x170>
    4ebc:	80c0030b 	ldhu	r3,12(r16)
    4ec0:	01000034 	movhi	r4,0
    4ec4:	21100104 	addi	r4,r4,16388
    4ec8:	89000f15 	stw	r4,60(r17)
    4ecc:	18c02014 	ori	r3,r3,128
    4ed0:	80c0030d 	sth	r3,12(r16)
    4ed4:	80800015 	stw	r2,0(r16)
    4ed8:	80800415 	stw	r2,16(r16)
    4edc:	84800515 	stw	r18,20(r16)
    4ee0:	dfc01217 	ldw	ra,72(sp)
    4ee4:	dc801117 	ldw	r18,68(sp)
    4ee8:	dc401017 	ldw	r17,64(sp)
    4eec:	dc000f17 	ldw	r16,60(sp)
    4ef0:	dec01304 	addi	sp,sp,76
    4ef4:	f800283a 	ret
    4ef8:	8080030b 	ldhu	r2,12(r16)
    4efc:	10c0200c 	andi	r3,r2,128
    4f00:	18ffffcc 	andi	r3,r3,65535
    4f04:	18e0001c 	xori	r3,r3,32768
    4f08:	18e00004 	addi	r3,r3,-32768
    4f0c:	18000f1e 	bne	r3,zero,4f4c <__smakebuf_r+0x140>
    4f10:	04810004 	movi	r18,1024
    4f14:	10820014 	ori	r2,r2,2048
    4f18:	8080030d 	sth	r2,12(r16)
    4f1c:	003fe306 	br	4eac <__smakebuf_r+0xa0>
    4f20:	288010c4 	addi	r2,r5,67
    4f24:	28800015 	stw	r2,0(r5)
    4f28:	28800415 	stw	r2,16(r5)
    4f2c:	00800044 	movi	r2,1
    4f30:	28800515 	stw	r2,20(r5)
    4f34:	dfc01217 	ldw	ra,72(sp)
    4f38:	dc801117 	ldw	r18,68(sp)
    4f3c:	dc401017 	ldw	r17,64(sp)
    4f40:	dc000f17 	ldw	r16,60(sp)
    4f44:	dec01304 	addi	sp,sp,76
    4f48:	f800283a 	ret
    4f4c:	04801004 	movi	r18,64
    4f50:	003ff006 	br	4f14 <__smakebuf_r+0x108>
    4f54:	81000a17 	ldw	r4,40(r16)
    4f58:	00c00034 	movhi	r3,0
    4f5c:	18dcf204 	addi	r3,r3,29640
    4f60:	20ffc01e 	bne	r4,r3,4e64 <__smakebuf_r+0x58>
    4f64:	8080030b 	ldhu	r2,12(r16)
    4f68:	00c10004 	movi	r3,1024
    4f6c:	80c01315 	stw	r3,76(r16)
    4f70:	10c4b03a 	or	r2,r2,r3
    4f74:	8080030d 	sth	r2,12(r16)
    4f78:	003fcb06 	br	4ea8 <__smakebuf_r+0x9c>
    4f7c:	8080030b 	ldhu	r2,12(r16)
    4f80:	10c0800c 	andi	r3,r2,512
    4f84:	18ffffcc 	andi	r3,r3,65535
    4f88:	18e0001c 	xori	r3,r3,32768
    4f8c:	18e00004 	addi	r3,r3,-32768
    4f90:	183fd31e 	bne	r3,zero,4ee0 <__smakebuf_r+0xd4>
    4f94:	10800094 	ori	r2,r2,2
    4f98:	80c010c4 	addi	r3,r16,67
    4f9c:	8080030d 	sth	r2,12(r16)
    4fa0:	00800044 	movi	r2,1
    4fa4:	80c00015 	stw	r3,0(r16)
    4fa8:	80c00415 	stw	r3,16(r16)
    4fac:	80800515 	stw	r2,20(r16)
    4fb0:	003fcb06 	br	4ee0 <__smakebuf_r+0xd4>

00004fb4 <_malloc_r>:
    4fb4:	defff604 	addi	sp,sp,-40
    4fb8:	dc800215 	stw	r18,8(sp)
    4fbc:	dfc00915 	stw	ra,36(sp)
    4fc0:	df000815 	stw	fp,32(sp)
    4fc4:	ddc00715 	stw	r23,28(sp)
    4fc8:	dd800615 	stw	r22,24(sp)
    4fcc:	dd400515 	stw	r21,20(sp)
    4fd0:	dd000415 	stw	r20,16(sp)
    4fd4:	dcc00315 	stw	r19,12(sp)
    4fd8:	dc400115 	stw	r17,4(sp)
    4fdc:	dc000015 	stw	r16,0(sp)
    4fe0:	288002c4 	addi	r2,r5,11
    4fe4:	00c00584 	movi	r3,22
    4fe8:	2025883a 	mov	r18,r4
    4fec:	18802b2e 	bgeu	r3,r2,509c <_malloc_r+0xe8>
    4ff0:	047ffe04 	movi	r17,-8
    4ff4:	1462703a 	and	r17,r2,r17
    4ff8:	88002a16 	blt	r17,zero,50a4 <_malloc_r+0xf0>
    4ffc:	89402936 	bltu	r17,r5,50a4 <_malloc_r+0xf0>
    5000:	9009883a 	mov	r4,r18
    5004:	000a0700 	call	a070 <__malloc_lock>
    5008:	00807dc4 	movi	r2,503
    500c:	14402936 	bltu	r2,r17,50b4 <_malloc_r+0x100>
    5010:	8808d0fa 	srli	r4,r17,3
    5014:	04c00074 	movhi	r19,1
    5018:	9cc1dc04 	addi	r19,r19,1904
    501c:	2105883a 	add	r2,r4,r4
    5020:	1085883a 	add	r2,r2,r2
    5024:	1085883a 	add	r2,r2,r2
    5028:	9885883a 	add	r2,r19,r2
    502c:	14000317 	ldw	r16,12(r2)
    5030:	80815526 	beq	r16,r2,5588 <_malloc_r+0x5d4>
    5034:	81000117 	ldw	r4,4(r16)
    5038:	00bfff04 	movi	r2,-4
    503c:	80c00317 	ldw	r3,12(r16)
    5040:	2084703a 	and	r2,r4,r2
    5044:	8085883a 	add	r2,r16,r2
    5048:	11800117 	ldw	r6,4(r2)
    504c:	81400217 	ldw	r5,8(r16)
    5050:	9009883a 	mov	r4,r18
    5054:	31800054 	ori	r6,r6,1
    5058:	11800115 	stw	r6,4(r2)
    505c:	28c00315 	stw	r3,12(r5)
    5060:	19400215 	stw	r5,8(r3)
    5064:	000a0900 	call	a090 <__malloc_unlock>
    5068:	80800204 	addi	r2,r16,8
    506c:	dfc00917 	ldw	ra,36(sp)
    5070:	df000817 	ldw	fp,32(sp)
    5074:	ddc00717 	ldw	r23,28(sp)
    5078:	dd800617 	ldw	r22,24(sp)
    507c:	dd400517 	ldw	r21,20(sp)
    5080:	dd000417 	ldw	r20,16(sp)
    5084:	dcc00317 	ldw	r19,12(sp)
    5088:	dc800217 	ldw	r18,8(sp)
    508c:	dc400117 	ldw	r17,4(sp)
    5090:	dc000017 	ldw	r16,0(sp)
    5094:	dec00a04 	addi	sp,sp,40
    5098:	f800283a 	ret
    509c:	04400404 	movi	r17,16
    50a0:	897fd72e 	bgeu	r17,r5,5000 <_malloc_r+0x4c>
    50a4:	00800304 	movi	r2,12
    50a8:	90800015 	stw	r2,0(r18)
    50ac:	0005883a 	mov	r2,zero
    50b0:	003fee06 	br	506c <_malloc_r+0xb8>
    50b4:	8808d27a 	srli	r4,r17,9
    50b8:	20007126 	beq	r4,zero,5280 <_malloc_r+0x2cc>
    50bc:	00800104 	movi	r2,4
    50c0:	1100eb36 	bltu	r2,r4,5470 <_malloc_r+0x4bc>
    50c4:	8808d1ba 	srli	r4,r17,6
    50c8:	21000e04 	addi	r4,r4,56
    50cc:	210b883a 	add	r5,r4,r4
    50d0:	294b883a 	add	r5,r5,r5
    50d4:	294b883a 	add	r5,r5,r5
    50d8:	04c00074 	movhi	r19,1
    50dc:	9cc1dc04 	addi	r19,r19,1904
    50e0:	994b883a 	add	r5,r19,r5
    50e4:	2c000317 	ldw	r16,12(r5)
    50e8:	2c000e26 	beq	r5,r16,5124 <_malloc_r+0x170>
    50ec:	80c00117 	ldw	r3,4(r16)
    50f0:	01ffff04 	movi	r7,-4
    50f4:	018003c4 	movi	r6,15
    50f8:	19c6703a 	and	r3,r3,r7
    50fc:	1c45c83a 	sub	r2,r3,r17
    5100:	30800716 	blt	r6,r2,5120 <_malloc_r+0x16c>
    5104:	1000610e 	bge	r2,zero,528c <_malloc_r+0x2d8>
    5108:	84000317 	ldw	r16,12(r16)
    510c:	2c000526 	beq	r5,r16,5124 <_malloc_r+0x170>
    5110:	80c00117 	ldw	r3,4(r16)
    5114:	19c6703a 	and	r3,r3,r7
    5118:	1c45c83a 	sub	r2,r3,r17
    511c:	30bff90e 	bge	r6,r2,5104 <_malloc_r+0x150>
    5120:	213fffc4 	addi	r4,r4,-1
    5124:	21000044 	addi	r4,r4,1
    5128:	9c000417 	ldw	r16,16(r19)
    512c:	00c00074 	movhi	r3,1
    5130:	18c1dc04 	addi	r3,r3,1904
    5134:	1a400204 	addi	r9,r3,8
    5138:	8240ff26 	beq	r16,r9,5538 <_malloc_r+0x584>
    513c:	81400117 	ldw	r5,4(r16)
    5140:	00bfff04 	movi	r2,-4
    5144:	018003c4 	movi	r6,15
    5148:	2884703a 	and	r2,r5,r2
    514c:	144bc83a 	sub	r5,r2,r17
    5150:	3140ea16 	blt	r6,r5,54fc <_malloc_r+0x548>
    5154:	1a400515 	stw	r9,20(r3)
    5158:	1a400415 	stw	r9,16(r3)
    515c:	2800570e 	bge	r5,zero,52bc <_malloc_r+0x308>
    5160:	01407fc4 	movi	r5,511
    5164:	2880ca36 	bltu	r5,r2,5490 <_malloc_r+0x4dc>
    5168:	1004d0fa 	srli	r2,r2,3
    516c:	02000044 	movi	r8,1
    5170:	19c00117 	ldw	r7,4(r3)
    5174:	108b883a 	add	r5,r2,r2
    5178:	294b883a 	add	r5,r5,r5
    517c:	1005d0ba 	srai	r2,r2,2
    5180:	294b883a 	add	r5,r5,r5
    5184:	28cb883a 	add	r5,r5,r3
    5188:	29800217 	ldw	r6,8(r5)
    518c:	4084983a 	sll	r2,r8,r2
    5190:	81400315 	stw	r5,12(r16)
    5194:	81800215 	stw	r6,8(r16)
    5198:	11c4b03a 	or	r2,r2,r7
    519c:	18800115 	stw	r2,4(r3)
    51a0:	2c000215 	stw	r16,8(r5)
    51a4:	34000315 	stw	r16,12(r6)
    51a8:	200bd0ba 	srai	r5,r4,2
    51ac:	00c00044 	movi	r3,1
    51b0:	194a983a 	sll	r5,r3,r5
    51b4:	11404936 	bltu	r2,r5,52dc <_malloc_r+0x328>
    51b8:	1146703a 	and	r3,r2,r5
    51bc:	18000a1e 	bne	r3,zero,51e8 <_malloc_r+0x234>
    51c0:	00ffff04 	movi	r3,-4
    51c4:	294b883a 	add	r5,r5,r5
    51c8:	20c8703a 	and	r4,r4,r3
    51cc:	1146703a 	and	r3,r2,r5
    51d0:	21000104 	addi	r4,r4,4
    51d4:	1800041e 	bne	r3,zero,51e8 <_malloc_r+0x234>
    51d8:	294b883a 	add	r5,r5,r5
    51dc:	1146703a 	and	r3,r2,r5
    51e0:	21000104 	addi	r4,r4,4
    51e4:	183ffc26 	beq	r3,zero,51d8 <_malloc_r+0x224>
    51e8:	023fff04 	movi	r8,-4
    51ec:	01c003c4 	movi	r7,15
    51f0:	2105883a 	add	r2,r4,r4
    51f4:	1085883a 	add	r2,r2,r2
    51f8:	1085883a 	add	r2,r2,r2
    51fc:	9899883a 	add	r12,r19,r2
    5200:	62800304 	addi	r10,r12,12
    5204:	2017883a 	mov	r11,r4
    5208:	54000017 	ldw	r16,0(r10)
    520c:	51bffd04 	addi	r6,r10,-12
    5210:	8180041e 	bne	r16,r6,5224 <_malloc_r+0x270>
    5214:	0000ca06 	br	5540 <_malloc_r+0x58c>
    5218:	10001c0e 	bge	r2,zero,528c <_malloc_r+0x2d8>
    521c:	84000317 	ldw	r16,12(r16)
    5220:	8180c726 	beq	r16,r6,5540 <_malloc_r+0x58c>
    5224:	80c00117 	ldw	r3,4(r16)
    5228:	1a06703a 	and	r3,r3,r8
    522c:	1c45c83a 	sub	r2,r3,r17
    5230:	38bff90e 	bge	r7,r2,5218 <_malloc_r+0x264>
    5234:	81000317 	ldw	r4,12(r16)
    5238:	81400217 	ldw	r5,8(r16)
    523c:	8447883a 	add	r3,r16,r17
    5240:	8c400054 	ori	r17,r17,1
    5244:	29000315 	stw	r4,12(r5)
    5248:	21400215 	stw	r5,8(r4)
    524c:	84400115 	stw	r17,4(r16)
    5250:	1889883a 	add	r4,r3,r2
    5254:	11400054 	ori	r5,r2,1
    5258:	98c00515 	stw	r3,20(r19)
    525c:	98c00415 	stw	r3,16(r19)
    5260:	20800015 	stw	r2,0(r4)
    5264:	1a400315 	stw	r9,12(r3)
    5268:	1a400215 	stw	r9,8(r3)
    526c:	19400115 	stw	r5,4(r3)
    5270:	9009883a 	mov	r4,r18
    5274:	000a0900 	call	a090 <__malloc_unlock>
    5278:	80800204 	addi	r2,r16,8
    527c:	003f7b06 	br	506c <_malloc_r+0xb8>
    5280:	8808d0fa 	srli	r4,r17,3
    5284:	210b883a 	add	r5,r4,r4
    5288:	003f9106 	br	50d0 <_malloc_r+0x11c>
    528c:	80c7883a 	add	r3,r16,r3
    5290:	19400117 	ldw	r5,4(r3)
    5294:	80800317 	ldw	r2,12(r16)
    5298:	81000217 	ldw	r4,8(r16)
    529c:	29400054 	ori	r5,r5,1
    52a0:	19400115 	stw	r5,4(r3)
    52a4:	20800315 	stw	r2,12(r4)
    52a8:	11000215 	stw	r4,8(r2)
    52ac:	9009883a 	mov	r4,r18
    52b0:	000a0900 	call	a090 <__malloc_unlock>
    52b4:	80800204 	addi	r2,r16,8
    52b8:	003f6c06 	br	506c <_malloc_r+0xb8>
    52bc:	8085883a 	add	r2,r16,r2
    52c0:	10c00117 	ldw	r3,4(r2)
    52c4:	9009883a 	mov	r4,r18
    52c8:	18c00054 	ori	r3,r3,1
    52cc:	10c00115 	stw	r3,4(r2)
    52d0:	000a0900 	call	a090 <__malloc_unlock>
    52d4:	80800204 	addi	r2,r16,8
    52d8:	003f6406 	br	506c <_malloc_r+0xb8>
    52dc:	9c000217 	ldw	r16,8(r19)
    52e0:	00bfff04 	movi	r2,-4
    52e4:	85400117 	ldw	r21,4(r16)
    52e8:	a8aa703a 	and	r21,r21,r2
    52ec:	ac400336 	bltu	r21,r17,52fc <_malloc_r+0x348>
    52f0:	ac45c83a 	sub	r2,r21,r17
    52f4:	00c003c4 	movi	r3,15
    52f8:	18805316 	blt	r3,r2,5448 <_malloc_r+0x494>
    52fc:	d5e01917 	ldw	r23,-32668(gp)
    5300:	d0e00317 	ldw	r3,-32756(gp)
    5304:	00bfffc4 	movi	r2,-1
    5308:	8579883a 	add	fp,r16,r21
    530c:	8def883a 	add	r23,r17,r23
    5310:	1880d226 	beq	r3,r2,565c <_malloc_r+0x6a8>
    5314:	bdc403c4 	addi	r23,r23,4111
    5318:	00bc0004 	movi	r2,-4096
    531c:	b8ae703a 	and	r23,r23,r2
    5320:	9009883a 	mov	r4,r18
    5324:	b80b883a 	mov	r5,r23
    5328:	00072880 	call	7288 <_sbrk_r>
    532c:	1029883a 	mov	r20,r2
    5330:	00bfffc4 	movi	r2,-1
    5334:	a080d126 	beq	r20,r2,567c <_malloc_r+0x6c8>
    5338:	a7009f36 	bltu	r20,fp,55b8 <_malloc_r+0x604>
    533c:	05800074 	movhi	r22,1
    5340:	b5878104 	addi	r22,r22,7684
    5344:	b0800017 	ldw	r2,0(r22)
    5348:	b885883a 	add	r2,r23,r2
    534c:	b0800015 	stw	r2,0(r22)
    5350:	e500cf26 	beq	fp,r20,5690 <_malloc_r+0x6dc>
    5354:	d1200317 	ldw	r4,-32756(gp)
    5358:	00ffffc4 	movi	r3,-1
    535c:	20c0e026 	beq	r4,r3,56e0 <_malloc_r+0x72c>
    5360:	a739c83a 	sub	fp,r20,fp
    5364:	1705883a 	add	r2,r2,fp
    5368:	b0800015 	stw	r2,0(r22)
    536c:	a08001cc 	andi	r2,r20,7
    5370:	1000a526 	beq	r2,zero,5608 <_malloc_r+0x654>
    5374:	a0a9c83a 	sub	r20,r20,r2
    5378:	00c40204 	movi	r3,4104
    537c:	a5000204 	addi	r20,r20,8
    5380:	1885c83a 	sub	r2,r3,r2
    5384:	a5c7883a 	add	r3,r20,r23
    5388:	18c3ffcc 	andi	r3,r3,4095
    538c:	10efc83a 	sub	r23,r2,r3
    5390:	9009883a 	mov	r4,r18
    5394:	b80b883a 	mov	r5,r23
    5398:	00072880 	call	7288 <_sbrk_r>
    539c:	00ffffc4 	movi	r3,-1
    53a0:	10c0cc26 	beq	r2,r3,56d4 <_malloc_r+0x720>
    53a4:	1505c83a 	sub	r2,r2,r20
    53a8:	b887883a 	add	r3,r23,r2
    53ac:	18c00054 	ori	r3,r3,1
    53b0:	b0800017 	ldw	r2,0(r22)
    53b4:	9d000215 	stw	r20,8(r19)
    53b8:	a0c00115 	stw	r3,4(r20)
    53bc:	b885883a 	add	r2,r23,r2
    53c0:	b0800015 	stw	r2,0(r22)
    53c4:	84c00e26 	beq	r16,r19,5400 <_malloc_r+0x44c>
    53c8:	00c003c4 	movi	r3,15
    53cc:	1d40902e 	bgeu	r3,r21,5610 <_malloc_r+0x65c>
    53d0:	ad7ffd04 	addi	r21,r21,-12
    53d4:	013ffe04 	movi	r4,-8
    53d8:	a908703a 	and	r4,r21,r4
    53dc:	810b883a 	add	r5,r16,r4
    53e0:	01800144 	movi	r6,5
    53e4:	29800115 	stw	r6,4(r5)
    53e8:	29800215 	stw	r6,8(r5)
    53ec:	81400117 	ldw	r5,4(r16)
    53f0:	2940004c 	andi	r5,r5,1
    53f4:	214ab03a 	or	r5,r4,r5
    53f8:	81400115 	stw	r5,4(r16)
    53fc:	1900ae36 	bltu	r3,r4,56b8 <_malloc_r+0x704>
    5400:	d0e01817 	ldw	r3,-32672(gp)
    5404:	1880012e 	bgeu	r3,r2,540c <_malloc_r+0x458>
    5408:	d0a01815 	stw	r2,-32672(gp)
    540c:	d0e01717 	ldw	r3,-32676(gp)
    5410:	9c000217 	ldw	r16,8(r19)
    5414:	1880012e 	bgeu	r3,r2,541c <_malloc_r+0x468>
    5418:	d0a01715 	stw	r2,-32676(gp)
    541c:	80c00117 	ldw	r3,4(r16)
    5420:	00bfff04 	movi	r2,-4
    5424:	1886703a 	and	r3,r3,r2
    5428:	1c45c83a 	sub	r2,r3,r17
    542c:	1c400236 	bltu	r3,r17,5438 <_malloc_r+0x484>
    5430:	00c003c4 	movi	r3,15
    5434:	18800416 	blt	r3,r2,5448 <_malloc_r+0x494>
    5438:	9009883a 	mov	r4,r18
    543c:	000a0900 	call	a090 <__malloc_unlock>
    5440:	0005883a 	mov	r2,zero
    5444:	003f0906 	br	506c <_malloc_r+0xb8>
    5448:	88c00054 	ori	r3,r17,1
    544c:	10800054 	ori	r2,r2,1
    5450:	80c00115 	stw	r3,4(r16)
    5454:	8463883a 	add	r17,r16,r17
    5458:	88800115 	stw	r2,4(r17)
    545c:	9009883a 	mov	r4,r18
    5460:	9c400215 	stw	r17,8(r19)
    5464:	000a0900 	call	a090 <__malloc_unlock>
    5468:	80800204 	addi	r2,r16,8
    546c:	003eff06 	br	506c <_malloc_r+0xb8>
    5470:	00800504 	movi	r2,20
    5474:	1100492e 	bgeu	r2,r4,559c <_malloc_r+0x5e8>
    5478:	00801504 	movi	r2,84
    547c:	11005c36 	bltu	r2,r4,55f0 <_malloc_r+0x63c>
    5480:	8808d33a 	srli	r4,r17,12
    5484:	21001b84 	addi	r4,r4,110
    5488:	210b883a 	add	r5,r4,r4
    548c:	003f1006 	br	50d0 <_malloc_r+0x11c>
    5490:	1006d27a 	srli	r3,r2,9
    5494:	01400104 	movi	r5,4
    5498:	28c0432e 	bgeu	r5,r3,55a8 <_malloc_r+0x5f4>
    549c:	01400504 	movi	r5,20
    54a0:	28c07036 	bltu	r5,r3,5664 <_malloc_r+0x6b0>
    54a4:	194016c4 	addi	r5,r3,91
    54a8:	294d883a 	add	r6,r5,r5
    54ac:	318d883a 	add	r6,r6,r6
    54b0:	318d883a 	add	r6,r6,r6
    54b4:	998d883a 	add	r6,r19,r6
    54b8:	30c00217 	ldw	r3,8(r6)
    54bc:	01c00074 	movhi	r7,1
    54c0:	39c1dc04 	addi	r7,r7,1904
    54c4:	19805726 	beq	r3,r6,5624 <_malloc_r+0x670>
    54c8:	01ffff04 	movi	r7,-4
    54cc:	19400117 	ldw	r5,4(r3)
    54d0:	29ca703a 	and	r5,r5,r7
    54d4:	1140022e 	bgeu	r2,r5,54e0 <_malloc_r+0x52c>
    54d8:	18c00217 	ldw	r3,8(r3)
    54dc:	30fffb1e 	bne	r6,r3,54cc <_malloc_r+0x518>
    54e0:	19400317 	ldw	r5,12(r3)
    54e4:	98800117 	ldw	r2,4(r19)
    54e8:	81400315 	stw	r5,12(r16)
    54ec:	80c00215 	stw	r3,8(r16)
    54f0:	2c000215 	stw	r16,8(r5)
    54f4:	1c000315 	stw	r16,12(r3)
    54f8:	003f2b06 	br	51a8 <_malloc_r+0x1f4>
    54fc:	8445883a 	add	r2,r16,r17
    5500:	8c400054 	ori	r17,r17,1
    5504:	18800515 	stw	r2,20(r3)
    5508:	18800415 	stw	r2,16(r3)
    550c:	29000054 	ori	r4,r5,1
    5510:	1147883a 	add	r3,r2,r5
    5514:	84400115 	stw	r17,4(r16)
    5518:	11000115 	stw	r4,4(r2)
    551c:	12400315 	stw	r9,12(r2)
    5520:	12400215 	stw	r9,8(r2)
    5524:	19400015 	stw	r5,0(r3)
    5528:	9009883a 	mov	r4,r18
    552c:	000a0900 	call	a090 <__malloc_unlock>
    5530:	80800204 	addi	r2,r16,8
    5534:	003ecd06 	br	506c <_malloc_r+0xb8>
    5538:	18800117 	ldw	r2,4(r3)
    553c:	003f1a06 	br	51a8 <_malloc_r+0x1f4>
    5540:	5ac00044 	addi	r11,r11,1
    5544:	588000cc 	andi	r2,r11,3
    5548:	52800204 	addi	r10,r10,8
    554c:	103f2e1e 	bne	r2,zero,5208 <_malloc_r+0x254>
    5550:	20c000cc 	andi	r3,r4,3
    5554:	60bffe04 	addi	r2,r12,-8
    5558:	18006f26 	beq	r3,zero,5718 <_malloc_r+0x764>
    555c:	63000017 	ldw	r12,0(r12)
    5560:	213fffc4 	addi	r4,r4,-1
    5564:	60bffa26 	beq	r12,r2,5550 <_malloc_r+0x59c>
    5568:	98800117 	ldw	r2,4(r19)
    556c:	294b883a 	add	r5,r5,r5
    5570:	117f5a36 	bltu	r2,r5,52dc <_malloc_r+0x328>
    5574:	283f5926 	beq	r5,zero,52dc <_malloc_r+0x328>
    5578:	1146703a 	and	r3,r2,r5
    557c:	18001626 	beq	r3,zero,55d8 <_malloc_r+0x624>
    5580:	5809883a 	mov	r4,r11
    5584:	003f1a06 	br	51f0 <_malloc_r+0x23c>
    5588:	80800204 	addi	r2,r16,8
    558c:	84000517 	ldw	r16,20(r16)
    5590:	143ea81e 	bne	r2,r16,5034 <_malloc_r+0x80>
    5594:	21000084 	addi	r4,r4,2
    5598:	003ee306 	br	5128 <_malloc_r+0x174>
    559c:	210016c4 	addi	r4,r4,91
    55a0:	210b883a 	add	r5,r4,r4
    55a4:	003eca06 	br	50d0 <_malloc_r+0x11c>
    55a8:	100ad1ba 	srli	r5,r2,6
    55ac:	29400e04 	addi	r5,r5,56
    55b0:	294d883a 	add	r6,r5,r5
    55b4:	003fbd06 	br	54ac <_malloc_r+0x4f8>
    55b8:	84ff6026 	beq	r16,r19,533c <_malloc_r+0x388>
    55bc:	00800074 	movhi	r2,1
    55c0:	1081dc04 	addi	r2,r2,1904
    55c4:	14000217 	ldw	r16,8(r2)
    55c8:	00bfff04 	movi	r2,-4
    55cc:	80c00117 	ldw	r3,4(r16)
    55d0:	1886703a 	and	r3,r3,r2
    55d4:	003f9406 	br	5428 <_malloc_r+0x474>
    55d8:	294b883a 	add	r5,r5,r5
    55dc:	1146703a 	and	r3,r2,r5
    55e0:	5ac00104 	addi	r11,r11,4
    55e4:	183ffc26 	beq	r3,zero,55d8 <_malloc_r+0x624>
    55e8:	5809883a 	mov	r4,r11
    55ec:	003f0006 	br	51f0 <_malloc_r+0x23c>
    55f0:	00805504 	movi	r2,340
    55f4:	11001336 	bltu	r2,r4,5644 <_malloc_r+0x690>
    55f8:	8808d3fa 	srli	r4,r17,15
    55fc:	21001dc4 	addi	r4,r4,119
    5600:	210b883a 	add	r5,r4,r4
    5604:	003eb206 	br	50d0 <_malloc_r+0x11c>
    5608:	00840004 	movi	r2,4096
    560c:	003f5d06 	br	5384 <_malloc_r+0x3d0>
    5610:	00800044 	movi	r2,1
    5614:	a0800115 	stw	r2,4(r20)
    5618:	a021883a 	mov	r16,r20
    561c:	0007883a 	mov	r3,zero
    5620:	003f8106 	br	5428 <_malloc_r+0x474>
    5624:	280bd0ba 	srai	r5,r5,2
    5628:	01800044 	movi	r6,1
    562c:	38800117 	ldw	r2,4(r7)
    5630:	314c983a 	sll	r6,r6,r5
    5634:	180b883a 	mov	r5,r3
    5638:	3084b03a 	or	r2,r6,r2
    563c:	38800115 	stw	r2,4(r7)
    5640:	003fa906 	br	54e8 <_malloc_r+0x534>
    5644:	00815504 	movi	r2,1364
    5648:	11001836 	bltu	r2,r4,56ac <_malloc_r+0x6f8>
    564c:	8808d4ba 	srli	r4,r17,18
    5650:	21001f04 	addi	r4,r4,124
    5654:	210b883a 	add	r5,r4,r4
    5658:	003e9d06 	br	50d0 <_malloc_r+0x11c>
    565c:	bdc00404 	addi	r23,r23,16
    5660:	003f2f06 	br	5320 <_malloc_r+0x36c>
    5664:	01401504 	movi	r5,84
    5668:	28c01f36 	bltu	r5,r3,56e8 <_malloc_r+0x734>
    566c:	100ad33a 	srli	r5,r2,12
    5670:	29401b84 	addi	r5,r5,110
    5674:	294d883a 	add	r6,r5,r5
    5678:	003f8c06 	br	54ac <_malloc_r+0x4f8>
    567c:	9c000217 	ldw	r16,8(r19)
    5680:	00bfff04 	movi	r2,-4
    5684:	80c00117 	ldw	r3,4(r16)
    5688:	1886703a 	and	r3,r3,r2
    568c:	003f6606 	br	5428 <_malloc_r+0x474>
    5690:	e0c3ffcc 	andi	r3,fp,4095
    5694:	183f2f1e 	bne	r3,zero,5354 <_malloc_r+0x3a0>
    5698:	98c00217 	ldw	r3,8(r19)
    569c:	bd49883a 	add	r4,r23,r21
    56a0:	21000054 	ori	r4,r4,1
    56a4:	19000115 	stw	r4,4(r3)
    56a8:	003f5506 	br	5400 <_malloc_r+0x44c>
    56ac:	01403f04 	movi	r5,252
    56b0:	01001f84 	movi	r4,126
    56b4:	003e8606 	br	50d0 <_malloc_r+0x11c>
    56b8:	9009883a 	mov	r4,r18
    56bc:	81400204 	addi	r5,r16,8
    56c0:	000441c0 	call	441c <_free_r>
    56c4:	00800074 	movhi	r2,1
    56c8:	10878104 	addi	r2,r2,7684
    56cc:	10800017 	ldw	r2,0(r2)
    56d0:	003f4b06 	br	5400 <_malloc_r+0x44c>
    56d4:	00c00044 	movi	r3,1
    56d8:	002f883a 	mov	r23,zero
    56dc:	003f3406 	br	53b0 <_malloc_r+0x3fc>
    56e0:	d5200315 	stw	r20,-32756(gp)
    56e4:	003f2106 	br	536c <_malloc_r+0x3b8>
    56e8:	01405504 	movi	r5,340
    56ec:	28c00436 	bltu	r5,r3,5700 <_malloc_r+0x74c>
    56f0:	100ad3fa 	srli	r5,r2,15
    56f4:	29401dc4 	addi	r5,r5,119
    56f8:	294d883a 	add	r6,r5,r5
    56fc:	003f6b06 	br	54ac <_malloc_r+0x4f8>
    5700:	01415504 	movi	r5,1364
    5704:	28c00936 	bltu	r5,r3,572c <_malloc_r+0x778>
    5708:	100ad4ba 	srli	r5,r2,18
    570c:	29401f04 	addi	r5,r5,124
    5710:	294d883a 	add	r6,r5,r5
    5714:	003f6506 	br	54ac <_malloc_r+0x4f8>
    5718:	98800117 	ldw	r2,4(r19)
    571c:	0146303a 	nor	r3,zero,r5
    5720:	1884703a 	and	r2,r3,r2
    5724:	98800115 	stw	r2,4(r19)
    5728:	003f9006 	br	556c <_malloc_r+0x5b8>
    572c:	01803f04 	movi	r6,252
    5730:	01401f84 	movi	r5,126
    5734:	003f5d06 	br	54ac <_malloc_r+0x4f8>

00005738 <memchr>:
    5738:	008000c4 	movi	r2,3
    573c:	29403fcc 	andi	r5,r5,255
    5740:	1180282e 	bgeu	r2,r6,57e4 <memchr+0xac>
    5744:	2086703a 	and	r3,r4,r2
    5748:	1800351e 	bne	r3,zero,5820 <memchr+0xe8>
    574c:	2816923a 	slli	r11,r5,8
    5750:	2093883a 	add	r9,r4,r2
    5754:	22000084 	addi	r8,r4,2
    5758:	5957883a 	add	r11,r11,r5
    575c:	5816923a 	slli	r11,r11,8
    5760:	20c00044 	addi	r3,r4,1
    5764:	037fbff4 	movhi	r13,65279
    5768:	6b7fbfc4 	addi	r13,r13,-257
    576c:	5957883a 	add	r11,r11,r5
    5770:	5816923a 	slli	r11,r11,8
    5774:	03202074 	movhi	r12,32897
    5778:	63202004 	addi	r12,r12,-32640
    577c:	101d883a 	mov	r14,r2
    5780:	5957883a 	add	r11,r11,r5
    5784:	21c00017 	ldw	r7,0(r4)
    5788:	31bfff04 	addi	r6,r6,-4
    578c:	1805883a 	mov	r2,r3
    5790:	3acef03a 	xor	r7,r7,r11
    5794:	3b55883a 	add	r10,r7,r13
    5798:	01ce303a 	nor	r7,zero,r7
    579c:	51ce703a 	and	r7,r10,r7
    57a0:	3b0e703a 	and	r7,r7,r12
    57a4:	38000a26 	beq	r7,zero,57d0 <memchr+0x98>
    57a8:	21c00003 	ldbu	r7,0(r4)
    57ac:	39401e26 	beq	r7,r5,5828 <memchr+0xf0>
    57b0:	19c00003 	ldbu	r7,0(r3)
    57b4:	39401926 	beq	r7,r5,581c <memchr+0xe4>
    57b8:	41c00003 	ldbu	r7,0(r8)
    57bc:	4005883a 	mov	r2,r8
    57c0:	39401626 	beq	r7,r5,581c <memchr+0xe4>
    57c4:	49c00003 	ldbu	r7,0(r9)
    57c8:	4805883a 	mov	r2,r9
    57cc:	39401326 	beq	r7,r5,581c <memchr+0xe4>
    57d0:	21000104 	addi	r4,r4,4
    57d4:	4a400104 	addi	r9,r9,4
    57d8:	42000104 	addi	r8,r8,4
    57dc:	18c00104 	addi	r3,r3,4
    57e0:	71bfe836 	bltu	r14,r6,5784 <memchr+0x4c>
    57e4:	2005883a 	mov	r2,r4
    57e8:	30000a26 	beq	r6,zero,5814 <memchr+0xdc>
    57ec:	10c00003 	ldbu	r3,0(r2)
    57f0:	19400a26 	beq	r3,r5,581c <memchr+0xe4>
    57f4:	10c00044 	addi	r3,r2,1
    57f8:	118d883a 	add	r6,r2,r6
    57fc:	00000306 	br	580c <memchr+0xd4>
    5800:	11000003 	ldbu	r4,0(r2)
    5804:	18c00044 	addi	r3,r3,1
    5808:	21400426 	beq	r4,r5,581c <memchr+0xe4>
    580c:	1805883a 	mov	r2,r3
    5810:	19bffb1e 	bne	r3,r6,5800 <memchr+0xc8>
    5814:	0005883a 	mov	r2,zero
    5818:	f800283a 	ret
    581c:	f800283a 	ret
    5820:	2005883a 	mov	r2,r4
    5824:	003ff106 	br	57ec <memchr+0xb4>
    5828:	2005883a 	mov	r2,r4
    582c:	f800283a 	ret

00005830 <memcpy>:
    5830:	defffb04 	addi	sp,sp,-20
    5834:	dc000015 	stw	r16,0(sp)
    5838:	dfc00415 	stw	ra,16(sp)
    583c:	dcc00315 	stw	r19,12(sp)
    5840:	dc800215 	stw	r18,8(sp)
    5844:	dc400115 	stw	r17,4(sp)
    5848:	00c003c4 	movi	r3,15
    584c:	2021883a 	mov	r16,r4
    5850:	3005883a 	mov	r2,r6
    5854:	1980032e 	bgeu	r3,r6,5864 <memcpy+0x34>
    5858:	2906b03a 	or	r3,r5,r4
    585c:	18c000cc 	andi	r3,r3,3
    5860:	18001026 	beq	r3,zero,58a4 <memcpy+0x74>
    5864:	8007883a 	mov	r3,r16
    5868:	288f883a 	add	r7,r5,r2
    586c:	10000526 	beq	r2,zero,5884 <memcpy+0x54>
    5870:	29800003 	ldbu	r6,0(r5)
    5874:	18c00044 	addi	r3,r3,1
    5878:	29400044 	addi	r5,r5,1
    587c:	19bfffc5 	stb	r6,-1(r3)
    5880:	29fffb1e 	bne	r5,r7,5870 <memcpy+0x40>
    5884:	8005883a 	mov	r2,r16
    5888:	dfc00417 	ldw	ra,16(sp)
    588c:	dcc00317 	ldw	r19,12(sp)
    5890:	dc800217 	ldw	r18,8(sp)
    5894:	dc400117 	ldw	r17,4(sp)
    5898:	dc000017 	ldw	r16,0(sp)
    589c:	dec00504 	addi	sp,sp,20
    58a0:	f800283a 	ret
    58a4:	32bffc04 	addi	r10,r6,-16
    58a8:	5014d13a 	srli	r10,r10,4
    58ac:	20800404 	addi	r2,r4,16
    58b0:	2007883a 	mov	r3,r4
    58b4:	5008913a 	slli	r4,r10,4
    58b8:	280f883a 	mov	r7,r5
    58bc:	1105883a 	add	r2,r2,r4
    58c0:	3a000017 	ldw	r8,0(r7)
    58c4:	18c00404 	addi	r3,r3,16
    58c8:	39c00404 	addi	r7,r7,16
    58cc:	1a3ffc15 	stw	r8,-16(r3)
    58d0:	3a3ffd17 	ldw	r8,-12(r7)
    58d4:	1a3ffd15 	stw	r8,-12(r3)
    58d8:	3a3ffe17 	ldw	r8,-8(r7)
    58dc:	1a3ffe15 	stw	r8,-8(r3)
    58e0:	3a3fff17 	ldw	r8,-4(r7)
    58e4:	1a3fff15 	stw	r8,-4(r3)
    58e8:	18bff51e 	bne	r3,r2,58c0 <memcpy+0x90>
    58ec:	52800044 	addi	r10,r10,1
    58f0:	5014913a 	slli	r10,r10,4
    58f4:	308003cc 	andi	r2,r6,15
    58f8:	010000c4 	movi	r4,3
    58fc:	8287883a 	add	r3,r16,r10
    5900:	2a95883a 	add	r10,r5,r10
    5904:	2080182e 	bgeu	r4,r2,5968 <memcpy+0x138>
    5908:	147fff04 	addi	r17,r2,-4
    590c:	8808d0ba 	srli	r4,r17,2
    5910:	1a400104 	addi	r9,r3,4
    5914:	180d883a 	mov	r6,r3
    5918:	2105883a 	add	r2,r4,r4
    591c:	1085883a 	add	r2,r2,r2
    5920:	4893883a 	add	r9,r9,r2
    5924:	500f883a 	mov	r7,r10
    5928:	3a000017 	ldw	r8,0(r7)
    592c:	31800104 	addi	r6,r6,4
    5930:	39c00104 	addi	r7,r7,4
    5934:	323fff15 	stw	r8,-4(r6)
    5938:	327ffb1e 	bne	r6,r9,5928 <memcpy+0xf8>
    593c:	20800044 	addi	r2,r4,1
    5940:	1085883a 	add	r2,r2,r2
    5944:	1085883a 	add	r2,r2,r2
    5948:	017fff04 	movi	r5,-4
    594c:	18a5883a 	add	r18,r3,r2
    5950:	50a7883a 	add	r19,r10,r2
    5954:	00094480 	call	9448 <__mulsi3>
    5958:	1445883a 	add	r2,r2,r17
    595c:	980b883a 	mov	r5,r19
    5960:	9007883a 	mov	r3,r18
    5964:	003fc006 	br	5868 <memcpy+0x38>
    5968:	500b883a 	mov	r5,r10
    596c:	003fbe06 	br	5868 <memcpy+0x38>

00005970 <memmove>:
    5970:	defffb04 	addi	sp,sp,-20
    5974:	dc000015 	stw	r16,0(sp)
    5978:	dfc00415 	stw	ra,16(sp)
    597c:	dcc00315 	stw	r19,12(sp)
    5980:	dc800215 	stw	r18,8(sp)
    5984:	dc400115 	stw	r17,4(sp)
    5988:	2021883a 	mov	r16,r4
    598c:	300f883a 	mov	r7,r6
    5990:	2900122e 	bgeu	r5,r4,59dc <memmove+0x6c>
    5994:	2987883a 	add	r3,r5,r6
    5998:	20c0102e 	bgeu	r4,r3,59dc <memmove+0x6c>
    599c:	218b883a 	add	r5,r4,r6
    59a0:	1989c83a 	sub	r4,r3,r6
    59a4:	30000526 	beq	r6,zero,59bc <memmove+0x4c>
    59a8:	18ffffc4 	addi	r3,r3,-1
    59ac:	18800003 	ldbu	r2,0(r3)
    59b0:	297fffc4 	addi	r5,r5,-1
    59b4:	28800005 	stb	r2,0(r5)
    59b8:	193ffb1e 	bne	r3,r4,59a8 <memmove+0x38>
    59bc:	8005883a 	mov	r2,r16
    59c0:	dfc00417 	ldw	ra,16(sp)
    59c4:	dcc00317 	ldw	r19,12(sp)
    59c8:	dc800217 	ldw	r18,8(sp)
    59cc:	dc400117 	ldw	r17,4(sp)
    59d0:	dc000017 	ldw	r16,0(sp)
    59d4:	dec00504 	addi	sp,sp,20
    59d8:	f800283a 	ret
    59dc:	008003c4 	movi	r2,15
    59e0:	1180422e 	bgeu	r2,r6,5aec <memmove+0x17c>
    59e4:	2c04b03a 	or	r2,r5,r16
    59e8:	108000cc 	andi	r2,r2,3
    59ec:	10003f1e 	bne	r2,zero,5aec <memmove+0x17c>
    59f0:	32bffc04 	addi	r10,r6,-16
    59f4:	5014d13a 	srli	r10,r10,4
    59f8:	81000404 	addi	r4,r16,16
    59fc:	8007883a 	mov	r3,r16
    5a00:	5004913a 	slli	r2,r10,4
    5a04:	280f883a 	mov	r7,r5
    5a08:	2089883a 	add	r4,r4,r2
    5a0c:	38800017 	ldw	r2,0(r7)
    5a10:	18c00404 	addi	r3,r3,16
    5a14:	39c00404 	addi	r7,r7,16
    5a18:	18bffc15 	stw	r2,-16(r3)
    5a1c:	38bffd17 	ldw	r2,-12(r7)
    5a20:	18bffd15 	stw	r2,-12(r3)
    5a24:	38bffe17 	ldw	r2,-8(r7)
    5a28:	18bffe15 	stw	r2,-8(r3)
    5a2c:	38bfff17 	ldw	r2,-4(r7)
    5a30:	18bfff15 	stw	r2,-4(r3)
    5a34:	193ff51e 	bne	r3,r4,5a0c <memmove+0x9c>
    5a38:	52800044 	addi	r10,r10,1
    5a3c:	5014913a 	slli	r10,r10,4
    5a40:	31c003cc 	andi	r7,r6,15
    5a44:	008000c4 	movi	r2,3
    5a48:	8287883a 	add	r3,r16,r10
    5a4c:	2a95883a 	add	r10,r5,r10
    5a50:	11c0282e 	bgeu	r2,r7,5af4 <memmove+0x184>
    5a54:	3c7fff04 	addi	r17,r7,-4
    5a58:	8808d0ba 	srli	r4,r17,2
    5a5c:	1a400104 	addi	r9,r3,4
    5a60:	180d883a 	mov	r6,r3
    5a64:	2105883a 	add	r2,r4,r4
    5a68:	1085883a 	add	r2,r2,r2
    5a6c:	4893883a 	add	r9,r9,r2
    5a70:	5005883a 	mov	r2,r10
    5a74:	12000017 	ldw	r8,0(r2)
    5a78:	31800104 	addi	r6,r6,4
    5a7c:	10800104 	addi	r2,r2,4
    5a80:	323fff15 	stw	r8,-4(r6)
    5a84:	327ffb1e 	bne	r6,r9,5a74 <memmove+0x104>
    5a88:	20800044 	addi	r2,r4,1
    5a8c:	1085883a 	add	r2,r2,r2
    5a90:	1085883a 	add	r2,r2,r2
    5a94:	017fff04 	movi	r5,-4
    5a98:	18a5883a 	add	r18,r3,r2
    5a9c:	50a7883a 	add	r19,r10,r2
    5aa0:	00094480 	call	9448 <__mulsi3>
    5aa4:	144f883a 	add	r7,r2,r17
    5aa8:	980b883a 	mov	r5,r19
    5aac:	9007883a 	mov	r3,r18
    5ab0:	383fc226 	beq	r7,zero,59bc <memmove+0x4c>
    5ab4:	19cf883a 	add	r7,r3,r7
    5ab8:	29800003 	ldbu	r6,0(r5)
    5abc:	18c00044 	addi	r3,r3,1
    5ac0:	29400044 	addi	r5,r5,1
    5ac4:	19bfffc5 	stb	r6,-1(r3)
    5ac8:	19fffb1e 	bne	r3,r7,5ab8 <memmove+0x148>
    5acc:	8005883a 	mov	r2,r16
    5ad0:	dfc00417 	ldw	ra,16(sp)
    5ad4:	dcc00317 	ldw	r19,12(sp)
    5ad8:	dc800217 	ldw	r18,8(sp)
    5adc:	dc400117 	ldw	r17,4(sp)
    5ae0:	dc000017 	ldw	r16,0(sp)
    5ae4:	dec00504 	addi	sp,sp,20
    5ae8:	f800283a 	ret
    5aec:	8007883a 	mov	r3,r16
    5af0:	003fef06 	br	5ab0 <memmove+0x140>
    5af4:	500b883a 	mov	r5,r10
    5af8:	003fed06 	br	5ab0 <memmove+0x140>

00005afc <memset>:
    5afc:	00c000c4 	movi	r3,3
    5b00:	2005883a 	mov	r2,r4
    5b04:	29403fcc 	andi	r5,r5,255
    5b08:	19802d2e 	bgeu	r3,r6,5bc0 <memset+0xc4>
    5b0c:	20c6703a 	and	r3,r4,r3
    5b10:	18002e1e 	bne	r3,zero,5bcc <memset+0xd0>
    5b14:	2806923a 	slli	r3,r5,8
    5b18:	010003c4 	movi	r4,15
    5b1c:	3011883a 	mov	r8,r6
    5b20:	1946b03a 	or	r3,r3,r5
    5b24:	180e943a 	slli	r7,r3,16
    5b28:	38ceb03a 	or	r7,r7,r3
    5b2c:	1007883a 	mov	r3,r2
    5b30:	21800f2e 	bgeu	r4,r6,5b70 <memset+0x74>
    5b34:	19c00015 	stw	r7,0(r3)
    5b38:	19c00115 	stw	r7,4(r3)
    5b3c:	19c00215 	stw	r7,8(r3)
    5b40:	19c00315 	stw	r7,12(r3)
    5b44:	423ffc04 	addi	r8,r8,-16
    5b48:	18c00404 	addi	r3,r3,16
    5b4c:	223ff936 	bltu	r4,r8,5b34 <memset+0x38>
    5b50:	30fffc04 	addi	r3,r6,-16
    5b54:	1806d13a 	srli	r3,r3,4
    5b58:	318003cc 	andi	r6,r6,15
    5b5c:	010000c4 	movi	r4,3
    5b60:	18c00044 	addi	r3,r3,1
    5b64:	1806913a 	slli	r3,r3,4
    5b68:	10c7883a 	add	r3,r2,r3
    5b6c:	21800e2e 	bgeu	r4,r6,5ba8 <memset+0xac>
    5b70:	1813883a 	mov	r9,r3
    5b74:	3011883a 	mov	r8,r6
    5b78:	010000c4 	movi	r4,3
    5b7c:	49c00015 	stw	r7,0(r9)
    5b80:	423fff04 	addi	r8,r8,-4
    5b84:	4a400104 	addi	r9,r9,4
    5b88:	223ffc36 	bltu	r4,r8,5b7c <memset+0x80>
    5b8c:	313fff04 	addi	r4,r6,-4
    5b90:	2008d0ba 	srli	r4,r4,2
    5b94:	318000cc 	andi	r6,r6,3
    5b98:	21000044 	addi	r4,r4,1
    5b9c:	2109883a 	add	r4,r4,r4
    5ba0:	2109883a 	add	r4,r4,r4
    5ba4:	1907883a 	add	r3,r3,r4
    5ba8:	30000a26 	beq	r6,zero,5bd4 <memset+0xd8>
    5bac:	198d883a 	add	r6,r3,r6
    5bb0:	19400005 	stb	r5,0(r3)
    5bb4:	18c00044 	addi	r3,r3,1
    5bb8:	19bffd1e 	bne	r3,r6,5bb0 <memset+0xb4>
    5bbc:	f800283a 	ret
    5bc0:	2007883a 	mov	r3,r4
    5bc4:	303ff91e 	bne	r6,zero,5bac <memset+0xb0>
    5bc8:	00000206 	br	5bd4 <memset+0xd8>
    5bcc:	2007883a 	mov	r3,r4
    5bd0:	003ff606 	br	5bac <memset+0xb0>
    5bd4:	f800283a 	ret

00005bd8 <_Balloc>:
    5bd8:	20801317 	ldw	r2,76(r4)
    5bdc:	defffc04 	addi	sp,sp,-16
    5be0:	dc400115 	stw	r17,4(sp)
    5be4:	dc000015 	stw	r16,0(sp)
    5be8:	dfc00315 	stw	ra,12(sp)
    5bec:	dc800215 	stw	r18,8(sp)
    5bf0:	2023883a 	mov	r17,r4
    5bf4:	2821883a 	mov	r16,r5
    5bf8:	10000f26 	beq	r2,zero,5c38 <_Balloc+0x60>
    5bfc:	8407883a 	add	r3,r16,r16
    5c00:	18c7883a 	add	r3,r3,r3
    5c04:	10c7883a 	add	r3,r2,r3
    5c08:	18800017 	ldw	r2,0(r3)
    5c0c:	10001126 	beq	r2,zero,5c54 <_Balloc+0x7c>
    5c10:	11000017 	ldw	r4,0(r2)
    5c14:	19000015 	stw	r4,0(r3)
    5c18:	10000415 	stw	zero,16(r2)
    5c1c:	10000315 	stw	zero,12(r2)
    5c20:	dfc00317 	ldw	ra,12(sp)
    5c24:	dc800217 	ldw	r18,8(sp)
    5c28:	dc400117 	ldw	r17,4(sp)
    5c2c:	dc000017 	ldw	r16,0(sp)
    5c30:	dec00404 	addi	sp,sp,16
    5c34:	f800283a 	ret
    5c38:	01400104 	movi	r5,4
    5c3c:	01800404 	movi	r6,16
    5c40:	000753c0 	call	753c <_calloc_r>
    5c44:	88801315 	stw	r2,76(r17)
    5c48:	103fec1e 	bne	r2,zero,5bfc <_Balloc+0x24>
    5c4c:	0005883a 	mov	r2,zero
    5c50:	003ff306 	br	5c20 <_Balloc+0x48>
    5c54:	01400044 	movi	r5,1
    5c58:	2c24983a 	sll	r18,r5,r16
    5c5c:	8809883a 	mov	r4,r17
    5c60:	91800144 	addi	r6,r18,5
    5c64:	318d883a 	add	r6,r6,r6
    5c68:	318d883a 	add	r6,r6,r6
    5c6c:	000753c0 	call	753c <_calloc_r>
    5c70:	103ff626 	beq	r2,zero,5c4c <_Balloc+0x74>
    5c74:	14000115 	stw	r16,4(r2)
    5c78:	14800215 	stw	r18,8(r2)
    5c7c:	003fe606 	br	5c18 <_Balloc+0x40>

00005c80 <_Bfree>:
    5c80:	28000826 	beq	r5,zero,5ca4 <_Bfree+0x24>
    5c84:	28c00117 	ldw	r3,4(r5)
    5c88:	20801317 	ldw	r2,76(r4)
    5c8c:	18c7883a 	add	r3,r3,r3
    5c90:	18c7883a 	add	r3,r3,r3
    5c94:	10c5883a 	add	r2,r2,r3
    5c98:	10c00017 	ldw	r3,0(r2)
    5c9c:	28c00015 	stw	r3,0(r5)
    5ca0:	11400015 	stw	r5,0(r2)
    5ca4:	f800283a 	ret

00005ca8 <__multadd>:
    5ca8:	defff604 	addi	sp,sp,-40
    5cac:	dd400515 	stw	r21,20(sp)
    5cb0:	2d400417 	ldw	r21,16(r5)
    5cb4:	df000815 	stw	fp,32(sp)
    5cb8:	ddc00715 	stw	r23,28(sp)
    5cbc:	dd800615 	stw	r22,24(sp)
    5cc0:	dd000415 	stw	r20,16(sp)
    5cc4:	dc400115 	stw	r17,4(sp)
    5cc8:	dc000015 	stw	r16,0(sp)
    5ccc:	dfc00915 	stw	ra,36(sp)
    5cd0:	dcc00315 	stw	r19,12(sp)
    5cd4:	dc800215 	stw	r18,8(sp)
    5cd8:	282d883a 	mov	r22,r5
    5cdc:	202f883a 	mov	r23,r4
    5ce0:	3029883a 	mov	r20,r6
    5ce4:	3839883a 	mov	fp,r7
    5ce8:	2c000504 	addi	r16,r5,20
    5cec:	0023883a 	mov	r17,zero
    5cf0:	84c00017 	ldw	r19,0(r16)
    5cf4:	a00b883a 	mov	r5,r20
    5cf8:	8c400044 	addi	r17,r17,1
    5cfc:	993fffcc 	andi	r4,r19,65535
    5d00:	00094480 	call	9448 <__mulsi3>
    5d04:	1725883a 	add	r18,r2,fp
    5d08:	9808d43a 	srli	r4,r19,16
    5d0c:	9026d43a 	srli	r19,r18,16
    5d10:	a00b883a 	mov	r5,r20
    5d14:	00094480 	call	9448 <__mulsi3>
    5d18:	988f883a 	add	r7,r19,r2
    5d1c:	3804943a 	slli	r2,r7,16
    5d20:	94bfffcc 	andi	r18,r18,65535
    5d24:	3838d43a 	srli	fp,r7,16
    5d28:	14a5883a 	add	r18,r2,r18
    5d2c:	84800015 	stw	r18,0(r16)
    5d30:	84000104 	addi	r16,r16,4
    5d34:	8d7fee16 	blt	r17,r21,5cf0 <__multadd+0x48>
    5d38:	e0000926 	beq	fp,zero,5d60 <__multadd+0xb8>
    5d3c:	b0800217 	ldw	r2,8(r22)
    5d40:	a880140e 	bge	r21,r2,5d94 <__multadd+0xec>
    5d44:	a8800144 	addi	r2,r21,5
    5d48:	1085883a 	add	r2,r2,r2
    5d4c:	1085883a 	add	r2,r2,r2
    5d50:	b085883a 	add	r2,r22,r2
    5d54:	ad400044 	addi	r21,r21,1
    5d58:	17000015 	stw	fp,0(r2)
    5d5c:	b5400415 	stw	r21,16(r22)
    5d60:	b005883a 	mov	r2,r22
    5d64:	dfc00917 	ldw	ra,36(sp)
    5d68:	df000817 	ldw	fp,32(sp)
    5d6c:	ddc00717 	ldw	r23,28(sp)
    5d70:	dd800617 	ldw	r22,24(sp)
    5d74:	dd400517 	ldw	r21,20(sp)
    5d78:	dd000417 	ldw	r20,16(sp)
    5d7c:	dcc00317 	ldw	r19,12(sp)
    5d80:	dc800217 	ldw	r18,8(sp)
    5d84:	dc400117 	ldw	r17,4(sp)
    5d88:	dc000017 	ldw	r16,0(sp)
    5d8c:	dec00a04 	addi	sp,sp,40
    5d90:	f800283a 	ret
    5d94:	b1400117 	ldw	r5,4(r22)
    5d98:	b809883a 	mov	r4,r23
    5d9c:	29400044 	addi	r5,r5,1
    5da0:	0005bd80 	call	5bd8 <_Balloc>
    5da4:	b1800417 	ldw	r6,16(r22)
    5da8:	b1400304 	addi	r5,r22,12
    5dac:	11000304 	addi	r4,r2,12
    5db0:	31800084 	addi	r6,r6,2
    5db4:	318d883a 	add	r6,r6,r6
    5db8:	318d883a 	add	r6,r6,r6
    5dbc:	1021883a 	mov	r16,r2
    5dc0:	00058300 	call	5830 <memcpy>
    5dc4:	b0c00117 	ldw	r3,4(r22)
    5dc8:	b8801317 	ldw	r2,76(r23)
    5dcc:	18c7883a 	add	r3,r3,r3
    5dd0:	18c7883a 	add	r3,r3,r3
    5dd4:	10c5883a 	add	r2,r2,r3
    5dd8:	10c00017 	ldw	r3,0(r2)
    5ddc:	b0c00015 	stw	r3,0(r22)
    5de0:	15800015 	stw	r22,0(r2)
    5de4:	802d883a 	mov	r22,r16
    5de8:	003fd606 	br	5d44 <__multadd+0x9c>

00005dec <__s2b>:
    5dec:	defff904 	addi	sp,sp,-28
    5df0:	dd000415 	stw	r20,16(sp)
    5df4:	dc400115 	stw	r17,4(sp)
    5df8:	2829883a 	mov	r20,r5
    5dfc:	2023883a 	mov	r17,r4
    5e00:	01400244 	movi	r5,9
    5e04:	39000204 	addi	r4,r7,8
    5e08:	dcc00315 	stw	r19,12(sp)
    5e0c:	dc800215 	stw	r18,8(sp)
    5e10:	dfc00615 	stw	ra,24(sp)
    5e14:	dd400515 	stw	r21,20(sp)
    5e18:	dc000015 	stw	r16,0(sp)
    5e1c:	3825883a 	mov	r18,r7
    5e20:	3027883a 	mov	r19,r6
    5e24:	000938c0 	call	938c <__divsi3>
    5e28:	00c00044 	movi	r3,1
    5e2c:	000b883a 	mov	r5,zero
    5e30:	1880030e 	bge	r3,r2,5e40 <__s2b+0x54>
    5e34:	18c7883a 	add	r3,r3,r3
    5e38:	29400044 	addi	r5,r5,1
    5e3c:	18bffd16 	blt	r3,r2,5e34 <__s2b+0x48>
    5e40:	8809883a 	mov	r4,r17
    5e44:	0005bd80 	call	5bd8 <_Balloc>
    5e48:	d8c00717 	ldw	r3,28(sp)
    5e4c:	10c00515 	stw	r3,20(r2)
    5e50:	00c00044 	movi	r3,1
    5e54:	10c00415 	stw	r3,16(r2)
    5e58:	00c00244 	movi	r3,9
    5e5c:	1cc0210e 	bge	r3,r19,5ee4 <__s2b+0xf8>
    5e60:	a0eb883a 	add	r21,r20,r3
    5e64:	a821883a 	mov	r16,r21
    5e68:	a4e9883a 	add	r20,r20,r19
    5e6c:	81c00007 	ldb	r7,0(r16)
    5e70:	8809883a 	mov	r4,r17
    5e74:	84000044 	addi	r16,r16,1
    5e78:	100b883a 	mov	r5,r2
    5e7c:	01800284 	movi	r6,10
    5e80:	39fff404 	addi	r7,r7,-48
    5e84:	0005ca80 	call	5ca8 <__multadd>
    5e88:	853ff81e 	bne	r16,r20,5e6c <__s2b+0x80>
    5e8c:	ace1883a 	add	r16,r21,r19
    5e90:	843ffe04 	addi	r16,r16,-8
    5e94:	9c800a0e 	bge	r19,r18,5ec0 <__s2b+0xd4>
    5e98:	94e5c83a 	sub	r18,r18,r19
    5e9c:	84a5883a 	add	r18,r16,r18
    5ea0:	81c00007 	ldb	r7,0(r16)
    5ea4:	8809883a 	mov	r4,r17
    5ea8:	84000044 	addi	r16,r16,1
    5eac:	100b883a 	mov	r5,r2
    5eb0:	01800284 	movi	r6,10
    5eb4:	39fff404 	addi	r7,r7,-48
    5eb8:	0005ca80 	call	5ca8 <__multadd>
    5ebc:	84bff81e 	bne	r16,r18,5ea0 <__s2b+0xb4>
    5ec0:	dfc00617 	ldw	ra,24(sp)
    5ec4:	dd400517 	ldw	r21,20(sp)
    5ec8:	dd000417 	ldw	r20,16(sp)
    5ecc:	dcc00317 	ldw	r19,12(sp)
    5ed0:	dc800217 	ldw	r18,8(sp)
    5ed4:	dc400117 	ldw	r17,4(sp)
    5ed8:	dc000017 	ldw	r16,0(sp)
    5edc:	dec00704 	addi	sp,sp,28
    5ee0:	f800283a 	ret
    5ee4:	a4000284 	addi	r16,r20,10
    5ee8:	1827883a 	mov	r19,r3
    5eec:	003fe906 	br	5e94 <__s2b+0xa8>

00005ef0 <__hi0bits>:
    5ef0:	20bfffec 	andhi	r2,r4,65535
    5ef4:	1000141e 	bne	r2,zero,5f48 <__hi0bits+0x58>
    5ef8:	2008943a 	slli	r4,r4,16
    5efc:	00800404 	movi	r2,16
    5f00:	20ffc02c 	andhi	r3,r4,65280
    5f04:	1800021e 	bne	r3,zero,5f10 <__hi0bits+0x20>
    5f08:	2008923a 	slli	r4,r4,8
    5f0c:	10800204 	addi	r2,r2,8
    5f10:	20fc002c 	andhi	r3,r4,61440
    5f14:	1800021e 	bne	r3,zero,5f20 <__hi0bits+0x30>
    5f18:	2008913a 	slli	r4,r4,4
    5f1c:	10800104 	addi	r2,r2,4
    5f20:	20f0002c 	andhi	r3,r4,49152
    5f24:	1800031e 	bne	r3,zero,5f34 <__hi0bits+0x44>
    5f28:	2109883a 	add	r4,r4,r4
    5f2c:	10800084 	addi	r2,r2,2
    5f30:	2109883a 	add	r4,r4,r4
    5f34:	20000316 	blt	r4,zero,5f44 <__hi0bits+0x54>
    5f38:	2110002c 	andhi	r4,r4,16384
    5f3c:	2000041e 	bne	r4,zero,5f50 <__hi0bits+0x60>
    5f40:	00800804 	movi	r2,32
    5f44:	f800283a 	ret
    5f48:	0005883a 	mov	r2,zero
    5f4c:	003fec06 	br	5f00 <__hi0bits+0x10>
    5f50:	10800044 	addi	r2,r2,1
    5f54:	f800283a 	ret

00005f58 <__lo0bits>:
    5f58:	20c00017 	ldw	r3,0(r4)
    5f5c:	188001cc 	andi	r2,r3,7
    5f60:	10000826 	beq	r2,zero,5f84 <__lo0bits+0x2c>
    5f64:	1880004c 	andi	r2,r3,1
    5f68:	1000211e 	bne	r2,zero,5ff0 <__lo0bits+0x98>
    5f6c:	1880008c 	andi	r2,r3,2
    5f70:	1000211e 	bne	r2,zero,5ff8 <__lo0bits+0xa0>
    5f74:	1806d0ba 	srli	r3,r3,2
    5f78:	00800084 	movi	r2,2
    5f7c:	20c00015 	stw	r3,0(r4)
    5f80:	f800283a 	ret
    5f84:	18bfffcc 	andi	r2,r3,65535
    5f88:	10001326 	beq	r2,zero,5fd8 <__lo0bits+0x80>
    5f8c:	0005883a 	mov	r2,zero
    5f90:	19403fcc 	andi	r5,r3,255
    5f94:	2800021e 	bne	r5,zero,5fa0 <__lo0bits+0x48>
    5f98:	1806d23a 	srli	r3,r3,8
    5f9c:	10800204 	addi	r2,r2,8
    5fa0:	194003cc 	andi	r5,r3,15
    5fa4:	2800021e 	bne	r5,zero,5fb0 <__lo0bits+0x58>
    5fa8:	1806d13a 	srli	r3,r3,4
    5fac:	10800104 	addi	r2,r2,4
    5fb0:	194000cc 	andi	r5,r3,3
    5fb4:	2800021e 	bne	r5,zero,5fc0 <__lo0bits+0x68>
    5fb8:	1806d0ba 	srli	r3,r3,2
    5fbc:	10800084 	addi	r2,r2,2
    5fc0:	1940004c 	andi	r5,r3,1
    5fc4:	2800081e 	bne	r5,zero,5fe8 <__lo0bits+0x90>
    5fc8:	1806d07a 	srli	r3,r3,1
    5fcc:	1800051e 	bne	r3,zero,5fe4 <__lo0bits+0x8c>
    5fd0:	00800804 	movi	r2,32
    5fd4:	f800283a 	ret
    5fd8:	1806d43a 	srli	r3,r3,16
    5fdc:	00800404 	movi	r2,16
    5fe0:	003feb06 	br	5f90 <__lo0bits+0x38>
    5fe4:	10800044 	addi	r2,r2,1
    5fe8:	20c00015 	stw	r3,0(r4)
    5fec:	f800283a 	ret
    5ff0:	0005883a 	mov	r2,zero
    5ff4:	f800283a 	ret
    5ff8:	1806d07a 	srli	r3,r3,1
    5ffc:	00800044 	movi	r2,1
    6000:	20c00015 	stw	r3,0(r4)
    6004:	f800283a 	ret

00006008 <__i2b>:
    6008:	defffd04 	addi	sp,sp,-12
    600c:	dc000015 	stw	r16,0(sp)
    6010:	04000044 	movi	r16,1
    6014:	dc400115 	stw	r17,4(sp)
    6018:	2823883a 	mov	r17,r5
    601c:	800b883a 	mov	r5,r16
    6020:	dfc00215 	stw	ra,8(sp)
    6024:	0005bd80 	call	5bd8 <_Balloc>
    6028:	14400515 	stw	r17,20(r2)
    602c:	14000415 	stw	r16,16(r2)
    6030:	dfc00217 	ldw	ra,8(sp)
    6034:	dc400117 	ldw	r17,4(sp)
    6038:	dc000017 	ldw	r16,0(sp)
    603c:	dec00304 	addi	sp,sp,12
    6040:	f800283a 	ret

00006044 <__multiply>:
    6044:	defff004 	addi	sp,sp,-64
    6048:	dc800815 	stw	r18,32(sp)
    604c:	dc400715 	stw	r17,28(sp)
    6050:	34800417 	ldw	r18,16(r6)
    6054:	2c400417 	ldw	r17,16(r5)
    6058:	ddc00d15 	stw	r23,52(sp)
    605c:	dc000615 	stw	r16,24(sp)
    6060:	dfc00f15 	stw	ra,60(sp)
    6064:	df000e15 	stw	fp,56(sp)
    6068:	dd800c15 	stw	r22,48(sp)
    606c:	dd400b15 	stw	r21,44(sp)
    6070:	dd000a15 	stw	r20,40(sp)
    6074:	dcc00915 	stw	r19,36(sp)
    6078:	2821883a 	mov	r16,r5
    607c:	302f883a 	mov	r23,r6
    6080:	8c80050e 	bge	r17,r18,6098 <__multiply+0x54>
    6084:	8807883a 	mov	r3,r17
    6088:	3021883a 	mov	r16,r6
    608c:	9023883a 	mov	r17,r18
    6090:	282f883a 	mov	r23,r5
    6094:	1825883a 	mov	r18,r3
    6098:	80800217 	ldw	r2,8(r16)
    609c:	8c87883a 	add	r3,r17,r18
    60a0:	d8c00115 	stw	r3,4(sp)
    60a4:	81400117 	ldw	r5,4(r16)
    60a8:	10c0010e 	bge	r2,r3,60b0 <__multiply+0x6c>
    60ac:	29400044 	addi	r5,r5,1
    60b0:	0005bd80 	call	5bd8 <_Balloc>
    60b4:	d8c00117 	ldw	r3,4(sp)
    60b8:	d8800515 	stw	r2,20(sp)
    60bc:	14c00504 	addi	r19,r2,20
    60c0:	1d400144 	addi	r21,r3,5
    60c4:	ad6b883a 	add	r21,r21,r21
    60c8:	ad6b883a 	add	r21,r21,r21
    60cc:	156b883a 	add	r21,r2,r21
    60d0:	dd400215 	stw	r21,8(sp)
    60d4:	9805883a 	mov	r2,r19
    60d8:	9d40042e 	bgeu	r19,r21,60ec <__multiply+0xa8>
    60dc:	d8c00217 	ldw	r3,8(sp)
    60e0:	10000015 	stw	zero,0(r2)
    60e4:	10800104 	addi	r2,r2,4
    60e8:	10fffc36 	bltu	r2,r3,60dc <__multiply+0x98>
    60ec:	94800144 	addi	r18,r18,5
    60f0:	94a5883a 	add	r18,r18,r18
    60f4:	94ad883a 	add	r22,r18,r18
    60f8:	8c400144 	addi	r17,r17,5
    60fc:	8c63883a 	add	r17,r17,r17
    6100:	bdad883a 	add	r22,r23,r22
    6104:	80c00504 	addi	r3,r16,20
    6108:	8c63883a 	add	r17,r17,r17
    610c:	bc800504 	addi	r18,r23,20
    6110:	dd800315 	stw	r22,12(sp)
    6114:	d8c00415 	stw	r3,16(sp)
    6118:	dcc00015 	stw	r19,0(sp)
    611c:	8463883a 	add	r17,r16,r17
    6120:	9580412e 	bgeu	r18,r22,6228 <__multiply+0x1e4>
    6124:	90800017 	ldw	r2,0(r18)
    6128:	173fffcc 	andi	fp,r2,65535
    612c:	e0001a26 	beq	fp,zero,6198 <__multiply+0x154>
    6130:	dd000017 	ldw	r20,0(sp)
    6134:	dd800417 	ldw	r22,16(sp)
    6138:	002b883a 	mov	r21,zero
    613c:	b4c00017 	ldw	r19,0(r22)
    6140:	a4000017 	ldw	r16,0(r20)
    6144:	e00b883a 	mov	r5,fp
    6148:	993fffcc 	andi	r4,r19,65535
    614c:	00094480 	call	9448 <__mulsi3>
    6150:	9808d43a 	srli	r4,r19,16
    6154:	817fffcc 	andi	r5,r16,65535
    6158:	1145883a 	add	r2,r2,r5
    615c:	e00b883a 	mov	r5,fp
    6160:	1567883a 	add	r19,r2,r21
    6164:	8020d43a 	srli	r16,r16,16
    6168:	00094480 	call	9448 <__mulsi3>
    616c:	9808d43a 	srli	r4,r19,16
    6170:	1405883a 	add	r2,r2,r16
    6174:	a4c0000d 	sth	r19,0(r20)
    6178:	110f883a 	add	r7,r2,r4
    617c:	a1c0008d 	sth	r7,2(r20)
    6180:	b5800104 	addi	r22,r22,4
    6184:	382ad43a 	srli	r21,r7,16
    6188:	a5000104 	addi	r20,r20,4
    618c:	b47feb36 	bltu	r22,r17,613c <__multiply+0xf8>
    6190:	a5400015 	stw	r21,0(r20)
    6194:	90800017 	ldw	r2,0(r18)
    6198:	1038d43a 	srli	fp,r2,16
    619c:	e0001c26 	beq	fp,zero,6210 <__multiply+0x1cc>
    61a0:	d8c00017 	ldw	r3,0(sp)
    61a4:	dd000417 	ldw	r20,16(sp)
    61a8:	002b883a 	mov	r21,zero
    61ac:	1d800017 	ldw	r22,0(r3)
    61b0:	182f883a 	mov	r23,r3
    61b4:	b021883a 	mov	r16,r22
    61b8:	a4c00017 	ldw	r19,0(r20)
    61bc:	8020d43a 	srli	r16,r16,16
    61c0:	e00b883a 	mov	r5,fp
    61c4:	993fffcc 	andi	r4,r19,65535
    61c8:	00094480 	call	9448 <__mulsi3>
    61cc:	1405883a 	add	r2,r2,r16
    61d0:	9808d43a 	srli	r4,r19,16
    61d4:	156b883a 	add	r21,r2,r21
    61d8:	bdc00104 	addi	r23,r23,4
    61dc:	bdbfff0d 	sth	r22,-4(r23)
    61e0:	bd7fff8d 	sth	r21,-2(r23)
    61e4:	bc000017 	ldw	r16,0(r23)
    61e8:	e00b883a 	mov	r5,fp
    61ec:	00094480 	call	9448 <__mulsi3>
    61f0:	a80ed43a 	srli	r7,r21,16
    61f4:	813fffcc 	andi	r4,r16,65535
    61f8:	2085883a 	add	r2,r4,r2
    61fc:	11ed883a 	add	r22,r2,r7
    6200:	a5000104 	addi	r20,r20,4
    6204:	b02ad43a 	srli	r21,r22,16
    6208:	a47feb36 	bltu	r20,r17,61b8 <__multiply+0x174>
    620c:	bd800015 	stw	r22,0(r23)
    6210:	d8c00017 	ldw	r3,0(sp)
    6214:	94800104 	addi	r18,r18,4
    6218:	18c00104 	addi	r3,r3,4
    621c:	d8c00015 	stw	r3,0(sp)
    6220:	d8c00317 	ldw	r3,12(sp)
    6224:	90ffbf36 	bltu	r18,r3,6124 <__multiply+0xe0>
    6228:	d8c00117 	ldw	r3,4(sp)
    622c:	00c00c0e 	bge	zero,r3,6260 <__multiply+0x21c>
    6230:	d8c00217 	ldw	r3,8(sp)
    6234:	18bfff17 	ldw	r2,-4(r3)
    6238:	1d7fff04 	addi	r21,r3,-4
    623c:	10000326 	beq	r2,zero,624c <__multiply+0x208>
    6240:	00000706 	br	6260 <__multiply+0x21c>
    6244:	a8800017 	ldw	r2,0(r21)
    6248:	1000051e 	bne	r2,zero,6260 <__multiply+0x21c>
    624c:	d8c00117 	ldw	r3,4(sp)
    6250:	ad7fff04 	addi	r21,r21,-4
    6254:	18ffffc4 	addi	r3,r3,-1
    6258:	d8c00115 	stw	r3,4(sp)
    625c:	183ff91e 	bne	r3,zero,6244 <__multiply+0x200>
    6260:	d8800517 	ldw	r2,20(sp)
    6264:	d8c00117 	ldw	r3,4(sp)
    6268:	10c00415 	stw	r3,16(r2)
    626c:	dfc00f17 	ldw	ra,60(sp)
    6270:	df000e17 	ldw	fp,56(sp)
    6274:	ddc00d17 	ldw	r23,52(sp)
    6278:	dd800c17 	ldw	r22,48(sp)
    627c:	dd400b17 	ldw	r21,44(sp)
    6280:	dd000a17 	ldw	r20,40(sp)
    6284:	dcc00917 	ldw	r19,36(sp)
    6288:	dc800817 	ldw	r18,32(sp)
    628c:	dc400717 	ldw	r17,28(sp)
    6290:	dc000617 	ldw	r16,24(sp)
    6294:	dec01004 	addi	sp,sp,64
    6298:	f800283a 	ret

0000629c <__pow5mult>:
    629c:	defffb04 	addi	sp,sp,-20
    62a0:	dcc00315 	stw	r19,12(sp)
    62a4:	dc800215 	stw	r18,8(sp)
    62a8:	dc000015 	stw	r16,0(sp)
    62ac:	dfc00415 	stw	ra,16(sp)
    62b0:	dc400115 	stw	r17,4(sp)
    62b4:	308000cc 	andi	r2,r6,3
    62b8:	3021883a 	mov	r16,r6
    62bc:	2027883a 	mov	r19,r4
    62c0:	2825883a 	mov	r18,r5
    62c4:	10002e1e 	bne	r2,zero,6380 <__pow5mult+0xe4>
    62c8:	8021d0ba 	srai	r16,r16,2
    62cc:	80001a26 	beq	r16,zero,6338 <__pow5mult+0x9c>
    62d0:	9c401217 	ldw	r17,72(r19)
    62d4:	8800061e 	bne	r17,zero,62f0 <__pow5mult+0x54>
    62d8:	00003406 	br	63ac <__pow5mult+0x110>
    62dc:	8021d07a 	srai	r16,r16,1
    62e0:	80001526 	beq	r16,zero,6338 <__pow5mult+0x9c>
    62e4:	88c00017 	ldw	r3,0(r17)
    62e8:	18001b26 	beq	r3,zero,6358 <__pow5mult+0xbc>
    62ec:	1823883a 	mov	r17,r3
    62f0:	80c0004c 	andi	r3,r16,1
    62f4:	183ff926 	beq	r3,zero,62dc <__pow5mult+0x40>
    62f8:	900b883a 	mov	r5,r18
    62fc:	880d883a 	mov	r6,r17
    6300:	9809883a 	mov	r4,r19
    6304:	00060440 	call	6044 <__multiply>
    6308:	90001b26 	beq	r18,zero,6378 <__pow5mult+0xdc>
    630c:	91000117 	ldw	r4,4(r18)
    6310:	98c01317 	ldw	r3,76(r19)
    6314:	8021d07a 	srai	r16,r16,1
    6318:	2109883a 	add	r4,r4,r4
    631c:	2109883a 	add	r4,r4,r4
    6320:	1907883a 	add	r3,r3,r4
    6324:	19000017 	ldw	r4,0(r3)
    6328:	91000015 	stw	r4,0(r18)
    632c:	1c800015 	stw	r18,0(r3)
    6330:	1025883a 	mov	r18,r2
    6334:	803feb1e 	bne	r16,zero,62e4 <__pow5mult+0x48>
    6338:	9005883a 	mov	r2,r18
    633c:	dfc00417 	ldw	ra,16(sp)
    6340:	dcc00317 	ldw	r19,12(sp)
    6344:	dc800217 	ldw	r18,8(sp)
    6348:	dc400117 	ldw	r17,4(sp)
    634c:	dc000017 	ldw	r16,0(sp)
    6350:	dec00504 	addi	sp,sp,20
    6354:	f800283a 	ret
    6358:	880b883a 	mov	r5,r17
    635c:	880d883a 	mov	r6,r17
    6360:	9809883a 	mov	r4,r19
    6364:	00060440 	call	6044 <__multiply>
    6368:	88800015 	stw	r2,0(r17)
    636c:	10000015 	stw	zero,0(r2)
    6370:	1023883a 	mov	r17,r2
    6374:	003fde06 	br	62f0 <__pow5mult+0x54>
    6378:	1025883a 	mov	r18,r2
    637c:	003fd706 	br	62dc <__pow5mult+0x40>
    6380:	10bfffc4 	addi	r2,r2,-1
    6384:	1085883a 	add	r2,r2,r2
    6388:	00c00074 	movhi	r3,1
    638c:	18c08404 	addi	r3,r3,528
    6390:	1085883a 	add	r2,r2,r2
    6394:	1885883a 	add	r2,r3,r2
    6398:	11800017 	ldw	r6,0(r2)
    639c:	000f883a 	mov	r7,zero
    63a0:	0005ca80 	call	5ca8 <__multadd>
    63a4:	1025883a 	mov	r18,r2
    63a8:	003fc706 	br	62c8 <__pow5mult+0x2c>
    63ac:	9809883a 	mov	r4,r19
    63b0:	01409c44 	movi	r5,625
    63b4:	00060080 	call	6008 <__i2b>
    63b8:	98801215 	stw	r2,72(r19)
    63bc:	1023883a 	mov	r17,r2
    63c0:	10000015 	stw	zero,0(r2)
    63c4:	003fca06 	br	62f0 <__pow5mult+0x54>

000063c8 <__lshift>:
    63c8:	defff904 	addi	sp,sp,-28
    63cc:	dd400515 	stw	r21,20(sp)
    63d0:	dc400115 	stw	r17,4(sp)
    63d4:	2d400417 	ldw	r21,16(r5)
    63d8:	3023d17a 	srai	r17,r6,5
    63dc:	28800217 	ldw	r2,8(r5)
    63e0:	dd000415 	stw	r20,16(sp)
    63e4:	8d6b883a 	add	r21,r17,r21
    63e8:	dcc00315 	stw	r19,12(sp)
    63ec:	dc800215 	stw	r18,8(sp)
    63f0:	dc000015 	stw	r16,0(sp)
    63f4:	dfc00615 	stw	ra,24(sp)
    63f8:	ac000044 	addi	r16,r21,1
    63fc:	2825883a 	mov	r18,r5
    6400:	3029883a 	mov	r20,r6
    6404:	2027883a 	mov	r19,r4
    6408:	29400117 	ldw	r5,4(r5)
    640c:	1400030e 	bge	r2,r16,641c <__lshift+0x54>
    6410:	1085883a 	add	r2,r2,r2
    6414:	29400044 	addi	r5,r5,1
    6418:	143ffd16 	blt	r2,r16,6410 <__lshift+0x48>
    641c:	9809883a 	mov	r4,r19
    6420:	0005bd80 	call	5bd8 <_Balloc>
    6424:	10c00504 	addi	r3,r2,20
    6428:	0440090e 	bge	zero,r17,6450 <__lshift+0x88>
    642c:	000f883a 	mov	r7,zero
    6430:	18000015 	stw	zero,0(r3)
    6434:	39c00044 	addi	r7,r7,1
    6438:	18c00104 	addi	r3,r3,4
    643c:	3c7ffc1e 	bne	r7,r17,6430 <__lshift+0x68>
    6440:	38c00144 	addi	r3,r7,5
    6444:	18c7883a 	add	r3,r3,r3
    6448:	18c7883a 	add	r3,r3,r3
    644c:	10c7883a 	add	r3,r2,r3
    6450:	92000417 	ldw	r8,16(r18)
    6454:	a18007cc 	andi	r6,r20,31
    6458:	91c00504 	addi	r7,r18,20
    645c:	42000144 	addi	r8,r8,5
    6460:	4211883a 	add	r8,r8,r8
    6464:	4211883a 	add	r8,r8,r8
    6468:	9211883a 	add	r8,r18,r8
    646c:	30002226 	beq	r6,zero,64f8 <__lshift+0x130>
    6470:	02800804 	movi	r10,32
    6474:	5195c83a 	sub	r10,r10,r6
    6478:	000b883a 	mov	r5,zero
    647c:	3a400017 	ldw	r9,0(r7)
    6480:	18c00104 	addi	r3,r3,4
    6484:	39c00104 	addi	r7,r7,4
    6488:	4992983a 	sll	r9,r9,r6
    648c:	2a4ab03a 	or	r5,r5,r9
    6490:	197fff15 	stw	r5,-4(r3)
    6494:	397fff17 	ldw	r5,-4(r7)
    6498:	2a8ad83a 	srl	r5,r5,r10
    649c:	3a3ff736 	bltu	r7,r8,647c <__lshift+0xb4>
    64a0:	19400015 	stw	r5,0(r3)
    64a4:	28000126 	beq	r5,zero,64ac <__lshift+0xe4>
    64a8:	ac000084 	addi	r16,r21,2
    64ac:	91000117 	ldw	r4,4(r18)
    64b0:	98c01317 	ldw	r3,76(r19)
    64b4:	843fffc4 	addi	r16,r16,-1
    64b8:	2109883a 	add	r4,r4,r4
    64bc:	2109883a 	add	r4,r4,r4
    64c0:	1907883a 	add	r3,r3,r4
    64c4:	19000017 	ldw	r4,0(r3)
    64c8:	14000415 	stw	r16,16(r2)
    64cc:	91000015 	stw	r4,0(r18)
    64d0:	1c800015 	stw	r18,0(r3)
    64d4:	dfc00617 	ldw	ra,24(sp)
    64d8:	dd400517 	ldw	r21,20(sp)
    64dc:	dd000417 	ldw	r20,16(sp)
    64e0:	dcc00317 	ldw	r19,12(sp)
    64e4:	dc800217 	ldw	r18,8(sp)
    64e8:	dc400117 	ldw	r17,4(sp)
    64ec:	dc000017 	ldw	r16,0(sp)
    64f0:	dec00704 	addi	sp,sp,28
    64f4:	f800283a 	ret
    64f8:	39400017 	ldw	r5,0(r7)
    64fc:	18c00104 	addi	r3,r3,4
    6500:	39c00104 	addi	r7,r7,4
    6504:	197fff15 	stw	r5,-4(r3)
    6508:	3a3fe82e 	bgeu	r7,r8,64ac <__lshift+0xe4>
    650c:	39400017 	ldw	r5,0(r7)
    6510:	18c00104 	addi	r3,r3,4
    6514:	39c00104 	addi	r7,r7,4
    6518:	197fff15 	stw	r5,-4(r3)
    651c:	3a3ff636 	bltu	r7,r8,64f8 <__lshift+0x130>
    6520:	003fe206 	br	64ac <__lshift+0xe4>

00006524 <__mcmp>:
    6524:	20800417 	ldw	r2,16(r4)
    6528:	28c00417 	ldw	r3,16(r5)
    652c:	10c5c83a 	sub	r2,r2,r3
    6530:	10000f1e 	bne	r2,zero,6570 <__mcmp+0x4c>
    6534:	18c00144 	addi	r3,r3,5
    6538:	18c7883a 	add	r3,r3,r3
    653c:	18c7883a 	add	r3,r3,r3
    6540:	21c00504 	addi	r7,r4,20
    6544:	28cb883a 	add	r5,r5,r3
    6548:	20c9883a 	add	r4,r4,r3
    654c:	213fff04 	addi	r4,r4,-4
    6550:	297fff04 	addi	r5,r5,-4
    6554:	21800017 	ldw	r6,0(r4)
    6558:	28c00017 	ldw	r3,0(r5)
    655c:	30c0021e 	bne	r6,r3,6568 <__mcmp+0x44>
    6560:	393ffa36 	bltu	r7,r4,654c <__mcmp+0x28>
    6564:	f800283a 	ret
    6568:	30c00236 	bltu	r6,r3,6574 <__mcmp+0x50>
    656c:	00800044 	movi	r2,1
    6570:	f800283a 	ret
    6574:	00bfffc4 	movi	r2,-1
    6578:	f800283a 	ret

0000657c <__mdiff>:
    657c:	defffb04 	addi	sp,sp,-20
    6580:	dc000015 	stw	r16,0(sp)
    6584:	2821883a 	mov	r16,r5
    6588:	dc800215 	stw	r18,8(sp)
    658c:	300b883a 	mov	r5,r6
    6590:	2025883a 	mov	r18,r4
    6594:	8009883a 	mov	r4,r16
    6598:	dc400115 	stw	r17,4(sp)
    659c:	dfc00415 	stw	ra,16(sp)
    65a0:	dcc00315 	stw	r19,12(sp)
    65a4:	3023883a 	mov	r17,r6
    65a8:	00065240 	call	6524 <__mcmp>
    65ac:	10005026 	beq	r2,zero,66f0 <__mdiff+0x174>
    65b0:	10004a16 	blt	r2,zero,66dc <__mdiff+0x160>
    65b4:	0027883a 	mov	r19,zero
    65b8:	81400117 	ldw	r5,4(r16)
    65bc:	9009883a 	mov	r4,r18
    65c0:	0005bd80 	call	5bd8 <_Balloc>
    65c4:	82400417 	ldw	r9,16(r16)
    65c8:	89800417 	ldw	r6,16(r17)
    65cc:	14c00315 	stw	r19,12(r2)
    65d0:	4b800144 	addi	r14,r9,5
    65d4:	31800144 	addi	r6,r6,5
    65d8:	739d883a 	add	r14,r14,r14
    65dc:	318d883a 	add	r6,r6,r6
    65e0:	739d883a 	add	r14,r14,r14
    65e4:	318d883a 	add	r6,r6,r6
    65e8:	81c00504 	addi	r7,r16,20
    65ec:	839d883a 	add	r14,r16,r14
    65f0:	8a000504 	addi	r8,r17,20
    65f4:	898d883a 	add	r6,r17,r6
    65f8:	10c00504 	addi	r3,r2,20
    65fc:	0009883a 	mov	r4,zero
    6600:	3b000017 	ldw	r12,0(r7)
    6604:	42c00017 	ldw	r11,0(r8)
    6608:	42000104 	addi	r8,r8,4
    660c:	62bfffcc 	andi	r10,r12,65535
    6610:	5b7fffcc 	andi	r13,r11,65535
    6614:	5109883a 	add	r4,r10,r4
    6618:	2355c83a 	sub	r10,r4,r13
    661c:	5816d43a 	srli	r11,r11,16
    6620:	6008d43a 	srli	r4,r12,16
    6624:	501bd43a 	srai	r13,r10,16
    6628:	1a80000d 	sth	r10,0(r3)
    662c:	22c9c83a 	sub	r4,r4,r11
    6630:	2349883a 	add	r4,r4,r13
    6634:	1900008d 	sth	r4,2(r3)
    6638:	39c00104 	addi	r7,r7,4
    663c:	2009d43a 	srai	r4,r4,16
    6640:	18c00104 	addi	r3,r3,4
    6644:	41bfee36 	bltu	r8,r6,6600 <__mdiff+0x84>
    6648:	180b883a 	mov	r5,r3
    664c:	3815883a 	mov	r10,r7
    6650:	3b80132e 	bgeu	r7,r14,66a0 <__mdiff+0x124>
    6654:	3a000017 	ldw	r8,0(r7)
    6658:	18c00104 	addi	r3,r3,4
    665c:	39c00104 	addi	r7,r7,4
    6660:	41bfffcc 	andi	r6,r8,65535
    6664:	310d883a 	add	r6,r6,r4
    6668:	3009d43a 	srai	r4,r6,16
    666c:	4010d43a 	srli	r8,r8,16
    6670:	19bfff0d 	sth	r6,-4(r3)
    6674:	2209883a 	add	r4,r4,r8
    6678:	193fff8d 	sth	r4,-2(r3)
    667c:	2009d43a 	srai	r4,r4,16
    6680:	3bbff436 	bltu	r7,r14,6654 <__mdiff+0xd8>
    6684:	0286303a 	nor	r3,zero,r10
    6688:	1b87883a 	add	r3,r3,r14
    668c:	1806d0ba 	srli	r3,r3,2
    6690:	18c00044 	addi	r3,r3,1
    6694:	18c7883a 	add	r3,r3,r3
    6698:	18c7883a 	add	r3,r3,r3
    669c:	28c7883a 	add	r3,r5,r3
    66a0:	193fff17 	ldw	r4,-4(r3)
    66a4:	18ffff04 	addi	r3,r3,-4
    66a8:	2000041e 	bne	r4,zero,66bc <__mdiff+0x140>
    66ac:	18ffff04 	addi	r3,r3,-4
    66b0:	19000017 	ldw	r4,0(r3)
    66b4:	4a7fffc4 	addi	r9,r9,-1
    66b8:	203ffc26 	beq	r4,zero,66ac <__mdiff+0x130>
    66bc:	12400415 	stw	r9,16(r2)
    66c0:	dfc00417 	ldw	ra,16(sp)
    66c4:	dcc00317 	ldw	r19,12(sp)
    66c8:	dc800217 	ldw	r18,8(sp)
    66cc:	dc400117 	ldw	r17,4(sp)
    66d0:	dc000017 	ldw	r16,0(sp)
    66d4:	dec00504 	addi	sp,sp,20
    66d8:	f800283a 	ret
    66dc:	8005883a 	mov	r2,r16
    66e0:	04c00044 	movi	r19,1
    66e4:	8821883a 	mov	r16,r17
    66e8:	1023883a 	mov	r17,r2
    66ec:	003fb206 	br	65b8 <__mdiff+0x3c>
    66f0:	9009883a 	mov	r4,r18
    66f4:	000b883a 	mov	r5,zero
    66f8:	0005bd80 	call	5bd8 <_Balloc>
    66fc:	00c00044 	movi	r3,1
    6700:	10c00415 	stw	r3,16(r2)
    6704:	10000515 	stw	zero,20(r2)
    6708:	dfc00417 	ldw	ra,16(sp)
    670c:	dcc00317 	ldw	r19,12(sp)
    6710:	dc800217 	ldw	r18,8(sp)
    6714:	dc400117 	ldw	r17,4(sp)
    6718:	dc000017 	ldw	r16,0(sp)
    671c:	dec00504 	addi	sp,sp,20
    6720:	f800283a 	ret

00006724 <__ulp>:
    6724:	295ffc2c 	andhi	r5,r5,32752
    6728:	00bf3034 	movhi	r2,64704
    672c:	2887883a 	add	r3,r5,r2
    6730:	00c0020e 	bge	zero,r3,673c <__ulp+0x18>
    6734:	0005883a 	mov	r2,zero
    6738:	f800283a 	ret
    673c:	00c7c83a 	sub	r3,zero,r3
    6740:	1805d53a 	srai	r2,r3,20
    6744:	00c004c4 	movi	r3,19
    6748:	18800a0e 	bge	r3,r2,6774 <__ulp+0x50>
    674c:	01000c84 	movi	r4,50
    6750:	0007883a 	mov	r3,zero
    6754:	20800516 	blt	r4,r2,676c <__ulp+0x48>
    6758:	01000cc4 	movi	r4,51
    675c:	2085c83a 	sub	r2,r4,r2
    6760:	01000044 	movi	r4,1
    6764:	2084983a 	sll	r2,r4,r2
    6768:	f800283a 	ret
    676c:	00800044 	movi	r2,1
    6770:	f800283a 	ret
    6774:	00c00234 	movhi	r3,8
    6778:	1887d83a 	sra	r3,r3,r2
    677c:	0005883a 	mov	r2,zero
    6780:	f800283a 	ret

00006784 <__b2d>:
    6784:	defffa04 	addi	sp,sp,-24
    6788:	dc000015 	stw	r16,0(sp)
    678c:	24000417 	ldw	r16,16(r4)
    6790:	dc400115 	stw	r17,4(sp)
    6794:	dcc00315 	stw	r19,12(sp)
    6798:	84000144 	addi	r16,r16,5
    679c:	8421883a 	add	r16,r16,r16
    67a0:	8421883a 	add	r16,r16,r16
    67a4:	2421883a 	add	r16,r4,r16
    67a8:	847fff17 	ldw	r17,-4(r16)
    67ac:	24c00504 	addi	r19,r4,20
    67b0:	dd000415 	stw	r20,16(sp)
    67b4:	8809883a 	mov	r4,r17
    67b8:	dc800215 	stw	r18,8(sp)
    67bc:	2829883a 	mov	r20,r5
    67c0:	dfc00515 	stw	ra,20(sp)
    67c4:	0005ef00 	call	5ef0 <__hi0bits>
    67c8:	00c00804 	movi	r3,32
    67cc:	1887c83a 	sub	r3,r3,r2
    67d0:	a0c00015 	stw	r3,0(r20)
    67d4:	00c00284 	movi	r3,10
    67d8:	84bfff04 	addi	r18,r16,-4
    67dc:	18801216 	blt	r3,r2,6828 <__b2d+0xa4>
    67e0:	010002c4 	movi	r4,11
    67e4:	2089c83a 	sub	r4,r4,r2
    67e8:	8906d83a 	srl	r3,r17,r4
    67ec:	18cffc34 	orhi	r3,r3,16368
    67f0:	9c80322e 	bgeu	r19,r18,68bc <__b2d+0x138>
    67f4:	817ffe17 	ldw	r5,-8(r16)
    67f8:	2908d83a 	srl	r4,r5,r4
    67fc:	10800544 	addi	r2,r2,21
    6800:	88a2983a 	sll	r17,r17,r2
    6804:	2444b03a 	or	r2,r4,r17
    6808:	dfc00517 	ldw	ra,20(sp)
    680c:	dd000417 	ldw	r20,16(sp)
    6810:	dcc00317 	ldw	r19,12(sp)
    6814:	dc800217 	ldw	r18,8(sp)
    6818:	dc400117 	ldw	r17,4(sp)
    681c:	dc000017 	ldw	r16,0(sp)
    6820:	dec00604 	addi	sp,sp,24
    6824:	f800283a 	ret
    6828:	9c801636 	bltu	r19,r18,6884 <__b2d+0x100>
    682c:	113ffd44 	addi	r4,r2,-11
    6830:	000b883a 	mov	r5,zero
    6834:	20001726 	beq	r4,zero,6894 <__b2d+0x110>
    6838:	00c00ac4 	movi	r3,43
    683c:	1885c83a 	sub	r2,r3,r2
    6840:	8906983a 	sll	r3,r17,r4
    6844:	288cd83a 	srl	r6,r5,r2
    6848:	18cffc34 	orhi	r3,r3,16368
    684c:	1986b03a 	or	r3,r3,r6
    6850:	9c801c2e 	bgeu	r19,r18,68c4 <__b2d+0x140>
    6854:	91bfff17 	ldw	r6,-4(r18)
    6858:	3084d83a 	srl	r2,r6,r2
    685c:	2908983a 	sll	r4,r5,r4
    6860:	1104b03a 	or	r2,r2,r4
    6864:	dfc00517 	ldw	ra,20(sp)
    6868:	dd000417 	ldw	r20,16(sp)
    686c:	dcc00317 	ldw	r19,12(sp)
    6870:	dc800217 	ldw	r18,8(sp)
    6874:	dc400117 	ldw	r17,4(sp)
    6878:	dc000017 	ldw	r16,0(sp)
    687c:	dec00604 	addi	sp,sp,24
    6880:	f800283a 	ret
    6884:	113ffd44 	addi	r4,r2,-11
    6888:	84bffe04 	addi	r18,r16,-8
    688c:	817ffe17 	ldw	r5,-8(r16)
    6890:	203fe91e 	bne	r4,zero,6838 <__b2d+0xb4>
    6894:	88cffc34 	orhi	r3,r17,16368
    6898:	2805883a 	mov	r2,r5
    689c:	dfc00517 	ldw	ra,20(sp)
    68a0:	dd000417 	ldw	r20,16(sp)
    68a4:	dcc00317 	ldw	r19,12(sp)
    68a8:	dc800217 	ldw	r18,8(sp)
    68ac:	dc400117 	ldw	r17,4(sp)
    68b0:	dc000017 	ldw	r16,0(sp)
    68b4:	dec00604 	addi	sp,sp,24
    68b8:	f800283a 	ret
    68bc:	0009883a 	mov	r4,zero
    68c0:	003fce06 	br	67fc <__b2d+0x78>
    68c4:	0005883a 	mov	r2,zero
    68c8:	003fe406 	br	685c <__b2d+0xd8>

000068cc <__d2b>:
    68cc:	defff804 	addi	sp,sp,-32
    68d0:	dc400315 	stw	r17,12(sp)
    68d4:	3023883a 	mov	r17,r6
    68d8:	dc800415 	stw	r18,16(sp)
    68dc:	8824907a 	slli	r18,r17,1
    68e0:	dcc00515 	stw	r19,20(sp)
    68e4:	2827883a 	mov	r19,r5
    68e8:	9024d57a 	srli	r18,r18,21
    68ec:	01400044 	movi	r5,1
    68f0:	dd000615 	stw	r20,24(sp)
    68f4:	dc000215 	stw	r16,8(sp)
    68f8:	dfc00715 	stw	ra,28(sp)
    68fc:	3829883a 	mov	r20,r7
    6900:	0005bd80 	call	5bd8 <_Balloc>
    6904:	1021883a 	mov	r16,r2
    6908:	00800434 	movhi	r2,16
    690c:	10bfffc4 	addi	r2,r2,-1
    6910:	88a2703a 	and	r17,r17,r2
    6914:	90000126 	beq	r18,zero,691c <__d2b+0x50>
    6918:	8c400434 	orhi	r17,r17,16
    691c:	dc400015 	stw	r17,0(sp)
    6920:	98002226 	beq	r19,zero,69ac <__d2b+0xe0>
    6924:	d9000104 	addi	r4,sp,4
    6928:	dcc00115 	stw	r19,4(sp)
    692c:	0005f580 	call	5f58 <__lo0bits>
    6930:	d8c00017 	ldw	r3,0(sp)
    6934:	10002d1e 	bne	r2,zero,69ec <__d2b+0x120>
    6938:	d9000117 	ldw	r4,4(sp)
    693c:	81000515 	stw	r4,20(r16)
    6940:	1823003a 	cmpeq	r17,r3,zero
    6944:	01000084 	movi	r4,2
    6948:	2463c83a 	sub	r17,r4,r17
    694c:	80c00615 	stw	r3,24(r16)
    6950:	84400415 	stw	r17,16(r16)
    6954:	90001d1e 	bne	r18,zero,69cc <__d2b+0x100>
    6958:	88c00104 	addi	r3,r17,4
    695c:	18c7883a 	add	r3,r3,r3
    6960:	18c7883a 	add	r3,r3,r3
    6964:	80c7883a 	add	r3,r16,r3
    6968:	19000017 	ldw	r4,0(r3)
    696c:	10bef384 	addi	r2,r2,-1074
    6970:	a0800015 	stw	r2,0(r20)
    6974:	0005ef00 	call	5ef0 <__hi0bits>
    6978:	8822917a 	slli	r17,r17,5
    697c:	d8c00817 	ldw	r3,32(sp)
    6980:	8885c83a 	sub	r2,r17,r2
    6984:	18800015 	stw	r2,0(r3)
    6988:	8005883a 	mov	r2,r16
    698c:	dfc00717 	ldw	ra,28(sp)
    6990:	dd000617 	ldw	r20,24(sp)
    6994:	dcc00517 	ldw	r19,20(sp)
    6998:	dc800417 	ldw	r18,16(sp)
    699c:	dc400317 	ldw	r17,12(sp)
    69a0:	dc000217 	ldw	r16,8(sp)
    69a4:	dec00804 	addi	sp,sp,32
    69a8:	f800283a 	ret
    69ac:	d809883a 	mov	r4,sp
    69b0:	0005f580 	call	5f58 <__lo0bits>
    69b4:	d8c00017 	ldw	r3,0(sp)
    69b8:	04400044 	movi	r17,1
    69bc:	84400415 	stw	r17,16(r16)
    69c0:	80c00515 	stw	r3,20(r16)
    69c4:	10800804 	addi	r2,r2,32
    69c8:	903fe326 	beq	r18,zero,6958 <__d2b+0x8c>
    69cc:	00c00d44 	movi	r3,53
    69d0:	94bef344 	addi	r18,r18,-1075
    69d4:	90a5883a 	add	r18,r18,r2
    69d8:	1885c83a 	sub	r2,r3,r2
    69dc:	d8c00817 	ldw	r3,32(sp)
    69e0:	a4800015 	stw	r18,0(r20)
    69e4:	18800015 	stw	r2,0(r3)
    69e8:	003fe706 	br	6988 <__d2b+0xbc>
    69ec:	01000804 	movi	r4,32
    69f0:	2089c83a 	sub	r4,r4,r2
    69f4:	1908983a 	sll	r4,r3,r4
    69f8:	d9400117 	ldw	r5,4(sp)
    69fc:	1886d83a 	srl	r3,r3,r2
    6a00:	2148b03a 	or	r4,r4,r5
    6a04:	81000515 	stw	r4,20(r16)
    6a08:	d8c00015 	stw	r3,0(sp)
    6a0c:	003fcc06 	br	6940 <__d2b+0x74>

00006a10 <__ratio>:
    6a10:	defff904 	addi	sp,sp,-28
    6a14:	dc400315 	stw	r17,12(sp)
    6a18:	2823883a 	mov	r17,r5
    6a1c:	d9400104 	addi	r5,sp,4
    6a20:	dfc00615 	stw	ra,24(sp)
    6a24:	dcc00515 	stw	r19,20(sp)
    6a28:	dc800415 	stw	r18,16(sp)
    6a2c:	2027883a 	mov	r19,r4
    6a30:	dc000215 	stw	r16,8(sp)
    6a34:	00067840 	call	6784 <__b2d>
    6a38:	8809883a 	mov	r4,r17
    6a3c:	d80b883a 	mov	r5,sp
    6a40:	1025883a 	mov	r18,r2
    6a44:	1821883a 	mov	r16,r3
    6a48:	00067840 	call	6784 <__b2d>
    6a4c:	99400417 	ldw	r5,16(r19)
    6a50:	89000417 	ldw	r4,16(r17)
    6a54:	d9800117 	ldw	r6,4(sp)
    6a58:	2909c83a 	sub	r4,r5,r4
    6a5c:	d9400017 	ldw	r5,0(sp)
    6a60:	2008917a 	slli	r4,r4,5
    6a64:	314bc83a 	sub	r5,r6,r5
    6a68:	290b883a 	add	r5,r5,r4
    6a6c:	01400e0e 	bge	zero,r5,6aa8 <__ratio+0x98>
    6a70:	280a953a 	slli	r5,r5,20
    6a74:	2c21883a 	add	r16,r5,r16
    6a78:	9009883a 	mov	r4,r18
    6a7c:	800b883a 	mov	r5,r16
    6a80:	100d883a 	mov	r6,r2
    6a84:	180f883a 	mov	r7,r3
    6a88:	0008cc40 	call	8cc4 <__divdf3>
    6a8c:	dfc00617 	ldw	ra,24(sp)
    6a90:	dcc00517 	ldw	r19,20(sp)
    6a94:	dc800417 	ldw	r18,16(sp)
    6a98:	dc400317 	ldw	r17,12(sp)
    6a9c:	dc000217 	ldw	r16,8(sp)
    6aa0:	dec00704 	addi	sp,sp,28
    6aa4:	f800283a 	ret
    6aa8:	280a953a 	slli	r5,r5,20
    6aac:	1947c83a 	sub	r3,r3,r5
    6ab0:	003ff106 	br	6a78 <__ratio+0x68>

00006ab4 <_mprec_log10>:
    6ab4:	defffe04 	addi	sp,sp,-8
    6ab8:	dc000015 	stw	r16,0(sp)
    6abc:	dfc00115 	stw	ra,4(sp)
    6ac0:	008005c4 	movi	r2,23
    6ac4:	2021883a 	mov	r16,r4
    6ac8:	11000d0e 	bge	r2,r4,6b00 <_mprec_log10+0x4c>
    6acc:	0005883a 	mov	r2,zero
    6ad0:	00cffc34 	movhi	r3,16368
    6ad4:	843fffc4 	addi	r16,r16,-1
    6ad8:	1009883a 	mov	r4,r2
    6adc:	180b883a 	mov	r5,r3
    6ae0:	000d883a 	mov	r6,zero
    6ae4:	01d00934 	movhi	r7,16420
    6ae8:	00089e00 	call	89e0 <__muldf3>
    6aec:	803ff91e 	bne	r16,zero,6ad4 <_mprec_log10+0x20>
    6af0:	dfc00117 	ldw	ra,4(sp)
    6af4:	dc000017 	ldw	r16,0(sp)
    6af8:	dec00204 	addi	sp,sp,8
    6afc:	f800283a 	ret
    6b00:	202090fa 	slli	r16,r4,3
    6b04:	00800074 	movhi	r2,1
    6b08:	10805204 	addi	r2,r2,328
    6b0c:	1421883a 	add	r16,r2,r16
    6b10:	80800017 	ldw	r2,0(r16)
    6b14:	80c00117 	ldw	r3,4(r16)
    6b18:	dfc00117 	ldw	ra,4(sp)
    6b1c:	dc000017 	ldw	r16,0(sp)
    6b20:	dec00204 	addi	sp,sp,8
    6b24:	f800283a 	ret

00006b28 <__copybits>:
    6b28:	297fffc4 	addi	r5,r5,-1
    6b2c:	31c00417 	ldw	r7,16(r6)
    6b30:	2811d17a 	srai	r8,r5,5
    6b34:	30800504 	addi	r2,r6,20
    6b38:	39c00144 	addi	r7,r7,5
    6b3c:	42000044 	addi	r8,r8,1
    6b40:	39cf883a 	add	r7,r7,r7
    6b44:	4211883a 	add	r8,r8,r8
    6b48:	39cf883a 	add	r7,r7,r7
    6b4c:	4211883a 	add	r8,r8,r8
    6b50:	31cf883a 	add	r7,r6,r7
    6b54:	2211883a 	add	r8,r4,r8
    6b58:	11c00d2e 	bgeu	r2,r7,6b90 <__copybits+0x68>
    6b5c:	2007883a 	mov	r3,r4
    6b60:	11400017 	ldw	r5,0(r2)
    6b64:	18c00104 	addi	r3,r3,4
    6b68:	10800104 	addi	r2,r2,4
    6b6c:	197fff15 	stw	r5,-4(r3)
    6b70:	11fffb36 	bltu	r2,r7,6b60 <__copybits+0x38>
    6b74:	3985c83a 	sub	r2,r7,r6
    6b78:	10bffac4 	addi	r2,r2,-21
    6b7c:	1004d0ba 	srli	r2,r2,2
    6b80:	10800044 	addi	r2,r2,1
    6b84:	1085883a 	add	r2,r2,r2
    6b88:	1085883a 	add	r2,r2,r2
    6b8c:	2089883a 	add	r4,r4,r2
    6b90:	2200032e 	bgeu	r4,r8,6ba0 <__copybits+0x78>
    6b94:	20000015 	stw	zero,0(r4)
    6b98:	21000104 	addi	r4,r4,4
    6b9c:	223ffd36 	bltu	r4,r8,6b94 <__copybits+0x6c>
    6ba0:	f800283a 	ret

00006ba4 <__any_on>:
    6ba4:	21800417 	ldw	r6,16(r4)
    6ba8:	2805d17a 	srai	r2,r5,5
    6bac:	20c00504 	addi	r3,r4,20
    6bb0:	30800f0e 	bge	r6,r2,6bf0 <__any_on+0x4c>
    6bb4:	3005883a 	mov	r2,r6
    6bb8:	10800144 	addi	r2,r2,5
    6bbc:	1085883a 	add	r2,r2,r2
    6bc0:	1085883a 	add	r2,r2,r2
    6bc4:	2089883a 	add	r4,r4,r2
    6bc8:	1900152e 	bgeu	r3,r4,6c20 <__any_on+0x7c>
    6bcc:	20bfff17 	ldw	r2,-4(r4)
    6bd0:	213fff04 	addi	r4,r4,-4
    6bd4:	1000041e 	bne	r2,zero,6be8 <__any_on+0x44>
    6bd8:	1900112e 	bgeu	r3,r4,6c20 <__any_on+0x7c>
    6bdc:	213fff04 	addi	r4,r4,-4
    6be0:	20800017 	ldw	r2,0(r4)
    6be4:	103ffc26 	beq	r2,zero,6bd8 <__any_on+0x34>
    6be8:	00800044 	movi	r2,1
    6bec:	f800283a 	ret
    6bf0:	11bff10e 	bge	r2,r6,6bb8 <__any_on+0x14>
    6bf4:	294007cc 	andi	r5,r5,31
    6bf8:	283fef26 	beq	r5,zero,6bb8 <__any_on+0x14>
    6bfc:	11800144 	addi	r6,r2,5
    6c00:	318d883a 	add	r6,r6,r6
    6c04:	318d883a 	add	r6,r6,r6
    6c08:	218d883a 	add	r6,r4,r6
    6c0c:	31800017 	ldw	r6,0(r6)
    6c10:	314ed83a 	srl	r7,r6,r5
    6c14:	394a983a 	sll	r5,r7,r5
    6c18:	29bff31e 	bne	r5,r6,6be8 <__any_on+0x44>
    6c1c:	003fe606 	br	6bb8 <__any_on+0x14>
    6c20:	0005883a 	mov	r2,zero
    6c24:	f800283a 	ret

00006c28 <_realloc_r>:
    6c28:	defff504 	addi	sp,sp,-44
    6c2c:	dd400615 	stw	r21,24(sp)
    6c30:	dc800315 	stw	r18,12(sp)
    6c34:	dc000115 	stw	r16,4(sp)
    6c38:	dfc00a15 	stw	ra,40(sp)
    6c3c:	df000915 	stw	fp,36(sp)
    6c40:	ddc00815 	stw	r23,32(sp)
    6c44:	dd800715 	stw	r22,28(sp)
    6c48:	dd000515 	stw	r20,20(sp)
    6c4c:	dcc00415 	stw	r19,16(sp)
    6c50:	dc400215 	stw	r17,8(sp)
    6c54:	2821883a 	mov	r16,r5
    6c58:	202b883a 	mov	r21,r4
    6c5c:	3025883a 	mov	r18,r6
    6c60:	28009626 	beq	r5,zero,6ebc <_realloc_r+0x294>
    6c64:	000a0700 	call	a070 <__malloc_lock>
    6c68:	80bfff17 	ldw	r2,-4(r16)
    6c6c:	04ffff04 	movi	r19,-4
    6c70:	90c002c4 	addi	r3,r18,11
    6c74:	01000584 	movi	r4,22
    6c78:	85bffe04 	addi	r22,r16,-8
    6c7c:	14e6703a 	and	r19,r2,r19
    6c80:	20c0372e 	bgeu	r4,r3,6d60 <_realloc_r+0x138>
    6c84:	047ffe04 	movi	r17,-8
    6c88:	1c62703a 	and	r17,r3,r17
    6c8c:	8807883a 	mov	r3,r17
    6c90:	88005a16 	blt	r17,zero,6dfc <_realloc_r+0x1d4>
    6c94:	8c805936 	bltu	r17,r18,6dfc <_realloc_r+0x1d4>
    6c98:	98c0340e 	bge	r19,r3,6d6c <_realloc_r+0x144>
    6c9c:	07000074 	movhi	fp,1
    6ca0:	e701dc04 	addi	fp,fp,1904
    6ca4:	e1400217 	ldw	r5,8(fp)
    6ca8:	b4c9883a 	add	r4,r22,r19
    6cac:	29009026 	beq	r5,r4,6ef0 <_realloc_r+0x2c8>
    6cb0:	21800117 	ldw	r6,4(r4)
    6cb4:	01ffff84 	movi	r7,-2
    6cb8:	31ce703a 	and	r7,r6,r7
    6cbc:	21cf883a 	add	r7,r4,r7
    6cc0:	39c00117 	ldw	r7,4(r7)
    6cc4:	39c0004c 	andi	r7,r7,1
    6cc8:	38004326 	beq	r7,zero,6dd8 <_realloc_r+0x1b0>
    6ccc:	000d883a 	mov	r6,zero
    6cd0:	0009883a 	mov	r4,zero
    6cd4:	1080004c 	andi	r2,r2,1
    6cd8:	10005a1e 	bne	r2,zero,6e44 <_realloc_r+0x21c>
    6cdc:	85fffe17 	ldw	r23,-8(r16)
    6ce0:	00bfff04 	movi	r2,-4
    6ce4:	b5efc83a 	sub	r23,r22,r23
    6ce8:	b9c00117 	ldw	r7,4(r23)
    6cec:	388e703a 	and	r7,r7,r2
    6cf0:	3ccf883a 	add	r7,r7,r19
    6cf4:	20005226 	beq	r4,zero,6e40 <_realloc_r+0x218>
    6cf8:	31e9883a 	add	r20,r6,r7
    6cfc:	2140c726 	beq	r4,r5,701c <_realloc_r+0x3f4>
    6d00:	a0c04f16 	blt	r20,r3,6e40 <_realloc_r+0x218>
    6d04:	20800317 	ldw	r2,12(r4)
    6d08:	20c00217 	ldw	r3,8(r4)
    6d0c:	99bfff04 	addi	r6,r19,-4
    6d10:	01000904 	movi	r4,36
    6d14:	18800315 	stw	r2,12(r3)
    6d18:	10c00215 	stw	r3,8(r2)
    6d1c:	b8c00217 	ldw	r3,8(r23)
    6d20:	b8800317 	ldw	r2,12(r23)
    6d24:	bc800204 	addi	r18,r23,8
    6d28:	18800315 	stw	r2,12(r3)
    6d2c:	10c00215 	stw	r3,8(r2)
    6d30:	2180ed36 	bltu	r4,r6,70e8 <_realloc_r+0x4c0>
    6d34:	008004c4 	movi	r2,19
    6d38:	11809b2e 	bgeu	r2,r6,6fa8 <_realloc_r+0x380>
    6d3c:	80800017 	ldw	r2,0(r16)
    6d40:	b8800215 	stw	r2,8(r23)
    6d44:	80800117 	ldw	r2,4(r16)
    6d48:	b8800315 	stw	r2,12(r23)
    6d4c:	008006c4 	movi	r2,27
    6d50:	1180f936 	bltu	r2,r6,7138 <_realloc_r+0x510>
    6d54:	b8800404 	addi	r2,r23,16
    6d58:	80c00204 	addi	r3,r16,8
    6d5c:	00009406 	br	6fb0 <_realloc_r+0x388>
    6d60:	00c00404 	movi	r3,16
    6d64:	1823883a 	mov	r17,r3
    6d68:	003fca06 	br	6c94 <_realloc_r+0x6c>
    6d6c:	9829883a 	mov	r20,r19
    6d70:	a447c83a 	sub	r3,r20,r17
    6d74:	010003c4 	movi	r4,15
    6d78:	1080004c 	andi	r2,r2,1
    6d7c:	20c02336 	bltu	r4,r3,6e0c <_realloc_r+0x1e4>
    6d80:	1504b03a 	or	r2,r2,r20
    6d84:	b0800115 	stw	r2,4(r22)
    6d88:	b52d883a 	add	r22,r22,r20
    6d8c:	b0800117 	ldw	r2,4(r22)
    6d90:	10800054 	ori	r2,r2,1
    6d94:	b0800115 	stw	r2,4(r22)
    6d98:	a809883a 	mov	r4,r21
    6d9c:	000a0900 	call	a090 <__malloc_unlock>
    6da0:	8025883a 	mov	r18,r16
    6da4:	9005883a 	mov	r2,r18
    6da8:	dfc00a17 	ldw	ra,40(sp)
    6dac:	df000917 	ldw	fp,36(sp)
    6db0:	ddc00817 	ldw	r23,32(sp)
    6db4:	dd800717 	ldw	r22,28(sp)
    6db8:	dd400617 	ldw	r21,24(sp)
    6dbc:	dd000517 	ldw	r20,20(sp)
    6dc0:	dcc00417 	ldw	r19,16(sp)
    6dc4:	dc800317 	ldw	r18,12(sp)
    6dc8:	dc400217 	ldw	r17,8(sp)
    6dcc:	dc000117 	ldw	r16,4(sp)
    6dd0:	dec00b04 	addi	sp,sp,44
    6dd4:	f800283a 	ret
    6dd8:	01ffff04 	movi	r7,-4
    6ddc:	31cc703a 	and	r6,r6,r7
    6de0:	34e9883a 	add	r20,r6,r19
    6de4:	a0ffbb16 	blt	r20,r3,6cd4 <_realloc_r+0xac>
    6de8:	20c00317 	ldw	r3,12(r4)
    6dec:	21000217 	ldw	r4,8(r4)
    6df0:	20c00315 	stw	r3,12(r4)
    6df4:	19000215 	stw	r4,8(r3)
    6df8:	003fdd06 	br	6d70 <_realloc_r+0x148>
    6dfc:	00800304 	movi	r2,12
    6e00:	a8800015 	stw	r2,0(r21)
    6e04:	0025883a 	mov	r18,zero
    6e08:	003fe606 	br	6da4 <_realloc_r+0x17c>
    6e0c:	1444b03a 	or	r2,r2,r17
    6e10:	b0800115 	stw	r2,4(r22)
    6e14:	b44b883a 	add	r5,r22,r17
    6e18:	18800054 	ori	r2,r3,1
    6e1c:	28800115 	stw	r2,4(r5)
    6e20:	28c7883a 	add	r3,r5,r3
    6e24:	18800117 	ldw	r2,4(r3)
    6e28:	a809883a 	mov	r4,r21
    6e2c:	29400204 	addi	r5,r5,8
    6e30:	10800054 	ori	r2,r2,1
    6e34:	18800115 	stw	r2,4(r3)
    6e38:	000441c0 	call	441c <_free_r>
    6e3c:	003fd606 	br	6d98 <_realloc_r+0x170>
    6e40:	38c0330e 	bge	r7,r3,6f10 <_realloc_r+0x2e8>
    6e44:	900b883a 	mov	r5,r18
    6e48:	a809883a 	mov	r4,r21
    6e4c:	0004fb40 	call	4fb4 <_malloc_r>
    6e50:	1025883a 	mov	r18,r2
    6e54:	10001626 	beq	r2,zero,6eb0 <_realloc_r+0x288>
    6e58:	80bfff17 	ldw	r2,-4(r16)
    6e5c:	00ffff84 	movi	r3,-2
    6e60:	913ffe04 	addi	r4,r18,-8
    6e64:	10c6703a 	and	r3,r2,r3
    6e68:	b0c7883a 	add	r3,r22,r3
    6e6c:	20c09926 	beq	r4,r3,70d4 <_realloc_r+0x4ac>
    6e70:	99bfff04 	addi	r6,r19,-4
    6e74:	00800904 	movi	r2,36
    6e78:	11806436 	bltu	r2,r6,700c <_realloc_r+0x3e4>
    6e7c:	00c004c4 	movi	r3,19
    6e80:	19804036 	bltu	r3,r6,6f84 <_realloc_r+0x35c>
    6e84:	9005883a 	mov	r2,r18
    6e88:	8007883a 	mov	r3,r16
    6e8c:	19000017 	ldw	r4,0(r3)
    6e90:	11000015 	stw	r4,0(r2)
    6e94:	19000117 	ldw	r4,4(r3)
    6e98:	11000115 	stw	r4,4(r2)
    6e9c:	18c00217 	ldw	r3,8(r3)
    6ea0:	10c00215 	stw	r3,8(r2)
    6ea4:	a809883a 	mov	r4,r21
    6ea8:	800b883a 	mov	r5,r16
    6eac:	000441c0 	call	441c <_free_r>
    6eb0:	a809883a 	mov	r4,r21
    6eb4:	000a0900 	call	a090 <__malloc_unlock>
    6eb8:	003fba06 	br	6da4 <_realloc_r+0x17c>
    6ebc:	300b883a 	mov	r5,r6
    6ec0:	dfc00a17 	ldw	ra,40(sp)
    6ec4:	df000917 	ldw	fp,36(sp)
    6ec8:	ddc00817 	ldw	r23,32(sp)
    6ecc:	dd800717 	ldw	r22,28(sp)
    6ed0:	dd400617 	ldw	r21,24(sp)
    6ed4:	dd000517 	ldw	r20,20(sp)
    6ed8:	dcc00417 	ldw	r19,16(sp)
    6edc:	dc800317 	ldw	r18,12(sp)
    6ee0:	dc400217 	ldw	r17,8(sp)
    6ee4:	dc000117 	ldw	r16,4(sp)
    6ee8:	dec00b04 	addi	sp,sp,44
    6eec:	0004fb41 	jmpi	4fb4 <_malloc_r>
    6ef0:	29800117 	ldw	r6,4(r5)
    6ef4:	013fff04 	movi	r4,-4
    6ef8:	89c00404 	addi	r7,r17,16
    6efc:	310c703a 	and	r6,r6,r4
    6f00:	34c9883a 	add	r4,r6,r19
    6f04:	21c0340e 	bge	r4,r7,6fd8 <_realloc_r+0x3b0>
    6f08:	2809883a 	mov	r4,r5
    6f0c:	003f7106 	br	6cd4 <_realloc_r+0xac>
    6f10:	b8800317 	ldw	r2,12(r23)
    6f14:	b8c00217 	ldw	r3,8(r23)
    6f18:	99bfff04 	addi	r6,r19,-4
    6f1c:	01000904 	movi	r4,36
    6f20:	18800315 	stw	r2,12(r3)
    6f24:	10c00215 	stw	r3,8(r2)
    6f28:	bc800204 	addi	r18,r23,8
    6f2c:	21807836 	bltu	r4,r6,7110 <_realloc_r+0x4e8>
    6f30:	008004c4 	movi	r2,19
    6f34:	1180732e 	bgeu	r2,r6,7104 <_realloc_r+0x4dc>
    6f38:	80800017 	ldw	r2,0(r16)
    6f3c:	b8800215 	stw	r2,8(r23)
    6f40:	80800117 	ldw	r2,4(r16)
    6f44:	b8800315 	stw	r2,12(r23)
    6f48:	008006c4 	movi	r2,27
    6f4c:	11808936 	bltu	r2,r6,7174 <_realloc_r+0x54c>
    6f50:	b8800404 	addi	r2,r23,16
    6f54:	80c00204 	addi	r3,r16,8
    6f58:	19000017 	ldw	r4,0(r3)
    6f5c:	9021883a 	mov	r16,r18
    6f60:	3829883a 	mov	r20,r7
    6f64:	11000015 	stw	r4,0(r2)
    6f68:	19000117 	ldw	r4,4(r3)
    6f6c:	b82d883a 	mov	r22,r23
    6f70:	11000115 	stw	r4,4(r2)
    6f74:	18c00217 	ldw	r3,8(r3)
    6f78:	10c00215 	stw	r3,8(r2)
    6f7c:	b8800117 	ldw	r2,4(r23)
    6f80:	003f7b06 	br	6d70 <_realloc_r+0x148>
    6f84:	80c00017 	ldw	r3,0(r16)
    6f88:	90c00015 	stw	r3,0(r18)
    6f8c:	80c00117 	ldw	r3,4(r16)
    6f90:	90c00115 	stw	r3,4(r18)
    6f94:	00c006c4 	movi	r3,27
    6f98:	19804636 	bltu	r3,r6,70b4 <_realloc_r+0x48c>
    6f9c:	90800204 	addi	r2,r18,8
    6fa0:	80c00204 	addi	r3,r16,8
    6fa4:	003fb906 	br	6e8c <_realloc_r+0x264>
    6fa8:	9005883a 	mov	r2,r18
    6fac:	8007883a 	mov	r3,r16
    6fb0:	19000017 	ldw	r4,0(r3)
    6fb4:	9021883a 	mov	r16,r18
    6fb8:	b82d883a 	mov	r22,r23
    6fbc:	11000015 	stw	r4,0(r2)
    6fc0:	19000117 	ldw	r4,4(r3)
    6fc4:	11000115 	stw	r4,4(r2)
    6fc8:	18c00217 	ldw	r3,8(r3)
    6fcc:	10c00215 	stw	r3,8(r2)
    6fd0:	b8800117 	ldw	r2,4(r23)
    6fd4:	003f6606 	br	6d70 <_realloc_r+0x148>
    6fd8:	2445c83a 	sub	r2,r4,r17
    6fdc:	b46d883a 	add	r22,r22,r17
    6fe0:	10800054 	ori	r2,r2,1
    6fe4:	b0800115 	stw	r2,4(r22)
    6fe8:	80bfff17 	ldw	r2,-4(r16)
    6fec:	a809883a 	mov	r4,r21
    6ff0:	e5800215 	stw	r22,8(fp)
    6ff4:	1080004c 	andi	r2,r2,1
    6ff8:	88a2b03a 	or	r17,r17,r2
    6ffc:	847fff15 	stw	r17,-4(r16)
    7000:	000a0900 	call	a090 <__malloc_unlock>
    7004:	8025883a 	mov	r18,r16
    7008:	003f6606 	br	6da4 <_realloc_r+0x17c>
    700c:	9009883a 	mov	r4,r18
    7010:	800b883a 	mov	r5,r16
    7014:	00059700 	call	5970 <memmove>
    7018:	003fa206 	br	6ea4 <_realloc_r+0x27c>
    701c:	88800404 	addi	r2,r17,16
    7020:	a0bf8716 	blt	r20,r2,6e40 <_realloc_r+0x218>
    7024:	b8800317 	ldw	r2,12(r23)
    7028:	b8c00217 	ldw	r3,8(r23)
    702c:	99bfff04 	addi	r6,r19,-4
    7030:	01000904 	movi	r4,36
    7034:	18800315 	stw	r2,12(r3)
    7038:	10c00215 	stw	r3,8(r2)
    703c:	bc800204 	addi	r18,r23,8
    7040:	21806536 	bltu	r4,r6,71d8 <_realloc_r+0x5b0>
    7044:	008004c4 	movi	r2,19
    7048:	1180592e 	bgeu	r2,r6,71b0 <_realloc_r+0x588>
    704c:	80800017 	ldw	r2,0(r16)
    7050:	b8800215 	stw	r2,8(r23)
    7054:	80800117 	ldw	r2,4(r16)
    7058:	b8800315 	stw	r2,12(r23)
    705c:	008006c4 	movi	r2,27
    7060:	11806136 	bltu	r2,r6,71e8 <_realloc_r+0x5c0>
    7064:	b8800404 	addi	r2,r23,16
    7068:	80c00204 	addi	r3,r16,8
    706c:	19000017 	ldw	r4,0(r3)
    7070:	11000015 	stw	r4,0(r2)
    7074:	19000117 	ldw	r4,4(r3)
    7078:	11000115 	stw	r4,4(r2)
    707c:	18c00217 	ldw	r3,8(r3)
    7080:	10c00215 	stw	r3,8(r2)
    7084:	a447c83a 	sub	r3,r20,r17
    7088:	bc45883a 	add	r2,r23,r17
    708c:	18c00054 	ori	r3,r3,1
    7090:	10c00115 	stw	r3,4(r2)
    7094:	b8c00117 	ldw	r3,4(r23)
    7098:	e0800215 	stw	r2,8(fp)
    709c:	a809883a 	mov	r4,r21
    70a0:	1880004c 	andi	r2,r3,1
    70a4:	88a2b03a 	or	r17,r17,r2
    70a8:	bc400115 	stw	r17,4(r23)
    70ac:	000a0900 	call	a090 <__malloc_unlock>
    70b0:	003f3c06 	br	6da4 <_realloc_r+0x17c>
    70b4:	80c00217 	ldw	r3,8(r16)
    70b8:	90c00215 	stw	r3,8(r18)
    70bc:	80c00317 	ldw	r3,12(r16)
    70c0:	90c00315 	stw	r3,12(r18)
    70c4:	30802426 	beq	r6,r2,7158 <_realloc_r+0x530>
    70c8:	90800404 	addi	r2,r18,16
    70cc:	80c00404 	addi	r3,r16,16
    70d0:	003f6e06 	br	6e8c <_realloc_r+0x264>
    70d4:	953fff17 	ldw	r20,-4(r18)
    70d8:	00ffff04 	movi	r3,-4
    70dc:	a0e8703a 	and	r20,r20,r3
    70e0:	a4e9883a 	add	r20,r20,r19
    70e4:	003f2206 	br	6d70 <_realloc_r+0x148>
    70e8:	800b883a 	mov	r5,r16
    70ec:	9009883a 	mov	r4,r18
    70f0:	00059700 	call	5970 <memmove>
    70f4:	9021883a 	mov	r16,r18
    70f8:	b8800117 	ldw	r2,4(r23)
    70fc:	b82d883a 	mov	r22,r23
    7100:	003f1b06 	br	6d70 <_realloc_r+0x148>
    7104:	9005883a 	mov	r2,r18
    7108:	8007883a 	mov	r3,r16
    710c:	003f9206 	br	6f58 <_realloc_r+0x330>
    7110:	800b883a 	mov	r5,r16
    7114:	9009883a 	mov	r4,r18
    7118:	d9c00015 	stw	r7,0(sp)
    711c:	00059700 	call	5970 <memmove>
    7120:	d9c00017 	ldw	r7,0(sp)
    7124:	9021883a 	mov	r16,r18
    7128:	b8800117 	ldw	r2,4(r23)
    712c:	3829883a 	mov	r20,r7
    7130:	b82d883a 	mov	r22,r23
    7134:	003f0e06 	br	6d70 <_realloc_r+0x148>
    7138:	80800217 	ldw	r2,8(r16)
    713c:	b8800415 	stw	r2,16(r23)
    7140:	80800317 	ldw	r2,12(r16)
    7144:	b8800515 	stw	r2,20(r23)
    7148:	31001226 	beq	r6,r4,7194 <_realloc_r+0x56c>
    714c:	b8800604 	addi	r2,r23,24
    7150:	80c00404 	addi	r3,r16,16
    7154:	003f9606 	br	6fb0 <_realloc_r+0x388>
    7158:	81000417 	ldw	r4,16(r16)
    715c:	90800604 	addi	r2,r18,24
    7160:	80c00604 	addi	r3,r16,24
    7164:	91000415 	stw	r4,16(r18)
    7168:	81000517 	ldw	r4,20(r16)
    716c:	91000515 	stw	r4,20(r18)
    7170:	003f4606 	br	6e8c <_realloc_r+0x264>
    7174:	80800217 	ldw	r2,8(r16)
    7178:	b8800415 	stw	r2,16(r23)
    717c:	80800317 	ldw	r2,12(r16)
    7180:	b8800515 	stw	r2,20(r23)
    7184:	31000d26 	beq	r6,r4,71bc <_realloc_r+0x594>
    7188:	b8800604 	addi	r2,r23,24
    718c:	80c00404 	addi	r3,r16,16
    7190:	003f7106 	br	6f58 <_realloc_r+0x330>
    7194:	81000417 	ldw	r4,16(r16)
    7198:	b8800804 	addi	r2,r23,32
    719c:	80c00604 	addi	r3,r16,24
    71a0:	b9000615 	stw	r4,24(r23)
    71a4:	81000517 	ldw	r4,20(r16)
    71a8:	b9000715 	stw	r4,28(r23)
    71ac:	003f8006 	br	6fb0 <_realloc_r+0x388>
    71b0:	9005883a 	mov	r2,r18
    71b4:	8007883a 	mov	r3,r16
    71b8:	003fac06 	br	706c <_realloc_r+0x444>
    71bc:	81000417 	ldw	r4,16(r16)
    71c0:	b8800804 	addi	r2,r23,32
    71c4:	80c00604 	addi	r3,r16,24
    71c8:	b9000615 	stw	r4,24(r23)
    71cc:	81000517 	ldw	r4,20(r16)
    71d0:	b9000715 	stw	r4,28(r23)
    71d4:	003f6006 	br	6f58 <_realloc_r+0x330>
    71d8:	9009883a 	mov	r4,r18
    71dc:	800b883a 	mov	r5,r16
    71e0:	00059700 	call	5970 <memmove>
    71e4:	003fa706 	br	7084 <_realloc_r+0x45c>
    71e8:	80800217 	ldw	r2,8(r16)
    71ec:	b8800415 	stw	r2,16(r23)
    71f0:	80800317 	ldw	r2,12(r16)
    71f4:	b8800515 	stw	r2,20(r23)
    71f8:	31000326 	beq	r6,r4,7208 <_realloc_r+0x5e0>
    71fc:	b8800604 	addi	r2,r23,24
    7200:	80c00404 	addi	r3,r16,16
    7204:	003f9906 	br	706c <_realloc_r+0x444>
    7208:	81000417 	ldw	r4,16(r16)
    720c:	b8800804 	addi	r2,r23,32
    7210:	80c00604 	addi	r3,r16,24
    7214:	b9000615 	stw	r4,24(r23)
    7218:	81000517 	ldw	r4,20(r16)
    721c:	b9000715 	stw	r4,28(r23)
    7220:	003f9206 	br	706c <_realloc_r+0x444>

00007224 <__isinfd>:
    7224:	0105c83a 	sub	r2,zero,r4
    7228:	1108b03a 	or	r4,r2,r4
    722c:	2004d7fa 	srli	r2,r4,31
    7230:	00e00034 	movhi	r3,32768
    7234:	18ffffc4 	addi	r3,r3,-1
    7238:	28ca703a 	and	r5,r5,r3
    723c:	1144b03a 	or	r2,r2,r5
    7240:	00dffc34 	movhi	r3,32752
    7244:	1885c83a 	sub	r2,r3,r2
    7248:	0087c83a 	sub	r3,zero,r2
    724c:	1884b03a 	or	r2,r3,r2
    7250:	1005d7fa 	srai	r2,r2,31
    7254:	10800044 	addi	r2,r2,1
    7258:	f800283a 	ret

0000725c <__isnand>:
    725c:	0105c83a 	sub	r2,zero,r4
    7260:	1108b03a 	or	r4,r2,r4
    7264:	2004d7fa 	srli	r2,r4,31
    7268:	00e00034 	movhi	r3,32768
    726c:	18ffffc4 	addi	r3,r3,-1
    7270:	28ca703a 	and	r5,r5,r3
    7274:	1144b03a 	or	r2,r2,r5
    7278:	00dffc34 	movhi	r3,32752
    727c:	1885c83a 	sub	r2,r3,r2
    7280:	1004d7fa 	srli	r2,r2,31
    7284:	f800283a 	ret

00007288 <_sbrk_r>:
    7288:	defffd04 	addi	sp,sp,-12
    728c:	dc400115 	stw	r17,4(sp)
    7290:	dc000015 	stw	r16,0(sp)
    7294:	2023883a 	mov	r17,r4
    7298:	04000074 	movhi	r16,1
    729c:	84077a04 	addi	r16,r16,7656
    72a0:	2809883a 	mov	r4,r5
    72a4:	dfc00215 	stw	ra,8(sp)
    72a8:	80000015 	stw	zero,0(r16)
    72ac:	000a2740 	call	a274 <sbrk>
    72b0:	00ffffc4 	movi	r3,-1
    72b4:	10c00526 	beq	r2,r3,72cc <_sbrk_r+0x44>
    72b8:	dfc00217 	ldw	ra,8(sp)
    72bc:	dc400117 	ldw	r17,4(sp)
    72c0:	dc000017 	ldw	r16,0(sp)
    72c4:	dec00304 	addi	sp,sp,12
    72c8:	f800283a 	ret
    72cc:	80c00017 	ldw	r3,0(r16)
    72d0:	183ff926 	beq	r3,zero,72b8 <_sbrk_r+0x30>
    72d4:	88c00015 	stw	r3,0(r17)
    72d8:	dfc00217 	ldw	ra,8(sp)
    72dc:	dc400117 	ldw	r17,4(sp)
    72e0:	dc000017 	ldw	r16,0(sp)
    72e4:	dec00304 	addi	sp,sp,12
    72e8:	f800283a 	ret

000072ec <__sread>:
    72ec:	defffe04 	addi	sp,sp,-8
    72f0:	dc000015 	stw	r16,0(sp)
    72f4:	2821883a 	mov	r16,r5
    72f8:	2940038f 	ldh	r5,14(r5)
    72fc:	dfc00115 	stw	ra,4(sp)
    7300:	00078f40 	call	78f4 <_read_r>
    7304:	10000716 	blt	r2,zero,7324 <__sread+0x38>
    7308:	80c01417 	ldw	r3,80(r16)
    730c:	1887883a 	add	r3,r3,r2
    7310:	80c01415 	stw	r3,80(r16)
    7314:	dfc00117 	ldw	ra,4(sp)
    7318:	dc000017 	ldw	r16,0(sp)
    731c:	dec00204 	addi	sp,sp,8
    7320:	f800283a 	ret
    7324:	80c0030b 	ldhu	r3,12(r16)
    7328:	18fbffcc 	andi	r3,r3,61439
    732c:	80c0030d 	sth	r3,12(r16)
    7330:	dfc00117 	ldw	ra,4(sp)
    7334:	dc000017 	ldw	r16,0(sp)
    7338:	dec00204 	addi	sp,sp,8
    733c:	f800283a 	ret

00007340 <__swrite>:
    7340:	2880030b 	ldhu	r2,12(r5)
    7344:	defffb04 	addi	sp,sp,-20
    7348:	dcc00315 	stw	r19,12(sp)
    734c:	10c0400c 	andi	r3,r2,256
    7350:	18ffffcc 	andi	r3,r3,65535
    7354:	18e0001c 	xori	r3,r3,32768
    7358:	dc800215 	stw	r18,8(sp)
    735c:	dc400115 	stw	r17,4(sp)
    7360:	dc000015 	stw	r16,0(sp)
    7364:	dfc00415 	stw	ra,16(sp)
    7368:	18e00004 	addi	r3,r3,-32768
    736c:	2821883a 	mov	r16,r5
    7370:	2027883a 	mov	r19,r4
    7374:	3025883a 	mov	r18,r6
    7378:	3823883a 	mov	r17,r7
    737c:	18000526 	beq	r3,zero,7394 <__swrite+0x54>
    7380:	2940038f 	ldh	r5,14(r5)
    7384:	000d883a 	mov	r6,zero
    7388:	01c00084 	movi	r7,2
    738c:	00078880 	call	7888 <_lseek_r>
    7390:	8080030b 	ldhu	r2,12(r16)
    7394:	8140038f 	ldh	r5,14(r16)
    7398:	10bbffcc 	andi	r2,r2,61439
    739c:	9809883a 	mov	r4,r19
    73a0:	900d883a 	mov	r6,r18
    73a4:	880f883a 	mov	r7,r17
    73a8:	8080030d 	sth	r2,12(r16)
    73ac:	dfc00417 	ldw	ra,16(sp)
    73b0:	dcc00317 	ldw	r19,12(sp)
    73b4:	dc800217 	ldw	r18,8(sp)
    73b8:	dc400117 	ldw	r17,4(sp)
    73bc:	dc000017 	ldw	r16,0(sp)
    73c0:	dec00504 	addi	sp,sp,20
    73c4:	00074d01 	jmpi	74d0 <_write_r>

000073c8 <__sseek>:
    73c8:	defffe04 	addi	sp,sp,-8
    73cc:	dc000015 	stw	r16,0(sp)
    73d0:	2821883a 	mov	r16,r5
    73d4:	2940038f 	ldh	r5,14(r5)
    73d8:	dfc00115 	stw	ra,4(sp)
    73dc:	00078880 	call	7888 <_lseek_r>
    73e0:	00ffffc4 	movi	r3,-1
    73e4:	10c00826 	beq	r2,r3,7408 <__sseek+0x40>
    73e8:	80c0030b 	ldhu	r3,12(r16)
    73ec:	80801415 	stw	r2,80(r16)
    73f0:	18c40014 	ori	r3,r3,4096
    73f4:	80c0030d 	sth	r3,12(r16)
    73f8:	dfc00117 	ldw	ra,4(sp)
    73fc:	dc000017 	ldw	r16,0(sp)
    7400:	dec00204 	addi	sp,sp,8
    7404:	f800283a 	ret
    7408:	80c0030b 	ldhu	r3,12(r16)
    740c:	18fbffcc 	andi	r3,r3,61439
    7410:	80c0030d 	sth	r3,12(r16)
    7414:	dfc00117 	ldw	ra,4(sp)
    7418:	dc000017 	ldw	r16,0(sp)
    741c:	dec00204 	addi	sp,sp,8
    7420:	f800283a 	ret

00007424 <__sclose>:
    7424:	2940038f 	ldh	r5,14(r5)
    7428:	00076081 	jmpi	7608 <_close_r>

0000742c <strcmp>:
    742c:	2904b03a 	or	r2,r5,r4
    7430:	108000cc 	andi	r2,r2,3
    7434:	1000171e 	bne	r2,zero,7494 <strcmp+0x68>
    7438:	20800017 	ldw	r2,0(r4)
    743c:	28c00017 	ldw	r3,0(r5)
    7440:	10c0141e 	bne	r2,r3,7494 <strcmp+0x68>
    7444:	027fbff4 	movhi	r9,65279
    7448:	4a7fbfc4 	addi	r9,r9,-257
    744c:	1247883a 	add	r3,r2,r9
    7450:	0084303a 	nor	r2,zero,r2
    7454:	1884703a 	and	r2,r3,r2
    7458:	02202074 	movhi	r8,32897
    745c:	42202004 	addi	r8,r8,-32640
    7460:	1204703a 	and	r2,r2,r8
    7464:	10000226 	beq	r2,zero,7470 <strcmp+0x44>
    7468:	00001706 	br	74c8 <strcmp+0x9c>
    746c:	3000161e 	bne	r6,zero,74c8 <strcmp+0x9c>
    7470:	21000104 	addi	r4,r4,4
    7474:	20800017 	ldw	r2,0(r4)
    7478:	29400104 	addi	r5,r5,4
    747c:	28c00017 	ldw	r3,0(r5)
    7480:	124f883a 	add	r7,r2,r9
    7484:	008c303a 	nor	r6,zero,r2
    7488:	398c703a 	and	r6,r7,r6
    748c:	320c703a 	and	r6,r6,r8
    7490:	10fff626 	beq	r2,r3,746c <strcmp+0x40>
    7494:	20800007 	ldb	r2,0(r4)
    7498:	1000051e 	bne	r2,zero,74b0 <strcmp+0x84>
    749c:	00000606 	br	74b8 <strcmp+0x8c>
    74a0:	21000044 	addi	r4,r4,1
    74a4:	20800007 	ldb	r2,0(r4)
    74a8:	29400044 	addi	r5,r5,1
    74ac:	10000226 	beq	r2,zero,74b8 <strcmp+0x8c>
    74b0:	28c00007 	ldb	r3,0(r5)
    74b4:	10fffa26 	beq	r2,r3,74a0 <strcmp+0x74>
    74b8:	20c00003 	ldbu	r3,0(r4)
    74bc:	28800003 	ldbu	r2,0(r5)
    74c0:	1885c83a 	sub	r2,r3,r2
    74c4:	f800283a 	ret
    74c8:	0005883a 	mov	r2,zero
    74cc:	f800283a 	ret

000074d0 <_write_r>:
    74d0:	defffd04 	addi	sp,sp,-12
    74d4:	dc400115 	stw	r17,4(sp)
    74d8:	dc000015 	stw	r16,0(sp)
    74dc:	2023883a 	mov	r17,r4
    74e0:	04000074 	movhi	r16,1
    74e4:	84077a04 	addi	r16,r16,7656
    74e8:	2809883a 	mov	r4,r5
    74ec:	300b883a 	mov	r5,r6
    74f0:	380d883a 	mov	r6,r7
    74f4:	dfc00215 	stw	ra,8(sp)
    74f8:	80000015 	stw	zero,0(r16)
    74fc:	000a3740 	call	a374 <write>
    7500:	00ffffc4 	movi	r3,-1
    7504:	10c00526 	beq	r2,r3,751c <_write_r+0x4c>
    7508:	dfc00217 	ldw	ra,8(sp)
    750c:	dc400117 	ldw	r17,4(sp)
    7510:	dc000017 	ldw	r16,0(sp)
    7514:	dec00304 	addi	sp,sp,12
    7518:	f800283a 	ret
    751c:	80c00017 	ldw	r3,0(r16)
    7520:	183ff926 	beq	r3,zero,7508 <_write_r+0x38>
    7524:	88c00015 	stw	r3,0(r17)
    7528:	dfc00217 	ldw	ra,8(sp)
    752c:	dc400117 	ldw	r17,4(sp)
    7530:	dc000017 	ldw	r16,0(sp)
    7534:	dec00304 	addi	sp,sp,12
    7538:	f800283a 	ret

0000753c <_calloc_r>:
    753c:	defffe04 	addi	sp,sp,-8
    7540:	dc000015 	stw	r16,0(sp)
    7544:	2021883a 	mov	r16,r4
    7548:	3009883a 	mov	r4,r6
    754c:	dfc00115 	stw	ra,4(sp)
    7550:	00094480 	call	9448 <__mulsi3>
    7554:	8009883a 	mov	r4,r16
    7558:	100b883a 	mov	r5,r2
    755c:	0004fb40 	call	4fb4 <_malloc_r>
    7560:	1021883a 	mov	r16,r2
    7564:	10000c26 	beq	r2,zero,7598 <_calloc_r+0x5c>
    7568:	11bfff17 	ldw	r6,-4(r2)
    756c:	00ffff04 	movi	r3,-4
    7570:	00800904 	movi	r2,36
    7574:	30cc703a 	and	r6,r6,r3
    7578:	30cd883a 	add	r6,r6,r3
    757c:	11801436 	bltu	r2,r6,75d0 <_calloc_r+0x94>
    7580:	00c004c4 	movi	r3,19
    7584:	19800936 	bltu	r3,r6,75ac <_calloc_r+0x70>
    7588:	8005883a 	mov	r2,r16
    758c:	10000015 	stw	zero,0(r2)
    7590:	10000115 	stw	zero,4(r2)
    7594:	10000215 	stw	zero,8(r2)
    7598:	8005883a 	mov	r2,r16
    759c:	dfc00117 	ldw	ra,4(sp)
    75a0:	dc000017 	ldw	r16,0(sp)
    75a4:	dec00204 	addi	sp,sp,8
    75a8:	f800283a 	ret
    75ac:	80000015 	stw	zero,0(r16)
    75b0:	80000115 	stw	zero,4(r16)
    75b4:	00c006c4 	movi	r3,27
    75b8:	19800d2e 	bgeu	r3,r6,75f0 <_calloc_r+0xb4>
    75bc:	80000215 	stw	zero,8(r16)
    75c0:	80000315 	stw	zero,12(r16)
    75c4:	30800c26 	beq	r6,r2,75f8 <_calloc_r+0xbc>
    75c8:	80800404 	addi	r2,r16,16
    75cc:	003fef06 	br	758c <_calloc_r+0x50>
    75d0:	8009883a 	mov	r4,r16
    75d4:	000b883a 	mov	r5,zero
    75d8:	0005afc0 	call	5afc <memset>
    75dc:	8005883a 	mov	r2,r16
    75e0:	dfc00117 	ldw	ra,4(sp)
    75e4:	dc000017 	ldw	r16,0(sp)
    75e8:	dec00204 	addi	sp,sp,8
    75ec:	f800283a 	ret
    75f0:	80800204 	addi	r2,r16,8
    75f4:	003fe506 	br	758c <_calloc_r+0x50>
    75f8:	80000415 	stw	zero,16(r16)
    75fc:	80000515 	stw	zero,20(r16)
    7600:	80800604 	addi	r2,r16,24
    7604:	003fe106 	br	758c <_calloc_r+0x50>

00007608 <_close_r>:
    7608:	defffd04 	addi	sp,sp,-12
    760c:	dc400115 	stw	r17,4(sp)
    7610:	dc000015 	stw	r16,0(sp)
    7614:	2023883a 	mov	r17,r4
    7618:	04000074 	movhi	r16,1
    761c:	84077a04 	addi	r16,r16,7656
    7620:	2809883a 	mov	r4,r5
    7624:	dfc00215 	stw	ra,8(sp)
    7628:	80000015 	stw	zero,0(r16)
    762c:	0009afc0 	call	9afc <close>
    7630:	00ffffc4 	movi	r3,-1
    7634:	10c00526 	beq	r2,r3,764c <_close_r+0x44>
    7638:	dfc00217 	ldw	ra,8(sp)
    763c:	dc400117 	ldw	r17,4(sp)
    7640:	dc000017 	ldw	r16,0(sp)
    7644:	dec00304 	addi	sp,sp,12
    7648:	f800283a 	ret
    764c:	80c00017 	ldw	r3,0(r16)
    7650:	183ff926 	beq	r3,zero,7638 <_close_r+0x30>
    7654:	88c00015 	stw	r3,0(r17)
    7658:	dfc00217 	ldw	ra,8(sp)
    765c:	dc400117 	ldw	r17,4(sp)
    7660:	dc000017 	ldw	r16,0(sp)
    7664:	dec00304 	addi	sp,sp,12
    7668:	f800283a 	ret

0000766c <_fclose_r>:
    766c:	defffc04 	addi	sp,sp,-16
    7670:	dc400115 	stw	r17,4(sp)
    7674:	dc000015 	stw	r16,0(sp)
    7678:	dfc00315 	stw	ra,12(sp)
    767c:	dc800215 	stw	r18,8(sp)
    7680:	2821883a 	mov	r16,r5
    7684:	2023883a 	mov	r17,r4
    7688:	28003426 	beq	r5,zero,775c <_fclose_r+0xf0>
    768c:	00042a00 	call	42a0 <__sfp_lock_acquire>
    7690:	88000226 	beq	r17,zero,769c <_fclose_r+0x30>
    7694:	88800e17 	ldw	r2,56(r17)
    7698:	10003826 	beq	r2,zero,777c <_fclose_r+0x110>
    769c:	8080030f 	ldh	r2,12(r16)
    76a0:	10002526 	beq	r2,zero,7738 <_fclose_r+0xcc>
    76a4:	8809883a 	mov	r4,r17
    76a8:	800b883a 	mov	r5,r16
    76ac:	0003ddc0 	call	3ddc <_fflush_r>
    76b0:	1025883a 	mov	r18,r2
    76b4:	80800b17 	ldw	r2,44(r16)
    76b8:	10000426 	beq	r2,zero,76cc <_fclose_r+0x60>
    76bc:	81400717 	ldw	r5,28(r16)
    76c0:	8809883a 	mov	r4,r17
    76c4:	103ee83a 	callr	r2
    76c8:	10003516 	blt	r2,zero,77a0 <_fclose_r+0x134>
    76cc:	8080030b 	ldhu	r2,12(r16)
    76d0:	1080200c 	andi	r2,r2,128
    76d4:	10bfffcc 	andi	r2,r2,65535
    76d8:	10a0001c 	xori	r2,r2,32768
    76dc:	10a00004 	addi	r2,r2,-32768
    76e0:	10002b1e 	bne	r2,zero,7790 <_fclose_r+0x124>
    76e4:	81400c17 	ldw	r5,48(r16)
    76e8:	28000526 	beq	r5,zero,7700 <_fclose_r+0x94>
    76ec:	80801004 	addi	r2,r16,64
    76f0:	28800226 	beq	r5,r2,76fc <_fclose_r+0x90>
    76f4:	8809883a 	mov	r4,r17
    76f8:	000441c0 	call	441c <_free_r>
    76fc:	80000c15 	stw	zero,48(r16)
    7700:	81401117 	ldw	r5,68(r16)
    7704:	28000326 	beq	r5,zero,7714 <_fclose_r+0xa8>
    7708:	8809883a 	mov	r4,r17
    770c:	000441c0 	call	441c <_free_r>
    7710:	80001115 	stw	zero,68(r16)
    7714:	8000030d 	sth	zero,12(r16)
    7718:	00042a40 	call	42a4 <__sfp_lock_release>
    771c:	9005883a 	mov	r2,r18
    7720:	dfc00317 	ldw	ra,12(sp)
    7724:	dc800217 	ldw	r18,8(sp)
    7728:	dc400117 	ldw	r17,4(sp)
    772c:	dc000017 	ldw	r16,0(sp)
    7730:	dec00404 	addi	sp,sp,16
    7734:	f800283a 	ret
    7738:	00042a40 	call	42a4 <__sfp_lock_release>
    773c:	0025883a 	mov	r18,zero
    7740:	9005883a 	mov	r2,r18
    7744:	dfc00317 	ldw	ra,12(sp)
    7748:	dc800217 	ldw	r18,8(sp)
    774c:	dc400117 	ldw	r17,4(sp)
    7750:	dc000017 	ldw	r16,0(sp)
    7754:	dec00404 	addi	sp,sp,16
    7758:	f800283a 	ret
    775c:	0025883a 	mov	r18,zero
    7760:	9005883a 	mov	r2,r18
    7764:	dfc00317 	ldw	ra,12(sp)
    7768:	dc800217 	ldw	r18,8(sp)
    776c:	dc400117 	ldw	r17,4(sp)
    7770:	dc000017 	ldw	r16,0(sp)
    7774:	dec00404 	addi	sp,sp,16
    7778:	f800283a 	ret
    777c:	8809883a 	mov	r4,r17
    7780:	00040980 	call	4098 <__sinit>
    7784:	8080030f 	ldh	r2,12(r16)
    7788:	103fc61e 	bne	r2,zero,76a4 <_fclose_r+0x38>
    778c:	003fea06 	br	7738 <_fclose_r+0xcc>
    7790:	81400417 	ldw	r5,16(r16)
    7794:	8809883a 	mov	r4,r17
    7798:	000441c0 	call	441c <_free_r>
    779c:	003fd106 	br	76e4 <_fclose_r+0x78>
    77a0:	04bfffc4 	movi	r18,-1
    77a4:	003fc906 	br	76cc <_fclose_r+0x60>

000077a8 <fclose>:
    77a8:	00800074 	movhi	r2,1
    77ac:	10876104 	addi	r2,r2,7556
    77b0:	200b883a 	mov	r5,r4
    77b4:	11000017 	ldw	r4,0(r2)
    77b8:	000766c1 	jmpi	766c <_fclose_r>

000077bc <_fstat_r>:
    77bc:	defffd04 	addi	sp,sp,-12
    77c0:	dc400115 	stw	r17,4(sp)
    77c4:	dc000015 	stw	r16,0(sp)
    77c8:	2023883a 	mov	r17,r4
    77cc:	04000074 	movhi	r16,1
    77d0:	84077a04 	addi	r16,r16,7656
    77d4:	2809883a 	mov	r4,r5
    77d8:	300b883a 	mov	r5,r6
    77dc:	dfc00215 	stw	ra,8(sp)
    77e0:	80000015 	stw	zero,0(r16)
    77e4:	0009c440 	call	9c44 <fstat>
    77e8:	00ffffc4 	movi	r3,-1
    77ec:	10c00526 	beq	r2,r3,7804 <_fstat_r+0x48>
    77f0:	dfc00217 	ldw	ra,8(sp)
    77f4:	dc400117 	ldw	r17,4(sp)
    77f8:	dc000017 	ldw	r16,0(sp)
    77fc:	dec00304 	addi	sp,sp,12
    7800:	f800283a 	ret
    7804:	80c00017 	ldw	r3,0(r16)
    7808:	183ff926 	beq	r3,zero,77f0 <_fstat_r+0x34>
    780c:	88c00015 	stw	r3,0(r17)
    7810:	dfc00217 	ldw	ra,8(sp)
    7814:	dc400117 	ldw	r17,4(sp)
    7818:	dc000017 	ldw	r16,0(sp)
    781c:	dec00304 	addi	sp,sp,12
    7820:	f800283a 	ret

00007824 <_isatty_r>:
    7824:	defffd04 	addi	sp,sp,-12
    7828:	dc400115 	stw	r17,4(sp)
    782c:	dc000015 	stw	r16,0(sp)
    7830:	2023883a 	mov	r17,r4
    7834:	04000074 	movhi	r16,1
    7838:	84077a04 	addi	r16,r16,7656
    783c:	2809883a 	mov	r4,r5
    7840:	dfc00215 	stw	ra,8(sp)
    7844:	80000015 	stw	zero,0(r16)
    7848:	0009d440 	call	9d44 <isatty>
    784c:	00ffffc4 	movi	r3,-1
    7850:	10c00526 	beq	r2,r3,7868 <_isatty_r+0x44>
    7854:	dfc00217 	ldw	ra,8(sp)
    7858:	dc400117 	ldw	r17,4(sp)
    785c:	dc000017 	ldw	r16,0(sp)
    7860:	dec00304 	addi	sp,sp,12
    7864:	f800283a 	ret
    7868:	80c00017 	ldw	r3,0(r16)
    786c:	183ff926 	beq	r3,zero,7854 <_isatty_r+0x30>
    7870:	88c00015 	stw	r3,0(r17)
    7874:	dfc00217 	ldw	ra,8(sp)
    7878:	dc400117 	ldw	r17,4(sp)
    787c:	dc000017 	ldw	r16,0(sp)
    7880:	dec00304 	addi	sp,sp,12
    7884:	f800283a 	ret

00007888 <_lseek_r>:
    7888:	defffd04 	addi	sp,sp,-12
    788c:	dc400115 	stw	r17,4(sp)
    7890:	dc000015 	stw	r16,0(sp)
    7894:	2023883a 	mov	r17,r4
    7898:	04000074 	movhi	r16,1
    789c:	84077a04 	addi	r16,r16,7656
    78a0:	2809883a 	mov	r4,r5
    78a4:	300b883a 	mov	r5,r6
    78a8:	380d883a 	mov	r6,r7
    78ac:	dfc00215 	stw	ra,8(sp)
    78b0:	80000015 	stw	zero,0(r16)
    78b4:	0009f240 	call	9f24 <lseek>
    78b8:	00ffffc4 	movi	r3,-1
    78bc:	10c00526 	beq	r2,r3,78d4 <_lseek_r+0x4c>
    78c0:	dfc00217 	ldw	ra,8(sp)
    78c4:	dc400117 	ldw	r17,4(sp)
    78c8:	dc000017 	ldw	r16,0(sp)
    78cc:	dec00304 	addi	sp,sp,12
    78d0:	f800283a 	ret
    78d4:	80c00017 	ldw	r3,0(r16)
    78d8:	183ff926 	beq	r3,zero,78c0 <_lseek_r+0x38>
    78dc:	88c00015 	stw	r3,0(r17)
    78e0:	dfc00217 	ldw	ra,8(sp)
    78e4:	dc400117 	ldw	r17,4(sp)
    78e8:	dc000017 	ldw	r16,0(sp)
    78ec:	dec00304 	addi	sp,sp,12
    78f0:	f800283a 	ret

000078f4 <_read_r>:
    78f4:	defffd04 	addi	sp,sp,-12
    78f8:	dc400115 	stw	r17,4(sp)
    78fc:	dc000015 	stw	r16,0(sp)
    7900:	2023883a 	mov	r17,r4
    7904:	04000074 	movhi	r16,1
    7908:	84077a04 	addi	r16,r16,7656
    790c:	2809883a 	mov	r4,r5
    7910:	300b883a 	mov	r5,r6
    7914:	380d883a 	mov	r6,r7
    7918:	dfc00215 	stw	ra,8(sp)
    791c:	80000015 	stw	zero,0(r16)
    7920:	000a1000 	call	a100 <read>
    7924:	00ffffc4 	movi	r3,-1
    7928:	10c00526 	beq	r2,r3,7940 <_read_r+0x4c>
    792c:	dfc00217 	ldw	ra,8(sp)
    7930:	dc400117 	ldw	r17,4(sp)
    7934:	dc000017 	ldw	r16,0(sp)
    7938:	dec00304 	addi	sp,sp,12
    793c:	f800283a 	ret
    7940:	80c00017 	ldw	r3,0(r16)
    7944:	183ff926 	beq	r3,zero,792c <_read_r+0x38>
    7948:	88c00015 	stw	r3,0(r17)
    794c:	dfc00217 	ldw	ra,8(sp)
    7950:	dc400117 	ldw	r17,4(sp)
    7954:	dc000017 	ldw	r16,0(sp)
    7958:	dec00304 	addi	sp,sp,12
    795c:	f800283a 	ret

00007960 <__udivdi3>:
    7960:	defff504 	addi	sp,sp,-44
    7964:	dd000515 	stw	r20,20(sp)
    7968:	dcc00415 	stw	r19,16(sp)
    796c:	dc800315 	stw	r18,12(sp)
    7970:	dc400215 	stw	r17,8(sp)
    7974:	dc000115 	stw	r16,4(sp)
    7978:	dfc00a15 	stw	ra,40(sp)
    797c:	df000915 	stw	fp,36(sp)
    7980:	ddc00815 	stw	r23,32(sp)
    7984:	dd800715 	stw	r22,28(sp)
    7988:	dd400615 	stw	r21,24(sp)
    798c:	2025883a 	mov	r18,r4
    7990:	2823883a 	mov	r17,r5
    7994:	3021883a 	mov	r16,r6
    7998:	2027883a 	mov	r19,r4
    799c:	2829883a 	mov	r20,r5
    79a0:	3800451e 	bne	r7,zero,7ab8 <__udivdi3+0x158>
    79a4:	2980652e 	bgeu	r5,r6,7b3c <__udivdi3+0x1dc>
    79a8:	00bfffd4 	movui	r2,65535
    79ac:	1180b436 	bltu	r2,r6,7c80 <__udivdi3+0x320>
    79b0:	00803fc4 	movi	r2,255
    79b4:	11816636 	bltu	r2,r6,7f50 <__udivdi3+0x5f0>
    79b8:	0005883a 	mov	r2,zero
    79bc:	0007883a 	mov	r3,zero
    79c0:	3084d83a 	srl	r2,r6,r2
    79c4:	01000074 	movhi	r4,1
    79c8:	21008c04 	addi	r4,r4,560
    79cc:	2085883a 	add	r2,r4,r2
    79d0:	10800003 	ldbu	r2,0(r2)
    79d4:	10c7883a 	add	r3,r2,r3
    79d8:	00800804 	movi	r2,32
    79dc:	10c5c83a 	sub	r2,r2,r3
    79e0:	10000526 	beq	r2,zero,79f8 <__udivdi3+0x98>
    79e4:	88a2983a 	sll	r17,r17,r2
    79e8:	90c6d83a 	srl	r3,r18,r3
    79ec:	30a0983a 	sll	r16,r6,r2
    79f0:	90a6983a 	sll	r19,r18,r2
    79f4:	88e8b03a 	or	r20,r17,r3
    79f8:	8022d43a 	srli	r17,r16,16
    79fc:	a009883a 	mov	r4,r20
    7a00:	857fffcc 	andi	r21,r16,65535
    7a04:	880b883a 	mov	r5,r17
    7a08:	00094400 	call	9440 <__umodsi3>
    7a0c:	a009883a 	mov	r4,r20
    7a10:	880b883a 	mov	r5,r17
    7a14:	102d883a 	mov	r22,r2
    7a18:	00094380 	call	9438 <__udivsi3>
    7a1c:	1009883a 	mov	r4,r2
    7a20:	a80b883a 	mov	r5,r21
    7a24:	1025883a 	mov	r18,r2
    7a28:	00094480 	call	9448 <__mulsi3>
    7a2c:	1009883a 	mov	r4,r2
    7a30:	b006943a 	slli	r3,r22,16
    7a34:	9804d43a 	srli	r2,r19,16
    7a38:	1886b03a 	or	r3,r3,r2
    7a3c:	1900052e 	bgeu	r3,r4,7a54 <__udivdi3+0xf4>
    7a40:	1c07883a 	add	r3,r3,r16
    7a44:	90bfffc4 	addi	r2,r18,-1
    7a48:	1c000136 	bltu	r3,r16,7a50 <__udivdi3+0xf0>
    7a4c:	19015536 	bltu	r3,r4,7fa4 <__udivdi3+0x644>
    7a50:	1025883a 	mov	r18,r2
    7a54:	1929c83a 	sub	r20,r3,r4
    7a58:	880b883a 	mov	r5,r17
    7a5c:	a009883a 	mov	r4,r20
    7a60:	00094400 	call	9440 <__umodsi3>
    7a64:	102d883a 	mov	r22,r2
    7a68:	880b883a 	mov	r5,r17
    7a6c:	a009883a 	mov	r4,r20
    7a70:	b02c943a 	slli	r22,r22,16
    7a74:	00094380 	call	9438 <__udivsi3>
    7a78:	1009883a 	mov	r4,r2
    7a7c:	a80b883a 	mov	r5,r21
    7a80:	9cffffcc 	andi	r19,r19,65535
    7a84:	1023883a 	mov	r17,r2
    7a88:	b4e6b03a 	or	r19,r22,r19
    7a8c:	00094480 	call	9448 <__mulsi3>
    7a90:	9880052e 	bgeu	r19,r2,7aa8 <__udivdi3+0x148>
    7a94:	9c27883a 	add	r19,r19,r16
    7a98:	88ffffc4 	addi	r3,r17,-1
    7a9c:	9c011436 	bltu	r19,r16,7ef0 <__udivdi3+0x590>
    7aa0:	9881132e 	bgeu	r19,r2,7ef0 <__udivdi3+0x590>
    7aa4:	8c7fff84 	addi	r17,r17,-2
    7aa8:	9004943a 	slli	r2,r18,16
    7aac:	0007883a 	mov	r3,zero
    7ab0:	8884b03a 	or	r2,r17,r2
    7ab4:	00001506 	br	7b0c <__udivdi3+0x1ac>
    7ab8:	29c06a36 	bltu	r5,r7,7c64 <__udivdi3+0x304>
    7abc:	00bfffd4 	movui	r2,65535
    7ac0:	11c06a2e 	bgeu	r2,r7,7c6c <__udivdi3+0x30c>
    7ac4:	00804034 	movhi	r2,256
    7ac8:	10bfffc4 	addi	r2,r2,-1
    7acc:	11c11436 	bltu	r2,r7,7f20 <__udivdi3+0x5c0>
    7ad0:	00c00404 	movi	r3,16
    7ad4:	180b883a 	mov	r5,r3
    7ad8:	38c6d83a 	srl	r3,r7,r3
    7adc:	01000074 	movhi	r4,1
    7ae0:	21008c04 	addi	r4,r4,560
    7ae4:	04000804 	movi	r16,32
    7ae8:	20c7883a 	add	r3,r4,r3
    7aec:	18800003 	ldbu	r2,0(r3)
    7af0:	1145883a 	add	r2,r2,r5
    7af4:	80a1c83a 	sub	r16,r16,r2
    7af8:	80006e1e 	bne	r16,zero,7cb4 <__udivdi3+0x354>
    7afc:	0007883a 	mov	r3,zero
    7b00:	3c406a36 	bltu	r7,r17,7cac <__udivdi3+0x34c>
    7b04:	9180692e 	bgeu	r18,r6,7cac <__udivdi3+0x34c>
    7b08:	0005883a 	mov	r2,zero
    7b0c:	dfc00a17 	ldw	ra,40(sp)
    7b10:	df000917 	ldw	fp,36(sp)
    7b14:	ddc00817 	ldw	r23,32(sp)
    7b18:	dd800717 	ldw	r22,28(sp)
    7b1c:	dd400617 	ldw	r21,24(sp)
    7b20:	dd000517 	ldw	r20,20(sp)
    7b24:	dcc00417 	ldw	r19,16(sp)
    7b28:	dc800317 	ldw	r18,12(sp)
    7b2c:	dc400217 	ldw	r17,8(sp)
    7b30:	dc000117 	ldw	r16,4(sp)
    7b34:	dec00b04 	addi	sp,sp,44
    7b38:	f800283a 	ret
    7b3c:	3000041e 	bne	r6,zero,7b50 <__udivdi3+0x1f0>
    7b40:	01000044 	movi	r4,1
    7b44:	000b883a 	mov	r5,zero
    7b48:	00094380 	call	9438 <__udivsi3>
    7b4c:	1021883a 	mov	r16,r2
    7b50:	00bfffd4 	movui	r2,65535
    7b54:	1400502e 	bgeu	r2,r16,7c98 <__udivdi3+0x338>
    7b58:	00804034 	movhi	r2,256
    7b5c:	10bfffc4 	addi	r2,r2,-1
    7b60:	1400f536 	bltu	r2,r16,7f38 <__udivdi3+0x5d8>
    7b64:	00800404 	movi	r2,16
    7b68:	1007883a 	mov	r3,r2
    7b6c:	8084d83a 	srl	r2,r16,r2
    7b70:	01000074 	movhi	r4,1
    7b74:	21008c04 	addi	r4,r4,560
    7b78:	2085883a 	add	r2,r4,r2
    7b7c:	10800003 	ldbu	r2,0(r2)
    7b80:	10c7883a 	add	r3,r2,r3
    7b84:	00800804 	movi	r2,32
    7b88:	10c5c83a 	sub	r2,r2,r3
    7b8c:	1000a01e 	bne	r2,zero,7e10 <__udivdi3+0x4b0>
    7b90:	8028d43a 	srli	r20,r16,16
    7b94:	8c23c83a 	sub	r17,r17,r16
    7b98:	857fffcc 	andi	r21,r16,65535
    7b9c:	00c00044 	movi	r3,1
    7ba0:	8809883a 	mov	r4,r17
    7ba4:	a00b883a 	mov	r5,r20
    7ba8:	d8c00015 	stw	r3,0(sp)
    7bac:	00094400 	call	9440 <__umodsi3>
    7bb0:	8809883a 	mov	r4,r17
    7bb4:	a00b883a 	mov	r5,r20
    7bb8:	102d883a 	mov	r22,r2
    7bbc:	00094380 	call	9438 <__udivsi3>
    7bc0:	1009883a 	mov	r4,r2
    7bc4:	a80b883a 	mov	r5,r21
    7bc8:	1025883a 	mov	r18,r2
    7bcc:	00094480 	call	9448 <__mulsi3>
    7bd0:	1009883a 	mov	r4,r2
    7bd4:	b00c943a 	slli	r6,r22,16
    7bd8:	9804d43a 	srli	r2,r19,16
    7bdc:	d8c00017 	ldw	r3,0(sp)
    7be0:	308cb03a 	or	r6,r6,r2
    7be4:	3100052e 	bgeu	r6,r4,7bfc <__udivdi3+0x29c>
    7be8:	340d883a 	add	r6,r6,r16
    7bec:	90bfffc4 	addi	r2,r18,-1
    7bf0:	34000136 	bltu	r6,r16,7bf8 <__udivdi3+0x298>
    7bf4:	3100e836 	bltu	r6,r4,7f98 <__udivdi3+0x638>
    7bf8:	1025883a 	mov	r18,r2
    7bfc:	3123c83a 	sub	r17,r6,r4
    7c00:	8809883a 	mov	r4,r17
    7c04:	a00b883a 	mov	r5,r20
    7c08:	d8c00015 	stw	r3,0(sp)
    7c0c:	00094400 	call	9440 <__umodsi3>
    7c10:	102d883a 	mov	r22,r2
    7c14:	8809883a 	mov	r4,r17
    7c18:	a00b883a 	mov	r5,r20
    7c1c:	b02c943a 	slli	r22,r22,16
    7c20:	00094380 	call	9438 <__udivsi3>
    7c24:	1009883a 	mov	r4,r2
    7c28:	a80b883a 	mov	r5,r21
    7c2c:	9cffffcc 	andi	r19,r19,65535
    7c30:	1023883a 	mov	r17,r2
    7c34:	b4e6b03a 	or	r19,r22,r19
    7c38:	00094480 	call	9448 <__mulsi3>
    7c3c:	d8c00017 	ldw	r3,0(sp)
    7c40:	9880052e 	bgeu	r19,r2,7c58 <__udivdi3+0x2f8>
    7c44:	9c27883a 	add	r19,r19,r16
    7c48:	893fffc4 	addi	r4,r17,-1
    7c4c:	9c00aa36 	bltu	r19,r16,7ef8 <__udivdi3+0x598>
    7c50:	9880a92e 	bgeu	r19,r2,7ef8 <__udivdi3+0x598>
    7c54:	8c7fff84 	addi	r17,r17,-2
    7c58:	9004943a 	slli	r2,r18,16
    7c5c:	8884b03a 	or	r2,r17,r2
    7c60:	003faa06 	br	7b0c <__udivdi3+0x1ac>
    7c64:	0007883a 	mov	r3,zero
    7c68:	003fa706 	br	7b08 <__udivdi3+0x1a8>
    7c6c:	00803fc4 	movi	r2,255
    7c70:	11c0ae36 	bltu	r2,r7,7f2c <__udivdi3+0x5cc>
    7c74:	0007883a 	mov	r3,zero
    7c78:	000b883a 	mov	r5,zero
    7c7c:	003f9606 	br	7ad8 <__udivdi3+0x178>
    7c80:	00804034 	movhi	r2,256
    7c84:	10bfffc4 	addi	r2,r2,-1
    7c88:	1180ae36 	bltu	r2,r6,7f44 <__udivdi3+0x5e4>
    7c8c:	00800404 	movi	r2,16
    7c90:	1007883a 	mov	r3,r2
    7c94:	003f4a06 	br	79c0 <__udivdi3+0x60>
    7c98:	00803fc4 	movi	r2,255
    7c9c:	1400af36 	bltu	r2,r16,7f5c <__udivdi3+0x5fc>
    7ca0:	0005883a 	mov	r2,zero
    7ca4:	0007883a 	mov	r3,zero
    7ca8:	003fb006 	br	7b6c <__udivdi3+0x20c>
    7cac:	00800044 	movi	r2,1
    7cb0:	003f9606 	br	7b0c <__udivdi3+0x1ac>
    7cb4:	3c0e983a 	sll	r7,r7,r16
    7cb8:	3086d83a 	srl	r3,r6,r2
    7cbc:	88aed83a 	srl	r23,r17,r2
    7cc0:	9084d83a 	srl	r2,r18,r2
    7cc4:	38e6b03a 	or	r19,r7,r3
    7cc8:	9828d43a 	srli	r20,r19,16
    7ccc:	8c22983a 	sll	r17,r17,r16
    7cd0:	b809883a 	mov	r4,r23
    7cd4:	a00b883a 	mov	r5,r20
    7cd8:	342a983a 	sll	r21,r6,r16
    7cdc:	88a2b03a 	or	r17,r17,r2
    7ce0:	00094400 	call	9440 <__umodsi3>
    7ce4:	b809883a 	mov	r4,r23
    7ce8:	a00b883a 	mov	r5,r20
    7cec:	1039883a 	mov	fp,r2
    7cf0:	9dbfffcc 	andi	r22,r19,65535
    7cf4:	00094380 	call	9438 <__udivsi3>
    7cf8:	1009883a 	mov	r4,r2
    7cfc:	b00b883a 	mov	r5,r22
    7d00:	102f883a 	mov	r23,r2
    7d04:	00094480 	call	9448 <__mulsi3>
    7d08:	1009883a 	mov	r4,r2
    7d0c:	e00e943a 	slli	r7,fp,16
    7d10:	8804d43a 	srli	r2,r17,16
    7d14:	388eb03a 	or	r7,r7,r2
    7d18:	3900042e 	bgeu	r7,r4,7d2c <__udivdi3+0x3cc>
    7d1c:	3ccf883a 	add	r7,r7,r19
    7d20:	b8bfffc4 	addi	r2,r23,-1
    7d24:	3cc0942e 	bgeu	r7,r19,7f78 <__udivdi3+0x618>
    7d28:	102f883a 	mov	r23,r2
    7d2c:	3939c83a 	sub	fp,r7,r4
    7d30:	a00b883a 	mov	r5,r20
    7d34:	e009883a 	mov	r4,fp
    7d38:	00094400 	call	9440 <__umodsi3>
    7d3c:	a00b883a 	mov	r5,r20
    7d40:	e009883a 	mov	r4,fp
    7d44:	d8800015 	stw	r2,0(sp)
    7d48:	00094380 	call	9438 <__udivsi3>
    7d4c:	1009883a 	mov	r4,r2
    7d50:	b00b883a 	mov	r5,r22
    7d54:	1029883a 	mov	r20,r2
    7d58:	00094480 	call	9448 <__mulsi3>
    7d5c:	d8c00017 	ldw	r3,0(sp)
    7d60:	8c7fffcc 	andi	r17,r17,65535
    7d64:	1806943a 	slli	r3,r3,16
    7d68:	1c46b03a 	or	r3,r3,r17
    7d6c:	1880042e 	bgeu	r3,r2,7d80 <__udivdi3+0x420>
    7d70:	1cc7883a 	add	r3,r3,r19
    7d74:	a13fffc4 	addi	r4,r20,-1
    7d78:	1cc07b2e 	bgeu	r3,r19,7f68 <__udivdi3+0x608>
    7d7c:	2029883a 	mov	r20,r4
    7d80:	b82e943a 	slli	r23,r23,16
    7d84:	a822d43a 	srli	r17,r21,16
    7d88:	ad7fffcc 	andi	r21,r21,65535
    7d8c:	a5e8b03a 	or	r20,r20,r23
    7d90:	a5bfffcc 	andi	r22,r20,65535
    7d94:	b009883a 	mov	r4,r22
    7d98:	a80b883a 	mov	r5,r21
    7d9c:	18afc83a 	sub	r23,r3,r2
    7da0:	a026d43a 	srli	r19,r20,16
    7da4:	00094480 	call	9448 <__mulsi3>
    7da8:	b009883a 	mov	r4,r22
    7dac:	880b883a 	mov	r5,r17
    7db0:	1039883a 	mov	fp,r2
    7db4:	00094480 	call	9448 <__mulsi3>
    7db8:	a80b883a 	mov	r5,r21
    7dbc:	9809883a 	mov	r4,r19
    7dc0:	102d883a 	mov	r22,r2
    7dc4:	00094480 	call	9448 <__mulsi3>
    7dc8:	9809883a 	mov	r4,r19
    7dcc:	880b883a 	mov	r5,r17
    7dd0:	102b883a 	mov	r21,r2
    7dd4:	00094480 	call	9448 <__mulsi3>
    7dd8:	100b883a 	mov	r5,r2
    7ddc:	e004d43a 	srli	r2,fp,16
    7de0:	ad89883a 	add	r4,r21,r22
    7de4:	2089883a 	add	r4,r4,r2
    7de8:	2540022e 	bgeu	r4,r21,7df4 <__udivdi3+0x494>
    7dec:	00800074 	movhi	r2,1
    7df0:	288b883a 	add	r5,r5,r2
    7df4:	2004d43a 	srli	r2,r4,16
    7df8:	288b883a 	add	r5,r5,r2
    7dfc:	b9404536 	bltu	r23,r5,7f14 <__udivdi3+0x5b4>
    7e00:	b9403f26 	beq	r23,r5,7f00 <__udivdi3+0x5a0>
    7e04:	a005883a 	mov	r2,r20
    7e08:	0007883a 	mov	r3,zero
    7e0c:	003f3f06 	br	7b0c <__udivdi3+0x1ac>
    7e10:	80a0983a 	sll	r16,r16,r2
    7e14:	88eed83a 	srl	r23,r17,r3
    7e18:	90c6d83a 	srl	r3,r18,r3
    7e1c:	8028d43a 	srli	r20,r16,16
    7e20:	88a2983a 	sll	r17,r17,r2
    7e24:	b809883a 	mov	r4,r23
    7e28:	a00b883a 	mov	r5,r20
    7e2c:	88ecb03a 	or	r22,r17,r3
    7e30:	90a6983a 	sll	r19,r18,r2
    7e34:	00094400 	call	9440 <__umodsi3>
    7e38:	b809883a 	mov	r4,r23
    7e3c:	a00b883a 	mov	r5,r20
    7e40:	1023883a 	mov	r17,r2
    7e44:	857fffcc 	andi	r21,r16,65535
    7e48:	00094380 	call	9438 <__udivsi3>
    7e4c:	1009883a 	mov	r4,r2
    7e50:	a80b883a 	mov	r5,r21
    7e54:	102f883a 	mov	r23,r2
    7e58:	00094480 	call	9448 <__mulsi3>
    7e5c:	1009883a 	mov	r4,r2
    7e60:	880a943a 	slli	r5,r17,16
    7e64:	b004d43a 	srli	r2,r22,16
    7e68:	288ab03a 	or	r5,r5,r2
    7e6c:	2900062e 	bgeu	r5,r4,7e88 <__udivdi3+0x528>
    7e70:	2c0b883a 	add	r5,r5,r16
    7e74:	b8bfffc4 	addi	r2,r23,-1
    7e78:	2c004536 	bltu	r5,r16,7f90 <__udivdi3+0x630>
    7e7c:	2900442e 	bgeu	r5,r4,7f90 <__udivdi3+0x630>
    7e80:	bdffff84 	addi	r23,r23,-2
    7e84:	2c0b883a 	add	r5,r5,r16
    7e88:	2925c83a 	sub	r18,r5,r4
    7e8c:	9009883a 	mov	r4,r18
    7e90:	a00b883a 	mov	r5,r20
    7e94:	00094400 	call	9440 <__umodsi3>
    7e98:	1023883a 	mov	r17,r2
    7e9c:	9009883a 	mov	r4,r18
    7ea0:	a00b883a 	mov	r5,r20
    7ea4:	8822943a 	slli	r17,r17,16
    7ea8:	00094380 	call	9438 <__udivsi3>
    7eac:	1009883a 	mov	r4,r2
    7eb0:	a80b883a 	mov	r5,r21
    7eb4:	b5bfffcc 	andi	r22,r22,65535
    7eb8:	1025883a 	mov	r18,r2
    7ebc:	8da2b03a 	or	r17,r17,r22
    7ec0:	00094480 	call	9448 <__mulsi3>
    7ec4:	8880062e 	bgeu	r17,r2,7ee0 <__udivdi3+0x580>
    7ec8:	8c23883a 	add	r17,r17,r16
    7ecc:	90ffffc4 	addi	r3,r18,-1
    7ed0:	8c002d36 	bltu	r17,r16,7f88 <__udivdi3+0x628>
    7ed4:	88802c2e 	bgeu	r17,r2,7f88 <__udivdi3+0x628>
    7ed8:	94bfff84 	addi	r18,r18,-2
    7edc:	8c23883a 	add	r17,r17,r16
    7ee0:	b806943a 	slli	r3,r23,16
    7ee4:	88a3c83a 	sub	r17,r17,r2
    7ee8:	90c6b03a 	or	r3,r18,r3
    7eec:	003f2c06 	br	7ba0 <__udivdi3+0x240>
    7ef0:	1823883a 	mov	r17,r3
    7ef4:	003eec06 	br	7aa8 <__udivdi3+0x148>
    7ef8:	2023883a 	mov	r17,r4
    7efc:	003f5606 	br	7c58 <__udivdi3+0x2f8>
    7f00:	2008943a 	slli	r4,r4,16
    7f04:	9420983a 	sll	r16,r18,r16
    7f08:	e73fffcc 	andi	fp,fp,65535
    7f0c:	2709883a 	add	r4,r4,fp
    7f10:	813fbc2e 	bgeu	r16,r4,7e04 <__udivdi3+0x4a4>
    7f14:	a0bfffc4 	addi	r2,r20,-1
    7f18:	0007883a 	mov	r3,zero
    7f1c:	003efb06 	br	7b0c <__udivdi3+0x1ac>
    7f20:	00c00604 	movi	r3,24
    7f24:	180b883a 	mov	r5,r3
    7f28:	003eeb06 	br	7ad8 <__udivdi3+0x178>
    7f2c:	00c00204 	movi	r3,8
    7f30:	180b883a 	mov	r5,r3
    7f34:	003ee806 	br	7ad8 <__udivdi3+0x178>
    7f38:	00800604 	movi	r2,24
    7f3c:	1007883a 	mov	r3,r2
    7f40:	003f0a06 	br	7b6c <__udivdi3+0x20c>
    7f44:	00800604 	movi	r2,24
    7f48:	1007883a 	mov	r3,r2
    7f4c:	003e9c06 	br	79c0 <__udivdi3+0x60>
    7f50:	00800204 	movi	r2,8
    7f54:	1007883a 	mov	r3,r2
    7f58:	003e9906 	br	79c0 <__udivdi3+0x60>
    7f5c:	00800204 	movi	r2,8
    7f60:	1007883a 	mov	r3,r2
    7f64:	003f0106 	br	7b6c <__udivdi3+0x20c>
    7f68:	18bf842e 	bgeu	r3,r2,7d7c <__udivdi3+0x41c>
    7f6c:	a53fff84 	addi	r20,r20,-2
    7f70:	1cc7883a 	add	r3,r3,r19
    7f74:	003f8206 	br	7d80 <__udivdi3+0x420>
    7f78:	393f6b2e 	bgeu	r7,r4,7d28 <__udivdi3+0x3c8>
    7f7c:	bdffff84 	addi	r23,r23,-2
    7f80:	3ccf883a 	add	r7,r7,r19
    7f84:	003f6906 	br	7d2c <__udivdi3+0x3cc>
    7f88:	1825883a 	mov	r18,r3
    7f8c:	003fd406 	br	7ee0 <__udivdi3+0x580>
    7f90:	102f883a 	mov	r23,r2
    7f94:	003fbc06 	br	7e88 <__udivdi3+0x528>
    7f98:	94bfff84 	addi	r18,r18,-2
    7f9c:	340d883a 	add	r6,r6,r16
    7fa0:	003f1606 	br	7bfc <__udivdi3+0x29c>
    7fa4:	94bfff84 	addi	r18,r18,-2
    7fa8:	1c07883a 	add	r3,r3,r16
    7fac:	003ea906 	br	7a54 <__udivdi3+0xf4>

00007fb0 <__umoddi3>:
    7fb0:	defff304 	addi	sp,sp,-52
    7fb4:	dd000715 	stw	r20,28(sp)
    7fb8:	dcc00615 	stw	r19,24(sp)
    7fbc:	dc800515 	stw	r18,20(sp)
    7fc0:	dc400415 	stw	r17,16(sp)
    7fc4:	dc000315 	stw	r16,12(sp)
    7fc8:	dfc00c15 	stw	ra,48(sp)
    7fcc:	df000b15 	stw	fp,44(sp)
    7fd0:	ddc00a15 	stw	r23,40(sp)
    7fd4:	dd800915 	stw	r22,36(sp)
    7fd8:	dd400815 	stw	r21,32(sp)
    7fdc:	2025883a 	mov	r18,r4
    7fe0:	2823883a 	mov	r17,r5
    7fe4:	3021883a 	mov	r16,r6
    7fe8:	2027883a 	mov	r19,r4
    7fec:	2829883a 	mov	r20,r5
    7ff0:	38003a1e 	bne	r7,zero,80dc <__umoddi3+0x12c>
    7ff4:	2980522e 	bgeu	r5,r6,8140 <__umoddi3+0x190>
    7ff8:	00bfffd4 	movui	r2,65535
    7ffc:	1180a436 	bltu	r2,r6,8290 <__umoddi3+0x2e0>
    8000:	00803fc4 	movi	r2,255
    8004:	11816036 	bltu	r2,r6,8588 <__umoddi3+0x5d8>
    8008:	0005883a 	mov	r2,zero
    800c:	0009883a 	mov	r4,zero
    8010:	3084d83a 	srl	r2,r6,r2
    8014:	00c00074 	movhi	r3,1
    8018:	18c08c04 	addi	r3,r3,560
    801c:	05400804 	movi	r21,32
    8020:	1885883a 	add	r2,r3,r2
    8024:	10800003 	ldbu	r2,0(r2)
    8028:	1109883a 	add	r4,r2,r4
    802c:	a92bc83a 	sub	r21,r21,r4
    8030:	a8010e26 	beq	r21,zero,846c <__umoddi3+0x4bc>
    8034:	8d62983a 	sll	r17,r17,r21
    8038:	9108d83a 	srl	r4,r18,r4
    803c:	3560983a 	sll	r16,r6,r21
    8040:	9566983a 	sll	r19,r18,r21
    8044:	8928b03a 	or	r20,r17,r4
    8048:	8022d43a 	srli	r17,r16,16
    804c:	a009883a 	mov	r4,r20
    8050:	84bfffcc 	andi	r18,r16,65535
    8054:	880b883a 	mov	r5,r17
    8058:	00094400 	call	9440 <__umodsi3>
    805c:	a009883a 	mov	r4,r20
    8060:	880b883a 	mov	r5,r17
    8064:	102d883a 	mov	r22,r2
    8068:	00094380 	call	9438 <__udivsi3>
    806c:	1009883a 	mov	r4,r2
    8070:	900b883a 	mov	r5,r18
    8074:	00094480 	call	9448 <__mulsi3>
    8078:	1009883a 	mov	r4,r2
    807c:	b006943a 	slli	r3,r22,16
    8080:	9804d43a 	srli	r2,r19,16
    8084:	1886b03a 	or	r3,r3,r2
    8088:	1900042e 	bgeu	r3,r4,809c <__umoddi3+0xec>
    808c:	1c07883a 	add	r3,r3,r16
    8090:	1c000236 	bltu	r3,r16,809c <__umoddi3+0xec>
    8094:	1900012e 	bgeu	r3,r4,809c <__umoddi3+0xec>
    8098:	1c07883a 	add	r3,r3,r16
    809c:	1929c83a 	sub	r20,r3,r4
    80a0:	a009883a 	mov	r4,r20
    80a4:	880b883a 	mov	r5,r17
    80a8:	00094400 	call	9440 <__umodsi3>
    80ac:	102d883a 	mov	r22,r2
    80b0:	a009883a 	mov	r4,r20
    80b4:	880b883a 	mov	r5,r17
    80b8:	b02c943a 	slli	r22,r22,16
    80bc:	00094380 	call	9438 <__udivsi3>
    80c0:	1009883a 	mov	r4,r2
    80c4:	900b883a 	mov	r5,r18
    80c8:	9cffffcc 	andi	r19,r19,65535
    80cc:	00094480 	call	9448 <__mulsi3>
    80d0:	b4e6b03a 	or	r19,r22,r19
    80d4:	9880572e 	bgeu	r19,r2,8234 <__umoddi3+0x284>
    80d8:	00005206 	br	8224 <__umoddi3+0x274>
    80dc:	29c05936 	bltu	r5,r7,8244 <__umoddi3+0x294>
    80e0:	00bfffd4 	movui	r2,65535
    80e4:	11c0652e 	bgeu	r2,r7,827c <__umoddi3+0x2cc>
    80e8:	00804034 	movhi	r2,256
    80ec:	10bfffc4 	addi	r2,r2,-1
    80f0:	11c11936 	bltu	r2,r7,8558 <__umoddi3+0x5a8>
    80f4:	00c00404 	movi	r3,16
    80f8:	1827883a 	mov	r19,r3
    80fc:	38c6d83a 	srl	r3,r7,r3
    8100:	01000074 	movhi	r4,1
    8104:	21008c04 	addi	r4,r4,560
    8108:	04000804 	movi	r16,32
    810c:	20c7883a 	add	r3,r4,r3
    8110:	18800003 	ldbu	r2,0(r3)
    8114:	14e7883a 	add	r19,r2,r19
    8118:	84e1c83a 	sub	r16,r16,r19
    811c:	8000671e 	bne	r16,zero,82bc <__umoddi3+0x30c>
    8120:	3c400136 	bltu	r7,r17,8128 <__umoddi3+0x178>
    8124:	91812536 	bltu	r18,r6,85bc <__umoddi3+0x60c>
    8128:	9185c83a 	sub	r2,r18,r6
    812c:	89e3c83a 	sub	r17,r17,r7
    8130:	90a5803a 	cmpltu	r18,r18,r2
    8134:	8ca9c83a 	sub	r20,r17,r18
    8138:	a007883a 	mov	r3,r20
    813c:	00004306 	br	824c <__umoddi3+0x29c>
    8140:	3000041e 	bne	r6,zero,8154 <__umoddi3+0x1a4>
    8144:	01000044 	movi	r4,1
    8148:	000b883a 	mov	r5,zero
    814c:	00094380 	call	9438 <__udivsi3>
    8150:	1021883a 	mov	r16,r2
    8154:	00bfffd4 	movui	r2,65535
    8158:	1400532e 	bgeu	r2,r16,82a8 <__umoddi3+0x2f8>
    815c:	00804034 	movhi	r2,256
    8160:	10bfffc4 	addi	r2,r2,-1
    8164:	14010536 	bltu	r2,r16,857c <__umoddi3+0x5cc>
    8168:	00800404 	movi	r2,16
    816c:	1007883a 	mov	r3,r2
    8170:	8084d83a 	srl	r2,r16,r2
    8174:	01000074 	movhi	r4,1
    8178:	21008c04 	addi	r4,r4,560
    817c:	05400804 	movi	r21,32
    8180:	2085883a 	add	r2,r4,r2
    8184:	10800003 	ldbu	r2,0(r2)
    8188:	10c7883a 	add	r3,r2,r3
    818c:	a8ebc83a 	sub	r21,r21,r3
    8190:	a800b81e 	bne	r21,zero,8474 <__umoddi3+0x4c4>
    8194:	8028d43a 	srli	r20,r16,16
    8198:	8c23c83a 	sub	r17,r17,r16
    819c:	85bfffcc 	andi	r22,r16,65535
    81a0:	8809883a 	mov	r4,r17
    81a4:	a00b883a 	mov	r5,r20
    81a8:	00094400 	call	9440 <__umodsi3>
    81ac:	8809883a 	mov	r4,r17
    81b0:	a00b883a 	mov	r5,r20
    81b4:	1025883a 	mov	r18,r2
    81b8:	00094380 	call	9438 <__udivsi3>
    81bc:	1009883a 	mov	r4,r2
    81c0:	b00b883a 	mov	r5,r22
    81c4:	00094480 	call	9448 <__mulsi3>
    81c8:	1009883a 	mov	r4,r2
    81cc:	9006943a 	slli	r3,r18,16
    81d0:	9804d43a 	srli	r2,r19,16
    81d4:	1886b03a 	or	r3,r3,r2
    81d8:	1900032e 	bgeu	r3,r4,81e8 <__umoddi3+0x238>
    81dc:	1c07883a 	add	r3,r3,r16
    81e0:	1c000136 	bltu	r3,r16,81e8 <__umoddi3+0x238>
    81e4:	1900f336 	bltu	r3,r4,85b4 <__umoddi3+0x604>
    81e8:	1923c83a 	sub	r17,r3,r4
    81ec:	8809883a 	mov	r4,r17
    81f0:	a00b883a 	mov	r5,r20
    81f4:	00094400 	call	9440 <__umodsi3>
    81f8:	102f883a 	mov	r23,r2
    81fc:	8809883a 	mov	r4,r17
    8200:	a00b883a 	mov	r5,r20
    8204:	b82e943a 	slli	r23,r23,16
    8208:	00094380 	call	9438 <__udivsi3>
    820c:	1009883a 	mov	r4,r2
    8210:	b00b883a 	mov	r5,r22
    8214:	9cffffcc 	andi	r19,r19,65535
    8218:	00094480 	call	9448 <__mulsi3>
    821c:	bce6b03a 	or	r19,r23,r19
    8220:	9880042e 	bgeu	r19,r2,8234 <__umoddi3+0x284>
    8224:	9c27883a 	add	r19,r19,r16
    8228:	9c000236 	bltu	r19,r16,8234 <__umoddi3+0x284>
    822c:	9880012e 	bgeu	r19,r2,8234 <__umoddi3+0x284>
    8230:	9c27883a 	add	r19,r19,r16
    8234:	9885c83a 	sub	r2,r19,r2
    8238:	1544d83a 	srl	r2,r2,r21
    823c:	0007883a 	mov	r3,zero
    8240:	00000206 	br	824c <__umoddi3+0x29c>
    8244:	2005883a 	mov	r2,r4
    8248:	2807883a 	mov	r3,r5
    824c:	dfc00c17 	ldw	ra,48(sp)
    8250:	df000b17 	ldw	fp,44(sp)
    8254:	ddc00a17 	ldw	r23,40(sp)
    8258:	dd800917 	ldw	r22,36(sp)
    825c:	dd400817 	ldw	r21,32(sp)
    8260:	dd000717 	ldw	r20,28(sp)
    8264:	dcc00617 	ldw	r19,24(sp)
    8268:	dc800517 	ldw	r18,20(sp)
    826c:	dc400417 	ldw	r17,16(sp)
    8270:	dc000317 	ldw	r16,12(sp)
    8274:	dec00d04 	addi	sp,sp,52
    8278:	f800283a 	ret
    827c:	00803fc4 	movi	r2,255
    8280:	11c0b236 	bltu	r2,r7,854c <__umoddi3+0x59c>
    8284:	0007883a 	mov	r3,zero
    8288:	0027883a 	mov	r19,zero
    828c:	003f9b06 	br	80fc <__umoddi3+0x14c>
    8290:	00804034 	movhi	r2,256
    8294:	10bfffc4 	addi	r2,r2,-1
    8298:	1180b236 	bltu	r2,r6,8564 <__umoddi3+0x5b4>
    829c:	00800404 	movi	r2,16
    82a0:	1009883a 	mov	r4,r2
    82a4:	003f5a06 	br	8010 <__umoddi3+0x60>
    82a8:	00803fc4 	movi	r2,255
    82ac:	1400b036 	bltu	r2,r16,8570 <__umoddi3+0x5c0>
    82b0:	0005883a 	mov	r2,zero
    82b4:	0007883a 	mov	r3,zero
    82b8:	003fad06 	br	8170 <__umoddi3+0x1c0>
    82bc:	34c4d83a 	srl	r2,r6,r19
    82c0:	3c0e983a 	sll	r7,r7,r16
    82c4:	8cf8d83a 	srl	fp,r17,r19
    82c8:	8c22983a 	sll	r17,r17,r16
    82cc:	38a8b03a 	or	r20,r7,r2
    82d0:	a02ad43a 	srli	r21,r20,16
    82d4:	94c4d83a 	srl	r2,r18,r19
    82d8:	e009883a 	mov	r4,fp
    82dc:	a80b883a 	mov	r5,r21
    82e0:	342c983a 	sll	r22,r6,r16
    82e4:	88a2b03a 	or	r17,r17,r2
    82e8:	00094400 	call	9440 <__umodsi3>
    82ec:	e009883a 	mov	r4,fp
    82f0:	a80b883a 	mov	r5,r21
    82f4:	a5ffffcc 	andi	r23,r20,65535
    82f8:	d8800215 	stw	r2,8(sp)
    82fc:	00094380 	call	9438 <__udivsi3>
    8300:	1009883a 	mov	r4,r2
    8304:	b80b883a 	mov	r5,r23
    8308:	1039883a 	mov	fp,r2
    830c:	00094480 	call	9448 <__mulsi3>
    8310:	d8c00217 	ldw	r3,8(sp)
    8314:	1009883a 	mov	r4,r2
    8318:	8804d43a 	srli	r2,r17,16
    831c:	1806943a 	slli	r3,r3,16
    8320:	9424983a 	sll	r18,r18,r16
    8324:	1886b03a 	or	r3,r3,r2
    8328:	1900042e 	bgeu	r3,r4,833c <__umoddi3+0x38c>
    832c:	1d07883a 	add	r3,r3,r20
    8330:	e0bfffc4 	addi	r2,fp,-1
    8334:	1d009b2e 	bgeu	r3,r20,85a4 <__umoddi3+0x5f4>
    8338:	1039883a 	mov	fp,r2
    833c:	1907c83a 	sub	r3,r3,r4
    8340:	1809883a 	mov	r4,r3
    8344:	a80b883a 	mov	r5,r21
    8348:	d8c00215 	stw	r3,8(sp)
    834c:	00094400 	call	9440 <__umodsi3>
    8350:	d8c00217 	ldw	r3,8(sp)
    8354:	a80b883a 	mov	r5,r21
    8358:	d8800015 	stw	r2,0(sp)
    835c:	1809883a 	mov	r4,r3
    8360:	00094380 	call	9438 <__udivsi3>
    8364:	1009883a 	mov	r4,r2
    8368:	b80b883a 	mov	r5,r23
    836c:	102b883a 	mov	r21,r2
    8370:	00094480 	call	9448 <__mulsi3>
    8374:	d9c00017 	ldw	r7,0(sp)
    8378:	8c7fffcc 	andi	r17,r17,65535
    837c:	380e943a 	slli	r7,r7,16
    8380:	3c4eb03a 	or	r7,r7,r17
    8384:	3880042e 	bgeu	r7,r2,8398 <__umoddi3+0x3e8>
    8388:	3d0f883a 	add	r7,r7,r20
    838c:	a8ffffc4 	addi	r3,r21,-1
    8390:	3d00802e 	bgeu	r7,r20,8594 <__umoddi3+0x5e4>
    8394:	182b883a 	mov	r21,r3
    8398:	e038943a 	slli	fp,fp,16
    839c:	b010d43a 	srli	r8,r22,16
    83a0:	b1bfffcc 	andi	r6,r22,65535
    83a4:	af2ab03a 	or	r21,r21,fp
    83a8:	a82ed43a 	srli	r23,r21,16
    83ac:	ad7fffcc 	andi	r21,r21,65535
    83b0:	300b883a 	mov	r5,r6
    83b4:	a809883a 	mov	r4,r21
    83b8:	38a3c83a 	sub	r17,r7,r2
    83bc:	d9800115 	stw	r6,4(sp)
    83c0:	da000015 	stw	r8,0(sp)
    83c4:	00094480 	call	9448 <__mulsi3>
    83c8:	da000017 	ldw	r8,0(sp)
    83cc:	a809883a 	mov	r4,r21
    83d0:	1039883a 	mov	fp,r2
    83d4:	400b883a 	mov	r5,r8
    83d8:	da000215 	stw	r8,8(sp)
    83dc:	00094480 	call	9448 <__mulsi3>
    83e0:	d9800117 	ldw	r6,4(sp)
    83e4:	b809883a 	mov	r4,r23
    83e8:	d8800015 	stw	r2,0(sp)
    83ec:	300b883a 	mov	r5,r6
    83f0:	00094480 	call	9448 <__mulsi3>
    83f4:	d8c00217 	ldw	r3,8(sp)
    83f8:	b809883a 	mov	r4,r23
    83fc:	102b883a 	mov	r21,r2
    8400:	180b883a 	mov	r5,r3
    8404:	00094480 	call	9448 <__mulsi3>
    8408:	d9c00017 	ldw	r7,0(sp)
    840c:	1007883a 	mov	r3,r2
    8410:	e004d43a 	srli	r2,fp,16
    8414:	a9c9883a 	add	r4,r21,r7
    8418:	2089883a 	add	r4,r4,r2
    841c:	2540022e 	bgeu	r4,r21,8428 <__umoddi3+0x478>
    8420:	00800074 	movhi	r2,1
    8424:	1887883a 	add	r3,r3,r2
    8428:	2004d43a 	srli	r2,r4,16
    842c:	2008943a 	slli	r4,r4,16
    8430:	e73fffcc 	andi	fp,fp,65535
    8434:	1887883a 	add	r3,r3,r2
    8438:	2709883a 	add	r4,r4,fp
    843c:	88c03d36 	bltu	r17,r3,8534 <__umoddi3+0x584>
    8440:	88c06126 	beq	r17,r3,85c8 <__umoddi3+0x618>
    8444:	88c7c83a 	sub	r3,r17,r3
    8448:	202d883a 	mov	r22,r4
    844c:	95adc83a 	sub	r22,r18,r22
    8450:	95a5803a 	cmpltu	r18,r18,r22
    8454:	1c87c83a 	sub	r3,r3,r18
    8458:	1cc4983a 	sll	r2,r3,r19
    845c:	b42cd83a 	srl	r22,r22,r16
    8460:	1c06d83a 	srl	r3,r3,r16
    8464:	1584b03a 	or	r2,r2,r22
    8468:	003f7806 	br	824c <__umoddi3+0x29c>
    846c:	002b883a 	mov	r21,zero
    8470:	003ef506 	br	8048 <__umoddi3+0x98>
    8474:	8560983a 	sll	r16,r16,r21
    8478:	88e6d83a 	srl	r19,r17,r3
    847c:	90c6d83a 	srl	r3,r18,r3
    8480:	8028d43a 	srli	r20,r16,16
    8484:	8d62983a 	sll	r17,r17,r21
    8488:	9809883a 	mov	r4,r19
    848c:	a00b883a 	mov	r5,r20
    8490:	88eeb03a 	or	r23,r17,r3
    8494:	00094400 	call	9440 <__umodsi3>
    8498:	9809883a 	mov	r4,r19
    849c:	a00b883a 	mov	r5,r20
    84a0:	1023883a 	mov	r17,r2
    84a4:	85bfffcc 	andi	r22,r16,65535
    84a8:	00094380 	call	9438 <__udivsi3>
    84ac:	1009883a 	mov	r4,r2
    84b0:	b00b883a 	mov	r5,r22
    84b4:	00094480 	call	9448 <__mulsi3>
    84b8:	1007883a 	mov	r3,r2
    84bc:	8808943a 	slli	r4,r17,16
    84c0:	b804d43a 	srli	r2,r23,16
    84c4:	9566983a 	sll	r19,r18,r21
    84c8:	2088b03a 	or	r4,r4,r2
    84cc:	20c0042e 	bgeu	r4,r3,84e0 <__umoddi3+0x530>
    84d0:	2409883a 	add	r4,r4,r16
    84d4:	24000236 	bltu	r4,r16,84e0 <__umoddi3+0x530>
    84d8:	20c0012e 	bgeu	r4,r3,84e0 <__umoddi3+0x530>
    84dc:	2409883a 	add	r4,r4,r16
    84e0:	20e5c83a 	sub	r18,r4,r3
    84e4:	9009883a 	mov	r4,r18
    84e8:	a00b883a 	mov	r5,r20
    84ec:	00094400 	call	9440 <__umodsi3>
    84f0:	1023883a 	mov	r17,r2
    84f4:	9009883a 	mov	r4,r18
    84f8:	a00b883a 	mov	r5,r20
    84fc:	8822943a 	slli	r17,r17,16
    8500:	00094380 	call	9438 <__udivsi3>
    8504:	1009883a 	mov	r4,r2
    8508:	b00b883a 	mov	r5,r22
    850c:	bdffffcc 	andi	r23,r23,65535
    8510:	00094480 	call	9448 <__mulsi3>
    8514:	8de2b03a 	or	r17,r17,r23
    8518:	8880042e 	bgeu	r17,r2,852c <__umoddi3+0x57c>
    851c:	8c23883a 	add	r17,r17,r16
    8520:	8c000236 	bltu	r17,r16,852c <__umoddi3+0x57c>
    8524:	8880012e 	bgeu	r17,r2,852c <__umoddi3+0x57c>
    8528:	8c23883a 	add	r17,r17,r16
    852c:	88a3c83a 	sub	r17,r17,r2
    8530:	003f1b06 	br	81a0 <__umoddi3+0x1f0>
    8534:	25adc83a 	sub	r22,r4,r22
    8538:	1d07c83a 	sub	r3,r3,r20
    853c:	2589803a 	cmpltu	r4,r4,r22
    8540:	1907c83a 	sub	r3,r3,r4
    8544:	88c7c83a 	sub	r3,r17,r3
    8548:	003fc006 	br	844c <__umoddi3+0x49c>
    854c:	00c00204 	movi	r3,8
    8550:	1827883a 	mov	r19,r3
    8554:	003ee906 	br	80fc <__umoddi3+0x14c>
    8558:	00c00604 	movi	r3,24
    855c:	1827883a 	mov	r19,r3
    8560:	003ee606 	br	80fc <__umoddi3+0x14c>
    8564:	00800604 	movi	r2,24
    8568:	1009883a 	mov	r4,r2
    856c:	003ea806 	br	8010 <__umoddi3+0x60>
    8570:	00800204 	movi	r2,8
    8574:	1007883a 	mov	r3,r2
    8578:	003efd06 	br	8170 <__umoddi3+0x1c0>
    857c:	00800604 	movi	r2,24
    8580:	1007883a 	mov	r3,r2
    8584:	003efa06 	br	8170 <__umoddi3+0x1c0>
    8588:	00800204 	movi	r2,8
    858c:	1009883a 	mov	r4,r2
    8590:	003e9f06 	br	8010 <__umoddi3+0x60>
    8594:	38bf7f2e 	bgeu	r7,r2,8394 <__umoddi3+0x3e4>
    8598:	ad7fff84 	addi	r21,r21,-2
    859c:	3d0f883a 	add	r7,r7,r20
    85a0:	003f7d06 	br	8398 <__umoddi3+0x3e8>
    85a4:	193f642e 	bgeu	r3,r4,8338 <__umoddi3+0x388>
    85a8:	e73fff84 	addi	fp,fp,-2
    85ac:	1d07883a 	add	r3,r3,r20
    85b0:	003f6206 	br	833c <__umoddi3+0x38c>
    85b4:	1c07883a 	add	r3,r3,r16
    85b8:	003f0b06 	br	81e8 <__umoddi3+0x238>
    85bc:	9005883a 	mov	r2,r18
    85c0:	a007883a 	mov	r3,r20
    85c4:	003f2106 	br	824c <__umoddi3+0x29c>
    85c8:	913fda36 	bltu	r18,r4,8534 <__umoddi3+0x584>
    85cc:	202d883a 	mov	r22,r4
    85d0:	0007883a 	mov	r3,zero
    85d4:	003f9d06 	br	844c <__umoddi3+0x49c>

000085d8 <_fpadd_parts>:
    85d8:	2005883a 	mov	r2,r4
    85dc:	21000017 	ldw	r4,0(r4)
    85e0:	01c00044 	movi	r7,1
    85e4:	3900622e 	bgeu	r7,r4,8770 <_fpadd_parts+0x198>
    85e8:	28c00017 	ldw	r3,0(r5)
    85ec:	38c05f2e 	bgeu	r7,r3,876c <_fpadd_parts+0x194>
    85f0:	01c00104 	movi	r7,4
    85f4:	21c0c626 	beq	r4,r7,8910 <_fpadd_parts+0x338>
    85f8:	19c05c26 	beq	r3,r7,876c <_fpadd_parts+0x194>
    85fc:	01c00084 	movi	r7,2
    8600:	19c06b26 	beq	r3,r7,87b0 <_fpadd_parts+0x1d8>
    8604:	21c05926 	beq	r4,r7,876c <_fpadd_parts+0x194>
    8608:	11c00217 	ldw	r7,8(r2)
    860c:	2ac00217 	ldw	r11,8(r5)
    8610:	13000317 	ldw	r12,12(r2)
    8614:	13400417 	ldw	r13,16(r2)
    8618:	3ac9c83a 	sub	r4,r7,r11
    861c:	2a000317 	ldw	r8,12(r5)
    8620:	2a400417 	ldw	r9,16(r5)
    8624:	2015883a 	mov	r10,r4
    8628:	20007516 	blt	r4,zero,8800 <_fpadd_parts+0x228>
    862c:	00c00fc4 	movi	r3,63
    8630:	1a805016 	blt	r3,r10,8774 <_fpadd_parts+0x19c>
    8634:	0100870e 	bge	zero,r4,8854 <_fpadd_parts+0x27c>
    8638:	50fff804 	addi	r3,r10,-32
    863c:	18009916 	blt	r3,zero,88a4 <_fpadd_parts+0x2cc>
    8640:	48d6d83a 	srl	r11,r9,r3
    8644:	001d883a 	mov	r14,zero
    8648:	18009e16 	blt	r3,zero,88c4 <_fpadd_parts+0x2ec>
    864c:	01000044 	movi	r4,1
    8650:	20c6983a 	sll	r3,r4,r3
    8654:	0015883a 	mov	r10,zero
    8658:	513fffc4 	addi	r4,r10,-1
    865c:	2295403a 	cmpgeu	r10,r4,r10
    8660:	1a87c83a 	sub	r3,r3,r10
    8664:	1a52703a 	and	r9,r3,r9
    8668:	2210703a 	and	r8,r4,r8
    866c:	4250b03a 	or	r8,r8,r9
    8670:	4010c03a 	cmpne	r8,r8,zero
    8674:	42d0b03a 	or	r8,r8,r11
    8678:	7013883a 	mov	r9,r14
    867c:	11000117 	ldw	r4,4(r2)
    8680:	28800117 	ldw	r2,4(r5)
    8684:	20804126 	beq	r4,r2,878c <_fpadd_parts+0x1b4>
    8688:	20006326 	beq	r4,zero,8818 <_fpadd_parts+0x240>
    868c:	4305c83a 	sub	r2,r8,r12
    8690:	4091803a 	cmpltu	r8,r8,r2
    8694:	4b47c83a 	sub	r3,r9,r13
    8698:	1a07c83a 	sub	r3,r3,r8
    869c:	18006316 	blt	r3,zero,882c <_fpadd_parts+0x254>
    86a0:	30000115 	stw	zero,4(r6)
    86a4:	31c00215 	stw	r7,8(r6)
    86a8:	30800315 	stw	r2,12(r6)
    86ac:	30c00415 	stw	r3,16(r6)
    86b0:	11ffffc4 	addi	r7,r2,-1
    86b4:	388b403a 	cmpgeu	r5,r7,r2
    86b8:	194bc83a 	sub	r5,r3,r5
    86bc:	01040034 	movhi	r4,4096
    86c0:	213fffc4 	addi	r4,r4,-1
    86c4:	21401736 	bltu	r4,r5,8724 <_fpadd_parts+0x14c>
    86c8:	29008226 	beq	r5,r4,88d4 <_fpadd_parts+0x2fc>
    86cc:	31400217 	ldw	r5,8(r6)
    86d0:	02840034 	movhi	r10,4096
    86d4:	52bfffc4 	addi	r10,r10,-1
    86d8:	033fff84 	movi	r12,-2
    86dc:	297fffc4 	addi	r5,r5,-1
    86e0:	00000106 	br	86e8 <_fpadd_parts+0x110>
    86e4:	3a804a26 	beq	r7,r10,8810 <_fpadd_parts+0x238>
    86e8:	1089883a 	add	r4,r2,r2
    86ec:	2091803a 	cmpltu	r8,r4,r2
    86f0:	18c7883a 	add	r3,r3,r3
    86f4:	227fffc4 	addi	r9,r4,-1
    86f8:	40d1883a 	add	r8,r8,r3
    86fc:	490f403a 	cmpgeu	r7,r9,r4
    8700:	41cfc83a 	sub	r7,r8,r7
    8704:	2817883a 	mov	r11,r5
    8708:	2005883a 	mov	r2,r4
    870c:	4007883a 	mov	r3,r8
    8710:	297fffc4 	addi	r5,r5,-1
    8714:	51fff32e 	bgeu	r10,r7,86e4 <_fpadd_parts+0x10c>
    8718:	31000315 	stw	r4,12(r6)
    871c:	32000415 	stw	r8,16(r6)
    8720:	32c00215 	stw	r11,8(r6)
    8724:	010000c4 	movi	r4,3
    8728:	31000015 	stw	r4,0(r6)
    872c:	01080034 	movhi	r4,8192
    8730:	213fffc4 	addi	r4,r4,-1
    8734:	20c00b2e 	bgeu	r4,r3,8764 <_fpadd_parts+0x18c>
    8738:	180e97fa 	slli	r7,r3,31
    873c:	1008d07a 	srli	r4,r2,1
    8740:	31400217 	ldw	r5,8(r6)
    8744:	1806d07a 	srli	r3,r3,1
    8748:	1080004c 	andi	r2,r2,1
    874c:	3908b03a 	or	r4,r7,r4
    8750:	1108b03a 	or	r4,r2,r4
    8754:	29400044 	addi	r5,r5,1
    8758:	31000315 	stw	r4,12(r6)
    875c:	30c00415 	stw	r3,16(r6)
    8760:	31400215 	stw	r5,8(r6)
    8764:	3005883a 	mov	r2,r6
    8768:	f800283a 	ret
    876c:	2805883a 	mov	r2,r5
    8770:	f800283a 	ret
    8774:	59c01e0e 	bge	r11,r7,87f0 <_fpadd_parts+0x218>
    8778:	11000117 	ldw	r4,4(r2)
    877c:	28800117 	ldw	r2,4(r5)
    8780:	0011883a 	mov	r8,zero
    8784:	0013883a 	mov	r9,zero
    8788:	20bfbf1e 	bne	r4,r2,8688 <_fpadd_parts+0xb0>
    878c:	4305883a 	add	r2,r8,r12
    8790:	1207803a 	cmpltu	r3,r2,r8
    8794:	4b53883a 	add	r9,r9,r13
    8798:	1a47883a 	add	r3,r3,r9
    879c:	31000115 	stw	r4,4(r6)
    87a0:	31c00215 	stw	r7,8(r6)
    87a4:	30800315 	stw	r2,12(r6)
    87a8:	30c00415 	stw	r3,16(r6)
    87ac:	003fdd06 	br	8724 <_fpadd_parts+0x14c>
    87b0:	20ffef1e 	bne	r4,r3,8770 <_fpadd_parts+0x198>
    87b4:	31000015 	stw	r4,0(r6)
    87b8:	10c00117 	ldw	r3,4(r2)
    87bc:	30c00115 	stw	r3,4(r6)
    87c0:	10c00217 	ldw	r3,8(r2)
    87c4:	11000117 	ldw	r4,4(r2)
    87c8:	29400117 	ldw	r5,4(r5)
    87cc:	30c00215 	stw	r3,8(r6)
    87d0:	10c00317 	ldw	r3,12(r2)
    87d4:	2908703a 	and	r4,r5,r4
    87d8:	30c00315 	stw	r3,12(r6)
    87dc:	10c00417 	ldw	r3,16(r2)
    87e0:	31000115 	stw	r4,4(r6)
    87e4:	3005883a 	mov	r2,r6
    87e8:	30c00415 	stw	r3,16(r6)
    87ec:	f800283a 	ret
    87f0:	580f883a 	mov	r7,r11
    87f4:	0019883a 	mov	r12,zero
    87f8:	001b883a 	mov	r13,zero
    87fc:	003f9f06 	br	867c <_fpadd_parts+0xa4>
    8800:	0115c83a 	sub	r10,zero,r4
    8804:	00c00fc4 	movi	r3,63
    8808:	1abfda16 	blt	r3,r10,8774 <_fpadd_parts+0x19c>
    880c:	003f8906 	br	8634 <_fpadd_parts+0x5c>
    8810:	627fb52e 	bgeu	r12,r9,86e8 <_fpadd_parts+0x110>
    8814:	003fc006 	br	8718 <_fpadd_parts+0x140>
    8818:	6205c83a 	sub	r2,r12,r8
    881c:	6099803a 	cmpltu	r12,r12,r2
    8820:	6a47c83a 	sub	r3,r13,r9
    8824:	1b07c83a 	sub	r3,r3,r12
    8828:	183f9d0e 	bge	r3,zero,86a0 <_fpadd_parts+0xc8>
    882c:	0085c83a 	sub	r2,zero,r2
    8830:	1008c03a 	cmpne	r4,r2,zero
    8834:	00c7c83a 	sub	r3,zero,r3
    8838:	1907c83a 	sub	r3,r3,r4
    883c:	01000044 	movi	r4,1
    8840:	31000115 	stw	r4,4(r6)
    8844:	31c00215 	stw	r7,8(r6)
    8848:	30800315 	stw	r2,12(r6)
    884c:	30c00415 	stw	r3,16(r6)
    8850:	003f9706 	br	86b0 <_fpadd_parts+0xd8>
    8854:	203f8926 	beq	r4,zero,867c <_fpadd_parts+0xa4>
    8858:	50fff804 	addi	r3,r10,-32
    885c:	3a8f883a 	add	r7,r7,r10
    8860:	18002316 	blt	r3,zero,88f0 <_fpadd_parts+0x318>
    8864:	68d6d83a 	srl	r11,r13,r3
    8868:	001d883a 	mov	r14,zero
    886c:	18001c16 	blt	r3,zero,88e0 <_fpadd_parts+0x308>
    8870:	01000044 	movi	r4,1
    8874:	20c6983a 	sll	r3,r4,r3
    8878:	0015883a 	mov	r10,zero
    887c:	513fffc4 	addi	r4,r10,-1
    8880:	2295403a 	cmpgeu	r10,r4,r10
    8884:	1a87c83a 	sub	r3,r3,r10
    8888:	1b5a703a 	and	r13,r3,r13
    888c:	2318703a 	and	r12,r4,r12
    8890:	6358b03a 	or	r12,r12,r13
    8894:	6018c03a 	cmpne	r12,r12,zero
    8898:	62d8b03a 	or	r12,r12,r11
    889c:	701b883a 	mov	r13,r14
    88a0:	003f7606 	br	867c <_fpadd_parts+0xa4>
    88a4:	4808907a 	slli	r4,r9,1
    88a8:	02c007c4 	movi	r11,31
    88ac:	5a97c83a 	sub	r11,r11,r10
    88b0:	22c8983a 	sll	r4,r4,r11
    88b4:	4296d83a 	srl	r11,r8,r10
    88b8:	4a9cd83a 	srl	r14,r9,r10
    88bc:	22d6b03a 	or	r11,r4,r11
    88c0:	003f6106 	br	8648 <_fpadd_parts+0x70>
    88c4:	00c00044 	movi	r3,1
    88c8:	1a94983a 	sll	r10,r3,r10
    88cc:	0007883a 	mov	r3,zero
    88d0:	003f6106 	br	8658 <_fpadd_parts+0x80>
    88d4:	013fff84 	movi	r4,-2
    88d8:	21ff7c2e 	bgeu	r4,r7,86cc <_fpadd_parts+0xf4>
    88dc:	003f9106 	br	8724 <_fpadd_parts+0x14c>
    88e0:	00c00044 	movi	r3,1
    88e4:	1a94983a 	sll	r10,r3,r10
    88e8:	0007883a 	mov	r3,zero
    88ec:	003fe306 	br	887c <_fpadd_parts+0x2a4>
    88f0:	6816907a 	slli	r11,r13,1
    88f4:	010007c4 	movi	r4,31
    88f8:	2289c83a 	sub	r4,r4,r10
    88fc:	5908983a 	sll	r4,r11,r4
    8900:	6296d83a 	srl	r11,r12,r10
    8904:	6a9cd83a 	srl	r14,r13,r10
    8908:	22d6b03a 	or	r11,r4,r11
    890c:	003fd706 	br	886c <_fpadd_parts+0x294>
    8910:	193f971e 	bne	r3,r4,8770 <_fpadd_parts+0x198>
    8914:	11000117 	ldw	r4,4(r2)
    8918:	28c00117 	ldw	r3,4(r5)
    891c:	20ff9426 	beq	r4,r3,8770 <_fpadd_parts+0x198>
    8920:	00800074 	movhi	r2,1
    8924:	10808704 	addi	r2,r2,540
    8928:	f800283a 	ret

0000892c <__adddf3>:
    892c:	deffec04 	addi	sp,sp,-80
    8930:	d9001115 	stw	r4,68(sp)
    8934:	d9401215 	stw	r5,72(sp)
    8938:	d9001104 	addi	r4,sp,68
    893c:	d9400a04 	addi	r5,sp,40
    8940:	dfc01315 	stw	ra,76(sp)
    8944:	d9c01015 	stw	r7,64(sp)
    8948:	d9800f15 	stw	r6,60(sp)
    894c:	00098500 	call	9850 <__unpack_d>
    8950:	d9000f04 	addi	r4,sp,60
    8954:	d9400504 	addi	r5,sp,20
    8958:	00098500 	call	9850 <__unpack_d>
    895c:	d9000a04 	addi	r4,sp,40
    8960:	d9400504 	addi	r5,sp,20
    8964:	d80d883a 	mov	r6,sp
    8968:	00085d80 	call	85d8 <_fpadd_parts>
    896c:	1009883a 	mov	r4,r2
    8970:	000962c0 	call	962c <__pack_d>
    8974:	dfc01317 	ldw	ra,76(sp)
    8978:	dec01404 	addi	sp,sp,80
    897c:	f800283a 	ret

00008980 <__subdf3>:
    8980:	deffec04 	addi	sp,sp,-80
    8984:	d9001115 	stw	r4,68(sp)
    8988:	d9401215 	stw	r5,72(sp)
    898c:	d9001104 	addi	r4,sp,68
    8990:	d9400a04 	addi	r5,sp,40
    8994:	dfc01315 	stw	ra,76(sp)
    8998:	d9c01015 	stw	r7,64(sp)
    899c:	d9800f15 	stw	r6,60(sp)
    89a0:	00098500 	call	9850 <__unpack_d>
    89a4:	d9000f04 	addi	r4,sp,60
    89a8:	d9400504 	addi	r5,sp,20
    89ac:	00098500 	call	9850 <__unpack_d>
    89b0:	d8800617 	ldw	r2,24(sp)
    89b4:	d9000a04 	addi	r4,sp,40
    89b8:	d9400504 	addi	r5,sp,20
    89bc:	d80d883a 	mov	r6,sp
    89c0:	1080005c 	xori	r2,r2,1
    89c4:	d8800615 	stw	r2,24(sp)
    89c8:	00085d80 	call	85d8 <_fpadd_parts>
    89cc:	1009883a 	mov	r4,r2
    89d0:	000962c0 	call	962c <__pack_d>
    89d4:	dfc01317 	ldw	ra,76(sp)
    89d8:	dec01404 	addi	sp,sp,80
    89dc:	f800283a 	ret

000089e0 <__muldf3>:
    89e0:	deffe404 	addi	sp,sp,-112
    89e4:	d9001115 	stw	r4,68(sp)
    89e8:	d9401215 	stw	r5,72(sp)
    89ec:	d9001104 	addi	r4,sp,68
    89f0:	d9400a04 	addi	r5,sp,40
    89f4:	dfc01b15 	stw	ra,108(sp)
    89f8:	d9800f15 	stw	r6,60(sp)
    89fc:	d9c01015 	stw	r7,64(sp)
    8a00:	ddc01a15 	stw	r23,104(sp)
    8a04:	dd801915 	stw	r22,100(sp)
    8a08:	dd401815 	stw	r21,96(sp)
    8a0c:	dd001715 	stw	r20,92(sp)
    8a10:	dcc01615 	stw	r19,88(sp)
    8a14:	dc801515 	stw	r18,84(sp)
    8a18:	dc401415 	stw	r17,80(sp)
    8a1c:	dc001315 	stw	r16,76(sp)
    8a20:	00098500 	call	9850 <__unpack_d>
    8a24:	d9000f04 	addi	r4,sp,60
    8a28:	d9400504 	addi	r5,sp,20
    8a2c:	00098500 	call	9850 <__unpack_d>
    8a30:	d8c00a17 	ldw	r3,40(sp)
    8a34:	00800044 	movi	r2,1
    8a38:	10c01136 	bltu	r2,r3,8a80 <__muldf3+0xa0>
    8a3c:	d8c00b17 	ldw	r3,44(sp)
    8a40:	d8800617 	ldw	r2,24(sp)
    8a44:	d9000a04 	addi	r4,sp,40
    8a48:	1884c03a 	cmpne	r2,r3,r2
    8a4c:	d8800b15 	stw	r2,44(sp)
    8a50:	000962c0 	call	962c <__pack_d>
    8a54:	dfc01b17 	ldw	ra,108(sp)
    8a58:	ddc01a17 	ldw	r23,104(sp)
    8a5c:	dd801917 	ldw	r22,100(sp)
    8a60:	dd401817 	ldw	r21,96(sp)
    8a64:	dd001717 	ldw	r20,92(sp)
    8a68:	dcc01617 	ldw	r19,88(sp)
    8a6c:	dc801517 	ldw	r18,84(sp)
    8a70:	dc401417 	ldw	r17,80(sp)
    8a74:	dc001317 	ldw	r16,76(sp)
    8a78:	dec01c04 	addi	sp,sp,112
    8a7c:	f800283a 	ret
    8a80:	d9000517 	ldw	r4,20(sp)
    8a84:	11000636 	bltu	r2,r4,8aa0 <__muldf3+0xc0>
    8a88:	d8800617 	ldw	r2,24(sp)
    8a8c:	d8c00b17 	ldw	r3,44(sp)
    8a90:	d9000504 	addi	r4,sp,20
    8a94:	1884c03a 	cmpne	r2,r3,r2
    8a98:	d8800615 	stw	r2,24(sp)
    8a9c:	003fec06 	br	8a50 <__muldf3+0x70>
    8aa0:	00800104 	movi	r2,4
    8aa4:	1880051e 	bne	r3,r2,8abc <__muldf3+0xdc>
    8aa8:	00800084 	movi	r2,2
    8aac:	20bfe31e 	bne	r4,r2,8a3c <__muldf3+0x5c>
    8ab0:	01000074 	movhi	r4,1
    8ab4:	21008704 	addi	r4,r4,540
    8ab8:	003fe506 	br	8a50 <__muldf3+0x70>
    8abc:	2080031e 	bne	r4,r2,8acc <__muldf3+0xec>
    8ac0:	00800084 	movi	r2,2
    8ac4:	18bffa26 	beq	r3,r2,8ab0 <__muldf3+0xd0>
    8ac8:	003fef06 	br	8a88 <__muldf3+0xa8>
    8acc:	00800084 	movi	r2,2
    8ad0:	18bfda26 	beq	r3,r2,8a3c <__muldf3+0x5c>
    8ad4:	20bfec26 	beq	r4,r2,8a88 <__muldf3+0xa8>
    8ad8:	dc000d17 	ldw	r16,52(sp)
    8adc:	dd000817 	ldw	r20,32(sp)
    8ae0:	dc800917 	ldw	r18,36(sp)
    8ae4:	8009883a 	mov	r4,r16
    8ae8:	000b883a 	mov	r5,zero
    8aec:	a00d883a 	mov	r6,r20
    8af0:	000f883a 	mov	r7,zero
    8af4:	00094700 	call	9470 <__muldi3>
    8af8:	dc400e17 	ldw	r17,56(sp)
    8afc:	9009883a 	mov	r4,r18
    8b00:	800d883a 	mov	r6,r16
    8b04:	000b883a 	mov	r5,zero
    8b08:	000f883a 	mov	r7,zero
    8b0c:	102f883a 	mov	r23,r2
    8b10:	1827883a 	mov	r19,r3
    8b14:	00094700 	call	9470 <__muldi3>
    8b18:	900d883a 	mov	r6,r18
    8b1c:	8809883a 	mov	r4,r17
    8b20:	000b883a 	mov	r5,zero
    8b24:	000f883a 	mov	r7,zero
    8b28:	102b883a 	mov	r21,r2
    8b2c:	1821883a 	mov	r16,r3
    8b30:	00094700 	call	9470 <__muldi3>
    8b34:	8809883a 	mov	r4,r17
    8b38:	000b883a 	mov	r5,zero
    8b3c:	a00d883a 	mov	r6,r20
    8b40:	000f883a 	mov	r7,zero
    8b44:	102d883a 	mov	r22,r2
    8b48:	1825883a 	mov	r18,r3
    8b4c:	00094700 	call	9470 <__muldi3>
    8b50:	154b883a 	add	r5,r2,r21
    8b54:	2889803a 	cmpltu	r4,r5,r2
    8b58:	1c07883a 	add	r3,r3,r16
    8b5c:	20c9883a 	add	r4,r4,r3
    8b60:	24004b36 	bltu	r4,r16,8c90 <__muldf3+0x2b0>
    8b64:	8100011e 	bne	r16,r4,8b6c <__muldf3+0x18c>
    8b68:	2d404936 	bltu	r5,r21,8c90 <__muldf3+0x2b0>
    8b6c:	0011883a 	mov	r8,zero
    8b70:	0007883a 	mov	r3,zero
    8b74:	2ccb883a 	add	r5,r5,r19
    8b78:	b80d883a 	mov	r6,r23
    8b7c:	2cc0012e 	bgeu	r5,r19,8b84 <__muldf3+0x1a4>
    8b80:	02000044 	movi	r8,1
    8b84:	258f883a 	add	r7,r4,r22
    8b88:	3909803a 	cmpltu	r4,r7,r4
    8b8c:	da400c17 	ldw	r9,48(sp)
    8b90:	2489883a 	add	r4,r4,r18
    8b94:	d8800717 	ldw	r2,28(sp)
    8b98:	20c9883a 	add	r4,r4,r3
    8b9c:	da800b17 	ldw	r10,44(sp)
    8ba0:	d8c00617 	ldw	r3,24(sp)
    8ba4:	3a11883a 	add	r8,r7,r8
    8ba8:	4885883a 	add	r2,r9,r2
    8bac:	50c6c03a 	cmpne	r3,r10,r3
    8bb0:	41cf803a 	cmpltu	r7,r8,r7
    8bb4:	12400104 	addi	r9,r2,4
    8bb8:	d8c00115 	stw	r3,4(sp)
    8bbc:	3909883a 	add	r4,r7,r4
    8bc0:	da400215 	stw	r9,8(sp)
    8bc4:	03480034 	movhi	r13,8192
    8bc8:	6b7fffc4 	addi	r13,r13,-1
    8bcc:	4007883a 	mov	r3,r8
    8bd0:	6900102e 	bgeu	r13,r4,8c14 <__muldf3+0x234>
    8bd4:	10800144 	addi	r2,r2,5
    8bd8:	180ed07a 	srli	r7,r3,1
    8bdc:	18c0004c 	andi	r3,r3,1
    8be0:	201097fa 	slli	r8,r4,31
    8be4:	281697fa 	slli	r11,r5,31
    8be8:	2008d07a 	srli	r4,r4,1
    8bec:	3014d07a 	srli	r10,r6,1
    8bf0:	2812d07a 	srli	r9,r5,1
    8bf4:	1019883a 	mov	r12,r2
    8bf8:	18000226 	beq	r3,zero,8c04 <__muldf3+0x224>
    8bfc:	5a8cb03a 	or	r6,r11,r10
    8c00:	49600034 	orhi	r5,r9,32768
    8c04:	41c6b03a 	or	r3,r8,r7
    8c08:	10800044 	addi	r2,r2,1
    8c0c:	693ff236 	bltu	r13,r4,8bd8 <__muldf3+0x1f8>
    8c10:	db000215 	stw	r12,8(sp)
    8c14:	03440034 	movhi	r13,4096
    8c18:	6b7fffc4 	addi	r13,r13,-1
    8c1c:	69001336 	bltu	r13,r4,8c6c <__muldf3+0x28c>
    8c20:	d8800217 	ldw	r2,8(sp)
    8c24:	10bfffc4 	addi	r2,r2,-1
    8c28:	18d3883a 	add	r9,r3,r3
    8c2c:	48c7803a 	cmpltu	r3,r9,r3
    8c30:	2109883a 	add	r4,r4,r4
    8c34:	190f883a 	add	r7,r3,r4
    8c38:	3191883a 	add	r8,r6,r6
    8c3c:	4197803a 	cmpltu	r11,r8,r6
    8c40:	2955883a 	add	r10,r5,r5
    8c44:	1019883a 	mov	r12,r2
    8c48:	4807883a 	mov	r3,r9
    8c4c:	3809883a 	mov	r4,r7
    8c50:	2800010e 	bge	r5,zero,8c58 <__muldf3+0x278>
    8c54:	48c00054 	ori	r3,r9,1
    8c58:	400d883a 	mov	r6,r8
    8c5c:	5a8b883a 	add	r5,r11,r10
    8c60:	10bfffc4 	addi	r2,r2,-1
    8c64:	69fff02e 	bgeu	r13,r7,8c28 <__muldf3+0x248>
    8c68:	db000215 	stw	r12,8(sp)
    8c6c:	18803fcc 	andi	r2,r3,255
    8c70:	01c02004 	movi	r7,128
    8c74:	11c00926 	beq	r2,r7,8c9c <__muldf3+0x2bc>
    8c78:	008000c4 	movi	r2,3
    8c7c:	d9000415 	stw	r4,16(sp)
    8c80:	d8c00315 	stw	r3,12(sp)
    8c84:	d8800015 	stw	r2,0(sp)
    8c88:	d809883a 	mov	r4,sp
    8c8c:	003f7006 	br	8a50 <__muldf3+0x70>
    8c90:	0011883a 	mov	r8,zero
    8c94:	00c00044 	movi	r3,1
    8c98:	003fb606 	br	8b74 <__muldf3+0x194>
    8c9c:	19c0400c 	andi	r7,r3,256
    8ca0:	383ff51e 	bne	r7,zero,8c78 <__muldf3+0x298>
    8ca4:	314ab03a 	or	r5,r6,r5
    8ca8:	283ff326 	beq	r5,zero,8c78 <__muldf3+0x298>
    8cac:	1885883a 	add	r2,r3,r2
    8cb0:	10cb803a 	cmpltu	r5,r2,r3
    8cb4:	00ffc004 	movi	r3,-256
    8cb8:	10c6703a 	and	r3,r2,r3
    8cbc:	2909883a 	add	r4,r5,r4
    8cc0:	003fed06 	br	8c78 <__muldf3+0x298>

00008cc4 <__divdf3>:
    8cc4:	defff104 	addi	sp,sp,-60
    8cc8:	d9000c15 	stw	r4,48(sp)
    8ccc:	d9400d15 	stw	r5,52(sp)
    8cd0:	d9000c04 	addi	r4,sp,48
    8cd4:	d9400504 	addi	r5,sp,20
    8cd8:	dfc00e15 	stw	ra,56(sp)
    8cdc:	d9800a15 	stw	r6,40(sp)
    8ce0:	d9c00b15 	stw	r7,44(sp)
    8ce4:	00098500 	call	9850 <__unpack_d>
    8ce8:	d9000a04 	addi	r4,sp,40
    8cec:	d80b883a 	mov	r5,sp
    8cf0:	00098500 	call	9850 <__unpack_d>
    8cf4:	d8c00517 	ldw	r3,20(sp)
    8cf8:	00800044 	movi	r2,1
    8cfc:	10c00536 	bltu	r2,r3,8d14 <__divdf3+0x50>
    8d00:	d9000504 	addi	r4,sp,20
    8d04:	000962c0 	call	962c <__pack_d>
    8d08:	dfc00e17 	ldw	ra,56(sp)
    8d0c:	dec00f04 	addi	sp,sp,60
    8d10:	f800283a 	ret
    8d14:	d9000017 	ldw	r4,0(sp)
    8d18:	11000536 	bltu	r2,r4,8d30 <__divdf3+0x6c>
    8d1c:	d809883a 	mov	r4,sp
    8d20:	000962c0 	call	962c <__pack_d>
    8d24:	dfc00e17 	ldw	ra,56(sp)
    8d28:	dec00f04 	addi	sp,sp,60
    8d2c:	f800283a 	ret
    8d30:	d9800617 	ldw	r6,24(sp)
    8d34:	d9400117 	ldw	r5,4(sp)
    8d38:	00800104 	movi	r2,4
    8d3c:	314af03a 	xor	r5,r6,r5
    8d40:	d9400615 	stw	r5,24(sp)
    8d44:	18800226 	beq	r3,r2,8d50 <__divdf3+0x8c>
    8d48:	01400084 	movi	r5,2
    8d4c:	1940041e 	bne	r3,r5,8d60 <__divdf3+0x9c>
    8d50:	193feb1e 	bne	r3,r4,8d00 <__divdf3+0x3c>
    8d54:	01000074 	movhi	r4,1
    8d58:	21008704 	addi	r4,r4,540
    8d5c:	003fe906 	br	8d04 <__divdf3+0x40>
    8d60:	20803326 	beq	r4,r2,8e30 <__divdf3+0x16c>
    8d64:	21403726 	beq	r4,r5,8e44 <__divdf3+0x180>
    8d68:	d8800217 	ldw	r2,8(sp)
    8d6c:	d9000717 	ldw	r4,28(sp)
    8d70:	d8c00917 	ldw	r3,36(sp)
    8d74:	da000417 	ldw	r8,16(sp)
    8d78:	2089c83a 	sub	r4,r4,r2
    8d7c:	d9000715 	stw	r4,28(sp)
    8d80:	d8800817 	ldw	r2,32(sp)
    8d84:	dbc00317 	ldw	r15,12(sp)
    8d88:	1a000236 	bltu	r3,r8,8d94 <__divdf3+0xd0>
    8d8c:	40c0081e 	bne	r8,r3,8db0 <__divdf3+0xec>
    8d90:	13c0072e 	bgeu	r2,r15,8db0 <__divdf3+0xec>
    8d94:	108b883a 	add	r5,r2,r2
    8d98:	288d803a 	cmpltu	r6,r5,r2
    8d9c:	18c7883a 	add	r3,r3,r3
    8da0:	213fffc4 	addi	r4,r4,-1
    8da4:	2805883a 	mov	r2,r5
    8da8:	30c7883a 	add	r3,r6,r3
    8dac:	d9000715 	stw	r4,28(sp)
    8db0:	01400f44 	movi	r5,61
    8db4:	000f883a 	mov	r7,zero
    8db8:	01040034 	movhi	r4,4096
    8dbc:	0019883a 	mov	r12,zero
    8dc0:	001b883a 	mov	r13,zero
    8dc4:	201697fa 	slli	r11,r4,31
    8dc8:	3814d07a 	srli	r10,r7,1
    8dcc:	297fffc4 	addi	r5,r5,-1
    8dd0:	1a000936 	bltu	r3,r8,8df8 <__divdf3+0x134>
    8dd4:	13cdc83a 	sub	r6,r2,r15
    8dd8:	1193803a 	cmpltu	r9,r2,r6
    8ddc:	1a1dc83a 	sub	r14,r3,r8
    8de0:	40c0011e 	bne	r8,r3,8de8 <__divdf3+0x124>
    8de4:	13c00436 	bltu	r2,r15,8df8 <__divdf3+0x134>
    8de8:	3005883a 	mov	r2,r6
    8dec:	7247c83a 	sub	r3,r14,r9
    8df0:	61d8b03a 	or	r12,r12,r7
    8df4:	691ab03a 	or	r13,r13,r4
    8df8:	108d883a 	add	r6,r2,r2
    8dfc:	3093803a 	cmpltu	r9,r6,r2
    8e00:	18c7883a 	add	r3,r3,r3
    8e04:	5a8eb03a 	or	r7,r11,r10
    8e08:	2008d07a 	srli	r4,r4,1
    8e0c:	3005883a 	mov	r2,r6
    8e10:	48c7883a 	add	r3,r9,r3
    8e14:	283feb1e 	bne	r5,zero,8dc4 <__divdf3+0x100>
    8e18:	61003fcc 	andi	r4,r12,255
    8e1c:	01402004 	movi	r5,128
    8e20:	21400b26 	beq	r4,r5,8e50 <__divdf3+0x18c>
    8e24:	db000815 	stw	r12,32(sp)
    8e28:	db400915 	stw	r13,36(sp)
    8e2c:	003fb406 	br	8d00 <__divdf3+0x3c>
    8e30:	d8000815 	stw	zero,32(sp)
    8e34:	d8000915 	stw	zero,36(sp)
    8e38:	d8000715 	stw	zero,28(sp)
    8e3c:	d9000504 	addi	r4,sp,20
    8e40:	003fb006 	br	8d04 <__divdf3+0x40>
    8e44:	d8800515 	stw	r2,20(sp)
    8e48:	d9000504 	addi	r4,sp,20
    8e4c:	003fad06 	br	8d04 <__divdf3+0x40>
    8e50:	6140400c 	andi	r5,r12,256
    8e54:	283ff31e 	bne	r5,zero,8e24 <__divdf3+0x160>
    8e58:	30c4b03a 	or	r2,r6,r3
    8e5c:	103ff126 	beq	r2,zero,8e24 <__divdf3+0x160>
    8e60:	6109883a 	add	r4,r12,r4
    8e64:	2305803a 	cmpltu	r2,r4,r12
    8e68:	033fc004 	movi	r12,-256
    8e6c:	2318703a 	and	r12,r4,r12
    8e70:	135b883a 	add	r13,r2,r13
    8e74:	003feb06 	br	8e24 <__divdf3+0x160>

00008e78 <__eqdf2>:
    8e78:	defff104 	addi	sp,sp,-60
    8e7c:	d9000c15 	stw	r4,48(sp)
    8e80:	d9400d15 	stw	r5,52(sp)
    8e84:	d9000c04 	addi	r4,sp,48
    8e88:	d9400504 	addi	r5,sp,20
    8e8c:	dfc00e15 	stw	ra,56(sp)
    8e90:	d9800a15 	stw	r6,40(sp)
    8e94:	d9c00b15 	stw	r7,44(sp)
    8e98:	00098500 	call	9850 <__unpack_d>
    8e9c:	d9000a04 	addi	r4,sp,40
    8ea0:	d80b883a 	mov	r5,sp
    8ea4:	00098500 	call	9850 <__unpack_d>
    8ea8:	d8c00517 	ldw	r3,20(sp)
    8eac:	00800044 	movi	r2,1
    8eb0:	10c0052e 	bgeu	r2,r3,8ec8 <__eqdf2+0x50>
    8eb4:	d8c00017 	ldw	r3,0(sp)
    8eb8:	10c0032e 	bgeu	r2,r3,8ec8 <__eqdf2+0x50>
    8ebc:	d9000504 	addi	r4,sp,20
    8ec0:	d80b883a 	mov	r5,sp
    8ec4:	00099540 	call	9954 <__fpcmp_parts_d>
    8ec8:	dfc00e17 	ldw	ra,56(sp)
    8ecc:	dec00f04 	addi	sp,sp,60
    8ed0:	f800283a 	ret

00008ed4 <__nedf2>:
    8ed4:	defff104 	addi	sp,sp,-60
    8ed8:	d9000c15 	stw	r4,48(sp)
    8edc:	d9400d15 	stw	r5,52(sp)
    8ee0:	d9000c04 	addi	r4,sp,48
    8ee4:	d9400504 	addi	r5,sp,20
    8ee8:	dfc00e15 	stw	ra,56(sp)
    8eec:	d9800a15 	stw	r6,40(sp)
    8ef0:	d9c00b15 	stw	r7,44(sp)
    8ef4:	00098500 	call	9850 <__unpack_d>
    8ef8:	d9000a04 	addi	r4,sp,40
    8efc:	d80b883a 	mov	r5,sp
    8f00:	00098500 	call	9850 <__unpack_d>
    8f04:	d8c00517 	ldw	r3,20(sp)
    8f08:	00800044 	movi	r2,1
    8f0c:	10c0052e 	bgeu	r2,r3,8f24 <__nedf2+0x50>
    8f10:	d8c00017 	ldw	r3,0(sp)
    8f14:	10c0032e 	bgeu	r2,r3,8f24 <__nedf2+0x50>
    8f18:	d9000504 	addi	r4,sp,20
    8f1c:	d80b883a 	mov	r5,sp
    8f20:	00099540 	call	9954 <__fpcmp_parts_d>
    8f24:	dfc00e17 	ldw	ra,56(sp)
    8f28:	dec00f04 	addi	sp,sp,60
    8f2c:	f800283a 	ret

00008f30 <__gtdf2>:
    8f30:	defff104 	addi	sp,sp,-60
    8f34:	d9000c15 	stw	r4,48(sp)
    8f38:	d9400d15 	stw	r5,52(sp)
    8f3c:	d9000c04 	addi	r4,sp,48
    8f40:	d9400504 	addi	r5,sp,20
    8f44:	dfc00e15 	stw	ra,56(sp)
    8f48:	d9800a15 	stw	r6,40(sp)
    8f4c:	d9c00b15 	stw	r7,44(sp)
    8f50:	00098500 	call	9850 <__unpack_d>
    8f54:	d9000a04 	addi	r4,sp,40
    8f58:	d80b883a 	mov	r5,sp
    8f5c:	00098500 	call	9850 <__unpack_d>
    8f60:	d8c00517 	ldw	r3,20(sp)
    8f64:	00800044 	movi	r2,1
    8f68:	10c0082e 	bgeu	r2,r3,8f8c <__gtdf2+0x5c>
    8f6c:	d8c00017 	ldw	r3,0(sp)
    8f70:	10c0062e 	bgeu	r2,r3,8f8c <__gtdf2+0x5c>
    8f74:	d9000504 	addi	r4,sp,20
    8f78:	d80b883a 	mov	r5,sp
    8f7c:	00099540 	call	9954 <__fpcmp_parts_d>
    8f80:	dfc00e17 	ldw	ra,56(sp)
    8f84:	dec00f04 	addi	sp,sp,60
    8f88:	f800283a 	ret
    8f8c:	00bfffc4 	movi	r2,-1
    8f90:	003ffb06 	br	8f80 <__gtdf2+0x50>

00008f94 <__gedf2>:
    8f94:	defff104 	addi	sp,sp,-60
    8f98:	d9000c15 	stw	r4,48(sp)
    8f9c:	d9400d15 	stw	r5,52(sp)
    8fa0:	d9000c04 	addi	r4,sp,48
    8fa4:	d9400504 	addi	r5,sp,20
    8fa8:	dfc00e15 	stw	ra,56(sp)
    8fac:	d9800a15 	stw	r6,40(sp)
    8fb0:	d9c00b15 	stw	r7,44(sp)
    8fb4:	00098500 	call	9850 <__unpack_d>
    8fb8:	d9000a04 	addi	r4,sp,40
    8fbc:	d80b883a 	mov	r5,sp
    8fc0:	00098500 	call	9850 <__unpack_d>
    8fc4:	d8c00517 	ldw	r3,20(sp)
    8fc8:	00800044 	movi	r2,1
    8fcc:	10c0082e 	bgeu	r2,r3,8ff0 <__gedf2+0x5c>
    8fd0:	d8c00017 	ldw	r3,0(sp)
    8fd4:	10c0062e 	bgeu	r2,r3,8ff0 <__gedf2+0x5c>
    8fd8:	d9000504 	addi	r4,sp,20
    8fdc:	d80b883a 	mov	r5,sp
    8fe0:	00099540 	call	9954 <__fpcmp_parts_d>
    8fe4:	dfc00e17 	ldw	ra,56(sp)
    8fe8:	dec00f04 	addi	sp,sp,60
    8fec:	f800283a 	ret
    8ff0:	00bfffc4 	movi	r2,-1
    8ff4:	003ffb06 	br	8fe4 <__gedf2+0x50>

00008ff8 <__ltdf2>:
    8ff8:	defff104 	addi	sp,sp,-60
    8ffc:	d9000c15 	stw	r4,48(sp)
    9000:	d9400d15 	stw	r5,52(sp)
    9004:	d9000c04 	addi	r4,sp,48
    9008:	d9400504 	addi	r5,sp,20
    900c:	dfc00e15 	stw	ra,56(sp)
    9010:	d9800a15 	stw	r6,40(sp)
    9014:	d9c00b15 	stw	r7,44(sp)
    9018:	00098500 	call	9850 <__unpack_d>
    901c:	d9000a04 	addi	r4,sp,40
    9020:	d80b883a 	mov	r5,sp
    9024:	00098500 	call	9850 <__unpack_d>
    9028:	d8c00517 	ldw	r3,20(sp)
    902c:	00800044 	movi	r2,1
    9030:	10c0052e 	bgeu	r2,r3,9048 <__ltdf2+0x50>
    9034:	d8c00017 	ldw	r3,0(sp)
    9038:	10c0032e 	bgeu	r2,r3,9048 <__ltdf2+0x50>
    903c:	d9000504 	addi	r4,sp,20
    9040:	d80b883a 	mov	r5,sp
    9044:	00099540 	call	9954 <__fpcmp_parts_d>
    9048:	dfc00e17 	ldw	ra,56(sp)
    904c:	dec00f04 	addi	sp,sp,60
    9050:	f800283a 	ret

00009054 <__floatsidf>:
    9054:	2004d7fa 	srli	r2,r4,31
    9058:	defff904 	addi	sp,sp,-28
    905c:	00c000c4 	movi	r3,3
    9060:	dfc00615 	stw	ra,24(sp)
    9064:	dc000515 	stw	r16,20(sp)
    9068:	d8c00015 	stw	r3,0(sp)
    906c:	d8800115 	stw	r2,4(sp)
    9070:	2000081e 	bne	r4,zero,9094 <__floatsidf+0x40>
    9074:	00800084 	movi	r2,2
    9078:	d8800015 	stw	r2,0(sp)
    907c:	d809883a 	mov	r4,sp
    9080:	000962c0 	call	962c <__pack_d>
    9084:	dfc00617 	ldw	ra,24(sp)
    9088:	dc000517 	ldw	r16,20(sp)
    908c:	dec00704 	addi	sp,sp,28
    9090:	f800283a 	ret
    9094:	00c00f04 	movi	r3,60
    9098:	d8c00215 	stw	r3,8(sp)
    909c:	10000f1e 	bne	r2,zero,90dc <__floatsidf+0x88>
    90a0:	2021883a 	mov	r16,r4
    90a4:	8009883a 	mov	r4,r16
    90a8:	00095800 	call	9580 <__clzsi2>
    90ac:	11000744 	addi	r4,r2,29
    90b0:	0100110e 	bge	zero,r4,90f8 <__floatsidf+0xa4>
    90b4:	10ffff44 	addi	r3,r2,-3
    90b8:	18001216 	blt	r3,zero,9104 <__floatsidf+0xb0>
    90bc:	80c6983a 	sll	r3,r16,r3
    90c0:	0009883a 	mov	r4,zero
    90c4:	014007c4 	movi	r5,31
    90c8:	2885c83a 	sub	r2,r5,r2
    90cc:	d9000315 	stw	r4,12(sp)
    90d0:	d8c00415 	stw	r3,16(sp)
    90d4:	d8800215 	stw	r2,8(sp)
    90d8:	003fe806 	br	907c <__floatsidf+0x28>
    90dc:	00a00034 	movhi	r2,32768
    90e0:	20800e26 	beq	r4,r2,911c <__floatsidf+0xc8>
    90e4:	0121c83a 	sub	r16,zero,r4
    90e8:	8009883a 	mov	r4,r16
    90ec:	00095800 	call	9580 <__clzsi2>
    90f0:	11000744 	addi	r4,r2,29
    90f4:	013fef16 	blt	zero,r4,90b4 <__floatsidf+0x60>
    90f8:	dc000315 	stw	r16,12(sp)
    90fc:	d8000415 	stw	zero,16(sp)
    9100:	003fde06 	br	907c <__floatsidf+0x28>
    9104:	800ad07a 	srli	r5,r16,1
    9108:	00c007c4 	movi	r3,31
    910c:	1907c83a 	sub	r3,r3,r4
    9110:	28c6d83a 	srl	r3,r5,r3
    9114:	8108983a 	sll	r4,r16,r4
    9118:	003fea06 	br	90c4 <__floatsidf+0x70>
    911c:	0005883a 	mov	r2,zero
    9120:	00f07834 	movhi	r3,49632
    9124:	003fd706 	br	9084 <__floatsidf+0x30>

00009128 <__fixdfsi>:
    9128:	defff804 	addi	sp,sp,-32
    912c:	d9000515 	stw	r4,20(sp)
    9130:	d9400615 	stw	r5,24(sp)
    9134:	d9000504 	addi	r4,sp,20
    9138:	d80b883a 	mov	r5,sp
    913c:	dfc00715 	stw	ra,28(sp)
    9140:	00098500 	call	9850 <__unpack_d>
    9144:	d8800017 	ldw	r2,0(sp)
    9148:	00c00084 	movi	r3,2
    914c:	10c01c26 	beq	r2,r3,91c0 <__fixdfsi+0x98>
    9150:	00c00044 	movi	r3,1
    9154:	18801a2e 	bgeu	r3,r2,91c0 <__fixdfsi+0x98>
    9158:	00c00104 	movi	r3,4
    915c:	10c01126 	beq	r2,r3,91a4 <__fixdfsi+0x7c>
    9160:	d8800217 	ldw	r2,8(sp)
    9164:	10001616 	blt	r2,zero,91c0 <__fixdfsi+0x98>
    9168:	00c00784 	movi	r3,30
    916c:	18800d16 	blt	r3,r2,91a4 <__fixdfsi+0x7c>
    9170:	00c00f04 	movi	r3,60
    9174:	1885c83a 	sub	r2,r3,r2
    9178:	10fff804 	addi	r3,r2,-32
    917c:	d9400317 	ldw	r5,12(sp)
    9180:	d9000417 	ldw	r4,16(sp)
    9184:	18001616 	blt	r3,zero,91e0 <__fixdfsi+0xb8>
    9188:	20c4d83a 	srl	r2,r4,r3
    918c:	d8c00117 	ldw	r3,4(sp)
    9190:	18000126 	beq	r3,zero,9198 <__fixdfsi+0x70>
    9194:	0085c83a 	sub	r2,zero,r2
    9198:	dfc00717 	ldw	ra,28(sp)
    919c:	dec00804 	addi	sp,sp,32
    91a0:	f800283a 	ret
    91a4:	d8800117 	ldw	r2,4(sp)
    91a8:	1000091e 	bne	r2,zero,91d0 <__fixdfsi+0xa8>
    91ac:	00a00034 	movhi	r2,32768
    91b0:	10bfffc4 	addi	r2,r2,-1
    91b4:	dfc00717 	ldw	ra,28(sp)
    91b8:	dec00804 	addi	sp,sp,32
    91bc:	f800283a 	ret
    91c0:	0005883a 	mov	r2,zero
    91c4:	dfc00717 	ldw	ra,28(sp)
    91c8:	dec00804 	addi	sp,sp,32
    91cc:	f800283a 	ret
    91d0:	00a00034 	movhi	r2,32768
    91d4:	dfc00717 	ldw	ra,28(sp)
    91d8:	dec00804 	addi	sp,sp,32
    91dc:	f800283a 	ret
    91e0:	2008907a 	slli	r4,r4,1
    91e4:	018007c4 	movi	r6,31
    91e8:	308dc83a 	sub	r6,r6,r2
    91ec:	2188983a 	sll	r4,r4,r6
    91f0:	2884d83a 	srl	r2,r5,r2
    91f4:	2084b03a 	or	r2,r4,r2
    91f8:	003fe406 	br	918c <__fixdfsi+0x64>

000091fc <__floatunsidf>:
    91fc:	defff904 	addi	sp,sp,-28
    9200:	dc000515 	stw	r16,20(sp)
    9204:	dfc00615 	stw	ra,24(sp)
    9208:	d8000115 	stw	zero,4(sp)
    920c:	2021883a 	mov	r16,r4
    9210:	20001726 	beq	r4,zero,9270 <__floatunsidf+0x74>
    9214:	008000c4 	movi	r2,3
    9218:	d8800015 	stw	r2,0(sp)
    921c:	00800f04 	movi	r2,60
    9220:	d8800215 	stw	r2,8(sp)
    9224:	00095800 	call	9580 <__clzsi2>
    9228:	10c00744 	addi	r3,r2,29
    922c:	18001816 	blt	r3,zero,9290 <__floatunsidf+0x94>
    9230:	18002d26 	beq	r3,zero,92e8 <__floatunsidf+0xec>
    9234:	113fff44 	addi	r4,r2,-3
    9238:	20002e16 	blt	r4,zero,92f4 <__floatunsidf+0xf8>
    923c:	8108983a 	sll	r4,r16,r4
    9240:	0021883a 	mov	r16,zero
    9244:	014007c4 	movi	r5,31
    9248:	2885c83a 	sub	r2,r5,r2
    924c:	dc000315 	stw	r16,12(sp)
    9250:	d9000415 	stw	r4,16(sp)
    9254:	d8800215 	stw	r2,8(sp)
    9258:	d809883a 	mov	r4,sp
    925c:	000962c0 	call	962c <__pack_d>
    9260:	dfc00617 	ldw	ra,24(sp)
    9264:	dc000517 	ldw	r16,20(sp)
    9268:	dec00704 	addi	sp,sp,28
    926c:	f800283a 	ret
    9270:	00800084 	movi	r2,2
    9274:	d809883a 	mov	r4,sp
    9278:	d8800015 	stw	r2,0(sp)
    927c:	000962c0 	call	962c <__pack_d>
    9280:	dfc00617 	ldw	ra,24(sp)
    9284:	dc000517 	ldw	r16,20(sp)
    9288:	dec00704 	addi	sp,sp,28
    928c:	f800283a 	ret
    9290:	00c7c83a 	sub	r3,zero,r3
    9294:	193ff804 	addi	r4,r3,-32
    9298:	20001c16 	blt	r4,zero,930c <__floatunsidf+0x110>
    929c:	000b883a 	mov	r5,zero
    92a0:	2009d7fa 	srai	r4,r4,31
    92a4:	80c6d83a 	srl	r3,r16,r3
    92a8:	297fffc4 	addi	r5,r5,-1
    92ac:	2c20703a 	and	r16,r5,r16
    92b0:	8020c03a 	cmpne	r16,r16,zero
    92b4:	1906703a 	and	r3,r3,r4
    92b8:	010007c4 	movi	r4,31
    92bc:	80c6b03a 	or	r3,r16,r3
    92c0:	2085c83a 	sub	r2,r4,r2
    92c4:	d809883a 	mov	r4,sp
    92c8:	d8c00315 	stw	r3,12(sp)
    92cc:	d8000415 	stw	zero,16(sp)
    92d0:	d8800215 	stw	r2,8(sp)
    92d4:	000962c0 	call	962c <__pack_d>
    92d8:	dfc00617 	ldw	ra,24(sp)
    92dc:	dc000517 	ldw	r16,20(sp)
    92e0:	dec00704 	addi	sp,sp,28
    92e4:	f800283a 	ret
    92e8:	dc000315 	stw	r16,12(sp)
    92ec:	d8000415 	stw	zero,16(sp)
    92f0:	003fd906 	br	9258 <__floatunsidf+0x5c>
    92f4:	800ad07a 	srli	r5,r16,1
    92f8:	010007c4 	movi	r4,31
    92fc:	20c9c83a 	sub	r4,r4,r3
    9300:	2908d83a 	srl	r4,r5,r4
    9304:	80e0983a 	sll	r16,r16,r3
    9308:	003fce06 	br	9244 <__floatunsidf+0x48>
    930c:	01400044 	movi	r5,1
    9310:	28ca983a 	sll	r5,r5,r3
    9314:	003fe206 	br	92a0 <__floatunsidf+0xa4>

00009318 <udivmodsi4>:
    9318:	2005883a 	mov	r2,r4
    931c:	2900182e 	bgeu	r5,r4,9380 <udivmodsi4+0x68>
    9320:	28001716 	blt	r5,zero,9380 <udivmodsi4+0x68>
    9324:	01000804 	movi	r4,32
    9328:	00c00044 	movi	r3,1
    932c:	00000206 	br	9338 <udivmodsi4+0x20>
    9330:	20001126 	beq	r4,zero,9378 <udivmodsi4+0x60>
    9334:	28000516 	blt	r5,zero,934c <udivmodsi4+0x34>
    9338:	294b883a 	add	r5,r5,r5
    933c:	213fffc4 	addi	r4,r4,-1
    9340:	18c7883a 	add	r3,r3,r3
    9344:	28bffa36 	bltu	r5,r2,9330 <udivmodsi4+0x18>
    9348:	18000b26 	beq	r3,zero,9378 <udivmodsi4+0x60>
    934c:	0009883a 	mov	r4,zero
    9350:	11400236 	bltu	r2,r5,935c <udivmodsi4+0x44>
    9354:	1145c83a 	sub	r2,r2,r5
    9358:	20c8b03a 	or	r4,r4,r3
    935c:	1806d07a 	srli	r3,r3,1
    9360:	280ad07a 	srli	r5,r5,1
    9364:	183ffa1e 	bne	r3,zero,9350 <udivmodsi4+0x38>
    9368:	3000021e 	bne	r6,zero,9374 <udivmodsi4+0x5c>
    936c:	2005883a 	mov	r2,r4
    9370:	f800283a 	ret
    9374:	f800283a 	ret
    9378:	0009883a 	mov	r4,zero
    937c:	003ffa06 	br	9368 <udivmodsi4+0x50>
    9380:	00c00044 	movi	r3,1
    9384:	0009883a 	mov	r4,zero
    9388:	003ff106 	br	9350 <udivmodsi4+0x38>

0000938c <__divsi3>:
    938c:	defffe04 	addi	sp,sp,-8
    9390:	dfc00115 	stw	ra,4(sp)
    9394:	dc000015 	stw	r16,0(sp)
    9398:	20000a16 	blt	r4,zero,93c4 <__divsi3+0x38>
    939c:	0021883a 	mov	r16,zero
    93a0:	28000b16 	blt	r5,zero,93d0 <__divsi3+0x44>
    93a4:	000d883a 	mov	r6,zero
    93a8:	00093180 	call	9318 <udivmodsi4>
    93ac:	80000126 	beq	r16,zero,93b4 <__divsi3+0x28>
    93b0:	0085c83a 	sub	r2,zero,r2
    93b4:	dfc00117 	ldw	ra,4(sp)
    93b8:	dc000017 	ldw	r16,0(sp)
    93bc:	dec00204 	addi	sp,sp,8
    93c0:	f800283a 	ret
    93c4:	0109c83a 	sub	r4,zero,r4
    93c8:	04000044 	movi	r16,1
    93cc:	283ff50e 	bge	r5,zero,93a4 <__divsi3+0x18>
    93d0:	014bc83a 	sub	r5,zero,r5
    93d4:	8400005c 	xori	r16,r16,1
    93d8:	003ff206 	br	93a4 <__divsi3+0x18>

000093dc <__modsi3>:
    93dc:	deffff04 	addi	sp,sp,-4
    93e0:	dfc00015 	stw	ra,0(sp)
    93e4:	20000516 	blt	r4,zero,93fc <__modsi3+0x20>
    93e8:	28000c16 	blt	r5,zero,941c <__modsi3+0x40>
    93ec:	01800044 	movi	r6,1
    93f0:	dfc00017 	ldw	ra,0(sp)
    93f4:	dec00104 	addi	sp,sp,4
    93f8:	00093181 	jmpi	9318 <udivmodsi4>
    93fc:	0109c83a 	sub	r4,zero,r4
    9400:	28000b16 	blt	r5,zero,9430 <__modsi3+0x54>
    9404:	01800044 	movi	r6,1
    9408:	00093180 	call	9318 <udivmodsi4>
    940c:	0085c83a 	sub	r2,zero,r2
    9410:	dfc00017 	ldw	ra,0(sp)
    9414:	dec00104 	addi	sp,sp,4
    9418:	f800283a 	ret
    941c:	014bc83a 	sub	r5,zero,r5
    9420:	01800044 	movi	r6,1
    9424:	dfc00017 	ldw	ra,0(sp)
    9428:	dec00104 	addi	sp,sp,4
    942c:	00093181 	jmpi	9318 <udivmodsi4>
    9430:	014bc83a 	sub	r5,zero,r5
    9434:	003ff306 	br	9404 <__modsi3+0x28>

00009438 <__udivsi3>:
    9438:	000d883a 	mov	r6,zero
    943c:	00093181 	jmpi	9318 <udivmodsi4>

00009440 <__umodsi3>:
    9440:	01800044 	movi	r6,1
    9444:	00093181 	jmpi	9318 <udivmodsi4>

00009448 <__mulsi3>:
    9448:	0005883a 	mov	r2,zero
    944c:	20000726 	beq	r4,zero,946c <__mulsi3+0x24>
    9450:	20c0004c 	andi	r3,r4,1
    9454:	2008d07a 	srli	r4,r4,1
    9458:	18000126 	beq	r3,zero,9460 <__mulsi3+0x18>
    945c:	1145883a 	add	r2,r2,r5
    9460:	294b883a 	add	r5,r5,r5
    9464:	203ffa1e 	bne	r4,zero,9450 <__mulsi3+0x8>
    9468:	f800283a 	ret
    946c:	f800283a 	ret

00009470 <__muldi3>:
    9470:	defff604 	addi	sp,sp,-40
    9474:	dd400515 	stw	r21,20(sp)
    9478:	dd000415 	stw	r20,16(sp)
    947c:	257fffcc 	andi	r21,r4,65535
    9480:	353fffcc 	andi	r20,r6,65535
    9484:	dcc00315 	stw	r19,12(sp)
    9488:	3026d43a 	srli	r19,r6,16
    948c:	dd800615 	stw	r22,24(sp)
    9490:	dc800215 	stw	r18,8(sp)
    9494:	dc400115 	stw	r17,4(sp)
    9498:	2024d43a 	srli	r18,r4,16
    949c:	2023883a 	mov	r17,r4
    94a0:	282d883a 	mov	r22,r5
    94a4:	a009883a 	mov	r4,r20
    94a8:	a80b883a 	mov	r5,r21
    94ac:	dfc00915 	stw	ra,36(sp)
    94b0:	df000815 	stw	fp,32(sp)
    94b4:	ddc00715 	stw	r23,28(sp)
    94b8:	3839883a 	mov	fp,r7
    94bc:	dc000015 	stw	r16,0(sp)
    94c0:	3021883a 	mov	r16,r6
    94c4:	00094480 	call	9448 <__mulsi3>
    94c8:	a80b883a 	mov	r5,r21
    94cc:	9809883a 	mov	r4,r19
    94d0:	102f883a 	mov	r23,r2
    94d4:	00094480 	call	9448 <__mulsi3>
    94d8:	a009883a 	mov	r4,r20
    94dc:	900b883a 	mov	r5,r18
    94e0:	102b883a 	mov	r21,r2
    94e4:	00094480 	call	9448 <__mulsi3>
    94e8:	9809883a 	mov	r4,r19
    94ec:	900b883a 	mov	r5,r18
    94f0:	1029883a 	mov	r20,r2
    94f4:	00094480 	call	9448 <__mulsi3>
    94f8:	1007883a 	mov	r3,r2
    94fc:	b804d43a 	srli	r2,r23,16
    9500:	a549883a 	add	r4,r20,r21
    9504:	2089883a 	add	r4,r4,r2
    9508:	2500022e 	bgeu	r4,r20,9514 <__muldi3+0xa4>
    950c:	00800074 	movhi	r2,1
    9510:	1887883a 	add	r3,r3,r2
    9514:	200cd43a 	srli	r6,r4,16
    9518:	2004943a 	slli	r2,r4,16
    951c:	e00b883a 	mov	r5,fp
    9520:	8809883a 	mov	r4,r17
    9524:	bdffffcc 	andi	r23,r23,65535
    9528:	19a3883a 	add	r17,r3,r6
    952c:	15ef883a 	add	r23,r2,r23
    9530:	00094480 	call	9448 <__mulsi3>
    9534:	8009883a 	mov	r4,r16
    9538:	b00b883a 	mov	r5,r22
    953c:	1025883a 	mov	r18,r2
    9540:	00094480 	call	9448 <__mulsi3>
    9544:	9085883a 	add	r2,r18,r2
    9548:	1447883a 	add	r3,r2,r17
    954c:	b805883a 	mov	r2,r23
    9550:	dfc00917 	ldw	ra,36(sp)
    9554:	df000817 	ldw	fp,32(sp)
    9558:	ddc00717 	ldw	r23,28(sp)
    955c:	dd800617 	ldw	r22,24(sp)
    9560:	dd400517 	ldw	r21,20(sp)
    9564:	dd000417 	ldw	r20,16(sp)
    9568:	dcc00317 	ldw	r19,12(sp)
    956c:	dc800217 	ldw	r18,8(sp)
    9570:	dc400117 	ldw	r17,4(sp)
    9574:	dc000017 	ldw	r16,0(sp)
    9578:	dec00a04 	addi	sp,sp,40
    957c:	f800283a 	ret

00009580 <__clzsi2>:
    9580:	00bfffd4 	movui	r2,65535
    9584:	11000b36 	bltu	r2,r4,95b4 <__clzsi2+0x34>
    9588:	00803fc4 	movi	r2,255
    958c:	11001e2e 	bgeu	r2,r4,9608 <__clzsi2+0x88>
    9590:	00c00204 	movi	r3,8
    9594:	20c8d83a 	srl	r4,r4,r3
    9598:	00c00074 	movhi	r3,1
    959c:	18c08c04 	addi	r3,r3,560
    95a0:	00800604 	movi	r2,24
    95a4:	1909883a 	add	r4,r3,r4
    95a8:	20c00003 	ldbu	r3,0(r4)
    95ac:	10c5c83a 	sub	r2,r2,r3
    95b0:	f800283a 	ret
    95b4:	00804034 	movhi	r2,256
    95b8:	10bfffc4 	addi	r2,r2,-1
    95bc:	11000936 	bltu	r2,r4,95e4 <__clzsi2+0x64>
    95c0:	00800404 	movi	r2,16
    95c4:	1007883a 	mov	r3,r2
    95c8:	20c8d83a 	srl	r4,r4,r3
    95cc:	00c00074 	movhi	r3,1
    95d0:	18c08c04 	addi	r3,r3,560
    95d4:	1909883a 	add	r4,r3,r4
    95d8:	20c00003 	ldbu	r3,0(r4)
    95dc:	10c5c83a 	sub	r2,r2,r3
    95e0:	f800283a 	ret
    95e4:	00c00604 	movi	r3,24
    95e8:	20c8d83a 	srl	r4,r4,r3
    95ec:	00c00074 	movhi	r3,1
    95f0:	18c08c04 	addi	r3,r3,560
    95f4:	00800204 	movi	r2,8
    95f8:	1909883a 	add	r4,r3,r4
    95fc:	20c00003 	ldbu	r3,0(r4)
    9600:	10c5c83a 	sub	r2,r2,r3
    9604:	f800283a 	ret
    9608:	0007883a 	mov	r3,zero
    960c:	20c8d83a 	srl	r4,r4,r3
    9610:	00c00074 	movhi	r3,1
    9614:	18c08c04 	addi	r3,r3,560
    9618:	00800804 	movi	r2,32
    961c:	1909883a 	add	r4,r3,r4
    9620:	20c00003 	ldbu	r3,0(r4)
    9624:	10c5c83a 	sub	r2,r2,r3
    9628:	f800283a 	ret

0000962c <__pack_d>:
    962c:	20800017 	ldw	r2,0(r4)
    9630:	defff804 	addi	sp,sp,-32
    9634:	dcc00315 	stw	r19,12(sp)
    9638:	dc800215 	stw	r18,8(sp)
    963c:	dfc00715 	stw	ra,28(sp)
    9640:	dd800615 	stw	r22,24(sp)
    9644:	dd400515 	stw	r21,20(sp)
    9648:	dd000415 	stw	r20,16(sp)
    964c:	dc400115 	stw	r17,4(sp)
    9650:	dc000015 	stw	r16,0(sp)
    9654:	04800044 	movi	r18,1
    9658:	24400317 	ldw	r17,12(r4)
    965c:	24000417 	ldw	r16,16(r4)
    9660:	24c00117 	ldw	r19,4(r4)
    9664:	9080422e 	bgeu	r18,r2,9770 <__pack_d+0x144>
    9668:	00c00104 	movi	r3,4
    966c:	10c03c26 	beq	r2,r3,9760 <__pack_d+0x134>
    9670:	00c00084 	movi	r3,2
    9674:	10c01926 	beq	r2,r3,96dc <__pack_d+0xb0>
    9678:	8c04b03a 	or	r2,r17,r16
    967c:	10001726 	beq	r2,zero,96dc <__pack_d+0xb0>
    9680:	21000217 	ldw	r4,8(r4)
    9684:	00bf0084 	movi	r2,-1022
    9688:	20804016 	blt	r4,r2,978c <__pack_d+0x160>
    968c:	0080ffc4 	movi	r2,1023
    9690:	11003316 	blt	r2,r4,9760 <__pack_d+0x134>
    9694:	88803fcc 	andi	r2,r17,255
    9698:	00c02004 	movi	r3,128
    969c:	10c02926 	beq	r2,r3,9744 <__pack_d+0x118>
    96a0:	88801fc4 	addi	r2,r17,127
    96a4:	1463803a 	cmpltu	r17,r2,r17
    96a8:	8c21883a 	add	r16,r17,r16
    96ac:	1023883a 	mov	r17,r2
    96b0:	00880034 	movhi	r2,8192
    96b4:	10bfffc4 	addi	r2,r2,-1
    96b8:	14001c36 	bltu	r2,r16,972c <__pack_d+0x100>
    96bc:	2100ffc4 	addi	r4,r4,1023
    96c0:	8006963a 	slli	r3,r16,24
    96c4:	8804d23a 	srli	r2,r17,8
    96c8:	8020913a 	slli	r16,r16,4
    96cc:	2101ffcc 	andi	r4,r4,2047
    96d0:	1884b03a 	or	r2,r3,r2
    96d4:	8020d33a 	srli	r16,r16,12
    96d8:	00000306 	br	96e8 <__pack_d+0xbc>
    96dc:	0009883a 	mov	r4,zero
    96e0:	0005883a 	mov	r2,zero
    96e4:	0021883a 	mov	r16,zero
    96e8:	2008953a 	slli	r4,r4,20
    96ec:	982697fa 	slli	r19,r19,31
    96f0:	00c00434 	movhi	r3,16
    96f4:	18ffffc4 	addi	r3,r3,-1
    96f8:	80e0703a 	and	r16,r16,r3
    96fc:	8106b03a 	or	r3,r16,r4
    9700:	1cc6b03a 	or	r3,r3,r19
    9704:	dfc00717 	ldw	ra,28(sp)
    9708:	dd800617 	ldw	r22,24(sp)
    970c:	dd400517 	ldw	r21,20(sp)
    9710:	dd000417 	ldw	r20,16(sp)
    9714:	dcc00317 	ldw	r19,12(sp)
    9718:	dc800217 	ldw	r18,8(sp)
    971c:	dc400117 	ldw	r17,4(sp)
    9720:	dc000017 	ldw	r16,0(sp)
    9724:	dec00804 	addi	sp,sp,32
    9728:	f800283a 	ret
    972c:	800697fa 	slli	r3,r16,31
    9730:	8804d07a 	srli	r2,r17,1
    9734:	21010004 	addi	r4,r4,1024
    9738:	8020d07a 	srli	r16,r16,1
    973c:	18a2b03a 	or	r17,r3,r2
    9740:	003fdf06 	br	96c0 <__pack_d+0x94>
    9744:	88c0400c 	andi	r3,r17,256
    9748:	183fd926 	beq	r3,zero,96b0 <__pack_d+0x84>
    974c:	8885883a 	add	r2,r17,r2
    9750:	1463803a 	cmpltu	r17,r2,r17
    9754:	8c21883a 	add	r16,r17,r16
    9758:	1023883a 	mov	r17,r2
    975c:	003fd406 	br	96b0 <__pack_d+0x84>
    9760:	0101ffc4 	movi	r4,2047
    9764:	0005883a 	mov	r2,zero
    9768:	0021883a 	mov	r16,zero
    976c:	003fde06 	br	96e8 <__pack_d+0xbc>
    9770:	84000234 	orhi	r16,r16,8
    9774:	00c00434 	movhi	r3,16
    9778:	18ffffc4 	addi	r3,r3,-1
    977c:	8805883a 	mov	r2,r17
    9780:	80e0703a 	and	r16,r16,r3
    9784:	0101ffc4 	movi	r4,2047
    9788:	003fd706 	br	96e8 <__pack_d+0xbc>
    978c:	1129c83a 	sub	r20,r2,r4
    9790:	00800e04 	movi	r2,56
    9794:	15002716 	blt	r2,r20,9834 <__pack_d+0x208>
    9798:	800b883a 	mov	r5,r16
    979c:	a00d883a 	mov	r6,r20
    97a0:	8809883a 	mov	r4,r17
    97a4:	0009a240 	call	9a24 <__lshrdi3>
    97a8:	9009883a 	mov	r4,r18
    97ac:	000b883a 	mov	r5,zero
    97b0:	a00d883a 	mov	r6,r20
    97b4:	102d883a 	mov	r22,r2
    97b8:	182b883a 	mov	r21,r3
    97bc:	0009a680 	call	9a68 <__ashldi3>
    97c0:	1009003a 	cmpeq	r4,r2,zero
    97c4:	1907c83a 	sub	r3,r3,r4
    97c8:	10bfffc4 	addi	r2,r2,-1
    97cc:	1c20703a 	and	r16,r3,r16
    97d0:	1444703a 	and	r2,r2,r17
    97d4:	1404b03a 	or	r2,r2,r16
    97d8:	1004c03a 	cmpne	r2,r2,zero
    97dc:	1584b03a 	or	r2,r2,r22
    97e0:	11003fcc 	andi	r4,r2,255
    97e4:	01402004 	movi	r5,128
    97e8:	a807883a 	mov	r3,r21
    97ec:	2140131e 	bne	r4,r5,983c <__pack_d+0x210>
    97f0:	1140400c 	andi	r5,r2,256
    97f4:	28000426 	beq	r5,zero,9808 <__pack_d+0x1dc>
    97f8:	1109883a 	add	r4,r2,r4
    97fc:	2085803a 	cmpltu	r2,r4,r2
    9800:	1547883a 	add	r3,r2,r21
    9804:	2005883a 	mov	r2,r4
    9808:	1808963a 	slli	r4,r3,24
    980c:	1004d23a 	srli	r2,r2,8
    9810:	1820913a 	slli	r16,r3,4
    9814:	01440034 	movhi	r5,4096
    9818:	297fffc4 	addi	r5,r5,-1
    981c:	2084b03a 	or	r2,r4,r2
    9820:	8020d33a 	srli	r16,r16,12
    9824:	01000044 	movi	r4,1
    9828:	28ffaf36 	bltu	r5,r3,96e8 <__pack_d+0xbc>
    982c:	0009883a 	mov	r4,zero
    9830:	003fad06 	br	96e8 <__pack_d+0xbc>
    9834:	0005883a 	mov	r2,zero
    9838:	0007883a 	mov	r3,zero
    983c:	11001fc4 	addi	r4,r2,127
    9840:	2085803a 	cmpltu	r2,r4,r2
    9844:	10c7883a 	add	r3,r2,r3
    9848:	2005883a 	mov	r2,r4
    984c:	003fee06 	br	9808 <__pack_d+0x1dc>

00009850 <__unpack_d>:
    9850:	21800117 	ldw	r6,4(r4)
    9854:	20c00017 	ldw	r3,0(r4)
    9858:	3004d7fa 	srli	r2,r6,31
    985c:	3008d53a 	srli	r4,r6,20
    9860:	28800115 	stw	r2,4(r5)
    9864:	2101ffcc 	andi	r4,r4,2047
    9868:	00800434 	movhi	r2,16
    986c:	10bfffc4 	addi	r2,r2,-1
    9870:	3084703a 	and	r2,r6,r2
    9874:	20001a1e 	bne	r4,zero,98e0 <__unpack_d+0x90>
    9878:	1888b03a 	or	r4,r3,r2
    987c:	20002626 	beq	r4,zero,9918 <__unpack_d+0xc8>
    9880:	1808d63a 	srli	r4,r3,24
    9884:	1004923a 	slli	r2,r2,8
    9888:	01bf0084 	movi	r6,-1022
    988c:	29800215 	stw	r6,8(r5)
    9890:	2084b03a 	or	r2,r4,r2
    9894:	010000c4 	movi	r4,3
    9898:	29000015 	stw	r4,0(r5)
    989c:	02040034 	movhi	r8,4096
    98a0:	423fffc4 	addi	r8,r8,-1
    98a4:	1806923a 	slli	r3,r3,8
    98a8:	40801836 	bltu	r8,r2,990c <__unpack_d+0xbc>
    98ac:	013f0044 	movi	r4,-1023
    98b0:	18cd883a 	add	r6,r3,r3
    98b4:	30c7803a 	cmpltu	r3,r6,r3
    98b8:	1085883a 	add	r2,r2,r2
    98bc:	1885883a 	add	r2,r3,r2
    98c0:	200f883a 	mov	r7,r4
    98c4:	3007883a 	mov	r3,r6
    98c8:	213fffc4 	addi	r4,r4,-1
    98cc:	40bff82e 	bgeu	r8,r2,98b0 <__unpack_d+0x60>
    98d0:	29c00215 	stw	r7,8(r5)
    98d4:	28c00315 	stw	r3,12(r5)
    98d8:	28800415 	stw	r2,16(r5)
    98dc:	f800283a 	ret
    98e0:	01c1ffc4 	movi	r7,2047
    98e4:	21c00f26 	beq	r4,r7,9924 <__unpack_d+0xd4>
    98e8:	180cd63a 	srli	r6,r3,24
    98ec:	1004923a 	slli	r2,r2,8
    98f0:	213f0044 	addi	r4,r4,-1023
    98f4:	1806923a 	slli	r3,r3,8
    98f8:	3084b03a 	or	r2,r6,r2
    98fc:	29000215 	stw	r4,8(r5)
    9900:	010000c4 	movi	r4,3
    9904:	10840034 	orhi	r2,r2,4096
    9908:	29000015 	stw	r4,0(r5)
    990c:	28c00315 	stw	r3,12(r5)
    9910:	28800415 	stw	r2,16(r5)
    9914:	f800283a 	ret
    9918:	00800084 	movi	r2,2
    991c:	28800015 	stw	r2,0(r5)
    9920:	f800283a 	ret
    9924:	1888b03a 	or	r4,r3,r2
    9928:	20000526 	beq	r4,zero,9940 <__unpack_d+0xf0>
    992c:	3180022c 	andhi	r6,r6,8
    9930:	30000626 	beq	r6,zero,994c <__unpack_d+0xfc>
    9934:	01000044 	movi	r4,1
    9938:	29000015 	stw	r4,0(r5)
    993c:	003ff306 	br	990c <__unpack_d+0xbc>
    9940:	00800104 	movi	r2,4
    9944:	28800015 	stw	r2,0(r5)
    9948:	f800283a 	ret
    994c:	28000015 	stw	zero,0(r5)
    9950:	003fee06 	br	990c <__unpack_d+0xbc>

00009954 <__fpcmp_parts_d>:
    9954:	20c00017 	ldw	r3,0(r4)
    9958:	00800044 	movi	r2,1
    995c:	10c0142e 	bgeu	r2,r3,99b0 <__fpcmp_parts_d+0x5c>
    9960:	29800017 	ldw	r6,0(r5)
    9964:	1180122e 	bgeu	r2,r6,99b0 <__fpcmp_parts_d+0x5c>
    9968:	01c00104 	movi	r7,4
    996c:	19c02826 	beq	r3,r7,9a10 <__fpcmp_parts_d+0xbc>
    9970:	31c00926 	beq	r6,r7,9998 <__fpcmp_parts_d+0x44>
    9974:	01c00084 	movi	r7,2
    9978:	19c00626 	beq	r3,r7,9994 <__fpcmp_parts_d+0x40>
    997c:	31c00a26 	beq	r6,r7,99a8 <__fpcmp_parts_d+0x54>
    9980:	20c00117 	ldw	r3,4(r4)
    9984:	29800117 	ldw	r6,4(r5)
    9988:	19800b26 	beq	r3,r6,99b8 <__fpcmp_parts_d+0x64>
    998c:	1800041e 	bne	r3,zero,99a0 <__fpcmp_parts_d+0x4c>
    9990:	f800283a 	ret
    9994:	30c01a26 	beq	r6,r3,9a00 <__fpcmp_parts_d+0xac>
    9998:	28800117 	ldw	r2,4(r5)
    999c:	1000041e 	bne	r2,zero,99b0 <__fpcmp_parts_d+0x5c>
    99a0:	00bfffc4 	movi	r2,-1
    99a4:	f800283a 	ret
    99a8:	20800117 	ldw	r2,4(r4)
    99ac:	103ffc1e 	bne	r2,zero,99a0 <__fpcmp_parts_d+0x4c>
    99b0:	00800044 	movi	r2,1
    99b4:	f800283a 	ret
    99b8:	21c00217 	ldw	r7,8(r4)
    99bc:	29800217 	ldw	r6,8(r5)
    99c0:	31c0020e 	bge	r6,r7,99cc <__fpcmp_parts_d+0x78>
    99c4:	183ff61e 	bne	r3,zero,99a0 <__fpcmp_parts_d+0x4c>
    99c8:	f800283a 	ret
    99cc:	39800a16 	blt	r7,r6,99f8 <__fpcmp_parts_d+0xa4>
    99d0:	20800417 	ldw	r2,16(r4)
    99d4:	29800417 	ldw	r6,16(r5)
    99d8:	21c00317 	ldw	r7,12(r4)
    99dc:	29000317 	ldw	r4,12(r5)
    99e0:	30800936 	bltu	r6,r2,9a08 <__fpcmp_parts_d+0xb4>
    99e4:	1180011e 	bne	r2,r6,99ec <__fpcmp_parts_d+0x98>
    99e8:	21c00736 	bltu	r4,r7,9a08 <__fpcmp_parts_d+0xb4>
    99ec:	11800236 	bltu	r2,r6,99f8 <__fpcmp_parts_d+0xa4>
    99f0:	3080031e 	bne	r6,r2,9a00 <__fpcmp_parts_d+0xac>
    99f4:	3900022e 	bgeu	r7,r4,9a00 <__fpcmp_parts_d+0xac>
    99f8:	183fe926 	beq	r3,zero,99a0 <__fpcmp_parts_d+0x4c>
    99fc:	003fec06 	br	99b0 <__fpcmp_parts_d+0x5c>
    9a00:	0005883a 	mov	r2,zero
    9a04:	f800283a 	ret
    9a08:	183fe926 	beq	r3,zero,99b0 <__fpcmp_parts_d+0x5c>
    9a0c:	003fe406 	br	99a0 <__fpcmp_parts_d+0x4c>
    9a10:	30ffe51e 	bne	r6,r3,99a8 <__fpcmp_parts_d+0x54>
    9a14:	28c00117 	ldw	r3,4(r5)
    9a18:	20800117 	ldw	r2,4(r4)
    9a1c:	1885c83a 	sub	r2,r3,r2
    9a20:	f800283a 	ret

00009a24 <__lshrdi3>:
    9a24:	2005883a 	mov	r2,r4
    9a28:	2807883a 	mov	r3,r5
    9a2c:	30000826 	beq	r6,zero,9a50 <__lshrdi3+0x2c>
    9a30:	01000804 	movi	r4,32
    9a34:	2189c83a 	sub	r4,r4,r6
    9a38:	0100060e 	bge	zero,r4,9a54 <__lshrdi3+0x30>
    9a3c:	1184d83a 	srl	r2,r2,r6
    9a40:	2908983a 	sll	r4,r5,r4
    9a44:	298cd83a 	srl	r6,r5,r6
    9a48:	2084b03a 	or	r2,r4,r2
    9a4c:	3007883a 	mov	r3,r6
    9a50:	f800283a 	ret
    9a54:	0105c83a 	sub	r2,zero,r4
    9a58:	000d883a 	mov	r6,zero
    9a5c:	2884d83a 	srl	r2,r5,r2
    9a60:	3007883a 	mov	r3,r6
    9a64:	003ffa06 	br	9a50 <__lshrdi3+0x2c>

00009a68 <__ashldi3>:
    9a68:	2005883a 	mov	r2,r4
    9a6c:	2807883a 	mov	r3,r5
    9a70:	30000826 	beq	r6,zero,9a94 <__ashldi3+0x2c>
    9a74:	01000804 	movi	r4,32
    9a78:	2189c83a 	sub	r4,r4,r6
    9a7c:	0100060e 	bge	zero,r4,9a98 <__ashldi3+0x30>
    9a80:	1108d83a 	srl	r4,r2,r4
    9a84:	2986983a 	sll	r3,r5,r6
    9a88:	118c983a 	sll	r6,r2,r6
    9a8c:	20c6b03a 	or	r3,r4,r3
    9a90:	3005883a 	mov	r2,r6
    9a94:	f800283a 	ret
    9a98:	0107c83a 	sub	r3,zero,r4
    9a9c:	000d883a 	mov	r6,zero
    9aa0:	10c6983a 	sll	r3,r2,r3
    9aa4:	3005883a 	mov	r2,r6
    9aa8:	003ffa06 	br	9a94 <__ashldi3+0x2c>

00009aac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9aac:	defffe04 	addi	sp,sp,-8
    9ab0:	dfc00115 	stw	ra,4(sp)
    9ab4:	df000015 	stw	fp,0(sp)
    9ab8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9abc:	00800074 	movhi	r2,1
    9ac0:	10876a04 	addi	r2,r2,7592
    9ac4:	10800017 	ldw	r2,0(r2)
    9ac8:	10000526 	beq	r2,zero,9ae0 <alt_get_errno+0x34>
    9acc:	00800074 	movhi	r2,1
    9ad0:	10876a04 	addi	r2,r2,7592
    9ad4:	10800017 	ldw	r2,0(r2)
    9ad8:	103ee83a 	callr	r2
    9adc:	00000206 	br	9ae8 <alt_get_errno+0x3c>
    9ae0:	00800074 	movhi	r2,1
    9ae4:	10877a04 	addi	r2,r2,7656
}
    9ae8:	e037883a 	mov	sp,fp
    9aec:	dfc00117 	ldw	ra,4(sp)
    9af0:	df000017 	ldw	fp,0(sp)
    9af4:	dec00204 	addi	sp,sp,8
    9af8:	f800283a 	ret

00009afc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9afc:	defffb04 	addi	sp,sp,-20
    9b00:	dfc00415 	stw	ra,16(sp)
    9b04:	df000315 	stw	fp,12(sp)
    9b08:	df000304 	addi	fp,sp,12
    9b0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9b10:	e0bfff17 	ldw	r2,-4(fp)
    9b14:	10000716 	blt	r2,zero,9b34 <close+0x38>
    9b18:	e13fff17 	ldw	r4,-4(fp)
    9b1c:	01400304 	movi	r5,12
    9b20:	00094480 	call	9448 <__mulsi3>
    9b24:	00c00074 	movhi	r3,1
    9b28:	18c2e804 	addi	r3,r3,2976
    9b2c:	10c5883a 	add	r2,r2,r3
    9b30:	00000106 	br	9b38 <close+0x3c>
    9b34:	0005883a 	mov	r2,zero
    9b38:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9b3c:	e0bffd17 	ldw	r2,-12(fp)
    9b40:	10001826 	beq	r2,zero,9ba4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9b44:	e0bffd17 	ldw	r2,-12(fp)
    9b48:	10800017 	ldw	r2,0(r2)
    9b4c:	10800417 	ldw	r2,16(r2)
    9b50:	10000626 	beq	r2,zero,9b6c <close+0x70>
    9b54:	e0bffd17 	ldw	r2,-12(fp)
    9b58:	10800017 	ldw	r2,0(r2)
    9b5c:	10800417 	ldw	r2,16(r2)
    9b60:	e13ffd17 	ldw	r4,-12(fp)
    9b64:	103ee83a 	callr	r2
    9b68:	00000106 	br	9b70 <close+0x74>
    9b6c:	0005883a 	mov	r2,zero
    9b70:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9b74:	e13fff17 	ldw	r4,-4(fp)
    9b78:	000a1f40 	call	a1f4 <alt_release_fd>
    if (rval < 0)
    9b7c:	e0bffe17 	ldw	r2,-8(fp)
    9b80:	1000060e 	bge	r2,zero,9b9c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    9b84:	0009aac0 	call	9aac <alt_get_errno>
    9b88:	e0fffe17 	ldw	r3,-8(fp)
    9b8c:	00c7c83a 	sub	r3,zero,r3
    9b90:	10c00015 	stw	r3,0(r2)
      return -1;
    9b94:	00bfffc4 	movi	r2,-1
    9b98:	00000606 	br	9bb4 <close+0xb8>
    }
    return 0;
    9b9c:	0005883a 	mov	r2,zero
    9ba0:	00000406 	br	9bb4 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9ba4:	0009aac0 	call	9aac <alt_get_errno>
    9ba8:	00c01444 	movi	r3,81
    9bac:	10c00015 	stw	r3,0(r2)
    return -1;
    9bb0:	00bfffc4 	movi	r2,-1
  }
}
    9bb4:	e037883a 	mov	sp,fp
    9bb8:	dfc00117 	ldw	ra,4(sp)
    9bbc:	df000017 	ldw	fp,0(sp)
    9bc0:	dec00204 	addi	sp,sp,8
    9bc4:	f800283a 	ret

00009bc8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9bc8:	defffc04 	addi	sp,sp,-16
    9bcc:	df000315 	stw	fp,12(sp)
    9bd0:	df000304 	addi	fp,sp,12
    9bd4:	e13ffd15 	stw	r4,-12(fp)
    9bd8:	e17ffe15 	stw	r5,-8(fp)
    9bdc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9be0:	e0bfff17 	ldw	r2,-4(fp)
}
    9be4:	e037883a 	mov	sp,fp
    9be8:	df000017 	ldw	fp,0(sp)
    9bec:	dec00104 	addi	sp,sp,4
    9bf0:	f800283a 	ret

00009bf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9bf4:	defffe04 	addi	sp,sp,-8
    9bf8:	dfc00115 	stw	ra,4(sp)
    9bfc:	df000015 	stw	fp,0(sp)
    9c00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9c04:	00800074 	movhi	r2,1
    9c08:	10876a04 	addi	r2,r2,7592
    9c0c:	10800017 	ldw	r2,0(r2)
    9c10:	10000526 	beq	r2,zero,9c28 <alt_get_errno+0x34>
    9c14:	00800074 	movhi	r2,1
    9c18:	10876a04 	addi	r2,r2,7592
    9c1c:	10800017 	ldw	r2,0(r2)
    9c20:	103ee83a 	callr	r2
    9c24:	00000206 	br	9c30 <alt_get_errno+0x3c>
    9c28:	00800074 	movhi	r2,1
    9c2c:	10877a04 	addi	r2,r2,7656
}
    9c30:	e037883a 	mov	sp,fp
    9c34:	dfc00117 	ldw	ra,4(sp)
    9c38:	df000017 	ldw	fp,0(sp)
    9c3c:	dec00204 	addi	sp,sp,8
    9c40:	f800283a 	ret

00009c44 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9c44:	defffb04 	addi	sp,sp,-20
    9c48:	dfc00415 	stw	ra,16(sp)
    9c4c:	df000315 	stw	fp,12(sp)
    9c50:	df000304 	addi	fp,sp,12
    9c54:	e13ffe15 	stw	r4,-8(fp)
    9c58:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9c5c:	e0bffe17 	ldw	r2,-8(fp)
    9c60:	10000716 	blt	r2,zero,9c80 <fstat+0x3c>
    9c64:	e13ffe17 	ldw	r4,-8(fp)
    9c68:	01400304 	movi	r5,12
    9c6c:	00094480 	call	9448 <__mulsi3>
    9c70:	00c00074 	movhi	r3,1
    9c74:	18c2e804 	addi	r3,r3,2976
    9c78:	10c5883a 	add	r2,r2,r3
    9c7c:	00000106 	br	9c84 <fstat+0x40>
    9c80:	0005883a 	mov	r2,zero
    9c84:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    9c88:	e0bffd17 	ldw	r2,-12(fp)
    9c8c:	10001026 	beq	r2,zero,9cd0 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9c90:	e0bffd17 	ldw	r2,-12(fp)
    9c94:	10800017 	ldw	r2,0(r2)
    9c98:	10800817 	ldw	r2,32(r2)
    9c9c:	10000726 	beq	r2,zero,9cbc <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
    9ca0:	e0bffd17 	ldw	r2,-12(fp)
    9ca4:	10800017 	ldw	r2,0(r2)
    9ca8:	10800817 	ldw	r2,32(r2)
    9cac:	e13ffd17 	ldw	r4,-12(fp)
    9cb0:	e17fff17 	ldw	r5,-4(fp)
    9cb4:	103ee83a 	callr	r2
    9cb8:	00000906 	br	9ce0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9cbc:	e0bfff17 	ldw	r2,-4(fp)
    9cc0:	00c80004 	movi	r3,8192
    9cc4:	10c00115 	stw	r3,4(r2)
      return 0;
    9cc8:	0005883a 	mov	r2,zero
    9ccc:	00000406 	br	9ce0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9cd0:	0009bf40 	call	9bf4 <alt_get_errno>
    9cd4:	00c01444 	movi	r3,81
    9cd8:	10c00015 	stw	r3,0(r2)
    return -1;
    9cdc:	00bfffc4 	movi	r2,-1
  }
}
    9ce0:	e037883a 	mov	sp,fp
    9ce4:	dfc00117 	ldw	ra,4(sp)
    9ce8:	df000017 	ldw	fp,0(sp)
    9cec:	dec00204 	addi	sp,sp,8
    9cf0:	f800283a 	ret

00009cf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9cf4:	defffe04 	addi	sp,sp,-8
    9cf8:	dfc00115 	stw	ra,4(sp)
    9cfc:	df000015 	stw	fp,0(sp)
    9d00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9d04:	00800074 	movhi	r2,1
    9d08:	10876a04 	addi	r2,r2,7592
    9d0c:	10800017 	ldw	r2,0(r2)
    9d10:	10000526 	beq	r2,zero,9d28 <alt_get_errno+0x34>
    9d14:	00800074 	movhi	r2,1
    9d18:	10876a04 	addi	r2,r2,7592
    9d1c:	10800017 	ldw	r2,0(r2)
    9d20:	103ee83a 	callr	r2
    9d24:	00000206 	br	9d30 <alt_get_errno+0x3c>
    9d28:	00800074 	movhi	r2,1
    9d2c:	10877a04 	addi	r2,r2,7656
}
    9d30:	e037883a 	mov	sp,fp
    9d34:	dfc00117 	ldw	ra,4(sp)
    9d38:	df000017 	ldw	fp,0(sp)
    9d3c:	dec00204 	addi	sp,sp,8
    9d40:	f800283a 	ret

00009d44 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    9d44:	deffed04 	addi	sp,sp,-76
    9d48:	dfc01215 	stw	ra,72(sp)
    9d4c:	df001115 	stw	fp,68(sp)
    9d50:	df001104 	addi	fp,sp,68
    9d54:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9d58:	e0bfff17 	ldw	r2,-4(fp)
    9d5c:	10000716 	blt	r2,zero,9d7c <isatty+0x38>
    9d60:	e13fff17 	ldw	r4,-4(fp)
    9d64:	01400304 	movi	r5,12
    9d68:	00094480 	call	9448 <__mulsi3>
    9d6c:	00c00074 	movhi	r3,1
    9d70:	18c2e804 	addi	r3,r3,2976
    9d74:	10c5883a 	add	r2,r2,r3
    9d78:	00000106 	br	9d80 <isatty+0x3c>
    9d7c:	0005883a 	mov	r2,zero
    9d80:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    9d84:	e0bfef17 	ldw	r2,-68(fp)
    9d88:	10000e26 	beq	r2,zero,9dc4 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    9d8c:	e0bfef17 	ldw	r2,-68(fp)
    9d90:	10800017 	ldw	r2,0(r2)
    9d94:	10800817 	ldw	r2,32(r2)
    9d98:	1000021e 	bne	r2,zero,9da4 <isatty+0x60>
    {
      return 1;
    9d9c:	00800044 	movi	r2,1
    9da0:	00000c06 	br	9dd4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    9da4:	e0bff004 	addi	r2,fp,-64
    9da8:	e13fff17 	ldw	r4,-4(fp)
    9dac:	100b883a 	mov	r5,r2
    9db0:	0009c440 	call	9c44 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    9db4:	e0bff117 	ldw	r2,-60(fp)
    9db8:	10880020 	cmpeqi	r2,r2,8192
    9dbc:	10803fcc 	andi	r2,r2,255
    9dc0:	00000406 	br	9dd4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9dc4:	0009cf40 	call	9cf4 <alt_get_errno>
    9dc8:	00c01444 	movi	r3,81
    9dcc:	10c00015 	stw	r3,0(r2)
    return 0;
    9dd0:	0005883a 	mov	r2,zero
  }
}
    9dd4:	e037883a 	mov	sp,fp
    9dd8:	dfc00117 	ldw	ra,4(sp)
    9ddc:	df000017 	ldw	fp,0(sp)
    9de0:	dec00204 	addi	sp,sp,8
    9de4:	f800283a 	ret

00009de8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9de8:	defffc04 	addi	sp,sp,-16
    9dec:	df000315 	stw	fp,12(sp)
    9df0:	df000304 	addi	fp,sp,12
    9df4:	e13ffd15 	stw	r4,-12(fp)
    9df8:	e17ffe15 	stw	r5,-8(fp)
    9dfc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9e00:	e0fffe17 	ldw	r3,-8(fp)
    9e04:	e0bffd17 	ldw	r2,-12(fp)
    9e08:	18800e26 	beq	r3,r2,9e44 <alt_load_section+0x5c>
  {
    while( to != end )
    9e0c:	00000a06 	br	9e38 <alt_load_section+0x50>
    {
      *to++ = *from++;
    9e10:	e0bffd17 	ldw	r2,-12(fp)
    9e14:	10c00017 	ldw	r3,0(r2)
    9e18:	e0bffe17 	ldw	r2,-8(fp)
    9e1c:	10c00015 	stw	r3,0(r2)
    9e20:	e0bffe17 	ldw	r2,-8(fp)
    9e24:	10800104 	addi	r2,r2,4
    9e28:	e0bffe15 	stw	r2,-8(fp)
    9e2c:	e0bffd17 	ldw	r2,-12(fp)
    9e30:	10800104 	addi	r2,r2,4
    9e34:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9e38:	e0fffe17 	ldw	r3,-8(fp)
    9e3c:	e0bfff17 	ldw	r2,-4(fp)
    9e40:	18bff31e 	bne	r3,r2,9e10 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    9e44:	e037883a 	mov	sp,fp
    9e48:	df000017 	ldw	fp,0(sp)
    9e4c:	dec00104 	addi	sp,sp,4
    9e50:	f800283a 	ret

00009e54 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9e54:	defffe04 	addi	sp,sp,-8
    9e58:	dfc00115 	stw	ra,4(sp)
    9e5c:	df000015 	stw	fp,0(sp)
    9e60:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9e64:	01000074 	movhi	r4,1
    9e68:	2132b104 	addi	r4,r4,-13628
    9e6c:	01400074 	movhi	r5,1
    9e70:	2940d904 	addi	r5,r5,868
    9e74:	01800074 	movhi	r6,1
    9e78:	31876f04 	addi	r6,r6,7612
    9e7c:	0009de80 	call	9de8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9e80:	01000034 	movhi	r4,0
    9e84:	21000804 	addi	r4,r4,32
    9e88:	01400034 	movhi	r5,0
    9e8c:	29400804 	addi	r5,r5,32
    9e90:	01800034 	movhi	r6,0
    9e94:	31806e04 	addi	r6,r6,440
    9e98:	0009de80 	call	9de8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9e9c:	01000074 	movhi	r4,1
    9ea0:	2131d804 	addi	r4,r4,-14496
    9ea4:	01400074 	movhi	r5,1
    9ea8:	29400004 	addi	r5,r5,0
    9eac:	01800074 	movhi	r6,1
    9eb0:	3180d904 	addi	r6,r6,868
    9eb4:	0009de80 	call	9de8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9eb8:	000b6c00 	call	b6c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9ebc:	000b8840 	call	b884 <alt_icache_flush_all>
}
    9ec0:	e037883a 	mov	sp,fp
    9ec4:	dfc00117 	ldw	ra,4(sp)
    9ec8:	df000017 	ldw	fp,0(sp)
    9ecc:	dec00204 	addi	sp,sp,8
    9ed0:	f800283a 	ret

00009ed4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9ed4:	defffe04 	addi	sp,sp,-8
    9ed8:	dfc00115 	stw	ra,4(sp)
    9edc:	df000015 	stw	fp,0(sp)
    9ee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9ee4:	00800074 	movhi	r2,1
    9ee8:	10876a04 	addi	r2,r2,7592
    9eec:	10800017 	ldw	r2,0(r2)
    9ef0:	10000526 	beq	r2,zero,9f08 <alt_get_errno+0x34>
    9ef4:	00800074 	movhi	r2,1
    9ef8:	10876a04 	addi	r2,r2,7592
    9efc:	10800017 	ldw	r2,0(r2)
    9f00:	103ee83a 	callr	r2
    9f04:	00000206 	br	9f10 <alt_get_errno+0x3c>
    9f08:	00800074 	movhi	r2,1
    9f0c:	10877a04 	addi	r2,r2,7656
}
    9f10:	e037883a 	mov	sp,fp
    9f14:	dfc00117 	ldw	ra,4(sp)
    9f18:	df000017 	ldw	fp,0(sp)
    9f1c:	dec00204 	addi	sp,sp,8
    9f20:	f800283a 	ret

00009f24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    9f24:	defff904 	addi	sp,sp,-28
    9f28:	dfc00615 	stw	ra,24(sp)
    9f2c:	df000515 	stw	fp,20(sp)
    9f30:	df000504 	addi	fp,sp,20
    9f34:	e13ffd15 	stw	r4,-12(fp)
    9f38:	e17ffe15 	stw	r5,-8(fp)
    9f3c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    9f40:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9f44:	e0bffd17 	ldw	r2,-12(fp)
    9f48:	10000716 	blt	r2,zero,9f68 <lseek+0x44>
    9f4c:	e13ffd17 	ldw	r4,-12(fp)
    9f50:	01400304 	movi	r5,12
    9f54:	00094480 	call	9448 <__mulsi3>
    9f58:	00c00074 	movhi	r3,1
    9f5c:	18c2e804 	addi	r3,r3,2976
    9f60:	10c5883a 	add	r2,r2,r3
    9f64:	00000106 	br	9f6c <lseek+0x48>
    9f68:	0005883a 	mov	r2,zero
    9f6c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    9f70:	e0bffc17 	ldw	r2,-16(fp)
    9f74:	10001026 	beq	r2,zero,9fb8 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    9f78:	e0bffc17 	ldw	r2,-16(fp)
    9f7c:	10800017 	ldw	r2,0(r2)
    9f80:	10800717 	ldw	r2,28(r2)
    9f84:	10000926 	beq	r2,zero,9fac <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    9f88:	e0bffc17 	ldw	r2,-16(fp)
    9f8c:	10800017 	ldw	r2,0(r2)
    9f90:	10800717 	ldw	r2,28(r2)
    9f94:	e13ffc17 	ldw	r4,-16(fp)
    9f98:	e17ffe17 	ldw	r5,-8(fp)
    9f9c:	e1bfff17 	ldw	r6,-4(fp)
    9fa0:	103ee83a 	callr	r2
    9fa4:	e0bffb15 	stw	r2,-20(fp)
    9fa8:	00000506 	br	9fc0 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    9fac:	00bfde84 	movi	r2,-134
    9fb0:	e0bffb15 	stw	r2,-20(fp)
    9fb4:	00000206 	br	9fc0 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
    9fb8:	00bfebc4 	movi	r2,-81
    9fbc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    9fc0:	e0bffb17 	ldw	r2,-20(fp)
    9fc4:	1000060e 	bge	r2,zero,9fe0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    9fc8:	0009ed40 	call	9ed4 <alt_get_errno>
    9fcc:	e0fffb17 	ldw	r3,-20(fp)
    9fd0:	00c7c83a 	sub	r3,zero,r3
    9fd4:	10c00015 	stw	r3,0(r2)
    rc = -1;
    9fd8:	00bfffc4 	movi	r2,-1
    9fdc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    9fe0:	e0bffb17 	ldw	r2,-20(fp)
}
    9fe4:	e037883a 	mov	sp,fp
    9fe8:	dfc00117 	ldw	ra,4(sp)
    9fec:	df000017 	ldw	fp,0(sp)
    9ff0:	dec00204 	addi	sp,sp,8
    9ff4:	f800283a 	ret

00009ff8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9ff8:	defffd04 	addi	sp,sp,-12
    9ffc:	dfc00215 	stw	ra,8(sp)
    a000:	df000115 	stw	fp,4(sp)
    a004:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a008:	0009883a 	mov	r4,zero
    a00c:	000a49c0 	call	a49c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    a010:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a014:	000a4d00 	call	a4d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a018:	01000074 	movhi	r4,1
    a01c:	2100cf04 	addi	r4,r4,828
    a020:	01400074 	movhi	r5,1
    a024:	2940cf04 	addi	r5,r5,828
    a028:	01800074 	movhi	r6,1
    a02c:	3180cf04 	addi	r6,r6,828
    a030:	000bc480 	call	bc48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a034:	000b7cc0 	call	b7cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a038:	01000074 	movhi	r4,1
    a03c:	212e0a04 	addi	r4,r4,-18392
    a040:	000c38c0 	call	c38c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a044:	d1201b17 	ldw	r4,-32660(gp)
    a048:	d0e01c17 	ldw	r3,-32656(gp)
    a04c:	d0a01d17 	ldw	r2,-32652(gp)
    a050:	180b883a 	mov	r5,r3
    a054:	100d883a 	mov	r6,r2
    a058:	00002bc0 	call	2bc <main>
    a05c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a060:	01000044 	movi	r4,1
    a064:	0009afc0 	call	9afc <close>
  exit (result);
    a068:	e13fff17 	ldw	r4,-4(fp)
    a06c:	000c3a00 	call	c3a0 <exit>

0000a070 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a070:	defffe04 	addi	sp,sp,-8
    a074:	df000115 	stw	fp,4(sp)
    a078:	df000104 	addi	fp,sp,4
    a07c:	e13fff15 	stw	r4,-4(fp)
}
    a080:	e037883a 	mov	sp,fp
    a084:	df000017 	ldw	fp,0(sp)
    a088:	dec00104 	addi	sp,sp,4
    a08c:	f800283a 	ret

0000a090 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a090:	defffe04 	addi	sp,sp,-8
    a094:	df000115 	stw	fp,4(sp)
    a098:	df000104 	addi	fp,sp,4
    a09c:	e13fff15 	stw	r4,-4(fp)
}
    a0a0:	e037883a 	mov	sp,fp
    a0a4:	df000017 	ldw	fp,0(sp)
    a0a8:	dec00104 	addi	sp,sp,4
    a0ac:	f800283a 	ret

0000a0b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a0b0:	defffe04 	addi	sp,sp,-8
    a0b4:	dfc00115 	stw	ra,4(sp)
    a0b8:	df000015 	stw	fp,0(sp)
    a0bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a0c0:	00800074 	movhi	r2,1
    a0c4:	10876a04 	addi	r2,r2,7592
    a0c8:	10800017 	ldw	r2,0(r2)
    a0cc:	10000526 	beq	r2,zero,a0e4 <alt_get_errno+0x34>
    a0d0:	00800074 	movhi	r2,1
    a0d4:	10876a04 	addi	r2,r2,7592
    a0d8:	10800017 	ldw	r2,0(r2)
    a0dc:	103ee83a 	callr	r2
    a0e0:	00000206 	br	a0ec <alt_get_errno+0x3c>
    a0e4:	00800074 	movhi	r2,1
    a0e8:	10877a04 	addi	r2,r2,7656
}
    a0ec:	e037883a 	mov	sp,fp
    a0f0:	dfc00117 	ldw	ra,4(sp)
    a0f4:	df000017 	ldw	fp,0(sp)
    a0f8:	dec00204 	addi	sp,sp,8
    a0fc:	f800283a 	ret

0000a100 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a100:	defff904 	addi	sp,sp,-28
    a104:	dfc00615 	stw	ra,24(sp)
    a108:	df000515 	stw	fp,20(sp)
    a10c:	df000504 	addi	fp,sp,20
    a110:	e13ffd15 	stw	r4,-12(fp)
    a114:	e17ffe15 	stw	r5,-8(fp)
    a118:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a11c:	e0bffd17 	ldw	r2,-12(fp)
    a120:	10000716 	blt	r2,zero,a140 <read+0x40>
    a124:	e13ffd17 	ldw	r4,-12(fp)
    a128:	01400304 	movi	r5,12
    a12c:	00094480 	call	9448 <__mulsi3>
    a130:	00c00074 	movhi	r3,1
    a134:	18c2e804 	addi	r3,r3,2976
    a138:	10c5883a 	add	r2,r2,r3
    a13c:	00000106 	br	a144 <read+0x44>
    a140:	0005883a 	mov	r2,zero
    a144:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    a148:	e0bffb17 	ldw	r2,-20(fp)
    a14c:	10002026 	beq	r2,zero,a1d0 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a150:	e0bffb17 	ldw	r2,-20(fp)
    a154:	10800217 	ldw	r2,8(r2)
    a158:	108000cc 	andi	r2,r2,3
    a15c:	10800060 	cmpeqi	r2,r2,1
    a160:	1000171e 	bne	r2,zero,a1c0 <read+0xc0>
        (fd->dev->read))
    a164:	e0bffb17 	ldw	r2,-20(fp)
    a168:	10800017 	ldw	r2,0(r2)
    a16c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a170:	10001326 	beq	r2,zero,a1c0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a174:	e0bffb17 	ldw	r2,-20(fp)
    a178:	10800017 	ldw	r2,0(r2)
    a17c:	10c00517 	ldw	r3,20(r2)
    a180:	e0bfff17 	ldw	r2,-4(fp)
    a184:	e13ffb17 	ldw	r4,-20(fp)
    a188:	e17ffe17 	ldw	r5,-8(fp)
    a18c:	100d883a 	mov	r6,r2
    a190:	183ee83a 	callr	r3
    a194:	e0bffc15 	stw	r2,-16(fp)
    a198:	e0bffc17 	ldw	r2,-16(fp)
    a19c:	1000060e 	bge	r2,zero,a1b8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    a1a0:	000a0b00 	call	a0b0 <alt_get_errno>
    a1a4:	e0fffc17 	ldw	r3,-16(fp)
    a1a8:	00c7c83a 	sub	r3,zero,r3
    a1ac:	10c00015 	stw	r3,0(r2)
          return -1;
    a1b0:	00bfffc4 	movi	r2,-1
    a1b4:	00000a06 	br	a1e0 <read+0xe0>
        }
        return rval;
    a1b8:	e0bffc17 	ldw	r2,-16(fp)
    a1bc:	00000806 	br	a1e0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a1c0:	000a0b00 	call	a0b0 <alt_get_errno>
    a1c4:	00c00344 	movi	r3,13
    a1c8:	10c00015 	stw	r3,0(r2)
    a1cc:	00000306 	br	a1dc <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a1d0:	000a0b00 	call	a0b0 <alt_get_errno>
    a1d4:	00c01444 	movi	r3,81
    a1d8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    a1dc:	00bfffc4 	movi	r2,-1
}
    a1e0:	e037883a 	mov	sp,fp
    a1e4:	dfc00117 	ldw	ra,4(sp)
    a1e8:	df000017 	ldw	fp,0(sp)
    a1ec:	dec00204 	addi	sp,sp,8
    a1f0:	f800283a 	ret

0000a1f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a1f4:	defffc04 	addi	sp,sp,-16
    a1f8:	dfc00315 	stw	ra,12(sp)
    a1fc:	df000215 	stw	fp,8(sp)
    a200:	dc000115 	stw	r16,4(sp)
    a204:	df000104 	addi	fp,sp,4
    a208:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a20c:	e0bfff17 	ldw	r2,-4(fp)
    a210:	108000d0 	cmplti	r2,r2,3
    a214:	1000111e 	bne	r2,zero,a25c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a218:	04000074 	movhi	r16,1
    a21c:	8402e804 	addi	r16,r16,2976
    a220:	e0bfff17 	ldw	r2,-4(fp)
    a224:	1009883a 	mov	r4,r2
    a228:	01400304 	movi	r5,12
    a22c:	00094480 	call	9448 <__mulsi3>
    a230:	8085883a 	add	r2,r16,r2
    a234:	10800204 	addi	r2,r2,8
    a238:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a23c:	04000074 	movhi	r16,1
    a240:	8402e804 	addi	r16,r16,2976
    a244:	e0bfff17 	ldw	r2,-4(fp)
    a248:	1009883a 	mov	r4,r2
    a24c:	01400304 	movi	r5,12
    a250:	00094480 	call	9448 <__mulsi3>
    a254:	8085883a 	add	r2,r16,r2
    a258:	10000015 	stw	zero,0(r2)
  }
}
    a25c:	e037883a 	mov	sp,fp
    a260:	dfc00217 	ldw	ra,8(sp)
    a264:	df000117 	ldw	fp,4(sp)
    a268:	dc000017 	ldw	r16,0(sp)
    a26c:	dec00304 	addi	sp,sp,12
    a270:	f800283a 	ret

0000a274 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a274:	defff904 	addi	sp,sp,-28
    a278:	df000615 	stw	fp,24(sp)
    a27c:	df000604 	addi	fp,sp,24
    a280:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a284:	0005303a 	rdctl	r2,status
    a288:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a28c:	e0fffc17 	ldw	r3,-16(fp)
    a290:	00bfff84 	movi	r2,-2
    a294:	1884703a 	and	r2,r3,r2
    a298:	1001703a 	wrctl	status,r2
  
  return context;
    a29c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a2a0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a2a4:	d0a00b17 	ldw	r2,-32724(gp)
    a2a8:	10c000c4 	addi	r3,r2,3
    a2ac:	00bfff04 	movi	r2,-4
    a2b0:	1884703a 	and	r2,r3,r2
    a2b4:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a2b8:	d0e00b17 	ldw	r3,-32724(gp)
    a2bc:	e0bfff17 	ldw	r2,-4(fp)
    a2c0:	1885883a 	add	r2,r3,r2
    a2c4:	00c000b4 	movhi	r3,2
    a2c8:	18e00004 	addi	r3,r3,-32768
    a2cc:	1880062e 	bgeu	r3,r2,a2e8 <sbrk+0x74>
    a2d0:	e0bffa17 	ldw	r2,-24(fp)
    a2d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a2d8:	e0bffd17 	ldw	r2,-12(fp)
    a2dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a2e0:	00bfffc4 	movi	r2,-1
    a2e4:	00000b06 	br	a314 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    a2e8:	d0a00b17 	ldw	r2,-32724(gp)
    a2ec:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    a2f0:	d0e00b17 	ldw	r3,-32724(gp)
    a2f4:	e0bfff17 	ldw	r2,-4(fp)
    a2f8:	1885883a 	add	r2,r3,r2
    a2fc:	d0a00b15 	stw	r2,-32724(gp)
    a300:	e0bffa17 	ldw	r2,-24(fp)
    a304:	e0bffe15 	stw	r2,-8(fp)
    a308:	e0bffe17 	ldw	r2,-8(fp)
    a30c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a310:	e0bffb17 	ldw	r2,-20(fp)
} 
    a314:	e037883a 	mov	sp,fp
    a318:	df000017 	ldw	fp,0(sp)
    a31c:	dec00104 	addi	sp,sp,4
    a320:	f800283a 	ret

0000a324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a324:	defffe04 	addi	sp,sp,-8
    a328:	dfc00115 	stw	ra,4(sp)
    a32c:	df000015 	stw	fp,0(sp)
    a330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a334:	00800074 	movhi	r2,1
    a338:	10876a04 	addi	r2,r2,7592
    a33c:	10800017 	ldw	r2,0(r2)
    a340:	10000526 	beq	r2,zero,a358 <alt_get_errno+0x34>
    a344:	00800074 	movhi	r2,1
    a348:	10876a04 	addi	r2,r2,7592
    a34c:	10800017 	ldw	r2,0(r2)
    a350:	103ee83a 	callr	r2
    a354:	00000206 	br	a360 <alt_get_errno+0x3c>
    a358:	00800074 	movhi	r2,1
    a35c:	10877a04 	addi	r2,r2,7656
}
    a360:	e037883a 	mov	sp,fp
    a364:	dfc00117 	ldw	ra,4(sp)
    a368:	df000017 	ldw	fp,0(sp)
    a36c:	dec00204 	addi	sp,sp,8
    a370:	f800283a 	ret

0000a374 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a374:	defff904 	addi	sp,sp,-28
    a378:	dfc00615 	stw	ra,24(sp)
    a37c:	df000515 	stw	fp,20(sp)
    a380:	df000504 	addi	fp,sp,20
    a384:	e13ffd15 	stw	r4,-12(fp)
    a388:	e17ffe15 	stw	r5,-8(fp)
    a38c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a390:	e0bffd17 	ldw	r2,-12(fp)
    a394:	10000716 	blt	r2,zero,a3b4 <write+0x40>
    a398:	e13ffd17 	ldw	r4,-12(fp)
    a39c:	01400304 	movi	r5,12
    a3a0:	00094480 	call	9448 <__mulsi3>
    a3a4:	00c00074 	movhi	r3,1
    a3a8:	18c2e804 	addi	r3,r3,2976
    a3ac:	10c5883a 	add	r2,r2,r3
    a3b0:	00000106 	br	a3b8 <write+0x44>
    a3b4:	0005883a 	mov	r2,zero
    a3b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    a3bc:	e0bffb17 	ldw	r2,-20(fp)
    a3c0:	10001f26 	beq	r2,zero,a440 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a3c4:	e0bffb17 	ldw	r2,-20(fp)
    a3c8:	10800217 	ldw	r2,8(r2)
    a3cc:	108000cc 	andi	r2,r2,3
    a3d0:	10001726 	beq	r2,zero,a430 <write+0xbc>
    a3d4:	e0bffb17 	ldw	r2,-20(fp)
    a3d8:	10800017 	ldw	r2,0(r2)
    a3dc:	10800617 	ldw	r2,24(r2)
    a3e0:	10001326 	beq	r2,zero,a430 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a3e4:	e0bffb17 	ldw	r2,-20(fp)
    a3e8:	10800017 	ldw	r2,0(r2)
    a3ec:	10c00617 	ldw	r3,24(r2)
    a3f0:	e0bfff17 	ldw	r2,-4(fp)
    a3f4:	e13ffb17 	ldw	r4,-20(fp)
    a3f8:	e17ffe17 	ldw	r5,-8(fp)
    a3fc:	100d883a 	mov	r6,r2
    a400:	183ee83a 	callr	r3
    a404:	e0bffc15 	stw	r2,-16(fp)
    a408:	e0bffc17 	ldw	r2,-16(fp)
    a40c:	1000060e 	bge	r2,zero,a428 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    a410:	000a3240 	call	a324 <alt_get_errno>
    a414:	e0fffc17 	ldw	r3,-16(fp)
    a418:	00c7c83a 	sub	r3,zero,r3
    a41c:	10c00015 	stw	r3,0(r2)
        return -1;
    a420:	00bfffc4 	movi	r2,-1
    a424:	00000a06 	br	a450 <write+0xdc>
      }
      return rval;
    a428:	e0bffc17 	ldw	r2,-16(fp)
    a42c:	00000806 	br	a450 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a430:	000a3240 	call	a324 <alt_get_errno>
    a434:	00c00344 	movi	r3,13
    a438:	10c00015 	stw	r3,0(r2)
    a43c:	00000306 	br	a44c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a440:	000a3240 	call	a324 <alt_get_errno>
    a444:	00c01444 	movi	r3,81
    a448:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    a44c:	00bfffc4 	movi	r2,-1
}
    a450:	e037883a 	mov	sp,fp
    a454:	dfc00117 	ldw	ra,4(sp)
    a458:	df000017 	ldw	fp,0(sp)
    a45c:	dec00204 	addi	sp,sp,8
    a460:	f800283a 	ret

0000a464 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a464:	defffd04 	addi	sp,sp,-12
    a468:	dfc00215 	stw	ra,8(sp)
    a46c:	df000115 	stw	fp,4(sp)
    a470:	df000104 	addi	fp,sp,4
    a474:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a478:	e13fff17 	ldw	r4,-4(fp)
    a47c:	01400074 	movhi	r5,1
    a480:	29476704 	addi	r5,r5,7580
    a484:	000b72c0 	call	b72c <alt_dev_llist_insert>
}
    a488:	e037883a 	mov	sp,fp
    a48c:	dfc00117 	ldw	ra,4(sp)
    a490:	df000017 	ldw	fp,0(sp)
    a494:	dec00204 	addi	sp,sp,8
    a498:	f800283a 	ret

0000a49c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a49c:	defffd04 	addi	sp,sp,-12
    a4a0:	dfc00215 	stw	ra,8(sp)
    a4a4:	df000115 	stw	fp,4(sp)
    a4a8:	df000104 	addi	fp,sp,4
    a4ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
    a4b0:	000c0f40 	call	c0f4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a4b4:	00800044 	movi	r2,1
    a4b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a4bc:	e037883a 	mov	sp,fp
    a4c0:	dfc00117 	ldw	ra,4(sp)
    a4c4:	df000017 	ldw	fp,0(sp)
    a4c8:	dec00204 	addi	sp,sp,8
    a4cc:	f800283a 	ret

0000a4d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a4d0:	defffe04 	addi	sp,sp,-8
    a4d4:	dfc00115 	stw	ra,4(sp)
    a4d8:	df000015 	stw	fp,0(sp)
    a4dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    a4e0:	010000b4 	movhi	r4,2
    a4e4:	21241004 	addi	r4,r4,-28608
    a4e8:	000b883a 	mov	r5,zero
    a4ec:	01800044 	movi	r6,1
    a4f0:	01c0fa04 	movi	r7,1000
    a4f4:	000b4f80 	call	b4f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    a4f8:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    a4fc:	01000074 	movhi	r4,1
    a500:	21035204 	addi	r4,r4,3400
    a504:	000b883a 	mov	r5,zero
    a508:	01800404 	movi	r6,16
    a50c:	000ab840 	call	ab84 <altera_avalon_jtag_uart_init>
    a510:	01000074 	movhi	r4,1
    a514:	21034804 	addi	r4,r4,3360
    a518:	000a4640 	call	a464 <alt_dev_reg>
}
    a51c:	e037883a 	mov	sp,fp
    a520:	dfc00117 	ldw	ra,4(sp)
    a524:	df000017 	ldw	fp,0(sp)
    a528:	dec00204 	addi	sp,sp,8
    a52c:	f800283a 	ret

0000a530 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    a530:	defffa04 	addi	sp,sp,-24
    a534:	dfc00515 	stw	ra,20(sp)
    a538:	df000415 	stw	fp,16(sp)
    a53c:	df000404 	addi	fp,sp,16
    a540:	e13ffc15 	stw	r4,-16(fp)
    a544:	e17ffd15 	stw	r5,-12(fp)
    a548:	e1bffe15 	stw	r6,-8(fp)
    a54c:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    a550:	e13ffc17 	ldw	r4,-16(fp)
    a554:	01400fc4 	movi	r5,63
    a558:	000a6fc0 	call	a6fc <altera_avalon_fifo_clear_event>
    a55c:	10000226 	beq	r2,zero,a568 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    a560:	00bfffc4 	movi	r2,-1
    a564:	00001306 	br	a5b4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    a568:	e13ffc17 	ldw	r4,-16(fp)
    a56c:	e17ffd17 	ldw	r5,-12(fp)
    a570:	000a7580 	call	a758 <altera_avalon_fifo_write_ienable>
    a574:	10000226 	beq	r2,zero,a580 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    a578:	00bfff84 	movi	r2,-2
    a57c:	00000d06 	br	a5b4 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
    a580:	e13ffc17 	ldw	r4,-16(fp)
    a584:	e17fff17 	ldw	r5,-4(fp)
    a588:	000a7b00 	call	a7b0 <altera_avalon_fifo_write_almostfull>
    a58c:	10000226 	beq	r2,zero,a598 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    a590:	00bfff44 	movi	r2,-3
    a594:	00000706 	br	a5b4 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
    a598:	e13ffc17 	ldw	r4,-16(fp)
    a59c:	e17ffe17 	ldw	r5,-8(fp)
    a5a0:	000a8080 	call	a808 <altera_avalon_fifo_write_almostempty>
    a5a4:	10000226 	beq	r2,zero,a5b0 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    a5a8:	00bfff44 	movi	r2,-3
    a5ac:	00000106 	br	a5b4 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
    a5b0:	0005883a 	mov	r2,zero
}
    a5b4:	e037883a 	mov	sp,fp
    a5b8:	dfc00117 	ldw	ra,4(sp)
    a5bc:	df000017 	ldw	fp,0(sp)
    a5c0:	dec00204 	addi	sp,sp,8
    a5c4:	f800283a 	ret

0000a5c8 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    a5c8:	defffd04 	addi	sp,sp,-12
    a5cc:	df000215 	stw	fp,8(sp)
    a5d0:	df000204 	addi	fp,sp,8
    a5d4:	e13ffe15 	stw	r4,-8(fp)
    a5d8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    a5dc:	e0bffe17 	ldw	r2,-8(fp)
    a5e0:	10800104 	addi	r2,r2,4
    a5e4:	10800037 	ldwio	r2,0(r2)
    a5e8:	1007883a 	mov	r3,r2
    a5ec:	e0bfff17 	ldw	r2,-4(fp)
    a5f0:	1884703a 	and	r2,r3,r2
}
    a5f4:	e037883a 	mov	sp,fp
    a5f8:	df000017 	ldw	fp,0(sp)
    a5fc:	dec00104 	addi	sp,sp,4
    a600:	f800283a 	ret

0000a604 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
    a604:	defffd04 	addi	sp,sp,-12
    a608:	df000215 	stw	fp,8(sp)
    a60c:	df000204 	addi	fp,sp,8
    a610:	e13ffe15 	stw	r4,-8(fp)
    a614:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
    a618:	e0bffe17 	ldw	r2,-8(fp)
    a61c:	10800304 	addi	r2,r2,12
    a620:	10800037 	ldwio	r2,0(r2)
    a624:	1007883a 	mov	r3,r2
    a628:	e0bfff17 	ldw	r2,-4(fp)
    a62c:	1884703a 	and	r2,r3,r2
}
    a630:	e037883a 	mov	sp,fp
    a634:	df000017 	ldw	fp,0(sp)
    a638:	dec00104 	addi	sp,sp,4
    a63c:	f800283a 	ret

0000a640 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    a640:	defffe04 	addi	sp,sp,-8
    a644:	df000115 	stw	fp,4(sp)
    a648:	df000104 	addi	fp,sp,4
    a64c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
    a650:	e0bfff17 	ldw	r2,-4(fp)
    a654:	10800404 	addi	r2,r2,16
    a658:	10800037 	ldwio	r2,0(r2)
}
    a65c:	e037883a 	mov	sp,fp
    a660:	df000017 	ldw	fp,0(sp)
    a664:	dec00104 	addi	sp,sp,4
    a668:	f800283a 	ret

0000a66c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    a66c:	defffe04 	addi	sp,sp,-8
    a670:	df000115 	stw	fp,4(sp)
    a674:	df000104 	addi	fp,sp,4
    a678:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
    a67c:	e0bfff17 	ldw	r2,-4(fp)
    a680:	10800504 	addi	r2,r2,20
    a684:	10800037 	ldwio	r2,0(r2)
}
    a688:	e037883a 	mov	sp,fp
    a68c:	df000017 	ldw	fp,0(sp)
    a690:	dec00104 	addi	sp,sp,4
    a694:	f800283a 	ret

0000a698 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    a698:	defffd04 	addi	sp,sp,-12
    a69c:	df000215 	stw	fp,8(sp)
    a6a0:	df000204 	addi	fp,sp,8
    a6a4:	e13ffe15 	stw	r4,-8(fp)
    a6a8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
    a6ac:	e0bffe17 	ldw	r2,-8(fp)
    a6b0:	10800204 	addi	r2,r2,8
    a6b4:	10800037 	ldwio	r2,0(r2)
    a6b8:	1007883a 	mov	r3,r2
    a6bc:	e0bfff17 	ldw	r2,-4(fp)
    a6c0:	1884703a 	and	r2,r3,r2
}
    a6c4:	e037883a 	mov	sp,fp
    a6c8:	df000017 	ldw	fp,0(sp)
    a6cc:	dec00104 	addi	sp,sp,4
    a6d0:	f800283a 	ret

0000a6d4 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
    a6d4:	defffe04 	addi	sp,sp,-8
    a6d8:	df000115 	stw	fp,4(sp)
    a6dc:	df000104 	addi	fp,sp,4
    a6e0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
    a6e4:	e0bfff17 	ldw	r2,-4(fp)
    a6e8:	10800037 	ldwio	r2,0(r2)
}
    a6ec:	e037883a 	mov	sp,fp
    a6f0:	df000017 	ldw	fp,0(sp)
    a6f4:	dec00104 	addi	sp,sp,4
    a6f8:	f800283a 	ret

0000a6fc <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    a6fc:	defffd04 	addi	sp,sp,-12
    a700:	df000215 	stw	fp,8(sp)
    a704:	df000204 	addi	fp,sp,8
    a708:	e13ffe15 	stw	r4,-8(fp)
    a70c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
    a710:	e0bffe17 	ldw	r2,-8(fp)
    a714:	10800204 	addi	r2,r2,8
    a718:	e0ffff17 	ldw	r3,-4(fp)
    a71c:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
    a720:	e0bffe17 	ldw	r2,-8(fp)
    a724:	10800204 	addi	r2,r2,8
    a728:	10800037 	ldwio	r2,0(r2)
    a72c:	1007883a 	mov	r3,r2
    a730:	e0bfff17 	ldw	r2,-4(fp)
    a734:	1884703a 	and	r2,r3,r2
    a738:	1000021e 	bne	r2,zero,a744 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
    a73c:	0005883a 	mov	r2,zero
    a740:	00000106 	br	a748 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    a744:	00bfffc4 	movi	r2,-1
}
    a748:	e037883a 	mov	sp,fp
    a74c:	df000017 	ldw	fp,0(sp)
    a750:	dec00104 	addi	sp,sp,4
    a754:	f800283a 	ret

0000a758 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    a758:	defffd04 	addi	sp,sp,-12
    a75c:	df000215 	stw	fp,8(sp)
    a760:	df000204 	addi	fp,sp,8
    a764:	e13ffe15 	stw	r4,-8(fp)
    a768:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    a76c:	e0bffe17 	ldw	r2,-8(fp)
    a770:	10800304 	addi	r2,r2,12
    a774:	e0ffff17 	ldw	r3,-4(fp)
    a778:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
    a77c:	e0bffe17 	ldw	r2,-8(fp)
    a780:	10800304 	addi	r2,r2,12
    a784:	10800037 	ldwio	r2,0(r2)
    a788:	1007883a 	mov	r3,r2
    a78c:	e0bfff17 	ldw	r2,-4(fp)
    a790:	1880021e 	bne	r3,r2,a79c <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
    a794:	0005883a 	mov	r2,zero
    a798:	00000106 	br	a7a0 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    a79c:	00bfff84 	movi	r2,-2
}
    a7a0:	e037883a 	mov	sp,fp
    a7a4:	df000017 	ldw	fp,0(sp)
    a7a8:	dec00104 	addi	sp,sp,4
    a7ac:	f800283a 	ret

0000a7b0 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    a7b0:	defffd04 	addi	sp,sp,-12
    a7b4:	df000215 	stw	fp,8(sp)
    a7b8:	df000204 	addi	fp,sp,8
    a7bc:	e13ffe15 	stw	r4,-8(fp)
    a7c0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    a7c4:	e0bffe17 	ldw	r2,-8(fp)
    a7c8:	10800404 	addi	r2,r2,16
    a7cc:	e0ffff17 	ldw	r3,-4(fp)
    a7d0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
    a7d4:	e0bffe17 	ldw	r2,-8(fp)
    a7d8:	10800404 	addi	r2,r2,16
    a7dc:	10800037 	ldwio	r2,0(r2)
    a7e0:	1007883a 	mov	r3,r2
    a7e4:	e0bfff17 	ldw	r2,-4(fp)
    a7e8:	1880021e 	bne	r3,r2,a7f4 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
    a7ec:	0005883a 	mov	r2,zero
    a7f0:	00000106 	br	a7f8 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    a7f4:	00bfff44 	movi	r2,-3
}
    a7f8:	e037883a 	mov	sp,fp
    a7fc:	df000017 	ldw	fp,0(sp)
    a800:	dec00104 	addi	sp,sp,4
    a804:	f800283a 	ret

0000a808 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    a808:	defffd04 	addi	sp,sp,-12
    a80c:	df000215 	stw	fp,8(sp)
    a810:	df000204 	addi	fp,sp,8
    a814:	e13ffe15 	stw	r4,-8(fp)
    a818:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    a81c:	e0bffe17 	ldw	r2,-8(fp)
    a820:	10800504 	addi	r2,r2,20
    a824:	e0ffff17 	ldw	r3,-4(fp)
    a828:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
    a82c:	e0bffe17 	ldw	r2,-8(fp)
    a830:	10800504 	addi	r2,r2,20
    a834:	10800037 	ldwio	r2,0(r2)
    a838:	1007883a 	mov	r3,r2
    a83c:	e0bfff17 	ldw	r2,-4(fp)
    a840:	1880021e 	bne	r3,r2,a84c <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
    a844:	0005883a 	mov	r2,zero
    a848:	00000106 	br	a850 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    a84c:	00bfff44 	movi	r2,-3
}
    a850:	e037883a 	mov	sp,fp
    a854:	df000017 	ldw	fp,0(sp)
    a858:	dec00104 	addi	sp,sp,4
    a85c:	f800283a 	ret

0000a860 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    a860:	defffb04 	addi	sp,sp,-20
    a864:	dfc00415 	stw	ra,16(sp)
    a868:	df000315 	stw	fp,12(sp)
    a86c:	df000304 	addi	fp,sp,12
    a870:	e13ffd15 	stw	r4,-12(fp)
    a874:	e17ffe15 	stw	r5,-8(fp)
    a878:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    a87c:	e13ffe17 	ldw	r4,-8(fp)
    a880:	01400044 	movi	r5,1
    a884:	000a5c80 	call	a5c8 <altera_avalon_fifo_read_status>
    a888:	1000051e 	bne	r2,zero,a8a0 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
    a88c:	e0bffd17 	ldw	r2,-12(fp)
    a890:	e0ffff17 	ldw	r3,-4(fp)
    a894:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
    a898:	0005883a 	mov	r2,zero
    a89c:	00000106 	br	a8a4 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
    a8a0:	00bfff04 	movi	r2,-4
    }
}
    a8a4:	e037883a 	mov	sp,fp
    a8a8:	dfc00117 	ldw	ra,4(sp)
    a8ac:	df000017 	ldw	fp,0(sp)
    a8b0:	dec00204 	addi	sp,sp,8
    a8b4:	f800283a 	ret

0000a8b8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    a8b8:	defffa04 	addi	sp,sp,-24
    a8bc:	dfc00515 	stw	ra,20(sp)
    a8c0:	df000415 	stw	fp,16(sp)
    a8c4:	df000404 	addi	fp,sp,16
    a8c8:	e13ffd15 	stw	r4,-12(fp)
    a8cc:	e17ffe15 	stw	r5,-8(fp)
    a8d0:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
    a8d4:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
    a8d8:	e0bfff17 	ldw	r2,-4(fp)
    a8dc:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    a8e0:	e13ffe17 	ldw	r4,-8(fp)
    a8e4:	01400084 	movi	r5,2
    a8e8:	000a5c80 	call	a5c8 <altera_avalon_fifo_read_status>
    a8ec:	1000071e 	bne	r2,zero,a90c <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
    a8f0:	e13ffe17 	ldw	r4,-8(fp)
    a8f4:	000a6d40 	call	a6d4 <altera_avalon_fifo_read_level>
    a8f8:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    a8fc:	e0bffd17 	ldw	r2,-12(fp)
    a900:	10c00037 	ldwio	r3,0(r2)
    a904:	e0bfff17 	ldw	r2,-4(fp)
    a908:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
    a90c:	e0bffc17 	ldw	r2,-16(fp)
}
    a910:	e037883a 	mov	sp,fp
    a914:	dfc00117 	ldw	ra,4(sp)
    a918:	df000017 	ldw	fp,0(sp)
    a91c:	dec00204 	addi	sp,sp,8
    a920:	f800283a 	ret

0000a924 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    a924:	defffc04 	addi	sp,sp,-16
    a928:	dfc00315 	stw	ra,12(sp)
    a92c:	df000215 	stw	fp,8(sp)
    a930:	df000204 	addi	fp,sp,8
    a934:	e13ffe15 	stw	r4,-8(fp)
    a938:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    a93c:	e13fff17 	ldw	r4,-4(fp)
    a940:	01400084 	movi	r5,2
    a944:	000a5c80 	call	a5c8 <altera_avalon_fifo_read_status>
    a948:	1000031e 	bne	r2,zero,a958 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    a94c:	e0bffe17 	ldw	r2,-8(fp)
    a950:	10800037 	ldwio	r2,0(r2)
    a954:	00000106 	br	a95c <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
    a958:	0005883a 	mov	r2,zero
}
    a95c:	e037883a 	mov	sp,fp
    a960:	dfc00117 	ldw	ra,4(sp)
    a964:	df000017 	ldw	fp,0(sp)
    a968:	dec00204 	addi	sp,sp,8
    a96c:	f800283a 	ret

0000a970 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    a970:	defffb04 	addi	sp,sp,-20
    a974:	dfc00415 	stw	ra,16(sp)
    a978:	df000315 	stw	fp,12(sp)
    a97c:	df000304 	addi	fp,sp,12
    a980:	e13ffd15 	stw	r4,-12(fp)
    a984:	e17ffe15 	stw	r5,-8(fp)
    a988:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    a98c:	e13ffe17 	ldw	r4,-8(fp)
    a990:	01400044 	movi	r5,1
    a994:	000a5c80 	call	a5c8 <altera_avalon_fifo_read_status>
    a998:	1000061e 	bne	r2,zero,a9b4 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
    a99c:	e0bffd17 	ldw	r2,-12(fp)
    a9a0:	10800104 	addi	r2,r2,4
    a9a4:	e0ffff17 	ldw	r3,-4(fp)
    a9a8:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
    a9ac:	0005883a 	mov	r2,zero
    a9b0:	00000106 	br	a9b8 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
    a9b4:	00bfff04 	movi	r2,-4
    }
}
    a9b8:	e037883a 	mov	sp,fp
    a9bc:	dfc00117 	ldw	ra,4(sp)
    a9c0:	df000017 	ldw	fp,0(sp)
    a9c4:	dec00204 	addi	sp,sp,8
    a9c8:	f800283a 	ret

0000a9cc <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    a9cc:	defffe04 	addi	sp,sp,-8
    a9d0:	df000115 	stw	fp,4(sp)
    a9d4:	df000104 	addi	fp,sp,4
    a9d8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
    a9dc:	e0bfff17 	ldw	r2,-4(fp)
    a9e0:	10800104 	addi	r2,r2,4
    a9e4:	10800037 	ldwio	r2,0(r2)
}
    a9e8:	e037883a 	mov	sp,fp
    a9ec:	df000017 	ldw	fp,0(sp)
    a9f0:	dec00104 	addi	sp,sp,4
    a9f4:	f800283a 	ret

0000a9f8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    a9f8:	defffe04 	addi	sp,sp,-8
    a9fc:	df000115 	stw	fp,4(sp)
    aa00:	df000104 	addi	fp,sp,4
    aa04:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
    aa08:	e0bfff17 	ldw	r2,-4(fp)
    aa0c:	10800037 	ldwio	r2,0(r2)
}
    aa10:	e037883a 	mov	sp,fp
    aa14:	df000017 	ldw	fp,0(sp)
    aa18:	dec00104 	addi	sp,sp,4
    aa1c:	f800283a 	ret

0000aa20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    aa20:	defffa04 	addi	sp,sp,-24
    aa24:	dfc00515 	stw	ra,20(sp)
    aa28:	df000415 	stw	fp,16(sp)
    aa2c:	df000404 	addi	fp,sp,16
    aa30:	e13ffd15 	stw	r4,-12(fp)
    aa34:	e17ffe15 	stw	r5,-8(fp)
    aa38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    aa3c:	e0bffd17 	ldw	r2,-12(fp)
    aa40:	10800017 	ldw	r2,0(r2)
    aa44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    aa48:	e0bffc17 	ldw	r2,-16(fp)
    aa4c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    aa50:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    aa54:	10800217 	ldw	r2,8(r2)
    aa58:	1809883a 	mov	r4,r3
    aa5c:	e17ffe17 	ldw	r5,-8(fp)
    aa60:	e1bfff17 	ldw	r6,-4(fp)
    aa64:	100f883a 	mov	r7,r2
    aa68:	000b0480 	call	b048 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    aa6c:	e037883a 	mov	sp,fp
    aa70:	dfc00117 	ldw	ra,4(sp)
    aa74:	df000017 	ldw	fp,0(sp)
    aa78:	dec00204 	addi	sp,sp,8
    aa7c:	f800283a 	ret

0000aa80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    aa80:	defffa04 	addi	sp,sp,-24
    aa84:	dfc00515 	stw	ra,20(sp)
    aa88:	df000415 	stw	fp,16(sp)
    aa8c:	df000404 	addi	fp,sp,16
    aa90:	e13ffd15 	stw	r4,-12(fp)
    aa94:	e17ffe15 	stw	r5,-8(fp)
    aa98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    aa9c:	e0bffd17 	ldw	r2,-12(fp)
    aaa0:	10800017 	ldw	r2,0(r2)
    aaa4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    aaa8:	e0bffc17 	ldw	r2,-16(fp)
    aaac:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    aab0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    aab4:	10800217 	ldw	r2,8(r2)
    aab8:	1809883a 	mov	r4,r3
    aabc:	e17ffe17 	ldw	r5,-8(fp)
    aac0:	e1bfff17 	ldw	r6,-4(fp)
    aac4:	100f883a 	mov	r7,r2
    aac8:	000b2600 	call	b260 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    aacc:	e037883a 	mov	sp,fp
    aad0:	dfc00117 	ldw	ra,4(sp)
    aad4:	df000017 	ldw	fp,0(sp)
    aad8:	dec00204 	addi	sp,sp,8
    aadc:	f800283a 	ret

0000aae0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    aae0:	defffc04 	addi	sp,sp,-16
    aae4:	dfc00315 	stw	ra,12(sp)
    aae8:	df000215 	stw	fp,8(sp)
    aaec:	df000204 	addi	fp,sp,8
    aaf0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    aaf4:	e0bfff17 	ldw	r2,-4(fp)
    aaf8:	10800017 	ldw	r2,0(r2)
    aafc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ab00:	e0bffe17 	ldw	r2,-8(fp)
    ab04:	10c00a04 	addi	r3,r2,40
    ab08:	e0bfff17 	ldw	r2,-4(fp)
    ab0c:	10800217 	ldw	r2,8(r2)
    ab10:	1809883a 	mov	r4,r3
    ab14:	100b883a 	mov	r5,r2
    ab18:	000aeec0 	call	aeec <altera_avalon_jtag_uart_close>
}
    ab1c:	e037883a 	mov	sp,fp
    ab20:	dfc00117 	ldw	ra,4(sp)
    ab24:	df000017 	ldw	fp,0(sp)
    ab28:	dec00204 	addi	sp,sp,8
    ab2c:	f800283a 	ret

0000ab30 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ab30:	defffa04 	addi	sp,sp,-24
    ab34:	dfc00515 	stw	ra,20(sp)
    ab38:	df000415 	stw	fp,16(sp)
    ab3c:	df000404 	addi	fp,sp,16
    ab40:	e13ffd15 	stw	r4,-12(fp)
    ab44:	e17ffe15 	stw	r5,-8(fp)
    ab48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ab4c:	e0bffd17 	ldw	r2,-12(fp)
    ab50:	10800017 	ldw	r2,0(r2)
    ab54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ab58:	e0bffc17 	ldw	r2,-16(fp)
    ab5c:	10800a04 	addi	r2,r2,40
    ab60:	1009883a 	mov	r4,r2
    ab64:	e17ffe17 	ldw	r5,-8(fp)
    ab68:	e1bfff17 	ldw	r6,-4(fp)
    ab6c:	000af540 	call	af54 <altera_avalon_jtag_uart_ioctl>
}
    ab70:	e037883a 	mov	sp,fp
    ab74:	dfc00117 	ldw	ra,4(sp)
    ab78:	df000017 	ldw	fp,0(sp)
    ab7c:	dec00204 	addi	sp,sp,8
    ab80:	f800283a 	ret

0000ab84 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ab84:	defffa04 	addi	sp,sp,-24
    ab88:	dfc00515 	stw	ra,20(sp)
    ab8c:	df000415 	stw	fp,16(sp)
    ab90:	df000404 	addi	fp,sp,16
    ab94:	e13ffd15 	stw	r4,-12(fp)
    ab98:	e17ffe15 	stw	r5,-8(fp)
    ab9c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    aba0:	e0bffd17 	ldw	r2,-12(fp)
    aba4:	00c00044 	movi	r3,1
    aba8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    abac:	e0bffd17 	ldw	r2,-12(fp)
    abb0:	10800017 	ldw	r2,0(r2)
    abb4:	10800104 	addi	r2,r2,4
    abb8:	e0fffd17 	ldw	r3,-12(fp)
    abbc:	18c00817 	ldw	r3,32(r3)
    abc0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    abc4:	e0fffe17 	ldw	r3,-8(fp)
    abc8:	e0bfff17 	ldw	r2,-4(fp)
    abcc:	d8000015 	stw	zero,0(sp)
    abd0:	1809883a 	mov	r4,r3
    abd4:	100b883a 	mov	r5,r2
    abd8:	01800074 	movhi	r6,1
    abdc:	31ab1104 	addi	r6,r6,-21436
    abe0:	e1fffd17 	ldw	r7,-12(fp)
    abe4:	000b8a00 	call	b8a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    abe8:	e0bffd17 	ldw	r2,-12(fp)
    abec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    abf0:	e0bffd17 	ldw	r2,-12(fp)
    abf4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    abf8:	00800074 	movhi	r2,1
    abfc:	10877f04 	addi	r2,r2,7676
    ac00:	10800017 	ldw	r2,0(r2)
    ac04:	1809883a 	mov	r4,r3
    ac08:	100b883a 	mov	r5,r2
    ac0c:	01800074 	movhi	r6,1
    ac10:	31ab9204 	addi	r6,r6,-20920
    ac14:	e1fffd17 	ldw	r7,-12(fp)
    ac18:	000b5800 	call	b580 <alt_alarm_start>
    ac1c:	1000040e 	bge	r2,zero,ac30 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ac20:	e0bffd17 	ldw	r2,-12(fp)
    ac24:	00e00034 	movhi	r3,32768
    ac28:	18ffffc4 	addi	r3,r3,-1
    ac2c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ac30:	e037883a 	mov	sp,fp
    ac34:	dfc00117 	ldw	ra,4(sp)
    ac38:	df000017 	ldw	fp,0(sp)
    ac3c:	dec00204 	addi	sp,sp,8
    ac40:	f800283a 	ret

0000ac44 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ac44:	defff804 	addi	sp,sp,-32
    ac48:	df000715 	stw	fp,28(sp)
    ac4c:	df000704 	addi	fp,sp,28
    ac50:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    ac54:	e0bfff17 	ldw	r2,-4(fp)
    ac58:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    ac5c:	e0bffb17 	ldw	r2,-20(fp)
    ac60:	10800017 	ldw	r2,0(r2)
    ac64:	e0bffc15 	stw	r2,-16(fp)
    ac68:	00000106 	br	ac70 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
    ac6c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ac70:	e0bffc17 	ldw	r2,-16(fp)
    ac74:	10800104 	addi	r2,r2,4
    ac78:	10800037 	ldwio	r2,0(r2)
    ac7c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ac80:	e0bffd17 	ldw	r2,-12(fp)
    ac84:	1080c00c 	andi	r2,r2,768
    ac88:	10006a26 	beq	r2,zero,ae34 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ac8c:	e0bffd17 	ldw	r2,-12(fp)
    ac90:	1080400c 	andi	r2,r2,256
    ac94:	10003326 	beq	r2,zero,ad64 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ac98:	00800074 	movhi	r2,1
    ac9c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    aca0:	e0bffb17 	ldw	r2,-20(fp)
    aca4:	10800a17 	ldw	r2,40(r2)
    aca8:	10800044 	addi	r2,r2,1
    acac:	1081ffcc 	andi	r2,r2,2047
    acb0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    acb4:	e0bffb17 	ldw	r2,-20(fp)
    acb8:	10c00b17 	ldw	r3,44(r2)
    acbc:	e0bffe17 	ldw	r2,-8(fp)
    acc0:	18801426 	beq	r3,r2,ad14 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    acc4:	e0bffc17 	ldw	r2,-16(fp)
    acc8:	10800037 	ldwio	r2,0(r2)
    accc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    acd0:	e0bff917 	ldw	r2,-28(fp)
    acd4:	10a0000c 	andi	r2,r2,32768
    acd8:	10001026 	beq	r2,zero,ad1c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    acdc:	e0bffb17 	ldw	r2,-20(fp)
    ace0:	10800a17 	ldw	r2,40(r2)
    ace4:	e0fff917 	ldw	r3,-28(fp)
    ace8:	e13ffb17 	ldw	r4,-20(fp)
    acec:	2085883a 	add	r2,r4,r2
    acf0:	10800e04 	addi	r2,r2,56
    acf4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    acf8:	e0bffb17 	ldw	r2,-20(fp)
    acfc:	10800a17 	ldw	r2,40(r2)
    ad00:	10800044 	addi	r2,r2,1
    ad04:	10c1ffcc 	andi	r3,r2,2047
    ad08:	e0bffb17 	ldw	r2,-20(fp)
    ad0c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ad10:	003fe306 	br	aca0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    ad14:	0001883a 	nop
    ad18:	00000106 	br	ad20 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    ad1c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ad20:	e0bff917 	ldw	r2,-28(fp)
    ad24:	10bfffec 	andhi	r2,r2,65535
    ad28:	10000e26 	beq	r2,zero,ad64 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ad2c:	e0bffb17 	ldw	r2,-20(fp)
    ad30:	10c00817 	ldw	r3,32(r2)
    ad34:	00bfff84 	movi	r2,-2
    ad38:	1886703a 	and	r3,r3,r2
    ad3c:	e0bffb17 	ldw	r2,-20(fp)
    ad40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ad44:	e0bffc17 	ldw	r2,-16(fp)
    ad48:	10800104 	addi	r2,r2,4
    ad4c:	e0fffb17 	ldw	r3,-20(fp)
    ad50:	18c00817 	ldw	r3,32(r3)
    ad54:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ad58:	e0bffc17 	ldw	r2,-16(fp)
    ad5c:	10800104 	addi	r2,r2,4
    ad60:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ad64:	e0bffd17 	ldw	r2,-12(fp)
    ad68:	1080800c 	andi	r2,r2,512
    ad6c:	103fbf26 	beq	r2,zero,ac6c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ad70:	e0bffd17 	ldw	r2,-12(fp)
    ad74:	1004d43a 	srli	r2,r2,16
    ad78:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ad7c:	00001406 	br	add0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ad80:	e0bffc17 	ldw	r2,-16(fp)
    ad84:	e0fffb17 	ldw	r3,-20(fp)
    ad88:	18c00d17 	ldw	r3,52(r3)
    ad8c:	e13ffb17 	ldw	r4,-20(fp)
    ad90:	20c7883a 	add	r3,r4,r3
    ad94:	18c20e04 	addi	r3,r3,2104
    ad98:	18c00003 	ldbu	r3,0(r3)
    ad9c:	18c03fcc 	andi	r3,r3,255
    ada0:	18c0201c 	xori	r3,r3,128
    ada4:	18ffe004 	addi	r3,r3,-128
    ada8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    adac:	e0bffb17 	ldw	r2,-20(fp)
    adb0:	10800d17 	ldw	r2,52(r2)
    adb4:	10800044 	addi	r2,r2,1
    adb8:	10c1ffcc 	andi	r3,r2,2047
    adbc:	e0bffb17 	ldw	r2,-20(fp)
    adc0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    adc4:	e0bffa17 	ldw	r2,-24(fp)
    adc8:	10bfffc4 	addi	r2,r2,-1
    adcc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    add0:	e0bffa17 	ldw	r2,-24(fp)
    add4:	10000526 	beq	r2,zero,adec <altera_avalon_jtag_uart_irq+0x1a8>
    add8:	e0bffb17 	ldw	r2,-20(fp)
    addc:	10c00d17 	ldw	r3,52(r2)
    ade0:	e0bffb17 	ldw	r2,-20(fp)
    ade4:	10800c17 	ldw	r2,48(r2)
    ade8:	18bfe51e 	bne	r3,r2,ad80 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    adec:	e0bffa17 	ldw	r2,-24(fp)
    adf0:	103f9e26 	beq	r2,zero,ac6c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    adf4:	e0bffb17 	ldw	r2,-20(fp)
    adf8:	10c00817 	ldw	r3,32(r2)
    adfc:	00bfff44 	movi	r2,-3
    ae00:	1886703a 	and	r3,r3,r2
    ae04:	e0bffb17 	ldw	r2,-20(fp)
    ae08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ae0c:	e0bffb17 	ldw	r2,-20(fp)
    ae10:	10800017 	ldw	r2,0(r2)
    ae14:	10800104 	addi	r2,r2,4
    ae18:	e0fffb17 	ldw	r3,-20(fp)
    ae1c:	18c00817 	ldw	r3,32(r3)
    ae20:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ae24:	e0bffc17 	ldw	r2,-16(fp)
    ae28:	10800104 	addi	r2,r2,4
    ae2c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ae30:	003f8e06 	br	ac6c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    ae34:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    ae38:	e037883a 	mov	sp,fp
    ae3c:	df000017 	ldw	fp,0(sp)
    ae40:	dec00104 	addi	sp,sp,4
    ae44:	f800283a 	ret

0000ae48 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ae48:	defffc04 	addi	sp,sp,-16
    ae4c:	df000315 	stw	fp,12(sp)
    ae50:	df000304 	addi	fp,sp,12
    ae54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ae58:	e0bfff17 	ldw	r2,-4(fp)
    ae5c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ae60:	e0bffd17 	ldw	r2,-12(fp)
    ae64:	10800017 	ldw	r2,0(r2)
    ae68:	10800104 	addi	r2,r2,4
    ae6c:	10800037 	ldwio	r2,0(r2)
    ae70:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ae74:	e0bffe17 	ldw	r2,-8(fp)
    ae78:	1081000c 	andi	r2,r2,1024
    ae7c:	10000a26 	beq	r2,zero,aea8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ae80:	e0bffd17 	ldw	r2,-12(fp)
    ae84:	10800017 	ldw	r2,0(r2)
    ae88:	10800104 	addi	r2,r2,4
    ae8c:	e0fffd17 	ldw	r3,-12(fp)
    ae90:	18c00817 	ldw	r3,32(r3)
    ae94:	18c10014 	ori	r3,r3,1024
    ae98:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ae9c:	e0bffd17 	ldw	r2,-12(fp)
    aea0:	10000915 	stw	zero,36(r2)
    aea4:	00000a06 	br	aed0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    aea8:	e0bffd17 	ldw	r2,-12(fp)
    aeac:	10800917 	ldw	r2,36(r2)
    aeb0:	00e00034 	movhi	r3,32768
    aeb4:	18ffff04 	addi	r3,r3,-4
    aeb8:	18800536 	bltu	r3,r2,aed0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
    aebc:	e0bffd17 	ldw	r2,-12(fp)
    aec0:	10800917 	ldw	r2,36(r2)
    aec4:	10c00044 	addi	r3,r2,1
    aec8:	e0bffd17 	ldw	r2,-12(fp)
    aecc:	10c00915 	stw	r3,36(r2)
    aed0:	00800074 	movhi	r2,1
    aed4:	10877f04 	addi	r2,r2,7676
    aed8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    aedc:	e037883a 	mov	sp,fp
    aee0:	df000017 	ldw	fp,0(sp)
    aee4:	dec00104 	addi	sp,sp,4
    aee8:	f800283a 	ret

0000aeec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    aeec:	defffd04 	addi	sp,sp,-12
    aef0:	df000215 	stw	fp,8(sp)
    aef4:	df000204 	addi	fp,sp,8
    aef8:	e13ffe15 	stw	r4,-8(fp)
    aefc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    af00:	00000506 	br	af18 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    af04:	e0bfff17 	ldw	r2,-4(fp)
    af08:	1090000c 	andi	r2,r2,16384
    af0c:	10000226 	beq	r2,zero,af18 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    af10:	00bffd44 	movi	r2,-11
    af14:	00000b06 	br	af44 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    af18:	e0bffe17 	ldw	r2,-8(fp)
    af1c:	10c00d17 	ldw	r3,52(r2)
    af20:	e0bffe17 	ldw	r2,-8(fp)
    af24:	10800c17 	ldw	r2,48(r2)
    af28:	18800526 	beq	r3,r2,af40 <altera_avalon_jtag_uart_close+0x54>
    af2c:	e0bffe17 	ldw	r2,-8(fp)
    af30:	10c00917 	ldw	r3,36(r2)
    af34:	e0bffe17 	ldw	r2,-8(fp)
    af38:	10800117 	ldw	r2,4(r2)
    af3c:	18bff136 	bltu	r3,r2,af04 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    af40:	0005883a 	mov	r2,zero
}
    af44:	e037883a 	mov	sp,fp
    af48:	df000017 	ldw	fp,0(sp)
    af4c:	dec00104 	addi	sp,sp,4
    af50:	f800283a 	ret

0000af54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    af54:	defffa04 	addi	sp,sp,-24
    af58:	df000515 	stw	fp,20(sp)
    af5c:	df000504 	addi	fp,sp,20
    af60:	e13ffd15 	stw	r4,-12(fp)
    af64:	e17ffe15 	stw	r5,-8(fp)
    af68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    af6c:	00bff9c4 	movi	r2,-25
    af70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    af74:	e0bffe17 	ldw	r2,-8(fp)
    af78:	10da8060 	cmpeqi	r3,r2,27137
    af7c:	1800031e 	bne	r3,zero,af8c <altera_avalon_jtag_uart_ioctl+0x38>
    af80:	109a80a0 	cmpeqi	r2,r2,27138
    af84:	1000181e 	bne	r2,zero,afe8 <altera_avalon_jtag_uart_ioctl+0x94>
    af88:	00002606 	br	b024 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    af8c:	e0bffd17 	ldw	r2,-12(fp)
    af90:	10c00117 	ldw	r3,4(r2)
    af94:	00a00034 	movhi	r2,32768
    af98:	10bfffc4 	addi	r2,r2,-1
    af9c:	18802226 	beq	r3,r2,b028 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
    afa0:	e0bfff17 	ldw	r2,-4(fp)
    afa4:	10800017 	ldw	r2,0(r2)
    afa8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    afac:	e0bffc17 	ldw	r2,-16(fp)
    afb0:	10800090 	cmplti	r2,r2,2
    afb4:	1000061e 	bne	r2,zero,afd0 <altera_avalon_jtag_uart_ioctl+0x7c>
    afb8:	e0fffc17 	ldw	r3,-16(fp)
    afbc:	00a00034 	movhi	r2,32768
    afc0:	10bfffc4 	addi	r2,r2,-1
    afc4:	18800226 	beq	r3,r2,afd0 <altera_avalon_jtag_uart_ioctl+0x7c>
    afc8:	e0bffc17 	ldw	r2,-16(fp)
    afcc:	00000206 	br	afd8 <altera_avalon_jtag_uart_ioctl+0x84>
    afd0:	00a00034 	movhi	r2,32768
    afd4:	10bfff84 	addi	r2,r2,-2
    afd8:	e0fffd17 	ldw	r3,-12(fp)
    afdc:	18800115 	stw	r2,4(r3)
      rc = 0;
    afe0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    afe4:	00001006 	br	b028 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    afe8:	e0bffd17 	ldw	r2,-12(fp)
    afec:	10c00117 	ldw	r3,4(r2)
    aff0:	00a00034 	movhi	r2,32768
    aff4:	10bfffc4 	addi	r2,r2,-1
    aff8:	18800d26 	beq	r3,r2,b030 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    affc:	e0bffd17 	ldw	r2,-12(fp)
    b000:	10c00917 	ldw	r3,36(r2)
    b004:	e0bffd17 	ldw	r2,-12(fp)
    b008:	10800117 	ldw	r2,4(r2)
    b00c:	1885803a 	cmpltu	r2,r3,r2
    b010:	10c03fcc 	andi	r3,r2,255
    b014:	e0bfff17 	ldw	r2,-4(fp)
    b018:	10c00015 	stw	r3,0(r2)
      rc = 0;
    b01c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b020:	00000306 	br	b030 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
    b024:	00000306 	br	b034 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    b028:	0001883a 	nop
    b02c:	00000106 	br	b034 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    b030:	0001883a 	nop

  default:
    break;
  }

  return rc;
    b034:	e0bffb17 	ldw	r2,-20(fp)
}
    b038:	e037883a 	mov	sp,fp
    b03c:	df000017 	ldw	fp,0(sp)
    b040:	dec00104 	addi	sp,sp,4
    b044:	f800283a 	ret

0000b048 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b048:	defff304 	addi	sp,sp,-52
    b04c:	dfc00c15 	stw	ra,48(sp)
    b050:	df000b15 	stw	fp,44(sp)
    b054:	df000b04 	addi	fp,sp,44
    b058:	e13ffc15 	stw	r4,-16(fp)
    b05c:	e17ffd15 	stw	r5,-12(fp)
    b060:	e1bffe15 	stw	r6,-8(fp)
    b064:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    b068:	e0bffd17 	ldw	r2,-12(fp)
    b06c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b070:	00004706 	br	b190 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b074:	e0bffc17 	ldw	r2,-16(fp)
    b078:	10800a17 	ldw	r2,40(r2)
    b07c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    b080:	e0bffc17 	ldw	r2,-16(fp)
    b084:	10800b17 	ldw	r2,44(r2)
    b088:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    b08c:	e0fff717 	ldw	r3,-36(fp)
    b090:	e0bff817 	ldw	r2,-32(fp)
    b094:	18800536 	bltu	r3,r2,b0ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    b098:	e0fff717 	ldw	r3,-36(fp)
    b09c:	e0bff817 	ldw	r2,-32(fp)
    b0a0:	1885c83a 	sub	r2,r3,r2
    b0a4:	e0bff615 	stw	r2,-40(fp)
    b0a8:	00000406 	br	b0bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b0ac:	00c20004 	movi	r3,2048
    b0b0:	e0bff817 	ldw	r2,-32(fp)
    b0b4:	1885c83a 	sub	r2,r3,r2
    b0b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    b0bc:	e0bff617 	ldw	r2,-40(fp)
    b0c0:	10001e26 	beq	r2,zero,b13c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    b0c4:	e0fffe17 	ldw	r3,-8(fp)
    b0c8:	e0bff617 	ldw	r2,-40(fp)
    b0cc:	1880022e 	bgeu	r3,r2,b0d8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    b0d0:	e0bffe17 	ldw	r2,-8(fp)
    b0d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b0d8:	e0bff817 	ldw	r2,-32(fp)
    b0dc:	10800e04 	addi	r2,r2,56
    b0e0:	e0fffc17 	ldw	r3,-16(fp)
    b0e4:	1885883a 	add	r2,r3,r2
    b0e8:	e13ff517 	ldw	r4,-44(fp)
    b0ec:	100b883a 	mov	r5,r2
    b0f0:	e1bff617 	ldw	r6,-40(fp)
    b0f4:	00058300 	call	5830 <memcpy>
      ptr   += n;
    b0f8:	e0fff517 	ldw	r3,-44(fp)
    b0fc:	e0bff617 	ldw	r2,-40(fp)
    b100:	1885883a 	add	r2,r3,r2
    b104:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    b108:	e0fffe17 	ldw	r3,-8(fp)
    b10c:	e0bff617 	ldw	r2,-40(fp)
    b110:	1885c83a 	sub	r2,r3,r2
    b114:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b118:	e0fff817 	ldw	r3,-32(fp)
    b11c:	e0bff617 	ldw	r2,-40(fp)
    b120:	1885883a 	add	r2,r3,r2
    b124:	10c1ffcc 	andi	r3,r2,2047
    b128:	e0bffc17 	ldw	r2,-16(fp)
    b12c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b130:	e0bffe17 	ldw	r2,-8(fp)
    b134:	00bfcf16 	blt	zero,r2,b074 <altera_avalon_jtag_uart_read+0x2c>
    b138:	00000106 	br	b140 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    b13c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    b140:	e0fff517 	ldw	r3,-44(fp)
    b144:	e0bffd17 	ldw	r2,-12(fp)
    b148:	1880141e 	bne	r3,r2,b19c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b14c:	e0bfff17 	ldw	r2,-4(fp)
    b150:	1090000c 	andi	r2,r2,16384
    b154:	1000131e 	bne	r2,zero,b1a4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b158:	0001883a 	nop
    b15c:	e0bffc17 	ldw	r2,-16(fp)
    b160:	10c00a17 	ldw	r3,40(r2)
    b164:	e0bff717 	ldw	r2,-36(fp)
    b168:	1880051e 	bne	r3,r2,b180 <altera_avalon_jtag_uart_read+0x138>
    b16c:	e0bffc17 	ldw	r2,-16(fp)
    b170:	10c00917 	ldw	r3,36(r2)
    b174:	e0bffc17 	ldw	r2,-16(fp)
    b178:	10800117 	ldw	r2,4(r2)
    b17c:	18bff736 	bltu	r3,r2,b15c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b180:	e0bffc17 	ldw	r2,-16(fp)
    b184:	10c00a17 	ldw	r3,40(r2)
    b188:	e0bff717 	ldw	r2,-36(fp)
    b18c:	18800726 	beq	r3,r2,b1ac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b190:	e0bffe17 	ldw	r2,-8(fp)
    b194:	00bfb716 	blt	zero,r2,b074 <altera_avalon_jtag_uart_read+0x2c>
    b198:	00000506 	br	b1b0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    b19c:	0001883a 	nop
    b1a0:	00000306 	br	b1b0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    b1a4:	0001883a 	nop
    b1a8:	00000106 	br	b1b0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    b1ac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b1b0:	e0fff517 	ldw	r3,-44(fp)
    b1b4:	e0bffd17 	ldw	r2,-12(fp)
    b1b8:	18801726 	beq	r3,r2,b218 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b1bc:	0005303a 	rdctl	r2,status
    b1c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b1c4:	e0fffa17 	ldw	r3,-24(fp)
    b1c8:	00bfff84 	movi	r2,-2
    b1cc:	1884703a 	and	r2,r3,r2
    b1d0:	1001703a 	wrctl	status,r2
  
  return context;
    b1d4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b1d8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b1dc:	e0bffc17 	ldw	r2,-16(fp)
    b1e0:	10800817 	ldw	r2,32(r2)
    b1e4:	10c00054 	ori	r3,r2,1
    b1e8:	e0bffc17 	ldw	r2,-16(fp)
    b1ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b1f0:	e0bffc17 	ldw	r2,-16(fp)
    b1f4:	10800017 	ldw	r2,0(r2)
    b1f8:	10800104 	addi	r2,r2,4
    b1fc:	e0fffc17 	ldw	r3,-16(fp)
    b200:	18c00817 	ldw	r3,32(r3)
    b204:	10c00035 	stwio	r3,0(r2)
    b208:	e0bff917 	ldw	r2,-28(fp)
    b20c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b210:	e0bffb17 	ldw	r2,-20(fp)
    b214:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b218:	e0fff517 	ldw	r3,-44(fp)
    b21c:	e0bffd17 	ldw	r2,-12(fp)
    b220:	18800426 	beq	r3,r2,b234 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
    b224:	e0fff517 	ldw	r3,-44(fp)
    b228:	e0bffd17 	ldw	r2,-12(fp)
    b22c:	1885c83a 	sub	r2,r3,r2
    b230:	00000606 	br	b24c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
    b234:	e0bfff17 	ldw	r2,-4(fp)
    b238:	1090000c 	andi	r2,r2,16384
    b23c:	10000226 	beq	r2,zero,b248 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
    b240:	00bffd44 	movi	r2,-11
    b244:	00000106 	br	b24c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
    b248:	00bffec4 	movi	r2,-5
}
    b24c:	e037883a 	mov	sp,fp
    b250:	dfc00117 	ldw	ra,4(sp)
    b254:	df000017 	ldw	fp,0(sp)
    b258:	dec00204 	addi	sp,sp,8
    b25c:	f800283a 	ret

0000b260 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b260:	defff304 	addi	sp,sp,-52
    b264:	dfc00c15 	stw	ra,48(sp)
    b268:	df000b15 	stw	fp,44(sp)
    b26c:	df000b04 	addi	fp,sp,44
    b270:	e13ffc15 	stw	r4,-16(fp)
    b274:	e17ffd15 	stw	r5,-12(fp)
    b278:	e1bffe15 	stw	r6,-8(fp)
    b27c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b280:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b284:	e0bffd17 	ldw	r2,-12(fp)
    b288:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b28c:	00003706 	br	b36c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b290:	e0bffc17 	ldw	r2,-16(fp)
    b294:	10800c17 	ldw	r2,48(r2)
    b298:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    b29c:	e0bffc17 	ldw	r2,-16(fp)
    b2a0:	10800d17 	ldw	r2,52(r2)
    b2a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    b2a8:	e0fff817 	ldw	r3,-32(fp)
    b2ac:	e0bff517 	ldw	r2,-44(fp)
    b2b0:	1880062e 	bgeu	r3,r2,b2cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b2b4:	e0fff517 	ldw	r3,-44(fp)
    b2b8:	e0bff817 	ldw	r2,-32(fp)
    b2bc:	1885c83a 	sub	r2,r3,r2
    b2c0:	10bfffc4 	addi	r2,r2,-1
    b2c4:	e0bff615 	stw	r2,-40(fp)
    b2c8:	00000b06 	br	b2f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    b2cc:	e0bff517 	ldw	r2,-44(fp)
    b2d0:	10000526 	beq	r2,zero,b2e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b2d4:	00c20004 	movi	r3,2048
    b2d8:	e0bff817 	ldw	r2,-32(fp)
    b2dc:	1885c83a 	sub	r2,r3,r2
    b2e0:	e0bff615 	stw	r2,-40(fp)
    b2e4:	00000406 	br	b2f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b2e8:	00c1ffc4 	movi	r3,2047
    b2ec:	e0bff817 	ldw	r2,-32(fp)
    b2f0:	1885c83a 	sub	r2,r3,r2
    b2f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    b2f8:	e0bff617 	ldw	r2,-40(fp)
    b2fc:	10001e26 	beq	r2,zero,b378 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    b300:	e0fffe17 	ldw	r3,-8(fp)
    b304:	e0bff617 	ldw	r2,-40(fp)
    b308:	1880022e 	bgeu	r3,r2,b314 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    b30c:	e0bffe17 	ldw	r2,-8(fp)
    b310:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b314:	e0bff817 	ldw	r2,-32(fp)
    b318:	10820e04 	addi	r2,r2,2104
    b31c:	e0fffc17 	ldw	r3,-16(fp)
    b320:	1885883a 	add	r2,r3,r2
    b324:	1009883a 	mov	r4,r2
    b328:	e17ffd17 	ldw	r5,-12(fp)
    b32c:	e1bff617 	ldw	r6,-40(fp)
    b330:	00058300 	call	5830 <memcpy>
      ptr   += n;
    b334:	e0fffd17 	ldw	r3,-12(fp)
    b338:	e0bff617 	ldw	r2,-40(fp)
    b33c:	1885883a 	add	r2,r3,r2
    b340:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    b344:	e0fffe17 	ldw	r3,-8(fp)
    b348:	e0bff617 	ldw	r2,-40(fp)
    b34c:	1885c83a 	sub	r2,r3,r2
    b350:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b354:	e0fff817 	ldw	r3,-32(fp)
    b358:	e0bff617 	ldw	r2,-40(fp)
    b35c:	1885883a 	add	r2,r3,r2
    b360:	10c1ffcc 	andi	r3,r2,2047
    b364:	e0bffc17 	ldw	r2,-16(fp)
    b368:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b36c:	e0bffe17 	ldw	r2,-8(fp)
    b370:	00bfc716 	blt	zero,r2,b290 <altera_avalon_jtag_uart_write+0x30>
    b374:	00000106 	br	b37c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    b378:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b37c:	0005303a 	rdctl	r2,status
    b380:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b384:	e0fffa17 	ldw	r3,-24(fp)
    b388:	00bfff84 	movi	r2,-2
    b38c:	1884703a 	and	r2,r3,r2
    b390:	1001703a 	wrctl	status,r2
  
  return context;
    b394:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b398:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b39c:	e0bffc17 	ldw	r2,-16(fp)
    b3a0:	10800817 	ldw	r2,32(r2)
    b3a4:	10c00094 	ori	r3,r2,2
    b3a8:	e0bffc17 	ldw	r2,-16(fp)
    b3ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b3b0:	e0bffc17 	ldw	r2,-16(fp)
    b3b4:	10800017 	ldw	r2,0(r2)
    b3b8:	10800104 	addi	r2,r2,4
    b3bc:	e0fffc17 	ldw	r3,-16(fp)
    b3c0:	18c00817 	ldw	r3,32(r3)
    b3c4:	10c00035 	stwio	r3,0(r2)
    b3c8:	e0bff917 	ldw	r2,-28(fp)
    b3cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b3d0:	e0bffb17 	ldw	r2,-20(fp)
    b3d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b3d8:	e0bffe17 	ldw	r2,-8(fp)
    b3dc:	0080110e 	bge	zero,r2,b424 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    b3e0:	e0bfff17 	ldw	r2,-4(fp)
    b3e4:	1090000c 	andi	r2,r2,16384
    b3e8:	1000111e 	bne	r2,zero,b430 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b3ec:	0001883a 	nop
    b3f0:	e0bffc17 	ldw	r2,-16(fp)
    b3f4:	10c00d17 	ldw	r3,52(r2)
    b3f8:	e0bff517 	ldw	r2,-44(fp)
    b3fc:	1880051e 	bne	r3,r2,b414 <altera_avalon_jtag_uart_write+0x1b4>
    b400:	e0bffc17 	ldw	r2,-16(fp)
    b404:	10c00917 	ldw	r3,36(r2)
    b408:	e0bffc17 	ldw	r2,-16(fp)
    b40c:	10800117 	ldw	r2,4(r2)
    b410:	18bff736 	bltu	r3,r2,b3f0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    b414:	e0bffc17 	ldw	r2,-16(fp)
    b418:	10c00d17 	ldw	r3,52(r2)
    b41c:	e0bff517 	ldw	r2,-44(fp)
    b420:	18800526 	beq	r3,r2,b438 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    b424:	e0bffe17 	ldw	r2,-8(fp)
    b428:	00bfd016 	blt	zero,r2,b36c <altera_avalon_jtag_uart_write+0x10c>
    b42c:	00000306 	br	b43c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    b430:	0001883a 	nop
    b434:	00000106 	br	b43c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
    b438:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b43c:	e0fffd17 	ldw	r3,-12(fp)
    b440:	e0bff717 	ldw	r2,-36(fp)
    b444:	18800426 	beq	r3,r2,b458 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    b448:	e0fffd17 	ldw	r3,-12(fp)
    b44c:	e0bff717 	ldw	r2,-36(fp)
    b450:	1885c83a 	sub	r2,r3,r2
    b454:	00000606 	br	b470 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    b458:	e0bfff17 	ldw	r2,-4(fp)
    b45c:	1090000c 	andi	r2,r2,16384
    b460:	10000226 	beq	r2,zero,b46c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    b464:	00bffd44 	movi	r2,-11
    b468:	00000106 	br	b470 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    b46c:	00bffec4 	movi	r2,-5
}
    b470:	e037883a 	mov	sp,fp
    b474:	dfc00117 	ldw	ra,4(sp)
    b478:	df000017 	ldw	fp,0(sp)
    b47c:	dec00204 	addi	sp,sp,8
    b480:	f800283a 	ret

0000b484 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b484:	defffa04 	addi	sp,sp,-24
    b488:	dfc00515 	stw	ra,20(sp)
    b48c:	df000415 	stw	fp,16(sp)
    b490:	df000404 	addi	fp,sp,16
    b494:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b498:	0007883a 	mov	r3,zero
    b49c:	e0bfff17 	ldw	r2,-4(fp)
    b4a0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b4a4:	e0bfff17 	ldw	r2,-4(fp)
    b4a8:	10800104 	addi	r2,r2,4
    b4ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b4b0:	0005303a 	rdctl	r2,status
    b4b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b4b8:	e0fffd17 	ldw	r3,-12(fp)
    b4bc:	00bfff84 	movi	r2,-2
    b4c0:	1884703a 	and	r2,r3,r2
    b4c4:	1001703a 	wrctl	status,r2
  
  return context;
    b4c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b4cc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    b4d0:	000bff00 	call	bff0 <alt_tick>
    b4d4:	e0bffc17 	ldw	r2,-16(fp)
    b4d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b4dc:	e0bffe17 	ldw	r2,-8(fp)
    b4e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b4e4:	e037883a 	mov	sp,fp
    b4e8:	dfc00117 	ldw	ra,4(sp)
    b4ec:	df000017 	ldw	fp,0(sp)
    b4f0:	dec00204 	addi	sp,sp,8
    b4f4:	f800283a 	ret

0000b4f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b4f8:	defff804 	addi	sp,sp,-32
    b4fc:	dfc00715 	stw	ra,28(sp)
    b500:	df000615 	stw	fp,24(sp)
    b504:	df000604 	addi	fp,sp,24
    b508:	e13ffc15 	stw	r4,-16(fp)
    b50c:	e17ffd15 	stw	r5,-12(fp)
    b510:	e1bffe15 	stw	r6,-8(fp)
    b514:	e1ffff15 	stw	r7,-4(fp)
    b518:	e0bfff17 	ldw	r2,-4(fp)
    b51c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b520:	00800074 	movhi	r2,1
    b524:	10877f04 	addi	r2,r2,7676
    b528:	10800017 	ldw	r2,0(r2)
    b52c:	1000041e 	bne	r2,zero,b540 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    b530:	00800074 	movhi	r2,1
    b534:	10877f04 	addi	r2,r2,7676
    b538:	e0fffb17 	ldw	r3,-20(fp)
    b53c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b540:	e0bffc17 	ldw	r2,-16(fp)
    b544:	10800104 	addi	r2,r2,4
    b548:	00c001c4 	movi	r3,7
    b54c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b550:	d8000015 	stw	zero,0(sp)
    b554:	e13ffd17 	ldw	r4,-12(fp)
    b558:	e17ffe17 	ldw	r5,-8(fp)
    b55c:	01800074 	movhi	r6,1
    b560:	31ad2104 	addi	r6,r6,-19324
    b564:	e1fffc17 	ldw	r7,-16(fp)
    b568:	000b8a00 	call	b8a0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b56c:	e037883a 	mov	sp,fp
    b570:	dfc00117 	ldw	ra,4(sp)
    b574:	df000017 	ldw	fp,0(sp)
    b578:	dec00204 	addi	sp,sp,8
    b57c:	f800283a 	ret

0000b580 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b580:	defff504 	addi	sp,sp,-44
    b584:	df000a15 	stw	fp,40(sp)
    b588:	df000a04 	addi	fp,sp,40
    b58c:	e13ffc15 	stw	r4,-16(fp)
    b590:	e17ffd15 	stw	r5,-12(fp)
    b594:	e1bffe15 	stw	r6,-8(fp)
    b598:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b59c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b5a0:	00800074 	movhi	r2,1
    b5a4:	10877f04 	addi	r2,r2,7676
    b5a8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    b5ac:	10003f26 	beq	r2,zero,b6ac <alt_alarm_start+0x12c>
  {
    if (alarm)
    b5b0:	e0bffc17 	ldw	r2,-16(fp)
    b5b4:	10003b26 	beq	r2,zero,b6a4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    b5b8:	e0bffc17 	ldw	r2,-16(fp)
    b5bc:	e0fffe17 	ldw	r3,-8(fp)
    b5c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    b5c4:	e0bffc17 	ldw	r2,-16(fp)
    b5c8:	e0ffff17 	ldw	r3,-4(fp)
    b5cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b5d0:	0005303a 	rdctl	r2,status
    b5d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b5d8:	e0fff817 	ldw	r3,-32(fp)
    b5dc:	00bfff84 	movi	r2,-2
    b5e0:	1884703a 	and	r2,r3,r2
    b5e4:	1001703a 	wrctl	status,r2
  
  return context;
    b5e8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    b5ec:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b5f0:	00800074 	movhi	r2,1
    b5f4:	10878004 	addi	r2,r2,7680
    b5f8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    b5fc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b600:	e0fffd17 	ldw	r3,-12(fp)
    b604:	e0bff617 	ldw	r2,-40(fp)
    b608:	1885883a 	add	r2,r3,r2
    b60c:	10c00044 	addi	r3,r2,1
    b610:	e0bffc17 	ldw	r2,-16(fp)
    b614:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b618:	e0bffc17 	ldw	r2,-16(fp)
    b61c:	10c00217 	ldw	r3,8(r2)
    b620:	e0bff617 	ldw	r2,-40(fp)
    b624:	1880042e 	bgeu	r3,r2,b638 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    b628:	e0bffc17 	ldw	r2,-16(fp)
    b62c:	00c00044 	movi	r3,1
    b630:	10c00405 	stb	r3,16(r2)
    b634:	00000206 	br	b640 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    b638:	e0bffc17 	ldw	r2,-16(fp)
    b63c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b640:	e0bffc17 	ldw	r2,-16(fp)
    b644:	00c00074 	movhi	r3,1
    b648:	18c76d04 	addi	r3,r3,7604
    b64c:	e0fff915 	stw	r3,-28(fp)
    b650:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b654:	e0bffa17 	ldw	r2,-24(fp)
    b658:	e0fff917 	ldw	r3,-28(fp)
    b65c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b660:	e0bff917 	ldw	r2,-28(fp)
    b664:	10c00017 	ldw	r3,0(r2)
    b668:	e0bffa17 	ldw	r2,-24(fp)
    b66c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b670:	e0bff917 	ldw	r2,-28(fp)
    b674:	10800017 	ldw	r2,0(r2)
    b678:	e0fffa17 	ldw	r3,-24(fp)
    b67c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b680:	e0bff917 	ldw	r2,-28(fp)
    b684:	e0fffa17 	ldw	r3,-24(fp)
    b688:	10c00015 	stw	r3,0(r2)
    b68c:	e0bff717 	ldw	r2,-36(fp)
    b690:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b694:	e0bffb17 	ldw	r2,-20(fp)
    b698:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b69c:	0005883a 	mov	r2,zero
    b6a0:	00000306 	br	b6b0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    b6a4:	00bffa84 	movi	r2,-22
    b6a8:	00000106 	br	b6b0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    b6ac:	00bfde84 	movi	r2,-134
  }
}
    b6b0:	e037883a 	mov	sp,fp
    b6b4:	df000017 	ldw	fp,0(sp)
    b6b8:	dec00104 	addi	sp,sp,4
    b6bc:	f800283a 	ret

0000b6c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b6c0:	deffff04 	addi	sp,sp,-4
    b6c4:	df000015 	stw	fp,0(sp)
    b6c8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b6cc:	e037883a 	mov	sp,fp
    b6d0:	df000017 	ldw	fp,0(sp)
    b6d4:	dec00104 	addi	sp,sp,4
    b6d8:	f800283a 	ret

0000b6dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b6dc:	defffe04 	addi	sp,sp,-8
    b6e0:	dfc00115 	stw	ra,4(sp)
    b6e4:	df000015 	stw	fp,0(sp)
    b6e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b6ec:	00800074 	movhi	r2,1
    b6f0:	10876a04 	addi	r2,r2,7592
    b6f4:	10800017 	ldw	r2,0(r2)
    b6f8:	10000526 	beq	r2,zero,b710 <alt_get_errno+0x34>
    b6fc:	00800074 	movhi	r2,1
    b700:	10876a04 	addi	r2,r2,7592
    b704:	10800017 	ldw	r2,0(r2)
    b708:	103ee83a 	callr	r2
    b70c:	00000206 	br	b718 <alt_get_errno+0x3c>
    b710:	00800074 	movhi	r2,1
    b714:	10877a04 	addi	r2,r2,7656
}
    b718:	e037883a 	mov	sp,fp
    b71c:	dfc00117 	ldw	ra,4(sp)
    b720:	df000017 	ldw	fp,0(sp)
    b724:	dec00204 	addi	sp,sp,8
    b728:	f800283a 	ret

0000b72c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    b72c:	defffa04 	addi	sp,sp,-24
    b730:	dfc00515 	stw	ra,20(sp)
    b734:	df000415 	stw	fp,16(sp)
    b738:	df000404 	addi	fp,sp,16
    b73c:	e13ffe15 	stw	r4,-8(fp)
    b740:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    b744:	e0bffe17 	ldw	r2,-8(fp)
    b748:	10000326 	beq	r2,zero,b758 <alt_dev_llist_insert+0x2c>
    b74c:	e0bffe17 	ldw	r2,-8(fp)
    b750:	10800217 	ldw	r2,8(r2)
    b754:	1000051e 	bne	r2,zero,b76c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    b758:	000b6dc0 	call	b6dc <alt_get_errno>
    b75c:	00c00584 	movi	r3,22
    b760:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    b764:	00bffa84 	movi	r2,-22
    b768:	00001306 	br	b7b8 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    b76c:	e0bffe17 	ldw	r2,-8(fp)
    b770:	e0ffff17 	ldw	r3,-4(fp)
    b774:	e0fffc15 	stw	r3,-16(fp)
    b778:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b77c:	e0bffd17 	ldw	r2,-12(fp)
    b780:	e0fffc17 	ldw	r3,-16(fp)
    b784:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b788:	e0bffc17 	ldw	r2,-16(fp)
    b78c:	10c00017 	ldw	r3,0(r2)
    b790:	e0bffd17 	ldw	r2,-12(fp)
    b794:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b798:	e0bffc17 	ldw	r2,-16(fp)
    b79c:	10800017 	ldw	r2,0(r2)
    b7a0:	e0fffd17 	ldw	r3,-12(fp)
    b7a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b7a8:	e0bffc17 	ldw	r2,-16(fp)
    b7ac:	e0fffd17 	ldw	r3,-12(fp)
    b7b0:	10c00015 	stw	r3,0(r2)

  return 0;  
    b7b4:	0005883a 	mov	r2,zero
}
    b7b8:	e037883a 	mov	sp,fp
    b7bc:	dfc00117 	ldw	ra,4(sp)
    b7c0:	df000017 	ldw	fp,0(sp)
    b7c4:	dec00204 	addi	sp,sp,8
    b7c8:	f800283a 	ret

0000b7cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b7cc:	defffd04 	addi	sp,sp,-12
    b7d0:	dfc00215 	stw	ra,8(sp)
    b7d4:	df000115 	stw	fp,4(sp)
    b7d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b7dc:	00800074 	movhi	r2,1
    b7e0:	10b1d704 	addi	r2,r2,-14500
    b7e4:	e0bfff15 	stw	r2,-4(fp)
    b7e8:	00000606 	br	b804 <_do_ctors+0x38>
        (*ctor) (); 
    b7ec:	e0bfff17 	ldw	r2,-4(fp)
    b7f0:	10800017 	ldw	r2,0(r2)
    b7f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b7f8:	e0bfff17 	ldw	r2,-4(fp)
    b7fc:	10bfff04 	addi	r2,r2,-4
    b800:	e0bfff15 	stw	r2,-4(fp)
    b804:	e0ffff17 	ldw	r3,-4(fp)
    b808:	00800074 	movhi	r2,1
    b80c:	10b1d804 	addi	r2,r2,-14496
    b810:	18bff62e 	bgeu	r3,r2,b7ec <_do_ctors+0x20>
        (*ctor) (); 
}
    b814:	e037883a 	mov	sp,fp
    b818:	dfc00117 	ldw	ra,4(sp)
    b81c:	df000017 	ldw	fp,0(sp)
    b820:	dec00204 	addi	sp,sp,8
    b824:	f800283a 	ret

0000b828 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b828:	defffd04 	addi	sp,sp,-12
    b82c:	dfc00215 	stw	ra,8(sp)
    b830:	df000115 	stw	fp,4(sp)
    b834:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b838:	00800074 	movhi	r2,1
    b83c:	10b1d704 	addi	r2,r2,-14500
    b840:	e0bfff15 	stw	r2,-4(fp)
    b844:	00000606 	br	b860 <_do_dtors+0x38>
        (*dtor) (); 
    b848:	e0bfff17 	ldw	r2,-4(fp)
    b84c:	10800017 	ldw	r2,0(r2)
    b850:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b854:	e0bfff17 	ldw	r2,-4(fp)
    b858:	10bfff04 	addi	r2,r2,-4
    b85c:	e0bfff15 	stw	r2,-4(fp)
    b860:	e0ffff17 	ldw	r3,-4(fp)
    b864:	00800074 	movhi	r2,1
    b868:	10b1d804 	addi	r2,r2,-14496
    b86c:	18bff62e 	bgeu	r3,r2,b848 <_do_dtors+0x20>
        (*dtor) (); 
}
    b870:	e037883a 	mov	sp,fp
    b874:	dfc00117 	ldw	ra,4(sp)
    b878:	df000017 	ldw	fp,0(sp)
    b87c:	dec00204 	addi	sp,sp,8
    b880:	f800283a 	ret

0000b884 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b884:	deffff04 	addi	sp,sp,-4
    b888:	df000015 	stw	fp,0(sp)
    b88c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    b890:	e037883a 	mov	sp,fp
    b894:	df000017 	ldw	fp,0(sp)
    b898:	dec00104 	addi	sp,sp,4
    b89c:	f800283a 	ret

0000b8a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b8a0:	defff904 	addi	sp,sp,-28
    b8a4:	dfc00615 	stw	ra,24(sp)
    b8a8:	df000515 	stw	fp,20(sp)
    b8ac:	df000504 	addi	fp,sp,20
    b8b0:	e13ffc15 	stw	r4,-16(fp)
    b8b4:	e17ffd15 	stw	r5,-12(fp)
    b8b8:	e1bffe15 	stw	r6,-8(fp)
    b8bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b8c0:	e0800217 	ldw	r2,8(fp)
    b8c4:	d8800015 	stw	r2,0(sp)
    b8c8:	e13ffc17 	ldw	r4,-16(fp)
    b8cc:	e17ffd17 	ldw	r5,-12(fp)
    b8d0:	e1bffe17 	ldw	r6,-8(fp)
    b8d4:	e1ffff17 	ldw	r7,-4(fp)
    b8d8:	000ba780 	call	ba78 <alt_iic_isr_register>
}  
    b8dc:	e037883a 	mov	sp,fp
    b8e0:	dfc00117 	ldw	ra,4(sp)
    b8e4:	df000017 	ldw	fp,0(sp)
    b8e8:	dec00204 	addi	sp,sp,8
    b8ec:	f800283a 	ret

0000b8f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    b8f0:	defff904 	addi	sp,sp,-28
    b8f4:	df000615 	stw	fp,24(sp)
    b8f8:	df000604 	addi	fp,sp,24
    b8fc:	e13ffe15 	stw	r4,-8(fp)
    b900:	e17fff15 	stw	r5,-4(fp)
    b904:	e0bfff17 	ldw	r2,-4(fp)
    b908:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b90c:	0005303a 	rdctl	r2,status
    b910:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b914:	e0fffb17 	ldw	r3,-20(fp)
    b918:	00bfff84 	movi	r2,-2
    b91c:	1884703a 	and	r2,r3,r2
    b920:	1001703a 	wrctl	status,r2
  
  return context;
    b924:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b928:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    b92c:	e0bffa17 	ldw	r2,-24(fp)
    b930:	00c00044 	movi	r3,1
    b934:	1884983a 	sll	r2,r3,r2
    b938:	1007883a 	mov	r3,r2
    b93c:	00800074 	movhi	r2,1
    b940:	10877e04 	addi	r2,r2,7672
    b944:	10800017 	ldw	r2,0(r2)
    b948:	1886b03a 	or	r3,r3,r2
    b94c:	00800074 	movhi	r2,1
    b950:	10877e04 	addi	r2,r2,7672
    b954:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b958:	00800074 	movhi	r2,1
    b95c:	10877e04 	addi	r2,r2,7672
    b960:	10800017 	ldw	r2,0(r2)
    b964:	100170fa 	wrctl	ienable,r2
    b968:	e0bffc17 	ldw	r2,-16(fp)
    b96c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b970:	e0bffd17 	ldw	r2,-12(fp)
    b974:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b978:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    b97c:	e037883a 	mov	sp,fp
    b980:	df000017 	ldw	fp,0(sp)
    b984:	dec00104 	addi	sp,sp,4
    b988:	f800283a 	ret

0000b98c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    b98c:	defff904 	addi	sp,sp,-28
    b990:	df000615 	stw	fp,24(sp)
    b994:	df000604 	addi	fp,sp,24
    b998:	e13ffe15 	stw	r4,-8(fp)
    b99c:	e17fff15 	stw	r5,-4(fp)
    b9a0:	e0bfff17 	ldw	r2,-4(fp)
    b9a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b9a8:	0005303a 	rdctl	r2,status
    b9ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b9b0:	e0fffb17 	ldw	r3,-20(fp)
    b9b4:	00bfff84 	movi	r2,-2
    b9b8:	1884703a 	and	r2,r3,r2
    b9bc:	1001703a 	wrctl	status,r2
  
  return context;
    b9c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b9c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    b9c8:	e0bffa17 	ldw	r2,-24(fp)
    b9cc:	00c00044 	movi	r3,1
    b9d0:	1884983a 	sll	r2,r3,r2
    b9d4:	0084303a 	nor	r2,zero,r2
    b9d8:	1007883a 	mov	r3,r2
    b9dc:	00800074 	movhi	r2,1
    b9e0:	10877e04 	addi	r2,r2,7672
    b9e4:	10800017 	ldw	r2,0(r2)
    b9e8:	1886703a 	and	r3,r3,r2
    b9ec:	00800074 	movhi	r2,1
    b9f0:	10877e04 	addi	r2,r2,7672
    b9f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b9f8:	00800074 	movhi	r2,1
    b9fc:	10877e04 	addi	r2,r2,7672
    ba00:	10800017 	ldw	r2,0(r2)
    ba04:	100170fa 	wrctl	ienable,r2
    ba08:	e0bffc17 	ldw	r2,-16(fp)
    ba0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba10:	e0bffd17 	ldw	r2,-12(fp)
    ba14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ba18:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    ba1c:	e037883a 	mov	sp,fp
    ba20:	df000017 	ldw	fp,0(sp)
    ba24:	dec00104 	addi	sp,sp,4
    ba28:	f800283a 	ret

0000ba2c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    ba2c:	defffc04 	addi	sp,sp,-16
    ba30:	df000315 	stw	fp,12(sp)
    ba34:	df000304 	addi	fp,sp,12
    ba38:	e13ffe15 	stw	r4,-8(fp)
    ba3c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    ba40:	000530fa 	rdctl	r2,ienable
    ba44:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    ba48:	e0bfff17 	ldw	r2,-4(fp)
    ba4c:	00c00044 	movi	r3,1
    ba50:	1884983a 	sll	r2,r3,r2
    ba54:	1007883a 	mov	r3,r2
    ba58:	e0bffd17 	ldw	r2,-12(fp)
    ba5c:	1884703a 	and	r2,r3,r2
    ba60:	1004c03a 	cmpne	r2,r2,zero
    ba64:	10803fcc 	andi	r2,r2,255
}
    ba68:	e037883a 	mov	sp,fp
    ba6c:	df000017 	ldw	fp,0(sp)
    ba70:	dec00104 	addi	sp,sp,4
    ba74:	f800283a 	ret

0000ba78 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ba78:	defff504 	addi	sp,sp,-44
    ba7c:	dfc00a15 	stw	ra,40(sp)
    ba80:	df000915 	stw	fp,36(sp)
    ba84:	df000904 	addi	fp,sp,36
    ba88:	e13ffc15 	stw	r4,-16(fp)
    ba8c:	e17ffd15 	stw	r5,-12(fp)
    ba90:	e1bffe15 	stw	r6,-8(fp)
    ba94:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    ba98:	00bffa84 	movi	r2,-22
    ba9c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    baa0:	e0bffd17 	ldw	r2,-12(fp)
    baa4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    baa8:	e0bff817 	ldw	r2,-32(fp)
    baac:	10800808 	cmpgei	r2,r2,32
    bab0:	1000271e 	bne	r2,zero,bb50 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bab4:	0005303a 	rdctl	r2,status
    bab8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    babc:	e0fffa17 	ldw	r3,-24(fp)
    bac0:	00bfff84 	movi	r2,-2
    bac4:	1884703a 	and	r2,r3,r2
    bac8:	1001703a 	wrctl	status,r2
  
  return context;
    bacc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    bad0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    bad4:	00c00074 	movhi	r3,1
    bad8:	18c78b04 	addi	r3,r3,7724
    badc:	e0bff817 	ldw	r2,-32(fp)
    bae0:	100490fa 	slli	r2,r2,3
    bae4:	1885883a 	add	r2,r3,r2
    bae8:	e0fffe17 	ldw	r3,-8(fp)
    baec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    baf0:	00c00074 	movhi	r3,1
    baf4:	18c78b04 	addi	r3,r3,7724
    baf8:	e0bff817 	ldw	r2,-32(fp)
    bafc:	100490fa 	slli	r2,r2,3
    bb00:	1885883a 	add	r2,r3,r2
    bb04:	10800104 	addi	r2,r2,4
    bb08:	e0ffff17 	ldw	r3,-4(fp)
    bb0c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    bb10:	e0bffe17 	ldw	r2,-8(fp)
    bb14:	10000526 	beq	r2,zero,bb2c <alt_iic_isr_register+0xb4>
    bb18:	e0bff817 	ldw	r2,-32(fp)
    bb1c:	e13ffc17 	ldw	r4,-16(fp)
    bb20:	100b883a 	mov	r5,r2
    bb24:	000b8f00 	call	b8f0 <alt_ic_irq_enable>
    bb28:	00000406 	br	bb3c <alt_iic_isr_register+0xc4>
    bb2c:	e0bff817 	ldw	r2,-32(fp)
    bb30:	e13ffc17 	ldw	r4,-16(fp)
    bb34:	100b883a 	mov	r5,r2
    bb38:	000b98c0 	call	b98c <alt_ic_irq_disable>
    bb3c:	e0bff715 	stw	r2,-36(fp)
    bb40:	e0bff917 	ldw	r2,-28(fp)
    bb44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb48:	e0bffb17 	ldw	r2,-20(fp)
    bb4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    bb50:	e0bff717 	ldw	r2,-36(fp)
}
    bb54:	e037883a 	mov	sp,fp
    bb58:	dfc00117 	ldw	ra,4(sp)
    bb5c:	df000017 	ldw	fp,0(sp)
    bb60:	dec00204 	addi	sp,sp,8
    bb64:	f800283a 	ret

0000bb68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bb68:	defff804 	addi	sp,sp,-32
    bb6c:	dfc00715 	stw	ra,28(sp)
    bb70:	df000615 	stw	fp,24(sp)
    bb74:	dc000515 	stw	r16,20(sp)
    bb78:	df000504 	addi	fp,sp,20
    bb7c:	e13ffc15 	stw	r4,-16(fp)
    bb80:	e17ffd15 	stw	r5,-12(fp)
    bb84:	e1bffe15 	stw	r6,-8(fp)
    bb88:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    bb8c:	e13ffd17 	ldw	r4,-12(fp)
    bb90:	e17ffe17 	ldw	r5,-8(fp)
    bb94:	e1bfff17 	ldw	r6,-4(fp)
    bb98:	000be000 	call	be00 <open>
    bb9c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    bba0:	e0bffb17 	ldw	r2,-20(fp)
    bba4:	10002216 	blt	r2,zero,bc30 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    bba8:	04000074 	movhi	r16,1
    bbac:	8402e804 	addi	r16,r16,2976
    bbb0:	e0bffb17 	ldw	r2,-20(fp)
    bbb4:	1009883a 	mov	r4,r2
    bbb8:	01400304 	movi	r5,12
    bbbc:	00094480 	call	9448 <__mulsi3>
    bbc0:	8085883a 	add	r2,r16,r2
    bbc4:	10c00017 	ldw	r3,0(r2)
    bbc8:	e0bffc17 	ldw	r2,-16(fp)
    bbcc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bbd0:	04000074 	movhi	r16,1
    bbd4:	8402e804 	addi	r16,r16,2976
    bbd8:	e0bffb17 	ldw	r2,-20(fp)
    bbdc:	1009883a 	mov	r4,r2
    bbe0:	01400304 	movi	r5,12
    bbe4:	00094480 	call	9448 <__mulsi3>
    bbe8:	8085883a 	add	r2,r16,r2
    bbec:	10800104 	addi	r2,r2,4
    bbf0:	10c00017 	ldw	r3,0(r2)
    bbf4:	e0bffc17 	ldw	r2,-16(fp)
    bbf8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    bbfc:	04000074 	movhi	r16,1
    bc00:	8402e804 	addi	r16,r16,2976
    bc04:	e0bffb17 	ldw	r2,-20(fp)
    bc08:	1009883a 	mov	r4,r2
    bc0c:	01400304 	movi	r5,12
    bc10:	00094480 	call	9448 <__mulsi3>
    bc14:	8085883a 	add	r2,r16,r2
    bc18:	10800204 	addi	r2,r2,8
    bc1c:	10c00017 	ldw	r3,0(r2)
    bc20:	e0bffc17 	ldw	r2,-16(fp)
    bc24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bc28:	e13ffb17 	ldw	r4,-20(fp)
    bc2c:	000a1f40 	call	a1f4 <alt_release_fd>
  }
} 
    bc30:	e037883a 	mov	sp,fp
    bc34:	dfc00217 	ldw	ra,8(sp)
    bc38:	df000117 	ldw	fp,4(sp)
    bc3c:	dc000017 	ldw	r16,0(sp)
    bc40:	dec00304 	addi	sp,sp,12
    bc44:	f800283a 	ret

0000bc48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bc48:	defffb04 	addi	sp,sp,-20
    bc4c:	dfc00415 	stw	ra,16(sp)
    bc50:	df000315 	stw	fp,12(sp)
    bc54:	df000304 	addi	fp,sp,12
    bc58:	e13ffd15 	stw	r4,-12(fp)
    bc5c:	e17ffe15 	stw	r5,-8(fp)
    bc60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bc64:	01000074 	movhi	r4,1
    bc68:	2102eb04 	addi	r4,r4,2988
    bc6c:	e17ffd17 	ldw	r5,-12(fp)
    bc70:	01800044 	movi	r6,1
    bc74:	01c07fc4 	movi	r7,511
    bc78:	000bb680 	call	bb68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bc7c:	01000074 	movhi	r4,1
    bc80:	2102e804 	addi	r4,r4,2976
    bc84:	e17ffe17 	ldw	r5,-8(fp)
    bc88:	000d883a 	mov	r6,zero
    bc8c:	01c07fc4 	movi	r7,511
    bc90:	000bb680 	call	bb68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bc94:	01000074 	movhi	r4,1
    bc98:	2102ee04 	addi	r4,r4,3000
    bc9c:	e17fff17 	ldw	r5,-4(fp)
    bca0:	01800044 	movi	r6,1
    bca4:	01c07fc4 	movi	r7,511
    bca8:	000bb680 	call	bb68 <alt_open_fd>
}  
    bcac:	e037883a 	mov	sp,fp
    bcb0:	dfc00117 	ldw	ra,4(sp)
    bcb4:	df000017 	ldw	fp,0(sp)
    bcb8:	dec00204 	addi	sp,sp,8
    bcbc:	f800283a 	ret

0000bcc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bcc0:	defffe04 	addi	sp,sp,-8
    bcc4:	dfc00115 	stw	ra,4(sp)
    bcc8:	df000015 	stw	fp,0(sp)
    bccc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bcd0:	00800074 	movhi	r2,1
    bcd4:	10876a04 	addi	r2,r2,7592
    bcd8:	10800017 	ldw	r2,0(r2)
    bcdc:	10000526 	beq	r2,zero,bcf4 <alt_get_errno+0x34>
    bce0:	00800074 	movhi	r2,1
    bce4:	10876a04 	addi	r2,r2,7592
    bce8:	10800017 	ldw	r2,0(r2)
    bcec:	103ee83a 	callr	r2
    bcf0:	00000206 	br	bcfc <alt_get_errno+0x3c>
    bcf4:	00800074 	movhi	r2,1
    bcf8:	10877a04 	addi	r2,r2,7656
}
    bcfc:	e037883a 	mov	sp,fp
    bd00:	dfc00117 	ldw	ra,4(sp)
    bd04:	df000017 	ldw	fp,0(sp)
    bd08:	dec00204 	addi	sp,sp,8
    bd0c:	f800283a 	ret

0000bd10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bd10:	defffb04 	addi	sp,sp,-20
    bd14:	dfc00415 	stw	ra,16(sp)
    bd18:	df000315 	stw	fp,12(sp)
    bd1c:	dc000215 	stw	r16,8(sp)
    bd20:	df000204 	addi	fp,sp,8
    bd24:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bd28:	e0bfff17 	ldw	r2,-4(fp)
    bd2c:	10800217 	ldw	r2,8(r2)
    bd30:	10d00034 	orhi	r3,r2,16384
    bd34:	e0bfff17 	ldw	r2,-4(fp)
    bd38:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bd3c:	e03ffe15 	stw	zero,-8(fp)
    bd40:	00002206 	br	bdcc <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bd44:	04000074 	movhi	r16,1
    bd48:	8402e804 	addi	r16,r16,2976
    bd4c:	e0bffe17 	ldw	r2,-8(fp)
    bd50:	1009883a 	mov	r4,r2
    bd54:	01400304 	movi	r5,12
    bd58:	00094480 	call	9448 <__mulsi3>
    bd5c:	8085883a 	add	r2,r16,r2
    bd60:	10c00017 	ldw	r3,0(r2)
    bd64:	e0bfff17 	ldw	r2,-4(fp)
    bd68:	10800017 	ldw	r2,0(r2)
    bd6c:	1880141e 	bne	r3,r2,bdc0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bd70:	04000074 	movhi	r16,1
    bd74:	8402e804 	addi	r16,r16,2976
    bd78:	e0bffe17 	ldw	r2,-8(fp)
    bd7c:	1009883a 	mov	r4,r2
    bd80:	01400304 	movi	r5,12
    bd84:	00094480 	call	9448 <__mulsi3>
    bd88:	8085883a 	add	r2,r16,r2
    bd8c:	10800204 	addi	r2,r2,8
    bd90:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bd94:	10000a0e 	bge	r2,zero,bdc0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    bd98:	e13ffe17 	ldw	r4,-8(fp)
    bd9c:	01400304 	movi	r5,12
    bda0:	00094480 	call	9448 <__mulsi3>
    bda4:	00c00074 	movhi	r3,1
    bda8:	18c2e804 	addi	r3,r3,2976
    bdac:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bdb0:	e0bfff17 	ldw	r2,-4(fp)
    bdb4:	18800226 	beq	r3,r2,bdc0 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bdb8:	00bffcc4 	movi	r2,-13
    bdbc:	00000a06 	br	bde8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bdc0:	e0bffe17 	ldw	r2,-8(fp)
    bdc4:	10800044 	addi	r2,r2,1
    bdc8:	e0bffe15 	stw	r2,-8(fp)
    bdcc:	00800074 	movhi	r2,1
    bdd0:	10876904 	addi	r2,r2,7588
    bdd4:	10800017 	ldw	r2,0(r2)
    bdd8:	1007883a 	mov	r3,r2
    bddc:	e0bffe17 	ldw	r2,-8(fp)
    bde0:	18bfd82e 	bgeu	r3,r2,bd44 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    bde4:	0005883a 	mov	r2,zero
}
    bde8:	e037883a 	mov	sp,fp
    bdec:	dfc00217 	ldw	ra,8(sp)
    bdf0:	df000117 	ldw	fp,4(sp)
    bdf4:	dc000017 	ldw	r16,0(sp)
    bdf8:	dec00304 	addi	sp,sp,12
    bdfc:	f800283a 	ret

0000be00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    be00:	defff604 	addi	sp,sp,-40
    be04:	dfc00915 	stw	ra,36(sp)
    be08:	df000815 	stw	fp,32(sp)
    be0c:	df000804 	addi	fp,sp,32
    be10:	e13ffd15 	stw	r4,-12(fp)
    be14:	e17ffe15 	stw	r5,-8(fp)
    be18:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    be1c:	00bfffc4 	movi	r2,-1
    be20:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    be24:	00bffb44 	movi	r2,-19
    be28:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    be2c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    be30:	e13ffd17 	ldw	r4,-12(fp)
    be34:	01400074 	movhi	r5,1
    be38:	29476704 	addi	r5,r5,7580
    be3c:	000c1140 	call	c114 <alt_find_dev>
    be40:	e0bff815 	stw	r2,-32(fp)
    be44:	e0bff817 	ldw	r2,-32(fp)
    be48:	1000051e 	bne	r2,zero,be60 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    be4c:	e13ffd17 	ldw	r4,-12(fp)
    be50:	000c1a40 	call	c1a4 <alt_find_file>
    be54:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    be58:	00800044 	movi	r2,1
    be5c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    be60:	e0bff817 	ldw	r2,-32(fp)
    be64:	10002a26 	beq	r2,zero,bf10 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    be68:	e13ff817 	ldw	r4,-32(fp)
    be6c:	000c2b80 	call	c2b8 <alt_get_fd>
    be70:	e0bff915 	stw	r2,-28(fp)
    be74:	e0bff917 	ldw	r2,-28(fp)
    be78:	1000030e 	bge	r2,zero,be88 <open+0x88>
    {
      status = index;
    be7c:	e0bff917 	ldw	r2,-28(fp)
    be80:	e0bffa15 	stw	r2,-24(fp)
    be84:	00002406 	br	bf18 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    be88:	e13ff917 	ldw	r4,-28(fp)
    be8c:	01400304 	movi	r5,12
    be90:	00094480 	call	9448 <__mulsi3>
    be94:	00c00074 	movhi	r3,1
    be98:	18c2e804 	addi	r3,r3,2976
    be9c:	10c5883a 	add	r2,r2,r3
    bea0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    bea4:	e0fffe17 	ldw	r3,-8(fp)
    bea8:	00900034 	movhi	r2,16384
    beac:	10bfffc4 	addi	r2,r2,-1
    beb0:	1886703a 	and	r3,r3,r2
    beb4:	e0bffc17 	ldw	r2,-16(fp)
    beb8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    bebc:	e0bffb17 	ldw	r2,-20(fp)
    bec0:	1000051e 	bne	r2,zero,bed8 <open+0xd8>
    bec4:	e13ffc17 	ldw	r4,-16(fp)
    bec8:	000bd100 	call	bd10 <alt_file_locked>
    becc:	e0bffa15 	stw	r2,-24(fp)
    bed0:	e0bffa17 	ldw	r2,-24(fp)
    bed4:	10001016 	blt	r2,zero,bf18 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    bed8:	e0bff817 	ldw	r2,-32(fp)
    bedc:	10800317 	ldw	r2,12(r2)
    bee0:	10000826 	beq	r2,zero,bf04 <open+0x104>
    bee4:	e0bff817 	ldw	r2,-32(fp)
    bee8:	10800317 	ldw	r2,12(r2)
    beec:	e13ffc17 	ldw	r4,-16(fp)
    bef0:	e17ffd17 	ldw	r5,-12(fp)
    bef4:	e1bffe17 	ldw	r6,-8(fp)
    bef8:	e1ffff17 	ldw	r7,-4(fp)
    befc:	103ee83a 	callr	r2
    bf00:	00000106 	br	bf08 <open+0x108>
    bf04:	0005883a 	mov	r2,zero
    bf08:	e0bffa15 	stw	r2,-24(fp)
    bf0c:	00000206 	br	bf18 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    bf10:	00bffb44 	movi	r2,-19
    bf14:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    bf18:	e0bffa17 	ldw	r2,-24(fp)
    bf1c:	1000080e 	bge	r2,zero,bf40 <open+0x140>
  {
    alt_release_fd (index);  
    bf20:	e13ff917 	ldw	r4,-28(fp)
    bf24:	000a1f40 	call	a1f4 <alt_release_fd>
    ALT_ERRNO = -status;
    bf28:	000bcc00 	call	bcc0 <alt_get_errno>
    bf2c:	e0fffa17 	ldw	r3,-24(fp)
    bf30:	00c7c83a 	sub	r3,zero,r3
    bf34:	10c00015 	stw	r3,0(r2)
    return -1;
    bf38:	00bfffc4 	movi	r2,-1
    bf3c:	00000106 	br	bf44 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    bf40:	e0bff917 	ldw	r2,-28(fp)
}
    bf44:	e037883a 	mov	sp,fp
    bf48:	dfc00117 	ldw	ra,4(sp)
    bf4c:	df000017 	ldw	fp,0(sp)
    bf50:	dec00204 	addi	sp,sp,8
    bf54:	f800283a 	ret

0000bf58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    bf58:	defffa04 	addi	sp,sp,-24
    bf5c:	df000515 	stw	fp,20(sp)
    bf60:	df000504 	addi	fp,sp,20
    bf64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf68:	0005303a 	rdctl	r2,status
    bf6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf70:	e0fffc17 	ldw	r3,-16(fp)
    bf74:	00bfff84 	movi	r2,-2
    bf78:	1884703a 	and	r2,r3,r2
    bf7c:	1001703a 	wrctl	status,r2
  
  return context;
    bf80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    bf84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    bf88:	e0bfff17 	ldw	r2,-4(fp)
    bf8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    bf90:	e0bffd17 	ldw	r2,-12(fp)
    bf94:	10800017 	ldw	r2,0(r2)
    bf98:	e0fffd17 	ldw	r3,-12(fp)
    bf9c:	18c00117 	ldw	r3,4(r3)
    bfa0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    bfa4:	e0bffd17 	ldw	r2,-12(fp)
    bfa8:	10800117 	ldw	r2,4(r2)
    bfac:	e0fffd17 	ldw	r3,-12(fp)
    bfb0:	18c00017 	ldw	r3,0(r3)
    bfb4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    bfb8:	e0bffd17 	ldw	r2,-12(fp)
    bfbc:	e0fffd17 	ldw	r3,-12(fp)
    bfc0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    bfc4:	e0bffd17 	ldw	r2,-12(fp)
    bfc8:	e0fffd17 	ldw	r3,-12(fp)
    bfcc:	10c00015 	stw	r3,0(r2)
    bfd0:	e0bffb17 	ldw	r2,-20(fp)
    bfd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bfd8:	e0bffe17 	ldw	r2,-8(fp)
    bfdc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bfe0:	e037883a 	mov	sp,fp
    bfe4:	df000017 	ldw	fp,0(sp)
    bfe8:	dec00104 	addi	sp,sp,4
    bfec:	f800283a 	ret

0000bff0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    bff0:	defffb04 	addi	sp,sp,-20
    bff4:	dfc00415 	stw	ra,16(sp)
    bff8:	df000315 	stw	fp,12(sp)
    bffc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c000:	d0a00d17 	ldw	r2,-32716(gp)
    c004:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c008:	d0a02017 	ldw	r2,-32640(gp)
    c00c:	10800044 	addi	r2,r2,1
    c010:	d0a02015 	stw	r2,-32640(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c014:	00002e06 	br	c0d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    c018:	e0bffd17 	ldw	r2,-12(fp)
    c01c:	10800017 	ldw	r2,0(r2)
    c020:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c024:	e0bffd17 	ldw	r2,-12(fp)
    c028:	10800403 	ldbu	r2,16(r2)
    c02c:	10803fcc 	andi	r2,r2,255
    c030:	10000426 	beq	r2,zero,c044 <alt_tick+0x54>
    c034:	d0a02017 	ldw	r2,-32640(gp)
    c038:	1000021e 	bne	r2,zero,c044 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    c03c:	e0bffd17 	ldw	r2,-12(fp)
    c040:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c044:	e0bffd17 	ldw	r2,-12(fp)
    c048:	10800217 	ldw	r2,8(r2)
    c04c:	d0e02017 	ldw	r3,-32640(gp)
    c050:	18801d36 	bltu	r3,r2,c0c8 <alt_tick+0xd8>
    c054:	e0bffd17 	ldw	r2,-12(fp)
    c058:	10800403 	ldbu	r2,16(r2)
    c05c:	10803fcc 	andi	r2,r2,255
    c060:	1000191e 	bne	r2,zero,c0c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    c064:	e0bffd17 	ldw	r2,-12(fp)
    c068:	10c00317 	ldw	r3,12(r2)
    c06c:	e0bffd17 	ldw	r2,-12(fp)
    c070:	10800517 	ldw	r2,20(r2)
    c074:	1009883a 	mov	r4,r2
    c078:	183ee83a 	callr	r3
    c07c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c080:	e0bfff17 	ldw	r2,-4(fp)
    c084:	1000031e 	bne	r2,zero,c094 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    c088:	e13ffd17 	ldw	r4,-12(fp)
    c08c:	000bf580 	call	bf58 <alt_alarm_stop>
    c090:	00000d06 	br	c0c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    c094:	e0bffd17 	ldw	r2,-12(fp)
    c098:	10c00217 	ldw	r3,8(r2)
    c09c:	e0bfff17 	ldw	r2,-4(fp)
    c0a0:	1887883a 	add	r3,r3,r2
    c0a4:	e0bffd17 	ldw	r2,-12(fp)
    c0a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c0ac:	e0bffd17 	ldw	r2,-12(fp)
    c0b0:	10c00217 	ldw	r3,8(r2)
    c0b4:	d0a02017 	ldw	r2,-32640(gp)
    c0b8:	1880032e 	bgeu	r3,r2,c0c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c0bc:	e0bffd17 	ldw	r2,-12(fp)
    c0c0:	00c00044 	movi	r3,1
    c0c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c0c8:	e0bffe17 	ldw	r2,-8(fp)
    c0cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c0d0:	e0fffd17 	ldw	r3,-12(fp)
    c0d4:	d0a00d04 	addi	r2,gp,-32716
    c0d8:	18bfcf1e 	bne	r3,r2,c018 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c0dc:	0001883a 	nop
}
    c0e0:	e037883a 	mov	sp,fp
    c0e4:	dfc00117 	ldw	ra,4(sp)
    c0e8:	df000017 	ldw	fp,0(sp)
    c0ec:	dec00204 	addi	sp,sp,8
    c0f0:	f800283a 	ret

0000c0f4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c0f4:	deffff04 	addi	sp,sp,-4
    c0f8:	df000015 	stw	fp,0(sp)
    c0fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c100:	000170fa 	wrctl	ienable,zero
}
    c104:	e037883a 	mov	sp,fp
    c108:	df000017 	ldw	fp,0(sp)
    c10c:	dec00104 	addi	sp,sp,4
    c110:	f800283a 	ret

0000c114 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c114:	defffa04 	addi	sp,sp,-24
    c118:	dfc00515 	stw	ra,20(sp)
    c11c:	df000415 	stw	fp,16(sp)
    c120:	df000404 	addi	fp,sp,16
    c124:	e13ffe15 	stw	r4,-8(fp)
    c128:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c12c:	e0bfff17 	ldw	r2,-4(fp)
    c130:	10800017 	ldw	r2,0(r2)
    c134:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c138:	e13ffe17 	ldw	r4,-8(fp)
    c13c:	00004b00 	call	4b0 <strlen>
    c140:	10800044 	addi	r2,r2,1
    c144:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c148:	00000d06 	br	c180 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c14c:	e0bffc17 	ldw	r2,-16(fp)
    c150:	10c00217 	ldw	r3,8(r2)
    c154:	e0bffd17 	ldw	r2,-12(fp)
    c158:	1809883a 	mov	r4,r3
    c15c:	e17ffe17 	ldw	r5,-8(fp)
    c160:	100d883a 	mov	r6,r2
    c164:	000c3d80 	call	c3d8 <memcmp>
    c168:	1000021e 	bne	r2,zero,c174 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c16c:	e0bffc17 	ldw	r2,-16(fp)
    c170:	00000706 	br	c190 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c174:	e0bffc17 	ldw	r2,-16(fp)
    c178:	10800017 	ldw	r2,0(r2)
    c17c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c180:	e0fffc17 	ldw	r3,-16(fp)
    c184:	e0bfff17 	ldw	r2,-4(fp)
    c188:	18bff01e 	bne	r3,r2,c14c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c18c:	0005883a 	mov	r2,zero
}
    c190:	e037883a 	mov	sp,fp
    c194:	dfc00117 	ldw	ra,4(sp)
    c198:	df000017 	ldw	fp,0(sp)
    c19c:	dec00204 	addi	sp,sp,8
    c1a0:	f800283a 	ret

0000c1a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c1a4:	defffb04 	addi	sp,sp,-20
    c1a8:	dfc00415 	stw	ra,16(sp)
    c1ac:	df000315 	stw	fp,12(sp)
    c1b0:	df000304 	addi	fp,sp,12
    c1b4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c1b8:	00800074 	movhi	r2,1
    c1bc:	10876504 	addi	r2,r2,7572
    c1c0:	10800017 	ldw	r2,0(r2)
    c1c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c1c8:	00003106 	br	c290 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    c1cc:	e0bffd17 	ldw	r2,-12(fp)
    c1d0:	10800217 	ldw	r2,8(r2)
    c1d4:	1009883a 	mov	r4,r2
    c1d8:	00004b00 	call	4b0 <strlen>
    c1dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c1e0:	e0bffd17 	ldw	r2,-12(fp)
    c1e4:	10c00217 	ldw	r3,8(r2)
    c1e8:	e0bffe17 	ldw	r2,-8(fp)
    c1ec:	10bfffc4 	addi	r2,r2,-1
    c1f0:	1885883a 	add	r2,r3,r2
    c1f4:	10800003 	ldbu	r2,0(r2)
    c1f8:	10803fcc 	andi	r2,r2,255
    c1fc:	1080201c 	xori	r2,r2,128
    c200:	10bfe004 	addi	r2,r2,-128
    c204:	10800bd8 	cmpnei	r2,r2,47
    c208:	1000031e 	bne	r2,zero,c218 <alt_find_file+0x74>
    {
      len -= 1;
    c20c:	e0bffe17 	ldw	r2,-8(fp)
    c210:	10bfffc4 	addi	r2,r2,-1
    c214:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c218:	e0bffe17 	ldw	r2,-8(fp)
    c21c:	e0ffff17 	ldw	r3,-4(fp)
    c220:	1885883a 	add	r2,r3,r2
    c224:	10800003 	ldbu	r2,0(r2)
    c228:	10803fcc 	andi	r2,r2,255
    c22c:	1080201c 	xori	r2,r2,128
    c230:	10bfe004 	addi	r2,r2,-128
    c234:	10800be0 	cmpeqi	r2,r2,47
    c238:	1000081e 	bne	r2,zero,c25c <alt_find_file+0xb8>
    c23c:	e0bffe17 	ldw	r2,-8(fp)
    c240:	e0ffff17 	ldw	r3,-4(fp)
    c244:	1885883a 	add	r2,r3,r2
    c248:	10800003 	ldbu	r2,0(r2)
    c24c:	10803fcc 	andi	r2,r2,255
    c250:	1080201c 	xori	r2,r2,128
    c254:	10bfe004 	addi	r2,r2,-128
    c258:	10000a1e 	bne	r2,zero,c284 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    c25c:	e0bffd17 	ldw	r2,-12(fp)
    c260:	10c00217 	ldw	r3,8(r2)
    c264:	e0bffe17 	ldw	r2,-8(fp)
    c268:	1809883a 	mov	r4,r3
    c26c:	e17fff17 	ldw	r5,-4(fp)
    c270:	100d883a 	mov	r6,r2
    c274:	000c3d80 	call	c3d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c278:	1000021e 	bne	r2,zero,c284 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c27c:	e0bffd17 	ldw	r2,-12(fp)
    c280:	00000806 	br	c2a4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    c284:	e0bffd17 	ldw	r2,-12(fp)
    c288:	10800017 	ldw	r2,0(r2)
    c28c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c290:	e0fffd17 	ldw	r3,-12(fp)
    c294:	00800074 	movhi	r2,1
    c298:	10876504 	addi	r2,r2,7572
    c29c:	18bfcb1e 	bne	r3,r2,c1cc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c2a0:	0005883a 	mov	r2,zero
}
    c2a4:	e037883a 	mov	sp,fp
    c2a8:	dfc00117 	ldw	ra,4(sp)
    c2ac:	df000017 	ldw	fp,0(sp)
    c2b0:	dec00204 	addi	sp,sp,8
    c2b4:	f800283a 	ret

0000c2b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c2b8:	defffa04 	addi	sp,sp,-24
    c2bc:	dfc00515 	stw	ra,20(sp)
    c2c0:	df000415 	stw	fp,16(sp)
    c2c4:	dc000315 	stw	r16,12(sp)
    c2c8:	df000304 	addi	fp,sp,12
    c2cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c2d0:	00bffa04 	movi	r2,-24
    c2d4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c2d8:	e03ffd15 	stw	zero,-12(fp)
    c2dc:	00002106 	br	c364 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    c2e0:	04000074 	movhi	r16,1
    c2e4:	8402e804 	addi	r16,r16,2976
    c2e8:	e0bffd17 	ldw	r2,-12(fp)
    c2ec:	1009883a 	mov	r4,r2
    c2f0:	01400304 	movi	r5,12
    c2f4:	00094480 	call	9448 <__mulsi3>
    c2f8:	8085883a 	add	r2,r16,r2
    c2fc:	10800017 	ldw	r2,0(r2)
    c300:	1000151e 	bne	r2,zero,c358 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    c304:	04000074 	movhi	r16,1
    c308:	8402e804 	addi	r16,r16,2976
    c30c:	e0bffd17 	ldw	r2,-12(fp)
    c310:	1009883a 	mov	r4,r2
    c314:	01400304 	movi	r5,12
    c318:	00094480 	call	9448 <__mulsi3>
    c31c:	8085883a 	add	r2,r16,r2
    c320:	e0ffff17 	ldw	r3,-4(fp)
    c324:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c328:	00800074 	movhi	r2,1
    c32c:	10876904 	addi	r2,r2,7588
    c330:	10c00017 	ldw	r3,0(r2)
    c334:	e0bffd17 	ldw	r2,-12(fp)
    c338:	1880040e 	bge	r3,r2,c34c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    c33c:	00800074 	movhi	r2,1
    c340:	10876904 	addi	r2,r2,7588
    c344:	e0fffd17 	ldw	r3,-12(fp)
    c348:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    c34c:	e0bffd17 	ldw	r2,-12(fp)
    c350:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    c354:	00000606 	br	c370 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c358:	e0bffd17 	ldw	r2,-12(fp)
    c35c:	10800044 	addi	r2,r2,1
    c360:	e0bffd15 	stw	r2,-12(fp)
    c364:	e0bffd17 	ldw	r2,-12(fp)
    c368:	10800810 	cmplti	r2,r2,32
    c36c:	103fdc1e 	bne	r2,zero,c2e0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c370:	e0bffe17 	ldw	r2,-8(fp)
}
    c374:	e037883a 	mov	sp,fp
    c378:	dfc00217 	ldw	ra,8(sp)
    c37c:	df000117 	ldw	fp,4(sp)
    c380:	dc000017 	ldw	r16,0(sp)
    c384:	dec00304 	addi	sp,sp,12
    c388:	f800283a 	ret

0000c38c <atexit>:
    c38c:	200b883a 	mov	r5,r4
    c390:	000d883a 	mov	r6,zero
    c394:	0009883a 	mov	r4,zero
    c398:	000f883a 	mov	r7,zero
    c39c:	000c4541 	jmpi	c454 <__register_exitproc>

0000c3a0 <exit>:
    c3a0:	defffe04 	addi	sp,sp,-8
    c3a4:	000b883a 	mov	r5,zero
    c3a8:	dc000015 	stw	r16,0(sp)
    c3ac:	dfc00115 	stw	ra,4(sp)
    c3b0:	2021883a 	mov	r16,r4
    c3b4:	000c5840 	call	c584 <__call_exitprocs>
    c3b8:	00800074 	movhi	r2,1
    c3bc:	10876004 	addi	r2,r2,7552
    c3c0:	11000017 	ldw	r4,0(r2)
    c3c4:	20800f17 	ldw	r2,60(r4)
    c3c8:	10000126 	beq	r2,zero,c3d0 <exit+0x30>
    c3cc:	103ee83a 	callr	r2
    c3d0:	8009883a 	mov	r4,r16
    c3d4:	000c7240 	call	c724 <_exit>

0000c3d8 <memcmp>:
    c3d8:	01c000c4 	movi	r7,3
    c3dc:	3980192e 	bgeu	r7,r6,c444 <memcmp+0x6c>
    c3e0:	2904b03a 	or	r2,r5,r4
    c3e4:	11c4703a 	and	r2,r2,r7
    c3e8:	10000f26 	beq	r2,zero,c428 <memcmp+0x50>
    c3ec:	20c00003 	ldbu	r3,0(r4)
    c3f0:	28800003 	ldbu	r2,0(r5)
    c3f4:	1880151e 	bne	r3,r2,c44c <memcmp+0x74>
    c3f8:	31bfff84 	addi	r6,r6,-2
    c3fc:	01ffffc4 	movi	r7,-1
    c400:	00000406 	br	c414 <memcmp+0x3c>
    c404:	20c00003 	ldbu	r3,0(r4)
    c408:	28800003 	ldbu	r2,0(r5)
    c40c:	31bfffc4 	addi	r6,r6,-1
    c410:	18800e1e 	bne	r3,r2,c44c <memcmp+0x74>
    c414:	21000044 	addi	r4,r4,1
    c418:	29400044 	addi	r5,r5,1
    c41c:	31fff91e 	bne	r6,r7,c404 <memcmp+0x2c>
    c420:	0005883a 	mov	r2,zero
    c424:	f800283a 	ret
    c428:	20c00017 	ldw	r3,0(r4)
    c42c:	28800017 	ldw	r2,0(r5)
    c430:	1880041e 	bne	r3,r2,c444 <memcmp+0x6c>
    c434:	31bfff04 	addi	r6,r6,-4
    c438:	21000104 	addi	r4,r4,4
    c43c:	29400104 	addi	r5,r5,4
    c440:	39bff936 	bltu	r7,r6,c428 <memcmp+0x50>
    c444:	303fe91e 	bne	r6,zero,c3ec <memcmp+0x14>
    c448:	003ff506 	br	c420 <memcmp+0x48>
    c44c:	1885c83a 	sub	r2,r3,r2
    c450:	f800283a 	ret

0000c454 <__register_exitproc>:
    c454:	defffa04 	addi	sp,sp,-24
    c458:	00800074 	movhi	r2,1
    c45c:	10876004 	addi	r2,r2,7552
    c460:	dc000315 	stw	r16,12(sp)
    c464:	14000017 	ldw	r16,0(r2)
    c468:	dc400415 	stw	r17,16(sp)
    c46c:	dfc00515 	stw	ra,20(sp)
    c470:	80805217 	ldw	r2,328(r16)
    c474:	2023883a 	mov	r17,r4
    c478:	10003e26 	beq	r2,zero,c574 <__register_exitproc+0x120>
    c47c:	10c00117 	ldw	r3,4(r2)
    c480:	020007c4 	movi	r8,31
    c484:	40c0180e 	bge	r8,r3,c4e8 <__register_exitproc+0x94>
    c488:	00800034 	movhi	r2,0
    c48c:	10800004 	addi	r2,r2,0
    c490:	1000061e 	bne	r2,zero,c4ac <__register_exitproc+0x58>
    c494:	00bfffc4 	movi	r2,-1
    c498:	dfc00517 	ldw	ra,20(sp)
    c49c:	dc400417 	ldw	r17,16(sp)
    c4a0:	dc000317 	ldw	r16,12(sp)
    c4a4:	dec00604 	addi	sp,sp,24
    c4a8:	f800283a 	ret
    c4ac:	01006404 	movi	r4,400
    c4b0:	d9400015 	stw	r5,0(sp)
    c4b4:	d9800115 	stw	r6,4(sp)
    c4b8:	d9c00215 	stw	r7,8(sp)
    c4bc:	00000000 	call	0 <__alt_mem_ins_mem_0>
    c4c0:	d9400017 	ldw	r5,0(sp)
    c4c4:	d9800117 	ldw	r6,4(sp)
    c4c8:	d9c00217 	ldw	r7,8(sp)
    c4cc:	103ff126 	beq	r2,zero,c494 <__register_exitproc+0x40>
    c4d0:	80c05217 	ldw	r3,328(r16)
    c4d4:	10000115 	stw	zero,4(r2)
    c4d8:	10c00015 	stw	r3,0(r2)
    c4dc:	80805215 	stw	r2,328(r16)
    c4e0:	10006215 	stw	zero,392(r2)
    c4e4:	10006315 	stw	zero,396(r2)
    c4e8:	10c00117 	ldw	r3,4(r2)
    c4ec:	88000d1e 	bne	r17,zero,c524 <__register_exitproc+0xd0>
    c4f0:	19000084 	addi	r4,r3,2
    c4f4:	2109883a 	add	r4,r4,r4
    c4f8:	18c00044 	addi	r3,r3,1
    c4fc:	2109883a 	add	r4,r4,r4
    c500:	1109883a 	add	r4,r2,r4
    c504:	10c00115 	stw	r3,4(r2)
    c508:	0005883a 	mov	r2,zero
    c50c:	21400015 	stw	r5,0(r4)
    c510:	dfc00517 	ldw	ra,20(sp)
    c514:	dc400417 	ldw	r17,16(sp)
    c518:	dc000317 	ldw	r16,12(sp)
    c51c:	dec00604 	addi	sp,sp,24
    c520:	f800283a 	ret
    c524:	02400044 	movi	r9,1
    c528:	12806217 	ldw	r10,392(r2)
    c52c:	48d2983a 	sll	r9,r9,r3
    c530:	19000804 	addi	r4,r3,32
    c534:	18d1883a 	add	r8,r3,r3
    c538:	2109883a 	add	r4,r4,r4
    c53c:	4211883a 	add	r8,r8,r8
    c540:	2109883a 	add	r4,r4,r4
    c544:	1109883a 	add	r4,r2,r4
    c548:	1211883a 	add	r8,r2,r8
    c54c:	5254b03a 	or	r10,r10,r9
    c550:	21c02215 	stw	r7,136(r4)
    c554:	41802215 	stw	r6,136(r8)
    c558:	12806215 	stw	r10,392(r2)
    c55c:	01000084 	movi	r4,2
    c560:	893fe31e 	bne	r17,r4,c4f0 <__register_exitproc+0x9c>
    c564:	11006317 	ldw	r4,396(r2)
    c568:	2252b03a 	or	r9,r4,r9
    c56c:	12406315 	stw	r9,396(r2)
    c570:	003fdf06 	br	c4f0 <__register_exitproc+0x9c>
    c574:	00800074 	movhi	r2,1
    c578:	1087cb04 	addi	r2,r2,7980
    c57c:	80805215 	stw	r2,328(r16)
    c580:	003fbe06 	br	c47c <__register_exitproc+0x28>

0000c584 <__call_exitprocs>:
    c584:	00800074 	movhi	r2,1
    c588:	10876004 	addi	r2,r2,7552
    c58c:	10800017 	ldw	r2,0(r2)
    c590:	defff304 	addi	sp,sp,-52
    c594:	df000b15 	stw	fp,44(sp)
    c598:	d8800015 	stw	r2,0(sp)
    c59c:	10805204 	addi	r2,r2,328
    c5a0:	dd400815 	stw	r21,32(sp)
    c5a4:	dfc00c15 	stw	ra,48(sp)
    c5a8:	ddc00a15 	stw	r23,40(sp)
    c5ac:	dd800915 	stw	r22,36(sp)
    c5b0:	dd000715 	stw	r20,28(sp)
    c5b4:	dcc00615 	stw	r19,24(sp)
    c5b8:	dc800515 	stw	r18,20(sp)
    c5bc:	dc400415 	stw	r17,16(sp)
    c5c0:	dc000315 	stw	r16,12(sp)
    c5c4:	d9000115 	stw	r4,4(sp)
    c5c8:	2839883a 	mov	fp,r5
    c5cc:	d8800215 	stw	r2,8(sp)
    c5d0:	057fffc4 	movi	r21,-1
    c5d4:	d8800017 	ldw	r2,0(sp)
    c5d8:	ddc00217 	ldw	r23,8(sp)
    c5dc:	14805217 	ldw	r18,328(r2)
    c5e0:	90001726 	beq	r18,zero,c640 <__call_exitprocs+0xbc>
    c5e4:	94400117 	ldw	r17,4(r18)
    c5e8:	8c3fffc4 	addi	r16,r17,-1
    c5ec:	80001116 	blt	r16,zero,c634 <__call_exitprocs+0xb0>
    c5f0:	8c400044 	addi	r17,r17,1
    c5f4:	8427883a 	add	r19,r16,r16
    c5f8:	8c63883a 	add	r17,r17,r17
    c5fc:	95802204 	addi	r22,r18,136
    c600:	9ce7883a 	add	r19,r19,r19
    c604:	8c63883a 	add	r17,r17,r17
    c608:	b4e7883a 	add	r19,r22,r19
    c60c:	9463883a 	add	r17,r18,r17
    c610:	e0001726 	beq	fp,zero,c670 <__call_exitprocs+0xec>
    c614:	8c87c83a 	sub	r3,r17,r18
    c618:	b0c7883a 	add	r3,r22,r3
    c61c:	18c01e17 	ldw	r3,120(r3)
    c620:	1f001326 	beq	r3,fp,c670 <__call_exitprocs+0xec>
    c624:	843fffc4 	addi	r16,r16,-1
    c628:	9cffff04 	addi	r19,r19,-4
    c62c:	8c7fff04 	addi	r17,r17,-4
    c630:	857ff71e 	bne	r16,r21,c610 <__call_exitprocs+0x8c>
    c634:	00800034 	movhi	r2,0
    c638:	10800004 	addi	r2,r2,0
    c63c:	10002a1e 	bne	r2,zero,c6e8 <__call_exitprocs+0x164>
    c640:	dfc00c17 	ldw	ra,48(sp)
    c644:	df000b17 	ldw	fp,44(sp)
    c648:	ddc00a17 	ldw	r23,40(sp)
    c64c:	dd800917 	ldw	r22,36(sp)
    c650:	dd400817 	ldw	r21,32(sp)
    c654:	dd000717 	ldw	r20,28(sp)
    c658:	dcc00617 	ldw	r19,24(sp)
    c65c:	dc800517 	ldw	r18,20(sp)
    c660:	dc400417 	ldw	r17,16(sp)
    c664:	dc000317 	ldw	r16,12(sp)
    c668:	dec00d04 	addi	sp,sp,52
    c66c:	f800283a 	ret
    c670:	91000117 	ldw	r4,4(r18)
    c674:	88c00017 	ldw	r3,0(r17)
    c678:	213fffc4 	addi	r4,r4,-1
    c67c:	24001526 	beq	r4,r16,c6d4 <__call_exitprocs+0x150>
    c680:	88000015 	stw	zero,0(r17)
    c684:	183fe726 	beq	r3,zero,c624 <__call_exitprocs+0xa0>
    c688:	00800044 	movi	r2,1
    c68c:	1408983a 	sll	r4,r2,r16
    c690:	91406217 	ldw	r5,392(r18)
    c694:	95000117 	ldw	r20,4(r18)
    c698:	214a703a 	and	r5,r4,r5
    c69c:	28000b26 	beq	r5,zero,c6cc <__call_exitprocs+0x148>
    c6a0:	91406317 	ldw	r5,396(r18)
    c6a4:	2148703a 	and	r4,r4,r5
    c6a8:	20000c1e 	bne	r4,zero,c6dc <__call_exitprocs+0x158>
    c6ac:	99400017 	ldw	r5,0(r19)
    c6b0:	d9000117 	ldw	r4,4(sp)
    c6b4:	183ee83a 	callr	r3
    c6b8:	90c00117 	ldw	r3,4(r18)
    c6bc:	1d3fc51e 	bne	r3,r20,c5d4 <__call_exitprocs+0x50>
    c6c0:	b8c00017 	ldw	r3,0(r23)
    c6c4:	1cbfd726 	beq	r3,r18,c624 <__call_exitprocs+0xa0>
    c6c8:	003fc206 	br	c5d4 <__call_exitprocs+0x50>
    c6cc:	183ee83a 	callr	r3
    c6d0:	003ff906 	br	c6b8 <__call_exitprocs+0x134>
    c6d4:	94000115 	stw	r16,4(r18)
    c6d8:	003fea06 	br	c684 <__call_exitprocs+0x100>
    c6dc:	99000017 	ldw	r4,0(r19)
    c6e0:	183ee83a 	callr	r3
    c6e4:	003ff406 	br	c6b8 <__call_exitprocs+0x134>
    c6e8:	90c00117 	ldw	r3,4(r18)
    c6ec:	1800071e 	bne	r3,zero,c70c <__call_exitprocs+0x188>
    c6f0:	90c00017 	ldw	r3,0(r18)
    c6f4:	18000926 	beq	r3,zero,c71c <__call_exitprocs+0x198>
    c6f8:	9009883a 	mov	r4,r18
    c6fc:	b8c00015 	stw	r3,0(r23)
    c700:	00000000 	call	0 <__alt_mem_ins_mem_0>
    c704:	bc800017 	ldw	r18,0(r23)
    c708:	003fb506 	br	c5e0 <__call_exitprocs+0x5c>
    c70c:	90c00017 	ldw	r3,0(r18)
    c710:	902f883a 	mov	r23,r18
    c714:	1825883a 	mov	r18,r3
    c718:	003fb106 	br	c5e0 <__call_exitprocs+0x5c>
    c71c:	0007883a 	mov	r3,zero
    c720:	003ffb06 	br	c710 <__call_exitprocs+0x18c>

0000c724 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c724:	defffc04 	addi	sp,sp,-16
    c728:	df000315 	stw	fp,12(sp)
    c72c:	df000304 	addi	fp,sp,12
    c730:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c734:	0001883a 	nop
    c738:	e0bfff17 	ldw	r2,-4(fp)
    c73c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    c740:	e0bffd17 	ldw	r2,-12(fp)
    c744:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c748:	e0bffe17 	ldw	r2,-8(fp)
    c74c:	10000226 	beq	r2,zero,c758 <_exit+0x34>
    ALT_SIM_FAIL();
    c750:	002af070 	cmpltui	zero,zero,43969
    c754:	00000106 	br	c75c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    c758:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c75c:	003fff06 	br	c75c <_exit+0x38>
