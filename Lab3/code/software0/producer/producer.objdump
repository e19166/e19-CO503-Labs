
producer.elf:     file format elf32-littlenios2
producer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000cdc4 memsz 0x0000cdc4 flags r-x
    LOAD off    0x0000e45c vaddr 0x0002845c paddr 0x0001cde4 align 2**12
         filesz 0x00001a5c memsz 0x00001d64 flags rw-
    LOAD off    0x00010000 vaddr 0x00028000 paddr 0x00028000 align 2**12
         filesz 0x0000045c memsz 0x0000045c flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cc30  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000045c  00028000  00028000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0002845c  0001cde4  0000e45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  00029eb8  0001e840  0000feb8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cd8  00000000  00000000  00010480  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000171d  00000000  00000000  00011158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023e31  00000000  00000000  00012875  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007b60  00000000  00000000  000366a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013f28  00000000  00000000  0003e206  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b14  00000000  00000000  00052130  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021ba  00000000  00000000  00053c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c19d  00000000  00000000  00055dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00061f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00061fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00065dbe  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00065dc1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00065dc5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00065dc6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00065dc7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00065dcb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00065dcf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00065dd3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00065dde  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00065de9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  00065df4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000042  00000000  00000000  00065df7  2**0
                  CONTENTS, READONLY
 29 .jdi          00008508  00000000  00000000  00065e39  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006f952  00000000  00000000  0006e341  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
00028000 l    d  .rodata	00000000 .rodata
0002845c l    d  .rwdata	00000000 .rwdata
00029eb8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 producer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010548 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010834 l     F .text	00000058 __sprint_r
0002818a l     O .rodata	00000010 blanks.3452
0002817a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00012898 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00014294 l     F .text	00000058 std
000143a0 l     F .text	00000008 __fp_lock
000143a8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0002845c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00029e84 l     O .rwdata	00000004 charset
000281c0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00028308 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00018534 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00019d88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019de8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00019ee8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001a008 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001a0e8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a244 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a470 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00029ea8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a70c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00028e18 l     O .rwdata	00001060 jtag_uart_0
0001a824 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001afc4 l     F .text	00000228 altera_avalon_jtag_uart_irq
0001b1ec l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001b868 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001bcf4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001c118 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001c254 l     F .text	000000dc alt_file_locked
0001c4b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001cbcc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0001cd80 l     F .text	00000040 alt_sim_halt
00016050 g     F .text	00000094 _mprec_log10
0001613c g     F .text	00000088 __any_on
00017848 g     F .text	00000070 _isatty_r
000282e0 g     O .rodata	00000028 __mprec_tinytens
0001a2a4 g     F .text	0000006c alt_main
0001070c g     F .text	000000a0 _puts_r
00029eb8 g     O .bss	00000004 writep
00029f30 g     O .bss	00000100 alt_irq
000178b8 g     F .text	00000078 _lseek_r
0001ab14 g     F .text	00000060 altera_avalon_fifo_write_almostfull
0001cde4 g       *ABS*	00000000 __flash_rwdata_start
00019054 g     F .text	00000088 __eqdf2
000103b8 g     F .text	0000003c FIFO_1_INIT
0002a1c0 g       *ABS*	00000000 __alt_heap_start
00010694 g     F .text	00000044 printf
00017314 g     F .text	00000068 __sseek
000142fc g     F .text	000000a4 __sinit
00014fd4 g     F .text	00000084 _setlocale_r
000143fc g     F .text	00000068 __sfmoreglue
0001a330 g     F .text	00000020 __malloc_unlock
00029ebc g     O .bss	00000004 readp
00029ef8 g     O .bss	00000004 altera_avalon_timer_ts_freq
00015acc g     F .text	000000e0 memmove
0001a85c g     F .text	000000bc altera_avalon_fifo_init
000143ec g     F .text	00000010 _cleanup
0001abd4 g     F .text	00000064 altera_avalon_fifo_write_fifo
000161c4 g     F .text	000000bc _Balloc
00019164 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
0001ad94 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
000177d4 g     F .text	00000074 _fstat_r
00029ee4 g     O .bss	00000004 errno
00029eec g     O .bss	00000004 alt_argv
00031e78 g       *ABS*	00000000 _gp
0001aa4c g     F .text	00000068 altera_avalon_fifo_clear_event
00028000 g       *ABS*	00000000 __alt_mem_data_mem0
00028c98 g     O .rwdata	00000180 alt_fd_list
0001c6dc g     F .text	00000094 alt_find_dev
00015a2c g     F .text	000000a0 memcpy
000143e0 g     F .text	0000000c _cleanup_r
000192fc g     F .text	000000f8 __floatsidf
0001c1dc g     F .text	00000078 alt_io_redirect
00019274 g     F .text	00000088 __ltdf2
0001cde4 g       *ABS*	00000000 __DTOR_END__
000107ac g     F .text	00000014 puts
00015fa0 g     F .text	000000b0 __ratio
0001b404 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000106d8 g     F .text	00000034 _printf_r
00010684 g     F .text	00000008 __udivsi3
00019f48 g     F .text	000000c0 isatty
000281f0 g     O .rodata	000000c8 __mprec_tens
00010000 g       *ABS*	00000000 __alt_mem_ins_mem0
00014fb0 g     F .text	00000008 __locale_charset
0001c948 g     F .text	00000090 alt_icache_flush
00029ed8 g     O .bss	00000004 __malloc_top_pad
00029e80 g     O .rwdata	00000004 __mb_cur_max
00014fb8 g     F .text	0000000c _localeconv_r
000168bc g     F .text	0000003c __i2b
00014994 g     F .text	0000049c __sfvwrite_r
0001729c g     F .text	00000070 _sbrk_r
00029ec0 g     O .bss	00000004 fullp
00017930 g     F .text	00000078 _read_r
0002885c g     O .rwdata	0000000c __lc_ctype
00029ea0 g     O .rwdata	00000004 alt_max_fd
00019a8c g     F .text	00000138 __unpack_d
000176b0 g     F .text	00000110 _fclose_r
00014260 g     F .text	00000034 fflush
00029edc g     O .bss	00000004 __malloc_max_sbrked_mem
000189c4 g     F .text	00000074 __adddf3
00015e80 g     F .text	00000120 __b2d
00017f84 g     F .text	000005b0 __umoddi3
0001a154 g     F .text	000000f0 lseek
00029e7c g     O .rwdata	00000004 _global_impure_ptr
00016c38 g     F .text	000005f4 _realloc_r
0002a1c0 g       *ABS*	00000000 __bss_end
0001c020 g     F .text	000000f8 alt_iic_isr_register
0001c5b0 g     F .text	0000010c alt_tick
000179a8 g     F .text	000005dc __udivdi3
000282b8 g     O .rodata	00000028 __mprec_bigtens
00016b18 g     F .text	00000120 __s2b
000194cc g     F .text	00000194 __floatunsidf
00015da0 g     F .text	00000060 __mcmp
000143c8 g     F .text	00000018 __fp_lock_all
0001bfd8 g     F .text	00000048 alt_ic_irq_enabled
00010460 g     F .text	000000a4 producer
0001c518 g     F .text	00000098 alt_alarm_stop
00029efc g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
00028c70 g     O .rwdata	00000028 alt_dev_null
0001bc24 g     F .text	0000001c alt_dcache_flush_all
00015c6c g     F .text	00000070 __hi0bits
000193f4 g     F .text	000000d8 __fixdfsi
0001aab4 g     F .text	00000060 altera_avalon_fifo_write_ienable
00029eb8 g       *ABS*	00000000 __ram_rwdata_end
0001a9bc g     F .text	0000002c altera_avalon_fifo_read_almostempty
00029e98 g     O .rwdata	00000008 alt_dev_list
0001a5ec g     F .text	00000120 write
0001baa8 g     F .text	00000028 alt_timestamp_freq
0002845c g       *ABS*	00000000 __ram_rodata_end
00019e14 g     F .text	000000d4 fstat
000169f8 g     F .text	00000120 __pow5mult
00029ecc g     O .bss	00000004 __nlocale_changed
0001068c g     F .text	00000008 __umodsi3
0002a1c0 g       *ABS*	00000000 end
0001af04 g     F .text	000000c0 altera_avalon_jtag_uart_init
0001a9e8 g     F .text	0000003c altera_avalon_fifo_read_event
0001cde0 g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
0001b8d8 g     F .text	00000090 alt_avalon_timer_sc_init
000196f8 g     F .text	00000080 __clzsi2
0001b628 g     F .text	00000240 altera_avalon_jtag_uart_write
000142ec g     F .text	00000004 __sfp_lock_acquire
0001aca8 g     F .text	00000058 altera_avalon_fifo_read_fifo
00015948 g     F .text	000000e4 memchr
0001088c g     F .text	00001eac ___vfprintf_internal_r
00014680 g     F .text	00000314 _free_r
0001cbd0 g     F .text	000001b0 __call_exitprocs
00029ed0 g     O .bss	00000004 __mlocale_changed
00029e8c g     O .rwdata	00000004 __malloc_sbrk_base
000101b4 g     F .text	0000003c _start
00029f00 g     O .bss	00000004 _alt_tick_rate
00016588 g     F .text	0000014c __lshift
00029f04 g     O .bss	00000004 _alt_nticks
0001a350 g     F .text	00000120 read
0001a7a0 g     F .text	00000084 alt_sys_init
0001ca98 g     F .text	00000134 __register_exitproc
000166d4 g     F .text	000001e8 __multiply
0001b29c g     F .text	00000074 altera_avalon_jtag_uart_close
0002845c g       *ABS*	00000000 __ram_rwdata_start
00028000 g       *ABS*	00000000 __ram_rodata_start
00029f08 g     O .bss	00000028 __malloc_current_mallinfo
00016280 g     F .text	0000017c __d2b
0001adbc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0001c890 g     F .text	000000b8 alt_get_fd
00019bc4 g     F .text	000000c8 __fpcmp_parts_d
00017640 g     F .text	00000070 _close_r
0001ca24 g     F .text	00000074 memcmp
0001ae6c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0002a1c0 g       *ABS*	00000000 __alt_stack_base
0001aeb4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000101f0 g     F .text	00000108 print_status
0001275c g     F .text	0000013c __swsetup_r
0001a918 g     F .text	0000003c altera_avalon_fifo_read_status
00018dfc g     F .text	00000258 __divdf3
00014464 g     F .text	000000f0 __sfp
000160e4 g     F .text	00000058 __copybits
00028868 g     O .rwdata	00000408 __malloc_av_
000142f8 g     F .text	00000004 __sinit_lock_release
00018a38 g     F .text	000003c4 __muldf3
000173f8 g     F .text	00000060 __sread
0001ad68 g     F .text	0000002c altera_avalon_fifo_read_other_info
0001c770 g     F .text	00000120 alt_find_file
0001bc40 g     F .text	000000b4 alt_dev_llist_insert
0001a310 g     F .text	00000020 __malloc_lock
0001a530 g     F .text	000000bc sbrk
00014064 g     F .text	000001fc _fflush_r
0001758c g     F .text	000000b4 _calloc_r
00029eb8 g       *ABS*	00000000 __bss_start
00015bac g     F .text	00000098 memset
000103f4 g     F .text	0000006c main
00029ef0 g     O .bss	00000004 alt_envp
00029ee0 g     O .bss	00000004 __malloc_max_total_mem
0001ae14 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0001aa24 g     F .text	00000028 altera_avalon_fifo_read_level
0001730c g     F .text	00000008 __sclose
00030000 g       *ABS*	00000000 __alt_heap_limit
000177c0 g     F .text	00000014 fclose
0001b968 g     F .text	000000a4 alt_timestamp_start
0002a030 g     O .bss	00000190 _atexit0
00012ab0 g     F .text	000015b4 _dtoa_r
00015208 g     F .text	00000740 _malloc_r
00029ea4 g     O .rwdata	00000004 alt_errno
00014ef8 g     F .text	000000b8 _fwalk
000102f8 g     F .text	00000060 WRITE_FIFO_1
000105c4 g     F .text	00000060 __divsi3
00028314 g     O .rodata	00000014 __thenan_df
00014554 g     F .text	0000012c _malloc_trim_r
0001cde4 g       *ABS*	00000000 __CTOR_END__
00017458 g     F .text	000000bc strcmp
00028000 g       *ABS*	00000000 __flash_rodata_start
0001cde4 g       *ABS*	00000000 __DTOR_LIST__
00010504 g     F .text	00000044 delay
000190dc g     F .text	00000088 __nedf2
0001a76c g     F .text	00000034 alt_irq_init
0001a4d0 g     F .text	00000060 alt_release_fd
00028328 g     O .rodata	00000100 __clz_tab
00029ed4 g     O .bss	00000004 _PathLocale
0001c9d8 g     F .text	00000014 atexit
00017514 g     F .text	00000078 _write_r
00015058 g     F .text	0000001c setlocale
00029e78 g     O .rwdata	00000004 _impure_ptr
00029ee8 g     O .bss	00000004 alt_argc
00029ef4 g     O .bss	00000004 altera_avalon_timer_ts_base
0001bdb8 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00015e00 g     F .text	00000080 __ulp
0001722c g     F .text	00000040 __isinfd
000143b0 g     F .text	00000018 __fp_unlock_all
00029e90 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014fc4 g     F .text	00000010 localeconv
0001ba0c g     F .text	0000009c alt_timestamp
0001ad00 g     F .text	00000068 altera_avalon_fifo_write_other_info
0001be4c g     F .text	00000050 alt_ic_isr_register
00029eb8 g       *ABS*	00000000 _edata
0002a1c0 g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
0001b310 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001bf38 g     F .text	000000a0 alt_ic_irq_disable
0001737c g     F .text	0000007c __swrite
00029e88 g     O .rwdata	00000004 __malloc_trim_threshold
0001c6bc g     F .text	00000020 altera_nios2_qsys_irq_init
0001c9ec g     F .text	00000038 exit
00014e30 g     F .text	000000c8 _fwalk_reent
000163fc g     F .text	0000018c __mdiff
00010624 g     F .text	00000060 __modsi3
0001a954 g     F .text	0000003c altera_avalon_fifo_read_ienable
00030000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000142f0 g     F .text	00000004 __sfp_lock_release
0001cdc0 g     F .text	00000020 _exit
0001726c g     F .text	00000030 __isnand
0001bad0 g     F .text	00000154 alt_alarm_start
00019660 g     F .text	00000098 __muldi3
0001a990 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00015074 g     F .text	00000194 __smakebuf_r
000107c0 g     F .text	00000074 strlen
0001c330 g     F .text	00000188 open
0001ac38 g     F .text	00000070 altera_avalon_read_fifo
000191ec g     F .text	00000088 __gedf2
00010358 g     F .text	00000060 READ_FIFO_1
0001be1c g     F .text	00000030 alt_icache_flush_all
00029eac g     O .rwdata	00000004 alt_priority_mask
00029ec4 g     O .bss	00000004 emptyp
0001be9c g     F .text	0000009c alt_ic_irq_enable
00012738 g     F .text	00000024 __vfprintf_internal
00018944 g     F .text	00000080 __subdf3
00015cdc g     F .text	000000c4 __lo0bits
0001ab74 g     F .text	00000060 altera_avalon_fifo_write_almostempty
00029eb0 g     O .rwdata	00000008 alt_alarm_list
0001bd54 g     F .text	00000064 _do_ctors
00029ec8 g     O .bss	00000004 countp
00019c8c g     F .text	000000fc close
0001a068 g     F .text	00000080 alt_load
00019778 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000142f4 g     F .text	00000004 __sinit_lock_acquire
000168f8 g     F .text	00000100 __multadd
00015c44 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406d14 	ori	at,at,436
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_ins_mem0-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c000f4 	movhi	r3,3
   10134:	18e7cc04 	addi	r3,r3,-24784
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c000f4 	movhi	r3,3
   1014c:	18e7cc04 	addi	r3,r3,-24784
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   101c0:	d6879e14 	ori	gp,gp,7800
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c4:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   101c8:	10a7ae14 	ori	r2,r2,40632

    movhi r3, %hi(__bss_end)
   101cc:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   101d0:	18e87014 	ori	r3,r3,41408

    beq r2, r3, 1f
   101d4:	10c00326 	beq	r2,r3,101e4 <_start+0x30>

0:
    stw zero, (r2)
   101d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e0:	10fffd36 	bltu	r2,r3,101d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e4:	001a0680 	call	1a068 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101e8:	001a2a40 	call	1a2a4 <alt_main>

000101ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101ec:	003fff06 	br	101ec <alt_after_alt_main>

000101f0 <print_status>:
*/


#include "FIFO_1.h"
void print_status(alt_u32 control_base_address)
{
   101f0:	defffd04 	addi	sp,sp,-12
   101f4:	dfc00215 	stw	ra,8(sp)
   101f8:	df000115 	stw	fp,4(sp)
   101fc:	df000104 	addi	fp,sp,4
   10200:	e13fff15 	stw	r4,-4(fp)
	printf("--------------------------------------\n");
   10204:	010000f4 	movhi	r4,3
   10208:	21200004 	addi	r4,r4,-32768
   1020c:	00107ac0 	call	107ac <puts>
	printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   10210:	e13fff17 	ldw	r4,-4(fp)
   10214:	001aa240 	call	1aa24 <altera_avalon_fifo_read_level>
   10218:	100b883a 	mov	r5,r2
   1021c:	010000f4 	movhi	r4,3
   10220:	21200a04 	addi	r4,r4,-32728
   10224:	00106940 	call	10694 <printf>
	printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   10228:	e13fff17 	ldw	r4,-4(fp)
   1022c:	01400fc4 	movi	r5,63
   10230:	001a9180 	call	1a918 <altera_avalon_fifo_read_status>
   10234:	100b883a 	mov	r5,r2
   10238:	010000f4 	movhi	r4,3
   1023c:	21200d04 	addi	r4,r4,-32716
   10240:	00106940 	call	10694 <printf>
	ALTERA_AVALON_FIFO_STATUS_ALL) );
	printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   10244:	e13fff17 	ldw	r4,-4(fp)
   10248:	01400fc4 	movi	r5,63
   1024c:	001a9e80 	call	1a9e8 <altera_avalon_fifo_read_event>
   10250:	100b883a 	mov	r5,r2
   10254:	010000f4 	movhi	r4,3
   10258:	21201104 	addi	r4,r4,-32700
   1025c:	00106940 	call	10694 <printf>
	ALTERA_AVALON_FIFO_EVENT_ALL) );
	printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   10260:	e13fff17 	ldw	r4,-4(fp)
   10264:	01400fc4 	movi	r5,63
   10268:	001a9540 	call	1a954 <altera_avalon_fifo_read_ienable>
   1026c:	100b883a 	mov	r5,r2
   10270:	010000f4 	movhi	r4,3
   10274:	21201404 	addi	r4,r4,-32688
   10278:	00106940 	call	10694 <printf>
	ALTERA_AVALON_FIFO_IENABLE_ALL) );
	printf("ALMOSTEMPTY = %u\n",
   1027c:	e13fff17 	ldw	r4,-4(fp)
   10280:	001a9bc0 	call	1a9bc <altera_avalon_fifo_read_almostempty>
   10284:	100b883a 	mov	r5,r2
   10288:	010000f4 	movhi	r4,3
   1028c:	21201804 	addi	r4,r4,-32672
   10290:	00106940 	call	10694 <printf>
	altera_avalon_fifo_read_almostempty(control_base_address) );
	printf("ALMOSTFULL = %u\n\n",
   10294:	e13fff17 	ldw	r4,-4(fp)
   10298:	001a9900 	call	1a990 <altera_avalon_fifo_read_almostfull>
   1029c:	100b883a 	mov	r5,r2
   102a0:	010000f4 	movhi	r4,3
   102a4:	21201d04 	addi	r4,r4,-32652
   102a8:	00106940 	call	10694 <printf>
	altera_avalon_fifo_read_almostfull(control_base_address));
	//full
	printf("FULL = %u\n\n",
   102ac:	e13fff17 	ldw	r4,-4(fp)
   102b0:	01400044 	movi	r5,1
   102b4:	001a9180 	call	1a918 <altera_avalon_fifo_read_status>
   102b8:	100b883a 	mov	r5,r2
   102bc:	010000f4 	movhi	r4,3
   102c0:	21202204 	addi	r4,r4,-32632
   102c4:	00106940 	call	10694 <printf>
	altera_avalon_fifo_read_status(control_base_address,0x01));
	//empty
	printf("EMPTY = %u\n\n",
   102c8:	e13fff17 	ldw	r4,-4(fp)
   102cc:	01400084 	movi	r5,2
   102d0:	001a9180 	call	1a918 <altera_avalon_fifo_read_status>
   102d4:	100b883a 	mov	r5,r2
   102d8:	010000f4 	movhi	r4,3
   102dc:	21202504 	addi	r4,r4,-32620
   102e0:	00106940 	call	10694 <printf>
	altera_avalon_fifo_read_status(control_base_address,0x02));
}
   102e4:	e037883a 	mov	sp,fp
   102e8:	dfc00117 	ldw	ra,4(sp)
   102ec:	df000017 	ldw	fp,0(sp)
   102f0:	dec00204 	addi	sp,sp,8
   102f4:	f800283a 	ret

000102f8 <WRITE_FIFO_1>:


void WRITE_FIFO_1(int *buffer)
{
   102f8:	defffd04 	addi	sp,sp,-12
   102fc:	dfc00215 	stw	ra,8(sp)
   10300:	df000115 	stw	fp,4(sp)
   10304:	df000104 	addi	fp,sp,4
   10308:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(altera_avalon_fifo_read_status(CTRL,0x01)){}
   1030c:	010000f4 	movhi	r4,3
   10310:	21041804 	addi	r4,r4,4192
   10314:	01400044 	movi	r5,1
   10318:	001a9180 	call	1a918 <altera_avalon_fifo_read_status>
   1031c:	1004c03a 	cmpne	r2,r2,zero
   10320:	103ffa1e 	bne	r2,zero,1030c <WRITE_FIFO_1+0x14>

	// Write the data to FIFO
	altera_avalon_fifo_write_fifo(IN_BASE,CTRL,*buffer);
   10324:	e0bfff17 	ldw	r2,-4(fp)
   10328:	10800017 	ldw	r2,0(r2)
   1032c:	100d883a 	mov	r6,r2
   10330:	010000f4 	movhi	r4,3
   10334:	21042d04 	addi	r4,r4,4276
   10338:	014000f4 	movhi	r5,3
   1033c:	29441804 	addi	r5,r5,4192
   10340:	001abd40 	call	1abd4 <altera_avalon_fifo_write_fifo>


}
   10344:	e037883a 	mov	sp,fp
   10348:	dfc00117 	ldw	ra,4(sp)
   1034c:	df000017 	ldw	fp,0(sp)
   10350:	dec00204 	addi	sp,sp,8
   10354:	f800283a 	ret

00010358 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   10358:	defffd04 	addi	sp,sp,-12
   1035c:	dfc00215 	stw	ra,8(sp)
   10360:	df000115 	stw	fp,4(sp)
   10364:	df000104 	addi	fp,sp,4
   10368:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(altera_avalon_fifo_read_status(CTRL,0x02)){}
   1036c:	010000f4 	movhi	r4,3
   10370:	21041804 	addi	r4,r4,4192
   10374:	01400084 	movi	r5,2
   10378:	001a9180 	call	1a918 <altera_avalon_fifo_read_status>
   1037c:	1004c03a 	cmpne	r2,r2,zero
   10380:	103ffa1e 	bne	r2,zero,1036c <READ_FIFO_1+0x14>

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(OUT_BASE,CTRL);
   10384:	010000f4 	movhi	r4,3
   10388:	21040b04 	addi	r4,r4,4140
   1038c:	014000f4 	movhi	r5,3
   10390:	29441804 	addi	r5,r5,4192
   10394:	001aca80 	call	1aca8 <altera_avalon_fifo_read_fifo>
   10398:	1007883a 	mov	r3,r2
   1039c:	e0bfff17 	ldw	r2,-4(fp)
   103a0:	10c00015 	stw	r3,0(r2)


}
   103a4:	e037883a 	mov	sp,fp
   103a8:	dfc00117 	ldw	ra,4(sp)
   103ac:	df000017 	ldw	fp,0(sp)
   103b0:	dec00204 	addi	sp,sp,8
   103b4:	f800283a 	ret

000103b8 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
   103b8:	defffe04 	addi	sp,sp,-8
   103bc:	dfc00115 	stw	ra,4(sp)
   103c0:	df000015 	stw	fp,0(sp)
   103c4:	d839883a 	mov	fp,sp
	altera_avalon_fifo_init(CTRL,0x000000,ALMOST_EMPTY,ALMOST_FULL);
   103c8:	010000f4 	movhi	r4,3
   103cc:	21041804 	addi	r4,r4,4192
   103d0:	000b883a 	mov	r5,zero
   103d4:	01800084 	movi	r6,2
   103d8:	01c00ec4 	movi	r7,59
   103dc:	001a85c0 	call	1a85c <altera_avalon_fifo_init>
	 *
	 * */



}
   103e0:	e037883a 	mov	sp,fp
   103e4:	dfc00117 	ldw	ra,4(sp)
   103e8:	df000017 	ldw	fp,0(sp)
   103ec:	dec00204 	addi	sp,sp,8
   103f0:	f800283a 	ret

000103f4 <main>:
void delay(int n);
int producer();


int main()
{
   103f4:	defffb04 	addi	sp,sp,-20
   103f8:	dfc00415 	stw	ra,16(sp)
   103fc:	df000315 	stw	fp,12(sp)
   10400:	dc000215 	stw	r16,8(sp)
   10404:	df000204 	addi	fp,sp,8
	printf("Starting main....\n");
   10408:	010000f4 	movhi	r4,3
   1040c:	21202904 	addi	r4,r4,-32604
   10410:	00107ac0 	call	107ac <puts>
	alt_u32 sw_fast_timeA, sw_fast_timeB;
	alt_timestamp_start();
   10414:	001b9680 	call	1b968 <alt_timestamp_start>
	sw_fast_timeA = alt_timestamp();
   10418:	001ba0c0 	call	1ba0c <alt_timestamp>
   1041c:	e0bfff15 	stw	r2,-4(fp)

	producer();
   10420:	00104600 	call	10460 <producer>

	sw_fast_timeB = alt_timestamp();
   10424:	001ba0c0 	call	1ba0c <alt_timestamp>
   10428:	e0bffe15 	stw	r2,-8(fp)

	printf("Time for Write operation: %.2lu ms\n",1000*((unsigned long)(sw_fast_timeB-sw_fast_timeA))/((unsigned long)alt_timestamp_freq()));
   1042c:	e0fffe17 	ldw	r3,-8(fp)
   10430:	e0bfff17 	ldw	r2,-4(fp)
   10434:	1885c83a 	sub	r2,r3,r2
   10438:	1400fa24 	muli	r16,r2,1000
   1043c:	001baa80 	call	1baa8 <alt_timestamp_freq>
   10440:	100b883a 	mov	r5,r2
   10444:	8009883a 	mov	r4,r16
   10448:	00106840 	call	10684 <__udivsi3>
   1044c:	100b883a 	mov	r5,r2
   10450:	010000f4 	movhi	r4,3
   10454:	21202e04 	addi	r4,r4,-32584
   10458:	00106940 	call	10694 <printf>
	while(1) { }
   1045c:	003fff06 	br	1045c <main+0x68>

00010460 <producer>:

	return 0;
}

int producer()
{
   10460:	defffd04 	addi	sp,sp,-12
   10464:	dfc00215 	stw	ra,8(sp)
   10468:	df000115 	stw	fp,4(sp)
   1046c:	df000104 	addi	fp,sp,4
	printf("Producer starting..\n");
   10470:	010000f4 	movhi	r4,3
   10474:	21203704 	addi	r4,r4,-32548
   10478:	00107ac0 	call	107ac <puts>

	FIFO_1_INIT(); // Initialize the FIFO
   1047c:	00103b80 	call	103b8 <FIFO_1_INIT>

	int j = 5;
   10480:	00800144 	movi	r2,5
   10484:	e0bfff15 	stw	r2,-4(fp)
	while(j<=500)
   10488:	00001206 	br	104d4 <producer+0x74>
	{
		delay(100000);
   1048c:	010000b4 	movhi	r4,2
   10490:	2121a804 	addi	r4,r4,-31072
   10494:	00105040 	call	10504 <delay>
		WRITE_FIFO_1(&j); // Write to the producer-consumer fifo
   10498:	e13fff04 	addi	r4,fp,-4
   1049c:	00102f80 	call	102f8 <WRITE_FIFO_1>
		delay(100000);
   104a0:	010000b4 	movhi	r4,2
   104a4:	2121a804 	addi	r4,r4,-31072
   104a8:	00105040 	call	10504 <delay>

		printf("Producer sent [%i]\n",j);
   104ac:	e17fff17 	ldw	r5,-4(fp)
   104b0:	010000f4 	movhi	r4,3
   104b4:	21203c04 	addi	r4,r4,-32528
   104b8:	00106940 	call	10694 <printf>
		print_status(CTRL);
   104bc:	010000f4 	movhi	r4,3
   104c0:	21041804 	addi	r4,r4,4192
   104c4:	00101f00 	call	101f0 <print_status>
		j+=10;
   104c8:	e0bfff17 	ldw	r2,-4(fp)
   104cc:	10800284 	addi	r2,r2,10
   104d0:	e0bfff15 	stw	r2,-4(fp)
	printf("Producer starting..\n");

	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
	while(j<=500)
   104d4:	e0bfff17 	ldw	r2,-4(fp)
   104d8:	10807d50 	cmplti	r2,r2,501
   104dc:	103feb1e 	bne	r2,zero,1048c <producer+0x2c>
		printf("Producer sent [%i]\n",j);
		print_status(CTRL);
		j+=10;
	}

	printf("Producer finished..\n");
   104e0:	010000f4 	movhi	r4,3
   104e4:	21204104 	addi	r4,r4,-32508
   104e8:	00107ac0 	call	107ac <puts>
	return 0;
   104ec:	0005883a 	mov	r2,zero
}
   104f0:	e037883a 	mov	sp,fp
   104f4:	dfc00117 	ldw	ra,4(sp)
   104f8:	df000017 	ldw	fp,0(sp)
   104fc:	dec00204 	addi	sp,sp,8
   10500:	f800283a 	ret

00010504 <delay>:


void delay(int n)
{
   10504:	defffd04 	addi	sp,sp,-12
   10508:	df000215 	stw	fp,8(sp)
   1050c:	df000204 	addi	fp,sp,8
   10510:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   10514:	e0bfff17 	ldw	r2,-4(fp)
   10518:	e0bffe15 	stw	r2,-8(fp)
   1051c:	00000306 	br	1052c <delay+0x28>
   10520:	e0bffe17 	ldw	r2,-8(fp)
   10524:	10bfffc4 	addi	r2,r2,-1
   10528:	e0bffe15 	stw	r2,-8(fp)
   1052c:	e0bffe17 	ldw	r2,-8(fp)
   10530:	10800048 	cmpgei	r2,r2,1
   10534:	103ffa1e 	bne	r2,zero,10520 <delay+0x1c>
	{
		continue;
	}
}
   10538:	e037883a 	mov	sp,fp
   1053c:	df000017 	ldw	fp,0(sp)
   10540:	dec00104 	addi	sp,sp,4
   10544:	f800283a 	ret

00010548 <udivmodsi4>:
   10548:	29001b2e 	bgeu	r5,r4,105b8 <udivmodsi4+0x70>
   1054c:	28001a16 	blt	r5,zero,105b8 <udivmodsi4+0x70>
   10550:	00800044 	movi	r2,1
   10554:	0007883a 	mov	r3,zero
   10558:	01c007c4 	movi	r7,31
   1055c:	00000306 	br	1056c <udivmodsi4+0x24>
   10560:	19c01326 	beq	r3,r7,105b0 <udivmodsi4+0x68>
   10564:	18c00044 	addi	r3,r3,1
   10568:	28000416 	blt	r5,zero,1057c <udivmodsi4+0x34>
   1056c:	294b883a 	add	r5,r5,r5
   10570:	1085883a 	add	r2,r2,r2
   10574:	293ffa36 	bltu	r5,r4,10560 <udivmodsi4+0x18>
   10578:	10000d26 	beq	r2,zero,105b0 <udivmodsi4+0x68>
   1057c:	0007883a 	mov	r3,zero
   10580:	21400236 	bltu	r4,r5,1058c <udivmodsi4+0x44>
   10584:	2149c83a 	sub	r4,r4,r5
   10588:	1886b03a 	or	r3,r3,r2
   1058c:	1004d07a 	srli	r2,r2,1
   10590:	280ad07a 	srli	r5,r5,1
   10594:	103ffa1e 	bne	r2,zero,10580 <udivmodsi4+0x38>
   10598:	30000226 	beq	r6,zero,105a4 <udivmodsi4+0x5c>
   1059c:	2005883a 	mov	r2,r4
   105a0:	f800283a 	ret
   105a4:	1809883a 	mov	r4,r3
   105a8:	2005883a 	mov	r2,r4
   105ac:	f800283a 	ret
   105b0:	0007883a 	mov	r3,zero
   105b4:	003ff806 	br	10598 <udivmodsi4+0x50>
   105b8:	00800044 	movi	r2,1
   105bc:	0007883a 	mov	r3,zero
   105c0:	003fef06 	br	10580 <udivmodsi4+0x38>

000105c4 <__divsi3>:
   105c4:	defffe04 	addi	sp,sp,-8
   105c8:	dc000015 	stw	r16,0(sp)
   105cc:	dfc00115 	stw	ra,4(sp)
   105d0:	0021883a 	mov	r16,zero
   105d4:	20000c16 	blt	r4,zero,10608 <__divsi3+0x44>
   105d8:	000d883a 	mov	r6,zero
   105dc:	28000e16 	blt	r5,zero,10618 <__divsi3+0x54>
   105e0:	00105480 	call	10548 <udivmodsi4>
   105e4:	1007883a 	mov	r3,r2
   105e8:	8005003a 	cmpeq	r2,r16,zero
   105ec:	1000011e 	bne	r2,zero,105f4 <__divsi3+0x30>
   105f0:	00c7c83a 	sub	r3,zero,r3
   105f4:	1805883a 	mov	r2,r3
   105f8:	dfc00117 	ldw	ra,4(sp)
   105fc:	dc000017 	ldw	r16,0(sp)
   10600:	dec00204 	addi	sp,sp,8
   10604:	f800283a 	ret
   10608:	0109c83a 	sub	r4,zero,r4
   1060c:	04000044 	movi	r16,1
   10610:	000d883a 	mov	r6,zero
   10614:	283ff20e 	bge	r5,zero,105e0 <__divsi3+0x1c>
   10618:	014bc83a 	sub	r5,zero,r5
   1061c:	8021003a 	cmpeq	r16,r16,zero
   10620:	003fef06 	br	105e0 <__divsi3+0x1c>

00010624 <__modsi3>:
   10624:	deffff04 	addi	sp,sp,-4
   10628:	dfc00015 	stw	ra,0(sp)
   1062c:	01800044 	movi	r6,1
   10630:	2807883a 	mov	r3,r5
   10634:	20000416 	blt	r4,zero,10648 <__modsi3+0x24>
   10638:	28000c16 	blt	r5,zero,1066c <__modsi3+0x48>
   1063c:	dfc00017 	ldw	ra,0(sp)
   10640:	dec00104 	addi	sp,sp,4
   10644:	00105481 	jmpi	10548 <udivmodsi4>
   10648:	0109c83a 	sub	r4,zero,r4
   1064c:	28000b16 	blt	r5,zero,1067c <__modsi3+0x58>
   10650:	180b883a 	mov	r5,r3
   10654:	01800044 	movi	r6,1
   10658:	00105480 	call	10548 <udivmodsi4>
   1065c:	0085c83a 	sub	r2,zero,r2
   10660:	dfc00017 	ldw	ra,0(sp)
   10664:	dec00104 	addi	sp,sp,4
   10668:	f800283a 	ret
   1066c:	014bc83a 	sub	r5,zero,r5
   10670:	dfc00017 	ldw	ra,0(sp)
   10674:	dec00104 	addi	sp,sp,4
   10678:	00105481 	jmpi	10548 <udivmodsi4>
   1067c:	0147c83a 	sub	r3,zero,r5
   10680:	003ff306 	br	10650 <__modsi3+0x2c>

00010684 <__udivsi3>:
   10684:	000d883a 	mov	r6,zero
   10688:	00105481 	jmpi	10548 <udivmodsi4>

0001068c <__umodsi3>:
   1068c:	01800044 	movi	r6,1
   10690:	00105481 	jmpi	10548 <udivmodsi4>

00010694 <printf>:
   10694:	defffb04 	addi	sp,sp,-20
   10698:	dfc00115 	stw	ra,4(sp)
   1069c:	d9400215 	stw	r5,8(sp)
   106a0:	d9800315 	stw	r6,12(sp)
   106a4:	d9c00415 	stw	r7,16(sp)
   106a8:	008000f4 	movhi	r2,3
   106ac:	10a79e04 	addi	r2,r2,-24968
   106b0:	10c00017 	ldw	r3,0(r2)
   106b4:	200b883a 	mov	r5,r4
   106b8:	d8800204 	addi	r2,sp,8
   106bc:	19000217 	ldw	r4,8(r3)
   106c0:	100d883a 	mov	r6,r2
   106c4:	d8800015 	stw	r2,0(sp)
   106c8:	00127380 	call	12738 <__vfprintf_internal>
   106cc:	dfc00117 	ldw	ra,4(sp)
   106d0:	dec00504 	addi	sp,sp,20
   106d4:	f800283a 	ret

000106d8 <_printf_r>:
   106d8:	defffc04 	addi	sp,sp,-16
   106dc:	dfc00115 	stw	ra,4(sp)
   106e0:	d9800215 	stw	r6,8(sp)
   106e4:	d9c00315 	stw	r7,12(sp)
   106e8:	280d883a 	mov	r6,r5
   106ec:	21400217 	ldw	r5,8(r4)
   106f0:	d8c00204 	addi	r3,sp,8
   106f4:	180f883a 	mov	r7,r3
   106f8:	d8c00015 	stw	r3,0(sp)
   106fc:	001088c0 	call	1088c <___vfprintf_internal_r>
   10700:	dfc00117 	ldw	ra,4(sp)
   10704:	dec00404 	addi	sp,sp,16
   10708:	f800283a 	ret

0001070c <_puts_r>:
   1070c:	defff604 	addi	sp,sp,-40
   10710:	dc400715 	stw	r17,28(sp)
   10714:	2023883a 	mov	r17,r4
   10718:	2809883a 	mov	r4,r5
   1071c:	dfc00915 	stw	ra,36(sp)
   10720:	dcc00815 	stw	r19,32(sp)
   10724:	2827883a 	mov	r19,r5
   10728:	00107c00 	call	107c0 <strlen>
   1072c:	89400217 	ldw	r5,8(r17)
   10730:	00c000f4 	movhi	r3,3
   10734:	18e04604 	addi	r3,r3,-32488
   10738:	01c00044 	movi	r7,1
   1073c:	12000044 	addi	r8,r2,1
   10740:	d8c00515 	stw	r3,20(sp)
   10744:	d9c00615 	stw	r7,24(sp)
   10748:	d8c00304 	addi	r3,sp,12
   1074c:	01c00084 	movi	r7,2
   10750:	8809883a 	mov	r4,r17
   10754:	d80d883a 	mov	r6,sp
   10758:	d8c00015 	stw	r3,0(sp)
   1075c:	dcc00315 	stw	r19,12(sp)
   10760:	da000215 	stw	r8,8(sp)
   10764:	d9c00115 	stw	r7,4(sp)
   10768:	d8800415 	stw	r2,16(sp)
   1076c:	00149940 	call	14994 <__sfvwrite_r>
   10770:	00ffffc4 	movi	r3,-1
   10774:	10000626 	beq	r2,zero,10790 <_puts_r+0x84>
   10778:	1805883a 	mov	r2,r3
   1077c:	dfc00917 	ldw	ra,36(sp)
   10780:	dcc00817 	ldw	r19,32(sp)
   10784:	dc400717 	ldw	r17,28(sp)
   10788:	dec00a04 	addi	sp,sp,40
   1078c:	f800283a 	ret
   10790:	00c00284 	movi	r3,10
   10794:	1805883a 	mov	r2,r3
   10798:	dfc00917 	ldw	ra,36(sp)
   1079c:	dcc00817 	ldw	r19,32(sp)
   107a0:	dc400717 	ldw	r17,28(sp)
   107a4:	dec00a04 	addi	sp,sp,40
   107a8:	f800283a 	ret

000107ac <puts>:
   107ac:	008000f4 	movhi	r2,3
   107b0:	10a79e04 	addi	r2,r2,-24968
   107b4:	200b883a 	mov	r5,r4
   107b8:	11000017 	ldw	r4,0(r2)
   107bc:	001070c1 	jmpi	1070c <_puts_r>

000107c0 <strlen>:
   107c0:	208000cc 	andi	r2,r4,3
   107c4:	2011883a 	mov	r8,r4
   107c8:	1000161e 	bne	r2,zero,10824 <strlen+0x64>
   107cc:	20c00017 	ldw	r3,0(r4)
   107d0:	017fbff4 	movhi	r5,65279
   107d4:	297fbfc4 	addi	r5,r5,-257
   107d8:	01e02074 	movhi	r7,32897
   107dc:	39e02004 	addi	r7,r7,-32640
   107e0:	1945883a 	add	r2,r3,r5
   107e4:	11c4703a 	and	r2,r2,r7
   107e8:	00c6303a 	nor	r3,zero,r3
   107ec:	1886703a 	and	r3,r3,r2
   107f0:	18000c1e 	bne	r3,zero,10824 <strlen+0x64>
   107f4:	280d883a 	mov	r6,r5
   107f8:	380b883a 	mov	r5,r7
   107fc:	21000104 	addi	r4,r4,4
   10800:	20800017 	ldw	r2,0(r4)
   10804:	1187883a 	add	r3,r2,r6
   10808:	1946703a 	and	r3,r3,r5
   1080c:	0084303a 	nor	r2,zero,r2
   10810:	10c4703a 	and	r2,r2,r3
   10814:	103ff926 	beq	r2,zero,107fc <strlen+0x3c>
   10818:	20800007 	ldb	r2,0(r4)
   1081c:	10000326 	beq	r2,zero,1082c <strlen+0x6c>
   10820:	21000044 	addi	r4,r4,1
   10824:	20800007 	ldb	r2,0(r4)
   10828:	103ffd1e 	bne	r2,zero,10820 <strlen+0x60>
   1082c:	2205c83a 	sub	r2,r4,r8
   10830:	f800283a 	ret

00010834 <__sprint_r>:
   10834:	30800217 	ldw	r2,8(r6)
   10838:	defffe04 	addi	sp,sp,-8
   1083c:	dc000015 	stw	r16,0(sp)
   10840:	dfc00115 	stw	ra,4(sp)
   10844:	3021883a 	mov	r16,r6
   10848:	0007883a 	mov	r3,zero
   1084c:	1000061e 	bne	r2,zero,10868 <__sprint_r+0x34>
   10850:	1805883a 	mov	r2,r3
   10854:	30000115 	stw	zero,4(r6)
   10858:	dfc00117 	ldw	ra,4(sp)
   1085c:	dc000017 	ldw	r16,0(sp)
   10860:	dec00204 	addi	sp,sp,8
   10864:	f800283a 	ret
   10868:	00149940 	call	14994 <__sfvwrite_r>
   1086c:	1007883a 	mov	r3,r2
   10870:	1805883a 	mov	r2,r3
   10874:	80000115 	stw	zero,4(r16)
   10878:	80000215 	stw	zero,8(r16)
   1087c:	dfc00117 	ldw	ra,4(sp)
   10880:	dc000017 	ldw	r16,0(sp)
   10884:	dec00204 	addi	sp,sp,8
   10888:	f800283a 	ret

0001088c <___vfprintf_internal_r>:
   1088c:	defea404 	addi	sp,sp,-1392
   10890:	dd815815 	stw	r22,1376(sp)
   10894:	dc015215 	stw	r16,1352(sp)
   10898:	d9c15115 	stw	r7,1348(sp)
   1089c:	dfc15b15 	stw	ra,1388(sp)
   108a0:	df015a15 	stw	fp,1384(sp)
   108a4:	ddc15915 	stw	r23,1380(sp)
   108a8:	dd415715 	stw	r21,1372(sp)
   108ac:	dd015615 	stw	r20,1368(sp)
   108b0:	dcc15515 	stw	r19,1364(sp)
   108b4:	dc815415 	stw	r18,1360(sp)
   108b8:	dc415315 	stw	r17,1356(sp)
   108bc:	282d883a 	mov	r22,r5
   108c0:	3021883a 	mov	r16,r6
   108c4:	d9014f15 	stw	r4,1340(sp)
   108c8:	0014fb80 	call	14fb8 <_localeconv_r>
   108cc:	10800017 	ldw	r2,0(r2)
   108d0:	d9c15117 	ldw	r7,1348(sp)
   108d4:	d8814915 	stw	r2,1316(sp)
   108d8:	d8814f17 	ldw	r2,1340(sp)
   108dc:	10000226 	beq	r2,zero,108e8 <___vfprintf_internal_r+0x5c>
   108e0:	10800e17 	ldw	r2,56(r2)
   108e4:	10020d26 	beq	r2,zero,1111c <___vfprintf_internal_r+0x890>
   108e8:	b080030b 	ldhu	r2,12(r22)
   108ec:	1080020c 	andi	r2,r2,8
   108f0:	10020e26 	beq	r2,zero,1112c <___vfprintf_internal_r+0x8a0>
   108f4:	b0800417 	ldw	r2,16(r22)
   108f8:	10020c26 	beq	r2,zero,1112c <___vfprintf_internal_r+0x8a0>
   108fc:	b200030b 	ldhu	r8,12(r22)
   10900:	00800284 	movi	r2,10
   10904:	40c0068c 	andi	r3,r8,26
   10908:	18802f1e 	bne	r3,r2,109c8 <___vfprintf_internal_r+0x13c>
   1090c:	b080038f 	ldh	r2,14(r22)
   10910:	10002d16 	blt	r2,zero,109c8 <___vfprintf_internal_r+0x13c>
   10914:	b240038b 	ldhu	r9,14(r22)
   10918:	b2800717 	ldw	r10,28(r22)
   1091c:	b2c00917 	ldw	r11,36(r22)
   10920:	d9014f17 	ldw	r4,1340(sp)
   10924:	dc402904 	addi	r17,sp,164
   10928:	d8804004 	addi	r2,sp,256
   1092c:	00c10004 	movi	r3,1024
   10930:	423fff4c 	andi	r8,r8,65533
   10934:	800d883a 	mov	r6,r16
   10938:	880b883a 	mov	r5,r17
   1093c:	da002c0d 	sth	r8,176(sp)
   10940:	da402c8d 	sth	r9,178(sp)
   10944:	da803015 	stw	r10,192(sp)
   10948:	dac03215 	stw	r11,200(sp)
   1094c:	d8802d15 	stw	r2,180(sp)
   10950:	d8c02e15 	stw	r3,184(sp)
   10954:	d8802915 	stw	r2,164(sp)
   10958:	d8c02b15 	stw	r3,172(sp)
   1095c:	d8002f15 	stw	zero,188(sp)
   10960:	001088c0 	call	1088c <___vfprintf_internal_r>
   10964:	d8814b15 	stw	r2,1324(sp)
   10968:	10000416 	blt	r2,zero,1097c <___vfprintf_internal_r+0xf0>
   1096c:	d9014f17 	ldw	r4,1340(sp)
   10970:	880b883a 	mov	r5,r17
   10974:	00140640 	call	14064 <_fflush_r>
   10978:	1002321e 	bne	r2,zero,11244 <___vfprintf_internal_r+0x9b8>
   1097c:	d8802c0b 	ldhu	r2,176(sp)
   10980:	1080100c 	andi	r2,r2,64
   10984:	10000326 	beq	r2,zero,10994 <___vfprintf_internal_r+0x108>
   10988:	b080030b 	ldhu	r2,12(r22)
   1098c:	10801014 	ori	r2,r2,64
   10990:	b080030d 	sth	r2,12(r22)
   10994:	d8814b17 	ldw	r2,1324(sp)
   10998:	dfc15b17 	ldw	ra,1388(sp)
   1099c:	df015a17 	ldw	fp,1384(sp)
   109a0:	ddc15917 	ldw	r23,1380(sp)
   109a4:	dd815817 	ldw	r22,1376(sp)
   109a8:	dd415717 	ldw	r21,1372(sp)
   109ac:	dd015617 	ldw	r20,1368(sp)
   109b0:	dcc15517 	ldw	r19,1364(sp)
   109b4:	dc815417 	ldw	r18,1360(sp)
   109b8:	dc415317 	ldw	r17,1356(sp)
   109bc:	dc015217 	ldw	r16,1352(sp)
   109c0:	dec15c04 	addi	sp,sp,1392
   109c4:	f800283a 	ret
   109c8:	0005883a 	mov	r2,zero
   109cc:	0007883a 	mov	r3,zero
   109d0:	dd401904 	addi	r21,sp,100
   109d4:	d8814215 	stw	r2,1288(sp)
   109d8:	802f883a 	mov	r23,r16
   109dc:	d8c14315 	stw	r3,1292(sp)
   109e0:	d8014b15 	stw	zero,1324(sp)
   109e4:	d8014815 	stw	zero,1312(sp)
   109e8:	d8014415 	stw	zero,1296(sp)
   109ec:	d8014715 	stw	zero,1308(sp)
   109f0:	dd400c15 	stw	r21,48(sp)
   109f4:	d8000e15 	stw	zero,56(sp)
   109f8:	d8000d15 	stw	zero,52(sp)
   109fc:	b8800007 	ldb	r2,0(r23)
   10a00:	10001926 	beq	r2,zero,10a68 <___vfprintf_internal_r+0x1dc>
   10a04:	00c00944 	movi	r3,37
   10a08:	10c01726 	beq	r2,r3,10a68 <___vfprintf_internal_r+0x1dc>
   10a0c:	b821883a 	mov	r16,r23
   10a10:	00000106 	br	10a18 <___vfprintf_internal_r+0x18c>
   10a14:	10c00326 	beq	r2,r3,10a24 <___vfprintf_internal_r+0x198>
   10a18:	84000044 	addi	r16,r16,1
   10a1c:	80800007 	ldb	r2,0(r16)
   10a20:	103ffc1e 	bne	r2,zero,10a14 <___vfprintf_internal_r+0x188>
   10a24:	85e7c83a 	sub	r19,r16,r23
   10a28:	98000e26 	beq	r19,zero,10a64 <___vfprintf_internal_r+0x1d8>
   10a2c:	dc800e17 	ldw	r18,56(sp)
   10a30:	dc400d17 	ldw	r17,52(sp)
   10a34:	008001c4 	movi	r2,7
   10a38:	94e5883a 	add	r18,r18,r19
   10a3c:	8c400044 	addi	r17,r17,1
   10a40:	adc00015 	stw	r23,0(r21)
   10a44:	dc800e15 	stw	r18,56(sp)
   10a48:	acc00115 	stw	r19,4(r21)
   10a4c:	dc400d15 	stw	r17,52(sp)
   10a50:	14428b16 	blt	r2,r17,11480 <___vfprintf_internal_r+0xbf4>
   10a54:	ad400204 	addi	r21,r21,8
   10a58:	d9014b17 	ldw	r4,1324(sp)
   10a5c:	24c9883a 	add	r4,r4,r19
   10a60:	d9014b15 	stw	r4,1324(sp)
   10a64:	802f883a 	mov	r23,r16
   10a68:	b8800007 	ldb	r2,0(r23)
   10a6c:	10013c26 	beq	r2,zero,10f60 <___vfprintf_internal_r+0x6d4>
   10a70:	bdc00044 	addi	r23,r23,1
   10a74:	d8000405 	stb	zero,16(sp)
   10a78:	b8c00007 	ldb	r3,0(r23)
   10a7c:	04ffffc4 	movi	r19,-1
   10a80:	d8014c15 	stw	zero,1328(sp)
   10a84:	d8014a15 	stw	zero,1320(sp)
   10a88:	d8c14d15 	stw	r3,1332(sp)
   10a8c:	bdc00044 	addi	r23,r23,1
   10a90:	d9414d17 	ldw	r5,1332(sp)
   10a94:	00801604 	movi	r2,88
   10a98:	28fff804 	addi	r3,r5,-32
   10a9c:	10c06036 	bltu	r2,r3,10c20 <___vfprintf_internal_r+0x394>
   10aa0:	18c5883a 	add	r2,r3,r3
   10aa4:	1085883a 	add	r2,r2,r2
   10aa8:	00c00074 	movhi	r3,1
   10aac:	18c2af04 	addi	r3,r3,2748
   10ab0:	10c5883a 	add	r2,r2,r3
   10ab4:	11000017 	ldw	r4,0(r2)
   10ab8:	2000683a 	jmp	r4
   10abc:	00011a30 	cmpltui	zero,zero,1128
   10ac0:	00010c20 	cmpeqi	zero,zero,1072
   10ac4:	00010c20 	cmpeqi	zero,zero,1072
   10ac8:	00011a1c 	xori	zero,zero,1128
   10acc:	00010c20 	cmpeqi	zero,zero,1072
   10ad0:	00010c20 	cmpeqi	zero,zero,1072
   10ad4:	00010c20 	cmpeqi	zero,zero,1072
   10ad8:	00010c20 	cmpeqi	zero,zero,1072
   10adc:	00010c20 	cmpeqi	zero,zero,1072
   10ae0:	00010c20 	cmpeqi	zero,zero,1072
   10ae4:	000117fc 	xorhi	zero,zero,1119
   10ae8:	00011a0c 	andi	zero,zero,1128
   10aec:	00010c20 	cmpeqi	zero,zero,1072
   10af0:	00011814 	movui	zero,1120
   10af4:	00011aa8 	cmpgeui	zero,zero,1130
   10af8:	00010c20 	cmpeqi	zero,zero,1072
   10afc:	00011a94 	movui	zero,1130
   10b00:	00011a5c 	xori	zero,zero,1129
   10b04:	00011a5c 	xori	zero,zero,1129
   10b08:	00011a5c 	xori	zero,zero,1129
   10b0c:	00011a5c 	xori	zero,zero,1129
   10b10:	00011a5c 	xori	zero,zero,1129
   10b14:	00011a5c 	xori	zero,zero,1129
   10b18:	00011a5c 	xori	zero,zero,1129
   10b1c:	00011a5c 	xori	zero,zero,1129
   10b20:	00011a5c 	xori	zero,zero,1129
   10b24:	00010c20 	cmpeqi	zero,zero,1072
   10b28:	00010c20 	cmpeqi	zero,zero,1072
   10b2c:	00010c20 	cmpeqi	zero,zero,1072
   10b30:	00010c20 	cmpeqi	zero,zero,1072
   10b34:	00010c20 	cmpeqi	zero,zero,1072
   10b38:	00010c20 	cmpeqi	zero,zero,1072
   10b3c:	00010c20 	cmpeqi	zero,zero,1072
   10b40:	00010c20 	cmpeqi	zero,zero,1072
   10b44:	00010c20 	cmpeqi	zero,zero,1072
   10b48:	00010c20 	cmpeqi	zero,zero,1072
   10b4c:	00011278 	rdprs	zero,zero,1097
   10b50:	000118e4 	muli	zero,zero,1123
   10b54:	00010c20 	cmpeqi	zero,zero,1072
   10b58:	000118e4 	muli	zero,zero,1123
   10b5c:	00010c20 	cmpeqi	zero,zero,1072
   10b60:	00010c20 	cmpeqi	zero,zero,1072
   10b64:	00010c20 	cmpeqi	zero,zero,1072
   10b68:	00010c20 	cmpeqi	zero,zero,1072
   10b6c:	00011a48 	cmpgei	zero,zero,1129
   10b70:	00010c20 	cmpeqi	zero,zero,1072
   10b74:	00010c20 	cmpeqi	zero,zero,1072
   10b78:	0001132c 	andhi	zero,zero,1100
   10b7c:	00010c20 	cmpeqi	zero,zero,1072
   10b80:	00010c20 	cmpeqi	zero,zero,1072
   10b84:	00010c20 	cmpeqi	zero,zero,1072
   10b88:	00010c20 	cmpeqi	zero,zero,1072
   10b8c:	00010c20 	cmpeqi	zero,zero,1072
   10b90:	00011378 	rdprs	zero,zero,1101
   10b94:	00010c20 	cmpeqi	zero,zero,1072
   10b98:	00010c20 	cmpeqi	zero,zero,1072
   10b9c:	00011998 	cmpnei	zero,zero,1126
   10ba0:	00010c20 	cmpeqi	zero,zero,1072
   10ba4:	00010c20 	cmpeqi	zero,zero,1072
   10ba8:	00010c20 	cmpeqi	zero,zero,1072
   10bac:	00010c20 	cmpeqi	zero,zero,1072
   10bb0:	00010c20 	cmpeqi	zero,zero,1072
   10bb4:	00010c20 	cmpeqi	zero,zero,1072
   10bb8:	00010c20 	cmpeqi	zero,zero,1072
   10bbc:	00010c20 	cmpeqi	zero,zero,1072
   10bc0:	00010c20 	cmpeqi	zero,zero,1072
   10bc4:	00010c20 	cmpeqi	zero,zero,1072
   10bc8:	0001196c 	andhi	zero,zero,1125
   10bcc:	00011284 	movi	zero,1098
   10bd0:	000118e4 	muli	zero,zero,1123
   10bd4:	000118e4 	muli	zero,zero,1123
   10bd8:	000118e4 	muli	zero,zero,1123
   10bdc:	000118d0 	cmplti	zero,zero,1123
   10be0:	00011284 	movi	zero,1098
   10be4:	00010c20 	cmpeqi	zero,zero,1072
   10be8:	00010c20 	cmpeqi	zero,zero,1072
   10bec:	00011858 	cmpnei	zero,zero,1121
   10bf0:	00010c20 	cmpeqi	zero,zero,1072
   10bf4:	00011828 	cmpgeui	zero,zero,1120
   10bf8:	00011338 	rdprs	zero,zero,1100
   10bfc:	00011888 	cmpgei	zero,zero,1122
   10c00:	00011874 	movhi	zero,1121
   10c04:	00010c20 	cmpeqi	zero,zero,1072
   10c08:	00011b04 	movi	zero,1132
   10c0c:	00010c20 	cmpeqi	zero,zero,1072
   10c10:	00011384 	movi	zero,1102
   10c14:	00010c20 	cmpeqi	zero,zero,1072
   10c18:	00010c20 	cmpeqi	zero,zero,1072
   10c1c:	000119fc 	xorhi	zero,zero,1127
   10c20:	d9014d17 	ldw	r4,1332(sp)
   10c24:	2000ce26 	beq	r4,zero,10f60 <___vfprintf_internal_r+0x6d4>
   10c28:	01400044 	movi	r5,1
   10c2c:	d9800f04 	addi	r6,sp,60
   10c30:	d9c14015 	stw	r7,1280(sp)
   10c34:	d9414515 	stw	r5,1300(sp)
   10c38:	d9814115 	stw	r6,1284(sp)
   10c3c:	280f883a 	mov	r7,r5
   10c40:	d9000f05 	stb	r4,60(sp)
   10c44:	d8000405 	stb	zero,16(sp)
   10c48:	d8014615 	stw	zero,1304(sp)
   10c4c:	d8c14c17 	ldw	r3,1328(sp)
   10c50:	1880008c 	andi	r2,r3,2
   10c54:	1005003a 	cmpeq	r2,r2,zero
   10c58:	d8815015 	stw	r2,1344(sp)
   10c5c:	1000031e 	bne	r2,zero,10c6c <___vfprintf_internal_r+0x3e0>
   10c60:	d9014517 	ldw	r4,1300(sp)
   10c64:	21000084 	addi	r4,r4,2
   10c68:	d9014515 	stw	r4,1300(sp)
   10c6c:	d9414c17 	ldw	r5,1328(sp)
   10c70:	2940210c 	andi	r5,r5,132
   10c74:	d9414e15 	stw	r5,1336(sp)
   10c78:	28002d1e 	bne	r5,zero,10d30 <___vfprintf_internal_r+0x4a4>
   10c7c:	d9814a17 	ldw	r6,1320(sp)
   10c80:	d8814517 	ldw	r2,1300(sp)
   10c84:	30a1c83a 	sub	r16,r6,r2
   10c88:	0400290e 	bge	zero,r16,10d30 <___vfprintf_internal_r+0x4a4>
   10c8c:	00800404 	movi	r2,16
   10c90:	1404580e 	bge	r2,r16,11df4 <___vfprintf_internal_r+0x1568>
   10c94:	dc800e17 	ldw	r18,56(sp)
   10c98:	dc400d17 	ldw	r17,52(sp)
   10c9c:	1027883a 	mov	r19,r2
   10ca0:	070000f4 	movhi	fp,3
   10ca4:	e7206284 	addi	fp,fp,-32374
   10ca8:	050001c4 	movi	r20,7
   10cac:	00000306 	br	10cbc <___vfprintf_internal_r+0x430>
   10cb0:	843ffc04 	addi	r16,r16,-16
   10cb4:	ad400204 	addi	r21,r21,8
   10cb8:	9c00130e 	bge	r19,r16,10d08 <___vfprintf_internal_r+0x47c>
   10cbc:	94800404 	addi	r18,r18,16
   10cc0:	8c400044 	addi	r17,r17,1
   10cc4:	af000015 	stw	fp,0(r21)
   10cc8:	acc00115 	stw	r19,4(r21)
   10ccc:	dc800e15 	stw	r18,56(sp)
   10cd0:	dc400d15 	stw	r17,52(sp)
   10cd4:	a47ff60e 	bge	r20,r17,10cb0 <___vfprintf_internal_r+0x424>
   10cd8:	d9014f17 	ldw	r4,1340(sp)
   10cdc:	b00b883a 	mov	r5,r22
   10ce0:	d9800c04 	addi	r6,sp,48
   10ce4:	d9c15115 	stw	r7,1348(sp)
   10ce8:	00108340 	call	10834 <__sprint_r>
   10cec:	d9c15117 	ldw	r7,1348(sp)
   10cf0:	10009e1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   10cf4:	843ffc04 	addi	r16,r16,-16
   10cf8:	dc800e17 	ldw	r18,56(sp)
   10cfc:	dc400d17 	ldw	r17,52(sp)
   10d00:	dd401904 	addi	r21,sp,100
   10d04:	9c3fed16 	blt	r19,r16,10cbc <___vfprintf_internal_r+0x430>
   10d08:	9425883a 	add	r18,r18,r16
   10d0c:	8c400044 	addi	r17,r17,1
   10d10:	008001c4 	movi	r2,7
   10d14:	af000015 	stw	fp,0(r21)
   10d18:	ac000115 	stw	r16,4(r21)
   10d1c:	dc800e15 	stw	r18,56(sp)
   10d20:	dc400d15 	stw	r17,52(sp)
   10d24:	1441f516 	blt	r2,r17,114fc <___vfprintf_internal_r+0xc70>
   10d28:	ad400204 	addi	r21,r21,8
   10d2c:	00000206 	br	10d38 <___vfprintf_internal_r+0x4ac>
   10d30:	dc800e17 	ldw	r18,56(sp)
   10d34:	dc400d17 	ldw	r17,52(sp)
   10d38:	d8800407 	ldb	r2,16(sp)
   10d3c:	10000b26 	beq	r2,zero,10d6c <___vfprintf_internal_r+0x4e0>
   10d40:	00800044 	movi	r2,1
   10d44:	94800044 	addi	r18,r18,1
   10d48:	8c400044 	addi	r17,r17,1
   10d4c:	a8800115 	stw	r2,4(r21)
   10d50:	d8c00404 	addi	r3,sp,16
   10d54:	008001c4 	movi	r2,7
   10d58:	a8c00015 	stw	r3,0(r21)
   10d5c:	dc800e15 	stw	r18,56(sp)
   10d60:	dc400d15 	stw	r17,52(sp)
   10d64:	1441da16 	blt	r2,r17,114d0 <___vfprintf_internal_r+0xc44>
   10d68:	ad400204 	addi	r21,r21,8
   10d6c:	d9015017 	ldw	r4,1344(sp)
   10d70:	20000b1e 	bne	r4,zero,10da0 <___vfprintf_internal_r+0x514>
   10d74:	d8800444 	addi	r2,sp,17
   10d78:	94800084 	addi	r18,r18,2
   10d7c:	8c400044 	addi	r17,r17,1
   10d80:	a8800015 	stw	r2,0(r21)
   10d84:	00c00084 	movi	r3,2
   10d88:	008001c4 	movi	r2,7
   10d8c:	a8c00115 	stw	r3,4(r21)
   10d90:	dc800e15 	stw	r18,56(sp)
   10d94:	dc400d15 	stw	r17,52(sp)
   10d98:	1441c216 	blt	r2,r17,114a4 <___vfprintf_internal_r+0xc18>
   10d9c:	ad400204 	addi	r21,r21,8
   10da0:	d9414e17 	ldw	r5,1336(sp)
   10da4:	00802004 	movi	r2,128
   10da8:	2880b126 	beq	r5,r2,11070 <___vfprintf_internal_r+0x7e4>
   10dac:	d8c14617 	ldw	r3,1304(sp)
   10db0:	19e1c83a 	sub	r16,r3,r7
   10db4:	0400260e 	bge	zero,r16,10e50 <___vfprintf_internal_r+0x5c4>
   10db8:	00800404 	movi	r2,16
   10dbc:	1403c90e 	bge	r2,r16,11ce4 <___vfprintf_internal_r+0x1458>
   10dc0:	1027883a 	mov	r19,r2
   10dc4:	070000f4 	movhi	fp,3
   10dc8:	e7205e84 	addi	fp,fp,-32390
   10dcc:	050001c4 	movi	r20,7
   10dd0:	00000306 	br	10de0 <___vfprintf_internal_r+0x554>
   10dd4:	843ffc04 	addi	r16,r16,-16
   10dd8:	ad400204 	addi	r21,r21,8
   10ddc:	9c00130e 	bge	r19,r16,10e2c <___vfprintf_internal_r+0x5a0>
   10de0:	94800404 	addi	r18,r18,16
   10de4:	8c400044 	addi	r17,r17,1
   10de8:	af000015 	stw	fp,0(r21)
   10dec:	acc00115 	stw	r19,4(r21)
   10df0:	dc800e15 	stw	r18,56(sp)
   10df4:	dc400d15 	stw	r17,52(sp)
   10df8:	a47ff60e 	bge	r20,r17,10dd4 <___vfprintf_internal_r+0x548>
   10dfc:	d9014f17 	ldw	r4,1340(sp)
   10e00:	b00b883a 	mov	r5,r22
   10e04:	d9800c04 	addi	r6,sp,48
   10e08:	d9c15115 	stw	r7,1348(sp)
   10e0c:	00108340 	call	10834 <__sprint_r>
   10e10:	d9c15117 	ldw	r7,1348(sp)
   10e14:	1000551e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   10e18:	843ffc04 	addi	r16,r16,-16
   10e1c:	dc800e17 	ldw	r18,56(sp)
   10e20:	dc400d17 	ldw	r17,52(sp)
   10e24:	dd401904 	addi	r21,sp,100
   10e28:	9c3fed16 	blt	r19,r16,10de0 <___vfprintf_internal_r+0x554>
   10e2c:	9425883a 	add	r18,r18,r16
   10e30:	8c400044 	addi	r17,r17,1
   10e34:	008001c4 	movi	r2,7
   10e38:	af000015 	stw	fp,0(r21)
   10e3c:	ac000115 	stw	r16,4(r21)
   10e40:	dc800e15 	stw	r18,56(sp)
   10e44:	dc400d15 	stw	r17,52(sp)
   10e48:	14418216 	blt	r2,r17,11454 <___vfprintf_internal_r+0xbc8>
   10e4c:	ad400204 	addi	r21,r21,8
   10e50:	d9014c17 	ldw	r4,1328(sp)
   10e54:	2080400c 	andi	r2,r4,256
   10e58:	10004a1e 	bne	r2,zero,10f84 <___vfprintf_internal_r+0x6f8>
   10e5c:	d9414117 	ldw	r5,1284(sp)
   10e60:	91e5883a 	add	r18,r18,r7
   10e64:	8c400044 	addi	r17,r17,1
   10e68:	008001c4 	movi	r2,7
   10e6c:	a9400015 	stw	r5,0(r21)
   10e70:	a9c00115 	stw	r7,4(r21)
   10e74:	dc800e15 	stw	r18,56(sp)
   10e78:	dc400d15 	stw	r17,52(sp)
   10e7c:	14416716 	blt	r2,r17,1141c <___vfprintf_internal_r+0xb90>
   10e80:	a8c00204 	addi	r3,r21,8
   10e84:	d9814c17 	ldw	r6,1328(sp)
   10e88:	3080010c 	andi	r2,r6,4
   10e8c:	10002826 	beq	r2,zero,10f30 <___vfprintf_internal_r+0x6a4>
   10e90:	d8814a17 	ldw	r2,1320(sp)
   10e94:	d9014517 	ldw	r4,1300(sp)
   10e98:	1121c83a 	sub	r16,r2,r4
   10e9c:	0400240e 	bge	zero,r16,10f30 <___vfprintf_internal_r+0x6a4>
   10ea0:	00800404 	movi	r2,16
   10ea4:	14044f0e 	bge	r2,r16,11fe4 <___vfprintf_internal_r+0x1758>
   10ea8:	dc400d17 	ldw	r17,52(sp)
   10eac:	1027883a 	mov	r19,r2
   10eb0:	070000f4 	movhi	fp,3
   10eb4:	e7206284 	addi	fp,fp,-32374
   10eb8:	050001c4 	movi	r20,7
   10ebc:	00000306 	br	10ecc <___vfprintf_internal_r+0x640>
   10ec0:	843ffc04 	addi	r16,r16,-16
   10ec4:	18c00204 	addi	r3,r3,8
   10ec8:	9c00110e 	bge	r19,r16,10f10 <___vfprintf_internal_r+0x684>
   10ecc:	94800404 	addi	r18,r18,16
   10ed0:	8c400044 	addi	r17,r17,1
   10ed4:	1f000015 	stw	fp,0(r3)
   10ed8:	1cc00115 	stw	r19,4(r3)
   10edc:	dc800e15 	stw	r18,56(sp)
   10ee0:	dc400d15 	stw	r17,52(sp)
   10ee4:	a47ff60e 	bge	r20,r17,10ec0 <___vfprintf_internal_r+0x634>
   10ee8:	d9014f17 	ldw	r4,1340(sp)
   10eec:	b00b883a 	mov	r5,r22
   10ef0:	d9800c04 	addi	r6,sp,48
   10ef4:	00108340 	call	10834 <__sprint_r>
   10ef8:	10001c1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   10efc:	843ffc04 	addi	r16,r16,-16
   10f00:	dc800e17 	ldw	r18,56(sp)
   10f04:	dc400d17 	ldw	r17,52(sp)
   10f08:	d8c01904 	addi	r3,sp,100
   10f0c:	9c3fef16 	blt	r19,r16,10ecc <___vfprintf_internal_r+0x640>
   10f10:	9425883a 	add	r18,r18,r16
   10f14:	8c400044 	addi	r17,r17,1
   10f18:	008001c4 	movi	r2,7
   10f1c:	1f000015 	stw	fp,0(r3)
   10f20:	1c000115 	stw	r16,4(r3)
   10f24:	dc800e15 	stw	r18,56(sp)
   10f28:	dc400d15 	stw	r17,52(sp)
   10f2c:	1440cb16 	blt	r2,r17,1125c <___vfprintf_internal_r+0x9d0>
   10f30:	d8814a17 	ldw	r2,1320(sp)
   10f34:	d9414517 	ldw	r5,1300(sp)
   10f38:	1140010e 	bge	r2,r5,10f40 <___vfprintf_internal_r+0x6b4>
   10f3c:	2805883a 	mov	r2,r5
   10f40:	d9814b17 	ldw	r6,1324(sp)
   10f44:	308d883a 	add	r6,r6,r2
   10f48:	d9814b15 	stw	r6,1324(sp)
   10f4c:	90013b1e 	bne	r18,zero,1143c <___vfprintf_internal_r+0xbb0>
   10f50:	d9c14017 	ldw	r7,1280(sp)
   10f54:	dd401904 	addi	r21,sp,100
   10f58:	d8000d15 	stw	zero,52(sp)
   10f5c:	003ea706 	br	109fc <___vfprintf_internal_r+0x170>
   10f60:	d8800e17 	ldw	r2,56(sp)
   10f64:	10053f1e 	bne	r2,zero,12464 <___vfprintf_internal_r+0x1bd8>
   10f68:	d8000d15 	stw	zero,52(sp)
   10f6c:	b080030b 	ldhu	r2,12(r22)
   10f70:	1080100c 	andi	r2,r2,64
   10f74:	103e8726 	beq	r2,zero,10994 <___vfprintf_internal_r+0x108>
   10f78:	00bfffc4 	movi	r2,-1
   10f7c:	d8814b15 	stw	r2,1324(sp)
   10f80:	003e8406 	br	10994 <___vfprintf_internal_r+0x108>
   10f84:	d9814d17 	ldw	r6,1332(sp)
   10f88:	00801944 	movi	r2,101
   10f8c:	11806e16 	blt	r2,r6,11148 <___vfprintf_internal_r+0x8bc>
   10f90:	d9414717 	ldw	r5,1308(sp)
   10f94:	00c00044 	movi	r3,1
   10f98:	1943430e 	bge	r3,r5,11ca8 <___vfprintf_internal_r+0x141c>
   10f9c:	d8814117 	ldw	r2,1284(sp)
   10fa0:	94800044 	addi	r18,r18,1
   10fa4:	8c400044 	addi	r17,r17,1
   10fa8:	a8800015 	stw	r2,0(r21)
   10fac:	008001c4 	movi	r2,7
   10fb0:	a8c00115 	stw	r3,4(r21)
   10fb4:	dc800e15 	stw	r18,56(sp)
   10fb8:	dc400d15 	stw	r17,52(sp)
   10fbc:	1441ca16 	blt	r2,r17,116e8 <___vfprintf_internal_r+0xe5c>
   10fc0:	a8c00204 	addi	r3,r21,8
   10fc4:	d9014917 	ldw	r4,1316(sp)
   10fc8:	00800044 	movi	r2,1
   10fcc:	94800044 	addi	r18,r18,1
   10fd0:	8c400044 	addi	r17,r17,1
   10fd4:	18800115 	stw	r2,4(r3)
   10fd8:	008001c4 	movi	r2,7
   10fdc:	19000015 	stw	r4,0(r3)
   10fe0:	dc800e15 	stw	r18,56(sp)
   10fe4:	dc400d15 	stw	r17,52(sp)
   10fe8:	1441b616 	blt	r2,r17,116c4 <___vfprintf_internal_r+0xe38>
   10fec:	1cc00204 	addi	r19,r3,8
   10ff0:	d9014217 	ldw	r4,1288(sp)
   10ff4:	d9414317 	ldw	r5,1292(sp)
   10ff8:	000d883a 	mov	r6,zero
   10ffc:	000f883a 	mov	r7,zero
   11000:	00190dc0 	call	190dc <__nedf2>
   11004:	10017426 	beq	r2,zero,115d8 <___vfprintf_internal_r+0xd4c>
   11008:	d9414717 	ldw	r5,1308(sp)
   1100c:	d9814117 	ldw	r6,1284(sp)
   11010:	8c400044 	addi	r17,r17,1
   11014:	2c85883a 	add	r2,r5,r18
   11018:	14bfffc4 	addi	r18,r2,-1
   1101c:	28bfffc4 	addi	r2,r5,-1
   11020:	30c00044 	addi	r3,r6,1
   11024:	98800115 	stw	r2,4(r19)
   11028:	008001c4 	movi	r2,7
   1102c:	98c00015 	stw	r3,0(r19)
   11030:	dc800e15 	stw	r18,56(sp)
   11034:	dc400d15 	stw	r17,52(sp)
   11038:	14418e16 	blt	r2,r17,11674 <___vfprintf_internal_r+0xde8>
   1103c:	9cc00204 	addi	r19,r19,8
   11040:	d9414817 	ldw	r5,1312(sp)
   11044:	d8800804 	addi	r2,sp,32
   11048:	8c400044 	addi	r17,r17,1
   1104c:	9165883a 	add	r18,r18,r5
   11050:	98800015 	stw	r2,0(r19)
   11054:	008001c4 	movi	r2,7
   11058:	99400115 	stw	r5,4(r19)
   1105c:	dc800e15 	stw	r18,56(sp)
   11060:	dc400d15 	stw	r17,52(sp)
   11064:	1440ed16 	blt	r2,r17,1141c <___vfprintf_internal_r+0xb90>
   11068:	98c00204 	addi	r3,r19,8
   1106c:	003f8506 	br	10e84 <___vfprintf_internal_r+0x5f8>
   11070:	d9814a17 	ldw	r6,1320(sp)
   11074:	d8814517 	ldw	r2,1300(sp)
   11078:	30a1c83a 	sub	r16,r6,r2
   1107c:	043f4b0e 	bge	zero,r16,10dac <___vfprintf_internal_r+0x520>
   11080:	00800404 	movi	r2,16
   11084:	1404340e 	bge	r2,r16,12158 <___vfprintf_internal_r+0x18cc>
   11088:	1027883a 	mov	r19,r2
   1108c:	070000f4 	movhi	fp,3
   11090:	e7205e84 	addi	fp,fp,-32390
   11094:	050001c4 	movi	r20,7
   11098:	00000306 	br	110a8 <___vfprintf_internal_r+0x81c>
   1109c:	843ffc04 	addi	r16,r16,-16
   110a0:	ad400204 	addi	r21,r21,8
   110a4:	9c00130e 	bge	r19,r16,110f4 <___vfprintf_internal_r+0x868>
   110a8:	94800404 	addi	r18,r18,16
   110ac:	8c400044 	addi	r17,r17,1
   110b0:	af000015 	stw	fp,0(r21)
   110b4:	acc00115 	stw	r19,4(r21)
   110b8:	dc800e15 	stw	r18,56(sp)
   110bc:	dc400d15 	stw	r17,52(sp)
   110c0:	a47ff60e 	bge	r20,r17,1109c <___vfprintf_internal_r+0x810>
   110c4:	d9014f17 	ldw	r4,1340(sp)
   110c8:	b00b883a 	mov	r5,r22
   110cc:	d9800c04 	addi	r6,sp,48
   110d0:	d9c15115 	stw	r7,1348(sp)
   110d4:	00108340 	call	10834 <__sprint_r>
   110d8:	d9c15117 	ldw	r7,1348(sp)
   110dc:	103fa31e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   110e0:	843ffc04 	addi	r16,r16,-16
   110e4:	dc800e17 	ldw	r18,56(sp)
   110e8:	dc400d17 	ldw	r17,52(sp)
   110ec:	dd401904 	addi	r21,sp,100
   110f0:	9c3fed16 	blt	r19,r16,110a8 <___vfprintf_internal_r+0x81c>
   110f4:	9425883a 	add	r18,r18,r16
   110f8:	8c400044 	addi	r17,r17,1
   110fc:	008001c4 	movi	r2,7
   11100:	af000015 	stw	fp,0(r21)
   11104:	ac000115 	stw	r16,4(r21)
   11108:	dc800e15 	stw	r18,56(sp)
   1110c:	dc400d15 	stw	r17,52(sp)
   11110:	14416116 	blt	r2,r17,11698 <___vfprintf_internal_r+0xe0c>
   11114:	ad400204 	addi	r21,r21,8
   11118:	003f2406 	br	10dac <___vfprintf_internal_r+0x520>
   1111c:	d9014f17 	ldw	r4,1340(sp)
   11120:	00142fc0 	call	142fc <__sinit>
   11124:	d9c15117 	ldw	r7,1348(sp)
   11128:	003def06 	br	108e8 <___vfprintf_internal_r+0x5c>
   1112c:	d9014f17 	ldw	r4,1340(sp)
   11130:	b00b883a 	mov	r5,r22
   11134:	d9c15115 	stw	r7,1348(sp)
   11138:	001275c0 	call	1275c <__swsetup_r>
   1113c:	d9c15117 	ldw	r7,1348(sp)
   11140:	103dee26 	beq	r2,zero,108fc <___vfprintf_internal_r+0x70>
   11144:	003f8c06 	br	10f78 <___vfprintf_internal_r+0x6ec>
   11148:	d9014217 	ldw	r4,1288(sp)
   1114c:	d9414317 	ldw	r5,1292(sp)
   11150:	000d883a 	mov	r6,zero
   11154:	000f883a 	mov	r7,zero
   11158:	00190540 	call	19054 <__eqdf2>
   1115c:	1000f21e 	bne	r2,zero,11528 <___vfprintf_internal_r+0xc9c>
   11160:	008000f4 	movhi	r2,3
   11164:	10a05e04 	addi	r2,r2,-32392
   11168:	94800044 	addi	r18,r18,1
   1116c:	8c400044 	addi	r17,r17,1
   11170:	a8800015 	stw	r2,0(r21)
   11174:	00c00044 	movi	r3,1
   11178:	008001c4 	movi	r2,7
   1117c:	a8c00115 	stw	r3,4(r21)
   11180:	dc800e15 	stw	r18,56(sp)
   11184:	dc400d15 	stw	r17,52(sp)
   11188:	1442fa16 	blt	r2,r17,11d74 <___vfprintf_internal_r+0x14e8>
   1118c:	a8c00204 	addi	r3,r21,8
   11190:	d8800517 	ldw	r2,20(sp)
   11194:	d9014717 	ldw	r4,1308(sp)
   11198:	11015c0e 	bge	r2,r4,1170c <___vfprintf_internal_r+0xe80>
   1119c:	dc400d17 	ldw	r17,52(sp)
   111a0:	d9814917 	ldw	r6,1316(sp)
   111a4:	00800044 	movi	r2,1
   111a8:	94800044 	addi	r18,r18,1
   111ac:	8c400044 	addi	r17,r17,1
   111b0:	18800115 	stw	r2,4(r3)
   111b4:	008001c4 	movi	r2,7
   111b8:	19800015 	stw	r6,0(r3)
   111bc:	dc800e15 	stw	r18,56(sp)
   111c0:	dc400d15 	stw	r17,52(sp)
   111c4:	14431016 	blt	r2,r17,11e08 <___vfprintf_internal_r+0x157c>
   111c8:	18c00204 	addi	r3,r3,8
   111cc:	d8814717 	ldw	r2,1308(sp)
   111d0:	143fffc4 	addi	r16,r2,-1
   111d4:	043f2b0e 	bge	zero,r16,10e84 <___vfprintf_internal_r+0x5f8>
   111d8:	00800404 	movi	r2,16
   111dc:	1402a20e 	bge	r2,r16,11c68 <___vfprintf_internal_r+0x13dc>
   111e0:	dc400d17 	ldw	r17,52(sp)
   111e4:	1027883a 	mov	r19,r2
   111e8:	070000f4 	movhi	fp,3
   111ec:	e7205e84 	addi	fp,fp,-32390
   111f0:	050001c4 	movi	r20,7
   111f4:	00000306 	br	11204 <___vfprintf_internal_r+0x978>
   111f8:	18c00204 	addi	r3,r3,8
   111fc:	843ffc04 	addi	r16,r16,-16
   11200:	9c029c0e 	bge	r19,r16,11c74 <___vfprintf_internal_r+0x13e8>
   11204:	94800404 	addi	r18,r18,16
   11208:	8c400044 	addi	r17,r17,1
   1120c:	1f000015 	stw	fp,0(r3)
   11210:	1cc00115 	stw	r19,4(r3)
   11214:	dc800e15 	stw	r18,56(sp)
   11218:	dc400d15 	stw	r17,52(sp)
   1121c:	a47ff60e 	bge	r20,r17,111f8 <___vfprintf_internal_r+0x96c>
   11220:	d9014f17 	ldw	r4,1340(sp)
   11224:	b00b883a 	mov	r5,r22
   11228:	d9800c04 	addi	r6,sp,48
   1122c:	00108340 	call	10834 <__sprint_r>
   11230:	103f4e1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   11234:	dc800e17 	ldw	r18,56(sp)
   11238:	dc400d17 	ldw	r17,52(sp)
   1123c:	d8c01904 	addi	r3,sp,100
   11240:	003fee06 	br	111fc <___vfprintf_internal_r+0x970>
   11244:	d8802c0b 	ldhu	r2,176(sp)
   11248:	00ffffc4 	movi	r3,-1
   1124c:	d8c14b15 	stw	r3,1324(sp)
   11250:	1080100c 	andi	r2,r2,64
   11254:	103dcc1e 	bne	r2,zero,10988 <___vfprintf_internal_r+0xfc>
   11258:	003dce06 	br	10994 <___vfprintf_internal_r+0x108>
   1125c:	d9014f17 	ldw	r4,1340(sp)
   11260:	b00b883a 	mov	r5,r22
   11264:	d9800c04 	addi	r6,sp,48
   11268:	00108340 	call	10834 <__sprint_r>
   1126c:	103f3f1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   11270:	dc800e17 	ldw	r18,56(sp)
   11274:	003f2e06 	br	10f30 <___vfprintf_internal_r+0x6a4>
   11278:	d9414c17 	ldw	r5,1328(sp)
   1127c:	29400414 	ori	r5,r5,16
   11280:	d9414c15 	stw	r5,1328(sp)
   11284:	d9814c17 	ldw	r6,1328(sp)
   11288:	3080080c 	andi	r2,r6,32
   1128c:	10014f1e 	bne	r2,zero,117cc <___vfprintf_internal_r+0xf40>
   11290:	d8c14c17 	ldw	r3,1328(sp)
   11294:	1880040c 	andi	r2,r3,16
   11298:	1002ea1e 	bne	r2,zero,11e44 <___vfprintf_internal_r+0x15b8>
   1129c:	d9014c17 	ldw	r4,1328(sp)
   112a0:	2080100c 	andi	r2,r4,64
   112a4:	1002e726 	beq	r2,zero,11e44 <___vfprintf_internal_r+0x15b8>
   112a8:	3880000f 	ldh	r2,0(r7)
   112ac:	39c00104 	addi	r7,r7,4
   112b0:	d9c14015 	stw	r7,1280(sp)
   112b4:	1023d7fa 	srai	r17,r2,31
   112b8:	1021883a 	mov	r16,r2
   112bc:	88037216 	blt	r17,zero,12088 <___vfprintf_internal_r+0x17fc>
   112c0:	01000044 	movi	r4,1
   112c4:	98000416 	blt	r19,zero,112d8 <___vfprintf_internal_r+0xa4c>
   112c8:	d8c14c17 	ldw	r3,1328(sp)
   112cc:	00bfdfc4 	movi	r2,-129
   112d0:	1886703a 	and	r3,r3,r2
   112d4:	d8c14c15 	stw	r3,1328(sp)
   112d8:	8444b03a 	or	r2,r16,r17
   112dc:	1002261e 	bne	r2,zero,11b78 <___vfprintf_internal_r+0x12ec>
   112e0:	9802251e 	bne	r19,zero,11b78 <___vfprintf_internal_r+0x12ec>
   112e4:	20803fcc 	andi	r2,r4,255
   112e8:	10029b26 	beq	r2,zero,11d58 <___vfprintf_internal_r+0x14cc>
   112ec:	d8c01904 	addi	r3,sp,100
   112f0:	dd000f04 	addi	r20,sp,60
   112f4:	d8c14115 	stw	r3,1284(sp)
   112f8:	d8c14117 	ldw	r3,1284(sp)
   112fc:	dcc14515 	stw	r19,1300(sp)
   11300:	a0c5c83a 	sub	r2,r20,r3
   11304:	11c00a04 	addi	r7,r2,40
   11308:	99c0010e 	bge	r19,r7,11310 <___vfprintf_internal_r+0xa84>
   1130c:	d9c14515 	stw	r7,1300(sp)
   11310:	dcc14615 	stw	r19,1304(sp)
   11314:	d8800407 	ldb	r2,16(sp)
   11318:	103e4c26 	beq	r2,zero,10c4c <___vfprintf_internal_r+0x3c0>
   1131c:	d8814517 	ldw	r2,1300(sp)
   11320:	10800044 	addi	r2,r2,1
   11324:	d8814515 	stw	r2,1300(sp)
   11328:	003e4806 	br	10c4c <___vfprintf_internal_r+0x3c0>
   1132c:	d9814c17 	ldw	r6,1328(sp)
   11330:	31800414 	ori	r6,r6,16
   11334:	d9814c15 	stw	r6,1328(sp)
   11338:	d8c14c17 	ldw	r3,1328(sp)
   1133c:	1880080c 	andi	r2,r3,32
   11340:	1001271e 	bne	r2,zero,117e0 <___vfprintf_internal_r+0xf54>
   11344:	d9414c17 	ldw	r5,1328(sp)
   11348:	2880040c 	andi	r2,r5,16
   1134c:	1002b61e 	bne	r2,zero,11e28 <___vfprintf_internal_r+0x159c>
   11350:	d9814c17 	ldw	r6,1328(sp)
   11354:	3080100c 	andi	r2,r6,64
   11358:	1002b326 	beq	r2,zero,11e28 <___vfprintf_internal_r+0x159c>
   1135c:	3c00000b 	ldhu	r16,0(r7)
   11360:	0009883a 	mov	r4,zero
   11364:	39c00104 	addi	r7,r7,4
   11368:	0023883a 	mov	r17,zero
   1136c:	d9c14015 	stw	r7,1280(sp)
   11370:	d8000405 	stb	zero,16(sp)
   11374:	003fd306 	br	112c4 <___vfprintf_internal_r+0xa38>
   11378:	d9014c17 	ldw	r4,1328(sp)
   1137c:	21000414 	ori	r4,r4,16
   11380:	d9014c15 	stw	r4,1328(sp)
   11384:	d9414c17 	ldw	r5,1328(sp)
   11388:	2880080c 	andi	r2,r5,32
   1138c:	1001081e 	bne	r2,zero,117b0 <___vfprintf_internal_r+0xf24>
   11390:	d8c14c17 	ldw	r3,1328(sp)
   11394:	1880040c 	andi	r2,r3,16
   11398:	1002b01e 	bne	r2,zero,11e5c <___vfprintf_internal_r+0x15d0>
   1139c:	d9014c17 	ldw	r4,1328(sp)
   113a0:	2080100c 	andi	r2,r4,64
   113a4:	1002ad26 	beq	r2,zero,11e5c <___vfprintf_internal_r+0x15d0>
   113a8:	3c00000b 	ldhu	r16,0(r7)
   113ac:	01000044 	movi	r4,1
   113b0:	39c00104 	addi	r7,r7,4
   113b4:	0023883a 	mov	r17,zero
   113b8:	d9c14015 	stw	r7,1280(sp)
   113bc:	d8000405 	stb	zero,16(sp)
   113c0:	003fc006 	br	112c4 <___vfprintf_internal_r+0xa38>
   113c4:	d9014f17 	ldw	r4,1340(sp)
   113c8:	b00b883a 	mov	r5,r22
   113cc:	d9800c04 	addi	r6,sp,48
   113d0:	00108340 	call	10834 <__sprint_r>
   113d4:	103ee51e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   113d8:	dc800e17 	ldw	r18,56(sp)
   113dc:	d8c01904 	addi	r3,sp,100
   113e0:	d9814c17 	ldw	r6,1328(sp)
   113e4:	3080004c 	andi	r2,r6,1
   113e8:	1005003a 	cmpeq	r2,r2,zero
   113ec:	103ea51e 	bne	r2,zero,10e84 <___vfprintf_internal_r+0x5f8>
   113f0:	00800044 	movi	r2,1
   113f4:	dc400d17 	ldw	r17,52(sp)
   113f8:	18800115 	stw	r2,4(r3)
   113fc:	d8814917 	ldw	r2,1316(sp)
   11400:	94800044 	addi	r18,r18,1
   11404:	8c400044 	addi	r17,r17,1
   11408:	18800015 	stw	r2,0(r3)
   1140c:	008001c4 	movi	r2,7
   11410:	dc800e15 	stw	r18,56(sp)
   11414:	dc400d15 	stw	r17,52(sp)
   11418:	14421e0e 	bge	r2,r17,11c94 <___vfprintf_internal_r+0x1408>
   1141c:	d9014f17 	ldw	r4,1340(sp)
   11420:	b00b883a 	mov	r5,r22
   11424:	d9800c04 	addi	r6,sp,48
   11428:	00108340 	call	10834 <__sprint_r>
   1142c:	103ecf1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   11430:	dc800e17 	ldw	r18,56(sp)
   11434:	d8c01904 	addi	r3,sp,100
   11438:	003e9206 	br	10e84 <___vfprintf_internal_r+0x5f8>
   1143c:	d9014f17 	ldw	r4,1340(sp)
   11440:	b00b883a 	mov	r5,r22
   11444:	d9800c04 	addi	r6,sp,48
   11448:	00108340 	call	10834 <__sprint_r>
   1144c:	103ec026 	beq	r2,zero,10f50 <___vfprintf_internal_r+0x6c4>
   11450:	003ec606 	br	10f6c <___vfprintf_internal_r+0x6e0>
   11454:	d9014f17 	ldw	r4,1340(sp)
   11458:	b00b883a 	mov	r5,r22
   1145c:	d9800c04 	addi	r6,sp,48
   11460:	d9c15115 	stw	r7,1348(sp)
   11464:	00108340 	call	10834 <__sprint_r>
   11468:	d9c15117 	ldw	r7,1348(sp)
   1146c:	103ebf1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   11470:	dc800e17 	ldw	r18,56(sp)
   11474:	dc400d17 	ldw	r17,52(sp)
   11478:	dd401904 	addi	r21,sp,100
   1147c:	003e7406 	br	10e50 <___vfprintf_internal_r+0x5c4>
   11480:	d9014f17 	ldw	r4,1340(sp)
   11484:	b00b883a 	mov	r5,r22
   11488:	d9800c04 	addi	r6,sp,48
   1148c:	d9c15115 	stw	r7,1348(sp)
   11490:	00108340 	call	10834 <__sprint_r>
   11494:	d9c15117 	ldw	r7,1348(sp)
   11498:	103eb41e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   1149c:	dd401904 	addi	r21,sp,100
   114a0:	003d6d06 	br	10a58 <___vfprintf_internal_r+0x1cc>
   114a4:	d9014f17 	ldw	r4,1340(sp)
   114a8:	b00b883a 	mov	r5,r22
   114ac:	d9800c04 	addi	r6,sp,48
   114b0:	d9c15115 	stw	r7,1348(sp)
   114b4:	00108340 	call	10834 <__sprint_r>
   114b8:	d9c15117 	ldw	r7,1348(sp)
   114bc:	103eab1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   114c0:	dc800e17 	ldw	r18,56(sp)
   114c4:	dc400d17 	ldw	r17,52(sp)
   114c8:	dd401904 	addi	r21,sp,100
   114cc:	003e3406 	br	10da0 <___vfprintf_internal_r+0x514>
   114d0:	d9014f17 	ldw	r4,1340(sp)
   114d4:	b00b883a 	mov	r5,r22
   114d8:	d9800c04 	addi	r6,sp,48
   114dc:	d9c15115 	stw	r7,1348(sp)
   114e0:	00108340 	call	10834 <__sprint_r>
   114e4:	d9c15117 	ldw	r7,1348(sp)
   114e8:	103ea01e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   114ec:	dc800e17 	ldw	r18,56(sp)
   114f0:	dc400d17 	ldw	r17,52(sp)
   114f4:	dd401904 	addi	r21,sp,100
   114f8:	003e1c06 	br	10d6c <___vfprintf_internal_r+0x4e0>
   114fc:	d9014f17 	ldw	r4,1340(sp)
   11500:	b00b883a 	mov	r5,r22
   11504:	d9800c04 	addi	r6,sp,48
   11508:	d9c15115 	stw	r7,1348(sp)
   1150c:	00108340 	call	10834 <__sprint_r>
   11510:	d9c15117 	ldw	r7,1348(sp)
   11514:	103e951e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   11518:	dc800e17 	ldw	r18,56(sp)
   1151c:	dc400d17 	ldw	r17,52(sp)
   11520:	dd401904 	addi	r21,sp,100
   11524:	003e0406 	br	10d38 <___vfprintf_internal_r+0x4ac>
   11528:	d9000517 	ldw	r4,20(sp)
   1152c:	0102520e 	bge	zero,r4,11e78 <___vfprintf_internal_r+0x15ec>
   11530:	d9814717 	ldw	r6,1308(sp)
   11534:	21807a16 	blt	r4,r6,11720 <___vfprintf_internal_r+0xe94>
   11538:	d8814117 	ldw	r2,1284(sp)
   1153c:	91a5883a 	add	r18,r18,r6
   11540:	8c400044 	addi	r17,r17,1
   11544:	a8800015 	stw	r2,0(r21)
   11548:	008001c4 	movi	r2,7
   1154c:	a9800115 	stw	r6,4(r21)
   11550:	dc800e15 	stw	r18,56(sp)
   11554:	dc400d15 	stw	r17,52(sp)
   11558:	1442f616 	blt	r2,r17,12134 <___vfprintf_internal_r+0x18a8>
   1155c:	a8c00204 	addi	r3,r21,8
   11560:	d9414717 	ldw	r5,1308(sp)
   11564:	2161c83a 	sub	r16,r4,r5
   11568:	043f9d0e 	bge	zero,r16,113e0 <___vfprintf_internal_r+0xb54>
   1156c:	00800404 	movi	r2,16
   11570:	1402130e 	bge	r2,r16,11dc0 <___vfprintf_internal_r+0x1534>
   11574:	dc400d17 	ldw	r17,52(sp)
   11578:	1027883a 	mov	r19,r2
   1157c:	070000f4 	movhi	fp,3
   11580:	e7205e84 	addi	fp,fp,-32390
   11584:	050001c4 	movi	r20,7
   11588:	00000306 	br	11598 <___vfprintf_internal_r+0xd0c>
   1158c:	18c00204 	addi	r3,r3,8
   11590:	843ffc04 	addi	r16,r16,-16
   11594:	9c020d0e 	bge	r19,r16,11dcc <___vfprintf_internal_r+0x1540>
   11598:	94800404 	addi	r18,r18,16
   1159c:	8c400044 	addi	r17,r17,1
   115a0:	1f000015 	stw	fp,0(r3)
   115a4:	1cc00115 	stw	r19,4(r3)
   115a8:	dc800e15 	stw	r18,56(sp)
   115ac:	dc400d15 	stw	r17,52(sp)
   115b0:	a47ff60e 	bge	r20,r17,1158c <___vfprintf_internal_r+0xd00>
   115b4:	d9014f17 	ldw	r4,1340(sp)
   115b8:	b00b883a 	mov	r5,r22
   115bc:	d9800c04 	addi	r6,sp,48
   115c0:	00108340 	call	10834 <__sprint_r>
   115c4:	103e691e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   115c8:	dc800e17 	ldw	r18,56(sp)
   115cc:	dc400d17 	ldw	r17,52(sp)
   115d0:	d8c01904 	addi	r3,sp,100
   115d4:	003fee06 	br	11590 <___vfprintf_internal_r+0xd04>
   115d8:	d8814717 	ldw	r2,1308(sp)
   115dc:	143fffc4 	addi	r16,r2,-1
   115e0:	043e970e 	bge	zero,r16,11040 <___vfprintf_internal_r+0x7b4>
   115e4:	00800404 	movi	r2,16
   115e8:	1400180e 	bge	r2,r16,1164c <___vfprintf_internal_r+0xdc0>
   115ec:	1029883a 	mov	r20,r2
   115f0:	070000f4 	movhi	fp,3
   115f4:	e7205e84 	addi	fp,fp,-32390
   115f8:	054001c4 	movi	r21,7
   115fc:	00000306 	br	1160c <___vfprintf_internal_r+0xd80>
   11600:	9cc00204 	addi	r19,r19,8
   11604:	843ffc04 	addi	r16,r16,-16
   11608:	a400120e 	bge	r20,r16,11654 <___vfprintf_internal_r+0xdc8>
   1160c:	94800404 	addi	r18,r18,16
   11610:	8c400044 	addi	r17,r17,1
   11614:	9f000015 	stw	fp,0(r19)
   11618:	9d000115 	stw	r20,4(r19)
   1161c:	dc800e15 	stw	r18,56(sp)
   11620:	dc400d15 	stw	r17,52(sp)
   11624:	ac7ff60e 	bge	r21,r17,11600 <___vfprintf_internal_r+0xd74>
   11628:	d9014f17 	ldw	r4,1340(sp)
   1162c:	b00b883a 	mov	r5,r22
   11630:	d9800c04 	addi	r6,sp,48
   11634:	00108340 	call	10834 <__sprint_r>
   11638:	103e4c1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   1163c:	dc800e17 	ldw	r18,56(sp)
   11640:	dc400d17 	ldw	r17,52(sp)
   11644:	dcc01904 	addi	r19,sp,100
   11648:	003fee06 	br	11604 <___vfprintf_internal_r+0xd78>
   1164c:	070000f4 	movhi	fp,3
   11650:	e7205e84 	addi	fp,fp,-32390
   11654:	9425883a 	add	r18,r18,r16
   11658:	8c400044 	addi	r17,r17,1
   1165c:	008001c4 	movi	r2,7
   11660:	9f000015 	stw	fp,0(r19)
   11664:	9c000115 	stw	r16,4(r19)
   11668:	dc800e15 	stw	r18,56(sp)
   1166c:	dc400d15 	stw	r17,52(sp)
   11670:	147e720e 	bge	r2,r17,1103c <___vfprintf_internal_r+0x7b0>
   11674:	d9014f17 	ldw	r4,1340(sp)
   11678:	b00b883a 	mov	r5,r22
   1167c:	d9800c04 	addi	r6,sp,48
   11680:	00108340 	call	10834 <__sprint_r>
   11684:	103e391e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   11688:	dc800e17 	ldw	r18,56(sp)
   1168c:	dc400d17 	ldw	r17,52(sp)
   11690:	dcc01904 	addi	r19,sp,100
   11694:	003e6a06 	br	11040 <___vfprintf_internal_r+0x7b4>
   11698:	d9014f17 	ldw	r4,1340(sp)
   1169c:	b00b883a 	mov	r5,r22
   116a0:	d9800c04 	addi	r6,sp,48
   116a4:	d9c15115 	stw	r7,1348(sp)
   116a8:	00108340 	call	10834 <__sprint_r>
   116ac:	d9c15117 	ldw	r7,1348(sp)
   116b0:	103e2e1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   116b4:	dc800e17 	ldw	r18,56(sp)
   116b8:	dc400d17 	ldw	r17,52(sp)
   116bc:	dd401904 	addi	r21,sp,100
   116c0:	003dba06 	br	10dac <___vfprintf_internal_r+0x520>
   116c4:	d9014f17 	ldw	r4,1340(sp)
   116c8:	b00b883a 	mov	r5,r22
   116cc:	d9800c04 	addi	r6,sp,48
   116d0:	00108340 	call	10834 <__sprint_r>
   116d4:	103e251e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   116d8:	dc800e17 	ldw	r18,56(sp)
   116dc:	dc400d17 	ldw	r17,52(sp)
   116e0:	dcc01904 	addi	r19,sp,100
   116e4:	003e4206 	br	10ff0 <___vfprintf_internal_r+0x764>
   116e8:	d9014f17 	ldw	r4,1340(sp)
   116ec:	b00b883a 	mov	r5,r22
   116f0:	d9800c04 	addi	r6,sp,48
   116f4:	00108340 	call	10834 <__sprint_r>
   116f8:	103e1c1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   116fc:	dc800e17 	ldw	r18,56(sp)
   11700:	dc400d17 	ldw	r17,52(sp)
   11704:	d8c01904 	addi	r3,sp,100
   11708:	003e2e06 	br	10fc4 <___vfprintf_internal_r+0x738>
   1170c:	d9414c17 	ldw	r5,1328(sp)
   11710:	2880004c 	andi	r2,r5,1
   11714:	1005003a 	cmpeq	r2,r2,zero
   11718:	103dda1e 	bne	r2,zero,10e84 <___vfprintf_internal_r+0x5f8>
   1171c:	003e9f06 	br	1119c <___vfprintf_internal_r+0x910>
   11720:	d8c14117 	ldw	r3,1284(sp)
   11724:	9125883a 	add	r18,r18,r4
   11728:	8c400044 	addi	r17,r17,1
   1172c:	008001c4 	movi	r2,7
   11730:	a8c00015 	stw	r3,0(r21)
   11734:	a9000115 	stw	r4,4(r21)
   11738:	dc800e15 	stw	r18,56(sp)
   1173c:	dc400d15 	stw	r17,52(sp)
   11740:	14426616 	blt	r2,r17,120dc <___vfprintf_internal_r+0x1850>
   11744:	a8c00204 	addi	r3,r21,8
   11748:	d9414917 	ldw	r5,1316(sp)
   1174c:	00800044 	movi	r2,1
   11750:	94800044 	addi	r18,r18,1
   11754:	8c400044 	addi	r17,r17,1
   11758:	18800115 	stw	r2,4(r3)
   1175c:	008001c4 	movi	r2,7
   11760:	19400015 	stw	r5,0(r3)
   11764:	dc800e15 	stw	r18,56(sp)
   11768:	dc400d15 	stw	r17,52(sp)
   1176c:	2021883a 	mov	r16,r4
   11770:	14425016 	blt	r2,r17,120b4 <___vfprintf_internal_r+0x1828>
   11774:	19400204 	addi	r5,r3,8
   11778:	d9814717 	ldw	r6,1308(sp)
   1177c:	8c400044 	addi	r17,r17,1
   11780:	dc400d15 	stw	r17,52(sp)
   11784:	3107c83a 	sub	r3,r6,r4
   11788:	d9014117 	ldw	r4,1284(sp)
   1178c:	90e5883a 	add	r18,r18,r3
   11790:	28c00115 	stw	r3,4(r5)
   11794:	8105883a 	add	r2,r16,r4
   11798:	28800015 	stw	r2,0(r5)
   1179c:	008001c4 	movi	r2,7
   117a0:	dc800e15 	stw	r18,56(sp)
   117a4:	147f1d16 	blt	r2,r17,1141c <___vfprintf_internal_r+0xb90>
   117a8:	28c00204 	addi	r3,r5,8
   117ac:	003db506 	br	10e84 <___vfprintf_internal_r+0x5f8>
   117b0:	3c000017 	ldw	r16,0(r7)
   117b4:	3c400117 	ldw	r17,4(r7)
   117b8:	39800204 	addi	r6,r7,8
   117bc:	01000044 	movi	r4,1
   117c0:	d9814015 	stw	r6,1280(sp)
   117c4:	d8000405 	stb	zero,16(sp)
   117c8:	003ebe06 	br	112c4 <___vfprintf_internal_r+0xa38>
   117cc:	3c000017 	ldw	r16,0(r7)
   117d0:	3c400117 	ldw	r17,4(r7)
   117d4:	38800204 	addi	r2,r7,8
   117d8:	d8814015 	stw	r2,1280(sp)
   117dc:	003eb706 	br	112bc <___vfprintf_internal_r+0xa30>
   117e0:	3c000017 	ldw	r16,0(r7)
   117e4:	3c400117 	ldw	r17,4(r7)
   117e8:	39000204 	addi	r4,r7,8
   117ec:	d9014015 	stw	r4,1280(sp)
   117f0:	0009883a 	mov	r4,zero
   117f4:	d8000405 	stb	zero,16(sp)
   117f8:	003eb206 	br	112c4 <___vfprintf_internal_r+0xa38>
   117fc:	38c00017 	ldw	r3,0(r7)
   11800:	39c00104 	addi	r7,r7,4
   11804:	d8c14a15 	stw	r3,1320(sp)
   11808:	1800d10e 	bge	r3,zero,11b50 <___vfprintf_internal_r+0x12c4>
   1180c:	00c7c83a 	sub	r3,zero,r3
   11810:	d8c14a15 	stw	r3,1320(sp)
   11814:	d9014c17 	ldw	r4,1328(sp)
   11818:	b8c00007 	ldb	r3,0(r23)
   1181c:	21000114 	ori	r4,r4,4
   11820:	d9014c15 	stw	r4,1328(sp)
   11824:	003c9806 	br	10a88 <___vfprintf_internal_r+0x1fc>
   11828:	d9814c17 	ldw	r6,1328(sp)
   1182c:	3080080c 	andi	r2,r6,32
   11830:	1001f026 	beq	r2,zero,11ff4 <___vfprintf_internal_r+0x1768>
   11834:	d9014b17 	ldw	r4,1324(sp)
   11838:	38800017 	ldw	r2,0(r7)
   1183c:	39c00104 	addi	r7,r7,4
   11840:	d9c14015 	stw	r7,1280(sp)
   11844:	2007d7fa 	srai	r3,r4,31
   11848:	d9c14017 	ldw	r7,1280(sp)
   1184c:	11000015 	stw	r4,0(r2)
   11850:	10c00115 	stw	r3,4(r2)
   11854:	003c6906 	br	109fc <___vfprintf_internal_r+0x170>
   11858:	b8c00007 	ldb	r3,0(r23)
   1185c:	00801b04 	movi	r2,108
   11860:	18824f26 	beq	r3,r2,121a0 <___vfprintf_internal_r+0x1914>
   11864:	d9414c17 	ldw	r5,1328(sp)
   11868:	29400414 	ori	r5,r5,16
   1186c:	d9414c15 	stw	r5,1328(sp)
   11870:	003c8506 	br	10a88 <___vfprintf_internal_r+0x1fc>
   11874:	d9814c17 	ldw	r6,1328(sp)
   11878:	b8c00007 	ldb	r3,0(r23)
   1187c:	31800814 	ori	r6,r6,32
   11880:	d9814c15 	stw	r6,1328(sp)
   11884:	003c8006 	br	10a88 <___vfprintf_internal_r+0x1fc>
   11888:	d8814c17 	ldw	r2,1328(sp)
   1188c:	3c000017 	ldw	r16,0(r7)
   11890:	00c01e04 	movi	r3,120
   11894:	10800094 	ori	r2,r2,2
   11898:	d8814c15 	stw	r2,1328(sp)
   1189c:	39c00104 	addi	r7,r7,4
   118a0:	014000f4 	movhi	r5,3
   118a4:	29604704 	addi	r5,r5,-32484
   118a8:	00800c04 	movi	r2,48
   118ac:	0023883a 	mov	r17,zero
   118b0:	01000084 	movi	r4,2
   118b4:	d9c14015 	stw	r7,1280(sp)
   118b8:	d8c14d15 	stw	r3,1332(sp)
   118bc:	d9414415 	stw	r5,1296(sp)
   118c0:	d8800445 	stb	r2,17(sp)
   118c4:	d8c00485 	stb	r3,18(sp)
   118c8:	d8000405 	stb	zero,16(sp)
   118cc:	003e7d06 	br	112c4 <___vfprintf_internal_r+0xa38>
   118d0:	d8814c17 	ldw	r2,1328(sp)
   118d4:	b8c00007 	ldb	r3,0(r23)
   118d8:	10801014 	ori	r2,r2,64
   118dc:	d8814c15 	stw	r2,1328(sp)
   118e0:	003c6906 	br	10a88 <___vfprintf_internal_r+0x1fc>
   118e4:	d9414c17 	ldw	r5,1328(sp)
   118e8:	2880020c 	andi	r2,r5,8
   118ec:	1001df26 	beq	r2,zero,1206c <___vfprintf_internal_r+0x17e0>
   118f0:	39800017 	ldw	r6,0(r7)
   118f4:	38800204 	addi	r2,r7,8
   118f8:	d8814015 	stw	r2,1280(sp)
   118fc:	d9814215 	stw	r6,1288(sp)
   11900:	39c00117 	ldw	r7,4(r7)
   11904:	d9c14315 	stw	r7,1292(sp)
   11908:	d9014217 	ldw	r4,1288(sp)
   1190c:	d9414317 	ldw	r5,1292(sp)
   11910:	001722c0 	call	1722c <__isinfd>
   11914:	10021726 	beq	r2,zero,12174 <___vfprintf_internal_r+0x18e8>
   11918:	d9014217 	ldw	r4,1288(sp)
   1191c:	d9414317 	ldw	r5,1292(sp)
   11920:	000d883a 	mov	r6,zero
   11924:	000f883a 	mov	r7,zero
   11928:	00192740 	call	19274 <__ltdf2>
   1192c:	1002ca16 	blt	r2,zero,12458 <___vfprintf_internal_r+0x1bcc>
   11930:	d9414d17 	ldw	r5,1332(sp)
   11934:	008011c4 	movi	r2,71
   11938:	11420a16 	blt	r2,r5,12164 <___vfprintf_internal_r+0x18d8>
   1193c:	018000f4 	movhi	r6,3
   11940:	31a04c04 	addi	r6,r6,-32464
   11944:	d9814115 	stw	r6,1284(sp)
   11948:	d9014c17 	ldw	r4,1328(sp)
   1194c:	00c000c4 	movi	r3,3
   11950:	00bfdfc4 	movi	r2,-129
   11954:	2088703a 	and	r4,r4,r2
   11958:	180f883a 	mov	r7,r3
   1195c:	d8c14515 	stw	r3,1300(sp)
   11960:	d9014c15 	stw	r4,1328(sp)
   11964:	d8014615 	stw	zero,1304(sp)
   11968:	003e6a06 	br	11314 <___vfprintf_internal_r+0xa88>
   1196c:	38800017 	ldw	r2,0(r7)
   11970:	00c00044 	movi	r3,1
   11974:	39c00104 	addi	r7,r7,4
   11978:	d9c14015 	stw	r7,1280(sp)
   1197c:	d9000f04 	addi	r4,sp,60
   11980:	180f883a 	mov	r7,r3
   11984:	d8c14515 	stw	r3,1300(sp)
   11988:	d9014115 	stw	r4,1284(sp)
   1198c:	d8800f05 	stb	r2,60(sp)
   11990:	d8000405 	stb	zero,16(sp)
   11994:	003cac06 	br	10c48 <___vfprintf_internal_r+0x3bc>
   11998:	014000f4 	movhi	r5,3
   1199c:	29605204 	addi	r5,r5,-32440
   119a0:	d9414415 	stw	r5,1296(sp)
   119a4:	d9814c17 	ldw	r6,1328(sp)
   119a8:	3080080c 	andi	r2,r6,32
   119ac:	1000f926 	beq	r2,zero,11d94 <___vfprintf_internal_r+0x1508>
   119b0:	3c000017 	ldw	r16,0(r7)
   119b4:	3c400117 	ldw	r17,4(r7)
   119b8:	38800204 	addi	r2,r7,8
   119bc:	d8814015 	stw	r2,1280(sp)
   119c0:	d9414c17 	ldw	r5,1328(sp)
   119c4:	2880004c 	andi	r2,r5,1
   119c8:	1005003a 	cmpeq	r2,r2,zero
   119cc:	1000b31e 	bne	r2,zero,11c9c <___vfprintf_internal_r+0x1410>
   119d0:	8444b03a 	or	r2,r16,r17
   119d4:	1000b126 	beq	r2,zero,11c9c <___vfprintf_internal_r+0x1410>
   119d8:	d9814d17 	ldw	r6,1332(sp)
   119dc:	29400094 	ori	r5,r5,2
   119e0:	00800c04 	movi	r2,48
   119e4:	01000084 	movi	r4,2
   119e8:	d9414c15 	stw	r5,1328(sp)
   119ec:	d8800445 	stb	r2,17(sp)
   119f0:	d9800485 	stb	r6,18(sp)
   119f4:	d8000405 	stb	zero,16(sp)
   119f8:	003e3206 	br	112c4 <___vfprintf_internal_r+0xa38>
   119fc:	018000f4 	movhi	r6,3
   11a00:	31a04704 	addi	r6,r6,-32484
   11a04:	d9814415 	stw	r6,1296(sp)
   11a08:	003fe606 	br	119a4 <___vfprintf_internal_r+0x1118>
   11a0c:	00800ac4 	movi	r2,43
   11a10:	d8800405 	stb	r2,16(sp)
   11a14:	b8c00007 	ldb	r3,0(r23)
   11a18:	003c1b06 	br	10a88 <___vfprintf_internal_r+0x1fc>
   11a1c:	d8814c17 	ldw	r2,1328(sp)
   11a20:	b8c00007 	ldb	r3,0(r23)
   11a24:	10800054 	ori	r2,r2,1
   11a28:	d8814c15 	stw	r2,1328(sp)
   11a2c:	003c1606 	br	10a88 <___vfprintf_internal_r+0x1fc>
   11a30:	d8800407 	ldb	r2,16(sp)
   11a34:	1000461e 	bne	r2,zero,11b50 <___vfprintf_internal_r+0x12c4>
   11a38:	00800804 	movi	r2,32
   11a3c:	d8800405 	stb	r2,16(sp)
   11a40:	b8c00007 	ldb	r3,0(r23)
   11a44:	003c1006 	br	10a88 <___vfprintf_internal_r+0x1fc>
   11a48:	d9814c17 	ldw	r6,1328(sp)
   11a4c:	b8c00007 	ldb	r3,0(r23)
   11a50:	31800214 	ori	r6,r6,8
   11a54:	d9814c15 	stw	r6,1328(sp)
   11a58:	003c0b06 	br	10a88 <___vfprintf_internal_r+0x1fc>
   11a5c:	0007883a 	mov	r3,zero
   11a60:	01000244 	movi	r4,9
   11a64:	188002a4 	muli	r2,r3,10
   11a68:	b8c00007 	ldb	r3,0(r23)
   11a6c:	d9814d17 	ldw	r6,1332(sp)
   11a70:	bdc00044 	addi	r23,r23,1
   11a74:	d8c14d15 	stw	r3,1332(sp)
   11a78:	d9414d17 	ldw	r5,1332(sp)
   11a7c:	3085883a 	add	r2,r6,r2
   11a80:	10fff404 	addi	r3,r2,-48
   11a84:	28bff404 	addi	r2,r5,-48
   11a88:	20bff62e 	bgeu	r4,r2,11a64 <___vfprintf_internal_r+0x11d8>
   11a8c:	d8c14a15 	stw	r3,1320(sp)
   11a90:	003bff06 	br	10a90 <___vfprintf_internal_r+0x204>
   11a94:	d9414c17 	ldw	r5,1328(sp)
   11a98:	b8c00007 	ldb	r3,0(r23)
   11a9c:	29402014 	ori	r5,r5,128
   11aa0:	d9414c15 	stw	r5,1328(sp)
   11aa4:	003bf806 	br	10a88 <___vfprintf_internal_r+0x1fc>
   11aa8:	b8c00007 	ldb	r3,0(r23)
   11aac:	00800a84 	movi	r2,42
   11ab0:	bdc00044 	addi	r23,r23,1
   11ab4:	18831526 	beq	r3,r2,1270c <___vfprintf_internal_r+0x1e80>
   11ab8:	d8c14d15 	stw	r3,1332(sp)
   11abc:	18bff404 	addi	r2,r3,-48
   11ac0:	00c00244 	movi	r3,9
   11ac4:	18827836 	bltu	r3,r2,124a8 <___vfprintf_internal_r+0x1c1c>
   11ac8:	000d883a 	mov	r6,zero
   11acc:	308002a4 	muli	r2,r6,10
   11ad0:	b9800007 	ldb	r6,0(r23)
   11ad4:	d9414d17 	ldw	r5,1332(sp)
   11ad8:	bdc00044 	addi	r23,r23,1
   11adc:	d9814d15 	stw	r6,1332(sp)
   11ae0:	d9014d17 	ldw	r4,1332(sp)
   11ae4:	1145883a 	add	r2,r2,r5
   11ae8:	11bff404 	addi	r6,r2,-48
   11aec:	20bff404 	addi	r2,r4,-48
   11af0:	18bff62e 	bgeu	r3,r2,11acc <___vfprintf_internal_r+0x1240>
   11af4:	3027883a 	mov	r19,r6
   11af8:	303be50e 	bge	r6,zero,10a90 <___vfprintf_internal_r+0x204>
   11afc:	04ffffc4 	movi	r19,-1
   11b00:	003be306 	br	10a90 <___vfprintf_internal_r+0x204>
   11b04:	d8000405 	stb	zero,16(sp)
   11b08:	39800017 	ldw	r6,0(r7)
   11b0c:	39c00104 	addi	r7,r7,4
   11b10:	d9c14015 	stw	r7,1280(sp)
   11b14:	d9814115 	stw	r6,1284(sp)
   11b18:	3001c926 	beq	r6,zero,12240 <___vfprintf_internal_r+0x19b4>
   11b1c:	98000e16 	blt	r19,zero,11b58 <___vfprintf_internal_r+0x12cc>
   11b20:	d9014117 	ldw	r4,1284(sp)
   11b24:	000b883a 	mov	r5,zero
   11b28:	980d883a 	mov	r6,r19
   11b2c:	00159480 	call	15948 <memchr>
   11b30:	10025926 	beq	r2,zero,12498 <___vfprintf_internal_r+0x1c0c>
   11b34:	d8c14117 	ldw	r3,1284(sp)
   11b38:	10cfc83a 	sub	r7,r2,r3
   11b3c:	99c19e16 	blt	r19,r7,121b8 <___vfprintf_internal_r+0x192c>
   11b40:	d9c14515 	stw	r7,1300(sp)
   11b44:	38000916 	blt	r7,zero,11b6c <___vfprintf_internal_r+0x12e0>
   11b48:	d8014615 	stw	zero,1304(sp)
   11b4c:	003df106 	br	11314 <___vfprintf_internal_r+0xa88>
   11b50:	b8c00007 	ldb	r3,0(r23)
   11b54:	003bcc06 	br	10a88 <___vfprintf_internal_r+0x1fc>
   11b58:	d9014117 	ldw	r4,1284(sp)
   11b5c:	00107c00 	call	107c0 <strlen>
   11b60:	d8814515 	stw	r2,1300(sp)
   11b64:	100f883a 	mov	r7,r2
   11b68:	103ff70e 	bge	r2,zero,11b48 <___vfprintf_internal_r+0x12bc>
   11b6c:	d8014515 	stw	zero,1300(sp)
   11b70:	d8014615 	stw	zero,1304(sp)
   11b74:	003de706 	br	11314 <___vfprintf_internal_r+0xa88>
   11b78:	20c03fcc 	andi	r3,r4,255
   11b7c:	00800044 	movi	r2,1
   11b80:	18802d26 	beq	r3,r2,11c38 <___vfprintf_internal_r+0x13ac>
   11b84:	18800e36 	bltu	r3,r2,11bc0 <___vfprintf_internal_r+0x1334>
   11b88:	00800084 	movi	r2,2
   11b8c:	1880fa26 	beq	r3,r2,11f78 <___vfprintf_internal_r+0x16ec>
   11b90:	010000f4 	movhi	r4,3
   11b94:	21205704 	addi	r4,r4,-32420
   11b98:	00107c00 	call	107c0 <strlen>
   11b9c:	100f883a 	mov	r7,r2
   11ba0:	dcc14515 	stw	r19,1300(sp)
   11ba4:	9880010e 	bge	r19,r2,11bac <___vfprintf_internal_r+0x1320>
   11ba8:	d8814515 	stw	r2,1300(sp)
   11bac:	008000f4 	movhi	r2,3
   11bb0:	10a05704 	addi	r2,r2,-32420
   11bb4:	dcc14615 	stw	r19,1304(sp)
   11bb8:	d8814115 	stw	r2,1284(sp)
   11bbc:	003dd506 	br	11314 <___vfprintf_internal_r+0xa88>
   11bc0:	d9401904 	addi	r5,sp,100
   11bc4:	dd000f04 	addi	r20,sp,60
   11bc8:	d9414115 	stw	r5,1284(sp)
   11bcc:	880a977a 	slli	r5,r17,29
   11bd0:	d9814117 	ldw	r6,1284(sp)
   11bd4:	8004d0fa 	srli	r2,r16,3
   11bd8:	8806d0fa 	srli	r3,r17,3
   11bdc:	810001cc 	andi	r4,r16,7
   11be0:	2884b03a 	or	r2,r5,r2
   11be4:	31bfffc4 	addi	r6,r6,-1
   11be8:	21000c04 	addi	r4,r4,48
   11bec:	d9814115 	stw	r6,1284(sp)
   11bf0:	10cab03a 	or	r5,r2,r3
   11bf4:	31000005 	stb	r4,0(r6)
   11bf8:	1021883a 	mov	r16,r2
   11bfc:	1823883a 	mov	r17,r3
   11c00:	283ff21e 	bne	r5,zero,11bcc <___vfprintf_internal_r+0x1340>
   11c04:	d8c14c17 	ldw	r3,1328(sp)
   11c08:	1880004c 	andi	r2,r3,1
   11c0c:	1005003a 	cmpeq	r2,r2,zero
   11c10:	103db91e 	bne	r2,zero,112f8 <___vfprintf_internal_r+0xa6c>
   11c14:	20803fcc 	andi	r2,r4,255
   11c18:	1080201c 	xori	r2,r2,128
   11c1c:	10bfe004 	addi	r2,r2,-128
   11c20:	00c00c04 	movi	r3,48
   11c24:	10fdb426 	beq	r2,r3,112f8 <___vfprintf_internal_r+0xa6c>
   11c28:	31bfffc4 	addi	r6,r6,-1
   11c2c:	d9814115 	stw	r6,1284(sp)
   11c30:	30c00005 	stb	r3,0(r6)
   11c34:	003db006 	br	112f8 <___vfprintf_internal_r+0xa6c>
   11c38:	88800068 	cmpgeui	r2,r17,1
   11c3c:	10002c1e 	bne	r2,zero,11cf0 <___vfprintf_internal_r+0x1464>
   11c40:	8800021e 	bne	r17,zero,11c4c <___vfprintf_internal_r+0x13c0>
   11c44:	00800244 	movi	r2,9
   11c48:	14002936 	bltu	r2,r16,11cf0 <___vfprintf_internal_r+0x1464>
   11c4c:	d90018c4 	addi	r4,sp,99
   11c50:	dd000f04 	addi	r20,sp,60
   11c54:	d9014115 	stw	r4,1284(sp)
   11c58:	d9014117 	ldw	r4,1284(sp)
   11c5c:	80800c04 	addi	r2,r16,48
   11c60:	20800005 	stb	r2,0(r4)
   11c64:	003da406 	br	112f8 <___vfprintf_internal_r+0xa6c>
   11c68:	dc400d17 	ldw	r17,52(sp)
   11c6c:	070000f4 	movhi	fp,3
   11c70:	e7205e84 	addi	fp,fp,-32390
   11c74:	9425883a 	add	r18,r18,r16
   11c78:	8c400044 	addi	r17,r17,1
   11c7c:	008001c4 	movi	r2,7
   11c80:	1f000015 	stw	fp,0(r3)
   11c84:	1c000115 	stw	r16,4(r3)
   11c88:	dc800e15 	stw	r18,56(sp)
   11c8c:	dc400d15 	stw	r17,52(sp)
   11c90:	147de216 	blt	r2,r17,1141c <___vfprintf_internal_r+0xb90>
   11c94:	18c00204 	addi	r3,r3,8
   11c98:	003c7a06 	br	10e84 <___vfprintf_internal_r+0x5f8>
   11c9c:	01000084 	movi	r4,2
   11ca0:	d8000405 	stb	zero,16(sp)
   11ca4:	003d8706 	br	112c4 <___vfprintf_internal_r+0xa38>
   11ca8:	d9814c17 	ldw	r6,1328(sp)
   11cac:	30c4703a 	and	r2,r6,r3
   11cb0:	1005003a 	cmpeq	r2,r2,zero
   11cb4:	103cb926 	beq	r2,zero,10f9c <___vfprintf_internal_r+0x710>
   11cb8:	d9014117 	ldw	r4,1284(sp)
   11cbc:	94800044 	addi	r18,r18,1
   11cc0:	8c400044 	addi	r17,r17,1
   11cc4:	008001c4 	movi	r2,7
   11cc8:	a9000015 	stw	r4,0(r21)
   11ccc:	a8c00115 	stw	r3,4(r21)
   11cd0:	dc800e15 	stw	r18,56(sp)
   11cd4:	dc400d15 	stw	r17,52(sp)
   11cd8:	147e6616 	blt	r2,r17,11674 <___vfprintf_internal_r+0xde8>
   11cdc:	acc00204 	addi	r19,r21,8
   11ce0:	003cd706 	br	11040 <___vfprintf_internal_r+0x7b4>
   11ce4:	070000f4 	movhi	fp,3
   11ce8:	e7205e84 	addi	fp,fp,-32390
   11cec:	003c4f06 	br	10e2c <___vfprintf_internal_r+0x5a0>
   11cf0:	dd000f04 	addi	r20,sp,60
   11cf4:	dc801904 	addi	r18,sp,100
   11cf8:	8009883a 	mov	r4,r16
   11cfc:	880b883a 	mov	r5,r17
   11d00:	01800284 	movi	r6,10
   11d04:	000f883a 	mov	r7,zero
   11d08:	0017f840 	call	17f84 <__umoddi3>
   11d0c:	12000c04 	addi	r8,r2,48
   11d10:	94bfffc4 	addi	r18,r18,-1
   11d14:	8009883a 	mov	r4,r16
   11d18:	880b883a 	mov	r5,r17
   11d1c:	01800284 	movi	r6,10
   11d20:	000f883a 	mov	r7,zero
   11d24:	92000005 	stb	r8,0(r18)
   11d28:	00179a80 	call	179a8 <__udivdi3>
   11d2c:	1009883a 	mov	r4,r2
   11d30:	1021883a 	mov	r16,r2
   11d34:	18800068 	cmpgeui	r2,r3,1
   11d38:	1823883a 	mov	r17,r3
   11d3c:	103fee1e 	bne	r2,zero,11cf8 <___vfprintf_internal_r+0x146c>
   11d40:	1800021e 	bne	r3,zero,11d4c <___vfprintf_internal_r+0x14c0>
   11d44:	00800244 	movi	r2,9
   11d48:	113feb36 	bltu	r2,r4,11cf8 <___vfprintf_internal_r+0x146c>
   11d4c:	94bfffc4 	addi	r18,r18,-1
   11d50:	dc814115 	stw	r18,1284(sp)
   11d54:	003fc006 	br	11c58 <___vfprintf_internal_r+0x13cc>
   11d58:	d9014c17 	ldw	r4,1328(sp)
   11d5c:	2080004c 	andi	r2,r4,1
   11d60:	10009a1e 	bne	r2,zero,11fcc <___vfprintf_internal_r+0x1740>
   11d64:	d9401904 	addi	r5,sp,100
   11d68:	dd000f04 	addi	r20,sp,60
   11d6c:	d9414115 	stw	r5,1284(sp)
   11d70:	003d6106 	br	112f8 <___vfprintf_internal_r+0xa6c>
   11d74:	d9014f17 	ldw	r4,1340(sp)
   11d78:	b00b883a 	mov	r5,r22
   11d7c:	d9800c04 	addi	r6,sp,48
   11d80:	00108340 	call	10834 <__sprint_r>
   11d84:	103c791e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   11d88:	dc800e17 	ldw	r18,56(sp)
   11d8c:	d8c01904 	addi	r3,sp,100
   11d90:	003cff06 	br	11190 <___vfprintf_internal_r+0x904>
   11d94:	d8c14c17 	ldw	r3,1328(sp)
   11d98:	1880040c 	andi	r2,r3,16
   11d9c:	1000711e 	bne	r2,zero,11f64 <___vfprintf_internal_r+0x16d8>
   11da0:	d9014c17 	ldw	r4,1328(sp)
   11da4:	2080100c 	andi	r2,r4,64
   11da8:	10006e26 	beq	r2,zero,11f64 <___vfprintf_internal_r+0x16d8>
   11dac:	3c00000b 	ldhu	r16,0(r7)
   11db0:	0023883a 	mov	r17,zero
   11db4:	39c00104 	addi	r7,r7,4
   11db8:	d9c14015 	stw	r7,1280(sp)
   11dbc:	003f0006 	br	119c0 <___vfprintf_internal_r+0x1134>
   11dc0:	dc400d17 	ldw	r17,52(sp)
   11dc4:	070000f4 	movhi	fp,3
   11dc8:	e7205e84 	addi	fp,fp,-32390
   11dcc:	9425883a 	add	r18,r18,r16
   11dd0:	8c400044 	addi	r17,r17,1
   11dd4:	008001c4 	movi	r2,7
   11dd8:	1f000015 	stw	fp,0(r3)
   11ddc:	1c000115 	stw	r16,4(r3)
   11de0:	dc800e15 	stw	r18,56(sp)
   11de4:	dc400d15 	stw	r17,52(sp)
   11de8:	147d7616 	blt	r2,r17,113c4 <___vfprintf_internal_r+0xb38>
   11dec:	18c00204 	addi	r3,r3,8
   11df0:	003d7b06 	br	113e0 <___vfprintf_internal_r+0xb54>
   11df4:	dc800e17 	ldw	r18,56(sp)
   11df8:	dc400d17 	ldw	r17,52(sp)
   11dfc:	070000f4 	movhi	fp,3
   11e00:	e7206284 	addi	fp,fp,-32374
   11e04:	003bc006 	br	10d08 <___vfprintf_internal_r+0x47c>
   11e08:	d9014f17 	ldw	r4,1340(sp)
   11e0c:	b00b883a 	mov	r5,r22
   11e10:	d9800c04 	addi	r6,sp,48
   11e14:	00108340 	call	10834 <__sprint_r>
   11e18:	103c541e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   11e1c:	dc800e17 	ldw	r18,56(sp)
   11e20:	d8c01904 	addi	r3,sp,100
   11e24:	003ce906 	br	111cc <___vfprintf_internal_r+0x940>
   11e28:	3c000017 	ldw	r16,0(r7)
   11e2c:	0009883a 	mov	r4,zero
   11e30:	39c00104 	addi	r7,r7,4
   11e34:	0023883a 	mov	r17,zero
   11e38:	d9c14015 	stw	r7,1280(sp)
   11e3c:	d8000405 	stb	zero,16(sp)
   11e40:	003d2006 	br	112c4 <___vfprintf_internal_r+0xa38>
   11e44:	38800017 	ldw	r2,0(r7)
   11e48:	39c00104 	addi	r7,r7,4
   11e4c:	d9c14015 	stw	r7,1280(sp)
   11e50:	1023d7fa 	srai	r17,r2,31
   11e54:	1021883a 	mov	r16,r2
   11e58:	003d1806 	br	112bc <___vfprintf_internal_r+0xa30>
   11e5c:	3c000017 	ldw	r16,0(r7)
   11e60:	01000044 	movi	r4,1
   11e64:	39c00104 	addi	r7,r7,4
   11e68:	0023883a 	mov	r17,zero
   11e6c:	d9c14015 	stw	r7,1280(sp)
   11e70:	d8000405 	stb	zero,16(sp)
   11e74:	003d1306 	br	112c4 <___vfprintf_internal_r+0xa38>
   11e78:	008000f4 	movhi	r2,3
   11e7c:	10a05e04 	addi	r2,r2,-32392
   11e80:	94800044 	addi	r18,r18,1
   11e84:	8c400044 	addi	r17,r17,1
   11e88:	a8800015 	stw	r2,0(r21)
   11e8c:	00c00044 	movi	r3,1
   11e90:	008001c4 	movi	r2,7
   11e94:	a8c00115 	stw	r3,4(r21)
   11e98:	dc800e15 	stw	r18,56(sp)
   11e9c:	dc400d15 	stw	r17,52(sp)
   11ea0:	1440ca16 	blt	r2,r17,121cc <___vfprintf_internal_r+0x1940>
   11ea4:	a8c00204 	addi	r3,r21,8
   11ea8:	2000061e 	bne	r4,zero,11ec4 <___vfprintf_internal_r+0x1638>
   11eac:	d9414717 	ldw	r5,1308(sp)
   11eb0:	2800041e 	bne	r5,zero,11ec4 <___vfprintf_internal_r+0x1638>
   11eb4:	d9814c17 	ldw	r6,1328(sp)
   11eb8:	3080004c 	andi	r2,r6,1
   11ebc:	1005003a 	cmpeq	r2,r2,zero
   11ec0:	103bf01e 	bne	r2,zero,10e84 <___vfprintf_internal_r+0x5f8>
   11ec4:	00800044 	movi	r2,1
   11ec8:	dc400d17 	ldw	r17,52(sp)
   11ecc:	18800115 	stw	r2,4(r3)
   11ed0:	d8814917 	ldw	r2,1316(sp)
   11ed4:	94800044 	addi	r18,r18,1
   11ed8:	8c400044 	addi	r17,r17,1
   11edc:	18800015 	stw	r2,0(r3)
   11ee0:	008001c4 	movi	r2,7
   11ee4:	dc800e15 	stw	r18,56(sp)
   11ee8:	dc400d15 	stw	r17,52(sp)
   11eec:	1440ca16 	blt	r2,r17,12218 <___vfprintf_internal_r+0x198c>
   11ef0:	18c00204 	addi	r3,r3,8
   11ef4:	0121c83a 	sub	r16,zero,r4
   11ef8:	0400500e 	bge	zero,r16,1203c <___vfprintf_internal_r+0x17b0>
   11efc:	00800404 	movi	r2,16
   11f00:	1400800e 	bge	r2,r16,12104 <___vfprintf_internal_r+0x1878>
   11f04:	1027883a 	mov	r19,r2
   11f08:	070000f4 	movhi	fp,3
   11f0c:	e7205e84 	addi	fp,fp,-32390
   11f10:	050001c4 	movi	r20,7
   11f14:	00000306 	br	11f24 <___vfprintf_internal_r+0x1698>
   11f18:	18c00204 	addi	r3,r3,8
   11f1c:	843ffc04 	addi	r16,r16,-16
   11f20:	9c007a0e 	bge	r19,r16,1210c <___vfprintf_internal_r+0x1880>
   11f24:	94800404 	addi	r18,r18,16
   11f28:	8c400044 	addi	r17,r17,1
   11f2c:	1f000015 	stw	fp,0(r3)
   11f30:	1cc00115 	stw	r19,4(r3)
   11f34:	dc800e15 	stw	r18,56(sp)
   11f38:	dc400d15 	stw	r17,52(sp)
   11f3c:	a47ff60e 	bge	r20,r17,11f18 <___vfprintf_internal_r+0x168c>
   11f40:	d9014f17 	ldw	r4,1340(sp)
   11f44:	b00b883a 	mov	r5,r22
   11f48:	d9800c04 	addi	r6,sp,48
   11f4c:	00108340 	call	10834 <__sprint_r>
   11f50:	103c061e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   11f54:	dc800e17 	ldw	r18,56(sp)
   11f58:	dc400d17 	ldw	r17,52(sp)
   11f5c:	d8c01904 	addi	r3,sp,100
   11f60:	003fee06 	br	11f1c <___vfprintf_internal_r+0x1690>
   11f64:	3c000017 	ldw	r16,0(r7)
   11f68:	0023883a 	mov	r17,zero
   11f6c:	39c00104 	addi	r7,r7,4
   11f70:	d9c14015 	stw	r7,1280(sp)
   11f74:	003e9206 	br	119c0 <___vfprintf_internal_r+0x1134>
   11f78:	d9401904 	addi	r5,sp,100
   11f7c:	dd000f04 	addi	r20,sp,60
   11f80:	d9414115 	stw	r5,1284(sp)
   11f84:	d9814417 	ldw	r6,1296(sp)
   11f88:	880a973a 	slli	r5,r17,28
   11f8c:	8004d13a 	srli	r2,r16,4
   11f90:	810003cc 	andi	r4,r16,15
   11f94:	3109883a 	add	r4,r6,r4
   11f98:	2884b03a 	or	r2,r5,r2
   11f9c:	21400003 	ldbu	r5,0(r4)
   11fa0:	d9014117 	ldw	r4,1284(sp)
   11fa4:	8806d13a 	srli	r3,r17,4
   11fa8:	1021883a 	mov	r16,r2
   11fac:	213fffc4 	addi	r4,r4,-1
   11fb0:	d9014115 	stw	r4,1284(sp)
   11fb4:	d9814117 	ldw	r6,1284(sp)
   11fb8:	10c8b03a 	or	r4,r2,r3
   11fbc:	1823883a 	mov	r17,r3
   11fc0:	31400005 	stb	r5,0(r6)
   11fc4:	203fef1e 	bne	r4,zero,11f84 <___vfprintf_internal_r+0x16f8>
   11fc8:	003ccb06 	br	112f8 <___vfprintf_internal_r+0xa6c>
   11fcc:	00800c04 	movi	r2,48
   11fd0:	d98018c4 	addi	r6,sp,99
   11fd4:	dd000f04 	addi	r20,sp,60
   11fd8:	d88018c5 	stb	r2,99(sp)
   11fdc:	d9814115 	stw	r6,1284(sp)
   11fe0:	003cc506 	br	112f8 <___vfprintf_internal_r+0xa6c>
   11fe4:	dc400d17 	ldw	r17,52(sp)
   11fe8:	070000f4 	movhi	fp,3
   11fec:	e7206284 	addi	fp,fp,-32374
   11ff0:	003bc706 	br	10f10 <___vfprintf_internal_r+0x684>
   11ff4:	d9414c17 	ldw	r5,1328(sp)
   11ff8:	2880040c 	andi	r2,r5,16
   11ffc:	10007c26 	beq	r2,zero,121f0 <___vfprintf_internal_r+0x1964>
   12000:	38800017 	ldw	r2,0(r7)
   12004:	39c00104 	addi	r7,r7,4
   12008:	d9c14015 	stw	r7,1280(sp)
   1200c:	d9814b17 	ldw	r6,1324(sp)
   12010:	d9c14017 	ldw	r7,1280(sp)
   12014:	11800015 	stw	r6,0(r2)
   12018:	003a7806 	br	109fc <___vfprintf_internal_r+0x170>
   1201c:	d9014f17 	ldw	r4,1340(sp)
   12020:	b00b883a 	mov	r5,r22
   12024:	d9800c04 	addi	r6,sp,48
   12028:	00108340 	call	10834 <__sprint_r>
   1202c:	103bcf1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   12030:	dc800e17 	ldw	r18,56(sp)
   12034:	dc400d17 	ldw	r17,52(sp)
   12038:	d8c01904 	addi	r3,sp,100
   1203c:	d9014717 	ldw	r4,1308(sp)
   12040:	d9414117 	ldw	r5,1284(sp)
   12044:	8c400044 	addi	r17,r17,1
   12048:	9125883a 	add	r18,r18,r4
   1204c:	008001c4 	movi	r2,7
   12050:	19400015 	stw	r5,0(r3)
   12054:	19000115 	stw	r4,4(r3)
   12058:	dc800e15 	stw	r18,56(sp)
   1205c:	dc400d15 	stw	r17,52(sp)
   12060:	147cee16 	blt	r2,r17,1141c <___vfprintf_internal_r+0xb90>
   12064:	18c00204 	addi	r3,r3,8
   12068:	003b8606 	br	10e84 <___vfprintf_internal_r+0x5f8>
   1206c:	38c00017 	ldw	r3,0(r7)
   12070:	39000204 	addi	r4,r7,8
   12074:	d9014015 	stw	r4,1280(sp)
   12078:	d8c14215 	stw	r3,1288(sp)
   1207c:	39c00117 	ldw	r7,4(r7)
   12080:	d9c14315 	stw	r7,1292(sp)
   12084:	003e2006 	br	11908 <___vfprintf_internal_r+0x107c>
   12088:	0005883a 	mov	r2,zero
   1208c:	1409c83a 	sub	r4,r2,r16
   12090:	1105803a 	cmpltu	r2,r2,r4
   12094:	044bc83a 	sub	r5,zero,r17
   12098:	2885c83a 	sub	r2,r5,r2
   1209c:	2021883a 	mov	r16,r4
   120a0:	1023883a 	mov	r17,r2
   120a4:	01000044 	movi	r4,1
   120a8:	00800b44 	movi	r2,45
   120ac:	d8800405 	stb	r2,16(sp)
   120b0:	003c8406 	br	112c4 <___vfprintf_internal_r+0xa38>
   120b4:	d9014f17 	ldw	r4,1340(sp)
   120b8:	b00b883a 	mov	r5,r22
   120bc:	d9800c04 	addi	r6,sp,48
   120c0:	00108340 	call	10834 <__sprint_r>
   120c4:	103ba91e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   120c8:	dc800e17 	ldw	r18,56(sp)
   120cc:	dc400d17 	ldw	r17,52(sp)
   120d0:	d9000517 	ldw	r4,20(sp)
   120d4:	d9401904 	addi	r5,sp,100
   120d8:	003da706 	br	11778 <___vfprintf_internal_r+0xeec>
   120dc:	d9014f17 	ldw	r4,1340(sp)
   120e0:	b00b883a 	mov	r5,r22
   120e4:	d9800c04 	addi	r6,sp,48
   120e8:	00108340 	call	10834 <__sprint_r>
   120ec:	103b9f1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   120f0:	dc800e17 	ldw	r18,56(sp)
   120f4:	dc400d17 	ldw	r17,52(sp)
   120f8:	d9000517 	ldw	r4,20(sp)
   120fc:	d8c01904 	addi	r3,sp,100
   12100:	003d9106 	br	11748 <___vfprintf_internal_r+0xebc>
   12104:	070000f4 	movhi	fp,3
   12108:	e7205e84 	addi	fp,fp,-32390
   1210c:	9425883a 	add	r18,r18,r16
   12110:	8c400044 	addi	r17,r17,1
   12114:	008001c4 	movi	r2,7
   12118:	1f000015 	stw	fp,0(r3)
   1211c:	1c000115 	stw	r16,4(r3)
   12120:	dc800e15 	stw	r18,56(sp)
   12124:	dc400d15 	stw	r17,52(sp)
   12128:	147fbc16 	blt	r2,r17,1201c <___vfprintf_internal_r+0x1790>
   1212c:	18c00204 	addi	r3,r3,8
   12130:	003fc206 	br	1203c <___vfprintf_internal_r+0x17b0>
   12134:	d9014f17 	ldw	r4,1340(sp)
   12138:	b00b883a 	mov	r5,r22
   1213c:	d9800c04 	addi	r6,sp,48
   12140:	00108340 	call	10834 <__sprint_r>
   12144:	103b891e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   12148:	dc800e17 	ldw	r18,56(sp)
   1214c:	d9000517 	ldw	r4,20(sp)
   12150:	d8c01904 	addi	r3,sp,100
   12154:	003d0206 	br	11560 <___vfprintf_internal_r+0xcd4>
   12158:	070000f4 	movhi	fp,3
   1215c:	e7205e84 	addi	fp,fp,-32390
   12160:	003be406 	br	110f4 <___vfprintf_internal_r+0x868>
   12164:	008000f4 	movhi	r2,3
   12168:	10a04d04 	addi	r2,r2,-32460
   1216c:	d8814115 	stw	r2,1284(sp)
   12170:	003df506 	br	11948 <___vfprintf_internal_r+0x10bc>
   12174:	d9014217 	ldw	r4,1288(sp)
   12178:	d9414317 	ldw	r5,1292(sp)
   1217c:	001726c0 	call	1726c <__isnand>
   12180:	10003926 	beq	r2,zero,12268 <___vfprintf_internal_r+0x19dc>
   12184:	d9414d17 	ldw	r5,1332(sp)
   12188:	008011c4 	movi	r2,71
   1218c:	1140ce16 	blt	r2,r5,124c8 <___vfprintf_internal_r+0x1c3c>
   12190:	018000f4 	movhi	r6,3
   12194:	31a04e04 	addi	r6,r6,-32456
   12198:	d9814115 	stw	r6,1284(sp)
   1219c:	003dea06 	br	11948 <___vfprintf_internal_r+0x10bc>
   121a0:	d9014c17 	ldw	r4,1328(sp)
   121a4:	bdc00044 	addi	r23,r23,1
   121a8:	b8c00007 	ldb	r3,0(r23)
   121ac:	21000814 	ori	r4,r4,32
   121b0:	d9014c15 	stw	r4,1328(sp)
   121b4:	003a3406 	br	10a88 <___vfprintf_internal_r+0x1fc>
   121b8:	dcc14515 	stw	r19,1300(sp)
   121bc:	98011016 	blt	r19,zero,12600 <___vfprintf_internal_r+0x1d74>
   121c0:	980f883a 	mov	r7,r19
   121c4:	d8014615 	stw	zero,1304(sp)
   121c8:	003c5206 	br	11314 <___vfprintf_internal_r+0xa88>
   121cc:	d9014f17 	ldw	r4,1340(sp)
   121d0:	b00b883a 	mov	r5,r22
   121d4:	d9800c04 	addi	r6,sp,48
   121d8:	00108340 	call	10834 <__sprint_r>
   121dc:	103b631e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   121e0:	dc800e17 	ldw	r18,56(sp)
   121e4:	d9000517 	ldw	r4,20(sp)
   121e8:	d8c01904 	addi	r3,sp,100
   121ec:	003f2e06 	br	11ea8 <___vfprintf_internal_r+0x161c>
   121f0:	d8c14c17 	ldw	r3,1328(sp)
   121f4:	1880100c 	andi	r2,r3,64
   121f8:	1000a026 	beq	r2,zero,1247c <___vfprintf_internal_r+0x1bf0>
   121fc:	38800017 	ldw	r2,0(r7)
   12200:	39c00104 	addi	r7,r7,4
   12204:	d9c14015 	stw	r7,1280(sp)
   12208:	d9014b17 	ldw	r4,1324(sp)
   1220c:	d9c14017 	ldw	r7,1280(sp)
   12210:	1100000d 	sth	r4,0(r2)
   12214:	0039f906 	br	109fc <___vfprintf_internal_r+0x170>
   12218:	d9014f17 	ldw	r4,1340(sp)
   1221c:	b00b883a 	mov	r5,r22
   12220:	d9800c04 	addi	r6,sp,48
   12224:	00108340 	call	10834 <__sprint_r>
   12228:	103b501e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   1222c:	dc800e17 	ldw	r18,56(sp)
   12230:	dc400d17 	ldw	r17,52(sp)
   12234:	d9000517 	ldw	r4,20(sp)
   12238:	d8c01904 	addi	r3,sp,100
   1223c:	003f2d06 	br	11ef4 <___vfprintf_internal_r+0x1668>
   12240:	00800184 	movi	r2,6
   12244:	14c09a36 	bltu	r2,r19,124b0 <___vfprintf_internal_r+0x1c24>
   12248:	dcc14515 	stw	r19,1300(sp)
   1224c:	9800010e 	bge	r19,zero,12254 <___vfprintf_internal_r+0x19c8>
   12250:	d8014515 	stw	zero,1300(sp)
   12254:	008000f4 	movhi	r2,3
   12258:	10a05004 	addi	r2,r2,-32448
   1225c:	980f883a 	mov	r7,r19
   12260:	d8814115 	stw	r2,1284(sp)
   12264:	003a7806 	br	10c48 <___vfprintf_internal_r+0x3bc>
   12268:	00bfffc4 	movi	r2,-1
   1226c:	9880e226 	beq	r19,r2,125f8 <___vfprintf_internal_r+0x1d6c>
   12270:	d9414d17 	ldw	r5,1332(sp)
   12274:	008019c4 	movi	r2,103
   12278:	2880dc26 	beq	r5,r2,125ec <___vfprintf_internal_r+0x1d60>
   1227c:	008011c4 	movi	r2,71
   12280:	2880da26 	beq	r5,r2,125ec <___vfprintf_internal_r+0x1d60>
   12284:	d9414c17 	ldw	r5,1328(sp)
   12288:	d9014317 	ldw	r4,1292(sp)
   1228c:	d9814217 	ldw	r6,1288(sp)
   12290:	29404014 	ori	r5,r5,256
   12294:	d9414c15 	stw	r5,1328(sp)
   12298:	2000cc16 	blt	r4,zero,125cc <___vfprintf_internal_r+0x1d40>
   1229c:	3021883a 	mov	r16,r6
   122a0:	2023883a 	mov	r17,r4
   122a4:	0039883a 	mov	fp,zero
   122a8:	d9414d17 	ldw	r5,1332(sp)
   122ac:	00801984 	movi	r2,102
   122b0:	2880b726 	beq	r5,r2,12590 <___vfprintf_internal_r+0x1d04>
   122b4:	00801184 	movi	r2,70
   122b8:	2880b526 	beq	r5,r2,12590 <___vfprintf_internal_r+0x1d04>
   122bc:	00801944 	movi	r2,101
   122c0:	2880c826 	beq	r5,r2,125e4 <___vfprintf_internal_r+0x1d58>
   122c4:	00801144 	movi	r2,69
   122c8:	2880c626 	beq	r5,r2,125e4 <___vfprintf_internal_r+0x1d58>
   122cc:	9829883a 	mov	r20,r19
   122d0:	d9014f17 	ldw	r4,1340(sp)
   122d4:	d8800504 	addi	r2,sp,20
   122d8:	880d883a 	mov	r6,r17
   122dc:	d8800115 	stw	r2,4(sp)
   122e0:	d8c00604 	addi	r3,sp,24
   122e4:	d8800704 	addi	r2,sp,28
   122e8:	800b883a 	mov	r5,r16
   122ec:	01c00084 	movi	r7,2
   122f0:	d8c00215 	stw	r3,8(sp)
   122f4:	d8800315 	stw	r2,12(sp)
   122f8:	dd000015 	stw	r20,0(sp)
   122fc:	0012ab00 	call	12ab0 <_dtoa_r>
   12300:	d9814d17 	ldw	r6,1332(sp)
   12304:	d8814115 	stw	r2,1284(sp)
   12308:	008019c4 	movi	r2,103
   1230c:	30809526 	beq	r6,r2,12564 <___vfprintf_internal_r+0x1cd8>
   12310:	d8c14d17 	ldw	r3,1332(sp)
   12314:	008011c4 	movi	r2,71
   12318:	18809226 	beq	r3,r2,12564 <___vfprintf_internal_r+0x1cd8>
   1231c:	d9414117 	ldw	r5,1284(sp)
   12320:	d9814d17 	ldw	r6,1332(sp)
   12324:	00801984 	movi	r2,102
   12328:	2d25883a 	add	r18,r5,r20
   1232c:	30808626 	beq	r6,r2,12548 <___vfprintf_internal_r+0x1cbc>
   12330:	00801184 	movi	r2,70
   12334:	30808426 	beq	r6,r2,12548 <___vfprintf_internal_r+0x1cbc>
   12338:	000d883a 	mov	r6,zero
   1233c:	000f883a 	mov	r7,zero
   12340:	880b883a 	mov	r5,r17
   12344:	8009883a 	mov	r4,r16
   12348:	00190540 	call	19054 <__eqdf2>
   1234c:	1000751e 	bne	r2,zero,12524 <___vfprintf_internal_r+0x1c98>
   12350:	9005883a 	mov	r2,r18
   12354:	dc800715 	stw	r18,28(sp)
   12358:	d9014117 	ldw	r4,1284(sp)
   1235c:	d9414d17 	ldw	r5,1332(sp)
   12360:	00c019c4 	movi	r3,103
   12364:	1125c83a 	sub	r18,r2,r4
   12368:	28c06826 	beq	r5,r3,1250c <___vfprintf_internal_r+0x1c80>
   1236c:	008011c4 	movi	r2,71
   12370:	28806626 	beq	r5,r2,1250c <___vfprintf_internal_r+0x1c80>
   12374:	d9000517 	ldw	r4,20(sp)
   12378:	d8c14d17 	ldw	r3,1332(sp)
   1237c:	00801944 	movi	r2,101
   12380:	10c05516 	blt	r2,r3,124d8 <___vfprintf_internal_r+0x1c4c>
   12384:	213fffc4 	addi	r4,r4,-1
   12388:	d9000515 	stw	r4,20(sp)
   1238c:	d8c00805 	stb	r3,32(sp)
   12390:	2021883a 	mov	r16,r4
   12394:	2000c116 	blt	r4,zero,1269c <___vfprintf_internal_r+0x1e10>
   12398:	00800ac4 	movi	r2,43
   1239c:	d8800845 	stb	r2,33(sp)
   123a0:	00800244 	movi	r2,9
   123a4:	1400af0e 	bge	r2,r16,12664 <___vfprintf_internal_r+0x1dd8>
   123a8:	1027883a 	mov	r19,r2
   123ac:	dc400b84 	addi	r17,sp,46
   123b0:	8009883a 	mov	r4,r16
   123b4:	01400284 	movi	r5,10
   123b8:	00106240 	call	10624 <__modsi3>
   123bc:	10800c04 	addi	r2,r2,48
   123c0:	8c7fffc4 	addi	r17,r17,-1
   123c4:	8009883a 	mov	r4,r16
   123c8:	01400284 	movi	r5,10
   123cc:	88800005 	stb	r2,0(r17)
   123d0:	00105c40 	call	105c4 <__divsi3>
   123d4:	1021883a 	mov	r16,r2
   123d8:	98bff516 	blt	r19,r2,123b0 <___vfprintf_internal_r+0x1b24>
   123dc:	10c00c04 	addi	r3,r2,48
   123e0:	d88009c4 	addi	r2,sp,39
   123e4:	108001c4 	addi	r2,r2,7
   123e8:	897fffc4 	addi	r5,r17,-1
   123ec:	88ffffc5 	stb	r3,-1(r17)
   123f0:	2880a72e 	bgeu	r5,r2,12690 <___vfprintf_internal_r+0x1e04>
   123f4:	1009883a 	mov	r4,r2
   123f8:	d9800804 	addi	r6,sp,32
   123fc:	d8c00884 	addi	r3,sp,34
   12400:	28800003 	ldbu	r2,0(r5)
   12404:	29400044 	addi	r5,r5,1
   12408:	18800005 	stb	r2,0(r3)
   1240c:	18c00044 	addi	r3,r3,1
   12410:	293ffb36 	bltu	r5,r4,12400 <___vfprintf_internal_r+0x1b74>
   12414:	1987c83a 	sub	r3,r3,r6
   12418:	00800044 	movi	r2,1
   1241c:	d8c14815 	stw	r3,1312(sp)
   12420:	90cf883a 	add	r7,r18,r3
   12424:	1480960e 	bge	r2,r18,12680 <___vfprintf_internal_r+0x1df4>
   12428:	39c00044 	addi	r7,r7,1
   1242c:	d9c14515 	stw	r7,1300(sp)
   12430:	38003416 	blt	r7,zero,12504 <___vfprintf_internal_r+0x1c78>
   12434:	e0803fcc 	andi	r2,fp,255
   12438:	1080201c 	xori	r2,r2,128
   1243c:	10bfe004 	addi	r2,r2,-128
   12440:	10004e26 	beq	r2,zero,1257c <___vfprintf_internal_r+0x1cf0>
   12444:	00800b44 	movi	r2,45
   12448:	dc814715 	stw	r18,1308(sp)
   1244c:	d8014615 	stw	zero,1304(sp)
   12450:	d8800405 	stb	r2,16(sp)
   12454:	003bb106 	br	1131c <___vfprintf_internal_r+0xa90>
   12458:	00800b44 	movi	r2,45
   1245c:	d8800405 	stb	r2,16(sp)
   12460:	003d3306 	br	11930 <___vfprintf_internal_r+0x10a4>
   12464:	d9014f17 	ldw	r4,1340(sp)
   12468:	b00b883a 	mov	r5,r22
   1246c:	d9800c04 	addi	r6,sp,48
   12470:	00108340 	call	10834 <__sprint_r>
   12474:	103abd1e 	bne	r2,zero,10f6c <___vfprintf_internal_r+0x6e0>
   12478:	003abb06 	br	10f68 <___vfprintf_internal_r+0x6dc>
   1247c:	38800017 	ldw	r2,0(r7)
   12480:	39c00104 	addi	r7,r7,4
   12484:	d9c14015 	stw	r7,1280(sp)
   12488:	d9414b17 	ldw	r5,1324(sp)
   1248c:	d9c14017 	ldw	r7,1280(sp)
   12490:	11400015 	stw	r5,0(r2)
   12494:	00395906 	br	109fc <___vfprintf_internal_r+0x170>
   12498:	980f883a 	mov	r7,r19
   1249c:	dcc14515 	stw	r19,1300(sp)
   124a0:	d8014615 	stw	zero,1304(sp)
   124a4:	003b9b06 	br	11314 <___vfprintf_internal_r+0xa88>
   124a8:	0027883a 	mov	r19,zero
   124ac:	00397806 	br	10a90 <___vfprintf_internal_r+0x204>
   124b0:	00c000f4 	movhi	r3,3
   124b4:	18e05004 	addi	r3,r3,-32448
   124b8:	100f883a 	mov	r7,r2
   124bc:	d8814515 	stw	r2,1300(sp)
   124c0:	d8c14115 	stw	r3,1284(sp)
   124c4:	0039e006 	br	10c48 <___vfprintf_internal_r+0x3bc>
   124c8:	008000f4 	movhi	r2,3
   124cc:	10a04f04 	addi	r2,r2,-32452
   124d0:	d8814115 	stw	r2,1284(sp)
   124d4:	003d1c06 	br	11948 <___vfprintf_internal_r+0x10bc>
   124d8:	d9414d17 	ldw	r5,1332(sp)
   124dc:	00801984 	movi	r2,102
   124e0:	28804926 	beq	r5,r2,12608 <___vfprintf_internal_r+0x1d7c>
   124e4:	200f883a 	mov	r7,r4
   124e8:	24805716 	blt	r4,r18,12648 <___vfprintf_internal_r+0x1dbc>
   124ec:	d9414c17 	ldw	r5,1328(sp)
   124f0:	2880004c 	andi	r2,r5,1
   124f4:	10000126 	beq	r2,zero,124fc <___vfprintf_internal_r+0x1c70>
   124f8:	21c00044 	addi	r7,r4,1
   124fc:	d9c14515 	stw	r7,1300(sp)
   12500:	383fcc0e 	bge	r7,zero,12434 <___vfprintf_internal_r+0x1ba8>
   12504:	d8014515 	stw	zero,1300(sp)
   12508:	003fca06 	br	12434 <___vfprintf_internal_r+0x1ba8>
   1250c:	d9000517 	ldw	r4,20(sp)
   12510:	00bfff04 	movi	r2,-4
   12514:	1100480e 	bge	r2,r4,12638 <___vfprintf_internal_r+0x1dac>
   12518:	99004716 	blt	r19,r4,12638 <___vfprintf_internal_r+0x1dac>
   1251c:	d8c14d15 	stw	r3,1332(sp)
   12520:	003ff006 	br	124e4 <___vfprintf_internal_r+0x1c58>
   12524:	d8800717 	ldw	r2,28(sp)
   12528:	14bf8b2e 	bgeu	r2,r18,12358 <___vfprintf_internal_r+0x1acc>
   1252c:	9007883a 	mov	r3,r18
   12530:	01000c04 	movi	r4,48
   12534:	11000005 	stb	r4,0(r2)
   12538:	10800044 	addi	r2,r2,1
   1253c:	d8800715 	stw	r2,28(sp)
   12540:	18bffc1e 	bne	r3,r2,12534 <___vfprintf_internal_r+0x1ca8>
   12544:	003f8406 	br	12358 <___vfprintf_internal_r+0x1acc>
   12548:	d8814117 	ldw	r2,1284(sp)
   1254c:	10c00007 	ldb	r3,0(r2)
   12550:	00800c04 	movi	r2,48
   12554:	18805b26 	beq	r3,r2,126c4 <___vfprintf_internal_r+0x1e38>
   12558:	d9000517 	ldw	r4,20(sp)
   1255c:	9125883a 	add	r18,r18,r4
   12560:	003f7506 	br	12338 <___vfprintf_internal_r+0x1aac>
   12564:	d9014c17 	ldw	r4,1328(sp)
   12568:	2080004c 	andi	r2,r4,1
   1256c:	1005003a 	cmpeq	r2,r2,zero
   12570:	103f6a26 	beq	r2,zero,1231c <___vfprintf_internal_r+0x1a90>
   12574:	d8800717 	ldw	r2,28(sp)
   12578:	003f7706 	br	12358 <___vfprintf_internal_r+0x1acc>
   1257c:	d9c14515 	stw	r7,1300(sp)
   12580:	38004d16 	blt	r7,zero,126b8 <___vfprintf_internal_r+0x1e2c>
   12584:	dc814715 	stw	r18,1308(sp)
   12588:	d8014615 	stw	zero,1304(sp)
   1258c:	003b6106 	br	11314 <___vfprintf_internal_r+0xa88>
   12590:	d9014f17 	ldw	r4,1340(sp)
   12594:	d8800504 	addi	r2,sp,20
   12598:	d8800115 	stw	r2,4(sp)
   1259c:	d8c00604 	addi	r3,sp,24
   125a0:	d8800704 	addi	r2,sp,28
   125a4:	800b883a 	mov	r5,r16
   125a8:	880d883a 	mov	r6,r17
   125ac:	01c000c4 	movi	r7,3
   125b0:	d8c00215 	stw	r3,8(sp)
   125b4:	d8800315 	stw	r2,12(sp)
   125b8:	dcc00015 	stw	r19,0(sp)
   125bc:	9829883a 	mov	r20,r19
   125c0:	0012ab00 	call	12ab0 <_dtoa_r>
   125c4:	d8814115 	stw	r2,1284(sp)
   125c8:	003f5106 	br	12310 <___vfprintf_internal_r+0x1a84>
   125cc:	d8c14217 	ldw	r3,1288(sp)
   125d0:	d9014317 	ldw	r4,1292(sp)
   125d4:	07000b44 	movi	fp,45
   125d8:	1821883a 	mov	r16,r3
   125dc:	2460003c 	xorhi	r17,r4,32768
   125e0:	003f3106 	br	122a8 <___vfprintf_internal_r+0x1a1c>
   125e4:	9d000044 	addi	r20,r19,1
   125e8:	003f3906 	br	122d0 <___vfprintf_internal_r+0x1a44>
   125ec:	983f251e 	bne	r19,zero,12284 <___vfprintf_internal_r+0x19f8>
   125f0:	04c00044 	movi	r19,1
   125f4:	003f2306 	br	12284 <___vfprintf_internal_r+0x19f8>
   125f8:	04c00184 	movi	r19,6
   125fc:	003f2106 	br	12284 <___vfprintf_internal_r+0x19f8>
   12600:	d8014515 	stw	zero,1300(sp)
   12604:	003eee06 	br	121c0 <___vfprintf_internal_r+0x1934>
   12608:	200f883a 	mov	r7,r4
   1260c:	0100370e 	bge	zero,r4,126ec <___vfprintf_internal_r+0x1e60>
   12610:	9800031e 	bne	r19,zero,12620 <___vfprintf_internal_r+0x1d94>
   12614:	d9814c17 	ldw	r6,1328(sp)
   12618:	3080004c 	andi	r2,r6,1
   1261c:	103fb726 	beq	r2,zero,124fc <___vfprintf_internal_r+0x1c70>
   12620:	20800044 	addi	r2,r4,1
   12624:	98a7883a 	add	r19,r19,r2
   12628:	dcc14515 	stw	r19,1300(sp)
   1262c:	980f883a 	mov	r7,r19
   12630:	983f800e 	bge	r19,zero,12434 <___vfprintf_internal_r+0x1ba8>
   12634:	003fb306 	br	12504 <___vfprintf_internal_r+0x1c78>
   12638:	d9814d17 	ldw	r6,1332(sp)
   1263c:	31bfff84 	addi	r6,r6,-2
   12640:	d9814d15 	stw	r6,1332(sp)
   12644:	003f4c06 	br	12378 <___vfprintf_internal_r+0x1aec>
   12648:	0100180e 	bge	zero,r4,126ac <___vfprintf_internal_r+0x1e20>
   1264c:	00800044 	movi	r2,1
   12650:	1485883a 	add	r2,r2,r18
   12654:	d8814515 	stw	r2,1300(sp)
   12658:	100f883a 	mov	r7,r2
   1265c:	103f750e 	bge	r2,zero,12434 <___vfprintf_internal_r+0x1ba8>
   12660:	003fa806 	br	12504 <___vfprintf_internal_r+0x1c78>
   12664:	80c00c04 	addi	r3,r16,48
   12668:	00800c04 	movi	r2,48
   1266c:	d8c008c5 	stb	r3,35(sp)
   12670:	d9800804 	addi	r6,sp,32
   12674:	d8c00904 	addi	r3,sp,36
   12678:	d8800885 	stb	r2,34(sp)
   1267c:	003f6506 	br	12414 <___vfprintf_internal_r+0x1b88>
   12680:	d9014c17 	ldw	r4,1328(sp)
   12684:	2084703a 	and	r2,r4,r2
   12688:	103f9c26 	beq	r2,zero,124fc <___vfprintf_internal_r+0x1c70>
   1268c:	003f6606 	br	12428 <___vfprintf_internal_r+0x1b9c>
   12690:	d9800804 	addi	r6,sp,32
   12694:	d8c00884 	addi	r3,sp,34
   12698:	003f5e06 	br	12414 <___vfprintf_internal_r+0x1b88>
   1269c:	00800b44 	movi	r2,45
   126a0:	0121c83a 	sub	r16,zero,r4
   126a4:	d8800845 	stb	r2,33(sp)
   126a8:	003f3d06 	br	123a0 <___vfprintf_internal_r+0x1b14>
   126ac:	00800084 	movi	r2,2
   126b0:	1105c83a 	sub	r2,r2,r4
   126b4:	003fe606 	br	12650 <___vfprintf_internal_r+0x1dc4>
   126b8:	d8014515 	stw	zero,1300(sp)
   126bc:	dc814715 	stw	r18,1308(sp)
   126c0:	003fb106 	br	12588 <___vfprintf_internal_r+0x1cfc>
   126c4:	000d883a 	mov	r6,zero
   126c8:	000f883a 	mov	r7,zero
   126cc:	8009883a 	mov	r4,r16
   126d0:	880b883a 	mov	r5,r17
   126d4:	00190dc0 	call	190dc <__nedf2>
   126d8:	103f9f26 	beq	r2,zero,12558 <___vfprintf_internal_r+0x1ccc>
   126dc:	00800044 	movi	r2,1
   126e0:	1509c83a 	sub	r4,r2,r20
   126e4:	d9000515 	stw	r4,20(sp)
   126e8:	003f9b06 	br	12558 <___vfprintf_internal_r+0x1ccc>
   126ec:	98000d1e 	bne	r19,zero,12724 <___vfprintf_internal_r+0x1e98>
   126f0:	d8c14c17 	ldw	r3,1328(sp)
   126f4:	1880004c 	andi	r2,r3,1
   126f8:	10000a1e 	bne	r2,zero,12724 <___vfprintf_internal_r+0x1e98>
   126fc:	01000044 	movi	r4,1
   12700:	200f883a 	mov	r7,r4
   12704:	d9014515 	stw	r4,1300(sp)
   12708:	003f4a06 	br	12434 <___vfprintf_internal_r+0x1ba8>
   1270c:	3cc00017 	ldw	r19,0(r7)
   12710:	39c00104 	addi	r7,r7,4
   12714:	983d0e0e 	bge	r19,zero,11b50 <___vfprintf_internal_r+0x12c4>
   12718:	b8c00007 	ldb	r3,0(r23)
   1271c:	04ffffc4 	movi	r19,-1
   12720:	0038d906 	br	10a88 <___vfprintf_internal_r+0x1fc>
   12724:	9cc00084 	addi	r19,r19,2
   12728:	dcc14515 	stw	r19,1300(sp)
   1272c:	980f883a 	mov	r7,r19
   12730:	983f400e 	bge	r19,zero,12434 <___vfprintf_internal_r+0x1ba8>
   12734:	003f7306 	br	12504 <___vfprintf_internal_r+0x1c78>

00012738 <__vfprintf_internal>:
   12738:	008000f4 	movhi	r2,3
   1273c:	10a79e04 	addi	r2,r2,-24968
   12740:	2013883a 	mov	r9,r4
   12744:	11000017 	ldw	r4,0(r2)
   12748:	2805883a 	mov	r2,r5
   1274c:	300f883a 	mov	r7,r6
   12750:	480b883a 	mov	r5,r9
   12754:	100d883a 	mov	r6,r2
   12758:	001088c1 	jmpi	1088c <___vfprintf_internal_r>

0001275c <__swsetup_r>:
   1275c:	008000f4 	movhi	r2,3
   12760:	10a79e04 	addi	r2,r2,-24968
   12764:	10c00017 	ldw	r3,0(r2)
   12768:	defffd04 	addi	sp,sp,-12
   1276c:	dc400115 	stw	r17,4(sp)
   12770:	dc000015 	stw	r16,0(sp)
   12774:	dfc00215 	stw	ra,8(sp)
   12778:	2023883a 	mov	r17,r4
   1277c:	2821883a 	mov	r16,r5
   12780:	18000226 	beq	r3,zero,1278c <__swsetup_r+0x30>
   12784:	18800e17 	ldw	r2,56(r3)
   12788:	10001f26 	beq	r2,zero,12808 <__swsetup_r+0xac>
   1278c:	8100030b 	ldhu	r4,12(r16)
   12790:	2080020c 	andi	r2,r4,8
   12794:	10002826 	beq	r2,zero,12838 <__swsetup_r+0xdc>
   12798:	81400417 	ldw	r5,16(r16)
   1279c:	28001d26 	beq	r5,zero,12814 <__swsetup_r+0xb8>
   127a0:	2080004c 	andi	r2,r4,1
   127a4:	1005003a 	cmpeq	r2,r2,zero
   127a8:	10000b26 	beq	r2,zero,127d8 <__swsetup_r+0x7c>
   127ac:	2080008c 	andi	r2,r4,2
   127b0:	10001226 	beq	r2,zero,127fc <__swsetup_r+0xa0>
   127b4:	0005883a 	mov	r2,zero
   127b8:	80800215 	stw	r2,8(r16)
   127bc:	28000b26 	beq	r5,zero,127ec <__swsetup_r+0x90>
   127c0:	0005883a 	mov	r2,zero
   127c4:	dfc00217 	ldw	ra,8(sp)
   127c8:	dc400117 	ldw	r17,4(sp)
   127cc:	dc000017 	ldw	r16,0(sp)
   127d0:	dec00304 	addi	sp,sp,12
   127d4:	f800283a 	ret
   127d8:	80800517 	ldw	r2,20(r16)
   127dc:	80000215 	stw	zero,8(r16)
   127e0:	0085c83a 	sub	r2,zero,r2
   127e4:	80800615 	stw	r2,24(r16)
   127e8:	283ff51e 	bne	r5,zero,127c0 <__swsetup_r+0x64>
   127ec:	2080200c 	andi	r2,r4,128
   127f0:	103ff326 	beq	r2,zero,127c0 <__swsetup_r+0x64>
   127f4:	00bfffc4 	movi	r2,-1
   127f8:	003ff206 	br	127c4 <__swsetup_r+0x68>
   127fc:	80800517 	ldw	r2,20(r16)
   12800:	80800215 	stw	r2,8(r16)
   12804:	003fed06 	br	127bc <__swsetup_r+0x60>
   12808:	1809883a 	mov	r4,r3
   1280c:	00142fc0 	call	142fc <__sinit>
   12810:	003fde06 	br	1278c <__swsetup_r+0x30>
   12814:	20c0a00c 	andi	r3,r4,640
   12818:	00808004 	movi	r2,512
   1281c:	18bfe026 	beq	r3,r2,127a0 <__swsetup_r+0x44>
   12820:	8809883a 	mov	r4,r17
   12824:	800b883a 	mov	r5,r16
   12828:	00150740 	call	15074 <__smakebuf_r>
   1282c:	8100030b 	ldhu	r4,12(r16)
   12830:	81400417 	ldw	r5,16(r16)
   12834:	003fda06 	br	127a0 <__swsetup_r+0x44>
   12838:	2080040c 	andi	r2,r4,16
   1283c:	103fed26 	beq	r2,zero,127f4 <__swsetup_r+0x98>
   12840:	2080010c 	andi	r2,r4,4
   12844:	10001226 	beq	r2,zero,12890 <__swsetup_r+0x134>
   12848:	81400c17 	ldw	r5,48(r16)
   1284c:	28000526 	beq	r5,zero,12864 <__swsetup_r+0x108>
   12850:	80801004 	addi	r2,r16,64
   12854:	28800226 	beq	r5,r2,12860 <__swsetup_r+0x104>
   12858:	8809883a 	mov	r4,r17
   1285c:	00146800 	call	14680 <_free_r>
   12860:	80000c15 	stw	zero,48(r16)
   12864:	8080030b 	ldhu	r2,12(r16)
   12868:	81400417 	ldw	r5,16(r16)
   1286c:	80000115 	stw	zero,4(r16)
   12870:	10bff6cc 	andi	r2,r2,65499
   12874:	8080030d 	sth	r2,12(r16)
   12878:	81400015 	stw	r5,0(r16)
   1287c:	8080030b 	ldhu	r2,12(r16)
   12880:	10800214 	ori	r2,r2,8
   12884:	113fffcc 	andi	r4,r2,65535
   12888:	8080030d 	sth	r2,12(r16)
   1288c:	003fc306 	br	1279c <__swsetup_r+0x40>
   12890:	81400417 	ldw	r5,16(r16)
   12894:	003ff906 	br	1287c <__swsetup_r+0x120>

00012898 <quorem>:
   12898:	28c00417 	ldw	r3,16(r5)
   1289c:	20800417 	ldw	r2,16(r4)
   128a0:	defff604 	addi	sp,sp,-40
   128a4:	ddc00715 	stw	r23,28(sp)
   128a8:	dd400515 	stw	r21,20(sp)
   128ac:	dfc00915 	stw	ra,36(sp)
   128b0:	df000815 	stw	fp,32(sp)
   128b4:	dd800615 	stw	r22,24(sp)
   128b8:	dd000415 	stw	r20,16(sp)
   128bc:	dcc00315 	stw	r19,12(sp)
   128c0:	dc800215 	stw	r18,8(sp)
   128c4:	dc400115 	stw	r17,4(sp)
   128c8:	dc000015 	stw	r16,0(sp)
   128cc:	202f883a 	mov	r23,r4
   128d0:	282b883a 	mov	r21,r5
   128d4:	10c07416 	blt	r2,r3,12aa8 <quorem+0x210>
   128d8:	1c7fffc4 	addi	r17,r3,-1
   128dc:	8c45883a 	add	r2,r17,r17
   128e0:	1085883a 	add	r2,r2,r2
   128e4:	2c000504 	addi	r16,r5,20
   128e8:	24c00504 	addi	r19,r4,20
   128ec:	14ed883a 	add	r22,r2,r19
   128f0:	80a5883a 	add	r18,r16,r2
   128f4:	b7000017 	ldw	fp,0(r22)
   128f8:	91400017 	ldw	r5,0(r18)
   128fc:	e009883a 	mov	r4,fp
   12900:	29400044 	addi	r5,r5,1
   12904:	00106840 	call	10684 <__udivsi3>
   12908:	1029883a 	mov	r20,r2
   1290c:	10003c1e 	bne	r2,zero,12a00 <quorem+0x168>
   12910:	a80b883a 	mov	r5,r21
   12914:	b809883a 	mov	r4,r23
   12918:	0015da00 	call	15da0 <__mcmp>
   1291c:	10002b16 	blt	r2,zero,129cc <quorem+0x134>
   12920:	a5000044 	addi	r20,r20,1
   12924:	980f883a 	mov	r7,r19
   12928:	0011883a 	mov	r8,zero
   1292c:	0009883a 	mov	r4,zero
   12930:	81400017 	ldw	r5,0(r16)
   12934:	38c00017 	ldw	r3,0(r7)
   12938:	84000104 	addi	r16,r16,4
   1293c:	28bfffcc 	andi	r2,r5,65535
   12940:	2085883a 	add	r2,r4,r2
   12944:	11bfffcc 	andi	r6,r2,65535
   12948:	193fffcc 	andi	r4,r3,65535
   1294c:	1004d43a 	srli	r2,r2,16
   12950:	280ad43a 	srli	r5,r5,16
   12954:	2189c83a 	sub	r4,r4,r6
   12958:	2209883a 	add	r4,r4,r8
   1295c:	1806d43a 	srli	r3,r3,16
   12960:	288b883a 	add	r5,r5,r2
   12964:	200dd43a 	srai	r6,r4,16
   12968:	28bfffcc 	andi	r2,r5,65535
   1296c:	1887c83a 	sub	r3,r3,r2
   12970:	1987883a 	add	r3,r3,r6
   12974:	3900000d 	sth	r4,0(r7)
   12978:	38c0008d 	sth	r3,2(r7)
   1297c:	2808d43a 	srli	r4,r5,16
   12980:	39c00104 	addi	r7,r7,4
   12984:	1811d43a 	srai	r8,r3,16
   12988:	943fe92e 	bgeu	r18,r16,12930 <quorem+0x98>
   1298c:	8c45883a 	add	r2,r17,r17
   12990:	1085883a 	add	r2,r2,r2
   12994:	9885883a 	add	r2,r19,r2
   12998:	10c00017 	ldw	r3,0(r2)
   1299c:	18000b1e 	bne	r3,zero,129cc <quorem+0x134>
   129a0:	113fff04 	addi	r4,r2,-4
   129a4:	9900082e 	bgeu	r19,r4,129c8 <quorem+0x130>
   129a8:	10bfff17 	ldw	r2,-4(r2)
   129ac:	10000326 	beq	r2,zero,129bc <quorem+0x124>
   129b0:	00000506 	br	129c8 <quorem+0x130>
   129b4:	20800017 	ldw	r2,0(r4)
   129b8:	1000031e 	bne	r2,zero,129c8 <quorem+0x130>
   129bc:	213fff04 	addi	r4,r4,-4
   129c0:	8c7fffc4 	addi	r17,r17,-1
   129c4:	993ffb36 	bltu	r19,r4,129b4 <quorem+0x11c>
   129c8:	bc400415 	stw	r17,16(r23)
   129cc:	a005883a 	mov	r2,r20
   129d0:	dfc00917 	ldw	ra,36(sp)
   129d4:	df000817 	ldw	fp,32(sp)
   129d8:	ddc00717 	ldw	r23,28(sp)
   129dc:	dd800617 	ldw	r22,24(sp)
   129e0:	dd400517 	ldw	r21,20(sp)
   129e4:	dd000417 	ldw	r20,16(sp)
   129e8:	dcc00317 	ldw	r19,12(sp)
   129ec:	dc800217 	ldw	r18,8(sp)
   129f0:	dc400117 	ldw	r17,4(sp)
   129f4:	dc000017 	ldw	r16,0(sp)
   129f8:	dec00a04 	addi	sp,sp,40
   129fc:	f800283a 	ret
   12a00:	980f883a 	mov	r7,r19
   12a04:	8011883a 	mov	r8,r16
   12a08:	0013883a 	mov	r9,zero
   12a0c:	000d883a 	mov	r6,zero
   12a10:	40c00017 	ldw	r3,0(r8)
   12a14:	39000017 	ldw	r4,0(r7)
   12a18:	42000104 	addi	r8,r8,4
   12a1c:	18bfffcc 	andi	r2,r3,65535
   12a20:	a085383a 	mul	r2,r20,r2
   12a24:	1806d43a 	srli	r3,r3,16
   12a28:	217fffcc 	andi	r5,r4,65535
   12a2c:	3085883a 	add	r2,r6,r2
   12a30:	11bfffcc 	andi	r6,r2,65535
   12a34:	a0c7383a 	mul	r3,r20,r3
   12a38:	1004d43a 	srli	r2,r2,16
   12a3c:	298bc83a 	sub	r5,r5,r6
   12a40:	2a4b883a 	add	r5,r5,r9
   12a44:	2008d43a 	srli	r4,r4,16
   12a48:	1887883a 	add	r3,r3,r2
   12a4c:	280dd43a 	srai	r6,r5,16
   12a50:	18bfffcc 	andi	r2,r3,65535
   12a54:	2089c83a 	sub	r4,r4,r2
   12a58:	2189883a 	add	r4,r4,r6
   12a5c:	3900008d 	sth	r4,2(r7)
   12a60:	3940000d 	sth	r5,0(r7)
   12a64:	180cd43a 	srli	r6,r3,16
   12a68:	39c00104 	addi	r7,r7,4
   12a6c:	2013d43a 	srai	r9,r4,16
   12a70:	923fe72e 	bgeu	r18,r8,12a10 <quorem+0x178>
   12a74:	e03fa61e 	bne	fp,zero,12910 <quorem+0x78>
   12a78:	b0ffff04 	addi	r3,r22,-4
   12a7c:	98c0082e 	bgeu	r19,r3,12aa0 <quorem+0x208>
   12a80:	b0bfff17 	ldw	r2,-4(r22)
   12a84:	10000326 	beq	r2,zero,12a94 <quorem+0x1fc>
   12a88:	00000506 	br	12aa0 <quorem+0x208>
   12a8c:	18800017 	ldw	r2,0(r3)
   12a90:	1000031e 	bne	r2,zero,12aa0 <quorem+0x208>
   12a94:	18ffff04 	addi	r3,r3,-4
   12a98:	8c7fffc4 	addi	r17,r17,-1
   12a9c:	98fffb36 	bltu	r19,r3,12a8c <quorem+0x1f4>
   12aa0:	bc400415 	stw	r17,16(r23)
   12aa4:	003f9a06 	br	12910 <quorem+0x78>
   12aa8:	0005883a 	mov	r2,zero
   12aac:	003fc806 	br	129d0 <quorem+0x138>

00012ab0 <_dtoa_r>:
   12ab0:	22001017 	ldw	r8,64(r4)
   12ab4:	deffda04 	addi	sp,sp,-152
   12ab8:	dd402115 	stw	r21,132(sp)
   12abc:	dd002015 	stw	r20,128(sp)
   12ac0:	dc801e15 	stw	r18,120(sp)
   12ac4:	dc401d15 	stw	r17,116(sp)
   12ac8:	dfc02515 	stw	ra,148(sp)
   12acc:	df002415 	stw	fp,144(sp)
   12ad0:	ddc02315 	stw	r23,140(sp)
   12ad4:	dd802215 	stw	r22,136(sp)
   12ad8:	dcc01f15 	stw	r19,124(sp)
   12adc:	dc001c15 	stw	r16,112(sp)
   12ae0:	d9001615 	stw	r4,88(sp)
   12ae4:	3023883a 	mov	r17,r6
   12ae8:	2829883a 	mov	r20,r5
   12aec:	d9c01715 	stw	r7,92(sp)
   12af0:	dc802817 	ldw	r18,160(sp)
   12af4:	302b883a 	mov	r21,r6
   12af8:	40000a26 	beq	r8,zero,12b24 <_dtoa_r+0x74>
   12afc:	20801117 	ldw	r2,68(r4)
   12b00:	400b883a 	mov	r5,r8
   12b04:	40800115 	stw	r2,4(r8)
   12b08:	20c01117 	ldw	r3,68(r4)
   12b0c:	00800044 	movi	r2,1
   12b10:	10c4983a 	sll	r2,r2,r3
   12b14:	40800215 	stw	r2,8(r8)
   12b18:	0015c440 	call	15c44 <_Bfree>
   12b1c:	d8c01617 	ldw	r3,88(sp)
   12b20:	18001015 	stw	zero,64(r3)
   12b24:	8800a316 	blt	r17,zero,12db4 <_dtoa_r+0x304>
   12b28:	90000015 	stw	zero,0(r18)
   12b2c:	a8dffc2c 	andhi	r3,r21,32752
   12b30:	009ffc34 	movhi	r2,32752
   12b34:	18809126 	beq	r3,r2,12d7c <_dtoa_r+0x2cc>
   12b38:	000d883a 	mov	r6,zero
   12b3c:	000f883a 	mov	r7,zero
   12b40:	a009883a 	mov	r4,r20
   12b44:	a80b883a 	mov	r5,r21
   12b48:	dd001215 	stw	r20,72(sp)
   12b4c:	dd401315 	stw	r21,76(sp)
   12b50:	00190dc0 	call	190dc <__nedf2>
   12b54:	1000171e 	bne	r2,zero,12bb4 <_dtoa_r+0x104>
   12b58:	d9802717 	ldw	r6,156(sp)
   12b5c:	00800044 	movi	r2,1
   12b60:	30800015 	stw	r2,0(r6)
   12b64:	d8802917 	ldw	r2,164(sp)
   12b68:	10029b26 	beq	r2,zero,135d8 <_dtoa_r+0xb28>
   12b6c:	d9002917 	ldw	r4,164(sp)
   12b70:	008000f4 	movhi	r2,3
   12b74:	10a05e44 	addi	r2,r2,-32391
   12b78:	10ffffc4 	addi	r3,r2,-1
   12b7c:	20800015 	stw	r2,0(r4)
   12b80:	1805883a 	mov	r2,r3
   12b84:	dfc02517 	ldw	ra,148(sp)
   12b88:	df002417 	ldw	fp,144(sp)
   12b8c:	ddc02317 	ldw	r23,140(sp)
   12b90:	dd802217 	ldw	r22,136(sp)
   12b94:	dd402117 	ldw	r21,132(sp)
   12b98:	dd002017 	ldw	r20,128(sp)
   12b9c:	dcc01f17 	ldw	r19,124(sp)
   12ba0:	dc801e17 	ldw	r18,120(sp)
   12ba4:	dc401d17 	ldw	r17,116(sp)
   12ba8:	dc001c17 	ldw	r16,112(sp)
   12bac:	dec02604 	addi	sp,sp,152
   12bb0:	f800283a 	ret
   12bb4:	d9001617 	ldw	r4,88(sp)
   12bb8:	d9401217 	ldw	r5,72(sp)
   12bbc:	d8800104 	addi	r2,sp,4
   12bc0:	a80d883a 	mov	r6,r21
   12bc4:	d9c00204 	addi	r7,sp,8
   12bc8:	d8800015 	stw	r2,0(sp)
   12bcc:	00162800 	call	16280 <__d2b>
   12bd0:	d8800715 	stw	r2,28(sp)
   12bd4:	a804d53a 	srli	r2,r21,20
   12bd8:	1101ffcc 	andi	r4,r2,2047
   12bdc:	20008626 	beq	r4,zero,12df8 <_dtoa_r+0x348>
   12be0:	d8c01217 	ldw	r3,72(sp)
   12be4:	00800434 	movhi	r2,16
   12be8:	10bfffc4 	addi	r2,r2,-1
   12bec:	ddc00117 	ldw	r23,4(sp)
   12bf0:	a884703a 	and	r2,r21,r2
   12bf4:	1811883a 	mov	r8,r3
   12bf8:	124ffc34 	orhi	r9,r2,16368
   12bfc:	25bf0044 	addi	r22,r4,-1023
   12c00:	d8000815 	stw	zero,32(sp)
   12c04:	0005883a 	mov	r2,zero
   12c08:	00cffe34 	movhi	r3,16376
   12c0c:	480b883a 	mov	r5,r9
   12c10:	4009883a 	mov	r4,r8
   12c14:	180f883a 	mov	r7,r3
   12c18:	100d883a 	mov	r6,r2
   12c1c:	00189440 	call	18944 <__subdf3>
   12c20:	0218dbf4 	movhi	r8,25455
   12c24:	4210d844 	addi	r8,r8,17249
   12c28:	024ff4f4 	movhi	r9,16339
   12c2c:	4a61e9c4 	addi	r9,r9,-30809
   12c30:	480f883a 	mov	r7,r9
   12c34:	400d883a 	mov	r6,r8
   12c38:	180b883a 	mov	r5,r3
   12c3c:	1009883a 	mov	r4,r2
   12c40:	0018a380 	call	18a38 <__muldf3>
   12c44:	0222d874 	movhi	r8,35681
   12c48:	42322cc4 	addi	r8,r8,-14157
   12c4c:	024ff1f4 	movhi	r9,16327
   12c50:	4a628a04 	addi	r9,r9,-30168
   12c54:	480f883a 	mov	r7,r9
   12c58:	400d883a 	mov	r6,r8
   12c5c:	180b883a 	mov	r5,r3
   12c60:	1009883a 	mov	r4,r2
   12c64:	00189c40 	call	189c4 <__adddf3>
   12c68:	b009883a 	mov	r4,r22
   12c6c:	1021883a 	mov	r16,r2
   12c70:	1823883a 	mov	r17,r3
   12c74:	00192fc0 	call	192fc <__floatsidf>
   12c78:	021427f4 	movhi	r8,20639
   12c7c:	421e7ec4 	addi	r8,r8,31227
   12c80:	024ff4f4 	movhi	r9,16339
   12c84:	4a5104c4 	addi	r9,r9,17427
   12c88:	480f883a 	mov	r7,r9
   12c8c:	400d883a 	mov	r6,r8
   12c90:	180b883a 	mov	r5,r3
   12c94:	1009883a 	mov	r4,r2
   12c98:	0018a380 	call	18a38 <__muldf3>
   12c9c:	180f883a 	mov	r7,r3
   12ca0:	880b883a 	mov	r5,r17
   12ca4:	100d883a 	mov	r6,r2
   12ca8:	8009883a 	mov	r4,r16
   12cac:	00189c40 	call	189c4 <__adddf3>
   12cb0:	1009883a 	mov	r4,r2
   12cb4:	180b883a 	mov	r5,r3
   12cb8:	1021883a 	mov	r16,r2
   12cbc:	1823883a 	mov	r17,r3
   12cc0:	00193f40 	call	193f4 <__fixdfsi>
   12cc4:	000d883a 	mov	r6,zero
   12cc8:	000f883a 	mov	r7,zero
   12ccc:	8009883a 	mov	r4,r16
   12cd0:	880b883a 	mov	r5,r17
   12cd4:	d8800d15 	stw	r2,52(sp)
   12cd8:	00192740 	call	19274 <__ltdf2>
   12cdc:	10031716 	blt	r2,zero,1393c <_dtoa_r+0xe8c>
   12ce0:	d8c00d17 	ldw	r3,52(sp)
   12ce4:	00800584 	movi	r2,22
   12ce8:	10c1482e 	bgeu	r2,r3,1320c <_dtoa_r+0x75c>
   12cec:	01000044 	movi	r4,1
   12cf0:	d9000c15 	stw	r4,48(sp)
   12cf4:	bd85c83a 	sub	r2,r23,r22
   12cf8:	11bfffc4 	addi	r6,r2,-1
   12cfc:	30030b16 	blt	r6,zero,1392c <_dtoa_r+0xe7c>
   12d00:	d9800a15 	stw	r6,40(sp)
   12d04:	d8001115 	stw	zero,68(sp)
   12d08:	d8c00d17 	ldw	r3,52(sp)
   12d0c:	1802ff16 	blt	r3,zero,1390c <_dtoa_r+0xe5c>
   12d10:	d9000a17 	ldw	r4,40(sp)
   12d14:	d8c00915 	stw	r3,36(sp)
   12d18:	d8001015 	stw	zero,64(sp)
   12d1c:	20c9883a 	add	r4,r4,r3
   12d20:	d9000a15 	stw	r4,40(sp)
   12d24:	d9001717 	ldw	r4,92(sp)
   12d28:	00800244 	movi	r2,9
   12d2c:	11004636 	bltu	r2,r4,12e48 <_dtoa_r+0x398>
   12d30:	00800144 	movi	r2,5
   12d34:	11020416 	blt	r2,r4,13548 <_dtoa_r+0xa98>
   12d38:	04400044 	movi	r17,1
   12d3c:	d8c01717 	ldw	r3,92(sp)
   12d40:	00800144 	movi	r2,5
   12d44:	10c1ed36 	bltu	r2,r3,134fc <_dtoa_r+0xa4c>
   12d48:	18c5883a 	add	r2,r3,r3
   12d4c:	1085883a 	add	r2,r2,r2
   12d50:	00c00074 	movhi	r3,1
   12d54:	18cb5904 	addi	r3,r3,11620
   12d58:	10c5883a 	add	r2,r2,r3
   12d5c:	11000017 	ldw	r4,0(r2)
   12d60:	2000683a 	jmp	r4
   12d64:	00012e50 	cmplti	zero,zero,1209
   12d68:	00012e50 	cmplti	zero,zero,1209
   12d6c:	00013850 	cmplti	zero,zero,1249
   12d70:	00013828 	cmpgeui	zero,zero,1248
   12d74:	0001386c 	andhi	zero,zero,1249
   12d78:	00013878 	rdprs	zero,zero,1249
   12d7c:	d9002717 	ldw	r4,156(sp)
   12d80:	0089c3c4 	movi	r2,9999
   12d84:	20800015 	stw	r2,0(r4)
   12d88:	a0001026 	beq	r20,zero,12dcc <_dtoa_r+0x31c>
   12d8c:	00c000f4 	movhi	r3,3
   12d90:	18e06a04 	addi	r3,r3,-32344
   12d94:	d9802917 	ldw	r6,164(sp)
   12d98:	303f7926 	beq	r6,zero,12b80 <_dtoa_r+0xd0>
   12d9c:	188000c7 	ldb	r2,3(r3)
   12da0:	190000c4 	addi	r4,r3,3
   12da4:	1000101e 	bne	r2,zero,12de8 <_dtoa_r+0x338>
   12da8:	d8802917 	ldw	r2,164(sp)
   12dac:	11000015 	stw	r4,0(r2)
   12db0:	003f7306 	br	12b80 <_dtoa_r+0xd0>
   12db4:	00a00034 	movhi	r2,32768
   12db8:	10bfffc4 	addi	r2,r2,-1
   12dbc:	00c00044 	movi	r3,1
   12dc0:	88aa703a 	and	r21,r17,r2
   12dc4:	90c00015 	stw	r3,0(r18)
   12dc8:	003f5806 	br	12b2c <_dtoa_r+0x7c>
   12dcc:	00800434 	movhi	r2,16
   12dd0:	10bfffc4 	addi	r2,r2,-1
   12dd4:	a884703a 	and	r2,r21,r2
   12dd8:	103fec1e 	bne	r2,zero,12d8c <_dtoa_r+0x2dc>
   12ddc:	00c000f4 	movhi	r3,3
   12de0:	18e06704 	addi	r3,r3,-32356
   12de4:	003feb06 	br	12d94 <_dtoa_r+0x2e4>
   12de8:	d8802917 	ldw	r2,164(sp)
   12dec:	19000204 	addi	r4,r3,8
   12df0:	11000015 	stw	r4,0(r2)
   12df4:	003f6206 	br	12b80 <_dtoa_r+0xd0>
   12df8:	ddc00117 	ldw	r23,4(sp)
   12dfc:	d8800217 	ldw	r2,8(sp)
   12e00:	01000804 	movi	r4,32
   12e04:	b8c10c84 	addi	r3,r23,1074
   12e08:	18a3883a 	add	r17,r3,r2
   12e0c:	2441b80e 	bge	r4,r17,134f0 <_dtoa_r+0xa40>
   12e10:	00c01004 	movi	r3,64
   12e14:	1c47c83a 	sub	r3,r3,r17
   12e18:	88bff804 	addi	r2,r17,-32
   12e1c:	a8c6983a 	sll	r3,r21,r3
   12e20:	a084d83a 	srl	r2,r20,r2
   12e24:	1888b03a 	or	r4,r3,r2
   12e28:	00194cc0 	call	194cc <__floatunsidf>
   12e2c:	1011883a 	mov	r8,r2
   12e30:	00bf8434 	movhi	r2,65040
   12e34:	01000044 	movi	r4,1
   12e38:	10d3883a 	add	r9,r2,r3
   12e3c:	8dbef344 	addi	r22,r17,-1075
   12e40:	d9000815 	stw	r4,32(sp)
   12e44:	003f6f06 	br	12c04 <_dtoa_r+0x154>
   12e48:	d8001715 	stw	zero,92(sp)
   12e4c:	04400044 	movi	r17,1
   12e50:	00bfffc4 	movi	r2,-1
   12e54:	00c00044 	movi	r3,1
   12e58:	d8800e15 	stw	r2,56(sp)
   12e5c:	d8002615 	stw	zero,152(sp)
   12e60:	d8800f15 	stw	r2,60(sp)
   12e64:	d8c00b15 	stw	r3,44(sp)
   12e68:	1021883a 	mov	r16,r2
   12e6c:	d8801617 	ldw	r2,88(sp)
   12e70:	10001115 	stw	zero,68(r2)
   12e74:	d8801617 	ldw	r2,88(sp)
   12e78:	11401117 	ldw	r5,68(r2)
   12e7c:	1009883a 	mov	r4,r2
   12e80:	00161c40 	call	161c4 <_Balloc>
   12e84:	d8c01617 	ldw	r3,88(sp)
   12e88:	d8800515 	stw	r2,20(sp)
   12e8c:	18801015 	stw	r2,64(r3)
   12e90:	00800384 	movi	r2,14
   12e94:	14006836 	bltu	r2,r16,13038 <_dtoa_r+0x588>
   12e98:	8805003a 	cmpeq	r2,r17,zero
   12e9c:	1000661e 	bne	r2,zero,13038 <_dtoa_r+0x588>
   12ea0:	d9000d17 	ldw	r4,52(sp)
   12ea4:	0102300e 	bge	zero,r4,13768 <_dtoa_r+0xcb8>
   12ea8:	208003cc 	andi	r2,r4,15
   12eac:	100490fa 	slli	r2,r2,3
   12eb0:	2025d13a 	srai	r18,r4,4
   12eb4:	00c000f4 	movhi	r3,3
   12eb8:	18e07c04 	addi	r3,r3,-32272
   12ebc:	10c5883a 	add	r2,r2,r3
   12ec0:	90c0040c 	andi	r3,r18,16
   12ec4:	14000017 	ldw	r16,0(r2)
   12ec8:	14400117 	ldw	r17,4(r2)
   12ecc:	18036a1e 	bne	r3,zero,13c78 <_dtoa_r+0x11c8>
   12ed0:	05800084 	movi	r22,2
   12ed4:	90001026 	beq	r18,zero,12f18 <_dtoa_r+0x468>
   12ed8:	04c000f4 	movhi	r19,3
   12edc:	9ce0ae04 	addi	r19,r19,-32072
   12ee0:	9080004c 	andi	r2,r18,1
   12ee4:	1005003a 	cmpeq	r2,r2,zero
   12ee8:	1000081e 	bne	r2,zero,12f0c <_dtoa_r+0x45c>
   12eec:	99800017 	ldw	r6,0(r19)
   12ef0:	99c00117 	ldw	r7,4(r19)
   12ef4:	880b883a 	mov	r5,r17
   12ef8:	8009883a 	mov	r4,r16
   12efc:	0018a380 	call	18a38 <__muldf3>
   12f00:	1021883a 	mov	r16,r2
   12f04:	b5800044 	addi	r22,r22,1
   12f08:	1823883a 	mov	r17,r3
   12f0c:	9025d07a 	srai	r18,r18,1
   12f10:	9cc00204 	addi	r19,r19,8
   12f14:	903ff21e 	bne	r18,zero,12ee0 <_dtoa_r+0x430>
   12f18:	a80b883a 	mov	r5,r21
   12f1c:	a009883a 	mov	r4,r20
   12f20:	880f883a 	mov	r7,r17
   12f24:	800d883a 	mov	r6,r16
   12f28:	0018dfc0 	call	18dfc <__divdf3>
   12f2c:	1029883a 	mov	r20,r2
   12f30:	182b883a 	mov	r21,r3
   12f34:	d8c00c17 	ldw	r3,48(sp)
   12f38:	1805003a 	cmpeq	r2,r3,zero
   12f3c:	1000081e 	bne	r2,zero,12f60 <_dtoa_r+0x4b0>
   12f40:	0005883a 	mov	r2,zero
   12f44:	00cffc34 	movhi	r3,16368
   12f48:	180f883a 	mov	r7,r3
   12f4c:	a009883a 	mov	r4,r20
   12f50:	a80b883a 	mov	r5,r21
   12f54:	100d883a 	mov	r6,r2
   12f58:	00192740 	call	19274 <__ltdf2>
   12f5c:	1003fe16 	blt	r2,zero,13f58 <_dtoa_r+0x14a8>
   12f60:	b009883a 	mov	r4,r22
   12f64:	00192fc0 	call	192fc <__floatsidf>
   12f68:	180b883a 	mov	r5,r3
   12f6c:	1009883a 	mov	r4,r2
   12f70:	a00d883a 	mov	r6,r20
   12f74:	a80f883a 	mov	r7,r21
   12f78:	0018a380 	call	18a38 <__muldf3>
   12f7c:	0011883a 	mov	r8,zero
   12f80:	02500734 	movhi	r9,16412
   12f84:	1009883a 	mov	r4,r2
   12f88:	180b883a 	mov	r5,r3
   12f8c:	480f883a 	mov	r7,r9
   12f90:	400d883a 	mov	r6,r8
   12f94:	00189c40 	call	189c4 <__adddf3>
   12f98:	d9000f17 	ldw	r4,60(sp)
   12f9c:	102d883a 	mov	r22,r2
   12fa0:	00bf3034 	movhi	r2,64704
   12fa4:	18b9883a 	add	fp,r3,r2
   12fa8:	e02f883a 	mov	r23,fp
   12fac:	20028f1e 	bne	r4,zero,139ec <_dtoa_r+0xf3c>
   12fb0:	0005883a 	mov	r2,zero
   12fb4:	00d00534 	movhi	r3,16404
   12fb8:	a009883a 	mov	r4,r20
   12fbc:	a80b883a 	mov	r5,r21
   12fc0:	180f883a 	mov	r7,r3
   12fc4:	100d883a 	mov	r6,r2
   12fc8:	00189440 	call	18944 <__subdf3>
   12fcc:	1009883a 	mov	r4,r2
   12fd0:	e00f883a 	mov	r7,fp
   12fd4:	180b883a 	mov	r5,r3
   12fd8:	b00d883a 	mov	r6,r22
   12fdc:	1025883a 	mov	r18,r2
   12fe0:	1827883a 	mov	r19,r3
   12fe4:	00191640 	call	19164 <__gtdf2>
   12fe8:	00834f16 	blt	zero,r2,13d28 <_dtoa_r+0x1278>
   12fec:	e0e0003c 	xorhi	r3,fp,32768
   12ff0:	9009883a 	mov	r4,r18
   12ff4:	980b883a 	mov	r5,r19
   12ff8:	180f883a 	mov	r7,r3
   12ffc:	b00d883a 	mov	r6,r22
   13000:	00192740 	call	19274 <__ltdf2>
   13004:	1000080e 	bge	r2,zero,13028 <_dtoa_r+0x578>
   13008:	0027883a 	mov	r19,zero
   1300c:	0025883a 	mov	r18,zero
   13010:	d8802617 	ldw	r2,152(sp)
   13014:	df000517 	ldw	fp,20(sp)
   13018:	d8000615 	stw	zero,24(sp)
   1301c:	0084303a 	nor	r2,zero,r2
   13020:	d8800d15 	stw	r2,52(sp)
   13024:	00019b06 	br	13694 <_dtoa_r+0xbe4>
   13028:	d9801217 	ldw	r6,72(sp)
   1302c:	d8801317 	ldw	r2,76(sp)
   13030:	3029883a 	mov	r20,r6
   13034:	102b883a 	mov	r21,r2
   13038:	d8c00217 	ldw	r3,8(sp)
   1303c:	18008516 	blt	r3,zero,13254 <_dtoa_r+0x7a4>
   13040:	d9000d17 	ldw	r4,52(sp)
   13044:	00800384 	movi	r2,14
   13048:	11008216 	blt	r2,r4,13254 <_dtoa_r+0x7a4>
   1304c:	200490fa 	slli	r2,r4,3
   13050:	d9802617 	ldw	r6,152(sp)
   13054:	00c000f4 	movhi	r3,3
   13058:	18e07c04 	addi	r3,r3,-32272
   1305c:	10c5883a 	add	r2,r2,r3
   13060:	14800017 	ldw	r18,0(r2)
   13064:	14c00117 	ldw	r19,4(r2)
   13068:	30031e16 	blt	r6,zero,13ce4 <_dtoa_r+0x1234>
   1306c:	d9000517 	ldw	r4,20(sp)
   13070:	d8c00f17 	ldw	r3,60(sp)
   13074:	a823883a 	mov	r17,r21
   13078:	a021883a 	mov	r16,r20
   1307c:	192b883a 	add	r21,r3,r4
   13080:	2039883a 	mov	fp,r4
   13084:	00000f06 	br	130c4 <_dtoa_r+0x614>
   13088:	0005883a 	mov	r2,zero
   1308c:	00d00934 	movhi	r3,16420
   13090:	5009883a 	mov	r4,r10
   13094:	580b883a 	mov	r5,r11
   13098:	180f883a 	mov	r7,r3
   1309c:	100d883a 	mov	r6,r2
   130a0:	0018a380 	call	18a38 <__muldf3>
   130a4:	180b883a 	mov	r5,r3
   130a8:	000d883a 	mov	r6,zero
   130ac:	000f883a 	mov	r7,zero
   130b0:	1009883a 	mov	r4,r2
   130b4:	1021883a 	mov	r16,r2
   130b8:	1823883a 	mov	r17,r3
   130bc:	00190dc0 	call	190dc <__nedf2>
   130c0:	10004526 	beq	r2,zero,131d8 <_dtoa_r+0x728>
   130c4:	900d883a 	mov	r6,r18
   130c8:	980f883a 	mov	r7,r19
   130cc:	8009883a 	mov	r4,r16
   130d0:	880b883a 	mov	r5,r17
   130d4:	0018dfc0 	call	18dfc <__divdf3>
   130d8:	180b883a 	mov	r5,r3
   130dc:	1009883a 	mov	r4,r2
   130e0:	00193f40 	call	193f4 <__fixdfsi>
   130e4:	1009883a 	mov	r4,r2
   130e8:	1029883a 	mov	r20,r2
   130ec:	00192fc0 	call	192fc <__floatsidf>
   130f0:	180f883a 	mov	r7,r3
   130f4:	9009883a 	mov	r4,r18
   130f8:	980b883a 	mov	r5,r19
   130fc:	100d883a 	mov	r6,r2
   13100:	0018a380 	call	18a38 <__muldf3>
   13104:	180f883a 	mov	r7,r3
   13108:	880b883a 	mov	r5,r17
   1310c:	8009883a 	mov	r4,r16
   13110:	100d883a 	mov	r6,r2
   13114:	00189440 	call	18944 <__subdf3>
   13118:	1015883a 	mov	r10,r2
   1311c:	a0800c04 	addi	r2,r20,48
   13120:	e0800005 	stb	r2,0(fp)
   13124:	e7000044 	addi	fp,fp,1
   13128:	1817883a 	mov	r11,r3
   1312c:	e57fd61e 	bne	fp,r21,13088 <_dtoa_r+0x5d8>
   13130:	500d883a 	mov	r6,r10
   13134:	180f883a 	mov	r7,r3
   13138:	5009883a 	mov	r4,r10
   1313c:	180b883a 	mov	r5,r3
   13140:	00189c40 	call	189c4 <__adddf3>
   13144:	100d883a 	mov	r6,r2
   13148:	9009883a 	mov	r4,r18
   1314c:	980b883a 	mov	r5,r19
   13150:	180f883a 	mov	r7,r3
   13154:	1021883a 	mov	r16,r2
   13158:	1823883a 	mov	r17,r3
   1315c:	00192740 	call	19274 <__ltdf2>
   13160:	10000816 	blt	r2,zero,13184 <_dtoa_r+0x6d4>
   13164:	980b883a 	mov	r5,r19
   13168:	800d883a 	mov	r6,r16
   1316c:	880f883a 	mov	r7,r17
   13170:	9009883a 	mov	r4,r18
   13174:	00190540 	call	19054 <__eqdf2>
   13178:	1000171e 	bne	r2,zero,131d8 <_dtoa_r+0x728>
   1317c:	a080004c 	andi	r2,r20,1
   13180:	10001526 	beq	r2,zero,131d8 <_dtoa_r+0x728>
   13184:	d8800d17 	ldw	r2,52(sp)
   13188:	d8800415 	stw	r2,16(sp)
   1318c:	e009883a 	mov	r4,fp
   13190:	213fffc4 	addi	r4,r4,-1
   13194:	20c00007 	ldb	r3,0(r4)
   13198:	00800e44 	movi	r2,57
   1319c:	1880081e 	bne	r3,r2,131c0 <_dtoa_r+0x710>
   131a0:	d8800517 	ldw	r2,20(sp)
   131a4:	113ffa1e 	bne	r2,r4,13190 <_dtoa_r+0x6e0>
   131a8:	d8c00417 	ldw	r3,16(sp)
   131ac:	d9800517 	ldw	r6,20(sp)
   131b0:	00800c04 	movi	r2,48
   131b4:	18c00044 	addi	r3,r3,1
   131b8:	d8c00415 	stw	r3,16(sp)
   131bc:	30800005 	stb	r2,0(r6)
   131c0:	20800003 	ldbu	r2,0(r4)
   131c4:	d8c00417 	ldw	r3,16(sp)
   131c8:	27000044 	addi	fp,r4,1
   131cc:	10800044 	addi	r2,r2,1
   131d0:	d8c00d15 	stw	r3,52(sp)
   131d4:	20800005 	stb	r2,0(r4)
   131d8:	d9001617 	ldw	r4,88(sp)
   131dc:	d9400717 	ldw	r5,28(sp)
   131e0:	0015c440 	call	15c44 <_Bfree>
   131e4:	e0000005 	stb	zero,0(fp)
   131e8:	d9800d17 	ldw	r6,52(sp)
   131ec:	d8c02717 	ldw	r3,156(sp)
   131f0:	d9002917 	ldw	r4,164(sp)
   131f4:	30800044 	addi	r2,r6,1
   131f8:	18800015 	stw	r2,0(r3)
   131fc:	20029c26 	beq	r4,zero,13c70 <_dtoa_r+0x11c0>
   13200:	d8c00517 	ldw	r3,20(sp)
   13204:	27000015 	stw	fp,0(r4)
   13208:	003e5d06 	br	12b80 <_dtoa_r+0xd0>
   1320c:	d9800d17 	ldw	r6,52(sp)
   13210:	00c000f4 	movhi	r3,3
   13214:	18e07c04 	addi	r3,r3,-32272
   13218:	d9001217 	ldw	r4,72(sp)
   1321c:	300490fa 	slli	r2,r6,3
   13220:	d9401317 	ldw	r5,76(sp)
   13224:	10c5883a 	add	r2,r2,r3
   13228:	12000017 	ldw	r8,0(r2)
   1322c:	12400117 	ldw	r9,4(r2)
   13230:	400d883a 	mov	r6,r8
   13234:	480f883a 	mov	r7,r9
   13238:	00192740 	call	19274 <__ltdf2>
   1323c:	1000030e 	bge	r2,zero,1324c <_dtoa_r+0x79c>
   13240:	d8800d17 	ldw	r2,52(sp)
   13244:	10bfffc4 	addi	r2,r2,-1
   13248:	d8800d15 	stw	r2,52(sp)
   1324c:	d8000c15 	stw	zero,48(sp)
   13250:	003ea806 	br	12cf4 <_dtoa_r+0x244>
   13254:	d9000b17 	ldw	r4,44(sp)
   13258:	202cc03a 	cmpne	r22,r4,zero
   1325c:	b000c71e 	bne	r22,zero,1357c <_dtoa_r+0xacc>
   13260:	dc001117 	ldw	r16,68(sp)
   13264:	dc801017 	ldw	r18,64(sp)
   13268:	0027883a 	mov	r19,zero
   1326c:	04000b0e 	bge	zero,r16,1329c <_dtoa_r+0x7ec>
   13270:	d8c00a17 	ldw	r3,40(sp)
   13274:	00c0090e 	bge	zero,r3,1329c <_dtoa_r+0x7ec>
   13278:	8005883a 	mov	r2,r16
   1327c:	1c011316 	blt	r3,r16,136cc <_dtoa_r+0xc1c>
   13280:	d9000a17 	ldw	r4,40(sp)
   13284:	d9801117 	ldw	r6,68(sp)
   13288:	80a1c83a 	sub	r16,r16,r2
   1328c:	2089c83a 	sub	r4,r4,r2
   13290:	308dc83a 	sub	r6,r6,r2
   13294:	d9000a15 	stw	r4,40(sp)
   13298:	d9801115 	stw	r6,68(sp)
   1329c:	d8801017 	ldw	r2,64(sp)
   132a0:	0080150e 	bge	zero,r2,132f8 <_dtoa_r+0x848>
   132a4:	d8c00b17 	ldw	r3,44(sp)
   132a8:	1805003a 	cmpeq	r2,r3,zero
   132ac:	1001c91e 	bne	r2,zero,139d4 <_dtoa_r+0xf24>
   132b0:	04800e0e 	bge	zero,r18,132ec <_dtoa_r+0x83c>
   132b4:	d9001617 	ldw	r4,88(sp)
   132b8:	980b883a 	mov	r5,r19
   132bc:	900d883a 	mov	r6,r18
   132c0:	00169f80 	call	169f8 <__pow5mult>
   132c4:	d9001617 	ldw	r4,88(sp)
   132c8:	d9800717 	ldw	r6,28(sp)
   132cc:	100b883a 	mov	r5,r2
   132d0:	1027883a 	mov	r19,r2
   132d4:	00166d40 	call	166d4 <__multiply>
   132d8:	d9001617 	ldw	r4,88(sp)
   132dc:	d9400717 	ldw	r5,28(sp)
   132e0:	1023883a 	mov	r17,r2
   132e4:	0015c440 	call	15c44 <_Bfree>
   132e8:	dc400715 	stw	r17,28(sp)
   132ec:	d9001017 	ldw	r4,64(sp)
   132f0:	248dc83a 	sub	r6,r4,r18
   132f4:	30010e1e 	bne	r6,zero,13730 <_dtoa_r+0xc80>
   132f8:	d9001617 	ldw	r4,88(sp)
   132fc:	04400044 	movi	r17,1
   13300:	880b883a 	mov	r5,r17
   13304:	00168bc0 	call	168bc <__i2b>
   13308:	d9800917 	ldw	r6,36(sp)
   1330c:	1025883a 	mov	r18,r2
   13310:	0180040e 	bge	zero,r6,13324 <_dtoa_r+0x874>
   13314:	d9001617 	ldw	r4,88(sp)
   13318:	100b883a 	mov	r5,r2
   1331c:	00169f80 	call	169f8 <__pow5mult>
   13320:	1025883a 	mov	r18,r2
   13324:	d8801717 	ldw	r2,92(sp)
   13328:	8880f30e 	bge	r17,r2,136f8 <_dtoa_r+0xc48>
   1332c:	0023883a 	mov	r17,zero
   13330:	d9800917 	ldw	r6,36(sp)
   13334:	30019e1e 	bne	r6,zero,139b0 <_dtoa_r+0xf00>
   13338:	00c00044 	movi	r3,1
   1333c:	d9000a17 	ldw	r4,40(sp)
   13340:	20c5883a 	add	r2,r4,r3
   13344:	10c007cc 	andi	r3,r2,31
   13348:	1800841e 	bne	r3,zero,1355c <_dtoa_r+0xaac>
   1334c:	00800704 	movi	r2,28
   13350:	d9000a17 	ldw	r4,40(sp)
   13354:	d9801117 	ldw	r6,68(sp)
   13358:	80a1883a 	add	r16,r16,r2
   1335c:	2089883a 	add	r4,r4,r2
   13360:	308d883a 	add	r6,r6,r2
   13364:	d9000a15 	stw	r4,40(sp)
   13368:	d9801115 	stw	r6,68(sp)
   1336c:	d8801117 	ldw	r2,68(sp)
   13370:	0080050e 	bge	zero,r2,13388 <_dtoa_r+0x8d8>
   13374:	d9400717 	ldw	r5,28(sp)
   13378:	d9001617 	ldw	r4,88(sp)
   1337c:	100d883a 	mov	r6,r2
   13380:	00165880 	call	16588 <__lshift>
   13384:	d8800715 	stw	r2,28(sp)
   13388:	d8c00a17 	ldw	r3,40(sp)
   1338c:	00c0050e 	bge	zero,r3,133a4 <_dtoa_r+0x8f4>
   13390:	d9001617 	ldw	r4,88(sp)
   13394:	900b883a 	mov	r5,r18
   13398:	180d883a 	mov	r6,r3
   1339c:	00165880 	call	16588 <__lshift>
   133a0:	1025883a 	mov	r18,r2
   133a4:	d9000c17 	ldw	r4,48(sp)
   133a8:	2005003a 	cmpeq	r2,r4,zero
   133ac:	10016f26 	beq	r2,zero,1396c <_dtoa_r+0xebc>
   133b0:	d9000f17 	ldw	r4,60(sp)
   133b4:	0102170e 	bge	zero,r4,13c14 <_dtoa_r+0x1164>
   133b8:	d9800b17 	ldw	r6,44(sp)
   133bc:	3005003a 	cmpeq	r2,r6,zero
   133c0:	1000881e 	bne	r2,zero,135e4 <_dtoa_r+0xb34>
   133c4:	0400050e 	bge	zero,r16,133dc <_dtoa_r+0x92c>
   133c8:	d9001617 	ldw	r4,88(sp)
   133cc:	980b883a 	mov	r5,r19
   133d0:	800d883a 	mov	r6,r16
   133d4:	00165880 	call	16588 <__lshift>
   133d8:	1027883a 	mov	r19,r2
   133dc:	8804c03a 	cmpne	r2,r17,zero
   133e0:	1002541e 	bne	r2,zero,13d34 <_dtoa_r+0x1284>
   133e4:	980b883a 	mov	r5,r19
   133e8:	dd800517 	ldw	r22,20(sp)
   133ec:	dcc00615 	stw	r19,24(sp)
   133f0:	a700004c 	andi	fp,r20,1
   133f4:	2827883a 	mov	r19,r5
   133f8:	d9000717 	ldw	r4,28(sp)
   133fc:	900b883a 	mov	r5,r18
   13400:	00128980 	call	12898 <quorem>
   13404:	d9000717 	ldw	r4,28(sp)
   13408:	d9400617 	ldw	r5,24(sp)
   1340c:	1023883a 	mov	r17,r2
   13410:	8dc00c04 	addi	r23,r17,48
   13414:	0015da00 	call	15da0 <__mcmp>
   13418:	d9001617 	ldw	r4,88(sp)
   1341c:	900b883a 	mov	r5,r18
   13420:	980d883a 	mov	r6,r19
   13424:	1029883a 	mov	r20,r2
   13428:	00163fc0 	call	163fc <__mdiff>
   1342c:	102b883a 	mov	r21,r2
   13430:	10800317 	ldw	r2,12(r2)
   13434:	1001281e 	bne	r2,zero,138d8 <_dtoa_r+0xe28>
   13438:	d9000717 	ldw	r4,28(sp)
   1343c:	a80b883a 	mov	r5,r21
   13440:	0015da00 	call	15da0 <__mcmp>
   13444:	d9001617 	ldw	r4,88(sp)
   13448:	1021883a 	mov	r16,r2
   1344c:	a80b883a 	mov	r5,r21
   13450:	0015c440 	call	15c44 <_Bfree>
   13454:	8000041e 	bne	r16,zero,13468 <_dtoa_r+0x9b8>
   13458:	d8801717 	ldw	r2,92(sp)
   1345c:	1000021e 	bne	r2,zero,13468 <_dtoa_r+0x9b8>
   13460:	e004c03a 	cmpne	r2,fp,zero
   13464:	10011726 	beq	r2,zero,138c4 <_dtoa_r+0xe14>
   13468:	a0010616 	blt	r20,zero,13884 <_dtoa_r+0xdd4>
   1346c:	a000041e 	bne	r20,zero,13480 <_dtoa_r+0x9d0>
   13470:	d8c01717 	ldw	r3,92(sp)
   13474:	1800021e 	bne	r3,zero,13480 <_dtoa_r+0x9d0>
   13478:	e004c03a 	cmpne	r2,fp,zero
   1347c:	10010126 	beq	r2,zero,13884 <_dtoa_r+0xdd4>
   13480:	04023d16 	blt	zero,r16,13d78 <_dtoa_r+0x12c8>
   13484:	b5c00005 	stb	r23,0(r22)
   13488:	d9800517 	ldw	r6,20(sp)
   1348c:	d9000f17 	ldw	r4,60(sp)
   13490:	b5800044 	addi	r22,r22,1
   13494:	3105883a 	add	r2,r6,r4
   13498:	b0806526 	beq	r22,r2,13630 <_dtoa_r+0xb80>
   1349c:	d9400717 	ldw	r5,28(sp)
   134a0:	d9001617 	ldw	r4,88(sp)
   134a4:	01800284 	movi	r6,10
   134a8:	000f883a 	mov	r7,zero
   134ac:	00168f80 	call	168f8 <__multadd>
   134b0:	d8800715 	stw	r2,28(sp)
   134b4:	d8800617 	ldw	r2,24(sp)
   134b8:	14c10c26 	beq	r2,r19,138ec <_dtoa_r+0xe3c>
   134bc:	d9400617 	ldw	r5,24(sp)
   134c0:	d9001617 	ldw	r4,88(sp)
   134c4:	01800284 	movi	r6,10
   134c8:	000f883a 	mov	r7,zero
   134cc:	00168f80 	call	168f8 <__multadd>
   134d0:	d9001617 	ldw	r4,88(sp)
   134d4:	980b883a 	mov	r5,r19
   134d8:	01800284 	movi	r6,10
   134dc:	000f883a 	mov	r7,zero
   134e0:	d8800615 	stw	r2,24(sp)
   134e4:	00168f80 	call	168f8 <__multadd>
   134e8:	1027883a 	mov	r19,r2
   134ec:	003fc206 	br	133f8 <_dtoa_r+0x948>
   134f0:	2445c83a 	sub	r2,r4,r17
   134f4:	a088983a 	sll	r4,r20,r2
   134f8:	003e4b06 	br	12e28 <_dtoa_r+0x378>
   134fc:	01bfffc4 	movi	r6,-1
   13500:	00800044 	movi	r2,1
   13504:	d9800e15 	stw	r6,56(sp)
   13508:	d9800f15 	stw	r6,60(sp)
   1350c:	d8800b15 	stw	r2,44(sp)
   13510:	d8c01617 	ldw	r3,88(sp)
   13514:	008005c4 	movi	r2,23
   13518:	18001115 	stw	zero,68(r3)
   1351c:	1580082e 	bgeu	r2,r22,13540 <_dtoa_r+0xa90>
   13520:	00c00104 	movi	r3,4
   13524:	0009883a 	mov	r4,zero
   13528:	18c7883a 	add	r3,r3,r3
   1352c:	18800504 	addi	r2,r3,20
   13530:	21000044 	addi	r4,r4,1
   13534:	b0bffc2e 	bgeu	r22,r2,13528 <_dtoa_r+0xa78>
   13538:	d9801617 	ldw	r6,88(sp)
   1353c:	31001115 	stw	r4,68(r6)
   13540:	dc000f17 	ldw	r16,60(sp)
   13544:	003e4b06 	br	12e74 <_dtoa_r+0x3c4>
   13548:	d9801717 	ldw	r6,92(sp)
   1354c:	0023883a 	mov	r17,zero
   13550:	31bfff04 	addi	r6,r6,-4
   13554:	d9801715 	stw	r6,92(sp)
   13558:	003df806 	br	12d3c <_dtoa_r+0x28c>
   1355c:	00800804 	movi	r2,32
   13560:	10c9c83a 	sub	r4,r2,r3
   13564:	00c00104 	movi	r3,4
   13568:	19005a16 	blt	r3,r4,136d4 <_dtoa_r+0xc24>
   1356c:	008000c4 	movi	r2,3
   13570:	113f7e16 	blt	r2,r4,1336c <_dtoa_r+0x8bc>
   13574:	20800704 	addi	r2,r4,28
   13578:	003f7506 	br	13350 <_dtoa_r+0x8a0>
   1357c:	d9801717 	ldw	r6,92(sp)
   13580:	00800044 	movi	r2,1
   13584:	1180a10e 	bge	r2,r6,1380c <_dtoa_r+0xd5c>
   13588:	d9800f17 	ldw	r6,60(sp)
   1358c:	d8c01017 	ldw	r3,64(sp)
   13590:	30bfffc4 	addi	r2,r6,-1
   13594:	1881c616 	blt	r3,r2,13cb0 <_dtoa_r+0x1200>
   13598:	18a5c83a 	sub	r18,r3,r2
   1359c:	d8800f17 	ldw	r2,60(sp)
   135a0:	10026216 	blt	r2,zero,13f2c <_dtoa_r+0x147c>
   135a4:	dc001117 	ldw	r16,68(sp)
   135a8:	1007883a 	mov	r3,r2
   135ac:	d9800a17 	ldw	r6,40(sp)
   135b0:	d8801117 	ldw	r2,68(sp)
   135b4:	d9001617 	ldw	r4,88(sp)
   135b8:	30cd883a 	add	r6,r6,r3
   135bc:	10c5883a 	add	r2,r2,r3
   135c0:	01400044 	movi	r5,1
   135c4:	d9800a15 	stw	r6,40(sp)
   135c8:	d8801115 	stw	r2,68(sp)
   135cc:	00168bc0 	call	168bc <__i2b>
   135d0:	1027883a 	mov	r19,r2
   135d4:	003f2506 	br	1326c <_dtoa_r+0x7bc>
   135d8:	00c000f4 	movhi	r3,3
   135dc:	18e05e04 	addi	r3,r3,-32392
   135e0:	003d6706 	br	12b80 <_dtoa_r+0xd0>
   135e4:	dd800517 	ldw	r22,20(sp)
   135e8:	04000044 	movi	r16,1
   135ec:	00000706 	br	1360c <_dtoa_r+0xb5c>
   135f0:	d9400717 	ldw	r5,28(sp)
   135f4:	d9001617 	ldw	r4,88(sp)
   135f8:	01800284 	movi	r6,10
   135fc:	000f883a 	mov	r7,zero
   13600:	00168f80 	call	168f8 <__multadd>
   13604:	d8800715 	stw	r2,28(sp)
   13608:	84000044 	addi	r16,r16,1
   1360c:	d9000717 	ldw	r4,28(sp)
   13610:	900b883a 	mov	r5,r18
   13614:	00128980 	call	12898 <quorem>
   13618:	15c00c04 	addi	r23,r2,48
   1361c:	b5c00005 	stb	r23,0(r22)
   13620:	d8c00f17 	ldw	r3,60(sp)
   13624:	b5800044 	addi	r22,r22,1
   13628:	80fff116 	blt	r16,r3,135f0 <_dtoa_r+0xb40>
   1362c:	d8000615 	stw	zero,24(sp)
   13630:	d9400717 	ldw	r5,28(sp)
   13634:	d9001617 	ldw	r4,88(sp)
   13638:	01800044 	movi	r6,1
   1363c:	00165880 	call	16588 <__lshift>
   13640:	1009883a 	mov	r4,r2
   13644:	900b883a 	mov	r5,r18
   13648:	d8800715 	stw	r2,28(sp)
   1364c:	0015da00 	call	15da0 <__mcmp>
   13650:	00803c0e 	bge	zero,r2,13744 <_dtoa_r+0xc94>
   13654:	b009883a 	mov	r4,r22
   13658:	213fffc4 	addi	r4,r4,-1
   1365c:	21400003 	ldbu	r5,0(r4)
   13660:	00800e44 	movi	r2,57
   13664:	28c03fcc 	andi	r3,r5,255
   13668:	18c0201c 	xori	r3,r3,128
   1366c:	18ffe004 	addi	r3,r3,-128
   13670:	1881981e 	bne	r3,r2,13cd4 <_dtoa_r+0x1224>
   13674:	d9800517 	ldw	r6,20(sp)
   13678:	21bff71e 	bne	r4,r6,13658 <_dtoa_r+0xba8>
   1367c:	d8800d17 	ldw	r2,52(sp)
   13680:	37000044 	addi	fp,r6,1
   13684:	10800044 	addi	r2,r2,1
   13688:	d8800d15 	stw	r2,52(sp)
   1368c:	00800c44 	movi	r2,49
   13690:	30800005 	stb	r2,0(r6)
   13694:	d9001617 	ldw	r4,88(sp)
   13698:	900b883a 	mov	r5,r18
   1369c:	0015c440 	call	15c44 <_Bfree>
   136a0:	983ecd26 	beq	r19,zero,131d8 <_dtoa_r+0x728>
   136a4:	d8c00617 	ldw	r3,24(sp)
   136a8:	18000426 	beq	r3,zero,136bc <_dtoa_r+0xc0c>
   136ac:	1cc00326 	beq	r3,r19,136bc <_dtoa_r+0xc0c>
   136b0:	d9001617 	ldw	r4,88(sp)
   136b4:	180b883a 	mov	r5,r3
   136b8:	0015c440 	call	15c44 <_Bfree>
   136bc:	d9001617 	ldw	r4,88(sp)
   136c0:	980b883a 	mov	r5,r19
   136c4:	0015c440 	call	15c44 <_Bfree>
   136c8:	003ec306 	br	131d8 <_dtoa_r+0x728>
   136cc:	1805883a 	mov	r2,r3
   136d0:	003eeb06 	br	13280 <_dtoa_r+0x7d0>
   136d4:	d9800a17 	ldw	r6,40(sp)
   136d8:	d8c01117 	ldw	r3,68(sp)
   136dc:	20bfff04 	addi	r2,r4,-4
   136e0:	308d883a 	add	r6,r6,r2
   136e4:	1887883a 	add	r3,r3,r2
   136e8:	80a1883a 	add	r16,r16,r2
   136ec:	d9800a15 	stw	r6,40(sp)
   136f0:	d8c01115 	stw	r3,68(sp)
   136f4:	003f1d06 	br	1336c <_dtoa_r+0x8bc>
   136f8:	a03f0c1e 	bne	r20,zero,1332c <_dtoa_r+0x87c>
   136fc:	00800434 	movhi	r2,16
   13700:	10bfffc4 	addi	r2,r2,-1
   13704:	a884703a 	and	r2,r21,r2
   13708:	103f081e 	bne	r2,zero,1332c <_dtoa_r+0x87c>
   1370c:	a89ffc2c 	andhi	r2,r21,32752
   13710:	103f0626 	beq	r2,zero,1332c <_dtoa_r+0x87c>
   13714:	d8c01117 	ldw	r3,68(sp)
   13718:	d9000a17 	ldw	r4,40(sp)
   1371c:	18c00044 	addi	r3,r3,1
   13720:	21000044 	addi	r4,r4,1
   13724:	d8c01115 	stw	r3,68(sp)
   13728:	d9000a15 	stw	r4,40(sp)
   1372c:	003f0006 	br	13330 <_dtoa_r+0x880>
   13730:	d9400717 	ldw	r5,28(sp)
   13734:	d9001617 	ldw	r4,88(sp)
   13738:	00169f80 	call	169f8 <__pow5mult>
   1373c:	d8800715 	stw	r2,28(sp)
   13740:	003eed06 	br	132f8 <_dtoa_r+0x848>
   13744:	1000021e 	bne	r2,zero,13750 <_dtoa_r+0xca0>
   13748:	b880004c 	andi	r2,r23,1
   1374c:	103fc11e 	bne	r2,zero,13654 <_dtoa_r+0xba4>
   13750:	b5bfffc4 	addi	r22,r22,-1
   13754:	b0c00007 	ldb	r3,0(r22)
   13758:	00800c04 	movi	r2,48
   1375c:	18bffc26 	beq	r3,r2,13750 <_dtoa_r+0xca0>
   13760:	b7000044 	addi	fp,r22,1
   13764:	003fcb06 	br	13694 <_dtoa_r+0xbe4>
   13768:	d9800d17 	ldw	r6,52(sp)
   1376c:	018fc83a 	sub	r7,zero,r6
   13770:	3801f726 	beq	r7,zero,13f50 <_dtoa_r+0x14a0>
   13774:	398003cc 	andi	r6,r7,15
   13778:	300c90fa 	slli	r6,r6,3
   1377c:	014000f4 	movhi	r5,3
   13780:	29607c04 	addi	r5,r5,-32272
   13784:	d9001217 	ldw	r4,72(sp)
   13788:	314d883a 	add	r6,r6,r5
   1378c:	30c00117 	ldw	r3,4(r6)
   13790:	30800017 	ldw	r2,0(r6)
   13794:	d9401317 	ldw	r5,76(sp)
   13798:	3821d13a 	srai	r16,r7,4
   1379c:	100d883a 	mov	r6,r2
   137a0:	180f883a 	mov	r7,r3
   137a4:	0018a380 	call	18a38 <__muldf3>
   137a8:	1011883a 	mov	r8,r2
   137ac:	1813883a 	mov	r9,r3
   137b0:	1029883a 	mov	r20,r2
   137b4:	182b883a 	mov	r21,r3
   137b8:	8001e526 	beq	r16,zero,13f50 <_dtoa_r+0x14a0>
   137bc:	05800084 	movi	r22,2
   137c0:	044000f4 	movhi	r17,3
   137c4:	8c60ae04 	addi	r17,r17,-32072
   137c8:	8080004c 	andi	r2,r16,1
   137cc:	1005003a 	cmpeq	r2,r2,zero
   137d0:	1000081e 	bne	r2,zero,137f4 <_dtoa_r+0xd44>
   137d4:	89800017 	ldw	r6,0(r17)
   137d8:	89c00117 	ldw	r7,4(r17)
   137dc:	480b883a 	mov	r5,r9
   137e0:	4009883a 	mov	r4,r8
   137e4:	0018a380 	call	18a38 <__muldf3>
   137e8:	1011883a 	mov	r8,r2
   137ec:	b5800044 	addi	r22,r22,1
   137f0:	1813883a 	mov	r9,r3
   137f4:	8021d07a 	srai	r16,r16,1
   137f8:	8c400204 	addi	r17,r17,8
   137fc:	803ff21e 	bne	r16,zero,137c8 <_dtoa_r+0xd18>
   13800:	4029883a 	mov	r20,r8
   13804:	482b883a 	mov	r21,r9
   13808:	003dca06 	br	12f34 <_dtoa_r+0x484>
   1380c:	d9000817 	ldw	r4,32(sp)
   13810:	2005003a 	cmpeq	r2,r4,zero
   13814:	1001f61e 	bne	r2,zero,13ff0 <_dtoa_r+0x1540>
   13818:	dc001117 	ldw	r16,68(sp)
   1381c:	dc801017 	ldw	r18,64(sp)
   13820:	18c10cc4 	addi	r3,r3,1075
   13824:	003f6106 	br	135ac <_dtoa_r+0xafc>
   13828:	d8000b15 	stw	zero,44(sp)
   1382c:	d9802617 	ldw	r6,152(sp)
   13830:	d8c00d17 	ldw	r3,52(sp)
   13834:	30800044 	addi	r2,r6,1
   13838:	18ad883a 	add	r22,r3,r2
   1383c:	b13fffc4 	addi	r4,r22,-1
   13840:	d9000e15 	stw	r4,56(sp)
   13844:	0581f60e 	bge	zero,r22,14020 <_dtoa_r+0x1570>
   13848:	dd800f15 	stw	r22,60(sp)
   1384c:	003f3006 	br	13510 <_dtoa_r+0xa60>
   13850:	d8000b15 	stw	zero,44(sp)
   13854:	d9002617 	ldw	r4,152(sp)
   13858:	0101eb0e 	bge	zero,r4,14008 <_dtoa_r+0x1558>
   1385c:	202d883a 	mov	r22,r4
   13860:	d9000e15 	stw	r4,56(sp)
   13864:	d9000f15 	stw	r4,60(sp)
   13868:	003f2906 	br	13510 <_dtoa_r+0xa60>
   1386c:	01800044 	movi	r6,1
   13870:	d9800b15 	stw	r6,44(sp)
   13874:	003ff706 	br	13854 <_dtoa_r+0xda4>
   13878:	01000044 	movi	r4,1
   1387c:	d9000b15 	stw	r4,44(sp)
   13880:	003fea06 	br	1382c <_dtoa_r+0xd7c>
   13884:	04000c0e 	bge	zero,r16,138b8 <_dtoa_r+0xe08>
   13888:	d9400717 	ldw	r5,28(sp)
   1388c:	d9001617 	ldw	r4,88(sp)
   13890:	01800044 	movi	r6,1
   13894:	00165880 	call	16588 <__lshift>
   13898:	1009883a 	mov	r4,r2
   1389c:	900b883a 	mov	r5,r18
   138a0:	d8800715 	stw	r2,28(sp)
   138a4:	0015da00 	call	15da0 <__mcmp>
   138a8:	0081e00e 	bge	zero,r2,1402c <_dtoa_r+0x157c>
   138ac:	bdc00044 	addi	r23,r23,1
   138b0:	00800e84 	movi	r2,58
   138b4:	b881a226 	beq	r23,r2,13f40 <_dtoa_r+0x1490>
   138b8:	b7000044 	addi	fp,r22,1
   138bc:	b5c00005 	stb	r23,0(r22)
   138c0:	003f7406 	br	13694 <_dtoa_r+0xbe4>
   138c4:	00800e44 	movi	r2,57
   138c8:	b8819d26 	beq	r23,r2,13f40 <_dtoa_r+0x1490>
   138cc:	053ffa0e 	bge	zero,r20,138b8 <_dtoa_r+0xe08>
   138d0:	8dc00c44 	addi	r23,r17,49
   138d4:	003ff806 	br	138b8 <_dtoa_r+0xe08>
   138d8:	d9001617 	ldw	r4,88(sp)
   138dc:	a80b883a 	mov	r5,r21
   138e0:	04000044 	movi	r16,1
   138e4:	0015c440 	call	15c44 <_Bfree>
   138e8:	003edf06 	br	13468 <_dtoa_r+0x9b8>
   138ec:	d9001617 	ldw	r4,88(sp)
   138f0:	980b883a 	mov	r5,r19
   138f4:	01800284 	movi	r6,10
   138f8:	000f883a 	mov	r7,zero
   138fc:	00168f80 	call	168f8 <__multadd>
   13900:	1027883a 	mov	r19,r2
   13904:	d8800615 	stw	r2,24(sp)
   13908:	003ebb06 	br	133f8 <_dtoa_r+0x948>
   1390c:	d9801117 	ldw	r6,68(sp)
   13910:	d8800d17 	ldw	r2,52(sp)
   13914:	d8000915 	stw	zero,36(sp)
   13918:	308dc83a 	sub	r6,r6,r2
   1391c:	0087c83a 	sub	r3,zero,r2
   13920:	d9801115 	stw	r6,68(sp)
   13924:	d8c01015 	stw	r3,64(sp)
   13928:	003cfe06 	br	12d24 <_dtoa_r+0x274>
   1392c:	018dc83a 	sub	r6,zero,r6
   13930:	d9801115 	stw	r6,68(sp)
   13934:	d8000a15 	stw	zero,40(sp)
   13938:	003cf306 	br	12d08 <_dtoa_r+0x258>
   1393c:	d9000d17 	ldw	r4,52(sp)
   13940:	00192fc0 	call	192fc <__floatsidf>
   13944:	880b883a 	mov	r5,r17
   13948:	8009883a 	mov	r4,r16
   1394c:	180f883a 	mov	r7,r3
   13950:	100d883a 	mov	r6,r2
   13954:	00190dc0 	call	190dc <__nedf2>
   13958:	103ce126 	beq	r2,zero,12ce0 <_dtoa_r+0x230>
   1395c:	d9800d17 	ldw	r6,52(sp)
   13960:	31bfffc4 	addi	r6,r6,-1
   13964:	d9800d15 	stw	r6,52(sp)
   13968:	003cdd06 	br	12ce0 <_dtoa_r+0x230>
   1396c:	d9000717 	ldw	r4,28(sp)
   13970:	900b883a 	mov	r5,r18
   13974:	0015da00 	call	15da0 <__mcmp>
   13978:	103e8d0e 	bge	r2,zero,133b0 <_dtoa_r+0x900>
   1397c:	d9400717 	ldw	r5,28(sp)
   13980:	d9001617 	ldw	r4,88(sp)
   13984:	01800284 	movi	r6,10
   13988:	000f883a 	mov	r7,zero
   1398c:	00168f80 	call	168f8 <__multadd>
   13990:	d9800d17 	ldw	r6,52(sp)
   13994:	d8800715 	stw	r2,28(sp)
   13998:	31bfffc4 	addi	r6,r6,-1
   1399c:	d9800d15 	stw	r6,52(sp)
   139a0:	b001a71e 	bne	r22,zero,14040 <_dtoa_r+0x1590>
   139a4:	d8800e17 	ldw	r2,56(sp)
   139a8:	d8800f15 	stw	r2,60(sp)
   139ac:	003e8006 	br	133b0 <_dtoa_r+0x900>
   139b0:	90800417 	ldw	r2,16(r18)
   139b4:	1085883a 	add	r2,r2,r2
   139b8:	1085883a 	add	r2,r2,r2
   139bc:	1485883a 	add	r2,r2,r18
   139c0:	11000417 	ldw	r4,16(r2)
   139c4:	0015c6c0 	call	15c6c <__hi0bits>
   139c8:	00c00804 	movi	r3,32
   139cc:	1887c83a 	sub	r3,r3,r2
   139d0:	003e5a06 	br	1333c <_dtoa_r+0x88c>
   139d4:	d9400717 	ldw	r5,28(sp)
   139d8:	d9801017 	ldw	r6,64(sp)
   139dc:	d9001617 	ldw	r4,88(sp)
   139e0:	00169f80 	call	169f8 <__pow5mult>
   139e4:	d8800715 	stw	r2,28(sp)
   139e8:	003e4306 	br	132f8 <_dtoa_r+0x848>
   139ec:	d9800f17 	ldw	r6,60(sp)
   139f0:	d8800d17 	ldw	r2,52(sp)
   139f4:	d9800315 	stw	r6,12(sp)
   139f8:	d8800415 	stw	r2,16(sp)
   139fc:	d8c00b17 	ldw	r3,44(sp)
   13a00:	1805003a 	cmpeq	r2,r3,zero
   13a04:	1000e21e 	bne	r2,zero,13d90 <_dtoa_r+0x12e0>
   13a08:	d9000317 	ldw	r4,12(sp)
   13a0c:	0005883a 	mov	r2,zero
   13a10:	00cff834 	movhi	r3,16352
   13a14:	200c90fa 	slli	r6,r4,3
   13a18:	010000f4 	movhi	r4,3
   13a1c:	21207c04 	addi	r4,r4,-32272
   13a20:	180b883a 	mov	r5,r3
   13a24:	310d883a 	add	r6,r6,r4
   13a28:	327fff17 	ldw	r9,-4(r6)
   13a2c:	323ffe17 	ldw	r8,-8(r6)
   13a30:	1009883a 	mov	r4,r2
   13a34:	480f883a 	mov	r7,r9
   13a38:	400d883a 	mov	r6,r8
   13a3c:	0018dfc0 	call	18dfc <__divdf3>
   13a40:	180b883a 	mov	r5,r3
   13a44:	b00d883a 	mov	r6,r22
   13a48:	b80f883a 	mov	r7,r23
   13a4c:	1009883a 	mov	r4,r2
   13a50:	00189440 	call	18944 <__subdf3>
   13a54:	a80b883a 	mov	r5,r21
   13a58:	a009883a 	mov	r4,r20
   13a5c:	d8c01915 	stw	r3,100(sp)
   13a60:	d8801815 	stw	r2,96(sp)
   13a64:	00193f40 	call	193f4 <__fixdfsi>
   13a68:	1009883a 	mov	r4,r2
   13a6c:	1027883a 	mov	r19,r2
   13a70:	00192fc0 	call	192fc <__floatsidf>
   13a74:	a80b883a 	mov	r5,r21
   13a78:	a009883a 	mov	r4,r20
   13a7c:	180f883a 	mov	r7,r3
   13a80:	100d883a 	mov	r6,r2
   13a84:	00189440 	call	18944 <__subdf3>
   13a88:	d9801817 	ldw	r6,96(sp)
   13a8c:	1823883a 	mov	r17,r3
   13a90:	d8801415 	stw	r2,80(sp)
   13a94:	302d883a 	mov	r22,r6
   13a98:	d9800517 	ldw	r6,20(sp)
   13a9c:	9cc00c04 	addi	r19,r19,48
   13aa0:	dc401515 	stw	r17,84(sp)
   13aa4:	d8c01917 	ldw	r3,100(sp)
   13aa8:	34c00005 	stb	r19,0(r6)
   13aac:	d8800517 	ldw	r2,20(sp)
   13ab0:	d9401917 	ldw	r5,100(sp)
   13ab4:	d9801417 	ldw	r6,80(sp)
   13ab8:	b009883a 	mov	r4,r22
   13abc:	880f883a 	mov	r7,r17
   13ac0:	182f883a 	mov	r23,r3
   13ac4:	17000044 	addi	fp,r2,1
   13ac8:	00191640 	call	19164 <__gtdf2>
   13acc:	00804e16 	blt	zero,r2,13c08 <_dtoa_r+0x1158>
   13ad0:	d9801417 	ldw	r6,80(sp)
   13ad4:	0005883a 	mov	r2,zero
   13ad8:	00cffc34 	movhi	r3,16368
   13adc:	180b883a 	mov	r5,r3
   13ae0:	880f883a 	mov	r7,r17
   13ae4:	1009883a 	mov	r4,r2
   13ae8:	00189440 	call	18944 <__subdf3>
   13aec:	d9401917 	ldw	r5,100(sp)
   13af0:	180f883a 	mov	r7,r3
   13af4:	b009883a 	mov	r4,r22
   13af8:	100d883a 	mov	r6,r2
   13afc:	00191640 	call	19164 <__gtdf2>
   13b00:	00bda216 	blt	zero,r2,1318c <_dtoa_r+0x6dc>
   13b04:	d8c00317 	ldw	r3,12(sp)
   13b08:	00800044 	movi	r2,1
   13b0c:	10c01216 	blt	r2,r3,13b58 <_dtoa_r+0x10a8>
   13b10:	003d4506 	br	13028 <_dtoa_r+0x578>
   13b14:	d9801417 	ldw	r6,80(sp)
   13b18:	0005883a 	mov	r2,zero
   13b1c:	00cffc34 	movhi	r3,16368
   13b20:	180b883a 	mov	r5,r3
   13b24:	880f883a 	mov	r7,r17
   13b28:	1009883a 	mov	r4,r2
   13b2c:	00189440 	call	18944 <__subdf3>
   13b30:	d9c01b17 	ldw	r7,108(sp)
   13b34:	180b883a 	mov	r5,r3
   13b38:	1009883a 	mov	r4,r2
   13b3c:	b00d883a 	mov	r6,r22
   13b40:	00192740 	call	19274 <__ltdf2>
   13b44:	103d9116 	blt	r2,zero,1318c <_dtoa_r+0x6dc>
   13b48:	d9800517 	ldw	r6,20(sp)
   13b4c:	d9000317 	ldw	r4,12(sp)
   13b50:	3105883a 	add	r2,r6,r4
   13b54:	e0bd3426 	beq	fp,r2,13028 <_dtoa_r+0x578>
   13b58:	04500934 	movhi	r17,16420
   13b5c:	0021883a 	mov	r16,zero
   13b60:	b80b883a 	mov	r5,r23
   13b64:	b009883a 	mov	r4,r22
   13b68:	800d883a 	mov	r6,r16
   13b6c:	880f883a 	mov	r7,r17
   13b70:	0018a380 	call	18a38 <__muldf3>
   13b74:	d9401517 	ldw	r5,84(sp)
   13b78:	d9001417 	ldw	r4,80(sp)
   13b7c:	880f883a 	mov	r7,r17
   13b80:	000d883a 	mov	r6,zero
   13b84:	d8801a15 	stw	r2,104(sp)
   13b88:	d8c01b15 	stw	r3,108(sp)
   13b8c:	0018a380 	call	18a38 <__muldf3>
   13b90:	180b883a 	mov	r5,r3
   13b94:	1009883a 	mov	r4,r2
   13b98:	1823883a 	mov	r17,r3
   13b9c:	1021883a 	mov	r16,r2
   13ba0:	00193f40 	call	193f4 <__fixdfsi>
   13ba4:	1009883a 	mov	r4,r2
   13ba8:	102b883a 	mov	r21,r2
   13bac:	00192fc0 	call	192fc <__floatsidf>
   13bb0:	880b883a 	mov	r5,r17
   13bb4:	8009883a 	mov	r4,r16
   13bb8:	180f883a 	mov	r7,r3
   13bbc:	100d883a 	mov	r6,r2
   13bc0:	00189440 	call	18944 <__subdf3>
   13bc4:	1021883a 	mov	r16,r2
   13bc8:	d9001b17 	ldw	r4,108(sp)
   13bcc:	1823883a 	mov	r17,r3
   13bd0:	dc001415 	stw	r16,80(sp)
   13bd4:	ad400c04 	addi	r21,r21,48
   13bd8:	dc401515 	stw	r17,84(sp)
   13bdc:	d8801a17 	ldw	r2,104(sp)
   13be0:	e5400005 	stb	r21,0(fp)
   13be4:	202f883a 	mov	r23,r4
   13be8:	d9c01b17 	ldw	r7,108(sp)
   13bec:	d9001417 	ldw	r4,80(sp)
   13bf0:	880b883a 	mov	r5,r17
   13bf4:	100d883a 	mov	r6,r2
   13bf8:	102d883a 	mov	r22,r2
   13bfc:	e7000044 	addi	fp,fp,1
   13c00:	00192740 	call	19274 <__ltdf2>
   13c04:	103fc30e 	bge	r2,zero,13b14 <_dtoa_r+0x1064>
   13c08:	d9000417 	ldw	r4,16(sp)
   13c0c:	d9000d15 	stw	r4,52(sp)
   13c10:	003d7106 	br	131d8 <_dtoa_r+0x728>
   13c14:	d9801717 	ldw	r6,92(sp)
   13c18:	00800084 	movi	r2,2
   13c1c:	11bde60e 	bge	r2,r6,133b8 <_dtoa_r+0x908>
   13c20:	203cfb1e 	bne	r4,zero,13010 <_dtoa_r+0x560>
   13c24:	d9001617 	ldw	r4,88(sp)
   13c28:	900b883a 	mov	r5,r18
   13c2c:	01800144 	movi	r6,5
   13c30:	000f883a 	mov	r7,zero
   13c34:	00168f80 	call	168f8 <__multadd>
   13c38:	d9000717 	ldw	r4,28(sp)
   13c3c:	100b883a 	mov	r5,r2
   13c40:	1025883a 	mov	r18,r2
   13c44:	0015da00 	call	15da0 <__mcmp>
   13c48:	00bcf10e 	bge	zero,r2,13010 <_dtoa_r+0x560>
   13c4c:	d8c00d17 	ldw	r3,52(sp)
   13c50:	d9000517 	ldw	r4,20(sp)
   13c54:	d8000615 	stw	zero,24(sp)
   13c58:	18c00044 	addi	r3,r3,1
   13c5c:	d8c00d15 	stw	r3,52(sp)
   13c60:	00800c44 	movi	r2,49
   13c64:	27000044 	addi	fp,r4,1
   13c68:	20800005 	stb	r2,0(r4)
   13c6c:	003e8906 	br	13694 <_dtoa_r+0xbe4>
   13c70:	d8c00517 	ldw	r3,20(sp)
   13c74:	003bc206 	br	12b80 <_dtoa_r+0xd0>
   13c78:	018000f4 	movhi	r6,3
   13c7c:	31a0ae04 	addi	r6,r6,-32072
   13c80:	30c00917 	ldw	r3,36(r6)
   13c84:	30800817 	ldw	r2,32(r6)
   13c88:	d9001217 	ldw	r4,72(sp)
   13c8c:	d9401317 	ldw	r5,76(sp)
   13c90:	180f883a 	mov	r7,r3
   13c94:	100d883a 	mov	r6,r2
   13c98:	0018dfc0 	call	18dfc <__divdf3>
   13c9c:	948003cc 	andi	r18,r18,15
   13ca0:	058000c4 	movi	r22,3
   13ca4:	1029883a 	mov	r20,r2
   13ca8:	182b883a 	mov	r21,r3
   13cac:	003c8906 	br	12ed4 <_dtoa_r+0x424>
   13cb0:	d9001017 	ldw	r4,64(sp)
   13cb4:	d9800917 	ldw	r6,36(sp)
   13cb8:	0025883a 	mov	r18,zero
   13cbc:	1105c83a 	sub	r2,r2,r4
   13cc0:	2089883a 	add	r4,r4,r2
   13cc4:	308d883a 	add	r6,r6,r2
   13cc8:	d9001015 	stw	r4,64(sp)
   13ccc:	d9800915 	stw	r6,36(sp)
   13cd0:	003e3206 	br	1359c <_dtoa_r+0xaec>
   13cd4:	28800044 	addi	r2,r5,1
   13cd8:	27000044 	addi	fp,r4,1
   13cdc:	20800005 	stb	r2,0(r4)
   13ce0:	003e6c06 	br	13694 <_dtoa_r+0xbe4>
   13ce4:	d8800f17 	ldw	r2,60(sp)
   13ce8:	00bce016 	blt	zero,r2,1306c <_dtoa_r+0x5bc>
   13cec:	d9800f17 	ldw	r6,60(sp)
   13cf0:	303cc51e 	bne	r6,zero,13008 <_dtoa_r+0x558>
   13cf4:	0005883a 	mov	r2,zero
   13cf8:	00d00534 	movhi	r3,16404
   13cfc:	980b883a 	mov	r5,r19
   13d00:	180f883a 	mov	r7,r3
   13d04:	9009883a 	mov	r4,r18
   13d08:	100d883a 	mov	r6,r2
   13d0c:	0018a380 	call	18a38 <__muldf3>
   13d10:	180b883a 	mov	r5,r3
   13d14:	a80f883a 	mov	r7,r21
   13d18:	1009883a 	mov	r4,r2
   13d1c:	a00d883a 	mov	r6,r20
   13d20:	00191ec0 	call	191ec <__gedf2>
   13d24:	103cb80e 	bge	r2,zero,13008 <_dtoa_r+0x558>
   13d28:	0027883a 	mov	r19,zero
   13d2c:	0025883a 	mov	r18,zero
   13d30:	003fc606 	br	13c4c <_dtoa_r+0x119c>
   13d34:	99400117 	ldw	r5,4(r19)
   13d38:	d9001617 	ldw	r4,88(sp)
   13d3c:	00161c40 	call	161c4 <_Balloc>
   13d40:	99800417 	ldw	r6,16(r19)
   13d44:	11000304 	addi	r4,r2,12
   13d48:	99400304 	addi	r5,r19,12
   13d4c:	318d883a 	add	r6,r6,r6
   13d50:	318d883a 	add	r6,r6,r6
   13d54:	31800204 	addi	r6,r6,8
   13d58:	1023883a 	mov	r17,r2
   13d5c:	0015a2c0 	call	15a2c <memcpy>
   13d60:	d9001617 	ldw	r4,88(sp)
   13d64:	880b883a 	mov	r5,r17
   13d68:	01800044 	movi	r6,1
   13d6c:	00165880 	call	16588 <__lshift>
   13d70:	100b883a 	mov	r5,r2
   13d74:	003d9c06 	br	133e8 <_dtoa_r+0x938>
   13d78:	00800e44 	movi	r2,57
   13d7c:	b8807026 	beq	r23,r2,13f40 <_dtoa_r+0x1490>
   13d80:	b8800044 	addi	r2,r23,1
   13d84:	b7000044 	addi	fp,r22,1
   13d88:	b0800005 	stb	r2,0(r22)
   13d8c:	003e4106 	br	13694 <_dtoa_r+0xbe4>
   13d90:	d8800317 	ldw	r2,12(sp)
   13d94:	018000f4 	movhi	r6,3
   13d98:	31a07c04 	addi	r6,r6,-32272
   13d9c:	b009883a 	mov	r4,r22
   13da0:	100e90fa 	slli	r7,r2,3
   13da4:	b80b883a 	mov	r5,r23
   13da8:	398f883a 	add	r7,r7,r6
   13dac:	38bffe17 	ldw	r2,-8(r7)
   13db0:	d9800517 	ldw	r6,20(sp)
   13db4:	38ffff17 	ldw	r3,-4(r7)
   13db8:	37000044 	addi	fp,r6,1
   13dbc:	180f883a 	mov	r7,r3
   13dc0:	100d883a 	mov	r6,r2
   13dc4:	0018a380 	call	18a38 <__muldf3>
   13dc8:	a80b883a 	mov	r5,r21
   13dcc:	a009883a 	mov	r4,r20
   13dd0:	182f883a 	mov	r23,r3
   13dd4:	102d883a 	mov	r22,r2
   13dd8:	00193f40 	call	193f4 <__fixdfsi>
   13ddc:	1009883a 	mov	r4,r2
   13de0:	1027883a 	mov	r19,r2
   13de4:	00192fc0 	call	192fc <__floatsidf>
   13de8:	a80b883a 	mov	r5,r21
   13dec:	a009883a 	mov	r4,r20
   13df0:	180f883a 	mov	r7,r3
   13df4:	100d883a 	mov	r6,r2
   13df8:	00189440 	call	18944 <__subdf3>
   13dfc:	180b883a 	mov	r5,r3
   13e00:	d8c00517 	ldw	r3,20(sp)
   13e04:	9cc00c04 	addi	r19,r19,48
   13e08:	1009883a 	mov	r4,r2
   13e0c:	1cc00005 	stb	r19,0(r3)
   13e10:	2021883a 	mov	r16,r4
   13e14:	d9000317 	ldw	r4,12(sp)
   13e18:	00800044 	movi	r2,1
   13e1c:	2823883a 	mov	r17,r5
   13e20:	20802226 	beq	r4,r2,13eac <_dtoa_r+0x13fc>
   13e24:	1029883a 	mov	r20,r2
   13e28:	0005883a 	mov	r2,zero
   13e2c:	00d00934 	movhi	r3,16420
   13e30:	180f883a 	mov	r7,r3
   13e34:	100d883a 	mov	r6,r2
   13e38:	880b883a 	mov	r5,r17
   13e3c:	8009883a 	mov	r4,r16
   13e40:	0018a380 	call	18a38 <__muldf3>
   13e44:	180b883a 	mov	r5,r3
   13e48:	1009883a 	mov	r4,r2
   13e4c:	1823883a 	mov	r17,r3
   13e50:	1021883a 	mov	r16,r2
   13e54:	00193f40 	call	193f4 <__fixdfsi>
   13e58:	1009883a 	mov	r4,r2
   13e5c:	102b883a 	mov	r21,r2
   13e60:	00192fc0 	call	192fc <__floatsidf>
   13e64:	880b883a 	mov	r5,r17
   13e68:	8009883a 	mov	r4,r16
   13e6c:	180f883a 	mov	r7,r3
   13e70:	100d883a 	mov	r6,r2
   13e74:	00189440 	call	18944 <__subdf3>
   13e78:	180b883a 	mov	r5,r3
   13e7c:	d8c00517 	ldw	r3,20(sp)
   13e80:	1009883a 	mov	r4,r2
   13e84:	ad400c04 	addi	r21,r21,48
   13e88:	1d05883a 	add	r2,r3,r20
   13e8c:	15400005 	stb	r21,0(r2)
   13e90:	2021883a 	mov	r16,r4
   13e94:	d9000317 	ldw	r4,12(sp)
   13e98:	a5000044 	addi	r20,r20,1
   13e9c:	2823883a 	mov	r17,r5
   13ea0:	a13fe11e 	bne	r20,r4,13e28 <_dtoa_r+0x1378>
   13ea4:	e505883a 	add	r2,fp,r20
   13ea8:	173fffc4 	addi	fp,r2,-1
   13eac:	0025883a 	mov	r18,zero
   13eb0:	04cff834 	movhi	r19,16352
   13eb4:	b009883a 	mov	r4,r22
   13eb8:	b80b883a 	mov	r5,r23
   13ebc:	900d883a 	mov	r6,r18
   13ec0:	980f883a 	mov	r7,r19
   13ec4:	00189c40 	call	189c4 <__adddf3>
   13ec8:	180b883a 	mov	r5,r3
   13ecc:	1009883a 	mov	r4,r2
   13ed0:	800d883a 	mov	r6,r16
   13ed4:	880f883a 	mov	r7,r17
   13ed8:	00192740 	call	19274 <__ltdf2>
   13edc:	103cab16 	blt	r2,zero,1318c <_dtoa_r+0x6dc>
   13ee0:	0009883a 	mov	r4,zero
   13ee4:	980b883a 	mov	r5,r19
   13ee8:	b80f883a 	mov	r7,r23
   13eec:	b00d883a 	mov	r6,r22
   13ef0:	00189440 	call	18944 <__subdf3>
   13ef4:	180b883a 	mov	r5,r3
   13ef8:	880f883a 	mov	r7,r17
   13efc:	1009883a 	mov	r4,r2
   13f00:	800d883a 	mov	r6,r16
   13f04:	00191640 	call	19164 <__gtdf2>
   13f08:	00bc470e 	bge	zero,r2,13028 <_dtoa_r+0x578>
   13f0c:	00c00c04 	movi	r3,48
   13f10:	e73fffc4 	addi	fp,fp,-1
   13f14:	e0800007 	ldb	r2,0(fp)
   13f18:	10fffd26 	beq	r2,r3,13f10 <_dtoa_r+0x1460>
   13f1c:	d9800417 	ldw	r6,16(sp)
   13f20:	e7000044 	addi	fp,fp,1
   13f24:	d9800d15 	stw	r6,52(sp)
   13f28:	003cab06 	br	131d8 <_dtoa_r+0x728>
   13f2c:	d8c00f17 	ldw	r3,60(sp)
   13f30:	d9001117 	ldw	r4,68(sp)
   13f34:	20e1c83a 	sub	r16,r4,r3
   13f38:	0007883a 	mov	r3,zero
   13f3c:	003d9b06 	br	135ac <_dtoa_r+0xafc>
   13f40:	00800e44 	movi	r2,57
   13f44:	b0800005 	stb	r2,0(r22)
   13f48:	b5800044 	addi	r22,r22,1
   13f4c:	003dc106 	br	13654 <_dtoa_r+0xba4>
   13f50:	05800084 	movi	r22,2
   13f54:	003bf706 	br	12f34 <_dtoa_r+0x484>
   13f58:	d9000f17 	ldw	r4,60(sp)
   13f5c:	013c000e 	bge	zero,r4,12f60 <_dtoa_r+0x4b0>
   13f60:	d9800e17 	ldw	r6,56(sp)
   13f64:	01bc300e 	bge	zero,r6,13028 <_dtoa_r+0x578>
   13f68:	0005883a 	mov	r2,zero
   13f6c:	00d00934 	movhi	r3,16420
   13f70:	a80b883a 	mov	r5,r21
   13f74:	180f883a 	mov	r7,r3
   13f78:	a009883a 	mov	r4,r20
   13f7c:	100d883a 	mov	r6,r2
   13f80:	0018a380 	call	18a38 <__muldf3>
   13f84:	b1000044 	addi	r4,r22,1
   13f88:	1021883a 	mov	r16,r2
   13f8c:	1823883a 	mov	r17,r3
   13f90:	00192fc0 	call	192fc <__floatsidf>
   13f94:	880b883a 	mov	r5,r17
   13f98:	8009883a 	mov	r4,r16
   13f9c:	180f883a 	mov	r7,r3
   13fa0:	100d883a 	mov	r6,r2
   13fa4:	0018a380 	call	18a38 <__muldf3>
   13fa8:	0011883a 	mov	r8,zero
   13fac:	02500734 	movhi	r9,16412
   13fb0:	180b883a 	mov	r5,r3
   13fb4:	480f883a 	mov	r7,r9
   13fb8:	1009883a 	mov	r4,r2
   13fbc:	400d883a 	mov	r6,r8
   13fc0:	00189c40 	call	189c4 <__adddf3>
   13fc4:	102d883a 	mov	r22,r2
   13fc8:	00bf3034 	movhi	r2,64704
   13fcc:	10ef883a 	add	r23,r2,r3
   13fd0:	d8800d17 	ldw	r2,52(sp)
   13fd4:	d8c00e17 	ldw	r3,56(sp)
   13fd8:	8029883a 	mov	r20,r16
   13fdc:	10bfffc4 	addi	r2,r2,-1
   13fe0:	882b883a 	mov	r21,r17
   13fe4:	d8800415 	stw	r2,16(sp)
   13fe8:	d8c00315 	stw	r3,12(sp)
   13fec:	003e8306 	br	139fc <_dtoa_r+0xf4c>
   13ff0:	d8800117 	ldw	r2,4(sp)
   13ff4:	dc001117 	ldw	r16,68(sp)
   13ff8:	dc801017 	ldw	r18,64(sp)
   13ffc:	00c00d84 	movi	r3,54
   14000:	1887c83a 	sub	r3,r3,r2
   14004:	003d6906 	br	135ac <_dtoa_r+0xafc>
   14008:	01800044 	movi	r6,1
   1400c:	3021883a 	mov	r16,r6
   14010:	d9800f15 	stw	r6,60(sp)
   14014:	d9802615 	stw	r6,152(sp)
   14018:	d9800e15 	stw	r6,56(sp)
   1401c:	003b9306 	br	12e6c <_dtoa_r+0x3bc>
   14020:	b021883a 	mov	r16,r22
   14024:	dd800f15 	stw	r22,60(sp)
   14028:	003b9006 	br	12e6c <_dtoa_r+0x3bc>
   1402c:	103e221e 	bne	r2,zero,138b8 <_dtoa_r+0xe08>
   14030:	b880004c 	andi	r2,r23,1
   14034:	1005003a 	cmpeq	r2,r2,zero
   14038:	103e1f1e 	bne	r2,zero,138b8 <_dtoa_r+0xe08>
   1403c:	003e1b06 	br	138ac <_dtoa_r+0xdfc>
   14040:	d9001617 	ldw	r4,88(sp)
   14044:	980b883a 	mov	r5,r19
   14048:	01800284 	movi	r6,10
   1404c:	000f883a 	mov	r7,zero
   14050:	00168f80 	call	168f8 <__multadd>
   14054:	d8c00e17 	ldw	r3,56(sp)
   14058:	1027883a 	mov	r19,r2
   1405c:	d8c00f15 	stw	r3,60(sp)
   14060:	003cd306 	br	133b0 <_dtoa_r+0x900>

00014064 <_fflush_r>:
   14064:	defffb04 	addi	sp,sp,-20
   14068:	dcc00315 	stw	r19,12(sp)
   1406c:	dc800215 	stw	r18,8(sp)
   14070:	dfc00415 	stw	ra,16(sp)
   14074:	dc400115 	stw	r17,4(sp)
   14078:	dc000015 	stw	r16,0(sp)
   1407c:	2027883a 	mov	r19,r4
   14080:	2825883a 	mov	r18,r5
   14084:	20000226 	beq	r4,zero,14090 <_fflush_r+0x2c>
   14088:	20800e17 	ldw	r2,56(r4)
   1408c:	10005626 	beq	r2,zero,141e8 <_fflush_r+0x184>
   14090:	9100030b 	ldhu	r4,12(r18)
   14094:	20ffffcc 	andi	r3,r4,65535
   14098:	18e0001c 	xori	r3,r3,32768
   1409c:	18e00004 	addi	r3,r3,-32768
   140a0:	1880020c 	andi	r2,r3,8
   140a4:	1000261e 	bne	r2,zero,14140 <_fflush_r+0xdc>
   140a8:	90c00117 	ldw	r3,4(r18)
   140ac:	20820014 	ori	r2,r4,2048
   140b0:	9080030d 	sth	r2,12(r18)
   140b4:	1009883a 	mov	r4,r2
   140b8:	00c0400e 	bge	zero,r3,141bc <_fflush_r+0x158>
   140bc:	92000a17 	ldw	r8,40(r18)
   140c0:	40004026 	beq	r8,zero,141c4 <_fflush_r+0x160>
   140c4:	2084000c 	andi	r2,r4,4096
   140c8:	10005326 	beq	r2,zero,14218 <_fflush_r+0x1b4>
   140cc:	94001417 	ldw	r16,80(r18)
   140d0:	9080030b 	ldhu	r2,12(r18)
   140d4:	1080010c 	andi	r2,r2,4
   140d8:	1000481e 	bne	r2,zero,141fc <_fflush_r+0x198>
   140dc:	91400717 	ldw	r5,28(r18)
   140e0:	9809883a 	mov	r4,r19
   140e4:	800d883a 	mov	r6,r16
   140e8:	000f883a 	mov	r7,zero
   140ec:	403ee83a 	callr	r8
   140f0:	8080261e 	bne	r16,r2,1418c <_fflush_r+0x128>
   140f4:	9080030b 	ldhu	r2,12(r18)
   140f8:	91000417 	ldw	r4,16(r18)
   140fc:	90000115 	stw	zero,4(r18)
   14100:	10bdffcc 	andi	r2,r2,63487
   14104:	10ffffcc 	andi	r3,r2,65535
   14108:	18c4000c 	andi	r3,r3,4096
   1410c:	9080030d 	sth	r2,12(r18)
   14110:	91000015 	stw	r4,0(r18)
   14114:	18002b26 	beq	r3,zero,141c4 <_fflush_r+0x160>
   14118:	0007883a 	mov	r3,zero
   1411c:	1805883a 	mov	r2,r3
   14120:	94001415 	stw	r16,80(r18)
   14124:	dfc00417 	ldw	ra,16(sp)
   14128:	dcc00317 	ldw	r19,12(sp)
   1412c:	dc800217 	ldw	r18,8(sp)
   14130:	dc400117 	ldw	r17,4(sp)
   14134:	dc000017 	ldw	r16,0(sp)
   14138:	dec00504 	addi	sp,sp,20
   1413c:	f800283a 	ret
   14140:	94400417 	ldw	r17,16(r18)
   14144:	88001f26 	beq	r17,zero,141c4 <_fflush_r+0x160>
   14148:	90800017 	ldw	r2,0(r18)
   1414c:	18c000cc 	andi	r3,r3,3
   14150:	94400015 	stw	r17,0(r18)
   14154:	1461c83a 	sub	r16,r2,r17
   14158:	18002526 	beq	r3,zero,141f0 <_fflush_r+0x18c>
   1415c:	0005883a 	mov	r2,zero
   14160:	90800215 	stw	r2,8(r18)
   14164:	0400170e 	bge	zero,r16,141c4 <_fflush_r+0x160>
   14168:	90c00917 	ldw	r3,36(r18)
   1416c:	91400717 	ldw	r5,28(r18)
   14170:	880d883a 	mov	r6,r17
   14174:	800f883a 	mov	r7,r16
   14178:	9809883a 	mov	r4,r19
   1417c:	183ee83a 	callr	r3
   14180:	88a3883a 	add	r17,r17,r2
   14184:	80a1c83a 	sub	r16,r16,r2
   14188:	00bff616 	blt	zero,r2,14164 <_fflush_r+0x100>
   1418c:	9080030b 	ldhu	r2,12(r18)
   14190:	00ffffc4 	movi	r3,-1
   14194:	10801014 	ori	r2,r2,64
   14198:	9080030d 	sth	r2,12(r18)
   1419c:	1805883a 	mov	r2,r3
   141a0:	dfc00417 	ldw	ra,16(sp)
   141a4:	dcc00317 	ldw	r19,12(sp)
   141a8:	dc800217 	ldw	r18,8(sp)
   141ac:	dc400117 	ldw	r17,4(sp)
   141b0:	dc000017 	ldw	r16,0(sp)
   141b4:	dec00504 	addi	sp,sp,20
   141b8:	f800283a 	ret
   141bc:	90800f17 	ldw	r2,60(r18)
   141c0:	00bfbe16 	blt	zero,r2,140bc <_fflush_r+0x58>
   141c4:	0007883a 	mov	r3,zero
   141c8:	1805883a 	mov	r2,r3
   141cc:	dfc00417 	ldw	ra,16(sp)
   141d0:	dcc00317 	ldw	r19,12(sp)
   141d4:	dc800217 	ldw	r18,8(sp)
   141d8:	dc400117 	ldw	r17,4(sp)
   141dc:	dc000017 	ldw	r16,0(sp)
   141e0:	dec00504 	addi	sp,sp,20
   141e4:	f800283a 	ret
   141e8:	00142fc0 	call	142fc <__sinit>
   141ec:	003fa806 	br	14090 <_fflush_r+0x2c>
   141f0:	90800517 	ldw	r2,20(r18)
   141f4:	90800215 	stw	r2,8(r18)
   141f8:	003fda06 	br	14164 <_fflush_r+0x100>
   141fc:	90800117 	ldw	r2,4(r18)
   14200:	90c00c17 	ldw	r3,48(r18)
   14204:	80a1c83a 	sub	r16,r16,r2
   14208:	183fb426 	beq	r3,zero,140dc <_fflush_r+0x78>
   1420c:	90800f17 	ldw	r2,60(r18)
   14210:	80a1c83a 	sub	r16,r16,r2
   14214:	003fb106 	br	140dc <_fflush_r+0x78>
   14218:	91400717 	ldw	r5,28(r18)
   1421c:	9809883a 	mov	r4,r19
   14220:	000d883a 	mov	r6,zero
   14224:	01c00044 	movi	r7,1
   14228:	403ee83a 	callr	r8
   1422c:	1021883a 	mov	r16,r2
   14230:	00bfffc4 	movi	r2,-1
   14234:	80800226 	beq	r16,r2,14240 <_fflush_r+0x1dc>
   14238:	92000a17 	ldw	r8,40(r18)
   1423c:	003fa406 	br	140d0 <_fflush_r+0x6c>
   14240:	98c00017 	ldw	r3,0(r19)
   14244:	00800744 	movi	r2,29
   14248:	18bfde26 	beq	r3,r2,141c4 <_fflush_r+0x160>
   1424c:	9080030b 	ldhu	r2,12(r18)
   14250:	8007883a 	mov	r3,r16
   14254:	10801014 	ori	r2,r2,64
   14258:	9080030d 	sth	r2,12(r18)
   1425c:	003fcf06 	br	1419c <_fflush_r+0x138>

00014260 <fflush>:
   14260:	01400074 	movhi	r5,1
   14264:	29501904 	addi	r5,r5,16484
   14268:	2007883a 	mov	r3,r4
   1426c:	20000526 	beq	r4,zero,14284 <fflush+0x24>
   14270:	008000f4 	movhi	r2,3
   14274:	10a79e04 	addi	r2,r2,-24968
   14278:	11000017 	ldw	r4,0(r2)
   1427c:	180b883a 	mov	r5,r3
   14280:	00140641 	jmpi	14064 <_fflush_r>
   14284:	008000f4 	movhi	r2,3
   14288:	10a79f04 	addi	r2,r2,-24964
   1428c:	11000017 	ldw	r4,0(r2)
   14290:	0014e301 	jmpi	14e30 <_fwalk_reent>

00014294 <std>:
   14294:	00800074 	movhi	r2,1
   14298:	109cc304 	addi	r2,r2,29452
   1429c:	20800b15 	stw	r2,44(r4)
   142a0:	00800074 	movhi	r2,1
   142a4:	109cfe04 	addi	r2,r2,29688
   142a8:	20800815 	stw	r2,32(r4)
   142ac:	00c00074 	movhi	r3,1
   142b0:	18dcdf04 	addi	r3,r3,29564
   142b4:	00800074 	movhi	r2,1
   142b8:	109cc504 	addi	r2,r2,29460
   142bc:	2140030d 	sth	r5,12(r4)
   142c0:	2180038d 	sth	r6,14(r4)
   142c4:	20c00915 	stw	r3,36(r4)
   142c8:	20800a15 	stw	r2,40(r4)
   142cc:	20000015 	stw	zero,0(r4)
   142d0:	20000115 	stw	zero,4(r4)
   142d4:	20000215 	stw	zero,8(r4)
   142d8:	20000415 	stw	zero,16(r4)
   142dc:	20000515 	stw	zero,20(r4)
   142e0:	20000615 	stw	zero,24(r4)
   142e4:	21000715 	stw	r4,28(r4)
   142e8:	f800283a 	ret

000142ec <__sfp_lock_acquire>:
   142ec:	f800283a 	ret

000142f0 <__sfp_lock_release>:
   142f0:	f800283a 	ret

000142f4 <__sinit_lock_acquire>:
   142f4:	f800283a 	ret

000142f8 <__sinit_lock_release>:
   142f8:	f800283a 	ret

000142fc <__sinit>:
   142fc:	20800e17 	ldw	r2,56(r4)
   14300:	defffd04 	addi	sp,sp,-12
   14304:	dc400115 	stw	r17,4(sp)
   14308:	dc000015 	stw	r16,0(sp)
   1430c:	dfc00215 	stw	ra,8(sp)
   14310:	04400044 	movi	r17,1
   14314:	01400104 	movi	r5,4
   14318:	000d883a 	mov	r6,zero
   1431c:	2021883a 	mov	r16,r4
   14320:	2200bb04 	addi	r8,r4,748
   14324:	200f883a 	mov	r7,r4
   14328:	10000526 	beq	r2,zero,14340 <__sinit+0x44>
   1432c:	dfc00217 	ldw	ra,8(sp)
   14330:	dc400117 	ldw	r17,4(sp)
   14334:	dc000017 	ldw	r16,0(sp)
   14338:	dec00304 	addi	sp,sp,12
   1433c:	f800283a 	ret
   14340:	21000117 	ldw	r4,4(r4)
   14344:	00800074 	movhi	r2,1
   14348:	1090f804 	addi	r2,r2,17376
   1434c:	00c000c4 	movi	r3,3
   14350:	80800f15 	stw	r2,60(r16)
   14354:	80c0b915 	stw	r3,740(r16)
   14358:	8200ba15 	stw	r8,744(r16)
   1435c:	84400e15 	stw	r17,56(r16)
   14360:	8000b815 	stw	zero,736(r16)
   14364:	00142940 	call	14294 <std>
   14368:	81000217 	ldw	r4,8(r16)
   1436c:	880d883a 	mov	r6,r17
   14370:	800f883a 	mov	r7,r16
   14374:	01400284 	movi	r5,10
   14378:	00142940 	call	14294 <std>
   1437c:	81000317 	ldw	r4,12(r16)
   14380:	800f883a 	mov	r7,r16
   14384:	01400484 	movi	r5,18
   14388:	01800084 	movi	r6,2
   1438c:	dfc00217 	ldw	ra,8(sp)
   14390:	dc400117 	ldw	r17,4(sp)
   14394:	dc000017 	ldw	r16,0(sp)
   14398:	dec00304 	addi	sp,sp,12
   1439c:	00142941 	jmpi	14294 <std>

000143a0 <__fp_lock>:
   143a0:	0005883a 	mov	r2,zero
   143a4:	f800283a 	ret

000143a8 <__fp_unlock>:
   143a8:	0005883a 	mov	r2,zero
   143ac:	f800283a 	ret

000143b0 <__fp_unlock_all>:
   143b0:	008000f4 	movhi	r2,3
   143b4:	10a79e04 	addi	r2,r2,-24968
   143b8:	11000017 	ldw	r4,0(r2)
   143bc:	01400074 	movhi	r5,1
   143c0:	2950ea04 	addi	r5,r5,17320
   143c4:	0014ef81 	jmpi	14ef8 <_fwalk>

000143c8 <__fp_lock_all>:
   143c8:	008000f4 	movhi	r2,3
   143cc:	10a79e04 	addi	r2,r2,-24968
   143d0:	11000017 	ldw	r4,0(r2)
   143d4:	01400074 	movhi	r5,1
   143d8:	2950e804 	addi	r5,r5,17312
   143dc:	0014ef81 	jmpi	14ef8 <_fwalk>

000143e0 <_cleanup_r>:
   143e0:	01400074 	movhi	r5,1
   143e4:	295df004 	addi	r5,r5,30656
   143e8:	0014ef81 	jmpi	14ef8 <_fwalk>

000143ec <_cleanup>:
   143ec:	008000f4 	movhi	r2,3
   143f0:	10a79f04 	addi	r2,r2,-24964
   143f4:	11000017 	ldw	r4,0(r2)
   143f8:	00143e01 	jmpi	143e0 <_cleanup_r>

000143fc <__sfmoreglue>:
   143fc:	defffc04 	addi	sp,sp,-16
   14400:	dc400115 	stw	r17,4(sp)
   14404:	2c401724 	muli	r17,r5,92
   14408:	dc800215 	stw	r18,8(sp)
   1440c:	2825883a 	mov	r18,r5
   14410:	89400304 	addi	r5,r17,12
   14414:	dc000015 	stw	r16,0(sp)
   14418:	dfc00315 	stw	ra,12(sp)
   1441c:	00152080 	call	15208 <_malloc_r>
   14420:	0021883a 	mov	r16,zero
   14424:	880d883a 	mov	r6,r17
   14428:	000b883a 	mov	r5,zero
   1442c:	10000626 	beq	r2,zero,14448 <__sfmoreglue+0x4c>
   14430:	11000304 	addi	r4,r2,12
   14434:	14800115 	stw	r18,4(r2)
   14438:	10000015 	stw	zero,0(r2)
   1443c:	11000215 	stw	r4,8(r2)
   14440:	1021883a 	mov	r16,r2
   14444:	0015bac0 	call	15bac <memset>
   14448:	8005883a 	mov	r2,r16
   1444c:	dfc00317 	ldw	ra,12(sp)
   14450:	dc800217 	ldw	r18,8(sp)
   14454:	dc400117 	ldw	r17,4(sp)
   14458:	dc000017 	ldw	r16,0(sp)
   1445c:	dec00404 	addi	sp,sp,16
   14460:	f800283a 	ret

00014464 <__sfp>:
   14464:	defffd04 	addi	sp,sp,-12
   14468:	008000f4 	movhi	r2,3
   1446c:	10a79f04 	addi	r2,r2,-24964
   14470:	dc000015 	stw	r16,0(sp)
   14474:	14000017 	ldw	r16,0(r2)
   14478:	dc400115 	stw	r17,4(sp)
   1447c:	dfc00215 	stw	ra,8(sp)
   14480:	80800e17 	ldw	r2,56(r16)
   14484:	2023883a 	mov	r17,r4
   14488:	10002626 	beq	r2,zero,14524 <__sfp+0xc0>
   1448c:	8400b804 	addi	r16,r16,736
   14490:	80800117 	ldw	r2,4(r16)
   14494:	81000217 	ldw	r4,8(r16)
   14498:	10ffffc4 	addi	r3,r2,-1
   1449c:	18000916 	blt	r3,zero,144c4 <__sfp+0x60>
   144a0:	2080030f 	ldh	r2,12(r4)
   144a4:	10000b26 	beq	r2,zero,144d4 <__sfp+0x70>
   144a8:	017fffc4 	movi	r5,-1
   144ac:	00000206 	br	144b8 <__sfp+0x54>
   144b0:	2080030f 	ldh	r2,12(r4)
   144b4:	10000726 	beq	r2,zero,144d4 <__sfp+0x70>
   144b8:	18ffffc4 	addi	r3,r3,-1
   144bc:	21001704 	addi	r4,r4,92
   144c0:	197ffb1e 	bne	r3,r5,144b0 <__sfp+0x4c>
   144c4:	80800017 	ldw	r2,0(r16)
   144c8:	10001926 	beq	r2,zero,14530 <__sfp+0xcc>
   144cc:	1021883a 	mov	r16,r2
   144d0:	003fef06 	br	14490 <__sfp+0x2c>
   144d4:	00bfffc4 	movi	r2,-1
   144d8:	00c00044 	movi	r3,1
   144dc:	2080038d 	sth	r2,14(r4)
   144e0:	20c0030d 	sth	r3,12(r4)
   144e4:	20000015 	stw	zero,0(r4)
   144e8:	20000215 	stw	zero,8(r4)
   144ec:	20000115 	stw	zero,4(r4)
   144f0:	20000415 	stw	zero,16(r4)
   144f4:	20000515 	stw	zero,20(r4)
   144f8:	20000615 	stw	zero,24(r4)
   144fc:	20000c15 	stw	zero,48(r4)
   14500:	20000d15 	stw	zero,52(r4)
   14504:	20001115 	stw	zero,68(r4)
   14508:	20001215 	stw	zero,72(r4)
   1450c:	2005883a 	mov	r2,r4
   14510:	dfc00217 	ldw	ra,8(sp)
   14514:	dc400117 	ldw	r17,4(sp)
   14518:	dc000017 	ldw	r16,0(sp)
   1451c:	dec00304 	addi	sp,sp,12
   14520:	f800283a 	ret
   14524:	8009883a 	mov	r4,r16
   14528:	00142fc0 	call	142fc <__sinit>
   1452c:	003fd706 	br	1448c <__sfp+0x28>
   14530:	8809883a 	mov	r4,r17
   14534:	01400104 	movi	r5,4
   14538:	00143fc0 	call	143fc <__sfmoreglue>
   1453c:	80800015 	stw	r2,0(r16)
   14540:	103fe21e 	bne	r2,zero,144cc <__sfp+0x68>
   14544:	00800304 	movi	r2,12
   14548:	0009883a 	mov	r4,zero
   1454c:	88800015 	stw	r2,0(r17)
   14550:	003fee06 	br	1450c <__sfp+0xa8>

00014554 <_malloc_trim_r>:
   14554:	defffb04 	addi	sp,sp,-20
   14558:	dcc00315 	stw	r19,12(sp)
   1455c:	04c000f4 	movhi	r19,3
   14560:	9ce21a04 	addi	r19,r19,-30616
   14564:	dc800215 	stw	r18,8(sp)
   14568:	dc400115 	stw	r17,4(sp)
   1456c:	dc000015 	stw	r16,0(sp)
   14570:	2823883a 	mov	r17,r5
   14574:	2025883a 	mov	r18,r4
   14578:	dfc00415 	stw	ra,16(sp)
   1457c:	001a3100 	call	1a310 <__malloc_lock>
   14580:	98800217 	ldw	r2,8(r19)
   14584:	9009883a 	mov	r4,r18
   14588:	000b883a 	mov	r5,zero
   1458c:	10c00117 	ldw	r3,4(r2)
   14590:	00bfff04 	movi	r2,-4
   14594:	18a0703a 	and	r16,r3,r2
   14598:	8463c83a 	sub	r17,r16,r17
   1459c:	8c43fbc4 	addi	r17,r17,4079
   145a0:	8822d33a 	srli	r17,r17,12
   145a4:	0083ffc4 	movi	r2,4095
   145a8:	8c7fffc4 	addi	r17,r17,-1
   145ac:	8822933a 	slli	r17,r17,12
   145b0:	1440060e 	bge	r2,r17,145cc <_malloc_trim_r+0x78>
   145b4:	001729c0 	call	1729c <_sbrk_r>
   145b8:	98c00217 	ldw	r3,8(r19)
   145bc:	9009883a 	mov	r4,r18
   145c0:	044bc83a 	sub	r5,zero,r17
   145c4:	80c7883a 	add	r3,r16,r3
   145c8:	10c00926 	beq	r2,r3,145f0 <_malloc_trim_r+0x9c>
   145cc:	001a3300 	call	1a330 <__malloc_unlock>
   145d0:	0005883a 	mov	r2,zero
   145d4:	dfc00417 	ldw	ra,16(sp)
   145d8:	dcc00317 	ldw	r19,12(sp)
   145dc:	dc800217 	ldw	r18,8(sp)
   145e0:	dc400117 	ldw	r17,4(sp)
   145e4:	dc000017 	ldw	r16,0(sp)
   145e8:	dec00504 	addi	sp,sp,20
   145ec:	f800283a 	ret
   145f0:	9009883a 	mov	r4,r18
   145f4:	001729c0 	call	1729c <_sbrk_r>
   145f8:	844dc83a 	sub	r6,r16,r17
   145fc:	00ffffc4 	movi	r3,-1
   14600:	9009883a 	mov	r4,r18
   14604:	000b883a 	mov	r5,zero
   14608:	01c000f4 	movhi	r7,3
   1460c:	39e7c204 	addi	r7,r7,-24824
   14610:	31800054 	ori	r6,r6,1
   14614:	10c00926 	beq	r2,r3,1463c <_malloc_trim_r+0xe8>
   14618:	38800017 	ldw	r2,0(r7)
   1461c:	98c00217 	ldw	r3,8(r19)
   14620:	9009883a 	mov	r4,r18
   14624:	1445c83a 	sub	r2,r2,r17
   14628:	38800015 	stw	r2,0(r7)
   1462c:	19800115 	stw	r6,4(r3)
   14630:	001a3300 	call	1a330 <__malloc_unlock>
   14634:	00800044 	movi	r2,1
   14638:	003fe606 	br	145d4 <_malloc_trim_r+0x80>
   1463c:	001729c0 	call	1729c <_sbrk_r>
   14640:	99800217 	ldw	r6,8(r19)
   14644:	100f883a 	mov	r7,r2
   14648:	9009883a 	mov	r4,r18
   1464c:	1187c83a 	sub	r3,r2,r6
   14650:	008003c4 	movi	r2,15
   14654:	19400054 	ori	r5,r3,1
   14658:	10ffdc0e 	bge	r2,r3,145cc <_malloc_trim_r+0x78>
   1465c:	008000f4 	movhi	r2,3
   14660:	10a7a304 	addi	r2,r2,-24948
   14664:	10c00017 	ldw	r3,0(r2)
   14668:	008000f4 	movhi	r2,3
   1466c:	10a7c204 	addi	r2,r2,-24824
   14670:	31400115 	stw	r5,4(r6)
   14674:	38c7c83a 	sub	r3,r7,r3
   14678:	10c00015 	stw	r3,0(r2)
   1467c:	003fd306 	br	145cc <_malloc_trim_r+0x78>

00014680 <_free_r>:
   14680:	defffd04 	addi	sp,sp,-12
   14684:	dc400115 	stw	r17,4(sp)
   14688:	dc000015 	stw	r16,0(sp)
   1468c:	dfc00215 	stw	ra,8(sp)
   14690:	2821883a 	mov	r16,r5
   14694:	2023883a 	mov	r17,r4
   14698:	28005a26 	beq	r5,zero,14804 <_free_r+0x184>
   1469c:	001a3100 	call	1a310 <__malloc_lock>
   146a0:	823ffe04 	addi	r8,r16,-8
   146a4:	41400117 	ldw	r5,4(r8)
   146a8:	00bfff84 	movi	r2,-2
   146ac:	028000f4 	movhi	r10,3
   146b0:	52a21a04 	addi	r10,r10,-30616
   146b4:	288e703a 	and	r7,r5,r2
   146b8:	41cd883a 	add	r6,r8,r7
   146bc:	30c00117 	ldw	r3,4(r6)
   146c0:	51000217 	ldw	r4,8(r10)
   146c4:	00bfff04 	movi	r2,-4
   146c8:	1892703a 	and	r9,r3,r2
   146cc:	5017883a 	mov	r11,r10
   146d0:	31006726 	beq	r6,r4,14870 <_free_r+0x1f0>
   146d4:	2880004c 	andi	r2,r5,1
   146d8:	1005003a 	cmpeq	r2,r2,zero
   146dc:	32400115 	stw	r9,4(r6)
   146e0:	10001a1e 	bne	r2,zero,1474c <_free_r+0xcc>
   146e4:	000b883a 	mov	r5,zero
   146e8:	3247883a 	add	r3,r6,r9
   146ec:	18800117 	ldw	r2,4(r3)
   146f0:	1080004c 	andi	r2,r2,1
   146f4:	1000231e 	bne	r2,zero,14784 <_free_r+0x104>
   146f8:	280ac03a 	cmpne	r5,r5,zero
   146fc:	3a4f883a 	add	r7,r7,r9
   14700:	2800451e 	bne	r5,zero,14818 <_free_r+0x198>
   14704:	31000217 	ldw	r4,8(r6)
   14708:	008000f4 	movhi	r2,3
   1470c:	10a21c04 	addi	r2,r2,-30608
   14710:	20807b26 	beq	r4,r2,14900 <_free_r+0x280>
   14714:	30800317 	ldw	r2,12(r6)
   14718:	3a07883a 	add	r3,r7,r8
   1471c:	19c00015 	stw	r7,0(r3)
   14720:	11000215 	stw	r4,8(r2)
   14724:	20800315 	stw	r2,12(r4)
   14728:	38800054 	ori	r2,r7,1
   1472c:	40800115 	stw	r2,4(r8)
   14730:	28001a26 	beq	r5,zero,1479c <_free_r+0x11c>
   14734:	8809883a 	mov	r4,r17
   14738:	dfc00217 	ldw	ra,8(sp)
   1473c:	dc400117 	ldw	r17,4(sp)
   14740:	dc000017 	ldw	r16,0(sp)
   14744:	dec00304 	addi	sp,sp,12
   14748:	001a3301 	jmpi	1a330 <__malloc_unlock>
   1474c:	80bffe17 	ldw	r2,-8(r16)
   14750:	50c00204 	addi	r3,r10,8
   14754:	4091c83a 	sub	r8,r8,r2
   14758:	41000217 	ldw	r4,8(r8)
   1475c:	388f883a 	add	r7,r7,r2
   14760:	20c06126 	beq	r4,r3,148e8 <_free_r+0x268>
   14764:	40800317 	ldw	r2,12(r8)
   14768:	3247883a 	add	r3,r6,r9
   1476c:	000b883a 	mov	r5,zero
   14770:	11000215 	stw	r4,8(r2)
   14774:	20800315 	stw	r2,12(r4)
   14778:	18800117 	ldw	r2,4(r3)
   1477c:	1080004c 	andi	r2,r2,1
   14780:	103fdd26 	beq	r2,zero,146f8 <_free_r+0x78>
   14784:	38800054 	ori	r2,r7,1
   14788:	3a07883a 	add	r3,r7,r8
   1478c:	280ac03a 	cmpne	r5,r5,zero
   14790:	40800115 	stw	r2,4(r8)
   14794:	19c00015 	stw	r7,0(r3)
   14798:	283fe61e 	bne	r5,zero,14734 <_free_r+0xb4>
   1479c:	00807fc4 	movi	r2,511
   147a0:	11c01f2e 	bgeu	r2,r7,14820 <_free_r+0x1a0>
   147a4:	3806d27a 	srli	r3,r7,9
   147a8:	1800481e 	bne	r3,zero,148cc <_free_r+0x24c>
   147ac:	3804d0fa 	srli	r2,r7,3
   147b0:	100690fa 	slli	r3,r2,3
   147b4:	1acd883a 	add	r6,r3,r11
   147b8:	31400217 	ldw	r5,8(r6)
   147bc:	31405926 	beq	r6,r5,14924 <_free_r+0x2a4>
   147c0:	28800117 	ldw	r2,4(r5)
   147c4:	00ffff04 	movi	r3,-4
   147c8:	10c4703a 	and	r2,r2,r3
   147cc:	3880022e 	bgeu	r7,r2,147d8 <_free_r+0x158>
   147d0:	29400217 	ldw	r5,8(r5)
   147d4:	317ffa1e 	bne	r6,r5,147c0 <_free_r+0x140>
   147d8:	29800317 	ldw	r6,12(r5)
   147dc:	41800315 	stw	r6,12(r8)
   147e0:	41400215 	stw	r5,8(r8)
   147e4:	8809883a 	mov	r4,r17
   147e8:	2a000315 	stw	r8,12(r5)
   147ec:	32000215 	stw	r8,8(r6)
   147f0:	dfc00217 	ldw	ra,8(sp)
   147f4:	dc400117 	ldw	r17,4(sp)
   147f8:	dc000017 	ldw	r16,0(sp)
   147fc:	dec00304 	addi	sp,sp,12
   14800:	001a3301 	jmpi	1a330 <__malloc_unlock>
   14804:	dfc00217 	ldw	ra,8(sp)
   14808:	dc400117 	ldw	r17,4(sp)
   1480c:	dc000017 	ldw	r16,0(sp)
   14810:	dec00304 	addi	sp,sp,12
   14814:	f800283a 	ret
   14818:	31000217 	ldw	r4,8(r6)
   1481c:	003fbd06 	br	14714 <_free_r+0x94>
   14820:	3806d0fa 	srli	r3,r7,3
   14824:	00800044 	movi	r2,1
   14828:	51400117 	ldw	r5,4(r10)
   1482c:	180890fa 	slli	r4,r3,3
   14830:	1807d0ba 	srai	r3,r3,2
   14834:	22c9883a 	add	r4,r4,r11
   14838:	21800217 	ldw	r6,8(r4)
   1483c:	10c4983a 	sll	r2,r2,r3
   14840:	41000315 	stw	r4,12(r8)
   14844:	41800215 	stw	r6,8(r8)
   14848:	288ab03a 	or	r5,r5,r2
   1484c:	22000215 	stw	r8,8(r4)
   14850:	8809883a 	mov	r4,r17
   14854:	51400115 	stw	r5,4(r10)
   14858:	32000315 	stw	r8,12(r6)
   1485c:	dfc00217 	ldw	ra,8(sp)
   14860:	dc400117 	ldw	r17,4(sp)
   14864:	dc000017 	ldw	r16,0(sp)
   14868:	dec00304 	addi	sp,sp,12
   1486c:	001a3301 	jmpi	1a330 <__malloc_unlock>
   14870:	2880004c 	andi	r2,r5,1
   14874:	3a4d883a 	add	r6,r7,r9
   14878:	1000071e 	bne	r2,zero,14898 <_free_r+0x218>
   1487c:	80bffe17 	ldw	r2,-8(r16)
   14880:	4091c83a 	sub	r8,r8,r2
   14884:	41000317 	ldw	r4,12(r8)
   14888:	40c00217 	ldw	r3,8(r8)
   1488c:	308d883a 	add	r6,r6,r2
   14890:	20c00215 	stw	r3,8(r4)
   14894:	19000315 	stw	r4,12(r3)
   14898:	008000f4 	movhi	r2,3
   1489c:	10a7a204 	addi	r2,r2,-24952
   148a0:	11000017 	ldw	r4,0(r2)
   148a4:	30c00054 	ori	r3,r6,1
   148a8:	52000215 	stw	r8,8(r10)
   148ac:	40c00115 	stw	r3,4(r8)
   148b0:	313fa036 	bltu	r6,r4,14734 <_free_r+0xb4>
   148b4:	008000f4 	movhi	r2,3
   148b8:	10a7b604 	addi	r2,r2,-24872
   148bc:	11400017 	ldw	r5,0(r2)
   148c0:	8809883a 	mov	r4,r17
   148c4:	00145540 	call	14554 <_malloc_trim_r>
   148c8:	003f9a06 	br	14734 <_free_r+0xb4>
   148cc:	00800104 	movi	r2,4
   148d0:	10c0072e 	bgeu	r2,r3,148f0 <_free_r+0x270>
   148d4:	00800504 	movi	r2,20
   148d8:	10c01936 	bltu	r2,r3,14940 <_free_r+0x2c0>
   148dc:	188016c4 	addi	r2,r3,91
   148e0:	100690fa 	slli	r3,r2,3
   148e4:	003fb306 	br	147b4 <_free_r+0x134>
   148e8:	01400044 	movi	r5,1
   148ec:	003f7e06 	br	146e8 <_free_r+0x68>
   148f0:	3804d1ba 	srli	r2,r7,6
   148f4:	10800e04 	addi	r2,r2,56
   148f8:	100690fa 	slli	r3,r2,3
   148fc:	003fad06 	br	147b4 <_free_r+0x134>
   14900:	22000315 	stw	r8,12(r4)
   14904:	22000215 	stw	r8,8(r4)
   14908:	3a05883a 	add	r2,r7,r8
   1490c:	38c00054 	ori	r3,r7,1
   14910:	11c00015 	stw	r7,0(r2)
   14914:	41000215 	stw	r4,8(r8)
   14918:	40c00115 	stw	r3,4(r8)
   1491c:	41000315 	stw	r4,12(r8)
   14920:	003f8406 	br	14734 <_free_r+0xb4>
   14924:	1005d0ba 	srai	r2,r2,2
   14928:	00c00044 	movi	r3,1
   1492c:	51000117 	ldw	r4,4(r10)
   14930:	1886983a 	sll	r3,r3,r2
   14934:	20c8b03a 	or	r4,r4,r3
   14938:	51000115 	stw	r4,4(r10)
   1493c:	003fa706 	br	147dc <_free_r+0x15c>
   14940:	00801504 	movi	r2,84
   14944:	10c00436 	bltu	r2,r3,14958 <_free_r+0x2d8>
   14948:	3804d33a 	srli	r2,r7,12
   1494c:	10801b84 	addi	r2,r2,110
   14950:	100690fa 	slli	r3,r2,3
   14954:	003f9706 	br	147b4 <_free_r+0x134>
   14958:	00805504 	movi	r2,340
   1495c:	10c00436 	bltu	r2,r3,14970 <_free_r+0x2f0>
   14960:	3804d3fa 	srli	r2,r7,15
   14964:	10801dc4 	addi	r2,r2,119
   14968:	100690fa 	slli	r3,r2,3
   1496c:	003f9106 	br	147b4 <_free_r+0x134>
   14970:	00815504 	movi	r2,1364
   14974:	10c0032e 	bgeu	r2,r3,14984 <_free_r+0x304>
   14978:	00801f84 	movi	r2,126
   1497c:	00c0fc04 	movi	r3,1008
   14980:	003f8c06 	br	147b4 <_free_r+0x134>
   14984:	3804d4ba 	srli	r2,r7,18
   14988:	10801f04 	addi	r2,r2,124
   1498c:	100690fa 	slli	r3,r2,3
   14990:	003f8806 	br	147b4 <_free_r+0x134>

00014994 <__sfvwrite_r>:
   14994:	30800217 	ldw	r2,8(r6)
   14998:	defff504 	addi	sp,sp,-44
   1499c:	df000915 	stw	fp,36(sp)
   149a0:	dd800715 	stw	r22,28(sp)
   149a4:	dc800315 	stw	r18,12(sp)
   149a8:	dfc00a15 	stw	ra,40(sp)
   149ac:	ddc00815 	stw	r23,32(sp)
   149b0:	dd400615 	stw	r21,24(sp)
   149b4:	dd000515 	stw	r20,20(sp)
   149b8:	dcc00415 	stw	r19,16(sp)
   149bc:	dc400215 	stw	r17,8(sp)
   149c0:	dc000115 	stw	r16,4(sp)
   149c4:	302d883a 	mov	r22,r6
   149c8:	2039883a 	mov	fp,r4
   149cc:	2825883a 	mov	r18,r5
   149d0:	10001c26 	beq	r2,zero,14a44 <__sfvwrite_r+0xb0>
   149d4:	29c0030b 	ldhu	r7,12(r5)
   149d8:	3880020c 	andi	r2,r7,8
   149dc:	10002726 	beq	r2,zero,14a7c <__sfvwrite_r+0xe8>
   149e0:	28800417 	ldw	r2,16(r5)
   149e4:	10002526 	beq	r2,zero,14a7c <__sfvwrite_r+0xe8>
   149e8:	3880008c 	andi	r2,r7,2
   149ec:	b5400017 	ldw	r21,0(r22)
   149f0:	10002826 	beq	r2,zero,14a94 <__sfvwrite_r+0x100>
   149f4:	0021883a 	mov	r16,zero
   149f8:	0023883a 	mov	r17,zero
   149fc:	880d883a 	mov	r6,r17
   14a00:	e009883a 	mov	r4,fp
   14a04:	00810004 	movi	r2,1024
   14a08:	80006e26 	beq	r16,zero,14bc4 <__sfvwrite_r+0x230>
   14a0c:	800f883a 	mov	r7,r16
   14a10:	91400717 	ldw	r5,28(r18)
   14a14:	1400012e 	bgeu	r2,r16,14a1c <__sfvwrite_r+0x88>
   14a18:	100f883a 	mov	r7,r2
   14a1c:	90c00917 	ldw	r3,36(r18)
   14a20:	183ee83a 	callr	r3
   14a24:	1007883a 	mov	r3,r2
   14a28:	80a1c83a 	sub	r16,r16,r2
   14a2c:	88a3883a 	add	r17,r17,r2
   14a30:	00806d0e 	bge	zero,r2,14be8 <__sfvwrite_r+0x254>
   14a34:	b0800217 	ldw	r2,8(r22)
   14a38:	10c5c83a 	sub	r2,r2,r3
   14a3c:	b0800215 	stw	r2,8(r22)
   14a40:	103fee1e 	bne	r2,zero,149fc <__sfvwrite_r+0x68>
   14a44:	0009883a 	mov	r4,zero
   14a48:	2005883a 	mov	r2,r4
   14a4c:	dfc00a17 	ldw	ra,40(sp)
   14a50:	df000917 	ldw	fp,36(sp)
   14a54:	ddc00817 	ldw	r23,32(sp)
   14a58:	dd800717 	ldw	r22,28(sp)
   14a5c:	dd400617 	ldw	r21,24(sp)
   14a60:	dd000517 	ldw	r20,20(sp)
   14a64:	dcc00417 	ldw	r19,16(sp)
   14a68:	dc800317 	ldw	r18,12(sp)
   14a6c:	dc400217 	ldw	r17,8(sp)
   14a70:	dc000117 	ldw	r16,4(sp)
   14a74:	dec00b04 	addi	sp,sp,44
   14a78:	f800283a 	ret
   14a7c:	001275c0 	call	1275c <__swsetup_r>
   14a80:	1000e41e 	bne	r2,zero,14e14 <__sfvwrite_r+0x480>
   14a84:	91c0030b 	ldhu	r7,12(r18)
   14a88:	b5400017 	ldw	r21,0(r22)
   14a8c:	3880008c 	andi	r2,r7,2
   14a90:	103fd81e 	bne	r2,zero,149f4 <__sfvwrite_r+0x60>
   14a94:	3880004c 	andi	r2,r7,1
   14a98:	1005003a 	cmpeq	r2,r2,zero
   14a9c:	10005726 	beq	r2,zero,14bfc <__sfvwrite_r+0x268>
   14aa0:	0029883a 	mov	r20,zero
   14aa4:	002f883a 	mov	r23,zero
   14aa8:	a0004226 	beq	r20,zero,14bb4 <__sfvwrite_r+0x220>
   14aac:	3880800c 	andi	r2,r7,512
   14ab0:	94000217 	ldw	r16,8(r18)
   14ab4:	10008b26 	beq	r2,zero,14ce4 <__sfvwrite_r+0x350>
   14ab8:	800d883a 	mov	r6,r16
   14abc:	a400a536 	bltu	r20,r16,14d54 <__sfvwrite_r+0x3c0>
   14ac0:	3881200c 	andi	r2,r7,1152
   14ac4:	10002726 	beq	r2,zero,14b64 <__sfvwrite_r+0x1d0>
   14ac8:	90800517 	ldw	r2,20(r18)
   14acc:	92000417 	ldw	r8,16(r18)
   14ad0:	91400017 	ldw	r5,0(r18)
   14ad4:	1087883a 	add	r3,r2,r2
   14ad8:	1887883a 	add	r3,r3,r2
   14adc:	1808d7fa 	srli	r4,r3,31
   14ae0:	2a21c83a 	sub	r16,r5,r8
   14ae4:	80800044 	addi	r2,r16,1
   14ae8:	20c9883a 	add	r4,r4,r3
   14aec:	2027d07a 	srai	r19,r4,1
   14af0:	a085883a 	add	r2,r20,r2
   14af4:	980d883a 	mov	r6,r19
   14af8:	9880022e 	bgeu	r19,r2,14b04 <__sfvwrite_r+0x170>
   14afc:	1027883a 	mov	r19,r2
   14b00:	100d883a 	mov	r6,r2
   14b04:	3881000c 	andi	r2,r7,1024
   14b08:	1000b826 	beq	r2,zero,14dec <__sfvwrite_r+0x458>
   14b0c:	300b883a 	mov	r5,r6
   14b10:	e009883a 	mov	r4,fp
   14b14:	00152080 	call	15208 <_malloc_r>
   14b18:	10003126 	beq	r2,zero,14be0 <__sfvwrite_r+0x24c>
   14b1c:	91400417 	ldw	r5,16(r18)
   14b20:	1009883a 	mov	r4,r2
   14b24:	800d883a 	mov	r6,r16
   14b28:	1023883a 	mov	r17,r2
   14b2c:	0015a2c0 	call	15a2c <memcpy>
   14b30:	90c0030b 	ldhu	r3,12(r18)
   14b34:	00beffc4 	movi	r2,-1025
   14b38:	1886703a 	and	r3,r3,r2
   14b3c:	18c02014 	ori	r3,r3,128
   14b40:	90c0030d 	sth	r3,12(r18)
   14b44:	9c07c83a 	sub	r3,r19,r16
   14b48:	8c05883a 	add	r2,r17,r16
   14b4c:	a00d883a 	mov	r6,r20
   14b50:	a021883a 	mov	r16,r20
   14b54:	90800015 	stw	r2,0(r18)
   14b58:	90c00215 	stw	r3,8(r18)
   14b5c:	94400415 	stw	r17,16(r18)
   14b60:	94c00515 	stw	r19,20(r18)
   14b64:	91000017 	ldw	r4,0(r18)
   14b68:	b80b883a 	mov	r5,r23
   14b6c:	a023883a 	mov	r17,r20
   14b70:	0015acc0 	call	15acc <memmove>
   14b74:	90c00217 	ldw	r3,8(r18)
   14b78:	90800017 	ldw	r2,0(r18)
   14b7c:	a027883a 	mov	r19,r20
   14b80:	1c07c83a 	sub	r3,r3,r16
   14b84:	1405883a 	add	r2,r2,r16
   14b88:	90c00215 	stw	r3,8(r18)
   14b8c:	a021883a 	mov	r16,r20
   14b90:	90800015 	stw	r2,0(r18)
   14b94:	b0800217 	ldw	r2,8(r22)
   14b98:	1405c83a 	sub	r2,r2,r16
   14b9c:	b0800215 	stw	r2,8(r22)
   14ba0:	103fa826 	beq	r2,zero,14a44 <__sfvwrite_r+0xb0>
   14ba4:	a469c83a 	sub	r20,r20,r17
   14ba8:	91c0030b 	ldhu	r7,12(r18)
   14bac:	bcef883a 	add	r23,r23,r19
   14bb0:	a03fbe1e 	bne	r20,zero,14aac <__sfvwrite_r+0x118>
   14bb4:	adc00017 	ldw	r23,0(r21)
   14bb8:	ad000117 	ldw	r20,4(r21)
   14bbc:	ad400204 	addi	r21,r21,8
   14bc0:	003fb906 	br	14aa8 <__sfvwrite_r+0x114>
   14bc4:	ac400017 	ldw	r17,0(r21)
   14bc8:	ac000117 	ldw	r16,4(r21)
   14bcc:	ad400204 	addi	r21,r21,8
   14bd0:	003f8a06 	br	149fc <__sfvwrite_r+0x68>
   14bd4:	91400417 	ldw	r5,16(r18)
   14bd8:	e009883a 	mov	r4,fp
   14bdc:	00146800 	call	14680 <_free_r>
   14be0:	00800304 	movi	r2,12
   14be4:	e0800015 	stw	r2,0(fp)
   14be8:	9080030b 	ldhu	r2,12(r18)
   14bec:	013fffc4 	movi	r4,-1
   14bf0:	10801014 	ori	r2,r2,64
   14bf4:	9080030d 	sth	r2,12(r18)
   14bf8:	003f9306 	br	14a48 <__sfvwrite_r+0xb4>
   14bfc:	0027883a 	mov	r19,zero
   14c00:	002f883a 	mov	r23,zero
   14c04:	d8000015 	stw	zero,0(sp)
   14c08:	0029883a 	mov	r20,zero
   14c0c:	98001e26 	beq	r19,zero,14c88 <__sfvwrite_r+0x2f4>
   14c10:	d8c00017 	ldw	r3,0(sp)
   14c14:	1804c03a 	cmpne	r2,r3,zero
   14c18:	10005e26 	beq	r2,zero,14d94 <__sfvwrite_r+0x400>
   14c1c:	9821883a 	mov	r16,r19
   14c20:	a4c0012e 	bgeu	r20,r19,14c28 <__sfvwrite_r+0x294>
   14c24:	a021883a 	mov	r16,r20
   14c28:	91000017 	ldw	r4,0(r18)
   14c2c:	90800417 	ldw	r2,16(r18)
   14c30:	91800217 	ldw	r6,8(r18)
   14c34:	91c00517 	ldw	r7,20(r18)
   14c38:	1100022e 	bgeu	r2,r4,14c44 <__sfvwrite_r+0x2b0>
   14c3c:	31e3883a 	add	r17,r6,r7
   14c40:	8c001616 	blt	r17,r16,14c9c <__sfvwrite_r+0x308>
   14c44:	81c03816 	blt	r16,r7,14d28 <__sfvwrite_r+0x394>
   14c48:	90c00917 	ldw	r3,36(r18)
   14c4c:	91400717 	ldw	r5,28(r18)
   14c50:	e009883a 	mov	r4,fp
   14c54:	b80d883a 	mov	r6,r23
   14c58:	183ee83a 	callr	r3
   14c5c:	1023883a 	mov	r17,r2
   14c60:	00bfe10e 	bge	zero,r2,14be8 <__sfvwrite_r+0x254>
   14c64:	a469c83a 	sub	r20,r20,r17
   14c68:	a0001826 	beq	r20,zero,14ccc <__sfvwrite_r+0x338>
   14c6c:	b0800217 	ldw	r2,8(r22)
   14c70:	1445c83a 	sub	r2,r2,r17
   14c74:	b0800215 	stw	r2,8(r22)
   14c78:	103f7226 	beq	r2,zero,14a44 <__sfvwrite_r+0xb0>
   14c7c:	9c67c83a 	sub	r19,r19,r17
   14c80:	bc6f883a 	add	r23,r23,r17
   14c84:	983fe21e 	bne	r19,zero,14c10 <__sfvwrite_r+0x27c>
   14c88:	adc00017 	ldw	r23,0(r21)
   14c8c:	acc00117 	ldw	r19,4(r21)
   14c90:	ad400204 	addi	r21,r21,8
   14c94:	d8000015 	stw	zero,0(sp)
   14c98:	003fdc06 	br	14c0c <__sfvwrite_r+0x278>
   14c9c:	b80b883a 	mov	r5,r23
   14ca0:	880d883a 	mov	r6,r17
   14ca4:	0015acc0 	call	15acc <memmove>
   14ca8:	90c00017 	ldw	r3,0(r18)
   14cac:	e009883a 	mov	r4,fp
   14cb0:	900b883a 	mov	r5,r18
   14cb4:	1c47883a 	add	r3,r3,r17
   14cb8:	90c00015 	stw	r3,0(r18)
   14cbc:	00140640 	call	14064 <_fflush_r>
   14cc0:	103fc91e 	bne	r2,zero,14be8 <__sfvwrite_r+0x254>
   14cc4:	a469c83a 	sub	r20,r20,r17
   14cc8:	a03fe81e 	bne	r20,zero,14c6c <__sfvwrite_r+0x2d8>
   14ccc:	e009883a 	mov	r4,fp
   14cd0:	900b883a 	mov	r5,r18
   14cd4:	00140640 	call	14064 <_fflush_r>
   14cd8:	103fc31e 	bne	r2,zero,14be8 <__sfvwrite_r+0x254>
   14cdc:	d8000015 	stw	zero,0(sp)
   14ce0:	003fe206 	br	14c6c <__sfvwrite_r+0x2d8>
   14ce4:	91000017 	ldw	r4,0(r18)
   14ce8:	90800417 	ldw	r2,16(r18)
   14cec:	1100022e 	bgeu	r2,r4,14cf8 <__sfvwrite_r+0x364>
   14cf0:	8023883a 	mov	r17,r16
   14cf4:	85003136 	bltu	r16,r20,14dbc <__sfvwrite_r+0x428>
   14cf8:	91c00517 	ldw	r7,20(r18)
   14cfc:	a1c01836 	bltu	r20,r7,14d60 <__sfvwrite_r+0x3cc>
   14d00:	90c00917 	ldw	r3,36(r18)
   14d04:	91400717 	ldw	r5,28(r18)
   14d08:	e009883a 	mov	r4,fp
   14d0c:	b80d883a 	mov	r6,r23
   14d10:	183ee83a 	callr	r3
   14d14:	1021883a 	mov	r16,r2
   14d18:	00bfb30e 	bge	zero,r2,14be8 <__sfvwrite_r+0x254>
   14d1c:	1023883a 	mov	r17,r2
   14d20:	1027883a 	mov	r19,r2
   14d24:	003f9b06 	br	14b94 <__sfvwrite_r+0x200>
   14d28:	b80b883a 	mov	r5,r23
   14d2c:	800d883a 	mov	r6,r16
   14d30:	0015acc0 	call	15acc <memmove>
   14d34:	90c00217 	ldw	r3,8(r18)
   14d38:	90800017 	ldw	r2,0(r18)
   14d3c:	8023883a 	mov	r17,r16
   14d40:	1c07c83a 	sub	r3,r3,r16
   14d44:	1405883a 	add	r2,r2,r16
   14d48:	90c00215 	stw	r3,8(r18)
   14d4c:	90800015 	stw	r2,0(r18)
   14d50:	003fc406 	br	14c64 <__sfvwrite_r+0x2d0>
   14d54:	a00d883a 	mov	r6,r20
   14d58:	a021883a 	mov	r16,r20
   14d5c:	003f8106 	br	14b64 <__sfvwrite_r+0x1d0>
   14d60:	b80b883a 	mov	r5,r23
   14d64:	a00d883a 	mov	r6,r20
   14d68:	0015acc0 	call	15acc <memmove>
   14d6c:	90c00217 	ldw	r3,8(r18)
   14d70:	90800017 	ldw	r2,0(r18)
   14d74:	a021883a 	mov	r16,r20
   14d78:	1d07c83a 	sub	r3,r3,r20
   14d7c:	1505883a 	add	r2,r2,r20
   14d80:	a023883a 	mov	r17,r20
   14d84:	a027883a 	mov	r19,r20
   14d88:	90c00215 	stw	r3,8(r18)
   14d8c:	90800015 	stw	r2,0(r18)
   14d90:	003f8006 	br	14b94 <__sfvwrite_r+0x200>
   14d94:	b809883a 	mov	r4,r23
   14d98:	01400284 	movi	r5,10
   14d9c:	980d883a 	mov	r6,r19
   14da0:	00159480 	call	15948 <memchr>
   14da4:	10001726 	beq	r2,zero,14e04 <__sfvwrite_r+0x470>
   14da8:	15c5c83a 	sub	r2,r2,r23
   14dac:	15000044 	addi	r20,r2,1
   14db0:	00800044 	movi	r2,1
   14db4:	d8800015 	stw	r2,0(sp)
   14db8:	003f9806 	br	14c1c <__sfvwrite_r+0x288>
   14dbc:	b80b883a 	mov	r5,r23
   14dc0:	800d883a 	mov	r6,r16
   14dc4:	0015acc0 	call	15acc <memmove>
   14dc8:	90c00017 	ldw	r3,0(r18)
   14dcc:	e009883a 	mov	r4,fp
   14dd0:	900b883a 	mov	r5,r18
   14dd4:	1c07883a 	add	r3,r3,r16
   14dd8:	90c00015 	stw	r3,0(r18)
   14ddc:	8027883a 	mov	r19,r16
   14de0:	00140640 	call	14064 <_fflush_r>
   14de4:	103f6b26 	beq	r2,zero,14b94 <__sfvwrite_r+0x200>
   14de8:	003f7f06 	br	14be8 <__sfvwrite_r+0x254>
   14dec:	400b883a 	mov	r5,r8
   14df0:	e009883a 	mov	r4,fp
   14df4:	0016c380 	call	16c38 <_realloc_r>
   14df8:	103f7626 	beq	r2,zero,14bd4 <__sfvwrite_r+0x240>
   14dfc:	1023883a 	mov	r17,r2
   14e00:	003f5006 	br	14b44 <__sfvwrite_r+0x1b0>
   14e04:	00c00044 	movi	r3,1
   14e08:	9d000044 	addi	r20,r19,1
   14e0c:	d8c00015 	stw	r3,0(sp)
   14e10:	003f8206 	br	14c1c <__sfvwrite_r+0x288>
   14e14:	9080030b 	ldhu	r2,12(r18)
   14e18:	00c00244 	movi	r3,9
   14e1c:	013fffc4 	movi	r4,-1
   14e20:	10801014 	ori	r2,r2,64
   14e24:	9080030d 	sth	r2,12(r18)
   14e28:	e0c00015 	stw	r3,0(fp)
   14e2c:	003f0606 	br	14a48 <__sfvwrite_r+0xb4>

00014e30 <_fwalk_reent>:
   14e30:	defff704 	addi	sp,sp,-36
   14e34:	dcc00315 	stw	r19,12(sp)
   14e38:	24c0b804 	addi	r19,r4,736
   14e3c:	dd800615 	stw	r22,24(sp)
   14e40:	dd400515 	stw	r21,20(sp)
   14e44:	dfc00815 	stw	ra,32(sp)
   14e48:	ddc00715 	stw	r23,28(sp)
   14e4c:	dd000415 	stw	r20,16(sp)
   14e50:	dc800215 	stw	r18,8(sp)
   14e54:	dc400115 	stw	r17,4(sp)
   14e58:	dc000015 	stw	r16,0(sp)
   14e5c:	202b883a 	mov	r21,r4
   14e60:	282d883a 	mov	r22,r5
   14e64:	00142ec0 	call	142ec <__sfp_lock_acquire>
   14e68:	98002126 	beq	r19,zero,14ef0 <_fwalk_reent+0xc0>
   14e6c:	002f883a 	mov	r23,zero
   14e70:	9c800117 	ldw	r18,4(r19)
   14e74:	9c000217 	ldw	r16,8(r19)
   14e78:	90bfffc4 	addi	r2,r18,-1
   14e7c:	10000d16 	blt	r2,zero,14eb4 <_fwalk_reent+0x84>
   14e80:	0023883a 	mov	r17,zero
   14e84:	053fffc4 	movi	r20,-1
   14e88:	8080030f 	ldh	r2,12(r16)
   14e8c:	8c400044 	addi	r17,r17,1
   14e90:	10000626 	beq	r2,zero,14eac <_fwalk_reent+0x7c>
   14e94:	8080038f 	ldh	r2,14(r16)
   14e98:	800b883a 	mov	r5,r16
   14e9c:	a809883a 	mov	r4,r21
   14ea0:	15000226 	beq	r2,r20,14eac <_fwalk_reent+0x7c>
   14ea4:	b03ee83a 	callr	r22
   14ea8:	b8aeb03a 	or	r23,r23,r2
   14eac:	84001704 	addi	r16,r16,92
   14eb0:	947ff51e 	bne	r18,r17,14e88 <_fwalk_reent+0x58>
   14eb4:	9cc00017 	ldw	r19,0(r19)
   14eb8:	983fed1e 	bne	r19,zero,14e70 <_fwalk_reent+0x40>
   14ebc:	00142f00 	call	142f0 <__sfp_lock_release>
   14ec0:	b805883a 	mov	r2,r23
   14ec4:	dfc00817 	ldw	ra,32(sp)
   14ec8:	ddc00717 	ldw	r23,28(sp)
   14ecc:	dd800617 	ldw	r22,24(sp)
   14ed0:	dd400517 	ldw	r21,20(sp)
   14ed4:	dd000417 	ldw	r20,16(sp)
   14ed8:	dcc00317 	ldw	r19,12(sp)
   14edc:	dc800217 	ldw	r18,8(sp)
   14ee0:	dc400117 	ldw	r17,4(sp)
   14ee4:	dc000017 	ldw	r16,0(sp)
   14ee8:	dec00904 	addi	sp,sp,36
   14eec:	f800283a 	ret
   14ef0:	002f883a 	mov	r23,zero
   14ef4:	003ff106 	br	14ebc <_fwalk_reent+0x8c>

00014ef8 <_fwalk>:
   14ef8:	defff804 	addi	sp,sp,-32
   14efc:	dcc00315 	stw	r19,12(sp)
   14f00:	24c0b804 	addi	r19,r4,736
   14f04:	dd400515 	stw	r21,20(sp)
   14f08:	dfc00715 	stw	ra,28(sp)
   14f0c:	dd800615 	stw	r22,24(sp)
   14f10:	dd000415 	stw	r20,16(sp)
   14f14:	dc800215 	stw	r18,8(sp)
   14f18:	dc400115 	stw	r17,4(sp)
   14f1c:	dc000015 	stw	r16,0(sp)
   14f20:	282b883a 	mov	r21,r5
   14f24:	00142ec0 	call	142ec <__sfp_lock_acquire>
   14f28:	98001f26 	beq	r19,zero,14fa8 <_fwalk+0xb0>
   14f2c:	002d883a 	mov	r22,zero
   14f30:	9c800117 	ldw	r18,4(r19)
   14f34:	9c000217 	ldw	r16,8(r19)
   14f38:	90bfffc4 	addi	r2,r18,-1
   14f3c:	10000c16 	blt	r2,zero,14f70 <_fwalk+0x78>
   14f40:	0023883a 	mov	r17,zero
   14f44:	053fffc4 	movi	r20,-1
   14f48:	8080030f 	ldh	r2,12(r16)
   14f4c:	8c400044 	addi	r17,r17,1
   14f50:	10000526 	beq	r2,zero,14f68 <_fwalk+0x70>
   14f54:	8080038f 	ldh	r2,14(r16)
   14f58:	8009883a 	mov	r4,r16
   14f5c:	15000226 	beq	r2,r20,14f68 <_fwalk+0x70>
   14f60:	a83ee83a 	callr	r21
   14f64:	b0acb03a 	or	r22,r22,r2
   14f68:	84001704 	addi	r16,r16,92
   14f6c:	947ff61e 	bne	r18,r17,14f48 <_fwalk+0x50>
   14f70:	9cc00017 	ldw	r19,0(r19)
   14f74:	983fee1e 	bne	r19,zero,14f30 <_fwalk+0x38>
   14f78:	00142f00 	call	142f0 <__sfp_lock_release>
   14f7c:	b005883a 	mov	r2,r22
   14f80:	dfc00717 	ldw	ra,28(sp)
   14f84:	dd800617 	ldw	r22,24(sp)
   14f88:	dd400517 	ldw	r21,20(sp)
   14f8c:	dd000417 	ldw	r20,16(sp)
   14f90:	dcc00317 	ldw	r19,12(sp)
   14f94:	dc800217 	ldw	r18,8(sp)
   14f98:	dc400117 	ldw	r17,4(sp)
   14f9c:	dc000017 	ldw	r16,0(sp)
   14fa0:	dec00804 	addi	sp,sp,32
   14fa4:	f800283a 	ret
   14fa8:	002d883a 	mov	r22,zero
   14fac:	003ff206 	br	14f78 <_fwalk+0x80>

00014fb0 <__locale_charset>:
   14fb0:	d0a00317 	ldw	r2,-32756(gp)
   14fb4:	f800283a 	ret

00014fb8 <_localeconv_r>:
   14fb8:	008000f4 	movhi	r2,3
   14fbc:	10a07004 	addi	r2,r2,-32320
   14fc0:	f800283a 	ret

00014fc4 <localeconv>:
   14fc4:	008000f4 	movhi	r2,3
   14fc8:	10a79e04 	addi	r2,r2,-24968
   14fcc:	11000017 	ldw	r4,0(r2)
   14fd0:	0014fb81 	jmpi	14fb8 <_localeconv_r>

00014fd4 <_setlocale_r>:
   14fd4:	defffc04 	addi	sp,sp,-16
   14fd8:	00c000f4 	movhi	r3,3
   14fdc:	18e06b04 	addi	r3,r3,-32340
   14fe0:	dc800215 	stw	r18,8(sp)
   14fe4:	dc400115 	stw	r17,4(sp)
   14fe8:	dc000015 	stw	r16,0(sp)
   14fec:	2023883a 	mov	r17,r4
   14ff0:	2825883a 	mov	r18,r5
   14ff4:	dfc00315 	stw	ra,12(sp)
   14ff8:	3021883a 	mov	r16,r6
   14ffc:	3009883a 	mov	r4,r6
   15000:	180b883a 	mov	r5,r3
   15004:	30000926 	beq	r6,zero,1502c <_setlocale_r+0x58>
   15008:	00174580 	call	17458 <strcmp>
   1500c:	8009883a 	mov	r4,r16
   15010:	014000f4 	movhi	r5,3
   15014:	29605604 	addi	r5,r5,-32424
   15018:	10000b1e 	bne	r2,zero,15048 <_setlocale_r+0x74>
   1501c:	8c000d15 	stw	r16,52(r17)
   15020:	8c800c15 	stw	r18,48(r17)
   15024:	00c000f4 	movhi	r3,3
   15028:	18e06b04 	addi	r3,r3,-32340
   1502c:	1805883a 	mov	r2,r3
   15030:	dfc00317 	ldw	ra,12(sp)
   15034:	dc800217 	ldw	r18,8(sp)
   15038:	dc400117 	ldw	r17,4(sp)
   1503c:	dc000017 	ldw	r16,0(sp)
   15040:	dec00404 	addi	sp,sp,16
   15044:	f800283a 	ret
   15048:	00174580 	call	17458 <strcmp>
   1504c:	0007883a 	mov	r3,zero
   15050:	103ff226 	beq	r2,zero,1501c <_setlocale_r+0x48>
   15054:	003ff506 	br	1502c <_setlocale_r+0x58>

00015058 <setlocale>:
   15058:	018000f4 	movhi	r6,3
   1505c:	31a79e04 	addi	r6,r6,-24968
   15060:	2007883a 	mov	r3,r4
   15064:	31000017 	ldw	r4,0(r6)
   15068:	280d883a 	mov	r6,r5
   1506c:	180b883a 	mov	r5,r3
   15070:	0014fd41 	jmpi	14fd4 <_setlocale_r>

00015074 <__smakebuf_r>:
   15074:	2880030b 	ldhu	r2,12(r5)
   15078:	deffed04 	addi	sp,sp,-76
   1507c:	dc401015 	stw	r17,64(sp)
   15080:	1080008c 	andi	r2,r2,2
   15084:	dc000f15 	stw	r16,60(sp)
   15088:	dfc01215 	stw	ra,72(sp)
   1508c:	dc801115 	stw	r18,68(sp)
   15090:	2821883a 	mov	r16,r5
   15094:	2023883a 	mov	r17,r4
   15098:	10000b26 	beq	r2,zero,150c8 <__smakebuf_r+0x54>
   1509c:	28c010c4 	addi	r3,r5,67
   150a0:	00800044 	movi	r2,1
   150a4:	28800515 	stw	r2,20(r5)
   150a8:	28c00415 	stw	r3,16(r5)
   150ac:	28c00015 	stw	r3,0(r5)
   150b0:	dfc01217 	ldw	ra,72(sp)
   150b4:	dc801117 	ldw	r18,68(sp)
   150b8:	dc401017 	ldw	r17,64(sp)
   150bc:	dc000f17 	ldw	r16,60(sp)
   150c0:	dec01304 	addi	sp,sp,76
   150c4:	f800283a 	ret
   150c8:	2940038f 	ldh	r5,14(r5)
   150cc:	28002116 	blt	r5,zero,15154 <__smakebuf_r+0xe0>
   150d0:	d80d883a 	mov	r6,sp
   150d4:	00177d40 	call	177d4 <_fstat_r>
   150d8:	10001e16 	blt	r2,zero,15154 <__smakebuf_r+0xe0>
   150dc:	d8800117 	ldw	r2,4(sp)
   150e0:	00e00014 	movui	r3,32768
   150e4:	113c000c 	andi	r4,r2,61440
   150e8:	20c03126 	beq	r4,r3,151b0 <__smakebuf_r+0x13c>
   150ec:	8080030b 	ldhu	r2,12(r16)
   150f0:	00c80004 	movi	r3,8192
   150f4:	10820014 	ori	r2,r2,2048
   150f8:	8080030d 	sth	r2,12(r16)
   150fc:	20c01e26 	beq	r4,r3,15178 <__smakebuf_r+0x104>
   15100:	04810004 	movi	r18,1024
   15104:	8809883a 	mov	r4,r17
   15108:	900b883a 	mov	r5,r18
   1510c:	00152080 	call	15208 <_malloc_r>
   15110:	1009883a 	mov	r4,r2
   15114:	10003126 	beq	r2,zero,151dc <__smakebuf_r+0x168>
   15118:	80c0030b 	ldhu	r3,12(r16)
   1511c:	00800074 	movhi	r2,1
   15120:	1090f804 	addi	r2,r2,17376
   15124:	88800f15 	stw	r2,60(r17)
   15128:	18c02014 	ori	r3,r3,128
   1512c:	84800515 	stw	r18,20(r16)
   15130:	80c0030d 	sth	r3,12(r16)
   15134:	81000415 	stw	r4,16(r16)
   15138:	81000015 	stw	r4,0(r16)
   1513c:	dfc01217 	ldw	ra,72(sp)
   15140:	dc801117 	ldw	r18,68(sp)
   15144:	dc401017 	ldw	r17,64(sp)
   15148:	dc000f17 	ldw	r16,60(sp)
   1514c:	dec01304 	addi	sp,sp,76
   15150:	f800283a 	ret
   15154:	80c0030b 	ldhu	r3,12(r16)
   15158:	1880200c 	andi	r2,r3,128
   1515c:	10000426 	beq	r2,zero,15170 <__smakebuf_r+0xfc>
   15160:	04801004 	movi	r18,64
   15164:	18820014 	ori	r2,r3,2048
   15168:	8080030d 	sth	r2,12(r16)
   1516c:	003fe506 	br	15104 <__smakebuf_r+0x90>
   15170:	04810004 	movi	r18,1024
   15174:	003ffb06 	br	15164 <__smakebuf_r+0xf0>
   15178:	8140038f 	ldh	r5,14(r16)
   1517c:	8809883a 	mov	r4,r17
   15180:	00178480 	call	17848 <_isatty_r>
   15184:	103fde26 	beq	r2,zero,15100 <__smakebuf_r+0x8c>
   15188:	8080030b 	ldhu	r2,12(r16)
   1518c:	80c010c4 	addi	r3,r16,67
   15190:	04810004 	movi	r18,1024
   15194:	10800054 	ori	r2,r2,1
   15198:	8080030d 	sth	r2,12(r16)
   1519c:	00800044 	movi	r2,1
   151a0:	80c00415 	stw	r3,16(r16)
   151a4:	80800515 	stw	r2,20(r16)
   151a8:	80c00015 	stw	r3,0(r16)
   151ac:	003fd506 	br	15104 <__smakebuf_r+0x90>
   151b0:	80c00a17 	ldw	r3,40(r16)
   151b4:	00800074 	movhi	r2,1
   151b8:	109cc504 	addi	r2,r2,29460
   151bc:	18bfcb1e 	bne	r3,r2,150ec <__smakebuf_r+0x78>
   151c0:	8080030b 	ldhu	r2,12(r16)
   151c4:	00c10004 	movi	r3,1024
   151c8:	1825883a 	mov	r18,r3
   151cc:	10c4b03a 	or	r2,r2,r3
   151d0:	8080030d 	sth	r2,12(r16)
   151d4:	80c01315 	stw	r3,76(r16)
   151d8:	003fca06 	br	15104 <__smakebuf_r+0x90>
   151dc:	8100030b 	ldhu	r4,12(r16)
   151e0:	2080800c 	andi	r2,r4,512
   151e4:	103fb21e 	bne	r2,zero,150b0 <__smakebuf_r+0x3c>
   151e8:	80c010c4 	addi	r3,r16,67
   151ec:	21000094 	ori	r4,r4,2
   151f0:	00800044 	movi	r2,1
   151f4:	80800515 	stw	r2,20(r16)
   151f8:	8100030d 	sth	r4,12(r16)
   151fc:	80c00415 	stw	r3,16(r16)
   15200:	80c00015 	stw	r3,0(r16)
   15204:	003faa06 	br	150b0 <__smakebuf_r+0x3c>

00015208 <_malloc_r>:
   15208:	defff604 	addi	sp,sp,-40
   1520c:	28c002c4 	addi	r3,r5,11
   15210:	00800584 	movi	r2,22
   15214:	dc800215 	stw	r18,8(sp)
   15218:	dfc00915 	stw	ra,36(sp)
   1521c:	df000815 	stw	fp,32(sp)
   15220:	ddc00715 	stw	r23,28(sp)
   15224:	dd800615 	stw	r22,24(sp)
   15228:	dd400515 	stw	r21,20(sp)
   1522c:	dd000415 	stw	r20,16(sp)
   15230:	dcc00315 	stw	r19,12(sp)
   15234:	dc400115 	stw	r17,4(sp)
   15238:	dc000015 	stw	r16,0(sp)
   1523c:	2025883a 	mov	r18,r4
   15240:	10c01236 	bltu	r2,r3,1528c <_malloc_r+0x84>
   15244:	04400404 	movi	r17,16
   15248:	8940142e 	bgeu	r17,r5,1529c <_malloc_r+0x94>
   1524c:	00800304 	movi	r2,12
   15250:	0007883a 	mov	r3,zero
   15254:	90800015 	stw	r2,0(r18)
   15258:	1805883a 	mov	r2,r3
   1525c:	dfc00917 	ldw	ra,36(sp)
   15260:	df000817 	ldw	fp,32(sp)
   15264:	ddc00717 	ldw	r23,28(sp)
   15268:	dd800617 	ldw	r22,24(sp)
   1526c:	dd400517 	ldw	r21,20(sp)
   15270:	dd000417 	ldw	r20,16(sp)
   15274:	dcc00317 	ldw	r19,12(sp)
   15278:	dc800217 	ldw	r18,8(sp)
   1527c:	dc400117 	ldw	r17,4(sp)
   15280:	dc000017 	ldw	r16,0(sp)
   15284:	dec00a04 	addi	sp,sp,40
   15288:	f800283a 	ret
   1528c:	00bffe04 	movi	r2,-8
   15290:	18a2703a 	and	r17,r3,r2
   15294:	883fed16 	blt	r17,zero,1524c <_malloc_r+0x44>
   15298:	897fec36 	bltu	r17,r5,1524c <_malloc_r+0x44>
   1529c:	9009883a 	mov	r4,r18
   152a0:	001a3100 	call	1a310 <__malloc_lock>
   152a4:	00807dc4 	movi	r2,503
   152a8:	14402b2e 	bgeu	r2,r17,15358 <_malloc_r+0x150>
   152ac:	8806d27a 	srli	r3,r17,9
   152b0:	18003f1e 	bne	r3,zero,153b0 <_malloc_r+0x1a8>
   152b4:	880cd0fa 	srli	r6,r17,3
   152b8:	300490fa 	slli	r2,r6,3
   152bc:	02c000f4 	movhi	r11,3
   152c0:	5ae21a04 	addi	r11,r11,-30616
   152c4:	12cb883a 	add	r5,r2,r11
   152c8:	2c000317 	ldw	r16,12(r5)
   152cc:	580f883a 	mov	r7,r11
   152d0:	2c00041e 	bne	r5,r16,152e4 <_malloc_r+0xdc>
   152d4:	00000a06 	br	15300 <_malloc_r+0xf8>
   152d8:	1800860e 	bge	r3,zero,154f4 <_malloc_r+0x2ec>
   152dc:	84000317 	ldw	r16,12(r16)
   152e0:	2c000726 	beq	r5,r16,15300 <_malloc_r+0xf8>
   152e4:	80800117 	ldw	r2,4(r16)
   152e8:	00ffff04 	movi	r3,-4
   152ec:	10c8703a 	and	r4,r2,r3
   152f0:	2447c83a 	sub	r3,r4,r17
   152f4:	008003c4 	movi	r2,15
   152f8:	10fff70e 	bge	r2,r3,152d8 <_malloc_r+0xd0>
   152fc:	31bfffc4 	addi	r6,r6,-1
   15300:	32400044 	addi	r9,r6,1
   15304:	028000f4 	movhi	r10,3
   15308:	52a21c04 	addi	r10,r10,-30608
   1530c:	54000217 	ldw	r16,8(r10)
   15310:	8280a026 	beq	r16,r10,15594 <_malloc_r+0x38c>
   15314:	80800117 	ldw	r2,4(r16)
   15318:	00ffff04 	movi	r3,-4
   1531c:	10ca703a 	and	r5,r2,r3
   15320:	2c4dc83a 	sub	r6,r5,r17
   15324:	008003c4 	movi	r2,15
   15328:	11808316 	blt	r2,r6,15538 <_malloc_r+0x330>
   1532c:	52800315 	stw	r10,12(r10)
   15330:	52800215 	stw	r10,8(r10)
   15334:	30002916 	blt	r6,zero,153dc <_malloc_r+0x1d4>
   15338:	8147883a 	add	r3,r16,r5
   1533c:	18800117 	ldw	r2,4(r3)
   15340:	9009883a 	mov	r4,r18
   15344:	10800054 	ori	r2,r2,1
   15348:	18800115 	stw	r2,4(r3)
   1534c:	001a3300 	call	1a330 <__malloc_unlock>
   15350:	80c00204 	addi	r3,r16,8
   15354:	003fc006 	br	15258 <_malloc_r+0x50>
   15358:	02c000f4 	movhi	r11,3
   1535c:	5ae21a04 	addi	r11,r11,-30616
   15360:	8ac5883a 	add	r2,r17,r11
   15364:	14000317 	ldw	r16,12(r2)
   15368:	580f883a 	mov	r7,r11
   1536c:	8806d0fa 	srli	r3,r17,3
   15370:	14006c26 	beq	r2,r16,15524 <_malloc_r+0x31c>
   15374:	80c00117 	ldw	r3,4(r16)
   15378:	00bfff04 	movi	r2,-4
   1537c:	81800317 	ldw	r6,12(r16)
   15380:	1886703a 	and	r3,r3,r2
   15384:	80c7883a 	add	r3,r16,r3
   15388:	18800117 	ldw	r2,4(r3)
   1538c:	81400217 	ldw	r5,8(r16)
   15390:	9009883a 	mov	r4,r18
   15394:	10800054 	ori	r2,r2,1
   15398:	18800115 	stw	r2,4(r3)
   1539c:	31400215 	stw	r5,8(r6)
   153a0:	29800315 	stw	r6,12(r5)
   153a4:	001a3300 	call	1a330 <__malloc_unlock>
   153a8:	80c00204 	addi	r3,r16,8
   153ac:	003faa06 	br	15258 <_malloc_r+0x50>
   153b0:	00800104 	movi	r2,4
   153b4:	10c0052e 	bgeu	r2,r3,153cc <_malloc_r+0x1c4>
   153b8:	00800504 	movi	r2,20
   153bc:	10c07836 	bltu	r2,r3,155a0 <_malloc_r+0x398>
   153c0:	198016c4 	addi	r6,r3,91
   153c4:	300490fa 	slli	r2,r6,3
   153c8:	003fbc06 	br	152bc <_malloc_r+0xb4>
   153cc:	8804d1ba 	srli	r2,r17,6
   153d0:	11800e04 	addi	r6,r2,56
   153d4:	300490fa 	slli	r2,r6,3
   153d8:	003fb806 	br	152bc <_malloc_r+0xb4>
   153dc:	00807fc4 	movi	r2,511
   153e0:	1140bb36 	bltu	r2,r5,156d0 <_malloc_r+0x4c8>
   153e4:	2806d0fa 	srli	r3,r5,3
   153e8:	573ffe04 	addi	fp,r10,-8
   153ec:	00800044 	movi	r2,1
   153f0:	180890fa 	slli	r4,r3,3
   153f4:	1807d0ba 	srai	r3,r3,2
   153f8:	e1c00117 	ldw	r7,4(fp)
   153fc:	5909883a 	add	r4,r11,r4
   15400:	21400217 	ldw	r5,8(r4)
   15404:	10c4983a 	sll	r2,r2,r3
   15408:	81000315 	stw	r4,12(r16)
   1540c:	81400215 	stw	r5,8(r16)
   15410:	388eb03a 	or	r7,r7,r2
   15414:	2c000315 	stw	r16,12(r5)
   15418:	24000215 	stw	r16,8(r4)
   1541c:	e1c00115 	stw	r7,4(fp)
   15420:	4807883a 	mov	r3,r9
   15424:	4800cd16 	blt	r9,zero,1575c <_malloc_r+0x554>
   15428:	1807d0ba 	srai	r3,r3,2
   1542c:	00800044 	movi	r2,1
   15430:	10c8983a 	sll	r4,r2,r3
   15434:	39004436 	bltu	r7,r4,15548 <_malloc_r+0x340>
   15438:	21c4703a 	and	r2,r4,r7
   1543c:	10000a1e 	bne	r2,zero,15468 <_malloc_r+0x260>
   15440:	2109883a 	add	r4,r4,r4
   15444:	00bfff04 	movi	r2,-4
   15448:	4884703a 	and	r2,r9,r2
   1544c:	3906703a 	and	r3,r7,r4
   15450:	12400104 	addi	r9,r2,4
   15454:	1800041e 	bne	r3,zero,15468 <_malloc_r+0x260>
   15458:	2109883a 	add	r4,r4,r4
   1545c:	3904703a 	and	r2,r7,r4
   15460:	4a400104 	addi	r9,r9,4
   15464:	103ffc26 	beq	r2,zero,15458 <_malloc_r+0x250>
   15468:	480490fa 	slli	r2,r9,3
   1546c:	4819883a 	mov	r12,r9
   15470:	023fff04 	movi	r8,-4
   15474:	589b883a 	add	r13,r11,r2
   15478:	6807883a 	mov	r3,r13
   1547c:	014003c4 	movi	r5,15
   15480:	1c000317 	ldw	r16,12(r3)
   15484:	1c00041e 	bne	r3,r16,15498 <_malloc_r+0x290>
   15488:	0000a706 	br	15728 <_malloc_r+0x520>
   1548c:	3000ab0e 	bge	r6,zero,1573c <_malloc_r+0x534>
   15490:	84000317 	ldw	r16,12(r16)
   15494:	1c00a426 	beq	r3,r16,15728 <_malloc_r+0x520>
   15498:	80800117 	ldw	r2,4(r16)
   1549c:	1204703a 	and	r2,r2,r8
   154a0:	144dc83a 	sub	r6,r2,r17
   154a4:	29bff90e 	bge	r5,r6,1548c <_malloc_r+0x284>
   154a8:	81000317 	ldw	r4,12(r16)
   154ac:	80c00217 	ldw	r3,8(r16)
   154b0:	89400054 	ori	r5,r17,1
   154b4:	8445883a 	add	r2,r16,r17
   154b8:	20c00215 	stw	r3,8(r4)
   154bc:	19000315 	stw	r4,12(r3)
   154c0:	81400115 	stw	r5,4(r16)
   154c4:	1187883a 	add	r3,r2,r6
   154c8:	31000054 	ori	r4,r6,1
   154cc:	50800315 	stw	r2,12(r10)
   154d0:	50800215 	stw	r2,8(r10)
   154d4:	19800015 	stw	r6,0(r3)
   154d8:	11000115 	stw	r4,4(r2)
   154dc:	12800215 	stw	r10,8(r2)
   154e0:	12800315 	stw	r10,12(r2)
   154e4:	9009883a 	mov	r4,r18
   154e8:	001a3300 	call	1a330 <__malloc_unlock>
   154ec:	80c00204 	addi	r3,r16,8
   154f0:	003f5906 	br	15258 <_malloc_r+0x50>
   154f4:	8109883a 	add	r4,r16,r4
   154f8:	20800117 	ldw	r2,4(r4)
   154fc:	80c00217 	ldw	r3,8(r16)
   15500:	81400317 	ldw	r5,12(r16)
   15504:	10800054 	ori	r2,r2,1
   15508:	20800115 	stw	r2,4(r4)
   1550c:	28c00215 	stw	r3,8(r5)
   15510:	19400315 	stw	r5,12(r3)
   15514:	9009883a 	mov	r4,r18
   15518:	001a3300 	call	1a330 <__malloc_unlock>
   1551c:	80c00204 	addi	r3,r16,8
   15520:	003f4d06 	br	15258 <_malloc_r+0x50>
   15524:	80800204 	addi	r2,r16,8
   15528:	14000317 	ldw	r16,12(r2)
   1552c:	143f911e 	bne	r2,r16,15374 <_malloc_r+0x16c>
   15530:	1a400084 	addi	r9,r3,2
   15534:	003f7306 	br	15304 <_malloc_r+0xfc>
   15538:	88c00054 	ori	r3,r17,1
   1553c:	8445883a 	add	r2,r16,r17
   15540:	80c00115 	stw	r3,4(r16)
   15544:	003fdf06 	br	154c4 <_malloc_r+0x2bc>
   15548:	e4000217 	ldw	r16,8(fp)
   1554c:	00bfff04 	movi	r2,-4
   15550:	80c00117 	ldw	r3,4(r16)
   15554:	802d883a 	mov	r22,r16
   15558:	18aa703a 	and	r21,r3,r2
   1555c:	ac401636 	bltu	r21,r17,155b8 <_malloc_r+0x3b0>
   15560:	ac49c83a 	sub	r4,r21,r17
   15564:	008003c4 	movi	r2,15
   15568:	1100130e 	bge	r2,r4,155b8 <_malloc_r+0x3b0>
   1556c:	88800054 	ori	r2,r17,1
   15570:	8447883a 	add	r3,r16,r17
   15574:	80800115 	stw	r2,4(r16)
   15578:	20800054 	ori	r2,r4,1
   1557c:	18800115 	stw	r2,4(r3)
   15580:	e0c00215 	stw	r3,8(fp)
   15584:	9009883a 	mov	r4,r18
   15588:	001a3300 	call	1a330 <__malloc_unlock>
   1558c:	80c00204 	addi	r3,r16,8
   15590:	003f3106 	br	15258 <_malloc_r+0x50>
   15594:	39c00117 	ldw	r7,4(r7)
   15598:	573ffe04 	addi	fp,r10,-8
   1559c:	003fa006 	br	15420 <_malloc_r+0x218>
   155a0:	00801504 	movi	r2,84
   155a4:	10c06736 	bltu	r2,r3,15744 <_malloc_r+0x53c>
   155a8:	8804d33a 	srli	r2,r17,12
   155ac:	11801b84 	addi	r6,r2,110
   155b0:	300490fa 	slli	r2,r6,3
   155b4:	003f4106 	br	152bc <_malloc_r+0xb4>
   155b8:	d0a01817 	ldw	r2,-32672(gp)
   155bc:	d0e00517 	ldw	r3,-32748(gp)
   155c0:	053fffc4 	movi	r20,-1
   155c4:	10800404 	addi	r2,r2,16
   155c8:	88a7883a 	add	r19,r17,r2
   155cc:	1d000326 	beq	r3,r20,155dc <_malloc_r+0x3d4>
   155d0:	98c3ffc4 	addi	r3,r19,4095
   155d4:	00bc0004 	movi	r2,-4096
   155d8:	18a6703a 	and	r19,r3,r2
   155dc:	9009883a 	mov	r4,r18
   155e0:	980b883a 	mov	r5,r19
   155e4:	001729c0 	call	1729c <_sbrk_r>
   155e8:	1009883a 	mov	r4,r2
   155ec:	15000426 	beq	r2,r20,15600 <_malloc_r+0x3f8>
   155f0:	854b883a 	add	r5,r16,r21
   155f4:	1029883a 	mov	r20,r2
   155f8:	11405a2e 	bgeu	r2,r5,15764 <_malloc_r+0x55c>
   155fc:	87000c26 	beq	r16,fp,15630 <_malloc_r+0x428>
   15600:	e4000217 	ldw	r16,8(fp)
   15604:	80c00117 	ldw	r3,4(r16)
   15608:	00bfff04 	movi	r2,-4
   1560c:	1884703a 	and	r2,r3,r2
   15610:	14400336 	bltu	r2,r17,15620 <_malloc_r+0x418>
   15614:	1449c83a 	sub	r4,r2,r17
   15618:	008003c4 	movi	r2,15
   1561c:	113fd316 	blt	r2,r4,1556c <_malloc_r+0x364>
   15620:	9009883a 	mov	r4,r18
   15624:	001a3300 	call	1a330 <__malloc_unlock>
   15628:	0007883a 	mov	r3,zero
   1562c:	003f0a06 	br	15258 <_malloc_r+0x50>
   15630:	05c000f4 	movhi	r23,3
   15634:	bde7c204 	addi	r23,r23,-24824
   15638:	b8800017 	ldw	r2,0(r23)
   1563c:	988d883a 	add	r6,r19,r2
   15640:	b9800015 	stw	r6,0(r23)
   15644:	d0e00517 	ldw	r3,-32748(gp)
   15648:	00bfffc4 	movi	r2,-1
   1564c:	18808e26 	beq	r3,r2,15888 <_malloc_r+0x680>
   15650:	2145c83a 	sub	r2,r4,r5
   15654:	3085883a 	add	r2,r6,r2
   15658:	b8800015 	stw	r2,0(r23)
   1565c:	20c001cc 	andi	r3,r4,7
   15660:	18005f1e 	bne	r3,zero,157e0 <_malloc_r+0x5d8>
   15664:	000b883a 	mov	r5,zero
   15668:	a4c5883a 	add	r2,r20,r19
   1566c:	1083ffcc 	andi	r2,r2,4095
   15670:	00c40004 	movi	r3,4096
   15674:	1887c83a 	sub	r3,r3,r2
   15678:	28e7883a 	add	r19,r5,r3
   1567c:	9009883a 	mov	r4,r18
   15680:	980b883a 	mov	r5,r19
   15684:	001729c0 	call	1729c <_sbrk_r>
   15688:	1007883a 	mov	r3,r2
   1568c:	00bfffc4 	movi	r2,-1
   15690:	18807a26 	beq	r3,r2,1587c <_malloc_r+0x674>
   15694:	1d05c83a 	sub	r2,r3,r20
   15698:	9885883a 	add	r2,r19,r2
   1569c:	10c00054 	ori	r3,r2,1
   156a0:	b8800017 	ldw	r2,0(r23)
   156a4:	a021883a 	mov	r16,r20
   156a8:	a0c00115 	stw	r3,4(r20)
   156ac:	9885883a 	add	r2,r19,r2
   156b0:	b8800015 	stw	r2,0(r23)
   156b4:	e5000215 	stw	r20,8(fp)
   156b8:	b7003626 	beq	r22,fp,15794 <_malloc_r+0x58c>
   156bc:	018003c4 	movi	r6,15
   156c0:	35404b36 	bltu	r6,r21,157f0 <_malloc_r+0x5e8>
   156c4:	00800044 	movi	r2,1
   156c8:	a0800115 	stw	r2,4(r20)
   156cc:	003fcd06 	br	15604 <_malloc_r+0x3fc>
   156d0:	2808d27a 	srli	r4,r5,9
   156d4:	2000371e 	bne	r4,zero,157b4 <_malloc_r+0x5ac>
   156d8:	2808d0fa 	srli	r4,r5,3
   156dc:	200690fa 	slli	r3,r4,3
   156e0:	1ad1883a 	add	r8,r3,r11
   156e4:	41800217 	ldw	r6,8(r8)
   156e8:	41805b26 	beq	r8,r6,15858 <_malloc_r+0x650>
   156ec:	30800117 	ldw	r2,4(r6)
   156f0:	00ffff04 	movi	r3,-4
   156f4:	10c4703a 	and	r2,r2,r3
   156f8:	2880022e 	bgeu	r5,r2,15704 <_malloc_r+0x4fc>
   156fc:	31800217 	ldw	r6,8(r6)
   15700:	41bffa1e 	bne	r8,r6,156ec <_malloc_r+0x4e4>
   15704:	32000317 	ldw	r8,12(r6)
   15708:	39c00117 	ldw	r7,4(r7)
   1570c:	82000315 	stw	r8,12(r16)
   15710:	81800215 	stw	r6,8(r16)
   15714:	070000f4 	movhi	fp,3
   15718:	e7221a04 	addi	fp,fp,-30616
   1571c:	34000315 	stw	r16,12(r6)
   15720:	44000215 	stw	r16,8(r8)
   15724:	003f3e06 	br	15420 <_malloc_r+0x218>
   15728:	63000044 	addi	r12,r12,1
   1572c:	608000cc 	andi	r2,r12,3
   15730:	10005d26 	beq	r2,zero,158a8 <_malloc_r+0x6a0>
   15734:	18c00204 	addi	r3,r3,8
   15738:	003f5106 	br	15480 <_malloc_r+0x278>
   1573c:	8089883a 	add	r4,r16,r2
   15740:	003f6d06 	br	154f8 <_malloc_r+0x2f0>
   15744:	00805504 	movi	r2,340
   15748:	10c02036 	bltu	r2,r3,157cc <_malloc_r+0x5c4>
   1574c:	8804d3fa 	srli	r2,r17,15
   15750:	11801dc4 	addi	r6,r2,119
   15754:	300490fa 	slli	r2,r6,3
   15758:	003ed806 	br	152bc <_malloc_r+0xb4>
   1575c:	48c000c4 	addi	r3,r9,3
   15760:	003f3106 	br	15428 <_malloc_r+0x220>
   15764:	05c000f4 	movhi	r23,3
   15768:	bde7c204 	addi	r23,r23,-24824
   1576c:	b8800017 	ldw	r2,0(r23)
   15770:	988d883a 	add	r6,r19,r2
   15774:	b9800015 	stw	r6,0(r23)
   15778:	293fb21e 	bne	r5,r4,15644 <_malloc_r+0x43c>
   1577c:	2083ffcc 	andi	r2,r4,4095
   15780:	103fb01e 	bne	r2,zero,15644 <_malloc_r+0x43c>
   15784:	e4000217 	ldw	r16,8(fp)
   15788:	9d45883a 	add	r2,r19,r21
   1578c:	10800054 	ori	r2,r2,1
   15790:	80800115 	stw	r2,4(r16)
   15794:	b8c00017 	ldw	r3,0(r23)
   15798:	d0a01917 	ldw	r2,-32668(gp)
   1579c:	10c0012e 	bgeu	r2,r3,157a4 <_malloc_r+0x59c>
   157a0:	d0e01915 	stw	r3,-32668(gp)
   157a4:	d0a01a17 	ldw	r2,-32664(gp)
   157a8:	10ff962e 	bgeu	r2,r3,15604 <_malloc_r+0x3fc>
   157ac:	d0e01a15 	stw	r3,-32664(gp)
   157b0:	003f9406 	br	15604 <_malloc_r+0x3fc>
   157b4:	00800104 	movi	r2,4
   157b8:	11001e36 	bltu	r2,r4,15834 <_malloc_r+0x62c>
   157bc:	2804d1ba 	srli	r2,r5,6
   157c0:	11000e04 	addi	r4,r2,56
   157c4:	200690fa 	slli	r3,r4,3
   157c8:	003fc506 	br	156e0 <_malloc_r+0x4d8>
   157cc:	00815504 	movi	r2,1364
   157d0:	10c01d2e 	bgeu	r2,r3,15848 <_malloc_r+0x640>
   157d4:	01801f84 	movi	r6,126
   157d8:	0080fc04 	movi	r2,1008
   157dc:	003eb706 	br	152bc <_malloc_r+0xb4>
   157e0:	00800204 	movi	r2,8
   157e4:	10cbc83a 	sub	r5,r2,r3
   157e8:	2169883a 	add	r20,r4,r5
   157ec:	003f9e06 	br	15668 <_malloc_r+0x460>
   157f0:	00bffe04 	movi	r2,-8
   157f4:	a93ffd04 	addi	r4,r21,-12
   157f8:	2088703a 	and	r4,r4,r2
   157fc:	b10b883a 	add	r5,r22,r4
   15800:	00c00144 	movi	r3,5
   15804:	28c00215 	stw	r3,8(r5)
   15808:	28c00115 	stw	r3,4(r5)
   1580c:	b0800117 	ldw	r2,4(r22)
   15810:	1080004c 	andi	r2,r2,1
   15814:	2084b03a 	or	r2,r4,r2
   15818:	b0800115 	stw	r2,4(r22)
   1581c:	313fdd2e 	bgeu	r6,r4,15794 <_malloc_r+0x58c>
   15820:	b1400204 	addi	r5,r22,8
   15824:	9009883a 	mov	r4,r18
   15828:	00146800 	call	14680 <_free_r>
   1582c:	e4000217 	ldw	r16,8(fp)
   15830:	003fd806 	br	15794 <_malloc_r+0x58c>
   15834:	00800504 	movi	r2,20
   15838:	11001536 	bltu	r2,r4,15890 <_malloc_r+0x688>
   1583c:	210016c4 	addi	r4,r4,91
   15840:	200690fa 	slli	r3,r4,3
   15844:	003fa606 	br	156e0 <_malloc_r+0x4d8>
   15848:	8804d4ba 	srli	r2,r17,18
   1584c:	11801f04 	addi	r6,r2,124
   15850:	300490fa 	slli	r2,r6,3
   15854:	003e9906 	br	152bc <_malloc_r+0xb4>
   15858:	2009d0ba 	srai	r4,r4,2
   1585c:	014000f4 	movhi	r5,3
   15860:	29621a04 	addi	r5,r5,-30616
   15864:	00c00044 	movi	r3,1
   15868:	28800117 	ldw	r2,4(r5)
   1586c:	1906983a 	sll	r3,r3,r4
   15870:	10c4b03a 	or	r2,r2,r3
   15874:	28800115 	stw	r2,4(r5)
   15878:	003fa306 	br	15708 <_malloc_r+0x500>
   1587c:	0027883a 	mov	r19,zero
   15880:	00c00044 	movi	r3,1
   15884:	003f8606 	br	156a0 <_malloc_r+0x498>
   15888:	d1200515 	stw	r4,-32748(gp)
   1588c:	003f7306 	br	1565c <_malloc_r+0x454>
   15890:	00801504 	movi	r2,84
   15894:	11001936 	bltu	r2,r4,158fc <_malloc_r+0x6f4>
   15898:	2804d33a 	srli	r2,r5,12
   1589c:	11001b84 	addi	r4,r2,110
   158a0:	200690fa 	slli	r3,r4,3
   158a4:	003f8e06 	br	156e0 <_malloc_r+0x4d8>
   158a8:	480b883a 	mov	r5,r9
   158ac:	6807883a 	mov	r3,r13
   158b0:	288000cc 	andi	r2,r5,3
   158b4:	18fffe04 	addi	r3,r3,-8
   158b8:	297fffc4 	addi	r5,r5,-1
   158bc:	10001526 	beq	r2,zero,15914 <_malloc_r+0x70c>
   158c0:	18800217 	ldw	r2,8(r3)
   158c4:	10fffa26 	beq	r2,r3,158b0 <_malloc_r+0x6a8>
   158c8:	2109883a 	add	r4,r4,r4
   158cc:	393f1e36 	bltu	r7,r4,15548 <_malloc_r+0x340>
   158d0:	203f1d26 	beq	r4,zero,15548 <_malloc_r+0x340>
   158d4:	21c4703a 	and	r2,r4,r7
   158d8:	10000226 	beq	r2,zero,158e4 <_malloc_r+0x6dc>
   158dc:	6013883a 	mov	r9,r12
   158e0:	003ee106 	br	15468 <_malloc_r+0x260>
   158e4:	2109883a 	add	r4,r4,r4
   158e8:	3904703a 	and	r2,r7,r4
   158ec:	63000104 	addi	r12,r12,4
   158f0:	103ffc26 	beq	r2,zero,158e4 <_malloc_r+0x6dc>
   158f4:	6013883a 	mov	r9,r12
   158f8:	003edb06 	br	15468 <_malloc_r+0x260>
   158fc:	00805504 	movi	r2,340
   15900:	11000836 	bltu	r2,r4,15924 <_malloc_r+0x71c>
   15904:	2804d3fa 	srli	r2,r5,15
   15908:	11001dc4 	addi	r4,r2,119
   1590c:	200690fa 	slli	r3,r4,3
   15910:	003f7306 	br	156e0 <_malloc_r+0x4d8>
   15914:	0104303a 	nor	r2,zero,r4
   15918:	388e703a 	and	r7,r7,r2
   1591c:	e1c00115 	stw	r7,4(fp)
   15920:	003fe906 	br	158c8 <_malloc_r+0x6c0>
   15924:	00815504 	movi	r2,1364
   15928:	1100032e 	bgeu	r2,r4,15938 <_malloc_r+0x730>
   1592c:	01001f84 	movi	r4,126
   15930:	00c0fc04 	movi	r3,1008
   15934:	003f6a06 	br	156e0 <_malloc_r+0x4d8>
   15938:	2804d4ba 	srli	r2,r5,18
   1593c:	11001f04 	addi	r4,r2,124
   15940:	200690fa 	slli	r3,r4,3
   15944:	003f6606 	br	156e0 <_malloc_r+0x4d8>

00015948 <memchr>:
   15948:	008000c4 	movi	r2,3
   1594c:	29403fcc 	andi	r5,r5,255
   15950:	2007883a 	mov	r3,r4
   15954:	1180022e 	bgeu	r2,r6,15960 <memchr+0x18>
   15958:	2084703a 	and	r2,r4,r2
   1595c:	10000b26 	beq	r2,zero,1598c <memchr+0x44>
   15960:	313fffc4 	addi	r4,r6,-1
   15964:	3000051e 	bne	r6,zero,1597c <memchr+0x34>
   15968:	00002c06 	br	15a1c <memchr+0xd4>
   1596c:	213fffc4 	addi	r4,r4,-1
   15970:	00bfffc4 	movi	r2,-1
   15974:	18c00044 	addi	r3,r3,1
   15978:	20802826 	beq	r4,r2,15a1c <memchr+0xd4>
   1597c:	18800003 	ldbu	r2,0(r3)
   15980:	28bffa1e 	bne	r5,r2,1596c <memchr+0x24>
   15984:	1805883a 	mov	r2,r3
   15988:	f800283a 	ret
   1598c:	0011883a 	mov	r8,zero
   15990:	0007883a 	mov	r3,zero
   15994:	01c00104 	movi	r7,4
   15998:	4004923a 	slli	r2,r8,8
   1599c:	18c00044 	addi	r3,r3,1
   159a0:	1151883a 	add	r8,r2,r5
   159a4:	19fffc1e 	bne	r3,r7,15998 <memchr+0x50>
   159a8:	02bfbff4 	movhi	r10,65279
   159ac:	52bfbfc4 	addi	r10,r10,-257
   159b0:	02602074 	movhi	r9,32897
   159b4:	4a602004 	addi	r9,r9,-32640
   159b8:	02c000c4 	movi	r11,3
   159bc:	20800017 	ldw	r2,0(r4)
   159c0:	31bfff04 	addi	r6,r6,-4
   159c4:	200f883a 	mov	r7,r4
   159c8:	1204f03a 	xor	r2,r2,r8
   159cc:	1287883a 	add	r3,r2,r10
   159d0:	1a46703a 	and	r3,r3,r9
   159d4:	0084303a 	nor	r2,zero,r2
   159d8:	10c4703a 	and	r2,r2,r3
   159dc:	10000b26 	beq	r2,zero,15a0c <memchr+0xc4>
   159e0:	20800003 	ldbu	r2,0(r4)
   159e4:	28800f26 	beq	r5,r2,15a24 <memchr+0xdc>
   159e8:	20800043 	ldbu	r2,1(r4)
   159ec:	21c00044 	addi	r7,r4,1
   159f0:	28800c26 	beq	r5,r2,15a24 <memchr+0xdc>
   159f4:	20800083 	ldbu	r2,2(r4)
   159f8:	21c00084 	addi	r7,r4,2
   159fc:	28800926 	beq	r5,r2,15a24 <memchr+0xdc>
   15a00:	208000c3 	ldbu	r2,3(r4)
   15a04:	21c000c4 	addi	r7,r4,3
   15a08:	28800626 	beq	r5,r2,15a24 <memchr+0xdc>
   15a0c:	21000104 	addi	r4,r4,4
   15a10:	59bfea36 	bltu	r11,r6,159bc <memchr+0x74>
   15a14:	2007883a 	mov	r3,r4
   15a18:	003fd106 	br	15960 <memchr+0x18>
   15a1c:	0005883a 	mov	r2,zero
   15a20:	f800283a 	ret
   15a24:	3805883a 	mov	r2,r7
   15a28:	f800283a 	ret

00015a2c <memcpy>:
   15a2c:	01c003c4 	movi	r7,15
   15a30:	2007883a 	mov	r3,r4
   15a34:	3980032e 	bgeu	r7,r6,15a44 <memcpy+0x18>
   15a38:	2904b03a 	or	r2,r5,r4
   15a3c:	108000cc 	andi	r2,r2,3
   15a40:	10000926 	beq	r2,zero,15a68 <memcpy+0x3c>
   15a44:	30000626 	beq	r6,zero,15a60 <memcpy+0x34>
   15a48:	30cd883a 	add	r6,r6,r3
   15a4c:	28800003 	ldbu	r2,0(r5)
   15a50:	29400044 	addi	r5,r5,1
   15a54:	18800005 	stb	r2,0(r3)
   15a58:	18c00044 	addi	r3,r3,1
   15a5c:	30fffb1e 	bne	r6,r3,15a4c <memcpy+0x20>
   15a60:	2005883a 	mov	r2,r4
   15a64:	f800283a 	ret
   15a68:	3811883a 	mov	r8,r7
   15a6c:	200f883a 	mov	r7,r4
   15a70:	28c00017 	ldw	r3,0(r5)
   15a74:	31bffc04 	addi	r6,r6,-16
   15a78:	38c00015 	stw	r3,0(r7)
   15a7c:	28800117 	ldw	r2,4(r5)
   15a80:	38800115 	stw	r2,4(r7)
   15a84:	28c00217 	ldw	r3,8(r5)
   15a88:	38c00215 	stw	r3,8(r7)
   15a8c:	28800317 	ldw	r2,12(r5)
   15a90:	29400404 	addi	r5,r5,16
   15a94:	38800315 	stw	r2,12(r7)
   15a98:	39c00404 	addi	r7,r7,16
   15a9c:	41bff436 	bltu	r8,r6,15a70 <memcpy+0x44>
   15aa0:	008000c4 	movi	r2,3
   15aa4:	1180072e 	bgeu	r2,r6,15ac4 <memcpy+0x98>
   15aa8:	1007883a 	mov	r3,r2
   15aac:	28800017 	ldw	r2,0(r5)
   15ab0:	31bfff04 	addi	r6,r6,-4
   15ab4:	29400104 	addi	r5,r5,4
   15ab8:	38800015 	stw	r2,0(r7)
   15abc:	39c00104 	addi	r7,r7,4
   15ac0:	19bffa36 	bltu	r3,r6,15aac <memcpy+0x80>
   15ac4:	3807883a 	mov	r3,r7
   15ac8:	003fde06 	br	15a44 <memcpy+0x18>

00015acc <memmove>:
   15acc:	2807883a 	mov	r3,r5
   15ad0:	2011883a 	mov	r8,r4
   15ad4:	29000c2e 	bgeu	r5,r4,15b08 <memmove+0x3c>
   15ad8:	298f883a 	add	r7,r5,r6
   15adc:	21c00a2e 	bgeu	r4,r7,15b08 <memmove+0x3c>
   15ae0:	30000726 	beq	r6,zero,15b00 <memmove+0x34>
   15ae4:	2187883a 	add	r3,r4,r6
   15ae8:	198dc83a 	sub	r6,r3,r6
   15aec:	39ffffc4 	addi	r7,r7,-1
   15af0:	38800003 	ldbu	r2,0(r7)
   15af4:	18ffffc4 	addi	r3,r3,-1
   15af8:	18800005 	stb	r2,0(r3)
   15afc:	19bffb1e 	bne	r3,r6,15aec <memmove+0x20>
   15b00:	2005883a 	mov	r2,r4
   15b04:	f800283a 	ret
   15b08:	01c003c4 	movi	r7,15
   15b0c:	39800a36 	bltu	r7,r6,15b38 <memmove+0x6c>
   15b10:	303ffb26 	beq	r6,zero,15b00 <memmove+0x34>
   15b14:	400f883a 	mov	r7,r8
   15b18:	320d883a 	add	r6,r6,r8
   15b1c:	28800003 	ldbu	r2,0(r5)
   15b20:	29400044 	addi	r5,r5,1
   15b24:	38800005 	stb	r2,0(r7)
   15b28:	39c00044 	addi	r7,r7,1
   15b2c:	39bffb1e 	bne	r7,r6,15b1c <memmove+0x50>
   15b30:	2005883a 	mov	r2,r4
   15b34:	f800283a 	ret
   15b38:	1904b03a 	or	r2,r3,r4
   15b3c:	108000cc 	andi	r2,r2,3
   15b40:	103ff31e 	bne	r2,zero,15b10 <memmove+0x44>
   15b44:	3811883a 	mov	r8,r7
   15b48:	180b883a 	mov	r5,r3
   15b4c:	200f883a 	mov	r7,r4
   15b50:	28c00017 	ldw	r3,0(r5)
   15b54:	31bffc04 	addi	r6,r6,-16
   15b58:	38c00015 	stw	r3,0(r7)
   15b5c:	28800117 	ldw	r2,4(r5)
   15b60:	38800115 	stw	r2,4(r7)
   15b64:	28c00217 	ldw	r3,8(r5)
   15b68:	38c00215 	stw	r3,8(r7)
   15b6c:	28800317 	ldw	r2,12(r5)
   15b70:	29400404 	addi	r5,r5,16
   15b74:	38800315 	stw	r2,12(r7)
   15b78:	39c00404 	addi	r7,r7,16
   15b7c:	41bff436 	bltu	r8,r6,15b50 <memmove+0x84>
   15b80:	008000c4 	movi	r2,3
   15b84:	1180072e 	bgeu	r2,r6,15ba4 <memmove+0xd8>
   15b88:	1007883a 	mov	r3,r2
   15b8c:	28800017 	ldw	r2,0(r5)
   15b90:	31bfff04 	addi	r6,r6,-4
   15b94:	29400104 	addi	r5,r5,4
   15b98:	38800015 	stw	r2,0(r7)
   15b9c:	39c00104 	addi	r7,r7,4
   15ba0:	19bffa36 	bltu	r3,r6,15b8c <memmove+0xc0>
   15ba4:	3811883a 	mov	r8,r7
   15ba8:	003fd906 	br	15b10 <memmove+0x44>

00015bac <memset>:
   15bac:	008000c4 	movi	r2,3
   15bb0:	29403fcc 	andi	r5,r5,255
   15bb4:	2007883a 	mov	r3,r4
   15bb8:	1180022e 	bgeu	r2,r6,15bc4 <memset+0x18>
   15bbc:	2084703a 	and	r2,r4,r2
   15bc0:	10000826 	beq	r2,zero,15be4 <memset+0x38>
   15bc4:	30000526 	beq	r6,zero,15bdc <memset+0x30>
   15bc8:	2805883a 	mov	r2,r5
   15bcc:	30cd883a 	add	r6,r6,r3
   15bd0:	18800005 	stb	r2,0(r3)
   15bd4:	18c00044 	addi	r3,r3,1
   15bd8:	19bffd1e 	bne	r3,r6,15bd0 <memset+0x24>
   15bdc:	2005883a 	mov	r2,r4
   15be0:	f800283a 	ret
   15be4:	2804923a 	slli	r2,r5,8
   15be8:	020003c4 	movi	r8,15
   15bec:	200f883a 	mov	r7,r4
   15bf0:	2884b03a 	or	r2,r5,r2
   15bf4:	1006943a 	slli	r3,r2,16
   15bf8:	10c6b03a 	or	r3,r2,r3
   15bfc:	41800a2e 	bgeu	r8,r6,15c28 <memset+0x7c>
   15c00:	4005883a 	mov	r2,r8
   15c04:	31bffc04 	addi	r6,r6,-16
   15c08:	38c00015 	stw	r3,0(r7)
   15c0c:	38c00115 	stw	r3,4(r7)
   15c10:	38c00215 	stw	r3,8(r7)
   15c14:	38c00315 	stw	r3,12(r7)
   15c18:	39c00404 	addi	r7,r7,16
   15c1c:	11bff936 	bltu	r2,r6,15c04 <memset+0x58>
   15c20:	008000c4 	movi	r2,3
   15c24:	1180052e 	bgeu	r2,r6,15c3c <memset+0x90>
   15c28:	31bfff04 	addi	r6,r6,-4
   15c2c:	008000c4 	movi	r2,3
   15c30:	38c00015 	stw	r3,0(r7)
   15c34:	39c00104 	addi	r7,r7,4
   15c38:	11bffb36 	bltu	r2,r6,15c28 <memset+0x7c>
   15c3c:	3807883a 	mov	r3,r7
   15c40:	003fe006 	br	15bc4 <memset+0x18>

00015c44 <_Bfree>:
   15c44:	28000826 	beq	r5,zero,15c68 <_Bfree+0x24>
   15c48:	28800117 	ldw	r2,4(r5)
   15c4c:	21001317 	ldw	r4,76(r4)
   15c50:	1085883a 	add	r2,r2,r2
   15c54:	1085883a 	add	r2,r2,r2
   15c58:	1105883a 	add	r2,r2,r4
   15c5c:	10c00017 	ldw	r3,0(r2)
   15c60:	28c00015 	stw	r3,0(r5)
   15c64:	11400015 	stw	r5,0(r2)
   15c68:	f800283a 	ret

00015c6c <__hi0bits>:
   15c6c:	20bfffec 	andhi	r2,r4,65535
   15c70:	10001426 	beq	r2,zero,15cc4 <__hi0bits+0x58>
   15c74:	0007883a 	mov	r3,zero
   15c78:	20bfc02c 	andhi	r2,r4,65280
   15c7c:	1000021e 	bne	r2,zero,15c88 <__hi0bits+0x1c>
   15c80:	2008923a 	slli	r4,r4,8
   15c84:	18c00204 	addi	r3,r3,8
   15c88:	20bc002c 	andhi	r2,r4,61440
   15c8c:	1000021e 	bne	r2,zero,15c98 <__hi0bits+0x2c>
   15c90:	2008913a 	slli	r4,r4,4
   15c94:	18c00104 	addi	r3,r3,4
   15c98:	20b0002c 	andhi	r2,r4,49152
   15c9c:	1000031e 	bne	r2,zero,15cac <__hi0bits+0x40>
   15ca0:	2105883a 	add	r2,r4,r4
   15ca4:	18c00084 	addi	r3,r3,2
   15ca8:	1089883a 	add	r4,r2,r2
   15cac:	20000316 	blt	r4,zero,15cbc <__hi0bits+0x50>
   15cb0:	2090002c 	andhi	r2,r4,16384
   15cb4:	10000626 	beq	r2,zero,15cd0 <__hi0bits+0x64>
   15cb8:	18c00044 	addi	r3,r3,1
   15cbc:	1805883a 	mov	r2,r3
   15cc0:	f800283a 	ret
   15cc4:	2008943a 	slli	r4,r4,16
   15cc8:	00c00404 	movi	r3,16
   15ccc:	003fea06 	br	15c78 <__hi0bits+0xc>
   15cd0:	00c00804 	movi	r3,32
   15cd4:	1805883a 	mov	r2,r3
   15cd8:	f800283a 	ret

00015cdc <__lo0bits>:
   15cdc:	20c00017 	ldw	r3,0(r4)
   15ce0:	188001cc 	andi	r2,r3,7
   15ce4:	10000a26 	beq	r2,zero,15d10 <__lo0bits+0x34>
   15ce8:	1880004c 	andi	r2,r3,1
   15cec:	1005003a 	cmpeq	r2,r2,zero
   15cf0:	10002126 	beq	r2,zero,15d78 <__lo0bits+0x9c>
   15cf4:	1880008c 	andi	r2,r3,2
   15cf8:	1000251e 	bne	r2,zero,15d90 <__lo0bits+0xb4>
   15cfc:	1804d0ba 	srli	r2,r3,2
   15d00:	01400084 	movi	r5,2
   15d04:	20800015 	stw	r2,0(r4)
   15d08:	2805883a 	mov	r2,r5
   15d0c:	f800283a 	ret
   15d10:	18bfffcc 	andi	r2,r3,65535
   15d14:	10001526 	beq	r2,zero,15d6c <__lo0bits+0x90>
   15d18:	000b883a 	mov	r5,zero
   15d1c:	18803fcc 	andi	r2,r3,255
   15d20:	1000021e 	bne	r2,zero,15d2c <__lo0bits+0x50>
   15d24:	1806d23a 	srli	r3,r3,8
   15d28:	29400204 	addi	r5,r5,8
   15d2c:	188003cc 	andi	r2,r3,15
   15d30:	1000021e 	bne	r2,zero,15d3c <__lo0bits+0x60>
   15d34:	1806d13a 	srli	r3,r3,4
   15d38:	29400104 	addi	r5,r5,4
   15d3c:	188000cc 	andi	r2,r3,3
   15d40:	1000021e 	bne	r2,zero,15d4c <__lo0bits+0x70>
   15d44:	1806d0ba 	srli	r3,r3,2
   15d48:	29400084 	addi	r5,r5,2
   15d4c:	1880004c 	andi	r2,r3,1
   15d50:	1000031e 	bne	r2,zero,15d60 <__lo0bits+0x84>
   15d54:	1806d07a 	srli	r3,r3,1
   15d58:	18000a26 	beq	r3,zero,15d84 <__lo0bits+0xa8>
   15d5c:	29400044 	addi	r5,r5,1
   15d60:	2805883a 	mov	r2,r5
   15d64:	20c00015 	stw	r3,0(r4)
   15d68:	f800283a 	ret
   15d6c:	1806d43a 	srli	r3,r3,16
   15d70:	01400404 	movi	r5,16
   15d74:	003fe906 	br	15d1c <__lo0bits+0x40>
   15d78:	000b883a 	mov	r5,zero
   15d7c:	2805883a 	mov	r2,r5
   15d80:	f800283a 	ret
   15d84:	01400804 	movi	r5,32
   15d88:	2805883a 	mov	r2,r5
   15d8c:	f800283a 	ret
   15d90:	1804d07a 	srli	r2,r3,1
   15d94:	01400044 	movi	r5,1
   15d98:	20800015 	stw	r2,0(r4)
   15d9c:	003fda06 	br	15d08 <__lo0bits+0x2c>

00015da0 <__mcmp>:
   15da0:	20800417 	ldw	r2,16(r4)
   15da4:	28c00417 	ldw	r3,16(r5)
   15da8:	10cfc83a 	sub	r7,r2,r3
   15dac:	38000c1e 	bne	r7,zero,15de0 <__mcmp+0x40>
   15db0:	18c5883a 	add	r2,r3,r3
   15db4:	1085883a 	add	r2,r2,r2
   15db8:	10c00504 	addi	r3,r2,20
   15dbc:	21000504 	addi	r4,r4,20
   15dc0:	28cb883a 	add	r5,r5,r3
   15dc4:	2085883a 	add	r2,r4,r2
   15dc8:	10bfff04 	addi	r2,r2,-4
   15dcc:	297fff04 	addi	r5,r5,-4
   15dd0:	11800017 	ldw	r6,0(r2)
   15dd4:	28c00017 	ldw	r3,0(r5)
   15dd8:	30c0031e 	bne	r6,r3,15de8 <__mcmp+0x48>
   15ddc:	20bffa36 	bltu	r4,r2,15dc8 <__mcmp+0x28>
   15de0:	3805883a 	mov	r2,r7
   15de4:	f800283a 	ret
   15de8:	30c00336 	bltu	r6,r3,15df8 <__mcmp+0x58>
   15dec:	01c00044 	movi	r7,1
   15df0:	3805883a 	mov	r2,r7
   15df4:	f800283a 	ret
   15df8:	01ffffc4 	movi	r7,-1
   15dfc:	003ff806 	br	15de0 <__mcmp+0x40>

00015e00 <__ulp>:
   15e00:	295ffc2c 	andhi	r5,r5,32752
   15e04:	013f3034 	movhi	r4,64704
   15e08:	290b883a 	add	r5,r5,r4
   15e0c:	0145c83a 	sub	r2,zero,r5
   15e10:	1007d53a 	srai	r3,r2,20
   15e14:	000d883a 	mov	r6,zero
   15e18:	0140040e 	bge	zero,r5,15e2c <__ulp+0x2c>
   15e1c:	280f883a 	mov	r7,r5
   15e20:	3807883a 	mov	r3,r7
   15e24:	3005883a 	mov	r2,r6
   15e28:	f800283a 	ret
   15e2c:	008004c4 	movi	r2,19
   15e30:	193ffb04 	addi	r4,r3,-20
   15e34:	10c00c0e 	bge	r2,r3,15e68 <__ulp+0x68>
   15e38:	008007c4 	movi	r2,31
   15e3c:	1107c83a 	sub	r3,r2,r4
   15e40:	00800784 	movi	r2,30
   15e44:	01400044 	movi	r5,1
   15e48:	11000216 	blt	r2,r4,15e54 <__ulp+0x54>
   15e4c:	00800044 	movi	r2,1
   15e50:	10ca983a 	sll	r5,r2,r3
   15e54:	000f883a 	mov	r7,zero
   15e58:	280d883a 	mov	r6,r5
   15e5c:	3807883a 	mov	r3,r7
   15e60:	3005883a 	mov	r2,r6
   15e64:	f800283a 	ret
   15e68:	00800234 	movhi	r2,8
   15e6c:	10cfd83a 	sra	r7,r2,r3
   15e70:	000d883a 	mov	r6,zero
   15e74:	3005883a 	mov	r2,r6
   15e78:	3807883a 	mov	r3,r7
   15e7c:	f800283a 	ret

00015e80 <__b2d>:
   15e80:	20800417 	ldw	r2,16(r4)
   15e84:	defff904 	addi	sp,sp,-28
   15e88:	dd000415 	stw	r20,16(sp)
   15e8c:	1085883a 	add	r2,r2,r2
   15e90:	25000504 	addi	r20,r4,20
   15e94:	1085883a 	add	r2,r2,r2
   15e98:	dc000015 	stw	r16,0(sp)
   15e9c:	a0a1883a 	add	r16,r20,r2
   15ea0:	dd400515 	stw	r21,20(sp)
   15ea4:	857fff17 	ldw	r21,-4(r16)
   15ea8:	dc400115 	stw	r17,4(sp)
   15eac:	dfc00615 	stw	ra,24(sp)
   15eb0:	a809883a 	mov	r4,r21
   15eb4:	2823883a 	mov	r17,r5
   15eb8:	dcc00315 	stw	r19,12(sp)
   15ebc:	dc800215 	stw	r18,8(sp)
   15ec0:	0015c6c0 	call	15c6c <__hi0bits>
   15ec4:	100b883a 	mov	r5,r2
   15ec8:	00800804 	movi	r2,32
   15ecc:	1145c83a 	sub	r2,r2,r5
   15ed0:	88800015 	stw	r2,0(r17)
   15ed4:	00800284 	movi	r2,10
   15ed8:	80ffff04 	addi	r3,r16,-4
   15edc:	11401416 	blt	r2,r5,15f30 <__b2d+0xb0>
   15ee0:	008002c4 	movi	r2,11
   15ee4:	1149c83a 	sub	r4,r2,r5
   15ee8:	a0c02736 	bltu	r20,r3,15f88 <__b2d+0x108>
   15eec:	000d883a 	mov	r6,zero
   15ef0:	28800544 	addi	r2,r5,21
   15ef4:	a906d83a 	srl	r3,r21,r4
   15ef8:	a884983a 	sll	r2,r21,r2
   15efc:	1ccffc34 	orhi	r19,r3,16368
   15f00:	11a4b03a 	or	r18,r2,r6
   15f04:	9005883a 	mov	r2,r18
   15f08:	9807883a 	mov	r3,r19
   15f0c:	dfc00617 	ldw	ra,24(sp)
   15f10:	dd400517 	ldw	r21,20(sp)
   15f14:	dd000417 	ldw	r20,16(sp)
   15f18:	dcc00317 	ldw	r19,12(sp)
   15f1c:	dc800217 	ldw	r18,8(sp)
   15f20:	dc400117 	ldw	r17,4(sp)
   15f24:	dc000017 	ldw	r16,0(sp)
   15f28:	dec00704 	addi	sp,sp,28
   15f2c:	f800283a 	ret
   15f30:	a0c00e36 	bltu	r20,r3,15f6c <__b2d+0xec>
   15f34:	293ffd44 	addi	r4,r5,-11
   15f38:	000d883a 	mov	r6,zero
   15f3c:	20000f26 	beq	r4,zero,15f7c <__b2d+0xfc>
   15f40:	00800804 	movi	r2,32
   15f44:	110bc83a 	sub	r5,r2,r4
   15f48:	a0c01236 	bltu	r20,r3,15f94 <__b2d+0x114>
   15f4c:	000f883a 	mov	r7,zero
   15f50:	a904983a 	sll	r2,r21,r4
   15f54:	3146d83a 	srl	r3,r6,r5
   15f58:	3108983a 	sll	r4,r6,r4
   15f5c:	108ffc34 	orhi	r2,r2,16368
   15f60:	18a6b03a 	or	r19,r3,r2
   15f64:	3924b03a 	or	r18,r7,r4
   15f68:	003fe606 	br	15f04 <__b2d+0x84>
   15f6c:	293ffd44 	addi	r4,r5,-11
   15f70:	81bffe17 	ldw	r6,-8(r16)
   15f74:	80fffe04 	addi	r3,r16,-8
   15f78:	203ff11e 	bne	r4,zero,15f40 <__b2d+0xc0>
   15f7c:	accffc34 	orhi	r19,r21,16368
   15f80:	3025883a 	mov	r18,r6
   15f84:	003fdf06 	br	15f04 <__b2d+0x84>
   15f88:	18bfff17 	ldw	r2,-4(r3)
   15f8c:	110cd83a 	srl	r6,r2,r4
   15f90:	003fd706 	br	15ef0 <__b2d+0x70>
   15f94:	18bfff17 	ldw	r2,-4(r3)
   15f98:	114ed83a 	srl	r7,r2,r5
   15f9c:	003fec06 	br	15f50 <__b2d+0xd0>

00015fa0 <__ratio>:
   15fa0:	defff904 	addi	sp,sp,-28
   15fa4:	dc400215 	stw	r17,8(sp)
   15fa8:	2823883a 	mov	r17,r5
   15fac:	d80b883a 	mov	r5,sp
   15fb0:	dfc00615 	stw	ra,24(sp)
   15fb4:	dd000515 	stw	r20,20(sp)
   15fb8:	dcc00415 	stw	r19,16(sp)
   15fbc:	dc800315 	stw	r18,12(sp)
   15fc0:	2025883a 	mov	r18,r4
   15fc4:	0015e800 	call	15e80 <__b2d>
   15fc8:	8809883a 	mov	r4,r17
   15fcc:	d9400104 	addi	r5,sp,4
   15fd0:	1027883a 	mov	r19,r2
   15fd4:	1829883a 	mov	r20,r3
   15fd8:	0015e800 	call	15e80 <__b2d>
   15fdc:	89000417 	ldw	r4,16(r17)
   15fe0:	91c00417 	ldw	r7,16(r18)
   15fe4:	d9800117 	ldw	r6,4(sp)
   15fe8:	180b883a 	mov	r5,r3
   15fec:	390fc83a 	sub	r7,r7,r4
   15ff0:	1009883a 	mov	r4,r2
   15ff4:	d8800017 	ldw	r2,0(sp)
   15ff8:	380e917a 	slli	r7,r7,5
   15ffc:	2011883a 	mov	r8,r4
   16000:	1185c83a 	sub	r2,r2,r6
   16004:	11c5883a 	add	r2,r2,r7
   16008:	1006953a 	slli	r3,r2,20
   1600c:	2813883a 	mov	r9,r5
   16010:	00800d0e 	bge	zero,r2,16048 <__ratio+0xa8>
   16014:	1d29883a 	add	r20,r3,r20
   16018:	a00b883a 	mov	r5,r20
   1601c:	480f883a 	mov	r7,r9
   16020:	9809883a 	mov	r4,r19
   16024:	400d883a 	mov	r6,r8
   16028:	0018dfc0 	call	18dfc <__divdf3>
   1602c:	dfc00617 	ldw	ra,24(sp)
   16030:	dd000517 	ldw	r20,20(sp)
   16034:	dcc00417 	ldw	r19,16(sp)
   16038:	dc800317 	ldw	r18,12(sp)
   1603c:	dc400217 	ldw	r17,8(sp)
   16040:	dec00704 	addi	sp,sp,28
   16044:	f800283a 	ret
   16048:	28d3c83a 	sub	r9,r5,r3
   1604c:	003ff206 	br	16018 <__ratio+0x78>

00016050 <_mprec_log10>:
   16050:	defffe04 	addi	sp,sp,-8
   16054:	008005c4 	movi	r2,23
   16058:	dc000015 	stw	r16,0(sp)
   1605c:	dfc00115 	stw	ra,4(sp)
   16060:	2021883a 	mov	r16,r4
   16064:	11000c16 	blt	r2,r4,16098 <_mprec_log10+0x48>
   16068:	200490fa 	slli	r2,r4,3
   1606c:	00c000f4 	movhi	r3,3
   16070:	18e07c04 	addi	r3,r3,-32272
   16074:	10c5883a 	add	r2,r2,r3
   16078:	12400117 	ldw	r9,4(r2)
   1607c:	12000017 	ldw	r8,0(r2)
   16080:	4807883a 	mov	r3,r9
   16084:	4005883a 	mov	r2,r8
   16088:	dfc00117 	ldw	ra,4(sp)
   1608c:	dc000017 	ldw	r16,0(sp)
   16090:	dec00204 	addi	sp,sp,8
   16094:	f800283a 	ret
   16098:	0011883a 	mov	r8,zero
   1609c:	024ffc34 	movhi	r9,16368
   160a0:	0005883a 	mov	r2,zero
   160a4:	00d00934 	movhi	r3,16420
   160a8:	480b883a 	mov	r5,r9
   160ac:	4009883a 	mov	r4,r8
   160b0:	180f883a 	mov	r7,r3
   160b4:	100d883a 	mov	r6,r2
   160b8:	0018a380 	call	18a38 <__muldf3>
   160bc:	843fffc4 	addi	r16,r16,-1
   160c0:	1011883a 	mov	r8,r2
   160c4:	1813883a 	mov	r9,r3
   160c8:	803ff51e 	bne	r16,zero,160a0 <_mprec_log10+0x50>
   160cc:	4005883a 	mov	r2,r8
   160d0:	4807883a 	mov	r3,r9
   160d4:	dfc00117 	ldw	ra,4(sp)
   160d8:	dc000017 	ldw	r16,0(sp)
   160dc:	dec00204 	addi	sp,sp,8
   160e0:	f800283a 	ret

000160e4 <__copybits>:
   160e4:	297fffc4 	addi	r5,r5,-1
   160e8:	30800417 	ldw	r2,16(r6)
   160ec:	280bd17a 	srai	r5,r5,5
   160f0:	31800504 	addi	r6,r6,20
   160f4:	1085883a 	add	r2,r2,r2
   160f8:	294b883a 	add	r5,r5,r5
   160fc:	294b883a 	add	r5,r5,r5
   16100:	1085883a 	add	r2,r2,r2
   16104:	290b883a 	add	r5,r5,r4
   16108:	3087883a 	add	r3,r6,r2
   1610c:	29400104 	addi	r5,r5,4
   16110:	30c0052e 	bgeu	r6,r3,16128 <__copybits+0x44>
   16114:	30800017 	ldw	r2,0(r6)
   16118:	31800104 	addi	r6,r6,4
   1611c:	20800015 	stw	r2,0(r4)
   16120:	21000104 	addi	r4,r4,4
   16124:	30fffb36 	bltu	r6,r3,16114 <__copybits+0x30>
   16128:	2140032e 	bgeu	r4,r5,16138 <__copybits+0x54>
   1612c:	20000015 	stw	zero,0(r4)
   16130:	21000104 	addi	r4,r4,4
   16134:	217ffd36 	bltu	r4,r5,1612c <__copybits+0x48>
   16138:	f800283a 	ret

0001613c <__any_on>:
   1613c:	20800417 	ldw	r2,16(r4)
   16140:	2807d17a 	srai	r3,r5,5
   16144:	21000504 	addi	r4,r4,20
   16148:	10c00d0e 	bge	r2,r3,16180 <__any_on+0x44>
   1614c:	1085883a 	add	r2,r2,r2
   16150:	1085883a 	add	r2,r2,r2
   16154:	208d883a 	add	r6,r4,r2
   16158:	2180182e 	bgeu	r4,r6,161bc <__any_on+0x80>
   1615c:	30bfff17 	ldw	r2,-4(r6)
   16160:	30ffff04 	addi	r3,r6,-4
   16164:	1000041e 	bne	r2,zero,16178 <__any_on+0x3c>
   16168:	20c0142e 	bgeu	r4,r3,161bc <__any_on+0x80>
   1616c:	18ffff04 	addi	r3,r3,-4
   16170:	18800017 	ldw	r2,0(r3)
   16174:	103ffc26 	beq	r2,zero,16168 <__any_on+0x2c>
   16178:	00800044 	movi	r2,1
   1617c:	f800283a 	ret
   16180:	18800a0e 	bge	r3,r2,161ac <__any_on+0x70>
   16184:	294007cc 	andi	r5,r5,31
   16188:	28000826 	beq	r5,zero,161ac <__any_on+0x70>
   1618c:	18c5883a 	add	r2,r3,r3
   16190:	1085883a 	add	r2,r2,r2
   16194:	208d883a 	add	r6,r4,r2
   16198:	30c00017 	ldw	r3,0(r6)
   1619c:	1944d83a 	srl	r2,r3,r5
   161a0:	1144983a 	sll	r2,r2,r5
   161a4:	18bff41e 	bne	r3,r2,16178 <__any_on+0x3c>
   161a8:	003feb06 	br	16158 <__any_on+0x1c>
   161ac:	18c5883a 	add	r2,r3,r3
   161b0:	1085883a 	add	r2,r2,r2
   161b4:	208d883a 	add	r6,r4,r2
   161b8:	003fe706 	br	16158 <__any_on+0x1c>
   161bc:	0005883a 	mov	r2,zero
   161c0:	f800283a 	ret

000161c4 <_Balloc>:
   161c4:	20c01317 	ldw	r3,76(r4)
   161c8:	defffb04 	addi	sp,sp,-20
   161cc:	dcc00315 	stw	r19,12(sp)
   161d0:	dc800215 	stw	r18,8(sp)
   161d4:	dfc00415 	stw	ra,16(sp)
   161d8:	2825883a 	mov	r18,r5
   161dc:	dc400115 	stw	r17,4(sp)
   161e0:	dc000015 	stw	r16,0(sp)
   161e4:	2027883a 	mov	r19,r4
   161e8:	01800404 	movi	r6,16
   161ec:	01400104 	movi	r5,4
   161f0:	18001726 	beq	r3,zero,16250 <_Balloc+0x8c>
   161f4:	01400044 	movi	r5,1
   161f8:	9485883a 	add	r2,r18,r18
   161fc:	2ca2983a 	sll	r17,r5,r18
   16200:	1085883a 	add	r2,r2,r2
   16204:	10c7883a 	add	r3,r2,r3
   16208:	1c000017 	ldw	r16,0(r3)
   1620c:	8c4d883a 	add	r6,r17,r17
   16210:	318d883a 	add	r6,r6,r6
   16214:	9809883a 	mov	r4,r19
   16218:	31800504 	addi	r6,r6,20
   1621c:	80001226 	beq	r16,zero,16268 <_Balloc+0xa4>
   16220:	80800017 	ldw	r2,0(r16)
   16224:	18800015 	stw	r2,0(r3)
   16228:	80000415 	stw	zero,16(r16)
   1622c:	80000315 	stw	zero,12(r16)
   16230:	8005883a 	mov	r2,r16
   16234:	dfc00417 	ldw	ra,16(sp)
   16238:	dcc00317 	ldw	r19,12(sp)
   1623c:	dc800217 	ldw	r18,8(sp)
   16240:	dc400117 	ldw	r17,4(sp)
   16244:	dc000017 	ldw	r16,0(sp)
   16248:	dec00504 	addi	sp,sp,20
   1624c:	f800283a 	ret
   16250:	001758c0 	call	1758c <_calloc_r>
   16254:	1007883a 	mov	r3,r2
   16258:	0021883a 	mov	r16,zero
   1625c:	98801315 	stw	r2,76(r19)
   16260:	103fe41e 	bne	r2,zero,161f4 <_Balloc+0x30>
   16264:	003ff206 	br	16230 <_Balloc+0x6c>
   16268:	001758c0 	call	1758c <_calloc_r>
   1626c:	103ff026 	beq	r2,zero,16230 <_Balloc+0x6c>
   16270:	1021883a 	mov	r16,r2
   16274:	14800115 	stw	r18,4(r2)
   16278:	14400215 	stw	r17,8(r2)
   1627c:	003fea06 	br	16228 <_Balloc+0x64>

00016280 <__d2b>:
   16280:	defff504 	addi	sp,sp,-44
   16284:	dcc00515 	stw	r19,20(sp)
   16288:	04c00044 	movi	r19,1
   1628c:	dc000215 	stw	r16,8(sp)
   16290:	2821883a 	mov	r16,r5
   16294:	980b883a 	mov	r5,r19
   16298:	ddc00915 	stw	r23,36(sp)
   1629c:	dd800815 	stw	r22,32(sp)
   162a0:	dd400715 	stw	r21,28(sp)
   162a4:	dd000615 	stw	r20,24(sp)
   162a8:	dc800415 	stw	r18,16(sp)
   162ac:	dc400315 	stw	r17,12(sp)
   162b0:	dfc00a15 	stw	ra,40(sp)
   162b4:	3023883a 	mov	r17,r6
   162b8:	382d883a 	mov	r22,r7
   162bc:	ddc00b17 	ldw	r23,44(sp)
   162c0:	00161c40 	call	161c4 <_Balloc>
   162c4:	1025883a 	mov	r18,r2
   162c8:	00a00034 	movhi	r2,32768
   162cc:	10bfffc4 	addi	r2,r2,-1
   162d0:	8888703a 	and	r4,r17,r2
   162d4:	202ad53a 	srli	r21,r4,20
   162d8:	00800434 	movhi	r2,16
   162dc:	10bfffc4 	addi	r2,r2,-1
   162e0:	8886703a 	and	r3,r17,r2
   162e4:	a829003a 	cmpeq	r20,r21,zero
   162e8:	800b883a 	mov	r5,r16
   162ec:	d8c00115 	stw	r3,4(sp)
   162f0:	94000504 	addi	r16,r18,20
   162f4:	a000021e 	bne	r20,zero,16300 <__d2b+0x80>
   162f8:	18c00434 	orhi	r3,r3,16
   162fc:	d8c00115 	stw	r3,4(sp)
   16300:	28002726 	beq	r5,zero,163a0 <__d2b+0x120>
   16304:	d809883a 	mov	r4,sp
   16308:	d9400015 	stw	r5,0(sp)
   1630c:	0015cdc0 	call	15cdc <__lo0bits>
   16310:	100d883a 	mov	r6,r2
   16314:	10003526 	beq	r2,zero,163ec <__d2b+0x16c>
   16318:	d8c00117 	ldw	r3,4(sp)
   1631c:	00800804 	movi	r2,32
   16320:	1185c83a 	sub	r2,r2,r6
   16324:	d9000017 	ldw	r4,0(sp)
   16328:	1886983a 	sll	r3,r3,r2
   1632c:	1906b03a 	or	r3,r3,r4
   16330:	90c00515 	stw	r3,20(r18)
   16334:	d8c00117 	ldw	r3,4(sp)
   16338:	1986d83a 	srl	r3,r3,r6
   1633c:	d8c00115 	stw	r3,4(sp)
   16340:	180b003a 	cmpeq	r5,r3,zero
   16344:	00800084 	movi	r2,2
   16348:	114bc83a 	sub	r5,r2,r5
   1634c:	80c00115 	stw	r3,4(r16)
   16350:	91400415 	stw	r5,16(r18)
   16354:	a0001a1e 	bne	r20,zero,163c0 <__d2b+0x140>
   16358:	3545883a 	add	r2,r6,r21
   1635c:	10bef344 	addi	r2,r2,-1075
   16360:	00c00d44 	movi	r3,53
   16364:	b0800015 	stw	r2,0(r22)
   16368:	1987c83a 	sub	r3,r3,r6
   1636c:	b8c00015 	stw	r3,0(r23)
   16370:	9005883a 	mov	r2,r18
   16374:	dfc00a17 	ldw	ra,40(sp)
   16378:	ddc00917 	ldw	r23,36(sp)
   1637c:	dd800817 	ldw	r22,32(sp)
   16380:	dd400717 	ldw	r21,28(sp)
   16384:	dd000617 	ldw	r20,24(sp)
   16388:	dcc00517 	ldw	r19,20(sp)
   1638c:	dc800417 	ldw	r18,16(sp)
   16390:	dc400317 	ldw	r17,12(sp)
   16394:	dc000217 	ldw	r16,8(sp)
   16398:	dec00b04 	addi	sp,sp,44
   1639c:	f800283a 	ret
   163a0:	d9000104 	addi	r4,sp,4
   163a4:	0015cdc0 	call	15cdc <__lo0bits>
   163a8:	11800804 	addi	r6,r2,32
   163ac:	d8800117 	ldw	r2,4(sp)
   163b0:	94c00415 	stw	r19,16(r18)
   163b4:	980b883a 	mov	r5,r19
   163b8:	90800515 	stw	r2,20(r18)
   163bc:	a03fe626 	beq	r20,zero,16358 <__d2b+0xd8>
   163c0:	2945883a 	add	r2,r5,r5
   163c4:	1085883a 	add	r2,r2,r2
   163c8:	1405883a 	add	r2,r2,r16
   163cc:	113fff17 	ldw	r4,-4(r2)
   163d0:	30fef384 	addi	r3,r6,-1074
   163d4:	2820917a 	slli	r16,r5,5
   163d8:	b0c00015 	stw	r3,0(r22)
   163dc:	0015c6c0 	call	15c6c <__hi0bits>
   163e0:	80a1c83a 	sub	r16,r16,r2
   163e4:	bc000015 	stw	r16,0(r23)
   163e8:	003fe106 	br	16370 <__d2b+0xf0>
   163ec:	d8800017 	ldw	r2,0(sp)
   163f0:	90800515 	stw	r2,20(r18)
   163f4:	d8c00117 	ldw	r3,4(sp)
   163f8:	003fd106 	br	16340 <__d2b+0xc0>

000163fc <__mdiff>:
   163fc:	defffb04 	addi	sp,sp,-20
   16400:	dc000015 	stw	r16,0(sp)
   16404:	2821883a 	mov	r16,r5
   16408:	dc800215 	stw	r18,8(sp)
   1640c:	300b883a 	mov	r5,r6
   16410:	2025883a 	mov	r18,r4
   16414:	8009883a 	mov	r4,r16
   16418:	dc400115 	stw	r17,4(sp)
   1641c:	dfc00415 	stw	ra,16(sp)
   16420:	dcc00315 	stw	r19,12(sp)
   16424:	3023883a 	mov	r17,r6
   16428:	0015da00 	call	15da0 <__mcmp>
   1642c:	10004226 	beq	r2,zero,16538 <__mdiff+0x13c>
   16430:	10005016 	blt	r2,zero,16574 <__mdiff+0x178>
   16434:	0027883a 	mov	r19,zero
   16438:	81400117 	ldw	r5,4(r16)
   1643c:	9009883a 	mov	r4,r18
   16440:	00161c40 	call	161c4 <_Balloc>
   16444:	1019883a 	mov	r12,r2
   16448:	82800417 	ldw	r10,16(r16)
   1644c:	88800417 	ldw	r2,16(r17)
   16450:	81800504 	addi	r6,r16,20
   16454:	5287883a 	add	r3,r10,r10
   16458:	1085883a 	add	r2,r2,r2
   1645c:	18c7883a 	add	r3,r3,r3
   16460:	1085883a 	add	r2,r2,r2
   16464:	8a000504 	addi	r8,r17,20
   16468:	64c00315 	stw	r19,12(r12)
   1646c:	30db883a 	add	r13,r6,r3
   16470:	4097883a 	add	r11,r8,r2
   16474:	61c00504 	addi	r7,r12,20
   16478:	0013883a 	mov	r9,zero
   1647c:	31000017 	ldw	r4,0(r6)
   16480:	41400017 	ldw	r5,0(r8)
   16484:	42000104 	addi	r8,r8,4
   16488:	20bfffcc 	andi	r2,r4,65535
   1648c:	28ffffcc 	andi	r3,r5,65535
   16490:	10c5c83a 	sub	r2,r2,r3
   16494:	1245883a 	add	r2,r2,r9
   16498:	2008d43a 	srli	r4,r4,16
   1649c:	280ad43a 	srli	r5,r5,16
   164a0:	1007d43a 	srai	r3,r2,16
   164a4:	3880000d 	sth	r2,0(r7)
   164a8:	2149c83a 	sub	r4,r4,r5
   164ac:	20c9883a 	add	r4,r4,r3
   164b0:	3900008d 	sth	r4,2(r7)
   164b4:	31800104 	addi	r6,r6,4
   164b8:	39c00104 	addi	r7,r7,4
   164bc:	2013d43a 	srai	r9,r4,16
   164c0:	42ffee36 	bltu	r8,r11,1647c <__mdiff+0x80>
   164c4:	33400c2e 	bgeu	r6,r13,164f8 <__mdiff+0xfc>
   164c8:	30800017 	ldw	r2,0(r6)
   164cc:	31800104 	addi	r6,r6,4
   164d0:	10ffffcc 	andi	r3,r2,65535
   164d4:	1a47883a 	add	r3,r3,r9
   164d8:	1004d43a 	srli	r2,r2,16
   164dc:	1809d43a 	srai	r4,r3,16
   164e0:	38c0000d 	sth	r3,0(r7)
   164e4:	1105883a 	add	r2,r2,r4
   164e8:	3880008d 	sth	r2,2(r7)
   164ec:	1013d43a 	srai	r9,r2,16
   164f0:	39c00104 	addi	r7,r7,4
   164f4:	337ff436 	bltu	r6,r13,164c8 <__mdiff+0xcc>
   164f8:	38bfff17 	ldw	r2,-4(r7)
   164fc:	38ffff04 	addi	r3,r7,-4
   16500:	1000041e 	bne	r2,zero,16514 <__mdiff+0x118>
   16504:	18ffff04 	addi	r3,r3,-4
   16508:	18800017 	ldw	r2,0(r3)
   1650c:	52bfffc4 	addi	r10,r10,-1
   16510:	103ffc26 	beq	r2,zero,16504 <__mdiff+0x108>
   16514:	6005883a 	mov	r2,r12
   16518:	62800415 	stw	r10,16(r12)
   1651c:	dfc00417 	ldw	ra,16(sp)
   16520:	dcc00317 	ldw	r19,12(sp)
   16524:	dc800217 	ldw	r18,8(sp)
   16528:	dc400117 	ldw	r17,4(sp)
   1652c:	dc000017 	ldw	r16,0(sp)
   16530:	dec00504 	addi	sp,sp,20
   16534:	f800283a 	ret
   16538:	9009883a 	mov	r4,r18
   1653c:	000b883a 	mov	r5,zero
   16540:	00161c40 	call	161c4 <_Balloc>
   16544:	1019883a 	mov	r12,r2
   16548:	00800044 	movi	r2,1
   1654c:	60800415 	stw	r2,16(r12)
   16550:	6005883a 	mov	r2,r12
   16554:	60000515 	stw	zero,20(r12)
   16558:	dfc00417 	ldw	ra,16(sp)
   1655c:	dcc00317 	ldw	r19,12(sp)
   16560:	dc800217 	ldw	r18,8(sp)
   16564:	dc400117 	ldw	r17,4(sp)
   16568:	dc000017 	ldw	r16,0(sp)
   1656c:	dec00504 	addi	sp,sp,20
   16570:	f800283a 	ret
   16574:	880d883a 	mov	r6,r17
   16578:	04c00044 	movi	r19,1
   1657c:	8023883a 	mov	r17,r16
   16580:	3021883a 	mov	r16,r6
   16584:	003fac06 	br	16438 <__mdiff+0x3c>

00016588 <__lshift>:
   16588:	defff904 	addi	sp,sp,-28
   1658c:	28800417 	ldw	r2,16(r5)
   16590:	dc000015 	stw	r16,0(sp)
   16594:	3021d17a 	srai	r16,r6,5
   16598:	28c00217 	ldw	r3,8(r5)
   1659c:	10800044 	addi	r2,r2,1
   165a0:	dc400115 	stw	r17,4(sp)
   165a4:	80a3883a 	add	r17,r16,r2
   165a8:	dd400515 	stw	r21,20(sp)
   165ac:	dd000415 	stw	r20,16(sp)
   165b0:	dc800215 	stw	r18,8(sp)
   165b4:	dfc00615 	stw	ra,24(sp)
   165b8:	2825883a 	mov	r18,r5
   165bc:	dcc00315 	stw	r19,12(sp)
   165c0:	3029883a 	mov	r20,r6
   165c4:	202b883a 	mov	r21,r4
   165c8:	29400117 	ldw	r5,4(r5)
   165cc:	1c40030e 	bge	r3,r17,165dc <__lshift+0x54>
   165d0:	18c7883a 	add	r3,r3,r3
   165d4:	29400044 	addi	r5,r5,1
   165d8:	1c7ffd16 	blt	r3,r17,165d0 <__lshift+0x48>
   165dc:	a809883a 	mov	r4,r21
   165e0:	00161c40 	call	161c4 <_Balloc>
   165e4:	1027883a 	mov	r19,r2
   165e8:	11400504 	addi	r5,r2,20
   165ec:	0400090e 	bge	zero,r16,16614 <__lshift+0x8c>
   165f0:	2805883a 	mov	r2,r5
   165f4:	0007883a 	mov	r3,zero
   165f8:	18c00044 	addi	r3,r3,1
   165fc:	10000015 	stw	zero,0(r2)
   16600:	10800104 	addi	r2,r2,4
   16604:	80fffc1e 	bne	r16,r3,165f8 <__lshift+0x70>
   16608:	8405883a 	add	r2,r16,r16
   1660c:	1085883a 	add	r2,r2,r2
   16610:	288b883a 	add	r5,r5,r2
   16614:	90800417 	ldw	r2,16(r18)
   16618:	91000504 	addi	r4,r18,20
   1661c:	a18007cc 	andi	r6,r20,31
   16620:	1085883a 	add	r2,r2,r2
   16624:	1085883a 	add	r2,r2,r2
   16628:	208f883a 	add	r7,r4,r2
   1662c:	30001e26 	beq	r6,zero,166a8 <__lshift+0x120>
   16630:	00800804 	movi	r2,32
   16634:	1191c83a 	sub	r8,r2,r6
   16638:	0007883a 	mov	r3,zero
   1663c:	20800017 	ldw	r2,0(r4)
   16640:	1184983a 	sll	r2,r2,r6
   16644:	1884b03a 	or	r2,r3,r2
   16648:	28800015 	stw	r2,0(r5)
   1664c:	20c00017 	ldw	r3,0(r4)
   16650:	21000104 	addi	r4,r4,4
   16654:	29400104 	addi	r5,r5,4
   16658:	1a06d83a 	srl	r3,r3,r8
   1665c:	21fff736 	bltu	r4,r7,1663c <__lshift+0xb4>
   16660:	28c00015 	stw	r3,0(r5)
   16664:	18000126 	beq	r3,zero,1666c <__lshift+0xe4>
   16668:	8c400044 	addi	r17,r17,1
   1666c:	88bfffc4 	addi	r2,r17,-1
   16670:	98800415 	stw	r2,16(r19)
   16674:	a809883a 	mov	r4,r21
   16678:	900b883a 	mov	r5,r18
   1667c:	0015c440 	call	15c44 <_Bfree>
   16680:	9805883a 	mov	r2,r19
   16684:	dfc00617 	ldw	ra,24(sp)
   16688:	dd400517 	ldw	r21,20(sp)
   1668c:	dd000417 	ldw	r20,16(sp)
   16690:	dcc00317 	ldw	r19,12(sp)
   16694:	dc800217 	ldw	r18,8(sp)
   16698:	dc400117 	ldw	r17,4(sp)
   1669c:	dc000017 	ldw	r16,0(sp)
   166a0:	dec00704 	addi	sp,sp,28
   166a4:	f800283a 	ret
   166a8:	20800017 	ldw	r2,0(r4)
   166ac:	21000104 	addi	r4,r4,4
   166b0:	28800015 	stw	r2,0(r5)
   166b4:	29400104 	addi	r5,r5,4
   166b8:	21ffec2e 	bgeu	r4,r7,1666c <__lshift+0xe4>
   166bc:	20800017 	ldw	r2,0(r4)
   166c0:	21000104 	addi	r4,r4,4
   166c4:	28800015 	stw	r2,0(r5)
   166c8:	29400104 	addi	r5,r5,4
   166cc:	21fff636 	bltu	r4,r7,166a8 <__lshift+0x120>
   166d0:	003fe606 	br	1666c <__lshift+0xe4>

000166d4 <__multiply>:
   166d4:	defff904 	addi	sp,sp,-28
   166d8:	dcc00315 	stw	r19,12(sp)
   166dc:	dc800215 	stw	r18,8(sp)
   166e0:	2cc00417 	ldw	r19,16(r5)
   166e4:	34800417 	ldw	r18,16(r6)
   166e8:	dd000415 	stw	r20,16(sp)
   166ec:	dc400115 	stw	r17,4(sp)
   166f0:	dfc00615 	stw	ra,24(sp)
   166f4:	dd400515 	stw	r21,20(sp)
   166f8:	dc000015 	stw	r16,0(sp)
   166fc:	2823883a 	mov	r17,r5
   16700:	3029883a 	mov	r20,r6
   16704:	9c80040e 	bge	r19,r18,16718 <__multiply+0x44>
   16708:	9027883a 	mov	r19,r18
   1670c:	2c800417 	ldw	r18,16(r5)
   16710:	2829883a 	mov	r20,r5
   16714:	3023883a 	mov	r17,r6
   16718:	88800217 	ldw	r2,8(r17)
   1671c:	9ca1883a 	add	r16,r19,r18
   16720:	89400117 	ldw	r5,4(r17)
   16724:	1400010e 	bge	r2,r16,1672c <__multiply+0x58>
   16728:	29400044 	addi	r5,r5,1
   1672c:	00161c40 	call	161c4 <_Balloc>
   16730:	102b883a 	mov	r21,r2
   16734:	8405883a 	add	r2,r16,r16
   16738:	1085883a 	add	r2,r2,r2
   1673c:	a9000504 	addi	r4,r21,20
   16740:	209d883a 	add	r14,r4,r2
   16744:	2380042e 	bgeu	r4,r14,16758 <__multiply+0x84>
   16748:	2005883a 	mov	r2,r4
   1674c:	10000015 	stw	zero,0(r2)
   16750:	10800104 	addi	r2,r2,4
   16754:	13bffd36 	bltu	r2,r14,1674c <__multiply+0x78>
   16758:	9485883a 	add	r2,r18,r18
   1675c:	9cc7883a 	add	r3,r19,r19
   16760:	a1800504 	addi	r6,r20,20
   16764:	1085883a 	add	r2,r2,r2
   16768:	8b400504 	addi	r13,r17,20
   1676c:	18c7883a 	add	r3,r3,r3
   16770:	309f883a 	add	r15,r6,r2
   16774:	68d7883a 	add	r11,r13,r3
   16778:	33c03b2e 	bgeu	r6,r15,16868 <__multiply+0x194>
   1677c:	2019883a 	mov	r12,r4
   16780:	30800017 	ldw	r2,0(r6)
   16784:	127fffcc 	andi	r9,r2,65535
   16788:	48001826 	beq	r9,zero,167ec <__multiply+0x118>
   1678c:	6811883a 	mov	r8,r13
   16790:	600f883a 	mov	r7,r12
   16794:	0015883a 	mov	r10,zero
   16798:	40c00017 	ldw	r3,0(r8)
   1679c:	39400017 	ldw	r5,0(r7)
   167a0:	42000104 	addi	r8,r8,4
   167a4:	193fffcc 	andi	r4,r3,65535
   167a8:	4909383a 	mul	r4,r9,r4
   167ac:	1806d43a 	srli	r3,r3,16
   167b0:	28bfffcc 	andi	r2,r5,65535
   167b4:	5085883a 	add	r2,r10,r2
   167b8:	2089883a 	add	r4,r4,r2
   167bc:	48c7383a 	mul	r3,r9,r3
   167c0:	280ad43a 	srli	r5,r5,16
   167c4:	2004d43a 	srli	r2,r4,16
   167c8:	3900000d 	sth	r4,0(r7)
   167cc:	1947883a 	add	r3,r3,r5
   167d0:	10c5883a 	add	r2,r2,r3
   167d4:	3880008d 	sth	r2,2(r7)
   167d8:	1014d43a 	srli	r10,r2,16
   167dc:	39c00104 	addi	r7,r7,4
   167e0:	42ffed36 	bltu	r8,r11,16798 <__multiply+0xc4>
   167e4:	3a800015 	stw	r10,0(r7)
   167e8:	30800017 	ldw	r2,0(r6)
   167ec:	1012d43a 	srli	r9,r2,16
   167f0:	48001926 	beq	r9,zero,16858 <__multiply+0x184>
   167f4:	60800017 	ldw	r2,0(r12)
   167f8:	6811883a 	mov	r8,r13
   167fc:	600f883a 	mov	r7,r12
   16800:	0015883a 	mov	r10,zero
   16804:	100b883a 	mov	r5,r2
   16808:	41000017 	ldw	r4,0(r8)
   1680c:	2806d43a 	srli	r3,r5,16
   16810:	3880000d 	sth	r2,0(r7)
   16814:	20bfffcc 	andi	r2,r4,65535
   16818:	4885383a 	mul	r2,r9,r2
   1681c:	50c7883a 	add	r3,r10,r3
   16820:	2008d43a 	srli	r4,r4,16
   16824:	10c5883a 	add	r2,r2,r3
   16828:	3880008d 	sth	r2,2(r7)
   1682c:	39c00104 	addi	r7,r7,4
   16830:	39400017 	ldw	r5,0(r7)
   16834:	4909383a 	mul	r4,r9,r4
   16838:	1004d43a 	srli	r2,r2,16
   1683c:	28ffffcc 	andi	r3,r5,65535
   16840:	20c9883a 	add	r4,r4,r3
   16844:	1105883a 	add	r2,r2,r4
   16848:	42000104 	addi	r8,r8,4
   1684c:	1014d43a 	srli	r10,r2,16
   16850:	42ffed36 	bltu	r8,r11,16808 <__multiply+0x134>
   16854:	38800015 	stw	r2,0(r7)
   16858:	31800104 	addi	r6,r6,4
   1685c:	33c0022e 	bgeu	r6,r15,16868 <__multiply+0x194>
   16860:	63000104 	addi	r12,r12,4
   16864:	003fc606 	br	16780 <__multiply+0xac>
   16868:	0400090e 	bge	zero,r16,16890 <__multiply+0x1bc>
   1686c:	70bfff17 	ldw	r2,-4(r14)
   16870:	70ffff04 	addi	r3,r14,-4
   16874:	10000326 	beq	r2,zero,16884 <__multiply+0x1b0>
   16878:	00000506 	br	16890 <__multiply+0x1bc>
   1687c:	18800017 	ldw	r2,0(r3)
   16880:	1000031e 	bne	r2,zero,16890 <__multiply+0x1bc>
   16884:	843fffc4 	addi	r16,r16,-1
   16888:	18ffff04 	addi	r3,r3,-4
   1688c:	803ffb1e 	bne	r16,zero,1687c <__multiply+0x1a8>
   16890:	a805883a 	mov	r2,r21
   16894:	ac000415 	stw	r16,16(r21)
   16898:	dfc00617 	ldw	ra,24(sp)
   1689c:	dd400517 	ldw	r21,20(sp)
   168a0:	dd000417 	ldw	r20,16(sp)
   168a4:	dcc00317 	ldw	r19,12(sp)
   168a8:	dc800217 	ldw	r18,8(sp)
   168ac:	dc400117 	ldw	r17,4(sp)
   168b0:	dc000017 	ldw	r16,0(sp)
   168b4:	dec00704 	addi	sp,sp,28
   168b8:	f800283a 	ret

000168bc <__i2b>:
   168bc:	defffd04 	addi	sp,sp,-12
   168c0:	dc000015 	stw	r16,0(sp)
   168c4:	04000044 	movi	r16,1
   168c8:	dc800115 	stw	r18,4(sp)
   168cc:	2825883a 	mov	r18,r5
   168d0:	800b883a 	mov	r5,r16
   168d4:	dfc00215 	stw	ra,8(sp)
   168d8:	00161c40 	call	161c4 <_Balloc>
   168dc:	14000415 	stw	r16,16(r2)
   168e0:	14800515 	stw	r18,20(r2)
   168e4:	dfc00217 	ldw	ra,8(sp)
   168e8:	dc800117 	ldw	r18,4(sp)
   168ec:	dc000017 	ldw	r16,0(sp)
   168f0:	dec00304 	addi	sp,sp,12
   168f4:	f800283a 	ret

000168f8 <__multadd>:
   168f8:	defffa04 	addi	sp,sp,-24
   168fc:	dc800215 	stw	r18,8(sp)
   16900:	2c800417 	ldw	r18,16(r5)
   16904:	dd000415 	stw	r20,16(sp)
   16908:	dcc00315 	stw	r19,12(sp)
   1690c:	dc000015 	stw	r16,0(sp)
   16910:	dfc00515 	stw	ra,20(sp)
   16914:	3821883a 	mov	r16,r7
   16918:	dc400115 	stw	r17,4(sp)
   1691c:	2827883a 	mov	r19,r5
   16920:	2029883a 	mov	r20,r4
   16924:	2a000504 	addi	r8,r5,20
   16928:	000f883a 	mov	r7,zero
   1692c:	40800017 	ldw	r2,0(r8)
   16930:	39c00044 	addi	r7,r7,1
   16934:	10ffffcc 	andi	r3,r2,65535
   16938:	1987383a 	mul	r3,r3,r6
   1693c:	1004d43a 	srli	r2,r2,16
   16940:	1c07883a 	add	r3,r3,r16
   16944:	180ad43a 	srli	r5,r3,16
   16948:	1185383a 	mul	r2,r2,r6
   1694c:	18ffffcc 	andi	r3,r3,65535
   16950:	1145883a 	add	r2,r2,r5
   16954:	1008943a 	slli	r4,r2,16
   16958:	1020d43a 	srli	r16,r2,16
   1695c:	20c9883a 	add	r4,r4,r3
   16960:	41000015 	stw	r4,0(r8)
   16964:	42000104 	addi	r8,r8,4
   16968:	3cbff016 	blt	r7,r18,1692c <__multadd+0x34>
   1696c:	80000826 	beq	r16,zero,16990 <__multadd+0x98>
   16970:	98800217 	ldw	r2,8(r19)
   16974:	90800f0e 	bge	r18,r2,169b4 <__multadd+0xbc>
   16978:	9485883a 	add	r2,r18,r18
   1697c:	1085883a 	add	r2,r2,r2
   16980:	14c5883a 	add	r2,r2,r19
   16984:	90c00044 	addi	r3,r18,1
   16988:	14000515 	stw	r16,20(r2)
   1698c:	98c00415 	stw	r3,16(r19)
   16990:	9805883a 	mov	r2,r19
   16994:	dfc00517 	ldw	ra,20(sp)
   16998:	dd000417 	ldw	r20,16(sp)
   1699c:	dcc00317 	ldw	r19,12(sp)
   169a0:	dc800217 	ldw	r18,8(sp)
   169a4:	dc400117 	ldw	r17,4(sp)
   169a8:	dc000017 	ldw	r16,0(sp)
   169ac:	dec00604 	addi	sp,sp,24
   169b0:	f800283a 	ret
   169b4:	99400117 	ldw	r5,4(r19)
   169b8:	a009883a 	mov	r4,r20
   169bc:	29400044 	addi	r5,r5,1
   169c0:	00161c40 	call	161c4 <_Balloc>
   169c4:	99800417 	ldw	r6,16(r19)
   169c8:	99400304 	addi	r5,r19,12
   169cc:	11000304 	addi	r4,r2,12
   169d0:	318d883a 	add	r6,r6,r6
   169d4:	318d883a 	add	r6,r6,r6
   169d8:	31800204 	addi	r6,r6,8
   169dc:	1023883a 	mov	r17,r2
   169e0:	0015a2c0 	call	15a2c <memcpy>
   169e4:	980b883a 	mov	r5,r19
   169e8:	a009883a 	mov	r4,r20
   169ec:	0015c440 	call	15c44 <_Bfree>
   169f0:	8827883a 	mov	r19,r17
   169f4:	003fe006 	br	16978 <__multadd+0x80>

000169f8 <__pow5mult>:
   169f8:	defffa04 	addi	sp,sp,-24
   169fc:	308000cc 	andi	r2,r6,3
   16a00:	dd000415 	stw	r20,16(sp)
   16a04:	dcc00315 	stw	r19,12(sp)
   16a08:	dc000015 	stw	r16,0(sp)
   16a0c:	dfc00515 	stw	ra,20(sp)
   16a10:	dc800215 	stw	r18,8(sp)
   16a14:	dc400115 	stw	r17,4(sp)
   16a18:	3021883a 	mov	r16,r6
   16a1c:	2027883a 	mov	r19,r4
   16a20:	2829883a 	mov	r20,r5
   16a24:	10002b1e 	bne	r2,zero,16ad4 <__pow5mult+0xdc>
   16a28:	8025d0ba 	srai	r18,r16,2
   16a2c:	90001b26 	beq	r18,zero,16a9c <__pow5mult+0xa4>
   16a30:	9c001217 	ldw	r16,72(r19)
   16a34:	8000081e 	bne	r16,zero,16a58 <__pow5mult+0x60>
   16a38:	00003006 	br	16afc <__pow5mult+0x104>
   16a3c:	800b883a 	mov	r5,r16
   16a40:	800d883a 	mov	r6,r16
   16a44:	9809883a 	mov	r4,r19
   16a48:	90001426 	beq	r18,zero,16a9c <__pow5mult+0xa4>
   16a4c:	80800017 	ldw	r2,0(r16)
   16a50:	10001b26 	beq	r2,zero,16ac0 <__pow5mult+0xc8>
   16a54:	1021883a 	mov	r16,r2
   16a58:	9080004c 	andi	r2,r18,1
   16a5c:	1005003a 	cmpeq	r2,r2,zero
   16a60:	9025d07a 	srai	r18,r18,1
   16a64:	800d883a 	mov	r6,r16
   16a68:	9809883a 	mov	r4,r19
   16a6c:	a00b883a 	mov	r5,r20
   16a70:	103ff21e 	bne	r2,zero,16a3c <__pow5mult+0x44>
   16a74:	00166d40 	call	166d4 <__multiply>
   16a78:	a00b883a 	mov	r5,r20
   16a7c:	9809883a 	mov	r4,r19
   16a80:	1023883a 	mov	r17,r2
   16a84:	0015c440 	call	15c44 <_Bfree>
   16a88:	8829883a 	mov	r20,r17
   16a8c:	800b883a 	mov	r5,r16
   16a90:	800d883a 	mov	r6,r16
   16a94:	9809883a 	mov	r4,r19
   16a98:	903fec1e 	bne	r18,zero,16a4c <__pow5mult+0x54>
   16a9c:	a005883a 	mov	r2,r20
   16aa0:	dfc00517 	ldw	ra,20(sp)
   16aa4:	dd000417 	ldw	r20,16(sp)
   16aa8:	dcc00317 	ldw	r19,12(sp)
   16aac:	dc800217 	ldw	r18,8(sp)
   16ab0:	dc400117 	ldw	r17,4(sp)
   16ab4:	dc000017 	ldw	r16,0(sp)
   16ab8:	dec00604 	addi	sp,sp,24
   16abc:	f800283a 	ret
   16ac0:	00166d40 	call	166d4 <__multiply>
   16ac4:	80800015 	stw	r2,0(r16)
   16ac8:	1021883a 	mov	r16,r2
   16acc:	10000015 	stw	zero,0(r2)
   16ad0:	003fe106 	br	16a58 <__pow5mult+0x60>
   16ad4:	1085883a 	add	r2,r2,r2
   16ad8:	00c000f4 	movhi	r3,3
   16adc:	18e0c204 	addi	r3,r3,-31992
   16ae0:	1085883a 	add	r2,r2,r2
   16ae4:	10c5883a 	add	r2,r2,r3
   16ae8:	11bfff17 	ldw	r6,-4(r2)
   16aec:	000f883a 	mov	r7,zero
   16af0:	00168f80 	call	168f8 <__multadd>
   16af4:	1029883a 	mov	r20,r2
   16af8:	003fcb06 	br	16a28 <__pow5mult+0x30>
   16afc:	9809883a 	mov	r4,r19
   16b00:	01409c44 	movi	r5,625
   16b04:	00168bc0 	call	168bc <__i2b>
   16b08:	98801215 	stw	r2,72(r19)
   16b0c:	1021883a 	mov	r16,r2
   16b10:	10000015 	stw	zero,0(r2)
   16b14:	003fd006 	br	16a58 <__pow5mult+0x60>

00016b18 <__s2b>:
   16b18:	defff904 	addi	sp,sp,-28
   16b1c:	dcc00315 	stw	r19,12(sp)
   16b20:	dc800215 	stw	r18,8(sp)
   16b24:	2827883a 	mov	r19,r5
   16b28:	2025883a 	mov	r18,r4
   16b2c:	01400244 	movi	r5,9
   16b30:	39000204 	addi	r4,r7,8
   16b34:	dd000415 	stw	r20,16(sp)
   16b38:	dc400115 	stw	r17,4(sp)
   16b3c:	dfc00615 	stw	ra,24(sp)
   16b40:	dd400515 	stw	r21,20(sp)
   16b44:	dc000015 	stw	r16,0(sp)
   16b48:	3829883a 	mov	r20,r7
   16b4c:	3023883a 	mov	r17,r6
   16b50:	00105c40 	call	105c4 <__divsi3>
   16b54:	00c00044 	movi	r3,1
   16b58:	1880350e 	bge	r3,r2,16c30 <__s2b+0x118>
   16b5c:	000b883a 	mov	r5,zero
   16b60:	18c7883a 	add	r3,r3,r3
   16b64:	29400044 	addi	r5,r5,1
   16b68:	18bffd16 	blt	r3,r2,16b60 <__s2b+0x48>
   16b6c:	9009883a 	mov	r4,r18
   16b70:	00161c40 	call	161c4 <_Balloc>
   16b74:	1011883a 	mov	r8,r2
   16b78:	d8800717 	ldw	r2,28(sp)
   16b7c:	00c00044 	movi	r3,1
   16b80:	01800244 	movi	r6,9
   16b84:	40800515 	stw	r2,20(r8)
   16b88:	40c00415 	stw	r3,16(r8)
   16b8c:	3440260e 	bge	r6,r17,16c28 <__s2b+0x110>
   16b90:	3021883a 	mov	r16,r6
   16b94:	99ab883a 	add	r21,r19,r6
   16b98:	9c05883a 	add	r2,r19,r16
   16b9c:	11c00007 	ldb	r7,0(r2)
   16ba0:	400b883a 	mov	r5,r8
   16ba4:	9009883a 	mov	r4,r18
   16ba8:	39fff404 	addi	r7,r7,-48
   16bac:	01800284 	movi	r6,10
   16bb0:	00168f80 	call	168f8 <__multadd>
   16bb4:	84000044 	addi	r16,r16,1
   16bb8:	1011883a 	mov	r8,r2
   16bbc:	8c3ff61e 	bne	r17,r16,16b98 <__s2b+0x80>
   16bc0:	ac45883a 	add	r2,r21,r17
   16bc4:	117ffe04 	addi	r5,r2,-8
   16bc8:	880d883a 	mov	r6,r17
   16bcc:	35000c0e 	bge	r6,r20,16c00 <__s2b+0xe8>
   16bd0:	a185c83a 	sub	r2,r20,r6
   16bd4:	2821883a 	mov	r16,r5
   16bd8:	28a3883a 	add	r17,r5,r2
   16bdc:	81c00007 	ldb	r7,0(r16)
   16be0:	400b883a 	mov	r5,r8
   16be4:	9009883a 	mov	r4,r18
   16be8:	39fff404 	addi	r7,r7,-48
   16bec:	01800284 	movi	r6,10
   16bf0:	00168f80 	call	168f8 <__multadd>
   16bf4:	84000044 	addi	r16,r16,1
   16bf8:	1011883a 	mov	r8,r2
   16bfc:	847ff71e 	bne	r16,r17,16bdc <__s2b+0xc4>
   16c00:	4005883a 	mov	r2,r8
   16c04:	dfc00617 	ldw	ra,24(sp)
   16c08:	dd400517 	ldw	r21,20(sp)
   16c0c:	dd000417 	ldw	r20,16(sp)
   16c10:	dcc00317 	ldw	r19,12(sp)
   16c14:	dc800217 	ldw	r18,8(sp)
   16c18:	dc400117 	ldw	r17,4(sp)
   16c1c:	dc000017 	ldw	r16,0(sp)
   16c20:	dec00704 	addi	sp,sp,28
   16c24:	f800283a 	ret
   16c28:	99400284 	addi	r5,r19,10
   16c2c:	003fe706 	br	16bcc <__s2b+0xb4>
   16c30:	000b883a 	mov	r5,zero
   16c34:	003fcd06 	br	16b6c <__s2b+0x54>

00016c38 <_realloc_r>:
   16c38:	defff404 	addi	sp,sp,-48
   16c3c:	dd800815 	stw	r22,32(sp)
   16c40:	dc800415 	stw	r18,16(sp)
   16c44:	dc400315 	stw	r17,12(sp)
   16c48:	dfc00b15 	stw	ra,44(sp)
   16c4c:	df000a15 	stw	fp,40(sp)
   16c50:	ddc00915 	stw	r23,36(sp)
   16c54:	dd400715 	stw	r21,28(sp)
   16c58:	dd000615 	stw	r20,24(sp)
   16c5c:	dcc00515 	stw	r19,20(sp)
   16c60:	dc000215 	stw	r16,8(sp)
   16c64:	2825883a 	mov	r18,r5
   16c68:	3023883a 	mov	r17,r6
   16c6c:	202d883a 	mov	r22,r4
   16c70:	2800c926 	beq	r5,zero,16f98 <_realloc_r+0x360>
   16c74:	001a3100 	call	1a310 <__malloc_lock>
   16c78:	943ffe04 	addi	r16,r18,-8
   16c7c:	88c002c4 	addi	r3,r17,11
   16c80:	00800584 	movi	r2,22
   16c84:	82000117 	ldw	r8,4(r16)
   16c88:	10c01b2e 	bgeu	r2,r3,16cf8 <_realloc_r+0xc0>
   16c8c:	00bffe04 	movi	r2,-8
   16c90:	188e703a 	and	r7,r3,r2
   16c94:	3839883a 	mov	fp,r7
   16c98:	38001a16 	blt	r7,zero,16d04 <_realloc_r+0xcc>
   16c9c:	e4401936 	bltu	fp,r17,16d04 <_realloc_r+0xcc>
   16ca0:	013fff04 	movi	r4,-4
   16ca4:	4126703a 	and	r19,r8,r4
   16ca8:	99c02616 	blt	r19,r7,16d44 <_realloc_r+0x10c>
   16cac:	802b883a 	mov	r21,r16
   16cb0:	9829883a 	mov	r20,r19
   16cb4:	84000204 	addi	r16,r16,8
   16cb8:	a80f883a 	mov	r7,r21
   16cbc:	a70dc83a 	sub	r6,r20,fp
   16cc0:	008003c4 	movi	r2,15
   16cc4:	1180c136 	bltu	r2,r6,16fcc <_realloc_r+0x394>
   16cc8:	38800117 	ldw	r2,4(r7)
   16ccc:	a549883a 	add	r4,r20,r21
   16cd0:	1080004c 	andi	r2,r2,1
   16cd4:	a084b03a 	or	r2,r20,r2
   16cd8:	38800115 	stw	r2,4(r7)
   16cdc:	20c00117 	ldw	r3,4(r4)
   16ce0:	18c00054 	ori	r3,r3,1
   16ce4:	20c00115 	stw	r3,4(r4)
   16ce8:	b009883a 	mov	r4,r22
   16cec:	001a3300 	call	1a330 <__malloc_unlock>
   16cf0:	8023883a 	mov	r17,r16
   16cf4:	00000606 	br	16d10 <_realloc_r+0xd8>
   16cf8:	01c00404 	movi	r7,16
   16cfc:	3839883a 	mov	fp,r7
   16d00:	e47fe72e 	bgeu	fp,r17,16ca0 <_realloc_r+0x68>
   16d04:	00800304 	movi	r2,12
   16d08:	0023883a 	mov	r17,zero
   16d0c:	b0800015 	stw	r2,0(r22)
   16d10:	8805883a 	mov	r2,r17
   16d14:	dfc00b17 	ldw	ra,44(sp)
   16d18:	df000a17 	ldw	fp,40(sp)
   16d1c:	ddc00917 	ldw	r23,36(sp)
   16d20:	dd800817 	ldw	r22,32(sp)
   16d24:	dd400717 	ldw	r21,28(sp)
   16d28:	dd000617 	ldw	r20,24(sp)
   16d2c:	dcc00517 	ldw	r19,20(sp)
   16d30:	dc800417 	ldw	r18,16(sp)
   16d34:	dc400317 	ldw	r17,12(sp)
   16d38:	dc000217 	ldw	r16,8(sp)
   16d3c:	dec00c04 	addi	sp,sp,48
   16d40:	f800283a 	ret
   16d44:	008000f4 	movhi	r2,3
   16d48:	10a21a04 	addi	r2,r2,-30616
   16d4c:	12400217 	ldw	r9,8(r2)
   16d50:	84cd883a 	add	r6,r16,r19
   16d54:	802b883a 	mov	r21,r16
   16d58:	3240b926 	beq	r6,r9,17040 <_realloc_r+0x408>
   16d5c:	31400117 	ldw	r5,4(r6)
   16d60:	00bfff84 	movi	r2,-2
   16d64:	2884703a 	and	r2,r5,r2
   16d68:	1185883a 	add	r2,r2,r6
   16d6c:	10c00117 	ldw	r3,4(r2)
   16d70:	18c0004c 	andi	r3,r3,1
   16d74:	1807003a 	cmpeq	r3,r3,zero
   16d78:	1800a326 	beq	r3,zero,17008 <_realloc_r+0x3d0>
   16d7c:	2908703a 	and	r4,r5,r4
   16d80:	9929883a 	add	r20,r19,r4
   16d84:	a1c0a30e 	bge	r20,r7,17014 <_realloc_r+0x3dc>
   16d88:	4080004c 	andi	r2,r8,1
   16d8c:	1000551e 	bne	r2,zero,16ee4 <_realloc_r+0x2ac>
   16d90:	80800017 	ldw	r2,0(r16)
   16d94:	80afc83a 	sub	r23,r16,r2
   16d98:	b8c00117 	ldw	r3,4(r23)
   16d9c:	00bfff04 	movi	r2,-4
   16da0:	1884703a 	and	r2,r3,r2
   16da4:	30002e26 	beq	r6,zero,16e60 <_realloc_r+0x228>
   16da8:	3240b926 	beq	r6,r9,17090 <_realloc_r+0x458>
   16dac:	98a9883a 	add	r20,r19,r2
   16db0:	2509883a 	add	r4,r4,r20
   16db4:	d9000015 	stw	r4,0(sp)
   16db8:	21c02a16 	blt	r4,r7,16e64 <_realloc_r+0x22c>
   16dbc:	30800317 	ldw	r2,12(r6)
   16dc0:	30c00217 	ldw	r3,8(r6)
   16dc4:	01400904 	movi	r5,36
   16dc8:	99bfff04 	addi	r6,r19,-4
   16dcc:	18800315 	stw	r2,12(r3)
   16dd0:	10c00215 	stw	r3,8(r2)
   16dd4:	b9000317 	ldw	r4,12(r23)
   16dd8:	b8800217 	ldw	r2,8(r23)
   16ddc:	b82b883a 	mov	r21,r23
   16de0:	bc000204 	addi	r16,r23,8
   16de4:	20800215 	stw	r2,8(r4)
   16de8:	11000315 	stw	r4,12(r2)
   16dec:	2980e436 	bltu	r5,r6,17180 <_realloc_r+0x548>
   16df0:	008004c4 	movi	r2,19
   16df4:	9009883a 	mov	r4,r18
   16df8:	8011883a 	mov	r8,r16
   16dfc:	11800f2e 	bgeu	r2,r6,16e3c <_realloc_r+0x204>
   16e00:	90800017 	ldw	r2,0(r18)
   16e04:	ba000404 	addi	r8,r23,16
   16e08:	91000204 	addi	r4,r18,8
   16e0c:	b8800215 	stw	r2,8(r23)
   16e10:	90c00117 	ldw	r3,4(r18)
   16e14:	008006c4 	movi	r2,27
   16e18:	b8c00315 	stw	r3,12(r23)
   16e1c:	1180072e 	bgeu	r2,r6,16e3c <_realloc_r+0x204>
   16e20:	90c00217 	ldw	r3,8(r18)
   16e24:	ba000604 	addi	r8,r23,24
   16e28:	91000404 	addi	r4,r18,16
   16e2c:	b8c00415 	stw	r3,16(r23)
   16e30:	90800317 	ldw	r2,12(r18)
   16e34:	b8800515 	stw	r2,20(r23)
   16e38:	3140e726 	beq	r6,r5,171d8 <_realloc_r+0x5a0>
   16e3c:	20800017 	ldw	r2,0(r4)
   16e40:	dd000017 	ldw	r20,0(sp)
   16e44:	b80f883a 	mov	r7,r23
   16e48:	40800015 	stw	r2,0(r8)
   16e4c:	20c00117 	ldw	r3,4(r4)
   16e50:	40c00115 	stw	r3,4(r8)
   16e54:	20800217 	ldw	r2,8(r4)
   16e58:	40800215 	stw	r2,8(r8)
   16e5c:	003f9706 	br	16cbc <_realloc_r+0x84>
   16e60:	98a9883a 	add	r20,r19,r2
   16e64:	a1c01f16 	blt	r20,r7,16ee4 <_realloc_r+0x2ac>
   16e68:	b8c00317 	ldw	r3,12(r23)
   16e6c:	b8800217 	ldw	r2,8(r23)
   16e70:	99bfff04 	addi	r6,r19,-4
   16e74:	01400904 	movi	r5,36
   16e78:	b82b883a 	mov	r21,r23
   16e7c:	18800215 	stw	r2,8(r3)
   16e80:	10c00315 	stw	r3,12(r2)
   16e84:	bc000204 	addi	r16,r23,8
   16e88:	2980c336 	bltu	r5,r6,17198 <_realloc_r+0x560>
   16e8c:	008004c4 	movi	r2,19
   16e90:	9009883a 	mov	r4,r18
   16e94:	8011883a 	mov	r8,r16
   16e98:	11800f2e 	bgeu	r2,r6,16ed8 <_realloc_r+0x2a0>
   16e9c:	90800017 	ldw	r2,0(r18)
   16ea0:	ba000404 	addi	r8,r23,16
   16ea4:	91000204 	addi	r4,r18,8
   16ea8:	b8800215 	stw	r2,8(r23)
   16eac:	90c00117 	ldw	r3,4(r18)
   16eb0:	008006c4 	movi	r2,27
   16eb4:	b8c00315 	stw	r3,12(r23)
   16eb8:	1180072e 	bgeu	r2,r6,16ed8 <_realloc_r+0x2a0>
   16ebc:	90c00217 	ldw	r3,8(r18)
   16ec0:	ba000604 	addi	r8,r23,24
   16ec4:	91000404 	addi	r4,r18,16
   16ec8:	b8c00415 	stw	r3,16(r23)
   16ecc:	90800317 	ldw	r2,12(r18)
   16ed0:	b8800515 	stw	r2,20(r23)
   16ed4:	3140c726 	beq	r6,r5,171f4 <_realloc_r+0x5bc>
   16ed8:	20800017 	ldw	r2,0(r4)
   16edc:	b80f883a 	mov	r7,r23
   16ee0:	003fd906 	br	16e48 <_realloc_r+0x210>
   16ee4:	880b883a 	mov	r5,r17
   16ee8:	b009883a 	mov	r4,r22
   16eec:	00152080 	call	15208 <_malloc_r>
   16ef0:	1023883a 	mov	r17,r2
   16ef4:	10002526 	beq	r2,zero,16f8c <_realloc_r+0x354>
   16ef8:	80800117 	ldw	r2,4(r16)
   16efc:	00ffff84 	movi	r3,-2
   16f00:	893ffe04 	addi	r4,r17,-8
   16f04:	10c4703a 	and	r2,r2,r3
   16f08:	8085883a 	add	r2,r16,r2
   16f0c:	20809526 	beq	r4,r2,17164 <_realloc_r+0x52c>
   16f10:	99bfff04 	addi	r6,r19,-4
   16f14:	01c00904 	movi	r7,36
   16f18:	39804536 	bltu	r7,r6,17030 <_realloc_r+0x3f8>
   16f1c:	008004c4 	movi	r2,19
   16f20:	9009883a 	mov	r4,r18
   16f24:	880b883a 	mov	r5,r17
   16f28:	11800f2e 	bgeu	r2,r6,16f68 <_realloc_r+0x330>
   16f2c:	90800017 	ldw	r2,0(r18)
   16f30:	89400204 	addi	r5,r17,8
   16f34:	91000204 	addi	r4,r18,8
   16f38:	88800015 	stw	r2,0(r17)
   16f3c:	90c00117 	ldw	r3,4(r18)
   16f40:	008006c4 	movi	r2,27
   16f44:	88c00115 	stw	r3,4(r17)
   16f48:	1180072e 	bgeu	r2,r6,16f68 <_realloc_r+0x330>
   16f4c:	90c00217 	ldw	r3,8(r18)
   16f50:	89400404 	addi	r5,r17,16
   16f54:	91000404 	addi	r4,r18,16
   16f58:	88c00215 	stw	r3,8(r17)
   16f5c:	90800317 	ldw	r2,12(r18)
   16f60:	88800315 	stw	r2,12(r17)
   16f64:	31c09126 	beq	r6,r7,171ac <_realloc_r+0x574>
   16f68:	20800017 	ldw	r2,0(r4)
   16f6c:	28800015 	stw	r2,0(r5)
   16f70:	20c00117 	ldw	r3,4(r4)
   16f74:	28c00115 	stw	r3,4(r5)
   16f78:	20800217 	ldw	r2,8(r4)
   16f7c:	28800215 	stw	r2,8(r5)
   16f80:	900b883a 	mov	r5,r18
   16f84:	b009883a 	mov	r4,r22
   16f88:	00146800 	call	14680 <_free_r>
   16f8c:	b009883a 	mov	r4,r22
   16f90:	001a3300 	call	1a330 <__malloc_unlock>
   16f94:	003f5e06 	br	16d10 <_realloc_r+0xd8>
   16f98:	300b883a 	mov	r5,r6
   16f9c:	dfc00b17 	ldw	ra,44(sp)
   16fa0:	df000a17 	ldw	fp,40(sp)
   16fa4:	ddc00917 	ldw	r23,36(sp)
   16fa8:	dd800817 	ldw	r22,32(sp)
   16fac:	dd400717 	ldw	r21,28(sp)
   16fb0:	dd000617 	ldw	r20,24(sp)
   16fb4:	dcc00517 	ldw	r19,20(sp)
   16fb8:	dc800417 	ldw	r18,16(sp)
   16fbc:	dc400317 	ldw	r17,12(sp)
   16fc0:	dc000217 	ldw	r16,8(sp)
   16fc4:	dec00c04 	addi	sp,sp,48
   16fc8:	00152081 	jmpi	15208 <_malloc_r>
   16fcc:	38800117 	ldw	r2,4(r7)
   16fd0:	e54b883a 	add	r5,fp,r21
   16fd4:	31000054 	ori	r4,r6,1
   16fd8:	1080004c 	andi	r2,r2,1
   16fdc:	1704b03a 	or	r2,r2,fp
   16fe0:	38800115 	stw	r2,4(r7)
   16fe4:	29000115 	stw	r4,4(r5)
   16fe8:	2987883a 	add	r3,r5,r6
   16fec:	18800117 	ldw	r2,4(r3)
   16ff0:	29400204 	addi	r5,r5,8
   16ff4:	b009883a 	mov	r4,r22
   16ff8:	10800054 	ori	r2,r2,1
   16ffc:	18800115 	stw	r2,4(r3)
   17000:	00146800 	call	14680 <_free_r>
   17004:	003f3806 	br	16ce8 <_realloc_r+0xb0>
   17008:	000d883a 	mov	r6,zero
   1700c:	0009883a 	mov	r4,zero
   17010:	003f5d06 	br	16d88 <_realloc_r+0x150>
   17014:	30c00217 	ldw	r3,8(r6)
   17018:	30800317 	ldw	r2,12(r6)
   1701c:	800f883a 	mov	r7,r16
   17020:	84000204 	addi	r16,r16,8
   17024:	10c00215 	stw	r3,8(r2)
   17028:	18800315 	stw	r2,12(r3)
   1702c:	003f2306 	br	16cbc <_realloc_r+0x84>
   17030:	8809883a 	mov	r4,r17
   17034:	900b883a 	mov	r5,r18
   17038:	0015acc0 	call	15acc <memmove>
   1703c:	003fd006 	br	16f80 <_realloc_r+0x348>
   17040:	30800117 	ldw	r2,4(r6)
   17044:	e0c00404 	addi	r3,fp,16
   17048:	1108703a 	and	r4,r2,r4
   1704c:	9905883a 	add	r2,r19,r4
   17050:	10ff4d16 	blt	r2,r3,16d88 <_realloc_r+0x150>
   17054:	1705c83a 	sub	r2,r2,fp
   17058:	870b883a 	add	r5,r16,fp
   1705c:	10800054 	ori	r2,r2,1
   17060:	28800115 	stw	r2,4(r5)
   17064:	80c00117 	ldw	r3,4(r16)
   17068:	008000f4 	movhi	r2,3
   1706c:	10a21a04 	addi	r2,r2,-30616
   17070:	b009883a 	mov	r4,r22
   17074:	18c0004c 	andi	r3,r3,1
   17078:	e0c6b03a 	or	r3,fp,r3
   1707c:	11400215 	stw	r5,8(r2)
   17080:	80c00115 	stw	r3,4(r16)
   17084:	001a3300 	call	1a330 <__malloc_unlock>
   17088:	84400204 	addi	r17,r16,8
   1708c:	003f2006 	br	16d10 <_realloc_r+0xd8>
   17090:	98a9883a 	add	r20,r19,r2
   17094:	2509883a 	add	r4,r4,r20
   17098:	e0800404 	addi	r2,fp,16
   1709c:	d9000115 	stw	r4,4(sp)
   170a0:	20bf7016 	blt	r4,r2,16e64 <_realloc_r+0x22c>
   170a4:	b8c00317 	ldw	r3,12(r23)
   170a8:	b8800217 	ldw	r2,8(r23)
   170ac:	99bfff04 	addi	r6,r19,-4
   170b0:	01400904 	movi	r5,36
   170b4:	18800215 	stw	r2,8(r3)
   170b8:	10c00315 	stw	r3,12(r2)
   170bc:	bc400204 	addi	r17,r23,8
   170c0:	29804136 	bltu	r5,r6,171c8 <_realloc_r+0x590>
   170c4:	008004c4 	movi	r2,19
   170c8:	9009883a 	mov	r4,r18
   170cc:	880f883a 	mov	r7,r17
   170d0:	11800f2e 	bgeu	r2,r6,17110 <_realloc_r+0x4d8>
   170d4:	90800017 	ldw	r2,0(r18)
   170d8:	b9c00404 	addi	r7,r23,16
   170dc:	91000204 	addi	r4,r18,8
   170e0:	b8800215 	stw	r2,8(r23)
   170e4:	90c00117 	ldw	r3,4(r18)
   170e8:	008006c4 	movi	r2,27
   170ec:	b8c00315 	stw	r3,12(r23)
   170f0:	1180072e 	bgeu	r2,r6,17110 <_realloc_r+0x4d8>
   170f4:	90c00217 	ldw	r3,8(r18)
   170f8:	b9c00604 	addi	r7,r23,24
   170fc:	91000404 	addi	r4,r18,16
   17100:	b8c00415 	stw	r3,16(r23)
   17104:	90800317 	ldw	r2,12(r18)
   17108:	b8800515 	stw	r2,20(r23)
   1710c:	31404026 	beq	r6,r5,17210 <_realloc_r+0x5d8>
   17110:	20800017 	ldw	r2,0(r4)
   17114:	38800015 	stw	r2,0(r7)
   17118:	20c00117 	ldw	r3,4(r4)
   1711c:	38c00115 	stw	r3,4(r7)
   17120:	20800217 	ldw	r2,8(r4)
   17124:	38800215 	stw	r2,8(r7)
   17128:	d8c00117 	ldw	r3,4(sp)
   1712c:	bf0b883a 	add	r5,r23,fp
   17130:	b009883a 	mov	r4,r22
   17134:	1f05c83a 	sub	r2,r3,fp
   17138:	10800054 	ori	r2,r2,1
   1713c:	28800115 	stw	r2,4(r5)
   17140:	b8c00117 	ldw	r3,4(r23)
   17144:	008000f4 	movhi	r2,3
   17148:	10a21a04 	addi	r2,r2,-30616
   1714c:	11400215 	stw	r5,8(r2)
   17150:	18c0004c 	andi	r3,r3,1
   17154:	e0c6b03a 	or	r3,fp,r3
   17158:	b8c00115 	stw	r3,4(r23)
   1715c:	001a3300 	call	1a330 <__malloc_unlock>
   17160:	003eeb06 	br	16d10 <_realloc_r+0xd8>
   17164:	20800117 	ldw	r2,4(r4)
   17168:	00ffff04 	movi	r3,-4
   1716c:	800f883a 	mov	r7,r16
   17170:	10c4703a 	and	r2,r2,r3
   17174:	98a9883a 	add	r20,r19,r2
   17178:	84000204 	addi	r16,r16,8
   1717c:	003ecf06 	br	16cbc <_realloc_r+0x84>
   17180:	900b883a 	mov	r5,r18
   17184:	8009883a 	mov	r4,r16
   17188:	0015acc0 	call	15acc <memmove>
   1718c:	dd000017 	ldw	r20,0(sp)
   17190:	b80f883a 	mov	r7,r23
   17194:	003ec906 	br	16cbc <_realloc_r+0x84>
   17198:	900b883a 	mov	r5,r18
   1719c:	8009883a 	mov	r4,r16
   171a0:	0015acc0 	call	15acc <memmove>
   171a4:	b80f883a 	mov	r7,r23
   171a8:	003ec406 	br	16cbc <_realloc_r+0x84>
   171ac:	90c00417 	ldw	r3,16(r18)
   171b0:	89400604 	addi	r5,r17,24
   171b4:	91000604 	addi	r4,r18,24
   171b8:	88c00415 	stw	r3,16(r17)
   171bc:	90800517 	ldw	r2,20(r18)
   171c0:	88800515 	stw	r2,20(r17)
   171c4:	003f6806 	br	16f68 <_realloc_r+0x330>
   171c8:	900b883a 	mov	r5,r18
   171cc:	8809883a 	mov	r4,r17
   171d0:	0015acc0 	call	15acc <memmove>
   171d4:	003fd406 	br	17128 <_realloc_r+0x4f0>
   171d8:	90c00417 	ldw	r3,16(r18)
   171dc:	91000604 	addi	r4,r18,24
   171e0:	ba000804 	addi	r8,r23,32
   171e4:	b8c00615 	stw	r3,24(r23)
   171e8:	90800517 	ldw	r2,20(r18)
   171ec:	b8800715 	stw	r2,28(r23)
   171f0:	003f1206 	br	16e3c <_realloc_r+0x204>
   171f4:	90c00417 	ldw	r3,16(r18)
   171f8:	91000604 	addi	r4,r18,24
   171fc:	ba000804 	addi	r8,r23,32
   17200:	b8c00615 	stw	r3,24(r23)
   17204:	90800517 	ldw	r2,20(r18)
   17208:	b8800715 	stw	r2,28(r23)
   1720c:	003f3206 	br	16ed8 <_realloc_r+0x2a0>
   17210:	90c00417 	ldw	r3,16(r18)
   17214:	91000604 	addi	r4,r18,24
   17218:	b9c00804 	addi	r7,r23,32
   1721c:	b8c00615 	stw	r3,24(r23)
   17220:	90800517 	ldw	r2,20(r18)
   17224:	b8800715 	stw	r2,28(r23)
   17228:	003fb906 	br	17110 <_realloc_r+0x4d8>

0001722c <__isinfd>:
   1722c:	200d883a 	mov	r6,r4
   17230:	0109c83a 	sub	r4,zero,r4
   17234:	2188b03a 	or	r4,r4,r6
   17238:	2008d7fa 	srli	r4,r4,31
   1723c:	00a00034 	movhi	r2,32768
   17240:	10bfffc4 	addi	r2,r2,-1
   17244:	1144703a 	and	r2,r2,r5
   17248:	2088b03a 	or	r4,r4,r2
   1724c:	009ffc34 	movhi	r2,32752
   17250:	1105c83a 	sub	r2,r2,r4
   17254:	0087c83a 	sub	r3,zero,r2
   17258:	10c4b03a 	or	r2,r2,r3
   1725c:	1004d7fa 	srli	r2,r2,31
   17260:	00c00044 	movi	r3,1
   17264:	1885c83a 	sub	r2,r3,r2
   17268:	f800283a 	ret

0001726c <__isnand>:
   1726c:	200d883a 	mov	r6,r4
   17270:	0109c83a 	sub	r4,zero,r4
   17274:	2188b03a 	or	r4,r4,r6
   17278:	2008d7fa 	srli	r4,r4,31
   1727c:	00a00034 	movhi	r2,32768
   17280:	10bfffc4 	addi	r2,r2,-1
   17284:	1144703a 	and	r2,r2,r5
   17288:	2088b03a 	or	r4,r4,r2
   1728c:	009ffc34 	movhi	r2,32752
   17290:	1105c83a 	sub	r2,r2,r4
   17294:	1004d7fa 	srli	r2,r2,31
   17298:	f800283a 	ret

0001729c <_sbrk_r>:
   1729c:	defffd04 	addi	sp,sp,-12
   172a0:	dc000015 	stw	r16,0(sp)
   172a4:	040000f4 	movhi	r16,3
   172a8:	8427b904 	addi	r16,r16,-24860
   172ac:	dc400115 	stw	r17,4(sp)
   172b0:	80000015 	stw	zero,0(r16)
   172b4:	2023883a 	mov	r17,r4
   172b8:	2809883a 	mov	r4,r5
   172bc:	dfc00215 	stw	ra,8(sp)
   172c0:	001a5300 	call	1a530 <sbrk>
   172c4:	1007883a 	mov	r3,r2
   172c8:	00bfffc4 	movi	r2,-1
   172cc:	18800626 	beq	r3,r2,172e8 <_sbrk_r+0x4c>
   172d0:	1805883a 	mov	r2,r3
   172d4:	dfc00217 	ldw	ra,8(sp)
   172d8:	dc400117 	ldw	r17,4(sp)
   172dc:	dc000017 	ldw	r16,0(sp)
   172e0:	dec00304 	addi	sp,sp,12
   172e4:	f800283a 	ret
   172e8:	80800017 	ldw	r2,0(r16)
   172ec:	103ff826 	beq	r2,zero,172d0 <_sbrk_r+0x34>
   172f0:	88800015 	stw	r2,0(r17)
   172f4:	1805883a 	mov	r2,r3
   172f8:	dfc00217 	ldw	ra,8(sp)
   172fc:	dc400117 	ldw	r17,4(sp)
   17300:	dc000017 	ldw	r16,0(sp)
   17304:	dec00304 	addi	sp,sp,12
   17308:	f800283a 	ret

0001730c <__sclose>:
   1730c:	2940038f 	ldh	r5,14(r5)
   17310:	00176401 	jmpi	17640 <_close_r>

00017314 <__sseek>:
   17314:	defffe04 	addi	sp,sp,-8
   17318:	dc000015 	stw	r16,0(sp)
   1731c:	2821883a 	mov	r16,r5
   17320:	2940038f 	ldh	r5,14(r5)
   17324:	dfc00115 	stw	ra,4(sp)
   17328:	00178b80 	call	178b8 <_lseek_r>
   1732c:	1007883a 	mov	r3,r2
   17330:	00bfffc4 	movi	r2,-1
   17334:	18800926 	beq	r3,r2,1735c <__sseek+0x48>
   17338:	8080030b 	ldhu	r2,12(r16)
   1733c:	80c01415 	stw	r3,80(r16)
   17340:	10840014 	ori	r2,r2,4096
   17344:	8080030d 	sth	r2,12(r16)
   17348:	1805883a 	mov	r2,r3
   1734c:	dfc00117 	ldw	ra,4(sp)
   17350:	dc000017 	ldw	r16,0(sp)
   17354:	dec00204 	addi	sp,sp,8
   17358:	f800283a 	ret
   1735c:	8080030b 	ldhu	r2,12(r16)
   17360:	10bbffcc 	andi	r2,r2,61439
   17364:	8080030d 	sth	r2,12(r16)
   17368:	1805883a 	mov	r2,r3
   1736c:	dfc00117 	ldw	ra,4(sp)
   17370:	dc000017 	ldw	r16,0(sp)
   17374:	dec00204 	addi	sp,sp,8
   17378:	f800283a 	ret

0001737c <__swrite>:
   1737c:	2880030b 	ldhu	r2,12(r5)
   17380:	defffb04 	addi	sp,sp,-20
   17384:	dcc00315 	stw	r19,12(sp)
   17388:	1080400c 	andi	r2,r2,256
   1738c:	dc800215 	stw	r18,8(sp)
   17390:	dc400115 	stw	r17,4(sp)
   17394:	dc000015 	stw	r16,0(sp)
   17398:	3027883a 	mov	r19,r6
   1739c:	3825883a 	mov	r18,r7
   173a0:	dfc00415 	stw	ra,16(sp)
   173a4:	2821883a 	mov	r16,r5
   173a8:	000d883a 	mov	r6,zero
   173ac:	01c00084 	movi	r7,2
   173b0:	2023883a 	mov	r17,r4
   173b4:	10000226 	beq	r2,zero,173c0 <__swrite+0x44>
   173b8:	2940038f 	ldh	r5,14(r5)
   173bc:	00178b80 	call	178b8 <_lseek_r>
   173c0:	8080030b 	ldhu	r2,12(r16)
   173c4:	8140038f 	ldh	r5,14(r16)
   173c8:	8809883a 	mov	r4,r17
   173cc:	10bbffcc 	andi	r2,r2,61439
   173d0:	980d883a 	mov	r6,r19
   173d4:	900f883a 	mov	r7,r18
   173d8:	8080030d 	sth	r2,12(r16)
   173dc:	dfc00417 	ldw	ra,16(sp)
   173e0:	dcc00317 	ldw	r19,12(sp)
   173e4:	dc800217 	ldw	r18,8(sp)
   173e8:	dc400117 	ldw	r17,4(sp)
   173ec:	dc000017 	ldw	r16,0(sp)
   173f0:	dec00504 	addi	sp,sp,20
   173f4:	00175141 	jmpi	17514 <_write_r>

000173f8 <__sread>:
   173f8:	defffe04 	addi	sp,sp,-8
   173fc:	dc000015 	stw	r16,0(sp)
   17400:	2821883a 	mov	r16,r5
   17404:	2940038f 	ldh	r5,14(r5)
   17408:	dfc00115 	stw	ra,4(sp)
   1740c:	00179300 	call	17930 <_read_r>
   17410:	1007883a 	mov	r3,r2
   17414:	10000816 	blt	r2,zero,17438 <__sread+0x40>
   17418:	80801417 	ldw	r2,80(r16)
   1741c:	10c5883a 	add	r2,r2,r3
   17420:	80801415 	stw	r2,80(r16)
   17424:	1805883a 	mov	r2,r3
   17428:	dfc00117 	ldw	ra,4(sp)
   1742c:	dc000017 	ldw	r16,0(sp)
   17430:	dec00204 	addi	sp,sp,8
   17434:	f800283a 	ret
   17438:	8080030b 	ldhu	r2,12(r16)
   1743c:	10bbffcc 	andi	r2,r2,61439
   17440:	8080030d 	sth	r2,12(r16)
   17444:	1805883a 	mov	r2,r3
   17448:	dfc00117 	ldw	ra,4(sp)
   1744c:	dc000017 	ldw	r16,0(sp)
   17450:	dec00204 	addi	sp,sp,8
   17454:	f800283a 	ret

00017458 <strcmp>:
   17458:	2144b03a 	or	r2,r4,r5
   1745c:	108000cc 	andi	r2,r2,3
   17460:	10001d1e 	bne	r2,zero,174d8 <strcmp+0x80>
   17464:	200f883a 	mov	r7,r4
   17468:	28800017 	ldw	r2,0(r5)
   1746c:	21000017 	ldw	r4,0(r4)
   17470:	280d883a 	mov	r6,r5
   17474:	2080161e 	bne	r4,r2,174d0 <strcmp+0x78>
   17478:	023fbff4 	movhi	r8,65279
   1747c:	423fbfc4 	addi	r8,r8,-257
   17480:	2207883a 	add	r3,r4,r8
   17484:	01602074 	movhi	r5,32897
   17488:	29602004 	addi	r5,r5,-32640
   1748c:	1946703a 	and	r3,r3,r5
   17490:	0104303a 	nor	r2,zero,r4
   17494:	10c4703a 	and	r2,r2,r3
   17498:	10001c1e 	bne	r2,zero,1750c <strcmp+0xb4>
   1749c:	4013883a 	mov	r9,r8
   174a0:	2811883a 	mov	r8,r5
   174a4:	00000106 	br	174ac <strcmp+0x54>
   174a8:	1800181e 	bne	r3,zero,1750c <strcmp+0xb4>
   174ac:	39c00104 	addi	r7,r7,4
   174b0:	39000017 	ldw	r4,0(r7)
   174b4:	31800104 	addi	r6,r6,4
   174b8:	31400017 	ldw	r5,0(r6)
   174bc:	2245883a 	add	r2,r4,r9
   174c0:	1204703a 	and	r2,r2,r8
   174c4:	0106303a 	nor	r3,zero,r4
   174c8:	1886703a 	and	r3,r3,r2
   174cc:	217ff626 	beq	r4,r5,174a8 <strcmp+0x50>
   174d0:	3809883a 	mov	r4,r7
   174d4:	300b883a 	mov	r5,r6
   174d8:	20c00007 	ldb	r3,0(r4)
   174dc:	1800051e 	bne	r3,zero,174f4 <strcmp+0x9c>
   174e0:	00000606 	br	174fc <strcmp+0xa4>
   174e4:	21000044 	addi	r4,r4,1
   174e8:	20c00007 	ldb	r3,0(r4)
   174ec:	29400044 	addi	r5,r5,1
   174f0:	18000226 	beq	r3,zero,174fc <strcmp+0xa4>
   174f4:	28800007 	ldb	r2,0(r5)
   174f8:	18bffa26 	beq	r3,r2,174e4 <strcmp+0x8c>
   174fc:	20c00003 	ldbu	r3,0(r4)
   17500:	28800003 	ldbu	r2,0(r5)
   17504:	1885c83a 	sub	r2,r3,r2
   17508:	f800283a 	ret
   1750c:	0005883a 	mov	r2,zero
   17510:	f800283a 	ret

00017514 <_write_r>:
   17514:	defffd04 	addi	sp,sp,-12
   17518:	dc000015 	stw	r16,0(sp)
   1751c:	040000f4 	movhi	r16,3
   17520:	8427b904 	addi	r16,r16,-24860
   17524:	dc400115 	stw	r17,4(sp)
   17528:	80000015 	stw	zero,0(r16)
   1752c:	2023883a 	mov	r17,r4
   17530:	2809883a 	mov	r4,r5
   17534:	300b883a 	mov	r5,r6
   17538:	380d883a 	mov	r6,r7
   1753c:	dfc00215 	stw	ra,8(sp)
   17540:	001a5ec0 	call	1a5ec <write>
   17544:	1007883a 	mov	r3,r2
   17548:	00bfffc4 	movi	r2,-1
   1754c:	18800626 	beq	r3,r2,17568 <_write_r+0x54>
   17550:	1805883a 	mov	r2,r3
   17554:	dfc00217 	ldw	ra,8(sp)
   17558:	dc400117 	ldw	r17,4(sp)
   1755c:	dc000017 	ldw	r16,0(sp)
   17560:	dec00304 	addi	sp,sp,12
   17564:	f800283a 	ret
   17568:	80800017 	ldw	r2,0(r16)
   1756c:	103ff826 	beq	r2,zero,17550 <_write_r+0x3c>
   17570:	88800015 	stw	r2,0(r17)
   17574:	1805883a 	mov	r2,r3
   17578:	dfc00217 	ldw	ra,8(sp)
   1757c:	dc400117 	ldw	r17,4(sp)
   17580:	dc000017 	ldw	r16,0(sp)
   17584:	dec00304 	addi	sp,sp,12
   17588:	f800283a 	ret

0001758c <_calloc_r>:
   1758c:	298b383a 	mul	r5,r5,r6
   17590:	defffe04 	addi	sp,sp,-8
   17594:	dc000015 	stw	r16,0(sp)
   17598:	dfc00115 	stw	ra,4(sp)
   1759c:	00152080 	call	15208 <_malloc_r>
   175a0:	1021883a 	mov	r16,r2
   175a4:	01c00904 	movi	r7,36
   175a8:	10000d26 	beq	r2,zero,175e0 <_calloc_r+0x54>
   175ac:	10ffff17 	ldw	r3,-4(r2)
   175b0:	1009883a 	mov	r4,r2
   175b4:	00bfff04 	movi	r2,-4
   175b8:	1886703a 	and	r3,r3,r2
   175bc:	1887883a 	add	r3,r3,r2
   175c0:	180d883a 	mov	r6,r3
   175c4:	000b883a 	mov	r5,zero
   175c8:	38c01736 	bltu	r7,r3,17628 <_calloc_r+0x9c>
   175cc:	008004c4 	movi	r2,19
   175d0:	10c00836 	bltu	r2,r3,175f4 <_calloc_r+0x68>
   175d4:	20000215 	stw	zero,8(r4)
   175d8:	20000015 	stw	zero,0(r4)
   175dc:	20000115 	stw	zero,4(r4)
   175e0:	8005883a 	mov	r2,r16
   175e4:	dfc00117 	ldw	ra,4(sp)
   175e8:	dc000017 	ldw	r16,0(sp)
   175ec:	dec00204 	addi	sp,sp,8
   175f0:	f800283a 	ret
   175f4:	008006c4 	movi	r2,27
   175f8:	80000015 	stw	zero,0(r16)
   175fc:	80000115 	stw	zero,4(r16)
   17600:	81000204 	addi	r4,r16,8
   17604:	10fff32e 	bgeu	r2,r3,175d4 <_calloc_r+0x48>
   17608:	80000215 	stw	zero,8(r16)
   1760c:	80000315 	stw	zero,12(r16)
   17610:	81000404 	addi	r4,r16,16
   17614:	19ffef1e 	bne	r3,r7,175d4 <_calloc_r+0x48>
   17618:	81000604 	addi	r4,r16,24
   1761c:	80000415 	stw	zero,16(r16)
   17620:	80000515 	stw	zero,20(r16)
   17624:	003feb06 	br	175d4 <_calloc_r+0x48>
   17628:	0015bac0 	call	15bac <memset>
   1762c:	8005883a 	mov	r2,r16
   17630:	dfc00117 	ldw	ra,4(sp)
   17634:	dc000017 	ldw	r16,0(sp)
   17638:	dec00204 	addi	sp,sp,8
   1763c:	f800283a 	ret

00017640 <_close_r>:
   17640:	defffd04 	addi	sp,sp,-12
   17644:	dc000015 	stw	r16,0(sp)
   17648:	040000f4 	movhi	r16,3
   1764c:	8427b904 	addi	r16,r16,-24860
   17650:	dc400115 	stw	r17,4(sp)
   17654:	80000015 	stw	zero,0(r16)
   17658:	2023883a 	mov	r17,r4
   1765c:	2809883a 	mov	r4,r5
   17660:	dfc00215 	stw	ra,8(sp)
   17664:	0019c8c0 	call	19c8c <close>
   17668:	1007883a 	mov	r3,r2
   1766c:	00bfffc4 	movi	r2,-1
   17670:	18800626 	beq	r3,r2,1768c <_close_r+0x4c>
   17674:	1805883a 	mov	r2,r3
   17678:	dfc00217 	ldw	ra,8(sp)
   1767c:	dc400117 	ldw	r17,4(sp)
   17680:	dc000017 	ldw	r16,0(sp)
   17684:	dec00304 	addi	sp,sp,12
   17688:	f800283a 	ret
   1768c:	80800017 	ldw	r2,0(r16)
   17690:	103ff826 	beq	r2,zero,17674 <_close_r+0x34>
   17694:	88800015 	stw	r2,0(r17)
   17698:	1805883a 	mov	r2,r3
   1769c:	dfc00217 	ldw	ra,8(sp)
   176a0:	dc400117 	ldw	r17,4(sp)
   176a4:	dc000017 	ldw	r16,0(sp)
   176a8:	dec00304 	addi	sp,sp,12
   176ac:	f800283a 	ret

000176b0 <_fclose_r>:
   176b0:	defffc04 	addi	sp,sp,-16
   176b4:	dc400115 	stw	r17,4(sp)
   176b8:	dc000015 	stw	r16,0(sp)
   176bc:	dfc00315 	stw	ra,12(sp)
   176c0:	dc800215 	stw	r18,8(sp)
   176c4:	2821883a 	mov	r16,r5
   176c8:	2023883a 	mov	r17,r4
   176cc:	28002926 	beq	r5,zero,17774 <_fclose_r+0xc4>
   176d0:	00142ec0 	call	142ec <__sfp_lock_acquire>
   176d4:	88000226 	beq	r17,zero,176e0 <_fclose_r+0x30>
   176d8:	88800e17 	ldw	r2,56(r17)
   176dc:	10002d26 	beq	r2,zero,17794 <_fclose_r+0xe4>
   176e0:	8080030f 	ldh	r2,12(r16)
   176e4:	10002226 	beq	r2,zero,17770 <_fclose_r+0xc0>
   176e8:	8809883a 	mov	r4,r17
   176ec:	800b883a 	mov	r5,r16
   176f0:	00140640 	call	14064 <_fflush_r>
   176f4:	1025883a 	mov	r18,r2
   176f8:	80800b17 	ldw	r2,44(r16)
   176fc:	10000426 	beq	r2,zero,17710 <_fclose_r+0x60>
   17700:	81400717 	ldw	r5,28(r16)
   17704:	8809883a 	mov	r4,r17
   17708:	103ee83a 	callr	r2
   1770c:	10002a16 	blt	r2,zero,177b8 <_fclose_r+0x108>
   17710:	8080030b 	ldhu	r2,12(r16)
   17714:	1080200c 	andi	r2,r2,128
   17718:	1000231e 	bne	r2,zero,177a8 <_fclose_r+0xf8>
   1771c:	81400c17 	ldw	r5,48(r16)
   17720:	28000526 	beq	r5,zero,17738 <_fclose_r+0x88>
   17724:	80801004 	addi	r2,r16,64
   17728:	28800226 	beq	r5,r2,17734 <_fclose_r+0x84>
   1772c:	8809883a 	mov	r4,r17
   17730:	00146800 	call	14680 <_free_r>
   17734:	80000c15 	stw	zero,48(r16)
   17738:	81401117 	ldw	r5,68(r16)
   1773c:	28000326 	beq	r5,zero,1774c <_fclose_r+0x9c>
   17740:	8809883a 	mov	r4,r17
   17744:	00146800 	call	14680 <_free_r>
   17748:	80001115 	stw	zero,68(r16)
   1774c:	8000030d 	sth	zero,12(r16)
   17750:	00142f00 	call	142f0 <__sfp_lock_release>
   17754:	9005883a 	mov	r2,r18
   17758:	dfc00317 	ldw	ra,12(sp)
   1775c:	dc800217 	ldw	r18,8(sp)
   17760:	dc400117 	ldw	r17,4(sp)
   17764:	dc000017 	ldw	r16,0(sp)
   17768:	dec00404 	addi	sp,sp,16
   1776c:	f800283a 	ret
   17770:	00142f00 	call	142f0 <__sfp_lock_release>
   17774:	0025883a 	mov	r18,zero
   17778:	9005883a 	mov	r2,r18
   1777c:	dfc00317 	ldw	ra,12(sp)
   17780:	dc800217 	ldw	r18,8(sp)
   17784:	dc400117 	ldw	r17,4(sp)
   17788:	dc000017 	ldw	r16,0(sp)
   1778c:	dec00404 	addi	sp,sp,16
   17790:	f800283a 	ret
   17794:	8809883a 	mov	r4,r17
   17798:	00142fc0 	call	142fc <__sinit>
   1779c:	8080030f 	ldh	r2,12(r16)
   177a0:	103fd11e 	bne	r2,zero,176e8 <_fclose_r+0x38>
   177a4:	003ff206 	br	17770 <_fclose_r+0xc0>
   177a8:	81400417 	ldw	r5,16(r16)
   177ac:	8809883a 	mov	r4,r17
   177b0:	00146800 	call	14680 <_free_r>
   177b4:	003fd906 	br	1771c <_fclose_r+0x6c>
   177b8:	04bfffc4 	movi	r18,-1
   177bc:	003fd406 	br	17710 <_fclose_r+0x60>

000177c0 <fclose>:
   177c0:	008000f4 	movhi	r2,3
   177c4:	10a79e04 	addi	r2,r2,-24968
   177c8:	200b883a 	mov	r5,r4
   177cc:	11000017 	ldw	r4,0(r2)
   177d0:	00176b01 	jmpi	176b0 <_fclose_r>

000177d4 <_fstat_r>:
   177d4:	defffd04 	addi	sp,sp,-12
   177d8:	dc000015 	stw	r16,0(sp)
   177dc:	040000f4 	movhi	r16,3
   177e0:	8427b904 	addi	r16,r16,-24860
   177e4:	dc400115 	stw	r17,4(sp)
   177e8:	80000015 	stw	zero,0(r16)
   177ec:	2023883a 	mov	r17,r4
   177f0:	2809883a 	mov	r4,r5
   177f4:	300b883a 	mov	r5,r6
   177f8:	dfc00215 	stw	ra,8(sp)
   177fc:	0019e140 	call	19e14 <fstat>
   17800:	1007883a 	mov	r3,r2
   17804:	00bfffc4 	movi	r2,-1
   17808:	18800626 	beq	r3,r2,17824 <_fstat_r+0x50>
   1780c:	1805883a 	mov	r2,r3
   17810:	dfc00217 	ldw	ra,8(sp)
   17814:	dc400117 	ldw	r17,4(sp)
   17818:	dc000017 	ldw	r16,0(sp)
   1781c:	dec00304 	addi	sp,sp,12
   17820:	f800283a 	ret
   17824:	80800017 	ldw	r2,0(r16)
   17828:	103ff826 	beq	r2,zero,1780c <_fstat_r+0x38>
   1782c:	88800015 	stw	r2,0(r17)
   17830:	1805883a 	mov	r2,r3
   17834:	dfc00217 	ldw	ra,8(sp)
   17838:	dc400117 	ldw	r17,4(sp)
   1783c:	dc000017 	ldw	r16,0(sp)
   17840:	dec00304 	addi	sp,sp,12
   17844:	f800283a 	ret

00017848 <_isatty_r>:
   17848:	defffd04 	addi	sp,sp,-12
   1784c:	dc000015 	stw	r16,0(sp)
   17850:	040000f4 	movhi	r16,3
   17854:	8427b904 	addi	r16,r16,-24860
   17858:	dc400115 	stw	r17,4(sp)
   1785c:	80000015 	stw	zero,0(r16)
   17860:	2023883a 	mov	r17,r4
   17864:	2809883a 	mov	r4,r5
   17868:	dfc00215 	stw	ra,8(sp)
   1786c:	0019f480 	call	19f48 <isatty>
   17870:	1007883a 	mov	r3,r2
   17874:	00bfffc4 	movi	r2,-1
   17878:	18800626 	beq	r3,r2,17894 <_isatty_r+0x4c>
   1787c:	1805883a 	mov	r2,r3
   17880:	dfc00217 	ldw	ra,8(sp)
   17884:	dc400117 	ldw	r17,4(sp)
   17888:	dc000017 	ldw	r16,0(sp)
   1788c:	dec00304 	addi	sp,sp,12
   17890:	f800283a 	ret
   17894:	80800017 	ldw	r2,0(r16)
   17898:	103ff826 	beq	r2,zero,1787c <_isatty_r+0x34>
   1789c:	88800015 	stw	r2,0(r17)
   178a0:	1805883a 	mov	r2,r3
   178a4:	dfc00217 	ldw	ra,8(sp)
   178a8:	dc400117 	ldw	r17,4(sp)
   178ac:	dc000017 	ldw	r16,0(sp)
   178b0:	dec00304 	addi	sp,sp,12
   178b4:	f800283a 	ret

000178b8 <_lseek_r>:
   178b8:	defffd04 	addi	sp,sp,-12
   178bc:	dc000015 	stw	r16,0(sp)
   178c0:	040000f4 	movhi	r16,3
   178c4:	8427b904 	addi	r16,r16,-24860
   178c8:	dc400115 	stw	r17,4(sp)
   178cc:	80000015 	stw	zero,0(r16)
   178d0:	2023883a 	mov	r17,r4
   178d4:	2809883a 	mov	r4,r5
   178d8:	300b883a 	mov	r5,r6
   178dc:	380d883a 	mov	r6,r7
   178e0:	dfc00215 	stw	ra,8(sp)
   178e4:	001a1540 	call	1a154 <lseek>
   178e8:	1007883a 	mov	r3,r2
   178ec:	00bfffc4 	movi	r2,-1
   178f0:	18800626 	beq	r3,r2,1790c <_lseek_r+0x54>
   178f4:	1805883a 	mov	r2,r3
   178f8:	dfc00217 	ldw	ra,8(sp)
   178fc:	dc400117 	ldw	r17,4(sp)
   17900:	dc000017 	ldw	r16,0(sp)
   17904:	dec00304 	addi	sp,sp,12
   17908:	f800283a 	ret
   1790c:	80800017 	ldw	r2,0(r16)
   17910:	103ff826 	beq	r2,zero,178f4 <_lseek_r+0x3c>
   17914:	88800015 	stw	r2,0(r17)
   17918:	1805883a 	mov	r2,r3
   1791c:	dfc00217 	ldw	ra,8(sp)
   17920:	dc400117 	ldw	r17,4(sp)
   17924:	dc000017 	ldw	r16,0(sp)
   17928:	dec00304 	addi	sp,sp,12
   1792c:	f800283a 	ret

00017930 <_read_r>:
   17930:	defffd04 	addi	sp,sp,-12
   17934:	dc000015 	stw	r16,0(sp)
   17938:	040000f4 	movhi	r16,3
   1793c:	8427b904 	addi	r16,r16,-24860
   17940:	dc400115 	stw	r17,4(sp)
   17944:	80000015 	stw	zero,0(r16)
   17948:	2023883a 	mov	r17,r4
   1794c:	2809883a 	mov	r4,r5
   17950:	300b883a 	mov	r5,r6
   17954:	380d883a 	mov	r6,r7
   17958:	dfc00215 	stw	ra,8(sp)
   1795c:	001a3500 	call	1a350 <read>
   17960:	1007883a 	mov	r3,r2
   17964:	00bfffc4 	movi	r2,-1
   17968:	18800626 	beq	r3,r2,17984 <_read_r+0x54>
   1796c:	1805883a 	mov	r2,r3
   17970:	dfc00217 	ldw	ra,8(sp)
   17974:	dc400117 	ldw	r17,4(sp)
   17978:	dc000017 	ldw	r16,0(sp)
   1797c:	dec00304 	addi	sp,sp,12
   17980:	f800283a 	ret
   17984:	80800017 	ldw	r2,0(r16)
   17988:	103ff826 	beq	r2,zero,1796c <_read_r+0x3c>
   1798c:	88800015 	stw	r2,0(r17)
   17990:	1805883a 	mov	r2,r3
   17994:	dfc00217 	ldw	ra,8(sp)
   17998:	dc400117 	ldw	r17,4(sp)
   1799c:	dc000017 	ldw	r16,0(sp)
   179a0:	dec00304 	addi	sp,sp,12
   179a4:	f800283a 	ret

000179a8 <__udivdi3>:
   179a8:	defff004 	addi	sp,sp,-64
   179ac:	2005883a 	mov	r2,r4
   179b0:	3011883a 	mov	r8,r6
   179b4:	df000e15 	stw	fp,56(sp)
   179b8:	dd000a15 	stw	r20,40(sp)
   179bc:	dc000615 	stw	r16,24(sp)
   179c0:	dfc00f15 	stw	ra,60(sp)
   179c4:	ddc00d15 	stw	r23,52(sp)
   179c8:	dd800c15 	stw	r22,48(sp)
   179cc:	dd400b15 	stw	r21,44(sp)
   179d0:	dcc00915 	stw	r19,36(sp)
   179d4:	dc800815 	stw	r18,32(sp)
   179d8:	dc400715 	stw	r17,28(sp)
   179dc:	4021883a 	mov	r16,r8
   179e0:	1039883a 	mov	fp,r2
   179e4:	2829883a 	mov	r20,r5
   179e8:	38003b1e 	bne	r7,zero,17ad8 <__udivdi3+0x130>
   179ec:	2a005c36 	bltu	r5,r8,17b60 <__udivdi3+0x1b8>
   179f0:	4000a626 	beq	r8,zero,17c8c <__udivdi3+0x2e4>
   179f4:	00bfffd4 	movui	r2,65535
   179f8:	14009e36 	bltu	r2,r16,17c74 <__udivdi3+0x2cc>
   179fc:	00803fc4 	movi	r2,255
   17a00:	14013d36 	bltu	r2,r16,17ef8 <__udivdi3+0x550>
   17a04:	000b883a 	mov	r5,zero
   17a08:	0005883a 	mov	r2,zero
   17a0c:	8084d83a 	srl	r2,r16,r2
   17a10:	010000f4 	movhi	r4,3
   17a14:	2120ca04 	addi	r4,r4,-31960
   17a18:	01800804 	movi	r6,32
   17a1c:	1105883a 	add	r2,r2,r4
   17a20:	10c00003 	ldbu	r3,0(r2)
   17a24:	28c7883a 	add	r3,r5,r3
   17a28:	30edc83a 	sub	r22,r6,r3
   17a2c:	b000ee1e 	bne	r22,zero,17de8 <__udivdi3+0x440>
   17a30:	802ad43a 	srli	r21,r16,16
   17a34:	00800044 	movi	r2,1
   17a38:	a423c83a 	sub	r17,r20,r16
   17a3c:	85ffffcc 	andi	r23,r16,65535
   17a40:	d8800315 	stw	r2,12(sp)
   17a44:	8809883a 	mov	r4,r17
   17a48:	a80b883a 	mov	r5,r21
   17a4c:	00106840 	call	10684 <__udivsi3>
   17a50:	8809883a 	mov	r4,r17
   17a54:	a80b883a 	mov	r5,r21
   17a58:	102d883a 	mov	r22,r2
   17a5c:	001068c0 	call	1068c <__umodsi3>
   17a60:	1004943a 	slli	r2,r2,16
   17a64:	e006d43a 	srli	r3,fp,16
   17a68:	bda3383a 	mul	r17,r23,r22
   17a6c:	10c4b03a 	or	r2,r2,r3
   17a70:	1440042e 	bgeu	r2,r17,17a84 <__udivdi3+0xdc>
   17a74:	1405883a 	add	r2,r2,r16
   17a78:	b5bfffc4 	addi	r22,r22,-1
   17a7c:	14000136 	bltu	r2,r16,17a84 <__udivdi3+0xdc>
   17a80:	14413d36 	bltu	r2,r17,17f78 <__udivdi3+0x5d0>
   17a84:	1463c83a 	sub	r17,r2,r17
   17a88:	8809883a 	mov	r4,r17
   17a8c:	a80b883a 	mov	r5,r21
   17a90:	00106840 	call	10684 <__udivsi3>
   17a94:	8809883a 	mov	r4,r17
   17a98:	a80b883a 	mov	r5,r21
   17a9c:	1029883a 	mov	r20,r2
   17aa0:	001068c0 	call	1068c <__umodsi3>
   17aa4:	1004943a 	slli	r2,r2,16
   17aa8:	bd09383a 	mul	r4,r23,r20
   17aac:	e0ffffcc 	andi	r3,fp,65535
   17ab0:	10c4b03a 	or	r2,r2,r3
   17ab4:	1100042e 	bgeu	r2,r4,17ac8 <__udivdi3+0x120>
   17ab8:	8085883a 	add	r2,r16,r2
   17abc:	a53fffc4 	addi	r20,r20,-1
   17ac0:	14000136 	bltu	r2,r16,17ac8 <__udivdi3+0x120>
   17ac4:	11012036 	bltu	r2,r4,17f48 <__udivdi3+0x5a0>
   17ac8:	b004943a 	slli	r2,r22,16
   17acc:	d9000317 	ldw	r4,12(sp)
   17ad0:	a084b03a 	or	r2,r20,r2
   17ad4:	00001506 	br	17b2c <__udivdi3+0x184>
   17ad8:	380d883a 	mov	r6,r7
   17adc:	29c06236 	bltu	r5,r7,17c68 <__udivdi3+0x2c0>
   17ae0:	00bfffd4 	movui	r2,65535
   17ae4:	11c05a36 	bltu	r2,r7,17c50 <__udivdi3+0x2a8>
   17ae8:	00803fc4 	movi	r2,255
   17aec:	11c0fc36 	bltu	r2,r7,17ee0 <__udivdi3+0x538>
   17af0:	000b883a 	mov	r5,zero
   17af4:	0005883a 	mov	r2,zero
   17af8:	3084d83a 	srl	r2,r6,r2
   17afc:	010000f4 	movhi	r4,3
   17b00:	2120ca04 	addi	r4,r4,-31960
   17b04:	01c00804 	movi	r7,32
   17b08:	1105883a 	add	r2,r2,r4
   17b0c:	10c00003 	ldbu	r3,0(r2)
   17b10:	28c7883a 	add	r3,r5,r3
   17b14:	38efc83a 	sub	r23,r7,r3
   17b18:	b800691e 	bne	r23,zero,17cc0 <__udivdi3+0x318>
   17b1c:	35000136 	bltu	r6,r20,17b24 <__udivdi3+0x17c>
   17b20:	e4005136 	bltu	fp,r16,17c68 <__udivdi3+0x2c0>
   17b24:	00800044 	movi	r2,1
   17b28:	0009883a 	mov	r4,zero
   17b2c:	2007883a 	mov	r3,r4
   17b30:	dfc00f17 	ldw	ra,60(sp)
   17b34:	df000e17 	ldw	fp,56(sp)
   17b38:	ddc00d17 	ldw	r23,52(sp)
   17b3c:	dd800c17 	ldw	r22,48(sp)
   17b40:	dd400b17 	ldw	r21,44(sp)
   17b44:	dd000a17 	ldw	r20,40(sp)
   17b48:	dcc00917 	ldw	r19,36(sp)
   17b4c:	dc800817 	ldw	r18,32(sp)
   17b50:	dc400717 	ldw	r17,28(sp)
   17b54:	dc000617 	ldw	r16,24(sp)
   17b58:	dec01004 	addi	sp,sp,64
   17b5c:	f800283a 	ret
   17b60:	00bfffd4 	movui	r2,65535
   17b64:	12005036 	bltu	r2,r8,17ca8 <__udivdi3+0x300>
   17b68:	00803fc4 	movi	r2,255
   17b6c:	1200e836 	bltu	r2,r8,17f10 <__udivdi3+0x568>
   17b70:	000b883a 	mov	r5,zero
   17b74:	0005883a 	mov	r2,zero
   17b78:	8084d83a 	srl	r2,r16,r2
   17b7c:	010000f4 	movhi	r4,3
   17b80:	2120ca04 	addi	r4,r4,-31960
   17b84:	01800804 	movi	r6,32
   17b88:	1105883a 	add	r2,r2,r4
   17b8c:	10c00003 	ldbu	r3,0(r2)
   17b90:	28c7883a 	add	r3,r5,r3
   17b94:	30cbc83a 	sub	r5,r6,r3
   17b98:	28000626 	beq	r5,zero,17bb4 <__udivdi3+0x20c>
   17b9c:	3145c83a 	sub	r2,r6,r5
   17ba0:	e084d83a 	srl	r2,fp,r2
   17ba4:	a146983a 	sll	r3,r20,r5
   17ba8:	e178983a 	sll	fp,fp,r5
   17bac:	8160983a 	sll	r16,r16,r5
   17bb0:	18a8b03a 	or	r20,r3,r2
   17bb4:	802ad43a 	srli	r21,r16,16
   17bb8:	a009883a 	mov	r4,r20
   17bbc:	85ffffcc 	andi	r23,r16,65535
   17bc0:	a80b883a 	mov	r5,r21
   17bc4:	00106840 	call	10684 <__udivsi3>
   17bc8:	a009883a 	mov	r4,r20
   17bcc:	a80b883a 	mov	r5,r21
   17bd0:	102d883a 	mov	r22,r2
   17bd4:	001068c0 	call	1068c <__umodsi3>
   17bd8:	1004943a 	slli	r2,r2,16
   17bdc:	e006d43a 	srli	r3,fp,16
   17be0:	bda3383a 	mul	r17,r23,r22
   17be4:	10c4b03a 	or	r2,r2,r3
   17be8:	1440042e 	bgeu	r2,r17,17bfc <__udivdi3+0x254>
   17bec:	1405883a 	add	r2,r2,r16
   17bf0:	b5bfffc4 	addi	r22,r22,-1
   17bf4:	14000136 	bltu	r2,r16,17bfc <__udivdi3+0x254>
   17bf8:	1440d536 	bltu	r2,r17,17f50 <__udivdi3+0x5a8>
   17bfc:	1463c83a 	sub	r17,r2,r17
   17c00:	8809883a 	mov	r4,r17
   17c04:	a80b883a 	mov	r5,r21
   17c08:	00106840 	call	10684 <__udivsi3>
   17c0c:	8809883a 	mov	r4,r17
   17c10:	a80b883a 	mov	r5,r21
   17c14:	1029883a 	mov	r20,r2
   17c18:	001068c0 	call	1068c <__umodsi3>
   17c1c:	1004943a 	slli	r2,r2,16
   17c20:	bd09383a 	mul	r4,r23,r20
   17c24:	e0ffffcc 	andi	r3,fp,65535
   17c28:	10c4b03a 	or	r2,r2,r3
   17c2c:	1100042e 	bgeu	r2,r4,17c40 <__udivdi3+0x298>
   17c30:	8085883a 	add	r2,r16,r2
   17c34:	a53fffc4 	addi	r20,r20,-1
   17c38:	14000136 	bltu	r2,r16,17c40 <__udivdi3+0x298>
   17c3c:	1100c736 	bltu	r2,r4,17f5c <__udivdi3+0x5b4>
   17c40:	b004943a 	slli	r2,r22,16
   17c44:	0009883a 	mov	r4,zero
   17c48:	a084b03a 	or	r2,r20,r2
   17c4c:	003fb706 	br	17b2c <__udivdi3+0x184>
   17c50:	00804034 	movhi	r2,256
   17c54:	10bfffc4 	addi	r2,r2,-1
   17c58:	11c0a436 	bltu	r2,r7,17eec <__udivdi3+0x544>
   17c5c:	01400404 	movi	r5,16
   17c60:	2805883a 	mov	r2,r5
   17c64:	003fa406 	br	17af8 <__udivdi3+0x150>
   17c68:	0005883a 	mov	r2,zero
   17c6c:	0009883a 	mov	r4,zero
   17c70:	003fae06 	br	17b2c <__udivdi3+0x184>
   17c74:	00804034 	movhi	r2,256
   17c78:	10bfffc4 	addi	r2,r2,-1
   17c7c:	1400a136 	bltu	r2,r16,17f04 <__udivdi3+0x55c>
   17c80:	01400404 	movi	r5,16
   17c84:	2805883a 	mov	r2,r5
   17c88:	003f6006 	br	17a0c <__udivdi3+0x64>
   17c8c:	01000044 	movi	r4,1
   17c90:	000b883a 	mov	r5,zero
   17c94:	00106840 	call	10684 <__udivsi3>
   17c98:	1021883a 	mov	r16,r2
   17c9c:	00bfffd4 	movui	r2,65535
   17ca0:	143ff436 	bltu	r2,r16,17c74 <__udivdi3+0x2cc>
   17ca4:	003f5506 	br	179fc <__udivdi3+0x54>
   17ca8:	00804034 	movhi	r2,256
   17cac:	10bfffc4 	addi	r2,r2,-1
   17cb0:	12009a36 	bltu	r2,r8,17f1c <__udivdi3+0x574>
   17cb4:	01400404 	movi	r5,16
   17cb8:	2805883a 	mov	r2,r5
   17cbc:	003fae06 	br	17b78 <__udivdi3+0x1d0>
   17cc0:	3dc5c83a 	sub	r2,r7,r23
   17cc4:	35c8983a 	sll	r4,r6,r23
   17cc8:	8086d83a 	srl	r3,r16,r2
   17ccc:	a0a2d83a 	srl	r17,r20,r2
   17cd0:	e084d83a 	srl	r2,fp,r2
   17cd4:	20eab03a 	or	r21,r4,r3
   17cd8:	a82cd43a 	srli	r22,r21,16
   17cdc:	a5c6983a 	sll	r3,r20,r23
   17ce0:	8809883a 	mov	r4,r17
   17ce4:	b00b883a 	mov	r5,r22
   17ce8:	1886b03a 	or	r3,r3,r2
   17cec:	d8c00215 	stw	r3,8(sp)
   17cf0:	00106840 	call	10684 <__udivsi3>
   17cf4:	8809883a 	mov	r4,r17
   17cf8:	b00b883a 	mov	r5,r22
   17cfc:	1029883a 	mov	r20,r2
   17d00:	001068c0 	call	1068c <__umodsi3>
   17d04:	a8ffffcc 	andi	r3,r21,65535
   17d08:	d8c00515 	stw	r3,20(sp)
   17d0c:	d9000217 	ldw	r4,8(sp)
   17d10:	d9400517 	ldw	r5,20(sp)
   17d14:	1004943a 	slli	r2,r2,16
   17d18:	2006d43a 	srli	r3,r4,16
   17d1c:	85e0983a 	sll	r16,r16,r23
   17d20:	2d23383a 	mul	r17,r5,r20
   17d24:	10c4b03a 	or	r2,r2,r3
   17d28:	dc000015 	stw	r16,0(sp)
   17d2c:	1440032e 	bgeu	r2,r17,17d3c <__udivdi3+0x394>
   17d30:	1545883a 	add	r2,r2,r21
   17d34:	a53fffc4 	addi	r20,r20,-1
   17d38:	15407f2e 	bgeu	r2,r21,17f38 <__udivdi3+0x590>
   17d3c:	1463c83a 	sub	r17,r2,r17
   17d40:	8809883a 	mov	r4,r17
   17d44:	b00b883a 	mov	r5,r22
   17d48:	00106840 	call	10684 <__udivsi3>
   17d4c:	8809883a 	mov	r4,r17
   17d50:	b00b883a 	mov	r5,r22
   17d54:	1021883a 	mov	r16,r2
   17d58:	001068c0 	call	1068c <__umodsi3>
   17d5c:	d8c00517 	ldw	r3,20(sp)
   17d60:	d9000217 	ldw	r4,8(sp)
   17d64:	1004943a 	slli	r2,r2,16
   17d68:	1c0f383a 	mul	r7,r3,r16
   17d6c:	20ffffcc 	andi	r3,r4,65535
   17d70:	10e2b03a 	or	r17,r2,r3
   17d74:	89c0032e 	bgeu	r17,r7,17d84 <__udivdi3+0x3dc>
   17d78:	8d63883a 	add	r17,r17,r21
   17d7c:	843fffc4 	addi	r16,r16,-1
   17d80:	8d40692e 	bgeu	r17,r21,17f28 <__udivdi3+0x580>
   17d84:	a008943a 	slli	r4,r20,16
   17d88:	d9400017 	ldw	r5,0(sp)
   17d8c:	89e3c83a 	sub	r17,r17,r7
   17d90:	8110b03a 	or	r8,r16,r4
   17d94:	280cd43a 	srli	r6,r5,16
   17d98:	28ffffcc 	andi	r3,r5,65535
   17d9c:	40bfffcc 	andi	r2,r8,65535
   17da0:	400ad43a 	srli	r5,r8,16
   17da4:	10d3383a 	mul	r9,r2,r3
   17da8:	1185383a 	mul	r2,r2,r6
   17dac:	28c7383a 	mul	r3,r5,r3
   17db0:	4808d43a 	srli	r4,r9,16
   17db4:	298b383a 	mul	r5,r5,r6
   17db8:	10c5883a 	add	r2,r2,r3
   17dbc:	2089883a 	add	r4,r4,r2
   17dc0:	20c0022e 	bgeu	r4,r3,17dcc <__udivdi3+0x424>
   17dc4:	00800074 	movhi	r2,1
   17dc8:	288b883a 	add	r5,r5,r2
   17dcc:	2004d43a 	srli	r2,r4,16
   17dd0:	288b883a 	add	r5,r5,r2
   17dd4:	89403f36 	bltu	r17,r5,17ed4 <__udivdi3+0x52c>
   17dd8:	89403926 	beq	r17,r5,17ec0 <__udivdi3+0x518>
   17ddc:	4005883a 	mov	r2,r8
   17de0:	0009883a 	mov	r4,zero
   17de4:	003f5106 	br	17b2c <__udivdi3+0x184>
   17de8:	85a0983a 	sll	r16,r16,r22
   17dec:	3585c83a 	sub	r2,r6,r22
   17df0:	a0a2d83a 	srl	r17,r20,r2
   17df4:	802ad43a 	srli	r21,r16,16
   17df8:	e084d83a 	srl	r2,fp,r2
   17dfc:	a586983a 	sll	r3,r20,r22
   17e00:	8809883a 	mov	r4,r17
   17e04:	a80b883a 	mov	r5,r21
   17e08:	1886b03a 	or	r3,r3,r2
   17e0c:	d8c00115 	stw	r3,4(sp)
   17e10:	00106840 	call	10684 <__udivsi3>
   17e14:	8809883a 	mov	r4,r17
   17e18:	a80b883a 	mov	r5,r21
   17e1c:	d8800415 	stw	r2,16(sp)
   17e20:	001068c0 	call	1068c <__umodsi3>
   17e24:	d9000117 	ldw	r4,4(sp)
   17e28:	d9400417 	ldw	r5,16(sp)
   17e2c:	1004943a 	slli	r2,r2,16
   17e30:	85ffffcc 	andi	r23,r16,65535
   17e34:	2006d43a 	srli	r3,r4,16
   17e38:	b963383a 	mul	r17,r23,r5
   17e3c:	10c4b03a 	or	r2,r2,r3
   17e40:	1440042e 	bgeu	r2,r17,17e54 <__udivdi3+0x4ac>
   17e44:	297fffc4 	addi	r5,r5,-1
   17e48:	1405883a 	add	r2,r2,r16
   17e4c:	d9400415 	stw	r5,16(sp)
   17e50:	1400442e 	bgeu	r2,r16,17f64 <__udivdi3+0x5bc>
   17e54:	1463c83a 	sub	r17,r2,r17
   17e58:	8809883a 	mov	r4,r17
   17e5c:	a80b883a 	mov	r5,r21
   17e60:	00106840 	call	10684 <__udivsi3>
   17e64:	8809883a 	mov	r4,r17
   17e68:	a80b883a 	mov	r5,r21
   17e6c:	1029883a 	mov	r20,r2
   17e70:	001068c0 	call	1068c <__umodsi3>
   17e74:	d9400117 	ldw	r5,4(sp)
   17e78:	1004943a 	slli	r2,r2,16
   17e7c:	bd09383a 	mul	r4,r23,r20
   17e80:	28ffffcc 	andi	r3,r5,65535
   17e84:	10c6b03a 	or	r3,r2,r3
   17e88:	1900062e 	bgeu	r3,r4,17ea4 <__udivdi3+0x4fc>
   17e8c:	1c07883a 	add	r3,r3,r16
   17e90:	a53fffc4 	addi	r20,r20,-1
   17e94:	1c000336 	bltu	r3,r16,17ea4 <__udivdi3+0x4fc>
   17e98:	1900022e 	bgeu	r3,r4,17ea4 <__udivdi3+0x4fc>
   17e9c:	a53fffc4 	addi	r20,r20,-1
   17ea0:	1c07883a 	add	r3,r3,r16
   17ea4:	d9400417 	ldw	r5,16(sp)
   17ea8:	e5b8983a 	sll	fp,fp,r22
   17eac:	1923c83a 	sub	r17,r3,r4
   17eb0:	2804943a 	slli	r2,r5,16
   17eb4:	a0a8b03a 	or	r20,r20,r2
   17eb8:	dd000315 	stw	r20,12(sp)
   17ebc:	003ee106 	br	17a44 <__udivdi3+0x9c>
   17ec0:	2004943a 	slli	r2,r4,16
   17ec4:	e5c8983a 	sll	r4,fp,r23
   17ec8:	48ffffcc 	andi	r3,r9,65535
   17ecc:	10c5883a 	add	r2,r2,r3
   17ed0:	20bfc22e 	bgeu	r4,r2,17ddc <__udivdi3+0x434>
   17ed4:	40bfffc4 	addi	r2,r8,-1
   17ed8:	0009883a 	mov	r4,zero
   17edc:	003f1306 	br	17b2c <__udivdi3+0x184>
   17ee0:	01400204 	movi	r5,8
   17ee4:	2805883a 	mov	r2,r5
   17ee8:	003f0306 	br	17af8 <__udivdi3+0x150>
   17eec:	01400604 	movi	r5,24
   17ef0:	2805883a 	mov	r2,r5
   17ef4:	003f0006 	br	17af8 <__udivdi3+0x150>
   17ef8:	01400204 	movi	r5,8
   17efc:	2805883a 	mov	r2,r5
   17f00:	003ec206 	br	17a0c <__udivdi3+0x64>
   17f04:	01400604 	movi	r5,24
   17f08:	2805883a 	mov	r2,r5
   17f0c:	003ebf06 	br	17a0c <__udivdi3+0x64>
   17f10:	01400204 	movi	r5,8
   17f14:	2805883a 	mov	r2,r5
   17f18:	003f1706 	br	17b78 <__udivdi3+0x1d0>
   17f1c:	01400604 	movi	r5,24
   17f20:	2805883a 	mov	r2,r5
   17f24:	003f1406 	br	17b78 <__udivdi3+0x1d0>
   17f28:	89ff962e 	bgeu	r17,r7,17d84 <__udivdi3+0x3dc>
   17f2c:	8d63883a 	add	r17,r17,r21
   17f30:	843fffc4 	addi	r16,r16,-1
   17f34:	003f9306 	br	17d84 <__udivdi3+0x3dc>
   17f38:	147f802e 	bgeu	r2,r17,17d3c <__udivdi3+0x394>
   17f3c:	a53fffc4 	addi	r20,r20,-1
   17f40:	1545883a 	add	r2,r2,r21
   17f44:	003f7d06 	br	17d3c <__udivdi3+0x394>
   17f48:	a53fffc4 	addi	r20,r20,-1
   17f4c:	003ede06 	br	17ac8 <__udivdi3+0x120>
   17f50:	b5bfffc4 	addi	r22,r22,-1
   17f54:	1405883a 	add	r2,r2,r16
   17f58:	003f2806 	br	17bfc <__udivdi3+0x254>
   17f5c:	a53fffc4 	addi	r20,r20,-1
   17f60:	003f3706 	br	17c40 <__udivdi3+0x298>
   17f64:	147fbb2e 	bgeu	r2,r17,17e54 <__udivdi3+0x4ac>
   17f68:	297fffc4 	addi	r5,r5,-1
   17f6c:	1405883a 	add	r2,r2,r16
   17f70:	d9400415 	stw	r5,16(sp)
   17f74:	003fb706 	br	17e54 <__udivdi3+0x4ac>
   17f78:	b5bfffc4 	addi	r22,r22,-1
   17f7c:	1405883a 	add	r2,r2,r16
   17f80:	003ec006 	br	17a84 <__udivdi3+0xdc>

00017f84 <__umoddi3>:
   17f84:	defff104 	addi	sp,sp,-60
   17f88:	dd800b15 	stw	r22,44(sp)
   17f8c:	dd000915 	stw	r20,36(sp)
   17f90:	dc000515 	stw	r16,20(sp)
   17f94:	dfc00e15 	stw	ra,56(sp)
   17f98:	df000d15 	stw	fp,52(sp)
   17f9c:	ddc00c15 	stw	r23,48(sp)
   17fa0:	dd400a15 	stw	r21,40(sp)
   17fa4:	dcc00815 	stw	r19,32(sp)
   17fa8:	dc800715 	stw	r18,28(sp)
   17fac:	dc400615 	stw	r17,24(sp)
   17fb0:	3021883a 	mov	r16,r6
   17fb4:	202d883a 	mov	r22,r4
   17fb8:	2829883a 	mov	r20,r5
   17fbc:	38002b1e 	bne	r7,zero,1806c <__umoddi3+0xe8>
   17fc0:	29805036 	bltu	r5,r6,18104 <__umoddi3+0x180>
   17fc4:	30008a26 	beq	r6,zero,181f0 <__umoddi3+0x26c>
   17fc8:	00bfffd4 	movui	r2,65535
   17fcc:	14008236 	bltu	r2,r16,181d8 <__umoddi3+0x254>
   17fd0:	00803fc4 	movi	r2,255
   17fd4:	14013636 	bltu	r2,r16,184b0 <__umoddi3+0x52c>
   17fd8:	000b883a 	mov	r5,zero
   17fdc:	0005883a 	mov	r2,zero
   17fe0:	8084d83a 	srl	r2,r16,r2
   17fe4:	010000f4 	movhi	r4,3
   17fe8:	2120ca04 	addi	r4,r4,-31960
   17fec:	01800804 	movi	r6,32
   17ff0:	1105883a 	add	r2,r2,r4
   17ff4:	10c00003 	ldbu	r3,0(r2)
   17ff8:	28c7883a 	add	r3,r5,r3
   17ffc:	30efc83a 	sub	r23,r6,r3
   18000:	b800941e 	bne	r23,zero,18254 <__umoddi3+0x2d0>
   18004:	802ad43a 	srli	r21,r16,16
   18008:	a423c83a 	sub	r17,r20,r16
   1800c:	0039883a 	mov	fp,zero
   18010:	853fffcc 	andi	r20,r16,65535
   18014:	8809883a 	mov	r4,r17
   18018:	a80b883a 	mov	r5,r21
   1801c:	00106840 	call	10684 <__udivsi3>
   18020:	8809883a 	mov	r4,r17
   18024:	a80b883a 	mov	r5,r21
   18028:	a0a3383a 	mul	r17,r20,r2
   1802c:	001068c0 	call	1068c <__umodsi3>
   18030:	1004943a 	slli	r2,r2,16
   18034:	b006d43a 	srli	r3,r22,16
   18038:	10c4b03a 	or	r2,r2,r3
   1803c:	1440032e 	bgeu	r2,r17,1804c <__umoddi3+0xc8>
   18040:	1405883a 	add	r2,r2,r16
   18044:	14000136 	bltu	r2,r16,1804c <__umoddi3+0xc8>
   18048:	14413536 	bltu	r2,r17,18520 <__umoddi3+0x59c>
   1804c:	1463c83a 	sub	r17,r2,r17
   18050:	8809883a 	mov	r4,r17
   18054:	a80b883a 	mov	r5,r21
   18058:	00106840 	call	10684 <__udivsi3>
   1805c:	8809883a 	mov	r4,r17
   18060:	a0a3383a 	mul	r17,r20,r2
   18064:	a80b883a 	mov	r5,r21
   18068:	00004d06 	br	181a0 <__umoddi3+0x21c>
   1806c:	380d883a 	mov	r6,r7
   18070:	29c0102e 	bgeu	r5,r7,180b4 <__umoddi3+0x130>
   18074:	2011883a 	mov	r8,r4
   18078:	2813883a 	mov	r9,r5
   1807c:	4005883a 	mov	r2,r8
   18080:	4807883a 	mov	r3,r9
   18084:	dfc00e17 	ldw	ra,56(sp)
   18088:	df000d17 	ldw	fp,52(sp)
   1808c:	ddc00c17 	ldw	r23,48(sp)
   18090:	dd800b17 	ldw	r22,44(sp)
   18094:	dd400a17 	ldw	r21,40(sp)
   18098:	dd000917 	ldw	r20,36(sp)
   1809c:	dcc00817 	ldw	r19,32(sp)
   180a0:	dc800717 	ldw	r18,28(sp)
   180a4:	dc400617 	ldw	r17,24(sp)
   180a8:	dc000517 	ldw	r16,20(sp)
   180ac:	dec00f04 	addi	sp,sp,60
   180b0:	f800283a 	ret
   180b4:	00bfffd4 	movui	r2,65535
   180b8:	11c05a36 	bltu	r2,r7,18224 <__umoddi3+0x2a0>
   180bc:	00803fc4 	movi	r2,255
   180c0:	11c0fe36 	bltu	r2,r7,184bc <__umoddi3+0x538>
   180c4:	000b883a 	mov	r5,zero
   180c8:	0005883a 	mov	r2,zero
   180cc:	3084d83a 	srl	r2,r6,r2
   180d0:	010000f4 	movhi	r4,3
   180d4:	2120ca04 	addi	r4,r4,-31960
   180d8:	01c00804 	movi	r7,32
   180dc:	1105883a 	add	r2,r2,r4
   180e0:	10c00003 	ldbu	r3,0(r2)
   180e4:	28c7883a 	add	r3,r5,r3
   180e8:	38ebc83a 	sub	r21,r7,r3
   180ec:	a800851e 	bne	r21,zero,18304 <__umoddi3+0x380>
   180f0:	35005236 	bltu	r6,r20,1823c <__umoddi3+0x2b8>
   180f4:	b400512e 	bgeu	r22,r16,1823c <__umoddi3+0x2b8>
   180f8:	b011883a 	mov	r8,r22
   180fc:	a013883a 	mov	r9,r20
   18100:	003fde06 	br	1807c <__umoddi3+0xf8>
   18104:	00bfffd4 	movui	r2,65535
   18108:	11804036 	bltu	r2,r6,1820c <__umoddi3+0x288>
   1810c:	00803fc4 	movi	r2,255
   18110:	1180ed36 	bltu	r2,r6,184c8 <__umoddi3+0x544>
   18114:	000b883a 	mov	r5,zero
   18118:	0005883a 	mov	r2,zero
   1811c:	8084d83a 	srl	r2,r16,r2
   18120:	010000f4 	movhi	r4,3
   18124:	2120ca04 	addi	r4,r4,-31960
   18128:	01800804 	movi	r6,32
   1812c:	1105883a 	add	r2,r2,r4
   18130:	10c00003 	ldbu	r3,0(r2)
   18134:	28c7883a 	add	r3,r5,r3
   18138:	30c7c83a 	sub	r3,r6,r3
   1813c:	1800bf1e 	bne	r3,zero,1843c <__umoddi3+0x4b8>
   18140:	0039883a 	mov	fp,zero
   18144:	802ad43a 	srli	r21,r16,16
   18148:	a009883a 	mov	r4,r20
   1814c:	85ffffcc 	andi	r23,r16,65535
   18150:	a80b883a 	mov	r5,r21
   18154:	00106840 	call	10684 <__udivsi3>
   18158:	a009883a 	mov	r4,r20
   1815c:	a80b883a 	mov	r5,r21
   18160:	b8a3383a 	mul	r17,r23,r2
   18164:	001068c0 	call	1068c <__umodsi3>
   18168:	1004943a 	slli	r2,r2,16
   1816c:	b006d43a 	srli	r3,r22,16
   18170:	10c4b03a 	or	r2,r2,r3
   18174:	1440032e 	bgeu	r2,r17,18184 <__umoddi3+0x200>
   18178:	1405883a 	add	r2,r2,r16
   1817c:	14000136 	bltu	r2,r16,18184 <__umoddi3+0x200>
   18180:	1440e536 	bltu	r2,r17,18518 <__umoddi3+0x594>
   18184:	1463c83a 	sub	r17,r2,r17
   18188:	8809883a 	mov	r4,r17
   1818c:	a80b883a 	mov	r5,r21
   18190:	00106840 	call	10684 <__udivsi3>
   18194:	8809883a 	mov	r4,r17
   18198:	b8a3383a 	mul	r17,r23,r2
   1819c:	a80b883a 	mov	r5,r21
   181a0:	001068c0 	call	1068c <__umodsi3>
   181a4:	1004943a 	slli	r2,r2,16
   181a8:	b0ffffcc 	andi	r3,r22,65535
   181ac:	10c4b03a 	or	r2,r2,r3
   181b0:	1440042e 	bgeu	r2,r17,181c4 <__umoddi3+0x240>
   181b4:	1405883a 	add	r2,r2,r16
   181b8:	14000236 	bltu	r2,r16,181c4 <__umoddi3+0x240>
   181bc:	1440012e 	bgeu	r2,r17,181c4 <__umoddi3+0x240>
   181c0:	1405883a 	add	r2,r2,r16
   181c4:	1445c83a 	sub	r2,r2,r17
   181c8:	1724d83a 	srl	r18,r2,fp
   181cc:	0013883a 	mov	r9,zero
   181d0:	9011883a 	mov	r8,r18
   181d4:	003fa906 	br	1807c <__umoddi3+0xf8>
   181d8:	00804034 	movhi	r2,256
   181dc:	10bfffc4 	addi	r2,r2,-1
   181e0:	1400b036 	bltu	r2,r16,184a4 <__umoddi3+0x520>
   181e4:	01400404 	movi	r5,16
   181e8:	2805883a 	mov	r2,r5
   181ec:	003f7c06 	br	17fe0 <__umoddi3+0x5c>
   181f0:	01000044 	movi	r4,1
   181f4:	000b883a 	mov	r5,zero
   181f8:	00106840 	call	10684 <__udivsi3>
   181fc:	1021883a 	mov	r16,r2
   18200:	00bfffd4 	movui	r2,65535
   18204:	143ff436 	bltu	r2,r16,181d8 <__umoddi3+0x254>
   18208:	003f7106 	br	17fd0 <__umoddi3+0x4c>
   1820c:	00804034 	movhi	r2,256
   18210:	10bfffc4 	addi	r2,r2,-1
   18214:	1180af36 	bltu	r2,r6,184d4 <__umoddi3+0x550>
   18218:	01400404 	movi	r5,16
   1821c:	2805883a 	mov	r2,r5
   18220:	003fbe06 	br	1811c <__umoddi3+0x198>
   18224:	00804034 	movhi	r2,256
   18228:	10bfffc4 	addi	r2,r2,-1
   1822c:	11c0ac36 	bltu	r2,r7,184e0 <__umoddi3+0x55c>
   18230:	01400404 	movi	r5,16
   18234:	2805883a 	mov	r2,r5
   18238:	003fa406 	br	180cc <__umoddi3+0x148>
   1823c:	b409c83a 	sub	r4,r22,r16
   18240:	b105803a 	cmpltu	r2,r22,r4
   18244:	a187c83a 	sub	r3,r20,r6
   18248:	18a9c83a 	sub	r20,r3,r2
   1824c:	202d883a 	mov	r22,r4
   18250:	003fa906 	br	180f8 <__umoddi3+0x174>
   18254:	85e0983a 	sll	r16,r16,r23
   18258:	35c5c83a 	sub	r2,r6,r23
   1825c:	a0a2d83a 	srl	r17,r20,r2
   18260:	802ad43a 	srli	r21,r16,16
   18264:	b084d83a 	srl	r2,r22,r2
   18268:	a5c6983a 	sll	r3,r20,r23
   1826c:	8809883a 	mov	r4,r17
   18270:	a80b883a 	mov	r5,r21
   18274:	1886b03a 	or	r3,r3,r2
   18278:	d8c00115 	stw	r3,4(sp)
   1827c:	853fffcc 	andi	r20,r16,65535
   18280:	00106840 	call	10684 <__udivsi3>
   18284:	8809883a 	mov	r4,r17
   18288:	a80b883a 	mov	r5,r21
   1828c:	a0a3383a 	mul	r17,r20,r2
   18290:	001068c0 	call	1068c <__umodsi3>
   18294:	d9000117 	ldw	r4,4(sp)
   18298:	1004943a 	slli	r2,r2,16
   1829c:	b839883a 	mov	fp,r23
   182a0:	2006d43a 	srli	r3,r4,16
   182a4:	10c4b03a 	or	r2,r2,r3
   182a8:	1440022e 	bgeu	r2,r17,182b4 <__umoddi3+0x330>
   182ac:	1405883a 	add	r2,r2,r16
   182b0:	1400962e 	bgeu	r2,r16,1850c <__umoddi3+0x588>
   182b4:	1463c83a 	sub	r17,r2,r17
   182b8:	8809883a 	mov	r4,r17
   182bc:	a80b883a 	mov	r5,r21
   182c0:	00106840 	call	10684 <__udivsi3>
   182c4:	8809883a 	mov	r4,r17
   182c8:	a80b883a 	mov	r5,r21
   182cc:	a0a3383a 	mul	r17,r20,r2
   182d0:	001068c0 	call	1068c <__umodsi3>
   182d4:	d9400117 	ldw	r5,4(sp)
   182d8:	1004943a 	slli	r2,r2,16
   182dc:	28ffffcc 	andi	r3,r5,65535
   182e0:	10c4b03a 	or	r2,r2,r3
   182e4:	1440042e 	bgeu	r2,r17,182f8 <__umoddi3+0x374>
   182e8:	1405883a 	add	r2,r2,r16
   182ec:	14000236 	bltu	r2,r16,182f8 <__umoddi3+0x374>
   182f0:	1440012e 	bgeu	r2,r17,182f8 <__umoddi3+0x374>
   182f4:	1405883a 	add	r2,r2,r16
   182f8:	b5ec983a 	sll	r22,r22,r23
   182fc:	1463c83a 	sub	r17,r2,r17
   18300:	003f4406 	br	18014 <__umoddi3+0x90>
   18304:	3d4fc83a 	sub	r7,r7,r21
   18308:	3546983a 	sll	r3,r6,r21
   1830c:	81c4d83a 	srl	r2,r16,r7
   18310:	a1e2d83a 	srl	r17,r20,r7
   18314:	a54c983a 	sll	r6,r20,r21
   18318:	18aeb03a 	or	r23,r3,r2
   1831c:	b828d43a 	srli	r20,r23,16
   18320:	b1c4d83a 	srl	r2,r22,r7
   18324:	8809883a 	mov	r4,r17
   18328:	a00b883a 	mov	r5,r20
   1832c:	308cb03a 	or	r6,r6,r2
   18330:	d9c00315 	stw	r7,12(sp)
   18334:	d9800215 	stw	r6,8(sp)
   18338:	00106840 	call	10684 <__udivsi3>
   1833c:	8809883a 	mov	r4,r17
   18340:	a00b883a 	mov	r5,r20
   18344:	1039883a 	mov	fp,r2
   18348:	001068c0 	call	1068c <__umodsi3>
   1834c:	b8ffffcc 	andi	r3,r23,65535
   18350:	d8c00415 	stw	r3,16(sp)
   18354:	d9000217 	ldw	r4,8(sp)
   18358:	d9400417 	ldw	r5,16(sp)
   1835c:	1004943a 	slli	r2,r2,16
   18360:	2006d43a 	srli	r3,r4,16
   18364:	8560983a 	sll	r16,r16,r21
   18368:	2f23383a 	mul	r17,r5,fp
   1836c:	10c4b03a 	or	r2,r2,r3
   18370:	dc000015 	stw	r16,0(sp)
   18374:	b56c983a 	sll	r22,r22,r21
   18378:	1440032e 	bgeu	r2,r17,18388 <__umoddi3+0x404>
   1837c:	15c5883a 	add	r2,r2,r23
   18380:	e73fffc4 	addi	fp,fp,-1
   18384:	15c05d2e 	bgeu	r2,r23,184fc <__umoddi3+0x578>
   18388:	1463c83a 	sub	r17,r2,r17
   1838c:	8809883a 	mov	r4,r17
   18390:	a00b883a 	mov	r5,r20
   18394:	00106840 	call	10684 <__udivsi3>
   18398:	8809883a 	mov	r4,r17
   1839c:	a00b883a 	mov	r5,r20
   183a0:	1021883a 	mov	r16,r2
   183a4:	001068c0 	call	1068c <__umodsi3>
   183a8:	d8c00417 	ldw	r3,16(sp)
   183ac:	d9000217 	ldw	r4,8(sp)
   183b0:	1004943a 	slli	r2,r2,16
   183b4:	1c23383a 	mul	r17,r3,r16
   183b8:	20ffffcc 	andi	r3,r4,65535
   183bc:	10ceb03a 	or	r7,r2,r3
   183c0:	3c40032e 	bgeu	r7,r17,183d0 <__umoddi3+0x44c>
   183c4:	3dcf883a 	add	r7,r7,r23
   183c8:	843fffc4 	addi	r16,r16,-1
   183cc:	3dc0472e 	bgeu	r7,r23,184ec <__umoddi3+0x568>
   183d0:	e004943a 	slli	r2,fp,16
   183d4:	d9400017 	ldw	r5,0(sp)
   183d8:	3c4fc83a 	sub	r7,r7,r17
   183dc:	8084b03a 	or	r2,r16,r2
   183e0:	28ffffcc 	andi	r3,r5,65535
   183e4:	280cd43a 	srli	r6,r5,16
   183e8:	100ad43a 	srli	r5,r2,16
   183ec:	10bfffcc 	andi	r2,r2,65535
   183f0:	10d1383a 	mul	r8,r2,r3
   183f4:	28c7383a 	mul	r3,r5,r3
   183f8:	1185383a 	mul	r2,r2,r6
   183fc:	4008d43a 	srli	r4,r8,16
   18400:	298b383a 	mul	r5,r5,r6
   18404:	10c5883a 	add	r2,r2,r3
   18408:	2089883a 	add	r4,r4,r2
   1840c:	20c0022e 	bgeu	r4,r3,18418 <__umoddi3+0x494>
   18410:	00800074 	movhi	r2,1
   18414:	288b883a 	add	r5,r5,r2
   18418:	2004d43a 	srli	r2,r4,16
   1841c:	2008943a 	slli	r4,r4,16
   18420:	40ffffcc 	andi	r3,r8,65535
   18424:	288b883a 	add	r5,r5,r2
   18428:	20c9883a 	add	r4,r4,r3
   1842c:	39400b36 	bltu	r7,r5,1845c <__umoddi3+0x4d8>
   18430:	39403d26 	beq	r7,r5,18528 <__umoddi3+0x5a4>
   18434:	394bc83a 	sub	r5,r7,r5
   18438:	00000f06 	br	18478 <__umoddi3+0x4f4>
   1843c:	30c5c83a 	sub	r2,r6,r3
   18440:	1839883a 	mov	fp,r3
   18444:	b084d83a 	srl	r2,r22,r2
   18448:	a0c6983a 	sll	r3,r20,r3
   1844c:	8720983a 	sll	r16,r16,fp
   18450:	b72c983a 	sll	r22,r22,fp
   18454:	18a8b03a 	or	r20,r3,r2
   18458:	003f3a06 	br	18144 <__umoddi3+0x1c0>
   1845c:	d8c00017 	ldw	r3,0(sp)
   18460:	20c5c83a 	sub	r2,r4,r3
   18464:	2089803a 	cmpltu	r4,r4,r2
   18468:	2dc7c83a 	sub	r3,r5,r23
   1846c:	1907c83a 	sub	r3,r3,r4
   18470:	38cbc83a 	sub	r5,r7,r3
   18474:	1009883a 	mov	r4,r2
   18478:	b105c83a 	sub	r2,r22,r4
   1847c:	b087803a 	cmpltu	r3,r22,r2
   18480:	28c7c83a 	sub	r3,r5,r3
   18484:	d9400317 	ldw	r5,12(sp)
   18488:	1544d83a 	srl	r2,r2,r21
   1848c:	1948983a 	sll	r4,r3,r5
   18490:	1d46d83a 	srl	r3,r3,r21
   18494:	20a4b03a 	or	r18,r4,r2
   18498:	9011883a 	mov	r8,r18
   1849c:	1813883a 	mov	r9,r3
   184a0:	003ef606 	br	1807c <__umoddi3+0xf8>
   184a4:	01400604 	movi	r5,24
   184a8:	2805883a 	mov	r2,r5
   184ac:	003ecc06 	br	17fe0 <__umoddi3+0x5c>
   184b0:	01400204 	movi	r5,8
   184b4:	2805883a 	mov	r2,r5
   184b8:	003ec906 	br	17fe0 <__umoddi3+0x5c>
   184bc:	01400204 	movi	r5,8
   184c0:	2805883a 	mov	r2,r5
   184c4:	003f0106 	br	180cc <__umoddi3+0x148>
   184c8:	01400204 	movi	r5,8
   184cc:	2805883a 	mov	r2,r5
   184d0:	003f1206 	br	1811c <__umoddi3+0x198>
   184d4:	01400604 	movi	r5,24
   184d8:	2805883a 	mov	r2,r5
   184dc:	003f0f06 	br	1811c <__umoddi3+0x198>
   184e0:	01400604 	movi	r5,24
   184e4:	2805883a 	mov	r2,r5
   184e8:	003ef806 	br	180cc <__umoddi3+0x148>
   184ec:	3c7fb82e 	bgeu	r7,r17,183d0 <__umoddi3+0x44c>
   184f0:	843fffc4 	addi	r16,r16,-1
   184f4:	3dcf883a 	add	r7,r7,r23
   184f8:	003fb506 	br	183d0 <__umoddi3+0x44c>
   184fc:	147fa22e 	bgeu	r2,r17,18388 <__umoddi3+0x404>
   18500:	e73fffc4 	addi	fp,fp,-1
   18504:	15c5883a 	add	r2,r2,r23
   18508:	003f9f06 	br	18388 <__umoddi3+0x404>
   1850c:	147f692e 	bgeu	r2,r17,182b4 <__umoddi3+0x330>
   18510:	1405883a 	add	r2,r2,r16
   18514:	003f6706 	br	182b4 <__umoddi3+0x330>
   18518:	1405883a 	add	r2,r2,r16
   1851c:	003f1906 	br	18184 <__umoddi3+0x200>
   18520:	1405883a 	add	r2,r2,r16
   18524:	003ec906 	br	1804c <__umoddi3+0xc8>
   18528:	b13fcc36 	bltu	r22,r4,1845c <__umoddi3+0x4d8>
   1852c:	000b883a 	mov	r5,zero
   18530:	003fd106 	br	18478 <__umoddi3+0x4f4>

00018534 <_fpadd_parts>:
   18534:	defff804 	addi	sp,sp,-32
   18538:	dcc00315 	stw	r19,12(sp)
   1853c:	2027883a 	mov	r19,r4
   18540:	21000017 	ldw	r4,0(r4)
   18544:	00c00044 	movi	r3,1
   18548:	dd400515 	stw	r21,20(sp)
   1854c:	dd000415 	stw	r20,16(sp)
   18550:	ddc00715 	stw	r23,28(sp)
   18554:	dd800615 	stw	r22,24(sp)
   18558:	dc800215 	stw	r18,8(sp)
   1855c:	dc400115 	stw	r17,4(sp)
   18560:	dc000015 	stw	r16,0(sp)
   18564:	282b883a 	mov	r21,r5
   18568:	3029883a 	mov	r20,r6
   1856c:	1900632e 	bgeu	r3,r4,186fc <_fpadd_parts+0x1c8>
   18570:	28800017 	ldw	r2,0(r5)
   18574:	1880812e 	bgeu	r3,r2,1877c <_fpadd_parts+0x248>
   18578:	00c00104 	movi	r3,4
   1857c:	20c0dc26 	beq	r4,r3,188f0 <_fpadd_parts+0x3bc>
   18580:	10c07e26 	beq	r2,r3,1877c <_fpadd_parts+0x248>
   18584:	00c00084 	movi	r3,2
   18588:	10c06726 	beq	r2,r3,18728 <_fpadd_parts+0x1f4>
   1858c:	20c07b26 	beq	r4,r3,1877c <_fpadd_parts+0x248>
   18590:	9dc00217 	ldw	r23,8(r19)
   18594:	28c00217 	ldw	r3,8(r5)
   18598:	9c400317 	ldw	r17,12(r19)
   1859c:	2bc00317 	ldw	r15,12(r5)
   185a0:	b8cdc83a 	sub	r6,r23,r3
   185a4:	9c800417 	ldw	r18,16(r19)
   185a8:	2c000417 	ldw	r16,16(r5)
   185ac:	3009883a 	mov	r4,r6
   185b0:	30009716 	blt	r6,zero,18810 <_fpadd_parts+0x2dc>
   185b4:	00800fc4 	movi	r2,63
   185b8:	11806b16 	blt	r2,r6,18768 <_fpadd_parts+0x234>
   185bc:	0100a40e 	bge	zero,r4,18850 <_fpadd_parts+0x31c>
   185c0:	35bff804 	addi	r22,r6,-32
   185c4:	b000bc16 	blt	r22,zero,188b8 <_fpadd_parts+0x384>
   185c8:	8596d83a 	srl	r11,r16,r22
   185cc:	0019883a 	mov	r12,zero
   185d0:	0013883a 	mov	r9,zero
   185d4:	01000044 	movi	r4,1
   185d8:	0015883a 	mov	r10,zero
   185dc:	b000be16 	blt	r22,zero,188d8 <_fpadd_parts+0x3a4>
   185e0:	2590983a 	sll	r8,r4,r22
   185e4:	000f883a 	mov	r7,zero
   185e8:	00bfffc4 	movi	r2,-1
   185ec:	3889883a 	add	r4,r7,r2
   185f0:	408b883a 	add	r5,r8,r2
   185f4:	21cd803a 	cmpltu	r6,r4,r7
   185f8:	314b883a 	add	r5,r6,r5
   185fc:	7904703a 	and	r2,r15,r4
   18600:	8146703a 	and	r3,r16,r5
   18604:	10c4b03a 	or	r2,r2,r3
   18608:	10000226 	beq	r2,zero,18614 <_fpadd_parts+0xe0>
   1860c:	02400044 	movi	r9,1
   18610:	0015883a 	mov	r10,zero
   18614:	5a5eb03a 	or	r15,r11,r9
   18618:	62a0b03a 	or	r16,r12,r10
   1861c:	99400117 	ldw	r5,4(r19)
   18620:	a8800117 	ldw	r2,4(r21)
   18624:	28806e26 	beq	r5,r2,187e0 <_fpadd_parts+0x2ac>
   18628:	28006626 	beq	r5,zero,187c4 <_fpadd_parts+0x290>
   1862c:	7c45c83a 	sub	r2,r15,r17
   18630:	7889803a 	cmpltu	r4,r15,r2
   18634:	8487c83a 	sub	r3,r16,r18
   18638:	1909c83a 	sub	r4,r3,r4
   1863c:	100d883a 	mov	r6,r2
   18640:	200f883a 	mov	r7,r4
   18644:	38007716 	blt	r7,zero,18824 <_fpadd_parts+0x2f0>
   18648:	a5c00215 	stw	r23,8(r20)
   1864c:	a1c00415 	stw	r7,16(r20)
   18650:	a0000115 	stw	zero,4(r20)
   18654:	a1800315 	stw	r6,12(r20)
   18658:	a2000317 	ldw	r8,12(r20)
   1865c:	a2400417 	ldw	r9,16(r20)
   18660:	00bfffc4 	movi	r2,-1
   18664:	408b883a 	add	r5,r8,r2
   18668:	2a09803a 	cmpltu	r4,r5,r8
   1866c:	488d883a 	add	r6,r9,r2
   18670:	01c40034 	movhi	r7,4096
   18674:	39ffffc4 	addi	r7,r7,-1
   18678:	218d883a 	add	r6,r4,r6
   1867c:	39801736 	bltu	r7,r6,186dc <_fpadd_parts+0x1a8>
   18680:	31c06526 	beq	r6,r7,18818 <_fpadd_parts+0x2e4>
   18684:	a3000217 	ldw	r12,8(r20)
   18688:	4209883a 	add	r4,r8,r8
   1868c:	00bfffc4 	movi	r2,-1
   18690:	220f803a 	cmpltu	r7,r4,r8
   18694:	4a4b883a 	add	r5,r9,r9
   18698:	394f883a 	add	r7,r7,r5
   1869c:	2095883a 	add	r10,r4,r2
   186a0:	3897883a 	add	r11,r7,r2
   186a4:	510d803a 	cmpltu	r6,r10,r4
   186a8:	6099883a 	add	r12,r12,r2
   186ac:	32d7883a 	add	r11,r6,r11
   186b0:	00840034 	movhi	r2,4096
   186b4:	10bfffc4 	addi	r2,r2,-1
   186b8:	2011883a 	mov	r8,r4
   186bc:	3813883a 	mov	r9,r7
   186c0:	a1000315 	stw	r4,12(r20)
   186c4:	a1c00415 	stw	r7,16(r20)
   186c8:	a3000215 	stw	r12,8(r20)
   186cc:	12c00336 	bltu	r2,r11,186dc <_fpadd_parts+0x1a8>
   186d0:	58bfed1e 	bne	r11,r2,18688 <_fpadd_parts+0x154>
   186d4:	00bfff84 	movi	r2,-2
   186d8:	12bfeb2e 	bgeu	r2,r10,18688 <_fpadd_parts+0x154>
   186dc:	a2800417 	ldw	r10,16(r20)
   186e0:	008000c4 	movi	r2,3
   186e4:	00c80034 	movhi	r3,8192
   186e8:	18ffffc4 	addi	r3,r3,-1
   186ec:	a2400317 	ldw	r9,12(r20)
   186f0:	a0800015 	stw	r2,0(r20)
   186f4:	1a802336 	bltu	r3,r10,18784 <_fpadd_parts+0x250>
   186f8:	a027883a 	mov	r19,r20
   186fc:	9805883a 	mov	r2,r19
   18700:	ddc00717 	ldw	r23,28(sp)
   18704:	dd800617 	ldw	r22,24(sp)
   18708:	dd400517 	ldw	r21,20(sp)
   1870c:	dd000417 	ldw	r20,16(sp)
   18710:	dcc00317 	ldw	r19,12(sp)
   18714:	dc800217 	ldw	r18,8(sp)
   18718:	dc400117 	ldw	r17,4(sp)
   1871c:	dc000017 	ldw	r16,0(sp)
   18720:	dec00804 	addi	sp,sp,32
   18724:	f800283a 	ret
   18728:	20fff41e 	bne	r4,r3,186fc <_fpadd_parts+0x1c8>
   1872c:	31000015 	stw	r4,0(r6)
   18730:	98800117 	ldw	r2,4(r19)
   18734:	30800115 	stw	r2,4(r6)
   18738:	98c00217 	ldw	r3,8(r19)
   1873c:	30c00215 	stw	r3,8(r6)
   18740:	98800317 	ldw	r2,12(r19)
   18744:	30800315 	stw	r2,12(r6)
   18748:	98c00417 	ldw	r3,16(r19)
   1874c:	30c00415 	stw	r3,16(r6)
   18750:	98800117 	ldw	r2,4(r19)
   18754:	28c00117 	ldw	r3,4(r5)
   18758:	3027883a 	mov	r19,r6
   1875c:	10c4703a 	and	r2,r2,r3
   18760:	30800115 	stw	r2,4(r6)
   18764:	003fe506 	br	186fc <_fpadd_parts+0x1c8>
   18768:	1dc02616 	blt	r3,r23,18804 <_fpadd_parts+0x2d0>
   1876c:	0023883a 	mov	r17,zero
   18770:	182f883a 	mov	r23,r3
   18774:	0025883a 	mov	r18,zero
   18778:	003fa806 	br	1861c <_fpadd_parts+0xe8>
   1877c:	a827883a 	mov	r19,r21
   18780:	003fde06 	br	186fc <_fpadd_parts+0x1c8>
   18784:	01800044 	movi	r6,1
   18788:	500497fa 	slli	r2,r10,31
   1878c:	4808d07a 	srli	r4,r9,1
   18790:	518ad83a 	srl	r5,r10,r6
   18794:	a2000217 	ldw	r8,8(r20)
   18798:	1108b03a 	or	r4,r2,r4
   1879c:	0007883a 	mov	r3,zero
   187a0:	4984703a 	and	r2,r9,r6
   187a4:	208cb03a 	or	r6,r4,r2
   187a8:	28ceb03a 	or	r7,r5,r3
   187ac:	42000044 	addi	r8,r8,1
   187b0:	a027883a 	mov	r19,r20
   187b4:	a1c00415 	stw	r7,16(r20)
   187b8:	a2000215 	stw	r8,8(r20)
   187bc:	a1800315 	stw	r6,12(r20)
   187c0:	003fce06 	br	186fc <_fpadd_parts+0x1c8>
   187c4:	8bc5c83a 	sub	r2,r17,r15
   187c8:	8889803a 	cmpltu	r4,r17,r2
   187cc:	9407c83a 	sub	r3,r18,r16
   187d0:	1909c83a 	sub	r4,r3,r4
   187d4:	100d883a 	mov	r6,r2
   187d8:	200f883a 	mov	r7,r4
   187dc:	003f9906 	br	18644 <_fpadd_parts+0x110>
   187e0:	7c45883a 	add	r2,r15,r17
   187e4:	13c9803a 	cmpltu	r4,r2,r15
   187e8:	8487883a 	add	r3,r16,r18
   187ec:	20c9883a 	add	r4,r4,r3
   187f0:	a1400115 	stw	r5,4(r20)
   187f4:	a5c00215 	stw	r23,8(r20)
   187f8:	a0800315 	stw	r2,12(r20)
   187fc:	a1000415 	stw	r4,16(r20)
   18800:	003fb606 	br	186dc <_fpadd_parts+0x1a8>
   18804:	001f883a 	mov	r15,zero
   18808:	0021883a 	mov	r16,zero
   1880c:	003f8306 	br	1861c <_fpadd_parts+0xe8>
   18810:	018dc83a 	sub	r6,zero,r6
   18814:	003f6706 	br	185b4 <_fpadd_parts+0x80>
   18818:	00bfff84 	movi	r2,-2
   1881c:	117faf36 	bltu	r2,r5,186dc <_fpadd_parts+0x1a8>
   18820:	003f9806 	br	18684 <_fpadd_parts+0x150>
   18824:	0005883a 	mov	r2,zero
   18828:	1189c83a 	sub	r4,r2,r6
   1882c:	1105803a 	cmpltu	r2,r2,r4
   18830:	01cbc83a 	sub	r5,zero,r7
   18834:	2885c83a 	sub	r2,r5,r2
   18838:	01800044 	movi	r6,1
   1883c:	a1800115 	stw	r6,4(r20)
   18840:	a5c00215 	stw	r23,8(r20)
   18844:	a1000315 	stw	r4,12(r20)
   18848:	a0800415 	stw	r2,16(r20)
   1884c:	003f8206 	br	18658 <_fpadd_parts+0x124>
   18850:	203f7226 	beq	r4,zero,1861c <_fpadd_parts+0xe8>
   18854:	35bff804 	addi	r22,r6,-32
   18858:	b9af883a 	add	r23,r23,r6
   1885c:	b0003116 	blt	r22,zero,18924 <_fpadd_parts+0x3f0>
   18860:	959ad83a 	srl	r13,r18,r22
   18864:	001d883a 	mov	r14,zero
   18868:	000f883a 	mov	r7,zero
   1886c:	01000044 	movi	r4,1
   18870:	0011883a 	mov	r8,zero
   18874:	b0002516 	blt	r22,zero,1890c <_fpadd_parts+0x3d8>
   18878:	2594983a 	sll	r10,r4,r22
   1887c:	0013883a 	mov	r9,zero
   18880:	00bfffc4 	movi	r2,-1
   18884:	4889883a 	add	r4,r9,r2
   18888:	508b883a 	add	r5,r10,r2
   1888c:	224d803a 	cmpltu	r6,r4,r9
   18890:	314b883a 	add	r5,r6,r5
   18894:	8904703a 	and	r2,r17,r4
   18898:	9146703a 	and	r3,r18,r5
   1889c:	10c4b03a 	or	r2,r2,r3
   188a0:	10000226 	beq	r2,zero,188ac <_fpadd_parts+0x378>
   188a4:	01c00044 	movi	r7,1
   188a8:	0011883a 	mov	r8,zero
   188ac:	69e2b03a 	or	r17,r13,r7
   188b0:	7224b03a 	or	r18,r14,r8
   188b4:	003f5906 	br	1861c <_fpadd_parts+0xe8>
   188b8:	8407883a 	add	r3,r16,r16
   188bc:	008007c4 	movi	r2,31
   188c0:	1185c83a 	sub	r2,r2,r6
   188c4:	1886983a 	sll	r3,r3,r2
   188c8:	7996d83a 	srl	r11,r15,r6
   188cc:	8198d83a 	srl	r12,r16,r6
   188d0:	1ad6b03a 	or	r11,r3,r11
   188d4:	003f3e06 	br	185d0 <_fpadd_parts+0x9c>
   188d8:	2006d07a 	srli	r3,r4,1
   188dc:	008007c4 	movi	r2,31
   188e0:	1185c83a 	sub	r2,r2,r6
   188e4:	1890d83a 	srl	r8,r3,r2
   188e8:	218e983a 	sll	r7,r4,r6
   188ec:	003f3e06 	br	185e8 <_fpadd_parts+0xb4>
   188f0:	113f821e 	bne	r2,r4,186fc <_fpadd_parts+0x1c8>
   188f4:	28c00117 	ldw	r3,4(r5)
   188f8:	98800117 	ldw	r2,4(r19)
   188fc:	10ff7f26 	beq	r2,r3,186fc <_fpadd_parts+0x1c8>
   18900:	04c000f4 	movhi	r19,3
   18904:	9ce0c504 	addi	r19,r19,-31980
   18908:	003f7c06 	br	186fc <_fpadd_parts+0x1c8>
   1890c:	2006d07a 	srli	r3,r4,1
   18910:	008007c4 	movi	r2,31
   18914:	1185c83a 	sub	r2,r2,r6
   18918:	1894d83a 	srl	r10,r3,r2
   1891c:	2192983a 	sll	r9,r4,r6
   18920:	003fd706 	br	18880 <_fpadd_parts+0x34c>
   18924:	9487883a 	add	r3,r18,r18
   18928:	008007c4 	movi	r2,31
   1892c:	1185c83a 	sub	r2,r2,r6
   18930:	1886983a 	sll	r3,r3,r2
   18934:	899ad83a 	srl	r13,r17,r6
   18938:	919cd83a 	srl	r14,r18,r6
   1893c:	1b5ab03a 	or	r13,r3,r13
   18940:	003fc906 	br	18868 <_fpadd_parts+0x334>

00018944 <__subdf3>:
   18944:	deffea04 	addi	sp,sp,-88
   18948:	dcc01415 	stw	r19,80(sp)
   1894c:	dcc00404 	addi	r19,sp,16
   18950:	2011883a 	mov	r8,r4
   18954:	2813883a 	mov	r9,r5
   18958:	dc401315 	stw	r17,76(sp)
   1895c:	d809883a 	mov	r4,sp
   18960:	980b883a 	mov	r5,r19
   18964:	dc400904 	addi	r17,sp,36
   18968:	dfc01515 	stw	ra,84(sp)
   1896c:	da400115 	stw	r9,4(sp)
   18970:	d9c00315 	stw	r7,12(sp)
   18974:	da000015 	stw	r8,0(sp)
   18978:	d9800215 	stw	r6,8(sp)
   1897c:	0019a8c0 	call	19a8c <__unpack_d>
   18980:	d9000204 	addi	r4,sp,8
   18984:	880b883a 	mov	r5,r17
   18988:	0019a8c0 	call	19a8c <__unpack_d>
   1898c:	d8800a17 	ldw	r2,40(sp)
   18990:	880b883a 	mov	r5,r17
   18994:	9809883a 	mov	r4,r19
   18998:	d9800e04 	addi	r6,sp,56
   1899c:	1080005c 	xori	r2,r2,1
   189a0:	d8800a15 	stw	r2,40(sp)
   189a4:	00185340 	call	18534 <_fpadd_parts>
   189a8:	1009883a 	mov	r4,r2
   189ac:	00197780 	call	19778 <__pack_d>
   189b0:	dfc01517 	ldw	ra,84(sp)
   189b4:	dcc01417 	ldw	r19,80(sp)
   189b8:	dc401317 	ldw	r17,76(sp)
   189bc:	dec01604 	addi	sp,sp,88
   189c0:	f800283a 	ret

000189c4 <__adddf3>:
   189c4:	deffea04 	addi	sp,sp,-88
   189c8:	dcc01415 	stw	r19,80(sp)
   189cc:	dcc00404 	addi	r19,sp,16
   189d0:	2011883a 	mov	r8,r4
   189d4:	2813883a 	mov	r9,r5
   189d8:	dc401315 	stw	r17,76(sp)
   189dc:	d809883a 	mov	r4,sp
   189e0:	980b883a 	mov	r5,r19
   189e4:	dc400904 	addi	r17,sp,36
   189e8:	dfc01515 	stw	ra,84(sp)
   189ec:	da400115 	stw	r9,4(sp)
   189f0:	d9c00315 	stw	r7,12(sp)
   189f4:	da000015 	stw	r8,0(sp)
   189f8:	d9800215 	stw	r6,8(sp)
   189fc:	0019a8c0 	call	19a8c <__unpack_d>
   18a00:	d9000204 	addi	r4,sp,8
   18a04:	880b883a 	mov	r5,r17
   18a08:	0019a8c0 	call	19a8c <__unpack_d>
   18a0c:	d9800e04 	addi	r6,sp,56
   18a10:	9809883a 	mov	r4,r19
   18a14:	880b883a 	mov	r5,r17
   18a18:	00185340 	call	18534 <_fpadd_parts>
   18a1c:	1009883a 	mov	r4,r2
   18a20:	00197780 	call	19778 <__pack_d>
   18a24:	dfc01517 	ldw	ra,84(sp)
   18a28:	dcc01417 	ldw	r19,80(sp)
   18a2c:	dc401317 	ldw	r17,76(sp)
   18a30:	dec01604 	addi	sp,sp,88
   18a34:	f800283a 	ret

00018a38 <__muldf3>:
   18a38:	deffe004 	addi	sp,sp,-128
   18a3c:	dc401815 	stw	r17,96(sp)
   18a40:	dc400404 	addi	r17,sp,16
   18a44:	2011883a 	mov	r8,r4
   18a48:	2813883a 	mov	r9,r5
   18a4c:	dc001715 	stw	r16,92(sp)
   18a50:	d809883a 	mov	r4,sp
   18a54:	880b883a 	mov	r5,r17
   18a58:	dc000904 	addi	r16,sp,36
   18a5c:	dfc01f15 	stw	ra,124(sp)
   18a60:	da400115 	stw	r9,4(sp)
   18a64:	d9c00315 	stw	r7,12(sp)
   18a68:	da000015 	stw	r8,0(sp)
   18a6c:	d9800215 	stw	r6,8(sp)
   18a70:	ddc01e15 	stw	r23,120(sp)
   18a74:	dd801d15 	stw	r22,116(sp)
   18a78:	dd401c15 	stw	r21,112(sp)
   18a7c:	dd001b15 	stw	r20,108(sp)
   18a80:	dcc01a15 	stw	r19,104(sp)
   18a84:	dc801915 	stw	r18,100(sp)
   18a88:	0019a8c0 	call	19a8c <__unpack_d>
   18a8c:	d9000204 	addi	r4,sp,8
   18a90:	800b883a 	mov	r5,r16
   18a94:	0019a8c0 	call	19a8c <__unpack_d>
   18a98:	d9000417 	ldw	r4,16(sp)
   18a9c:	00800044 	movi	r2,1
   18aa0:	1100102e 	bgeu	r2,r4,18ae4 <__muldf3+0xac>
   18aa4:	d8c00917 	ldw	r3,36(sp)
   18aa8:	10c0062e 	bgeu	r2,r3,18ac4 <__muldf3+0x8c>
   18aac:	00800104 	movi	r2,4
   18ab0:	20800a26 	beq	r4,r2,18adc <__muldf3+0xa4>
   18ab4:	1880cc26 	beq	r3,r2,18de8 <__muldf3+0x3b0>
   18ab8:	00800084 	movi	r2,2
   18abc:	20800926 	beq	r4,r2,18ae4 <__muldf3+0xac>
   18ac0:	1880191e 	bne	r3,r2,18b28 <__muldf3+0xf0>
   18ac4:	d8c00a17 	ldw	r3,40(sp)
   18ac8:	d8800517 	ldw	r2,20(sp)
   18acc:	8009883a 	mov	r4,r16
   18ad0:	10c4c03a 	cmpne	r2,r2,r3
   18ad4:	d8800a15 	stw	r2,40(sp)
   18ad8:	00000706 	br	18af8 <__muldf3+0xc0>
   18adc:	00800084 	movi	r2,2
   18ae0:	1880c326 	beq	r3,r2,18df0 <__muldf3+0x3b8>
   18ae4:	d8800517 	ldw	r2,20(sp)
   18ae8:	d8c00a17 	ldw	r3,40(sp)
   18aec:	8809883a 	mov	r4,r17
   18af0:	10c4c03a 	cmpne	r2,r2,r3
   18af4:	d8800515 	stw	r2,20(sp)
   18af8:	00197780 	call	19778 <__pack_d>
   18afc:	dfc01f17 	ldw	ra,124(sp)
   18b00:	ddc01e17 	ldw	r23,120(sp)
   18b04:	dd801d17 	ldw	r22,116(sp)
   18b08:	dd401c17 	ldw	r21,112(sp)
   18b0c:	dd001b17 	ldw	r20,108(sp)
   18b10:	dcc01a17 	ldw	r19,104(sp)
   18b14:	dc801917 	ldw	r18,100(sp)
   18b18:	dc401817 	ldw	r17,96(sp)
   18b1c:	dc001717 	ldw	r16,92(sp)
   18b20:	dec02004 	addi	sp,sp,128
   18b24:	f800283a 	ret
   18b28:	dd800717 	ldw	r22,28(sp)
   18b2c:	dc800c17 	ldw	r18,48(sp)
   18b30:	002b883a 	mov	r21,zero
   18b34:	0023883a 	mov	r17,zero
   18b38:	a80b883a 	mov	r5,r21
   18b3c:	b00d883a 	mov	r6,r22
   18b40:	880f883a 	mov	r7,r17
   18b44:	ddc00817 	ldw	r23,32(sp)
   18b48:	dcc00d17 	ldw	r19,52(sp)
   18b4c:	9009883a 	mov	r4,r18
   18b50:	00196600 	call	19660 <__muldi3>
   18b54:	001b883a 	mov	r13,zero
   18b58:	680f883a 	mov	r7,r13
   18b5c:	b009883a 	mov	r4,r22
   18b60:	000b883a 	mov	r5,zero
   18b64:	980d883a 	mov	r6,r19
   18b68:	b82d883a 	mov	r22,r23
   18b6c:	002f883a 	mov	r23,zero
   18b70:	db401615 	stw	r13,88(sp)
   18b74:	d8801315 	stw	r2,76(sp)
   18b78:	d8c01415 	stw	r3,80(sp)
   18b7c:	dcc01515 	stw	r19,84(sp)
   18b80:	00196600 	call	19660 <__muldi3>
   18b84:	b00d883a 	mov	r6,r22
   18b88:	000b883a 	mov	r5,zero
   18b8c:	9009883a 	mov	r4,r18
   18b90:	b80f883a 	mov	r7,r23
   18b94:	1021883a 	mov	r16,r2
   18b98:	1823883a 	mov	r17,r3
   18b9c:	00196600 	call	19660 <__muldi3>
   18ba0:	8085883a 	add	r2,r16,r2
   18ba4:	140d803a 	cmpltu	r6,r2,r16
   18ba8:	88c7883a 	add	r3,r17,r3
   18bac:	30cd883a 	add	r6,r6,r3
   18bb0:	1029883a 	mov	r20,r2
   18bb4:	302b883a 	mov	r21,r6
   18bb8:	da801317 	ldw	r10,76(sp)
   18bbc:	dac01417 	ldw	r11,80(sp)
   18bc0:	db001517 	ldw	r12,84(sp)
   18bc4:	db401617 	ldw	r13,88(sp)
   18bc8:	3440612e 	bgeu	r6,r17,18d50 <__muldf3+0x318>
   18bcc:	0009883a 	mov	r4,zero
   18bd0:	5105883a 	add	r2,r10,r4
   18bd4:	128d803a 	cmpltu	r6,r2,r10
   18bd8:	5d07883a 	add	r3,r11,r20
   18bdc:	30cd883a 	add	r6,r6,r3
   18be0:	0021883a 	mov	r16,zero
   18be4:	04400044 	movi	r17,1
   18be8:	1025883a 	mov	r18,r2
   18bec:	3027883a 	mov	r19,r6
   18bf0:	32c06236 	bltu	r6,r11,18d7c <__muldf3+0x344>
   18bf4:	59807a26 	beq	r11,r6,18de0 <__muldf3+0x3a8>
   18bf8:	680b883a 	mov	r5,r13
   18bfc:	b80f883a 	mov	r7,r23
   18c00:	6009883a 	mov	r4,r12
   18c04:	b00d883a 	mov	r6,r22
   18c08:	00196600 	call	19660 <__muldi3>
   18c0c:	1009883a 	mov	r4,r2
   18c10:	000f883a 	mov	r7,zero
   18c14:	1545883a 	add	r2,r2,r21
   18c18:	1111803a 	cmpltu	r8,r2,r4
   18c1c:	19c7883a 	add	r3,r3,r7
   18c20:	40c7883a 	add	r3,r8,r3
   18c24:	88cb883a 	add	r5,r17,r3
   18c28:	d8c00617 	ldw	r3,24(sp)
   18c2c:	8089883a 	add	r4,r16,r2
   18c30:	d8800b17 	ldw	r2,44(sp)
   18c34:	18c00104 	addi	r3,r3,4
   18c38:	240d803a 	cmpltu	r6,r4,r16
   18c3c:	10c7883a 	add	r3,r2,r3
   18c40:	2013883a 	mov	r9,r4
   18c44:	d8800a17 	ldw	r2,40(sp)
   18c48:	d9000517 	ldw	r4,20(sp)
   18c4c:	314d883a 	add	r6,r6,r5
   18c50:	3015883a 	mov	r10,r6
   18c54:	2088c03a 	cmpne	r4,r4,r2
   18c58:	00880034 	movhi	r2,8192
   18c5c:	10bfffc4 	addi	r2,r2,-1
   18c60:	d9000f15 	stw	r4,60(sp)
   18c64:	d8c01015 	stw	r3,64(sp)
   18c68:	1180162e 	bgeu	r2,r6,18cc4 <__muldf3+0x28c>
   18c6c:	1811883a 	mov	r8,r3
   18c70:	101f883a 	mov	r15,r2
   18c74:	980497fa 	slli	r2,r19,31
   18c78:	9016d07a 	srli	r11,r18,1
   18c7c:	500697fa 	slli	r3,r10,31
   18c80:	480cd07a 	srli	r6,r9,1
   18c84:	500ed07a 	srli	r7,r10,1
   18c88:	12d6b03a 	or	r11,r2,r11
   18c8c:	00800044 	movi	r2,1
   18c90:	198cb03a 	or	r6,r3,r6
   18c94:	4888703a 	and	r4,r9,r2
   18c98:	9818d07a 	srli	r12,r19,1
   18c9c:	001b883a 	mov	r13,zero
   18ca0:	03a00034 	movhi	r14,32768
   18ca4:	3013883a 	mov	r9,r6
   18ca8:	3815883a 	mov	r10,r7
   18cac:	4091883a 	add	r8,r8,r2
   18cb0:	20000226 	beq	r4,zero,18cbc <__muldf3+0x284>
   18cb4:	5b64b03a 	or	r18,r11,r13
   18cb8:	63a6b03a 	or	r19,r12,r14
   18cbc:	7abfed36 	bltu	r15,r10,18c74 <__muldf3+0x23c>
   18cc0:	da001015 	stw	r8,64(sp)
   18cc4:	00840034 	movhi	r2,4096
   18cc8:	10bfffc4 	addi	r2,r2,-1
   18ccc:	12801436 	bltu	r2,r10,18d20 <__muldf3+0x2e8>
   18cd0:	da001017 	ldw	r8,64(sp)
   18cd4:	101f883a 	mov	r15,r2
   18cd8:	4a45883a 	add	r2,r9,r9
   18cdc:	124d803a 	cmpltu	r6,r2,r9
   18ce0:	5287883a 	add	r3,r10,r10
   18ce4:	9497883a 	add	r11,r18,r18
   18ce8:	5c8f803a 	cmpltu	r7,r11,r18
   18cec:	9cd9883a 	add	r12,r19,r19
   18cf0:	01000044 	movi	r4,1
   18cf4:	30cd883a 	add	r6,r6,r3
   18cf8:	3b0f883a 	add	r7,r7,r12
   18cfc:	423fffc4 	addi	r8,r8,-1
   18d00:	1013883a 	mov	r9,r2
   18d04:	3015883a 	mov	r10,r6
   18d08:	111ab03a 	or	r13,r2,r4
   18d0c:	98003016 	blt	r19,zero,18dd0 <__muldf3+0x398>
   18d10:	5825883a 	mov	r18,r11
   18d14:	3827883a 	mov	r19,r7
   18d18:	7abfef2e 	bgeu	r15,r10,18cd8 <__muldf3+0x2a0>
   18d1c:	da001015 	stw	r8,64(sp)
   18d20:	00803fc4 	movi	r2,255
   18d24:	488e703a 	and	r7,r9,r2
   18d28:	00802004 	movi	r2,128
   18d2c:	0007883a 	mov	r3,zero
   18d30:	0011883a 	mov	r8,zero
   18d34:	38801826 	beq	r7,r2,18d98 <__muldf3+0x360>
   18d38:	008000c4 	movi	r2,3
   18d3c:	d9000e04 	addi	r4,sp,56
   18d40:	da801215 	stw	r10,72(sp)
   18d44:	d8800e15 	stw	r2,56(sp)
   18d48:	da401115 	stw	r9,68(sp)
   18d4c:	003f6a06 	br	18af8 <__muldf3+0xc0>
   18d50:	89802126 	beq	r17,r6,18dd8 <__muldf3+0x3a0>
   18d54:	0009883a 	mov	r4,zero
   18d58:	5105883a 	add	r2,r10,r4
   18d5c:	128d803a 	cmpltu	r6,r2,r10
   18d60:	5d07883a 	add	r3,r11,r20
   18d64:	30cd883a 	add	r6,r6,r3
   18d68:	0021883a 	mov	r16,zero
   18d6c:	0023883a 	mov	r17,zero
   18d70:	1025883a 	mov	r18,r2
   18d74:	3027883a 	mov	r19,r6
   18d78:	32ff9e2e 	bgeu	r6,r11,18bf4 <__muldf3+0x1bc>
   18d7c:	00800044 	movi	r2,1
   18d80:	8089883a 	add	r4,r16,r2
   18d84:	240d803a 	cmpltu	r6,r4,r16
   18d88:	344d883a 	add	r6,r6,r17
   18d8c:	2021883a 	mov	r16,r4
   18d90:	3023883a 	mov	r17,r6
   18d94:	003f9806 	br	18bf8 <__muldf3+0x1c0>
   18d98:	403fe71e 	bne	r8,zero,18d38 <__muldf3+0x300>
   18d9c:	01004004 	movi	r4,256
   18da0:	4904703a 	and	r2,r9,r4
   18da4:	10c4b03a 	or	r2,r2,r3
   18da8:	103fe31e 	bne	r2,zero,18d38 <__muldf3+0x300>
   18dac:	94c4b03a 	or	r2,r18,r19
   18db0:	103fe126 	beq	r2,zero,18d38 <__muldf3+0x300>
   18db4:	49c5883a 	add	r2,r9,r7
   18db8:	1251803a 	cmpltu	r8,r2,r9
   18dbc:	4291883a 	add	r8,r8,r10
   18dc0:	013fc004 	movi	r4,-256
   18dc4:	1112703a 	and	r9,r2,r4
   18dc8:	4015883a 	mov	r10,r8
   18dcc:	003fda06 	br	18d38 <__muldf3+0x300>
   18dd0:	6813883a 	mov	r9,r13
   18dd4:	003fce06 	br	18d10 <__muldf3+0x2d8>
   18dd8:	143f7c36 	bltu	r2,r16,18bcc <__muldf3+0x194>
   18ddc:	003fdd06 	br	18d54 <__muldf3+0x31c>
   18de0:	12bf852e 	bgeu	r2,r10,18bf8 <__muldf3+0x1c0>
   18de4:	003fe506 	br	18d7c <__muldf3+0x344>
   18de8:	00800084 	movi	r2,2
   18dec:	20bf351e 	bne	r4,r2,18ac4 <__muldf3+0x8c>
   18df0:	010000f4 	movhi	r4,3
   18df4:	2120c504 	addi	r4,r4,-31980
   18df8:	003f3f06 	br	18af8 <__muldf3+0xc0>

00018dfc <__divdf3>:
   18dfc:	deffed04 	addi	sp,sp,-76
   18e00:	dcc01115 	stw	r19,68(sp)
   18e04:	dcc00404 	addi	r19,sp,16
   18e08:	2011883a 	mov	r8,r4
   18e0c:	2813883a 	mov	r9,r5
   18e10:	dc000e15 	stw	r16,56(sp)
   18e14:	d809883a 	mov	r4,sp
   18e18:	980b883a 	mov	r5,r19
   18e1c:	dc000904 	addi	r16,sp,36
   18e20:	dfc01215 	stw	ra,72(sp)
   18e24:	da400115 	stw	r9,4(sp)
   18e28:	d9c00315 	stw	r7,12(sp)
   18e2c:	da000015 	stw	r8,0(sp)
   18e30:	d9800215 	stw	r6,8(sp)
   18e34:	dc801015 	stw	r18,64(sp)
   18e38:	dc400f15 	stw	r17,60(sp)
   18e3c:	0019a8c0 	call	19a8c <__unpack_d>
   18e40:	d9000204 	addi	r4,sp,8
   18e44:	800b883a 	mov	r5,r16
   18e48:	0019a8c0 	call	19a8c <__unpack_d>
   18e4c:	d9000417 	ldw	r4,16(sp)
   18e50:	00800044 	movi	r2,1
   18e54:	11000b2e 	bgeu	r2,r4,18e84 <__divdf3+0x88>
   18e58:	d9400917 	ldw	r5,36(sp)
   18e5c:	1140762e 	bgeu	r2,r5,19038 <__divdf3+0x23c>
   18e60:	d8800517 	ldw	r2,20(sp)
   18e64:	d8c00a17 	ldw	r3,40(sp)
   18e68:	01800104 	movi	r6,4
   18e6c:	10c4f03a 	xor	r2,r2,r3
   18e70:	d8800515 	stw	r2,20(sp)
   18e74:	21800226 	beq	r4,r6,18e80 <__divdf3+0x84>
   18e78:	00800084 	movi	r2,2
   18e7c:	2080141e 	bne	r4,r2,18ed0 <__divdf3+0xd4>
   18e80:	29000926 	beq	r5,r4,18ea8 <__divdf3+0xac>
   18e84:	9809883a 	mov	r4,r19
   18e88:	00197780 	call	19778 <__pack_d>
   18e8c:	dfc01217 	ldw	ra,72(sp)
   18e90:	dcc01117 	ldw	r19,68(sp)
   18e94:	dc801017 	ldw	r18,64(sp)
   18e98:	dc400f17 	ldw	r17,60(sp)
   18e9c:	dc000e17 	ldw	r16,56(sp)
   18ea0:	dec01304 	addi	sp,sp,76
   18ea4:	f800283a 	ret
   18ea8:	010000f4 	movhi	r4,3
   18eac:	2120c504 	addi	r4,r4,-31980
   18eb0:	00197780 	call	19778 <__pack_d>
   18eb4:	dfc01217 	ldw	ra,72(sp)
   18eb8:	dcc01117 	ldw	r19,68(sp)
   18ebc:	dc801017 	ldw	r18,64(sp)
   18ec0:	dc400f17 	ldw	r17,60(sp)
   18ec4:	dc000e17 	ldw	r16,56(sp)
   18ec8:	dec01304 	addi	sp,sp,76
   18ecc:	f800283a 	ret
   18ed0:	29805b26 	beq	r5,r6,19040 <__divdf3+0x244>
   18ed4:	28802d26 	beq	r5,r2,18f8c <__divdf3+0x190>
   18ed8:	d8c00617 	ldw	r3,24(sp)
   18edc:	d8800b17 	ldw	r2,44(sp)
   18ee0:	d9c00817 	ldw	r7,32(sp)
   18ee4:	dc400d17 	ldw	r17,52(sp)
   18ee8:	188bc83a 	sub	r5,r3,r2
   18eec:	d9800717 	ldw	r6,28(sp)
   18ef0:	dc000c17 	ldw	r16,48(sp)
   18ef4:	d9400615 	stw	r5,24(sp)
   18ef8:	3c403836 	bltu	r7,r17,18fdc <__divdf3+0x1e0>
   18efc:	89c03626 	beq	r17,r7,18fd8 <__divdf3+0x1dc>
   18f00:	0015883a 	mov	r10,zero
   18f04:	001d883a 	mov	r14,zero
   18f08:	02c40034 	movhi	r11,4096
   18f0c:	001f883a 	mov	r15,zero
   18f10:	003f883a 	mov	ra,zero
   18f14:	04800f44 	movi	r18,61
   18f18:	00000f06 	br	18f58 <__divdf3+0x15c>
   18f1c:	601d883a 	mov	r14,r12
   18f20:	681f883a 	mov	r15,r13
   18f24:	400d883a 	mov	r6,r8
   18f28:	100f883a 	mov	r7,r2
   18f2c:	3191883a 	add	r8,r6,r6
   18f30:	5808d07a 	srli	r4,r11,1
   18f34:	4185803a 	cmpltu	r2,r8,r6
   18f38:	39d3883a 	add	r9,r7,r7
   18f3c:	28c6b03a 	or	r3,r5,r3
   18f40:	1245883a 	add	r2,r2,r9
   18f44:	1815883a 	mov	r10,r3
   18f48:	2017883a 	mov	r11,r4
   18f4c:	400d883a 	mov	r6,r8
   18f50:	100f883a 	mov	r7,r2
   18f54:	fc801726 	beq	ra,r18,18fb4 <__divdf3+0x1b8>
   18f58:	580a97fa 	slli	r5,r11,31
   18f5c:	5006d07a 	srli	r3,r10,1
   18f60:	ffc00044 	addi	ra,ra,1
   18f64:	3c7ff136 	bltu	r7,r17,18f2c <__divdf3+0x130>
   18f68:	3411c83a 	sub	r8,r6,r16
   18f6c:	3205803a 	cmpltu	r2,r6,r8
   18f70:	3c53c83a 	sub	r9,r7,r17
   18f74:	7298b03a 	or	r12,r14,r10
   18f78:	7adab03a 	or	r13,r15,r11
   18f7c:	4885c83a 	sub	r2,r9,r2
   18f80:	89ffe61e 	bne	r17,r7,18f1c <__divdf3+0x120>
   18f84:	343fe936 	bltu	r6,r16,18f2c <__divdf3+0x130>
   18f88:	003fe406 	br	18f1c <__divdf3+0x120>
   18f8c:	9809883a 	mov	r4,r19
   18f90:	d9800415 	stw	r6,16(sp)
   18f94:	00197780 	call	19778 <__pack_d>
   18f98:	dfc01217 	ldw	ra,72(sp)
   18f9c:	dcc01117 	ldw	r19,68(sp)
   18fa0:	dc801017 	ldw	r18,64(sp)
   18fa4:	dc400f17 	ldw	r17,60(sp)
   18fa8:	dc000e17 	ldw	r16,56(sp)
   18fac:	dec01304 	addi	sp,sp,76
   18fb0:	f800283a 	ret
   18fb4:	00803fc4 	movi	r2,255
   18fb8:	7090703a 	and	r8,r14,r2
   18fbc:	00802004 	movi	r2,128
   18fc0:	0007883a 	mov	r3,zero
   18fc4:	0013883a 	mov	r9,zero
   18fc8:	40800d26 	beq	r8,r2,19000 <__divdf3+0x204>
   18fcc:	dbc00815 	stw	r15,32(sp)
   18fd0:	db800715 	stw	r14,28(sp)
   18fd4:	003fab06 	br	18e84 <__divdf3+0x88>
   18fd8:	343fc92e 	bgeu	r6,r16,18f00 <__divdf3+0x104>
   18fdc:	3185883a 	add	r2,r6,r6
   18fe0:	1189803a 	cmpltu	r4,r2,r6
   18fe4:	39c7883a 	add	r3,r7,r7
   18fe8:	20c9883a 	add	r4,r4,r3
   18fec:	297fffc4 	addi	r5,r5,-1
   18ff0:	100d883a 	mov	r6,r2
   18ff4:	200f883a 	mov	r7,r4
   18ff8:	d9400615 	stw	r5,24(sp)
   18ffc:	003fc006 	br	18f00 <__divdf3+0x104>
   19000:	483ff21e 	bne	r9,zero,18fcc <__divdf3+0x1d0>
   19004:	01004004 	movi	r4,256
   19008:	7104703a 	and	r2,r14,r4
   1900c:	10c4b03a 	or	r2,r2,r3
   19010:	103fee1e 	bne	r2,zero,18fcc <__divdf3+0x1d0>
   19014:	31c4b03a 	or	r2,r6,r7
   19018:	103fec26 	beq	r2,zero,18fcc <__divdf3+0x1d0>
   1901c:	7205883a 	add	r2,r14,r8
   19020:	1391803a 	cmpltu	r8,r2,r14
   19024:	43d1883a 	add	r8,r8,r15
   19028:	013fc004 	movi	r4,-256
   1902c:	111c703a 	and	r14,r2,r4
   19030:	401f883a 	mov	r15,r8
   19034:	003fe506 	br	18fcc <__divdf3+0x1d0>
   19038:	8009883a 	mov	r4,r16
   1903c:	003f9206 	br	18e88 <__divdf3+0x8c>
   19040:	9809883a 	mov	r4,r19
   19044:	d8000715 	stw	zero,28(sp)
   19048:	d8000815 	stw	zero,32(sp)
   1904c:	d8000615 	stw	zero,24(sp)
   19050:	003f8d06 	br	18e88 <__divdf3+0x8c>

00019054 <__eqdf2>:
   19054:	deffef04 	addi	sp,sp,-68
   19058:	dc400f15 	stw	r17,60(sp)
   1905c:	dc400404 	addi	r17,sp,16
   19060:	2005883a 	mov	r2,r4
   19064:	2807883a 	mov	r3,r5
   19068:	dc000e15 	stw	r16,56(sp)
   1906c:	d809883a 	mov	r4,sp
   19070:	880b883a 	mov	r5,r17
   19074:	dc000904 	addi	r16,sp,36
   19078:	d8c00115 	stw	r3,4(sp)
   1907c:	d8800015 	stw	r2,0(sp)
   19080:	d9800215 	stw	r6,8(sp)
   19084:	dfc01015 	stw	ra,64(sp)
   19088:	d9c00315 	stw	r7,12(sp)
   1908c:	0019a8c0 	call	19a8c <__unpack_d>
   19090:	d9000204 	addi	r4,sp,8
   19094:	800b883a 	mov	r5,r16
   19098:	0019a8c0 	call	19a8c <__unpack_d>
   1909c:	d8800417 	ldw	r2,16(sp)
   190a0:	00c00044 	movi	r3,1
   190a4:	180d883a 	mov	r6,r3
   190a8:	1880062e 	bgeu	r3,r2,190c4 <__eqdf2+0x70>
   190ac:	d8800917 	ldw	r2,36(sp)
   190b0:	8809883a 	mov	r4,r17
   190b4:	800b883a 	mov	r5,r16
   190b8:	1880022e 	bgeu	r3,r2,190c4 <__eqdf2+0x70>
   190bc:	0019bc40 	call	19bc4 <__fpcmp_parts_d>
   190c0:	100d883a 	mov	r6,r2
   190c4:	3005883a 	mov	r2,r6
   190c8:	dfc01017 	ldw	ra,64(sp)
   190cc:	dc400f17 	ldw	r17,60(sp)
   190d0:	dc000e17 	ldw	r16,56(sp)
   190d4:	dec01104 	addi	sp,sp,68
   190d8:	f800283a 	ret

000190dc <__nedf2>:
   190dc:	deffef04 	addi	sp,sp,-68
   190e0:	dc400f15 	stw	r17,60(sp)
   190e4:	dc400404 	addi	r17,sp,16
   190e8:	2005883a 	mov	r2,r4
   190ec:	2807883a 	mov	r3,r5
   190f0:	dc000e15 	stw	r16,56(sp)
   190f4:	d809883a 	mov	r4,sp
   190f8:	880b883a 	mov	r5,r17
   190fc:	dc000904 	addi	r16,sp,36
   19100:	d8c00115 	stw	r3,4(sp)
   19104:	d8800015 	stw	r2,0(sp)
   19108:	d9800215 	stw	r6,8(sp)
   1910c:	dfc01015 	stw	ra,64(sp)
   19110:	d9c00315 	stw	r7,12(sp)
   19114:	0019a8c0 	call	19a8c <__unpack_d>
   19118:	d9000204 	addi	r4,sp,8
   1911c:	800b883a 	mov	r5,r16
   19120:	0019a8c0 	call	19a8c <__unpack_d>
   19124:	d8800417 	ldw	r2,16(sp)
   19128:	00c00044 	movi	r3,1
   1912c:	180d883a 	mov	r6,r3
   19130:	1880062e 	bgeu	r3,r2,1914c <__nedf2+0x70>
   19134:	d8800917 	ldw	r2,36(sp)
   19138:	8809883a 	mov	r4,r17
   1913c:	800b883a 	mov	r5,r16
   19140:	1880022e 	bgeu	r3,r2,1914c <__nedf2+0x70>
   19144:	0019bc40 	call	19bc4 <__fpcmp_parts_d>
   19148:	100d883a 	mov	r6,r2
   1914c:	3005883a 	mov	r2,r6
   19150:	dfc01017 	ldw	ra,64(sp)
   19154:	dc400f17 	ldw	r17,60(sp)
   19158:	dc000e17 	ldw	r16,56(sp)
   1915c:	dec01104 	addi	sp,sp,68
   19160:	f800283a 	ret

00019164 <__gtdf2>:
   19164:	deffef04 	addi	sp,sp,-68
   19168:	dc400f15 	stw	r17,60(sp)
   1916c:	dc400404 	addi	r17,sp,16
   19170:	2005883a 	mov	r2,r4
   19174:	2807883a 	mov	r3,r5
   19178:	dc000e15 	stw	r16,56(sp)
   1917c:	d809883a 	mov	r4,sp
   19180:	880b883a 	mov	r5,r17
   19184:	dc000904 	addi	r16,sp,36
   19188:	d8c00115 	stw	r3,4(sp)
   1918c:	d8800015 	stw	r2,0(sp)
   19190:	d9800215 	stw	r6,8(sp)
   19194:	dfc01015 	stw	ra,64(sp)
   19198:	d9c00315 	stw	r7,12(sp)
   1919c:	0019a8c0 	call	19a8c <__unpack_d>
   191a0:	d9000204 	addi	r4,sp,8
   191a4:	800b883a 	mov	r5,r16
   191a8:	0019a8c0 	call	19a8c <__unpack_d>
   191ac:	d8800417 	ldw	r2,16(sp)
   191b0:	00c00044 	movi	r3,1
   191b4:	01bfffc4 	movi	r6,-1
   191b8:	1880062e 	bgeu	r3,r2,191d4 <__gtdf2+0x70>
   191bc:	d8800917 	ldw	r2,36(sp)
   191c0:	8809883a 	mov	r4,r17
   191c4:	800b883a 	mov	r5,r16
   191c8:	1880022e 	bgeu	r3,r2,191d4 <__gtdf2+0x70>
   191cc:	0019bc40 	call	19bc4 <__fpcmp_parts_d>
   191d0:	100d883a 	mov	r6,r2
   191d4:	3005883a 	mov	r2,r6
   191d8:	dfc01017 	ldw	ra,64(sp)
   191dc:	dc400f17 	ldw	r17,60(sp)
   191e0:	dc000e17 	ldw	r16,56(sp)
   191e4:	dec01104 	addi	sp,sp,68
   191e8:	f800283a 	ret

000191ec <__gedf2>:
   191ec:	deffef04 	addi	sp,sp,-68
   191f0:	dc400f15 	stw	r17,60(sp)
   191f4:	dc400404 	addi	r17,sp,16
   191f8:	2005883a 	mov	r2,r4
   191fc:	2807883a 	mov	r3,r5
   19200:	dc000e15 	stw	r16,56(sp)
   19204:	d809883a 	mov	r4,sp
   19208:	880b883a 	mov	r5,r17
   1920c:	dc000904 	addi	r16,sp,36
   19210:	d8c00115 	stw	r3,4(sp)
   19214:	d8800015 	stw	r2,0(sp)
   19218:	d9800215 	stw	r6,8(sp)
   1921c:	dfc01015 	stw	ra,64(sp)
   19220:	d9c00315 	stw	r7,12(sp)
   19224:	0019a8c0 	call	19a8c <__unpack_d>
   19228:	d9000204 	addi	r4,sp,8
   1922c:	800b883a 	mov	r5,r16
   19230:	0019a8c0 	call	19a8c <__unpack_d>
   19234:	d8800417 	ldw	r2,16(sp)
   19238:	00c00044 	movi	r3,1
   1923c:	01bfffc4 	movi	r6,-1
   19240:	1880062e 	bgeu	r3,r2,1925c <__gedf2+0x70>
   19244:	d8800917 	ldw	r2,36(sp)
   19248:	8809883a 	mov	r4,r17
   1924c:	800b883a 	mov	r5,r16
   19250:	1880022e 	bgeu	r3,r2,1925c <__gedf2+0x70>
   19254:	0019bc40 	call	19bc4 <__fpcmp_parts_d>
   19258:	100d883a 	mov	r6,r2
   1925c:	3005883a 	mov	r2,r6
   19260:	dfc01017 	ldw	ra,64(sp)
   19264:	dc400f17 	ldw	r17,60(sp)
   19268:	dc000e17 	ldw	r16,56(sp)
   1926c:	dec01104 	addi	sp,sp,68
   19270:	f800283a 	ret

00019274 <__ltdf2>:
   19274:	deffef04 	addi	sp,sp,-68
   19278:	dc400f15 	stw	r17,60(sp)
   1927c:	dc400404 	addi	r17,sp,16
   19280:	2005883a 	mov	r2,r4
   19284:	2807883a 	mov	r3,r5
   19288:	dc000e15 	stw	r16,56(sp)
   1928c:	d809883a 	mov	r4,sp
   19290:	880b883a 	mov	r5,r17
   19294:	dc000904 	addi	r16,sp,36
   19298:	d8c00115 	stw	r3,4(sp)
   1929c:	d8800015 	stw	r2,0(sp)
   192a0:	d9800215 	stw	r6,8(sp)
   192a4:	dfc01015 	stw	ra,64(sp)
   192a8:	d9c00315 	stw	r7,12(sp)
   192ac:	0019a8c0 	call	19a8c <__unpack_d>
   192b0:	d9000204 	addi	r4,sp,8
   192b4:	800b883a 	mov	r5,r16
   192b8:	0019a8c0 	call	19a8c <__unpack_d>
   192bc:	d8800417 	ldw	r2,16(sp)
   192c0:	00c00044 	movi	r3,1
   192c4:	180d883a 	mov	r6,r3
   192c8:	1880062e 	bgeu	r3,r2,192e4 <__ltdf2+0x70>
   192cc:	d8800917 	ldw	r2,36(sp)
   192d0:	8809883a 	mov	r4,r17
   192d4:	800b883a 	mov	r5,r16
   192d8:	1880022e 	bgeu	r3,r2,192e4 <__ltdf2+0x70>
   192dc:	0019bc40 	call	19bc4 <__fpcmp_parts_d>
   192e0:	100d883a 	mov	r6,r2
   192e4:	3005883a 	mov	r2,r6
   192e8:	dfc01017 	ldw	ra,64(sp)
   192ec:	dc400f17 	ldw	r17,60(sp)
   192f0:	dc000e17 	ldw	r16,56(sp)
   192f4:	dec01104 	addi	sp,sp,68
   192f8:	f800283a 	ret

000192fc <__floatsidf>:
   192fc:	2006d7fa 	srli	r3,r4,31
   19300:	defff604 	addi	sp,sp,-40
   19304:	008000c4 	movi	r2,3
   19308:	dfc00915 	stw	ra,36(sp)
   1930c:	dcc00815 	stw	r19,32(sp)
   19310:	dc800715 	stw	r18,28(sp)
   19314:	dc400615 	stw	r17,24(sp)
   19318:	dc000515 	stw	r16,20(sp)
   1931c:	d8800015 	stw	r2,0(sp)
   19320:	d8c00115 	stw	r3,4(sp)
   19324:	20000f1e 	bne	r4,zero,19364 <__floatsidf+0x68>
   19328:	00800084 	movi	r2,2
   1932c:	d8800015 	stw	r2,0(sp)
   19330:	d809883a 	mov	r4,sp
   19334:	00197780 	call	19778 <__pack_d>
   19338:	1009883a 	mov	r4,r2
   1933c:	180b883a 	mov	r5,r3
   19340:	2005883a 	mov	r2,r4
   19344:	2807883a 	mov	r3,r5
   19348:	dfc00917 	ldw	ra,36(sp)
   1934c:	dcc00817 	ldw	r19,32(sp)
   19350:	dc800717 	ldw	r18,28(sp)
   19354:	dc400617 	ldw	r17,24(sp)
   19358:	dc000517 	ldw	r16,20(sp)
   1935c:	dec00a04 	addi	sp,sp,40
   19360:	f800283a 	ret
   19364:	00800f04 	movi	r2,60
   19368:	1807003a 	cmpeq	r3,r3,zero
   1936c:	d8800215 	stw	r2,8(sp)
   19370:	18001126 	beq	r3,zero,193b8 <__floatsidf+0xbc>
   19374:	0027883a 	mov	r19,zero
   19378:	2025883a 	mov	r18,r4
   1937c:	d9000315 	stw	r4,12(sp)
   19380:	dcc00415 	stw	r19,16(sp)
   19384:	00196f80 	call	196f8 <__clzsi2>
   19388:	11000744 	addi	r4,r2,29
   1938c:	013fe80e 	bge	zero,r4,19330 <__floatsidf+0x34>
   19390:	10bfff44 	addi	r2,r2,-3
   19394:	10000c16 	blt	r2,zero,193c8 <__floatsidf+0xcc>
   19398:	90a2983a 	sll	r17,r18,r2
   1939c:	0021883a 	mov	r16,zero
   193a0:	d8800217 	ldw	r2,8(sp)
   193a4:	dc400415 	stw	r17,16(sp)
   193a8:	dc000315 	stw	r16,12(sp)
   193ac:	1105c83a 	sub	r2,r2,r4
   193b0:	d8800215 	stw	r2,8(sp)
   193b4:	003fde06 	br	19330 <__floatsidf+0x34>
   193b8:	00a00034 	movhi	r2,32768
   193bc:	20800a26 	beq	r4,r2,193e8 <__floatsidf+0xec>
   193c0:	0109c83a 	sub	r4,zero,r4
   193c4:	003feb06 	br	19374 <__floatsidf+0x78>
   193c8:	9006d07a 	srli	r3,r18,1
   193cc:	008007c4 	movi	r2,31
   193d0:	1105c83a 	sub	r2,r2,r4
   193d4:	1886d83a 	srl	r3,r3,r2
   193d8:	9922983a 	sll	r17,r19,r4
   193dc:	9120983a 	sll	r16,r18,r4
   193e0:	1c62b03a 	or	r17,r3,r17
   193e4:	003fee06 	br	193a0 <__floatsidf+0xa4>
   193e8:	0009883a 	mov	r4,zero
   193ec:	01707834 	movhi	r5,49632
   193f0:	003fd306 	br	19340 <__floatsidf+0x44>

000193f4 <__fixdfsi>:
   193f4:	defff804 	addi	sp,sp,-32
   193f8:	2005883a 	mov	r2,r4
   193fc:	2807883a 	mov	r3,r5
   19400:	d809883a 	mov	r4,sp
   19404:	d9400204 	addi	r5,sp,8
   19408:	d8c00115 	stw	r3,4(sp)
   1940c:	d8800015 	stw	r2,0(sp)
   19410:	dfc00715 	stw	ra,28(sp)
   19414:	0019a8c0 	call	19a8c <__unpack_d>
   19418:	d8c00217 	ldw	r3,8(sp)
   1941c:	00800084 	movi	r2,2
   19420:	1880051e 	bne	r3,r2,19438 <__fixdfsi+0x44>
   19424:	0007883a 	mov	r3,zero
   19428:	1805883a 	mov	r2,r3
   1942c:	dfc00717 	ldw	ra,28(sp)
   19430:	dec00804 	addi	sp,sp,32
   19434:	f800283a 	ret
   19438:	00800044 	movi	r2,1
   1943c:	10fff92e 	bgeu	r2,r3,19424 <__fixdfsi+0x30>
   19440:	00800104 	movi	r2,4
   19444:	18800426 	beq	r3,r2,19458 <__fixdfsi+0x64>
   19448:	d8c00417 	ldw	r3,16(sp)
   1944c:	183ff516 	blt	r3,zero,19424 <__fixdfsi+0x30>
   19450:	00800784 	movi	r2,30
   19454:	10c0080e 	bge	r2,r3,19478 <__fixdfsi+0x84>
   19458:	d8800317 	ldw	r2,12(sp)
   1945c:	1000121e 	bne	r2,zero,194a8 <__fixdfsi+0xb4>
   19460:	00e00034 	movhi	r3,32768
   19464:	18ffffc4 	addi	r3,r3,-1
   19468:	1805883a 	mov	r2,r3
   1946c:	dfc00717 	ldw	ra,28(sp)
   19470:	dec00804 	addi	sp,sp,32
   19474:	f800283a 	ret
   19478:	00800f04 	movi	r2,60
   1947c:	10d1c83a 	sub	r8,r2,r3
   19480:	40bff804 	addi	r2,r8,-32
   19484:	d9800517 	ldw	r6,20(sp)
   19488:	d9c00617 	ldw	r7,24(sp)
   1948c:	10000816 	blt	r2,zero,194b0 <__fixdfsi+0xbc>
   19490:	3888d83a 	srl	r4,r7,r2
   19494:	d8800317 	ldw	r2,12(sp)
   19498:	2007883a 	mov	r3,r4
   1949c:	103fe226 	beq	r2,zero,19428 <__fixdfsi+0x34>
   194a0:	0107c83a 	sub	r3,zero,r4
   194a4:	003fe006 	br	19428 <__fixdfsi+0x34>
   194a8:	00e00034 	movhi	r3,32768
   194ac:	003fde06 	br	19428 <__fixdfsi+0x34>
   194b0:	39c7883a 	add	r3,r7,r7
   194b4:	008007c4 	movi	r2,31
   194b8:	1205c83a 	sub	r2,r2,r8
   194bc:	1886983a 	sll	r3,r3,r2
   194c0:	3208d83a 	srl	r4,r6,r8
   194c4:	1908b03a 	or	r4,r3,r4
   194c8:	003ff206 	br	19494 <__fixdfsi+0xa0>

000194cc <__floatunsidf>:
   194cc:	defff204 	addi	sp,sp,-56
   194d0:	dfc00d15 	stw	ra,52(sp)
   194d4:	ddc00c15 	stw	r23,48(sp)
   194d8:	dd800b15 	stw	r22,44(sp)
   194dc:	dd400a15 	stw	r21,40(sp)
   194e0:	dd000915 	stw	r20,36(sp)
   194e4:	dcc00815 	stw	r19,32(sp)
   194e8:	dc800715 	stw	r18,28(sp)
   194ec:	dc400615 	stw	r17,24(sp)
   194f0:	dc000515 	stw	r16,20(sp)
   194f4:	d8000115 	stw	zero,4(sp)
   194f8:	20000f1e 	bne	r4,zero,19538 <__floatunsidf+0x6c>
   194fc:	00800084 	movi	r2,2
   19500:	d8800015 	stw	r2,0(sp)
   19504:	d809883a 	mov	r4,sp
   19508:	00197780 	call	19778 <__pack_d>
   1950c:	dfc00d17 	ldw	ra,52(sp)
   19510:	ddc00c17 	ldw	r23,48(sp)
   19514:	dd800b17 	ldw	r22,44(sp)
   19518:	dd400a17 	ldw	r21,40(sp)
   1951c:	dd000917 	ldw	r20,36(sp)
   19520:	dcc00817 	ldw	r19,32(sp)
   19524:	dc800717 	ldw	r18,28(sp)
   19528:	dc400617 	ldw	r17,24(sp)
   1952c:	dc000517 	ldw	r16,20(sp)
   19530:	dec00e04 	addi	sp,sp,56
   19534:	f800283a 	ret
   19538:	008000c4 	movi	r2,3
   1953c:	00c00f04 	movi	r3,60
   19540:	002f883a 	mov	r23,zero
   19544:	202d883a 	mov	r22,r4
   19548:	d8800015 	stw	r2,0(sp)
   1954c:	d8c00215 	stw	r3,8(sp)
   19550:	d9000315 	stw	r4,12(sp)
   19554:	ddc00415 	stw	r23,16(sp)
   19558:	00196f80 	call	196f8 <__clzsi2>
   1955c:	12400744 	addi	r9,r2,29
   19560:	48000b16 	blt	r9,zero,19590 <__floatunsidf+0xc4>
   19564:	483fe726 	beq	r9,zero,19504 <__floatunsidf+0x38>
   19568:	10bfff44 	addi	r2,r2,-3
   1956c:	10002e16 	blt	r2,zero,19628 <__floatunsidf+0x15c>
   19570:	b0a2983a 	sll	r17,r22,r2
   19574:	0021883a 	mov	r16,zero
   19578:	d8800217 	ldw	r2,8(sp)
   1957c:	dc400415 	stw	r17,16(sp)
   19580:	dc000315 	stw	r16,12(sp)
   19584:	1245c83a 	sub	r2,r2,r9
   19588:	d8800215 	stw	r2,8(sp)
   1958c:	003fdd06 	br	19504 <__floatunsidf+0x38>
   19590:	0255c83a 	sub	r10,zero,r9
   19594:	51bff804 	addi	r6,r10,-32
   19598:	30001b16 	blt	r6,zero,19608 <__floatunsidf+0x13c>
   1959c:	b9a8d83a 	srl	r20,r23,r6
   195a0:	002b883a 	mov	r21,zero
   195a4:	000f883a 	mov	r7,zero
   195a8:	01000044 	movi	r4,1
   195ac:	0011883a 	mov	r8,zero
   195b0:	30002516 	blt	r6,zero,19648 <__floatunsidf+0x17c>
   195b4:	21a6983a 	sll	r19,r4,r6
   195b8:	0025883a 	mov	r18,zero
   195bc:	00bfffc4 	movi	r2,-1
   195c0:	9089883a 	add	r4,r18,r2
   195c4:	988b883a 	add	r5,r19,r2
   195c8:	248d803a 	cmpltu	r6,r4,r18
   195cc:	314b883a 	add	r5,r6,r5
   195d0:	b104703a 	and	r2,r22,r4
   195d4:	b946703a 	and	r3,r23,r5
   195d8:	10c4b03a 	or	r2,r2,r3
   195dc:	10000226 	beq	r2,zero,195e8 <__floatunsidf+0x11c>
   195e0:	01c00044 	movi	r7,1
   195e4:	0011883a 	mov	r8,zero
   195e8:	d9000217 	ldw	r4,8(sp)
   195ec:	a1c4b03a 	or	r2,r20,r7
   195f0:	aa06b03a 	or	r3,r21,r8
   195f4:	2249c83a 	sub	r4,r4,r9
   195f8:	d8c00415 	stw	r3,16(sp)
   195fc:	d9000215 	stw	r4,8(sp)
   19600:	d8800315 	stw	r2,12(sp)
   19604:	003fbf06 	br	19504 <__floatunsidf+0x38>
   19608:	bdc7883a 	add	r3,r23,r23
   1960c:	008007c4 	movi	r2,31
   19610:	1285c83a 	sub	r2,r2,r10
   19614:	1886983a 	sll	r3,r3,r2
   19618:	b2a8d83a 	srl	r20,r22,r10
   1961c:	baaad83a 	srl	r21,r23,r10
   19620:	1d28b03a 	or	r20,r3,r20
   19624:	003fdf06 	br	195a4 <__floatunsidf+0xd8>
   19628:	b006d07a 	srli	r3,r22,1
   1962c:	008007c4 	movi	r2,31
   19630:	1245c83a 	sub	r2,r2,r9
   19634:	1886d83a 	srl	r3,r3,r2
   19638:	ba62983a 	sll	r17,r23,r9
   1963c:	b260983a 	sll	r16,r22,r9
   19640:	1c62b03a 	or	r17,r3,r17
   19644:	003fcc06 	br	19578 <__floatunsidf+0xac>
   19648:	2006d07a 	srli	r3,r4,1
   1964c:	008007c4 	movi	r2,31
   19650:	1285c83a 	sub	r2,r2,r10
   19654:	18a6d83a 	srl	r19,r3,r2
   19658:	22a4983a 	sll	r18,r4,r10
   1965c:	003fd706 	br	195bc <__floatunsidf+0xf0>

00019660 <__muldi3>:
   19660:	2011883a 	mov	r8,r4
   19664:	427fffcc 	andi	r9,r8,65535
   19668:	4018d43a 	srli	r12,r8,16
   1966c:	32bfffcc 	andi	r10,r6,65535
   19670:	3016d43a 	srli	r11,r6,16
   19674:	4a85383a 	mul	r2,r9,r10
   19678:	6295383a 	mul	r10,r12,r10
   1967c:	4ad3383a 	mul	r9,r9,r11
   19680:	113fffcc 	andi	r4,r2,65535
   19684:	1004d43a 	srli	r2,r2,16
   19688:	4a93883a 	add	r9,r9,r10
   1968c:	3807883a 	mov	r3,r7
   19690:	1245883a 	add	r2,r2,r9
   19694:	280f883a 	mov	r7,r5
   19698:	180b883a 	mov	r5,r3
   1969c:	1006943a 	slli	r3,r2,16
   196a0:	defffd04 	addi	sp,sp,-12
   196a4:	dc800215 	stw	r18,8(sp)
   196a8:	1907883a 	add	r3,r3,r4
   196ac:	dc400115 	stw	r17,4(sp)
   196b0:	dc000015 	stw	r16,0(sp)
   196b4:	4165383a 	mul	r18,r8,r5
   196b8:	31e3383a 	mul	r17,r6,r7
   196bc:	1012d43a 	srli	r9,r2,16
   196c0:	62d9383a 	mul	r12,r12,r11
   196c4:	181f883a 	mov	r15,r3
   196c8:	1280022e 	bgeu	r2,r10,196d4 <__muldi3+0x74>
   196cc:	00800074 	movhi	r2,1
   196d0:	6099883a 	add	r12,r12,r2
   196d4:	624d883a 	add	r6,r12,r9
   196d8:	9187883a 	add	r3,r18,r6
   196dc:	88c7883a 	add	r3,r17,r3
   196e0:	7805883a 	mov	r2,r15
   196e4:	dc800217 	ldw	r18,8(sp)
   196e8:	dc400117 	ldw	r17,4(sp)
   196ec:	dc000017 	ldw	r16,0(sp)
   196f0:	dec00304 	addi	sp,sp,12
   196f4:	f800283a 	ret

000196f8 <__clzsi2>:
   196f8:	00bfffd4 	movui	r2,65535
   196fc:	11000e36 	bltu	r2,r4,19738 <__clzsi2+0x40>
   19700:	00803fc4 	movi	r2,255
   19704:	01400204 	movi	r5,8
   19708:	0007883a 	mov	r3,zero
   1970c:	11001036 	bltu	r2,r4,19750 <__clzsi2+0x58>
   19710:	000b883a 	mov	r5,zero
   19714:	20c6d83a 	srl	r3,r4,r3
   19718:	008000f4 	movhi	r2,3
   1971c:	10a0ca04 	addi	r2,r2,-31960
   19720:	1887883a 	add	r3,r3,r2
   19724:	18800003 	ldbu	r2,0(r3)
   19728:	00c00804 	movi	r3,32
   1972c:	2885883a 	add	r2,r5,r2
   19730:	1885c83a 	sub	r2,r3,r2
   19734:	f800283a 	ret
   19738:	01400404 	movi	r5,16
   1973c:	00804034 	movhi	r2,256
   19740:	10bfffc4 	addi	r2,r2,-1
   19744:	2807883a 	mov	r3,r5
   19748:	113ff22e 	bgeu	r2,r4,19714 <__clzsi2+0x1c>
   1974c:	01400604 	movi	r5,24
   19750:	2807883a 	mov	r3,r5
   19754:	20c6d83a 	srl	r3,r4,r3
   19758:	008000f4 	movhi	r2,3
   1975c:	10a0ca04 	addi	r2,r2,-31960
   19760:	1887883a 	add	r3,r3,r2
   19764:	18800003 	ldbu	r2,0(r3)
   19768:	00c00804 	movi	r3,32
   1976c:	2885883a 	add	r2,r5,r2
   19770:	1885c83a 	sub	r2,r3,r2
   19774:	f800283a 	ret

00019778 <__pack_d>:
   19778:	20c00017 	ldw	r3,0(r4)
   1977c:	defffd04 	addi	sp,sp,-12
   19780:	dc000015 	stw	r16,0(sp)
   19784:	dc800215 	stw	r18,8(sp)
   19788:	dc400115 	stw	r17,4(sp)
   1978c:	00800044 	movi	r2,1
   19790:	22000317 	ldw	r8,12(r4)
   19794:	001f883a 	mov	r15,zero
   19798:	22400417 	ldw	r9,16(r4)
   1979c:	24000117 	ldw	r16,4(r4)
   197a0:	10c0552e 	bgeu	r2,r3,198f8 <__pack_d+0x180>
   197a4:	00800104 	movi	r2,4
   197a8:	18804f26 	beq	r3,r2,198e8 <__pack_d+0x170>
   197ac:	00800084 	movi	r2,2
   197b0:	18800226 	beq	r3,r2,197bc <__pack_d+0x44>
   197b4:	4244b03a 	or	r2,r8,r9
   197b8:	10001a1e 	bne	r2,zero,19824 <__pack_d+0xac>
   197bc:	000d883a 	mov	r6,zero
   197c0:	000f883a 	mov	r7,zero
   197c4:	0011883a 	mov	r8,zero
   197c8:	00800434 	movhi	r2,16
   197cc:	10bfffc4 	addi	r2,r2,-1
   197d0:	301d883a 	mov	r14,r6
   197d4:	3884703a 	and	r2,r7,r2
   197d8:	400a953a 	slli	r5,r8,20
   197dc:	79bffc2c 	andhi	r6,r15,65520
   197e0:	308cb03a 	or	r6,r6,r2
   197e4:	00e00434 	movhi	r3,32784
   197e8:	18ffffc4 	addi	r3,r3,-1
   197ec:	800497fa 	slli	r2,r16,31
   197f0:	30c6703a 	and	r3,r6,r3
   197f4:	1946b03a 	or	r3,r3,r5
   197f8:	01600034 	movhi	r5,32768
   197fc:	297fffc4 	addi	r5,r5,-1
   19800:	194a703a 	and	r5,r3,r5
   19804:	288ab03a 	or	r5,r5,r2
   19808:	2807883a 	mov	r3,r5
   1980c:	7005883a 	mov	r2,r14
   19810:	dc800217 	ldw	r18,8(sp)
   19814:	dc400117 	ldw	r17,4(sp)
   19818:	dc000017 	ldw	r16,0(sp)
   1981c:	dec00304 	addi	sp,sp,12
   19820:	f800283a 	ret
   19824:	21000217 	ldw	r4,8(r4)
   19828:	00bf0084 	movi	r2,-1022
   1982c:	20803f16 	blt	r4,r2,1992c <__pack_d+0x1b4>
   19830:	0080ffc4 	movi	r2,1023
   19834:	11002c16 	blt	r2,r4,198e8 <__pack_d+0x170>
   19838:	00803fc4 	movi	r2,255
   1983c:	408c703a 	and	r6,r8,r2
   19840:	00802004 	movi	r2,128
   19844:	0007883a 	mov	r3,zero
   19848:	000f883a 	mov	r7,zero
   1984c:	2280ffc4 	addi	r10,r4,1023
   19850:	30801e26 	beq	r6,r2,198cc <__pack_d+0x154>
   19854:	00801fc4 	movi	r2,127
   19858:	4089883a 	add	r4,r8,r2
   1985c:	220d803a 	cmpltu	r6,r4,r8
   19860:	324d883a 	add	r6,r6,r9
   19864:	2011883a 	mov	r8,r4
   19868:	3013883a 	mov	r9,r6
   1986c:	00880034 	movhi	r2,8192
   19870:	10bfffc4 	addi	r2,r2,-1
   19874:	12400d36 	bltu	r2,r9,198ac <__pack_d+0x134>
   19878:	4804963a 	slli	r2,r9,24
   1987c:	400cd23a 	srli	r6,r8,8
   19880:	480ed23a 	srli	r7,r9,8
   19884:	013fffc4 	movi	r4,-1
   19888:	118cb03a 	or	r6,r2,r6
   1988c:	01400434 	movhi	r5,16
   19890:	297fffc4 	addi	r5,r5,-1
   19894:	3104703a 	and	r2,r6,r4
   19898:	3946703a 	and	r3,r7,r5
   1989c:	5201ffcc 	andi	r8,r10,2047
   198a0:	100d883a 	mov	r6,r2
   198a4:	180f883a 	mov	r7,r3
   198a8:	003fc706 	br	197c8 <__pack_d+0x50>
   198ac:	480897fa 	slli	r4,r9,31
   198b0:	4004d07a 	srli	r2,r8,1
   198b4:	4806d07a 	srli	r3,r9,1
   198b8:	52800044 	addi	r10,r10,1
   198bc:	2084b03a 	or	r2,r4,r2
   198c0:	1011883a 	mov	r8,r2
   198c4:	1813883a 	mov	r9,r3
   198c8:	003feb06 	br	19878 <__pack_d+0x100>
   198cc:	383fe11e 	bne	r7,zero,19854 <__pack_d+0xdc>
   198d0:	01004004 	movi	r4,256
   198d4:	4104703a 	and	r2,r8,r4
   198d8:	10c4b03a 	or	r2,r2,r3
   198dc:	103fe326 	beq	r2,zero,1986c <__pack_d+0xf4>
   198e0:	3005883a 	mov	r2,r6
   198e4:	003fdc06 	br	19858 <__pack_d+0xe0>
   198e8:	000d883a 	mov	r6,zero
   198ec:	000f883a 	mov	r7,zero
   198f0:	0201ffc4 	movi	r8,2047
   198f4:	003fb406 	br	197c8 <__pack_d+0x50>
   198f8:	0005883a 	mov	r2,zero
   198fc:	00c00234 	movhi	r3,8
   19900:	408cb03a 	or	r6,r8,r2
   19904:	48ceb03a 	or	r7,r9,r3
   19908:	013fffc4 	movi	r4,-1
   1990c:	01400434 	movhi	r5,16
   19910:	297fffc4 	addi	r5,r5,-1
   19914:	3104703a 	and	r2,r6,r4
   19918:	3946703a 	and	r3,r7,r5
   1991c:	100d883a 	mov	r6,r2
   19920:	180f883a 	mov	r7,r3
   19924:	0201ffc4 	movi	r8,2047
   19928:	003fa706 	br	197c8 <__pack_d+0x50>
   1992c:	1109c83a 	sub	r4,r2,r4
   19930:	00800e04 	movi	r2,56
   19934:	11004316 	blt	r2,r4,19a44 <__pack_d+0x2cc>
   19938:	21fff804 	addi	r7,r4,-32
   1993c:	38004516 	blt	r7,zero,19a54 <__pack_d+0x2dc>
   19940:	49d8d83a 	srl	r12,r9,r7
   19944:	001b883a 	mov	r13,zero
   19948:	0023883a 	mov	r17,zero
   1994c:	01400044 	movi	r5,1
   19950:	0025883a 	mov	r18,zero
   19954:	38004716 	blt	r7,zero,19a74 <__pack_d+0x2fc>
   19958:	29d6983a 	sll	r11,r5,r7
   1995c:	0015883a 	mov	r10,zero
   19960:	00bfffc4 	movi	r2,-1
   19964:	5089883a 	add	r4,r10,r2
   19968:	588b883a 	add	r5,r11,r2
   1996c:	228d803a 	cmpltu	r6,r4,r10
   19970:	314b883a 	add	r5,r6,r5
   19974:	4104703a 	and	r2,r8,r4
   19978:	4946703a 	and	r3,r9,r5
   1997c:	10c4b03a 	or	r2,r2,r3
   19980:	10000226 	beq	r2,zero,1998c <__pack_d+0x214>
   19984:	04400044 	movi	r17,1
   19988:	0025883a 	mov	r18,zero
   1998c:	00803fc4 	movi	r2,255
   19990:	644eb03a 	or	r7,r12,r17
   19994:	3892703a 	and	r9,r7,r2
   19998:	00802004 	movi	r2,128
   1999c:	6c90b03a 	or	r8,r13,r18
   199a0:	0015883a 	mov	r10,zero
   199a4:	48801626 	beq	r9,r2,19a00 <__pack_d+0x288>
   199a8:	01001fc4 	movi	r4,127
   199ac:	3905883a 	add	r2,r7,r4
   199b0:	11cd803a 	cmpltu	r6,r2,r7
   199b4:	320d883a 	add	r6,r6,r8
   199b8:	100f883a 	mov	r7,r2
   199bc:	00840034 	movhi	r2,4096
   199c0:	10bfffc4 	addi	r2,r2,-1
   199c4:	3011883a 	mov	r8,r6
   199c8:	0007883a 	mov	r3,zero
   199cc:	11801b36 	bltu	r2,r6,19a3c <__pack_d+0x2c4>
   199d0:	4004963a 	slli	r2,r8,24
   199d4:	3808d23a 	srli	r4,r7,8
   199d8:	400ad23a 	srli	r5,r8,8
   199dc:	1813883a 	mov	r9,r3
   199e0:	1108b03a 	or	r4,r2,r4
   199e4:	00bfffc4 	movi	r2,-1
   199e8:	00c00434 	movhi	r3,16
   199ec:	18ffffc4 	addi	r3,r3,-1
   199f0:	208c703a 	and	r6,r4,r2
   199f4:	28ce703a 	and	r7,r5,r3
   199f8:	4a01ffcc 	andi	r8,r9,2047
   199fc:	003f7206 	br	197c8 <__pack_d+0x50>
   19a00:	503fe91e 	bne	r10,zero,199a8 <__pack_d+0x230>
   19a04:	01004004 	movi	r4,256
   19a08:	3904703a 	and	r2,r7,r4
   19a0c:	0007883a 	mov	r3,zero
   19a10:	10c4b03a 	or	r2,r2,r3
   19a14:	10000626 	beq	r2,zero,19a30 <__pack_d+0x2b8>
   19a18:	3a45883a 	add	r2,r7,r9
   19a1c:	11cd803a 	cmpltu	r6,r2,r7
   19a20:	320d883a 	add	r6,r6,r8
   19a24:	100f883a 	mov	r7,r2
   19a28:	3011883a 	mov	r8,r6
   19a2c:	0007883a 	mov	r3,zero
   19a30:	00840034 	movhi	r2,4096
   19a34:	10bfffc4 	addi	r2,r2,-1
   19a38:	123fe52e 	bgeu	r2,r8,199d0 <__pack_d+0x258>
   19a3c:	00c00044 	movi	r3,1
   19a40:	003fe306 	br	199d0 <__pack_d+0x258>
   19a44:	0009883a 	mov	r4,zero
   19a48:	0013883a 	mov	r9,zero
   19a4c:	000b883a 	mov	r5,zero
   19a50:	003fe406 	br	199e4 <__pack_d+0x26c>
   19a54:	4a47883a 	add	r3,r9,r9
   19a58:	008007c4 	movi	r2,31
   19a5c:	1105c83a 	sub	r2,r2,r4
   19a60:	1886983a 	sll	r3,r3,r2
   19a64:	4118d83a 	srl	r12,r8,r4
   19a68:	491ad83a 	srl	r13,r9,r4
   19a6c:	1b18b03a 	or	r12,r3,r12
   19a70:	003fb506 	br	19948 <__pack_d+0x1d0>
   19a74:	2806d07a 	srli	r3,r5,1
   19a78:	008007c4 	movi	r2,31
   19a7c:	1105c83a 	sub	r2,r2,r4
   19a80:	1896d83a 	srl	r11,r3,r2
   19a84:	2914983a 	sll	r10,r5,r4
   19a88:	003fb506 	br	19960 <__pack_d+0x1e8>

00019a8c <__unpack_d>:
   19a8c:	20c00117 	ldw	r3,4(r4)
   19a90:	22400017 	ldw	r9,0(r4)
   19a94:	00800434 	movhi	r2,16
   19a98:	10bfffc4 	addi	r2,r2,-1
   19a9c:	1808d53a 	srli	r4,r3,20
   19aa0:	180cd7fa 	srli	r6,r3,31
   19aa4:	1894703a 	and	r10,r3,r2
   19aa8:	2201ffcc 	andi	r8,r4,2047
   19aac:	281b883a 	mov	r13,r5
   19ab0:	4817883a 	mov	r11,r9
   19ab4:	29800115 	stw	r6,4(r5)
   19ab8:	5019883a 	mov	r12,r10
   19abc:	40001e1e 	bne	r8,zero,19b38 <__unpack_d+0xac>
   19ac0:	4a84b03a 	or	r2,r9,r10
   19ac4:	10001926 	beq	r2,zero,19b2c <__unpack_d+0xa0>
   19ac8:	4804d63a 	srli	r2,r9,24
   19acc:	500c923a 	slli	r6,r10,8
   19ad0:	013f0084 	movi	r4,-1022
   19ad4:	00c40034 	movhi	r3,4096
   19ad8:	18ffffc4 	addi	r3,r3,-1
   19adc:	118cb03a 	or	r6,r2,r6
   19ae0:	008000c4 	movi	r2,3
   19ae4:	480a923a 	slli	r5,r9,8
   19ae8:	68800015 	stw	r2,0(r13)
   19aec:	69000215 	stw	r4,8(r13)
   19af0:	19800b36 	bltu	r3,r6,19b20 <__unpack_d+0x94>
   19af4:	200f883a 	mov	r7,r4
   19af8:	1811883a 	mov	r8,r3
   19afc:	2945883a 	add	r2,r5,r5
   19b00:	1149803a 	cmpltu	r4,r2,r5
   19b04:	3187883a 	add	r3,r6,r6
   19b08:	20c9883a 	add	r4,r4,r3
   19b0c:	100b883a 	mov	r5,r2
   19b10:	200d883a 	mov	r6,r4
   19b14:	39ffffc4 	addi	r7,r7,-1
   19b18:	413ff82e 	bgeu	r8,r4,19afc <__unpack_d+0x70>
   19b1c:	69c00215 	stw	r7,8(r13)
   19b20:	69800415 	stw	r6,16(r13)
   19b24:	69400315 	stw	r5,12(r13)
   19b28:	f800283a 	ret
   19b2c:	00800084 	movi	r2,2
   19b30:	28800015 	stw	r2,0(r5)
   19b34:	f800283a 	ret
   19b38:	0081ffc4 	movi	r2,2047
   19b3c:	40800f26 	beq	r8,r2,19b7c <__unpack_d+0xf0>
   19b40:	480cd63a 	srli	r6,r9,24
   19b44:	5006923a 	slli	r3,r10,8
   19b48:	4804923a 	slli	r2,r9,8
   19b4c:	0009883a 	mov	r4,zero
   19b50:	30c6b03a 	or	r3,r6,r3
   19b54:	01440034 	movhi	r5,4096
   19b58:	110cb03a 	or	r6,r2,r4
   19b5c:	423f0044 	addi	r8,r8,-1023
   19b60:	194eb03a 	or	r7,r3,r5
   19b64:	008000c4 	movi	r2,3
   19b68:	69c00415 	stw	r7,16(r13)
   19b6c:	6a000215 	stw	r8,8(r13)
   19b70:	68800015 	stw	r2,0(r13)
   19b74:	69800315 	stw	r6,12(r13)
   19b78:	f800283a 	ret
   19b7c:	4a84b03a 	or	r2,r9,r10
   19b80:	1000031e 	bne	r2,zero,19b90 <__unpack_d+0x104>
   19b84:	00800104 	movi	r2,4
   19b88:	28800015 	stw	r2,0(r5)
   19b8c:	f800283a 	ret
   19b90:	0009883a 	mov	r4,zero
   19b94:	01400234 	movhi	r5,8
   19b98:	4904703a 	and	r2,r9,r4
   19b9c:	5146703a 	and	r3,r10,r5
   19ba0:	10c4b03a 	or	r2,r2,r3
   19ba4:	10000526 	beq	r2,zero,19bbc <__unpack_d+0x130>
   19ba8:	00800044 	movi	r2,1
   19bac:	68800015 	stw	r2,0(r13)
   19bb0:	6b000415 	stw	r12,16(r13)
   19bb4:	6ac00315 	stw	r11,12(r13)
   19bb8:	f800283a 	ret
   19bbc:	68000015 	stw	zero,0(r13)
   19bc0:	003ffb06 	br	19bb0 <__unpack_d+0x124>

00019bc4 <__fpcmp_parts_d>:
   19bc4:	21800017 	ldw	r6,0(r4)
   19bc8:	00c00044 	movi	r3,1
   19bcc:	19800a2e 	bgeu	r3,r6,19bf8 <__fpcmp_parts_d+0x34>
   19bd0:	28800017 	ldw	r2,0(r5)
   19bd4:	1880082e 	bgeu	r3,r2,19bf8 <__fpcmp_parts_d+0x34>
   19bd8:	00c00104 	movi	r3,4
   19bdc:	30c02626 	beq	r6,r3,19c78 <__fpcmp_parts_d+0xb4>
   19be0:	10c02226 	beq	r2,r3,19c6c <__fpcmp_parts_d+0xa8>
   19be4:	00c00084 	movi	r3,2
   19be8:	30c00526 	beq	r6,r3,19c00 <__fpcmp_parts_d+0x3c>
   19bec:	10c0071e 	bne	r2,r3,19c0c <__fpcmp_parts_d+0x48>
   19bf0:	20800117 	ldw	r2,4(r4)
   19bf4:	1000091e 	bne	r2,zero,19c1c <__fpcmp_parts_d+0x58>
   19bf8:	00800044 	movi	r2,1
   19bfc:	f800283a 	ret
   19c00:	10c01a1e 	bne	r2,r3,19c6c <__fpcmp_parts_d+0xa8>
   19c04:	0005883a 	mov	r2,zero
   19c08:	f800283a 	ret
   19c0c:	22000117 	ldw	r8,4(r4)
   19c10:	28800117 	ldw	r2,4(r5)
   19c14:	40800326 	beq	r8,r2,19c24 <__fpcmp_parts_d+0x60>
   19c18:	403ff726 	beq	r8,zero,19bf8 <__fpcmp_parts_d+0x34>
   19c1c:	00bfffc4 	movi	r2,-1
   19c20:	f800283a 	ret
   19c24:	20c00217 	ldw	r3,8(r4)
   19c28:	28800217 	ldw	r2,8(r5)
   19c2c:	10fffa16 	blt	r2,r3,19c18 <__fpcmp_parts_d+0x54>
   19c30:	18800916 	blt	r3,r2,19c58 <__fpcmp_parts_d+0x94>
   19c34:	21c00417 	ldw	r7,16(r4)
   19c38:	28c00417 	ldw	r3,16(r5)
   19c3c:	21800317 	ldw	r6,12(r4)
   19c40:	28800317 	ldw	r2,12(r5)
   19c44:	19fff436 	bltu	r3,r7,19c18 <__fpcmp_parts_d+0x54>
   19c48:	38c00526 	beq	r7,r3,19c60 <__fpcmp_parts_d+0x9c>
   19c4c:	38c00236 	bltu	r7,r3,19c58 <__fpcmp_parts_d+0x94>
   19c50:	19ffec1e 	bne	r3,r7,19c04 <__fpcmp_parts_d+0x40>
   19c54:	30bfeb2e 	bgeu	r6,r2,19c04 <__fpcmp_parts_d+0x40>
   19c58:	403fe71e 	bne	r8,zero,19bf8 <__fpcmp_parts_d+0x34>
   19c5c:	003fef06 	br	19c1c <__fpcmp_parts_d+0x58>
   19c60:	11bffa2e 	bgeu	r2,r6,19c4c <__fpcmp_parts_d+0x88>
   19c64:	403fe426 	beq	r8,zero,19bf8 <__fpcmp_parts_d+0x34>
   19c68:	003fec06 	br	19c1c <__fpcmp_parts_d+0x58>
   19c6c:	28800117 	ldw	r2,4(r5)
   19c70:	103fe11e 	bne	r2,zero,19bf8 <__fpcmp_parts_d+0x34>
   19c74:	003fe906 	br	19c1c <__fpcmp_parts_d+0x58>
   19c78:	11bfdd1e 	bne	r2,r6,19bf0 <__fpcmp_parts_d+0x2c>
   19c7c:	28c00117 	ldw	r3,4(r5)
   19c80:	20800117 	ldw	r2,4(r4)
   19c84:	1885c83a 	sub	r2,r3,r2
   19c88:	f800283a 	ret

00019c8c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19c8c:	defff804 	addi	sp,sp,-32
   19c90:	dfc00715 	stw	ra,28(sp)
   19c94:	df000615 	stw	fp,24(sp)
   19c98:	df000604 	addi	fp,sp,24
   19c9c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19ca0:	e0bffc17 	ldw	r2,-16(fp)
   19ca4:	1004803a 	cmplt	r2,r2,zero
   19ca8:	1000081e 	bne	r2,zero,19ccc <close+0x40>
   19cac:	e0bffc17 	ldw	r2,-16(fp)
   19cb0:	10800324 	muli	r2,r2,12
   19cb4:	1007883a 	mov	r3,r2
   19cb8:	008000f4 	movhi	r2,3
   19cbc:	10a32604 	addi	r2,r2,-29544
   19cc0:	1887883a 	add	r3,r3,r2
   19cc4:	e0ffff15 	stw	r3,-4(fp)
   19cc8:	00000106 	br	19cd0 <close+0x44>
   19ccc:	e03fff15 	stw	zero,-4(fp)
   19cd0:	e0bfff17 	ldw	r2,-4(fp)
   19cd4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   19cd8:	e0bffb17 	ldw	r2,-20(fp)
   19cdc:	1005003a 	cmpeq	r2,r2,zero
   19ce0:	10001d1e 	bne	r2,zero,19d58 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   19ce4:	e0bffb17 	ldw	r2,-20(fp)
   19ce8:	10800017 	ldw	r2,0(r2)
   19cec:	10800417 	ldw	r2,16(r2)
   19cf0:	1005003a 	cmpeq	r2,r2,zero
   19cf4:	1000071e 	bne	r2,zero,19d14 <close+0x88>
   19cf8:	e0bffb17 	ldw	r2,-20(fp)
   19cfc:	10800017 	ldw	r2,0(r2)
   19d00:	10800417 	ldw	r2,16(r2)
   19d04:	e13ffb17 	ldw	r4,-20(fp)
   19d08:	103ee83a 	callr	r2
   19d0c:	e0bffe15 	stw	r2,-8(fp)
   19d10:	00000106 	br	19d18 <close+0x8c>
   19d14:	e03ffe15 	stw	zero,-8(fp)
   19d18:	e0bffe17 	ldw	r2,-8(fp)
   19d1c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   19d20:	e13ffc17 	ldw	r4,-16(fp)
   19d24:	001a4d00 	call	1a4d0 <alt_release_fd>
    if (rval < 0)
   19d28:	e0bffa17 	ldw	r2,-24(fp)
   19d2c:	1004403a 	cmpge	r2,r2,zero
   19d30:	1000071e 	bne	r2,zero,19d50 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   19d34:	0019d880 	call	19d88 <alt_get_errno>
   19d38:	e0fffa17 	ldw	r3,-24(fp)
   19d3c:	00c7c83a 	sub	r3,zero,r3
   19d40:	10c00015 	stw	r3,0(r2)
      return -1;
   19d44:	00bfffc4 	movi	r2,-1
   19d48:	e0bffd15 	stw	r2,-12(fp)
   19d4c:	00000806 	br	19d70 <close+0xe4>
    }
    return 0;
   19d50:	e03ffd15 	stw	zero,-12(fp)
   19d54:	00000606 	br	19d70 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19d58:	0019d880 	call	19d88 <alt_get_errno>
   19d5c:	1007883a 	mov	r3,r2
   19d60:	00801444 	movi	r2,81
   19d64:	18800015 	stw	r2,0(r3)
    return -1;
   19d68:	00bfffc4 	movi	r2,-1
   19d6c:	e0bffd15 	stw	r2,-12(fp)
   19d70:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   19d74:	e037883a 	mov	sp,fp
   19d78:	dfc00117 	ldw	ra,4(sp)
   19d7c:	df000017 	ldw	fp,0(sp)
   19d80:	dec00204 	addi	sp,sp,8
   19d84:	f800283a 	ret

00019d88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19d88:	defffd04 	addi	sp,sp,-12
   19d8c:	dfc00215 	stw	ra,8(sp)
   19d90:	df000115 	stw	fp,4(sp)
   19d94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   19d98:	008000f4 	movhi	r2,3
   19d9c:	10a7a904 	addi	r2,r2,-24924
   19da0:	10800017 	ldw	r2,0(r2)
   19da4:	1005003a 	cmpeq	r2,r2,zero
   19da8:	1000061e 	bne	r2,zero,19dc4 <alt_get_errno+0x3c>
   19dac:	008000f4 	movhi	r2,3
   19db0:	10a7a904 	addi	r2,r2,-24924
   19db4:	10800017 	ldw	r2,0(r2)
   19db8:	103ee83a 	callr	r2
   19dbc:	e0bfff15 	stw	r2,-4(fp)
   19dc0:	00000306 	br	19dd0 <alt_get_errno+0x48>
   19dc4:	008000f4 	movhi	r2,3
   19dc8:	10a7b904 	addi	r2,r2,-24860
   19dcc:	e0bfff15 	stw	r2,-4(fp)
   19dd0:	e0bfff17 	ldw	r2,-4(fp)
}
   19dd4:	e037883a 	mov	sp,fp
   19dd8:	dfc00117 	ldw	ra,4(sp)
   19ddc:	df000017 	ldw	fp,0(sp)
   19de0:	dec00204 	addi	sp,sp,8
   19de4:	f800283a 	ret

00019de8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19de8:	defffc04 	addi	sp,sp,-16
   19dec:	df000315 	stw	fp,12(sp)
   19df0:	df000304 	addi	fp,sp,12
   19df4:	e13ffd15 	stw	r4,-12(fp)
   19df8:	e17ffe15 	stw	r5,-8(fp)
   19dfc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   19e00:	e0bfff17 	ldw	r2,-4(fp)
}
   19e04:	e037883a 	mov	sp,fp
   19e08:	df000017 	ldw	fp,0(sp)
   19e0c:	dec00104 	addi	sp,sp,4
   19e10:	f800283a 	ret

00019e14 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19e14:	defff904 	addi	sp,sp,-28
   19e18:	dfc00615 	stw	ra,24(sp)
   19e1c:	df000515 	stw	fp,20(sp)
   19e20:	df000504 	addi	fp,sp,20
   19e24:	e13ffc15 	stw	r4,-16(fp)
   19e28:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19e2c:	e0bffc17 	ldw	r2,-16(fp)
   19e30:	1004803a 	cmplt	r2,r2,zero
   19e34:	1000081e 	bne	r2,zero,19e58 <fstat+0x44>
   19e38:	e0bffc17 	ldw	r2,-16(fp)
   19e3c:	10800324 	muli	r2,r2,12
   19e40:	1007883a 	mov	r3,r2
   19e44:	008000f4 	movhi	r2,3
   19e48:	10a32604 	addi	r2,r2,-29544
   19e4c:	1887883a 	add	r3,r3,r2
   19e50:	e0ffff15 	stw	r3,-4(fp)
   19e54:	00000106 	br	19e5c <fstat+0x48>
   19e58:	e03fff15 	stw	zero,-4(fp)
   19e5c:	e0bfff17 	ldw	r2,-4(fp)
   19e60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   19e64:	e0bffb17 	ldw	r2,-20(fp)
   19e68:	1005003a 	cmpeq	r2,r2,zero
   19e6c:	1000121e 	bne	r2,zero,19eb8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   19e70:	e0bffb17 	ldw	r2,-20(fp)
   19e74:	10800017 	ldw	r2,0(r2)
   19e78:	10800817 	ldw	r2,32(r2)
   19e7c:	1005003a 	cmpeq	r2,r2,zero
   19e80:	1000081e 	bne	r2,zero,19ea4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   19e84:	e0bffb17 	ldw	r2,-20(fp)
   19e88:	10800017 	ldw	r2,0(r2)
   19e8c:	10800817 	ldw	r2,32(r2)
   19e90:	e13ffb17 	ldw	r4,-20(fp)
   19e94:	e17ffd17 	ldw	r5,-12(fp)
   19e98:	103ee83a 	callr	r2
   19e9c:	e0bffe15 	stw	r2,-8(fp)
   19ea0:	00000b06 	br	19ed0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   19ea4:	e0fffd17 	ldw	r3,-12(fp)
   19ea8:	00880004 	movi	r2,8192
   19eac:	18800115 	stw	r2,4(r3)
      return 0;
   19eb0:	e03ffe15 	stw	zero,-8(fp)
   19eb4:	00000606 	br	19ed0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19eb8:	0019ee80 	call	19ee8 <alt_get_errno>
   19ebc:	1007883a 	mov	r3,r2
   19ec0:	00801444 	movi	r2,81
   19ec4:	18800015 	stw	r2,0(r3)
    return -1;
   19ec8:	00bfffc4 	movi	r2,-1
   19ecc:	e0bffe15 	stw	r2,-8(fp)
   19ed0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   19ed4:	e037883a 	mov	sp,fp
   19ed8:	dfc00117 	ldw	ra,4(sp)
   19edc:	df000017 	ldw	fp,0(sp)
   19ee0:	dec00204 	addi	sp,sp,8
   19ee4:	f800283a 	ret

00019ee8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19ee8:	defffd04 	addi	sp,sp,-12
   19eec:	dfc00215 	stw	ra,8(sp)
   19ef0:	df000115 	stw	fp,4(sp)
   19ef4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   19ef8:	008000f4 	movhi	r2,3
   19efc:	10a7a904 	addi	r2,r2,-24924
   19f00:	10800017 	ldw	r2,0(r2)
   19f04:	1005003a 	cmpeq	r2,r2,zero
   19f08:	1000061e 	bne	r2,zero,19f24 <alt_get_errno+0x3c>
   19f0c:	008000f4 	movhi	r2,3
   19f10:	10a7a904 	addi	r2,r2,-24924
   19f14:	10800017 	ldw	r2,0(r2)
   19f18:	103ee83a 	callr	r2
   19f1c:	e0bfff15 	stw	r2,-4(fp)
   19f20:	00000306 	br	19f30 <alt_get_errno+0x48>
   19f24:	008000f4 	movhi	r2,3
   19f28:	10a7b904 	addi	r2,r2,-24860
   19f2c:	e0bfff15 	stw	r2,-4(fp)
   19f30:	e0bfff17 	ldw	r2,-4(fp)
}
   19f34:	e037883a 	mov	sp,fp
   19f38:	dfc00117 	ldw	ra,4(sp)
   19f3c:	df000017 	ldw	fp,0(sp)
   19f40:	dec00204 	addi	sp,sp,8
   19f44:	f800283a 	ret

00019f48 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   19f48:	deffeb04 	addi	sp,sp,-84
   19f4c:	dfc01415 	stw	ra,80(sp)
   19f50:	df001315 	stw	fp,76(sp)
   19f54:	df001304 	addi	fp,sp,76
   19f58:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19f5c:	e0bffd17 	ldw	r2,-12(fp)
   19f60:	1004803a 	cmplt	r2,r2,zero
   19f64:	1000081e 	bne	r2,zero,19f88 <isatty+0x40>
   19f68:	e0bffd17 	ldw	r2,-12(fp)
   19f6c:	10800324 	muli	r2,r2,12
   19f70:	1007883a 	mov	r3,r2
   19f74:	008000f4 	movhi	r2,3
   19f78:	10a32604 	addi	r2,r2,-29544
   19f7c:	1887883a 	add	r3,r3,r2
   19f80:	e0ffff15 	stw	r3,-4(fp)
   19f84:	00000106 	br	19f8c <isatty+0x44>
   19f88:	e03fff15 	stw	zero,-4(fp)
   19f8c:	e0bfff17 	ldw	r2,-4(fp)
   19f90:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   19f94:	e0bfed17 	ldw	r2,-76(fp)
   19f98:	1005003a 	cmpeq	r2,r2,zero
   19f9c:	10000f1e 	bne	r2,zero,19fdc <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   19fa0:	e0bfed17 	ldw	r2,-76(fp)
   19fa4:	10800017 	ldw	r2,0(r2)
   19fa8:	10800817 	ldw	r2,32(r2)
   19fac:	1004c03a 	cmpne	r2,r2,zero
   19fb0:	1000031e 	bne	r2,zero,19fc0 <isatty+0x78>
    {
      return 1;
   19fb4:	00800044 	movi	r2,1
   19fb8:	e0bffe15 	stw	r2,-8(fp)
   19fbc:	00000c06 	br	19ff0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   19fc0:	e17fee04 	addi	r5,fp,-72
   19fc4:	e13ffd17 	ldw	r4,-12(fp)
   19fc8:	0019e140 	call	19e14 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   19fcc:	e0bfef17 	ldw	r2,-68(fp)
   19fd0:	10880020 	cmpeqi	r2,r2,8192
   19fd4:	e0bffe15 	stw	r2,-8(fp)
   19fd8:	00000506 	br	19ff0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19fdc:	001a0080 	call	1a008 <alt_get_errno>
   19fe0:	1007883a 	mov	r3,r2
   19fe4:	00801444 	movi	r2,81
   19fe8:	18800015 	stw	r2,0(r3)
    return 0;
   19fec:	e03ffe15 	stw	zero,-8(fp)
   19ff0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   19ff4:	e037883a 	mov	sp,fp
   19ff8:	dfc00117 	ldw	ra,4(sp)
   19ffc:	df000017 	ldw	fp,0(sp)
   1a000:	dec00204 	addi	sp,sp,8
   1a004:	f800283a 	ret

0001a008 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a008:	defffd04 	addi	sp,sp,-12
   1a00c:	dfc00215 	stw	ra,8(sp)
   1a010:	df000115 	stw	fp,4(sp)
   1a014:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a018:	008000f4 	movhi	r2,3
   1a01c:	10a7a904 	addi	r2,r2,-24924
   1a020:	10800017 	ldw	r2,0(r2)
   1a024:	1005003a 	cmpeq	r2,r2,zero
   1a028:	1000061e 	bne	r2,zero,1a044 <alt_get_errno+0x3c>
   1a02c:	008000f4 	movhi	r2,3
   1a030:	10a7a904 	addi	r2,r2,-24924
   1a034:	10800017 	ldw	r2,0(r2)
   1a038:	103ee83a 	callr	r2
   1a03c:	e0bfff15 	stw	r2,-4(fp)
   1a040:	00000306 	br	1a050 <alt_get_errno+0x48>
   1a044:	008000f4 	movhi	r2,3
   1a048:	10a7b904 	addi	r2,r2,-24860
   1a04c:	e0bfff15 	stw	r2,-4(fp)
   1a050:	e0bfff17 	ldw	r2,-4(fp)
}
   1a054:	e037883a 	mov	sp,fp
   1a058:	dfc00117 	ldw	ra,4(sp)
   1a05c:	df000017 	ldw	fp,0(sp)
   1a060:	dec00204 	addi	sp,sp,8
   1a064:	f800283a 	ret

0001a068 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1a068:	defffe04 	addi	sp,sp,-8
   1a06c:	dfc00115 	stw	ra,4(sp)
   1a070:	df000015 	stw	fp,0(sp)
   1a074:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1a078:	010000b4 	movhi	r4,2
   1a07c:	21337904 	addi	r4,r4,-12828
   1a080:	014000f4 	movhi	r5,3
   1a084:	29611704 	addi	r5,r5,-31652
   1a088:	018000f4 	movhi	r6,3
   1a08c:	31a7ae04 	addi	r6,r6,-24904
   1a090:	001a0e80 	call	1a0e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1a094:	01000074 	movhi	r4,1
   1a098:	21000804 	addi	r4,r4,32
   1a09c:	01400074 	movhi	r5,1
   1a0a0:	29400804 	addi	r5,r5,32
   1a0a4:	01800074 	movhi	r6,1
   1a0a8:	31806d04 	addi	r6,r6,436
   1a0ac:	001a0e80 	call	1a0e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1a0b0:	010000f4 	movhi	r4,3
   1a0b4:	21200004 	addi	r4,r4,-32768
   1a0b8:	014000f4 	movhi	r5,3
   1a0bc:	29600004 	addi	r5,r5,-32768
   1a0c0:	018000f4 	movhi	r6,3
   1a0c4:	31a11704 	addi	r6,r6,-31652
   1a0c8:	001a0e80 	call	1a0e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1a0cc:	001bc240 	call	1bc24 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1a0d0:	001be1c0 	call	1be1c <alt_icache_flush_all>
}
   1a0d4:	e037883a 	mov	sp,fp
   1a0d8:	dfc00117 	ldw	ra,4(sp)
   1a0dc:	df000017 	ldw	fp,0(sp)
   1a0e0:	dec00204 	addi	sp,sp,8
   1a0e4:	f800283a 	ret

0001a0e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1a0e8:	defffc04 	addi	sp,sp,-16
   1a0ec:	df000315 	stw	fp,12(sp)
   1a0f0:	df000304 	addi	fp,sp,12
   1a0f4:	e13ffd15 	stw	r4,-12(fp)
   1a0f8:	e17ffe15 	stw	r5,-8(fp)
   1a0fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1a100:	e0fffe17 	ldw	r3,-8(fp)
   1a104:	e0bffd17 	ldw	r2,-12(fp)
   1a108:	18800e26 	beq	r3,r2,1a144 <alt_load_section+0x5c>
  {
    while( to != end )
   1a10c:	00000a06 	br	1a138 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1a110:	e0bffd17 	ldw	r2,-12(fp)
   1a114:	10c00017 	ldw	r3,0(r2)
   1a118:	e0bffe17 	ldw	r2,-8(fp)
   1a11c:	10c00015 	stw	r3,0(r2)
   1a120:	e0bffe17 	ldw	r2,-8(fp)
   1a124:	10800104 	addi	r2,r2,4
   1a128:	e0bffe15 	stw	r2,-8(fp)
   1a12c:	e0bffd17 	ldw	r2,-12(fp)
   1a130:	10800104 	addi	r2,r2,4
   1a134:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1a138:	e0fffe17 	ldw	r3,-8(fp)
   1a13c:	e0bfff17 	ldw	r2,-4(fp)
   1a140:	18bff31e 	bne	r3,r2,1a110 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1a144:	e037883a 	mov	sp,fp
   1a148:	df000017 	ldw	fp,0(sp)
   1a14c:	dec00104 	addi	sp,sp,4
   1a150:	f800283a 	ret

0001a154 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a154:	defff804 	addi	sp,sp,-32
   1a158:	dfc00715 	stw	ra,28(sp)
   1a15c:	df000615 	stw	fp,24(sp)
   1a160:	df000604 	addi	fp,sp,24
   1a164:	e13ffc15 	stw	r4,-16(fp)
   1a168:	e17ffd15 	stw	r5,-12(fp)
   1a16c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a170:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a174:	e0bffc17 	ldw	r2,-16(fp)
   1a178:	1004803a 	cmplt	r2,r2,zero
   1a17c:	1000081e 	bne	r2,zero,1a1a0 <lseek+0x4c>
   1a180:	e0bffc17 	ldw	r2,-16(fp)
   1a184:	10800324 	muli	r2,r2,12
   1a188:	1007883a 	mov	r3,r2
   1a18c:	008000f4 	movhi	r2,3
   1a190:	10a32604 	addi	r2,r2,-29544
   1a194:	1887883a 	add	r3,r3,r2
   1a198:	e0ffff15 	stw	r3,-4(fp)
   1a19c:	00000106 	br	1a1a4 <lseek+0x50>
   1a1a0:	e03fff15 	stw	zero,-4(fp)
   1a1a4:	e0bfff17 	ldw	r2,-4(fp)
   1a1a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   1a1ac:	e0bffb17 	ldw	r2,-20(fp)
   1a1b0:	1005003a 	cmpeq	r2,r2,zero
   1a1b4:	1000111e 	bne	r2,zero,1a1fc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a1b8:	e0bffb17 	ldw	r2,-20(fp)
   1a1bc:	10800017 	ldw	r2,0(r2)
   1a1c0:	10800717 	ldw	r2,28(r2)
   1a1c4:	1005003a 	cmpeq	r2,r2,zero
   1a1c8:	1000091e 	bne	r2,zero,1a1f0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a1cc:	e0bffb17 	ldw	r2,-20(fp)
   1a1d0:	10800017 	ldw	r2,0(r2)
   1a1d4:	10800717 	ldw	r2,28(r2)
   1a1d8:	e13ffb17 	ldw	r4,-20(fp)
   1a1dc:	e17ffd17 	ldw	r5,-12(fp)
   1a1e0:	e1bffe17 	ldw	r6,-8(fp)
   1a1e4:	103ee83a 	callr	r2
   1a1e8:	e0bffa15 	stw	r2,-24(fp)
   1a1ec:	00000506 	br	1a204 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a1f0:	00bfde84 	movi	r2,-134
   1a1f4:	e0bffa15 	stw	r2,-24(fp)
   1a1f8:	00000206 	br	1a204 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a1fc:	00bfebc4 	movi	r2,-81
   1a200:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   1a204:	e0bffa17 	ldw	r2,-24(fp)
   1a208:	1004403a 	cmpge	r2,r2,zero
   1a20c:	1000071e 	bne	r2,zero,1a22c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   1a210:	001a2440 	call	1a244 <alt_get_errno>
   1a214:	1007883a 	mov	r3,r2
   1a218:	e0bffa17 	ldw	r2,-24(fp)
   1a21c:	0085c83a 	sub	r2,zero,r2
   1a220:	18800015 	stw	r2,0(r3)
    rc = -1;
   1a224:	00bfffc4 	movi	r2,-1
   1a228:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   1a22c:	e0bffa17 	ldw	r2,-24(fp)
}
   1a230:	e037883a 	mov	sp,fp
   1a234:	dfc00117 	ldw	ra,4(sp)
   1a238:	df000017 	ldw	fp,0(sp)
   1a23c:	dec00204 	addi	sp,sp,8
   1a240:	f800283a 	ret

0001a244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a244:	defffd04 	addi	sp,sp,-12
   1a248:	dfc00215 	stw	ra,8(sp)
   1a24c:	df000115 	stw	fp,4(sp)
   1a250:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a254:	008000f4 	movhi	r2,3
   1a258:	10a7a904 	addi	r2,r2,-24924
   1a25c:	10800017 	ldw	r2,0(r2)
   1a260:	1005003a 	cmpeq	r2,r2,zero
   1a264:	1000061e 	bne	r2,zero,1a280 <alt_get_errno+0x3c>
   1a268:	008000f4 	movhi	r2,3
   1a26c:	10a7a904 	addi	r2,r2,-24924
   1a270:	10800017 	ldw	r2,0(r2)
   1a274:	103ee83a 	callr	r2
   1a278:	e0bfff15 	stw	r2,-4(fp)
   1a27c:	00000306 	br	1a28c <alt_get_errno+0x48>
   1a280:	008000f4 	movhi	r2,3
   1a284:	10a7b904 	addi	r2,r2,-24860
   1a288:	e0bfff15 	stw	r2,-4(fp)
   1a28c:	e0bfff17 	ldw	r2,-4(fp)
}
   1a290:	e037883a 	mov	sp,fp
   1a294:	dfc00117 	ldw	ra,4(sp)
   1a298:	df000017 	ldw	fp,0(sp)
   1a29c:	dec00204 	addi	sp,sp,8
   1a2a0:	f800283a 	ret

0001a2a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1a2a4:	defffd04 	addi	sp,sp,-12
   1a2a8:	dfc00215 	stw	ra,8(sp)
   1a2ac:	df000115 	stw	fp,4(sp)
   1a2b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1a2b4:	0009883a 	mov	r4,zero
   1a2b8:	001a76c0 	call	1a76c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1a2bc:	001a7a00 	call	1a7a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1a2c0:	010000f4 	movhi	r4,3
   1a2c4:	21210d04 	addi	r4,r4,-31692
   1a2c8:	014000f4 	movhi	r5,3
   1a2cc:	29610d04 	addi	r5,r5,-31692
   1a2d0:	018000f4 	movhi	r6,3
   1a2d4:	31a10d04 	addi	r6,r6,-31692
   1a2d8:	001c1dc0 	call	1c1dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1a2dc:	001bd540 	call	1bd54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1a2e0:	010000b4 	movhi	r4,2
   1a2e4:	212f6e04 	addi	r4,r4,-16968
   1a2e8:	001c9d80 	call	1c9d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1a2ec:	d1201c17 	ldw	r4,-32656(gp)
   1a2f0:	d1601d17 	ldw	r5,-32652(gp)
   1a2f4:	d1a01e17 	ldw	r6,-32648(gp)
   1a2f8:	00103f40 	call	103f4 <main>
   1a2fc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1a300:	01000044 	movi	r4,1
   1a304:	0019c8c0 	call	19c8c <close>
  exit (result);
   1a308:	e13fff17 	ldw	r4,-4(fp)
   1a30c:	001c9ec0 	call	1c9ec <exit>

0001a310 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1a310:	defffe04 	addi	sp,sp,-8
   1a314:	df000115 	stw	fp,4(sp)
   1a318:	df000104 	addi	fp,sp,4
   1a31c:	e13fff15 	stw	r4,-4(fp)
}
   1a320:	e037883a 	mov	sp,fp
   1a324:	df000017 	ldw	fp,0(sp)
   1a328:	dec00104 	addi	sp,sp,4
   1a32c:	f800283a 	ret

0001a330 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1a330:	defffe04 	addi	sp,sp,-8
   1a334:	df000115 	stw	fp,4(sp)
   1a338:	df000104 	addi	fp,sp,4
   1a33c:	e13fff15 	stw	r4,-4(fp)
}
   1a340:	e037883a 	mov	sp,fp
   1a344:	df000017 	ldw	fp,0(sp)
   1a348:	dec00104 	addi	sp,sp,4
   1a34c:	f800283a 	ret

0001a350 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a350:	defff704 	addi	sp,sp,-36
   1a354:	dfc00815 	stw	ra,32(sp)
   1a358:	df000715 	stw	fp,28(sp)
   1a35c:	df000704 	addi	fp,sp,28
   1a360:	e13ffb15 	stw	r4,-20(fp)
   1a364:	e17ffc15 	stw	r5,-16(fp)
   1a368:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a36c:	e0bffb17 	ldw	r2,-20(fp)
   1a370:	1004803a 	cmplt	r2,r2,zero
   1a374:	1000081e 	bne	r2,zero,1a398 <read+0x48>
   1a378:	e0bffb17 	ldw	r2,-20(fp)
   1a37c:	10800324 	muli	r2,r2,12
   1a380:	1007883a 	mov	r3,r2
   1a384:	008000f4 	movhi	r2,3
   1a388:	10a32604 	addi	r2,r2,-29544
   1a38c:	1887883a 	add	r3,r3,r2
   1a390:	e0ffff15 	stw	r3,-4(fp)
   1a394:	00000106 	br	1a39c <read+0x4c>
   1a398:	e03fff15 	stw	zero,-4(fp)
   1a39c:	e0bfff17 	ldw	r2,-4(fp)
   1a3a0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1a3a4:	e0bffa17 	ldw	r2,-24(fp)
   1a3a8:	1005003a 	cmpeq	r2,r2,zero
   1a3ac:	1000241e 	bne	r2,zero,1a440 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a3b0:	e0bffa17 	ldw	r2,-24(fp)
   1a3b4:	10800217 	ldw	r2,8(r2)
   1a3b8:	108000cc 	andi	r2,r2,3
   1a3bc:	10800060 	cmpeqi	r2,r2,1
   1a3c0:	10001a1e 	bne	r2,zero,1a42c <read+0xdc>
   1a3c4:	e0bffa17 	ldw	r2,-24(fp)
   1a3c8:	10800017 	ldw	r2,0(r2)
   1a3cc:	10800517 	ldw	r2,20(r2)
   1a3d0:	1005003a 	cmpeq	r2,r2,zero
   1a3d4:	1000151e 	bne	r2,zero,1a42c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a3d8:	e0bffa17 	ldw	r2,-24(fp)
   1a3dc:	10800017 	ldw	r2,0(r2)
   1a3e0:	10800517 	ldw	r2,20(r2)
   1a3e4:	e17ffc17 	ldw	r5,-16(fp)
   1a3e8:	e1bffd17 	ldw	r6,-12(fp)
   1a3ec:	e13ffa17 	ldw	r4,-24(fp)
   1a3f0:	103ee83a 	callr	r2
   1a3f4:	e0bff915 	stw	r2,-28(fp)
   1a3f8:	e0bff917 	ldw	r2,-28(fp)
   1a3fc:	1004403a 	cmpge	r2,r2,zero
   1a400:	1000071e 	bne	r2,zero,1a420 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   1a404:	001a4700 	call	1a470 <alt_get_errno>
   1a408:	e0fff917 	ldw	r3,-28(fp)
   1a40c:	00c7c83a 	sub	r3,zero,r3
   1a410:	10c00015 	stw	r3,0(r2)
          return -1;
   1a414:	00bfffc4 	movi	r2,-1
   1a418:	e0bffe15 	stw	r2,-8(fp)
   1a41c:	00000e06 	br	1a458 <read+0x108>
        }
        return rval;
   1a420:	e0bff917 	ldw	r2,-28(fp)
   1a424:	e0bffe15 	stw	r2,-8(fp)
   1a428:	00000b06 	br	1a458 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a42c:	001a4700 	call	1a470 <alt_get_errno>
   1a430:	1007883a 	mov	r3,r2
   1a434:	00800344 	movi	r2,13
   1a438:	18800015 	stw	r2,0(r3)
   1a43c:	00000406 	br	1a450 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a440:	001a4700 	call	1a470 <alt_get_errno>
   1a444:	1007883a 	mov	r3,r2
   1a448:	00801444 	movi	r2,81
   1a44c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a450:	00bfffc4 	movi	r2,-1
   1a454:	e0bffe15 	stw	r2,-8(fp)
   1a458:	e0bffe17 	ldw	r2,-8(fp)
}
   1a45c:	e037883a 	mov	sp,fp
   1a460:	dfc00117 	ldw	ra,4(sp)
   1a464:	df000017 	ldw	fp,0(sp)
   1a468:	dec00204 	addi	sp,sp,8
   1a46c:	f800283a 	ret

0001a470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a470:	defffd04 	addi	sp,sp,-12
   1a474:	dfc00215 	stw	ra,8(sp)
   1a478:	df000115 	stw	fp,4(sp)
   1a47c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a480:	008000f4 	movhi	r2,3
   1a484:	10a7a904 	addi	r2,r2,-24924
   1a488:	10800017 	ldw	r2,0(r2)
   1a48c:	1005003a 	cmpeq	r2,r2,zero
   1a490:	1000061e 	bne	r2,zero,1a4ac <alt_get_errno+0x3c>
   1a494:	008000f4 	movhi	r2,3
   1a498:	10a7a904 	addi	r2,r2,-24924
   1a49c:	10800017 	ldw	r2,0(r2)
   1a4a0:	103ee83a 	callr	r2
   1a4a4:	e0bfff15 	stw	r2,-4(fp)
   1a4a8:	00000306 	br	1a4b8 <alt_get_errno+0x48>
   1a4ac:	008000f4 	movhi	r2,3
   1a4b0:	10a7b904 	addi	r2,r2,-24860
   1a4b4:	e0bfff15 	stw	r2,-4(fp)
   1a4b8:	e0bfff17 	ldw	r2,-4(fp)
}
   1a4bc:	e037883a 	mov	sp,fp
   1a4c0:	dfc00117 	ldw	ra,4(sp)
   1a4c4:	df000017 	ldw	fp,0(sp)
   1a4c8:	dec00204 	addi	sp,sp,8
   1a4cc:	f800283a 	ret

0001a4d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a4d0:	defffe04 	addi	sp,sp,-8
   1a4d4:	df000115 	stw	fp,4(sp)
   1a4d8:	df000104 	addi	fp,sp,4
   1a4dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a4e0:	e0bfff17 	ldw	r2,-4(fp)
   1a4e4:	108000d0 	cmplti	r2,r2,3
   1a4e8:	10000d1e 	bne	r2,zero,1a520 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a4ec:	e0bfff17 	ldw	r2,-4(fp)
   1a4f0:	00c000f4 	movhi	r3,3
   1a4f4:	18e32604 	addi	r3,r3,-29544
   1a4f8:	10800324 	muli	r2,r2,12
   1a4fc:	10c5883a 	add	r2,r2,r3
   1a500:	10800204 	addi	r2,r2,8
   1a504:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1a508:	e0bfff17 	ldw	r2,-4(fp)
   1a50c:	00c000f4 	movhi	r3,3
   1a510:	18e32604 	addi	r3,r3,-29544
   1a514:	10800324 	muli	r2,r2,12
   1a518:	10c5883a 	add	r2,r2,r3
   1a51c:	10000015 	stw	zero,0(r2)
  }
}
   1a520:	e037883a 	mov	sp,fp
   1a524:	df000017 	ldw	fp,0(sp)
   1a528:	dec00104 	addi	sp,sp,4
   1a52c:	f800283a 	ret

0001a530 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a530:	defff804 	addi	sp,sp,-32
   1a534:	df000715 	stw	fp,28(sp)
   1a538:	df000704 	addi	fp,sp,28
   1a53c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a540:	0005303a 	rdctl	r2,status
   1a544:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a548:	e0fffb17 	ldw	r3,-20(fp)
   1a54c:	00bfff84 	movi	r2,-2
   1a550:	1884703a 	and	r2,r3,r2
   1a554:	1001703a 	wrctl	status,r2
  
  return context;
   1a558:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a55c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a560:	d0a00c17 	ldw	r2,-32720(gp)
   1a564:	10c000c4 	addi	r3,r2,3
   1a568:	00bfff04 	movi	r2,-4
   1a56c:	1884703a 	and	r2,r3,r2
   1a570:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a574:	d0e00c17 	ldw	r3,-32720(gp)
   1a578:	e0bffe17 	ldw	r2,-8(fp)
   1a57c:	1887883a 	add	r3,r3,r2
   1a580:	008000f4 	movhi	r2,3
   1a584:	10800004 	addi	r2,r2,0
   1a588:	10c0072e 	bgeu	r2,r3,1a5a8 <sbrk+0x78>
   1a58c:	e0bffd17 	ldw	r2,-12(fp)
   1a590:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a594:	e0bffa17 	ldw	r2,-24(fp)
   1a598:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a59c:	00bfffc4 	movi	r2,-1
   1a5a0:	e0bfff15 	stw	r2,-4(fp)
   1a5a4:	00000c06 	br	1a5d8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   1a5a8:	d0a00c17 	ldw	r2,-32720(gp)
   1a5ac:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   1a5b0:	d0e00c17 	ldw	r3,-32720(gp)
   1a5b4:	e0bffe17 	ldw	r2,-8(fp)
   1a5b8:	1885883a 	add	r2,r3,r2
   1a5bc:	d0a00c15 	stw	r2,-32720(gp)
   1a5c0:	e0bffd17 	ldw	r2,-12(fp)
   1a5c4:	e0bff915 	stw	r2,-28(fp)
   1a5c8:	e0bff917 	ldw	r2,-28(fp)
   1a5cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a5d0:	e0bffc17 	ldw	r2,-16(fp)
   1a5d4:	e0bfff15 	stw	r2,-4(fp)
   1a5d8:	e0bfff17 	ldw	r2,-4(fp)
} 
   1a5dc:	e037883a 	mov	sp,fp
   1a5e0:	df000017 	ldw	fp,0(sp)
   1a5e4:	dec00104 	addi	sp,sp,4
   1a5e8:	f800283a 	ret

0001a5ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1a5ec:	defff704 	addi	sp,sp,-36
   1a5f0:	dfc00815 	stw	ra,32(sp)
   1a5f4:	df000715 	stw	fp,28(sp)
   1a5f8:	df000704 	addi	fp,sp,28
   1a5fc:	e13ffb15 	stw	r4,-20(fp)
   1a600:	e17ffc15 	stw	r5,-16(fp)
   1a604:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a608:	e0bffb17 	ldw	r2,-20(fp)
   1a60c:	1004803a 	cmplt	r2,r2,zero
   1a610:	1000081e 	bne	r2,zero,1a634 <write+0x48>
   1a614:	e0bffb17 	ldw	r2,-20(fp)
   1a618:	10800324 	muli	r2,r2,12
   1a61c:	1007883a 	mov	r3,r2
   1a620:	008000f4 	movhi	r2,3
   1a624:	10a32604 	addi	r2,r2,-29544
   1a628:	1887883a 	add	r3,r3,r2
   1a62c:	e0ffff15 	stw	r3,-4(fp)
   1a630:	00000106 	br	1a638 <write+0x4c>
   1a634:	e03fff15 	stw	zero,-4(fp)
   1a638:	e0bfff17 	ldw	r2,-4(fp)
   1a63c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1a640:	e0bffa17 	ldw	r2,-24(fp)
   1a644:	1005003a 	cmpeq	r2,r2,zero
   1a648:	1000241e 	bne	r2,zero,1a6dc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1a64c:	e0bffa17 	ldw	r2,-24(fp)
   1a650:	10800217 	ldw	r2,8(r2)
   1a654:	108000cc 	andi	r2,r2,3
   1a658:	1005003a 	cmpeq	r2,r2,zero
   1a65c:	10001a1e 	bne	r2,zero,1a6c8 <write+0xdc>
   1a660:	e0bffa17 	ldw	r2,-24(fp)
   1a664:	10800017 	ldw	r2,0(r2)
   1a668:	10800617 	ldw	r2,24(r2)
   1a66c:	1005003a 	cmpeq	r2,r2,zero
   1a670:	1000151e 	bne	r2,zero,1a6c8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a674:	e0bffa17 	ldw	r2,-24(fp)
   1a678:	10800017 	ldw	r2,0(r2)
   1a67c:	10800617 	ldw	r2,24(r2)
   1a680:	e17ffc17 	ldw	r5,-16(fp)
   1a684:	e1bffd17 	ldw	r6,-12(fp)
   1a688:	e13ffa17 	ldw	r4,-24(fp)
   1a68c:	103ee83a 	callr	r2
   1a690:	e0bff915 	stw	r2,-28(fp)
   1a694:	e0bff917 	ldw	r2,-28(fp)
   1a698:	1004403a 	cmpge	r2,r2,zero
   1a69c:	1000071e 	bne	r2,zero,1a6bc <write+0xd0>
      {
        ALT_ERRNO = -rval;
   1a6a0:	001a70c0 	call	1a70c <alt_get_errno>
   1a6a4:	e0fff917 	ldw	r3,-28(fp)
   1a6a8:	00c7c83a 	sub	r3,zero,r3
   1a6ac:	10c00015 	stw	r3,0(r2)
        return -1;
   1a6b0:	00bfffc4 	movi	r2,-1
   1a6b4:	e0bffe15 	stw	r2,-8(fp)
   1a6b8:	00000e06 	br	1a6f4 <write+0x108>
      }
      return rval;
   1a6bc:	e0bff917 	ldw	r2,-28(fp)
   1a6c0:	e0bffe15 	stw	r2,-8(fp)
   1a6c4:	00000b06 	br	1a6f4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a6c8:	001a70c0 	call	1a70c <alt_get_errno>
   1a6cc:	1007883a 	mov	r3,r2
   1a6d0:	00800344 	movi	r2,13
   1a6d4:	18800015 	stw	r2,0(r3)
   1a6d8:	00000406 	br	1a6ec <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a6dc:	001a70c0 	call	1a70c <alt_get_errno>
   1a6e0:	1007883a 	mov	r3,r2
   1a6e4:	00801444 	movi	r2,81
   1a6e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a6ec:	00bfffc4 	movi	r2,-1
   1a6f0:	e0bffe15 	stw	r2,-8(fp)
   1a6f4:	e0bffe17 	ldw	r2,-8(fp)
}
   1a6f8:	e037883a 	mov	sp,fp
   1a6fc:	dfc00117 	ldw	ra,4(sp)
   1a700:	df000017 	ldw	fp,0(sp)
   1a704:	dec00204 	addi	sp,sp,8
   1a708:	f800283a 	ret

0001a70c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a70c:	defffd04 	addi	sp,sp,-12
   1a710:	dfc00215 	stw	ra,8(sp)
   1a714:	df000115 	stw	fp,4(sp)
   1a718:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1a71c:	008000f4 	movhi	r2,3
   1a720:	10a7a904 	addi	r2,r2,-24924
   1a724:	10800017 	ldw	r2,0(r2)
   1a728:	1005003a 	cmpeq	r2,r2,zero
   1a72c:	1000061e 	bne	r2,zero,1a748 <alt_get_errno+0x3c>
   1a730:	008000f4 	movhi	r2,3
   1a734:	10a7a904 	addi	r2,r2,-24924
   1a738:	10800017 	ldw	r2,0(r2)
   1a73c:	103ee83a 	callr	r2
   1a740:	e0bfff15 	stw	r2,-4(fp)
   1a744:	00000306 	br	1a754 <alt_get_errno+0x48>
   1a748:	008000f4 	movhi	r2,3
   1a74c:	10a7b904 	addi	r2,r2,-24860
   1a750:	e0bfff15 	stw	r2,-4(fp)
   1a754:	e0bfff17 	ldw	r2,-4(fp)
}
   1a758:	e037883a 	mov	sp,fp
   1a75c:	dfc00117 	ldw	ra,4(sp)
   1a760:	df000017 	ldw	fp,0(sp)
   1a764:	dec00204 	addi	sp,sp,8
   1a768:	f800283a 	ret

0001a76c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a76c:	defffd04 	addi	sp,sp,-12
   1a770:	dfc00215 	stw	ra,8(sp)
   1a774:	df000115 	stw	fp,4(sp)
   1a778:	df000104 	addi	fp,sp,4
   1a77c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   1a780:	001c6bc0 	call	1c6bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a784:	00800044 	movi	r2,1
   1a788:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a78c:	e037883a 	mov	sp,fp
   1a790:	dfc00117 	ldw	ra,4(sp)
   1a794:	df000017 	ldw	fp,0(sp)
   1a798:	dec00204 	addi	sp,sp,8
   1a79c:	f800283a 	ret

0001a7a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a7a0:	defffe04 	addi	sp,sp,-8
   1a7a4:	dfc00115 	stw	ra,4(sp)
   1a7a8:	df000015 	stw	fp,0(sp)
   1a7ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_SCALE_TIMER0, high_scale_timer0);
   1a7b0:	00c000f4 	movhi	r3,3
   1a7b4:	18e7bd04 	addi	r3,r3,-24844
   1a7b8:	008000f4 	movhi	r2,3
   1a7bc:	10841004 	addi	r2,r2,4160
   1a7c0:	18800015 	stw	r2,0(r3)
   1a7c4:	00c000f4 	movhi	r3,3
   1a7c8:	18e7be04 	addi	r3,r3,-24840
   1a7cc:	0080bef4 	movhi	r2,763
   1a7d0:	10bc2004 	addi	r2,r2,-3968
   1a7d4:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1a7d8:	010000f4 	movhi	r4,3
   1a7dc:	21042004 	addi	r4,r4,4224
   1a7e0:	000b883a 	mov	r5,zero
   1a7e4:	01800044 	movi	r6,1
   1a7e8:	01c0fa04 	movi	r7,1000
   1a7ec:	001b8d80 	call	1b8d8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1a7f0:	010000f4 	movhi	r4,3
   1a7f4:	21239004 	addi	r4,r4,-29120
   1a7f8:	000b883a 	mov	r5,zero
   1a7fc:	01800404 	movi	r6,16
   1a800:	001af040 	call	1af04 <altera_avalon_jtag_uart_init>
   1a804:	010000f4 	movhi	r4,3
   1a808:	21238604 	addi	r4,r4,-29160
   1a80c:	001a8240 	call	1a824 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   1a810:	e037883a 	mov	sp,fp
   1a814:	dfc00117 	ldw	ra,4(sp)
   1a818:	df000017 	ldw	fp,0(sp)
   1a81c:	dec00204 	addi	sp,sp,8
   1a820:	f800283a 	ret

0001a824 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a824:	defffd04 	addi	sp,sp,-12
   1a828:	dfc00215 	stw	ra,8(sp)
   1a82c:	df000115 	stw	fp,4(sp)
   1a830:	df000104 	addi	fp,sp,4
   1a834:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a838:	e13fff17 	ldw	r4,-4(fp)
   1a83c:	014000f4 	movhi	r5,3
   1a840:	2967a604 	addi	r5,r5,-24936
   1a844:	001bc400 	call	1bc40 <alt_dev_llist_insert>
}
   1a848:	e037883a 	mov	sp,fp
   1a84c:	dfc00117 	ldw	ra,4(sp)
   1a850:	df000017 	ldw	fp,0(sp)
   1a854:	dec00204 	addi	sp,sp,8
   1a858:	f800283a 	ret

0001a85c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   1a85c:	defff904 	addi	sp,sp,-28
   1a860:	dfc00615 	stw	ra,24(sp)
   1a864:	df000515 	stw	fp,20(sp)
   1a868:	df000504 	addi	fp,sp,20
   1a86c:	e13ffb15 	stw	r4,-20(fp)
   1a870:	e17ffc15 	stw	r5,-16(fp)
   1a874:	e1bffd15 	stw	r6,-12(fp)
   1a878:	e1fffe15 	stw	r7,-8(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   1a87c:	e13ffb17 	ldw	r4,-20(fp)
   1a880:	01400fc4 	movi	r5,63
   1a884:	001aa4c0 	call	1aa4c <altera_avalon_fifo_clear_event>
   1a888:	1005003a 	cmpeq	r2,r2,zero
   1a88c:	1000031e 	bne	r2,zero,1a89c <altera_avalon_fifo_init+0x40>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   1a890:	00bfffc4 	movi	r2,-1
   1a894:	e0bfff15 	stw	r2,-4(fp)
   1a898:	00001906 	br	1a900 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   1a89c:	e13ffb17 	ldw	r4,-20(fp)
   1a8a0:	e17ffc17 	ldw	r5,-16(fp)
   1a8a4:	001aab40 	call	1aab4 <altera_avalon_fifo_write_ienable>
   1a8a8:	1005003a 	cmpeq	r2,r2,zero
   1a8ac:	1000031e 	bne	r2,zero,1a8bc <altera_avalon_fifo_init+0x60>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   1a8b0:	00bfff84 	movi	r2,-2
   1a8b4:	e0bfff15 	stw	r2,-4(fp)
   1a8b8:	00001106 	br	1a900 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   1a8bc:	e13ffb17 	ldw	r4,-20(fp)
   1a8c0:	e17ffe17 	ldw	r5,-8(fp)
   1a8c4:	001ab140 	call	1ab14 <altera_avalon_fifo_write_almostfull>
   1a8c8:	1005003a 	cmpeq	r2,r2,zero
   1a8cc:	1000031e 	bne	r2,zero,1a8dc <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a8d0:	00bfff44 	movi	r2,-3
   1a8d4:	e0bfff15 	stw	r2,-4(fp)
   1a8d8:	00000906 	br	1a900 <altera_avalon_fifo_init+0xa4>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   1a8dc:	e13ffb17 	ldw	r4,-20(fp)
   1a8e0:	e17ffd17 	ldw	r5,-12(fp)
   1a8e4:	001ab740 	call	1ab74 <altera_avalon_fifo_write_almostempty>
   1a8e8:	1005003a 	cmpeq	r2,r2,zero
   1a8ec:	1000031e 	bne	r2,zero,1a8fc <altera_avalon_fifo_init+0xa0>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a8f0:	00bfff44 	movi	r2,-3
   1a8f4:	e0bfff15 	stw	r2,-4(fp)
   1a8f8:	00000106 	br	1a900 <altera_avalon_fifo_init+0xa4>
    }

    return ALTERA_AVALON_FIFO_OK;
   1a8fc:	e03fff15 	stw	zero,-4(fp)
   1a900:	e0bfff17 	ldw	r2,-4(fp)
}
   1a904:	e037883a 	mov	sp,fp
   1a908:	dfc00117 	ldw	ra,4(sp)
   1a90c:	df000017 	ldw	fp,0(sp)
   1a910:	dec00204 	addi	sp,sp,8
   1a914:	f800283a 	ret

0001a918 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   1a918:	defffd04 	addi	sp,sp,-12
   1a91c:	df000215 	stw	fp,8(sp)
   1a920:	df000204 	addi	fp,sp,8
   1a924:	e13ffe15 	stw	r4,-8(fp)
   1a928:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a92c:	e0bffe17 	ldw	r2,-8(fp)
   1a930:	10800104 	addi	r2,r2,4
   1a934:	10800037 	ldwio	r2,0(r2)
   1a938:	1007883a 	mov	r3,r2
   1a93c:	e0bfff17 	ldw	r2,-4(fp)
   1a940:	1884703a 	and	r2,r3,r2
}
   1a944:	e037883a 	mov	sp,fp
   1a948:	df000017 	ldw	fp,0(sp)
   1a94c:	dec00104 	addi	sp,sp,4
   1a950:	f800283a 	ret

0001a954 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   1a954:	defffd04 	addi	sp,sp,-12
   1a958:	df000215 	stw	fp,8(sp)
   1a95c:	df000204 	addi	fp,sp,8
   1a960:	e13ffe15 	stw	r4,-8(fp)
   1a964:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   1a968:	e0bffe17 	ldw	r2,-8(fp)
   1a96c:	10800304 	addi	r2,r2,12
   1a970:	10800037 	ldwio	r2,0(r2)
   1a974:	1007883a 	mov	r3,r2
   1a978:	e0bfff17 	ldw	r2,-4(fp)
   1a97c:	1884703a 	and	r2,r3,r2
}
   1a980:	e037883a 	mov	sp,fp
   1a984:	df000017 	ldw	fp,0(sp)
   1a988:	dec00104 	addi	sp,sp,4
   1a98c:	f800283a 	ret

0001a990 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   1a990:	defffe04 	addi	sp,sp,-8
   1a994:	df000115 	stw	fp,4(sp)
   1a998:	df000104 	addi	fp,sp,4
   1a99c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   1a9a0:	e0bfff17 	ldw	r2,-4(fp)
   1a9a4:	10800404 	addi	r2,r2,16
   1a9a8:	10800037 	ldwio	r2,0(r2)
}
   1a9ac:	e037883a 	mov	sp,fp
   1a9b0:	df000017 	ldw	fp,0(sp)
   1a9b4:	dec00104 	addi	sp,sp,4
   1a9b8:	f800283a 	ret

0001a9bc <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   1a9bc:	defffe04 	addi	sp,sp,-8
   1a9c0:	df000115 	stw	fp,4(sp)
   1a9c4:	df000104 	addi	fp,sp,4
   1a9c8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   1a9cc:	e0bfff17 	ldw	r2,-4(fp)
   1a9d0:	10800504 	addi	r2,r2,20
   1a9d4:	10800037 	ldwio	r2,0(r2)
}
   1a9d8:	e037883a 	mov	sp,fp
   1a9dc:	df000017 	ldw	fp,0(sp)
   1a9e0:	dec00104 	addi	sp,sp,4
   1a9e4:	f800283a 	ret

0001a9e8 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   1a9e8:	defffd04 	addi	sp,sp,-12
   1a9ec:	df000215 	stw	fp,8(sp)
   1a9f0:	df000204 	addi	fp,sp,8
   1a9f4:	e13ffe15 	stw	r4,-8(fp)
   1a9f8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   1a9fc:	e0bffe17 	ldw	r2,-8(fp)
   1aa00:	10800204 	addi	r2,r2,8
   1aa04:	10800037 	ldwio	r2,0(r2)
   1aa08:	1007883a 	mov	r3,r2
   1aa0c:	e0bfff17 	ldw	r2,-4(fp)
   1aa10:	1884703a 	and	r2,r3,r2
}
   1aa14:	e037883a 	mov	sp,fp
   1aa18:	df000017 	ldw	fp,0(sp)
   1aa1c:	dec00104 	addi	sp,sp,4
   1aa20:	f800283a 	ret

0001aa24 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   1aa24:	defffe04 	addi	sp,sp,-8
   1aa28:	df000115 	stw	fp,4(sp)
   1aa2c:	df000104 	addi	fp,sp,4
   1aa30:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   1aa34:	e0bfff17 	ldw	r2,-4(fp)
   1aa38:	10800037 	ldwio	r2,0(r2)
}
   1aa3c:	e037883a 	mov	sp,fp
   1aa40:	df000017 	ldw	fp,0(sp)
   1aa44:	dec00104 	addi	sp,sp,4
   1aa48:	f800283a 	ret

0001aa4c <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   1aa4c:	defffc04 	addi	sp,sp,-16
   1aa50:	df000315 	stw	fp,12(sp)
   1aa54:	df000304 	addi	fp,sp,12
   1aa58:	e13ffd15 	stw	r4,-12(fp)
   1aa5c:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   1aa60:	e0bffd17 	ldw	r2,-12(fp)
   1aa64:	10800204 	addi	r2,r2,8
   1aa68:	e0fffe17 	ldw	r3,-8(fp)
   1aa6c:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   1aa70:	e0bffd17 	ldw	r2,-12(fp)
   1aa74:	10800204 	addi	r2,r2,8
   1aa78:	10800037 	ldwio	r2,0(r2)
   1aa7c:	1007883a 	mov	r3,r2
   1aa80:	e0bffe17 	ldw	r2,-8(fp)
   1aa84:	1884703a 	and	r2,r3,r2
   1aa88:	1004c03a 	cmpne	r2,r2,zero
   1aa8c:	1000021e 	bne	r2,zero,1aa98 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
   1aa90:	e03fff15 	stw	zero,-4(fp)
   1aa94:	00000206 	br	1aaa0 <altera_avalon_fifo_clear_event+0x54>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   1aa98:	00bfffc4 	movi	r2,-1
   1aa9c:	e0bfff15 	stw	r2,-4(fp)
   1aaa0:	e0bfff17 	ldw	r2,-4(fp)
}
   1aaa4:	e037883a 	mov	sp,fp
   1aaa8:	df000017 	ldw	fp,0(sp)
   1aaac:	dec00104 	addi	sp,sp,4
   1aab0:	f800283a 	ret

0001aab4 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   1aab4:	defffc04 	addi	sp,sp,-16
   1aab8:	df000315 	stw	fp,12(sp)
   1aabc:	df000304 	addi	fp,sp,12
   1aac0:	e13ffd15 	stw	r4,-12(fp)
   1aac4:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   1aac8:	e0bffd17 	ldw	r2,-12(fp)
   1aacc:	10800304 	addi	r2,r2,12
   1aad0:	e0fffe17 	ldw	r3,-8(fp)
   1aad4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   1aad8:	e0bffd17 	ldw	r2,-12(fp)
   1aadc:	10800304 	addi	r2,r2,12
   1aae0:	10800037 	ldwio	r2,0(r2)
   1aae4:	1007883a 	mov	r3,r2
   1aae8:	e0bffe17 	ldw	r2,-8(fp)
   1aaec:	1880021e 	bne	r3,r2,1aaf8 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   1aaf0:	e03fff15 	stw	zero,-4(fp)
   1aaf4:	00000206 	br	1ab00 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   1aaf8:	00bfff84 	movi	r2,-2
   1aafc:	e0bfff15 	stw	r2,-4(fp)
   1ab00:	e0bfff17 	ldw	r2,-4(fp)
}
   1ab04:	e037883a 	mov	sp,fp
   1ab08:	df000017 	ldw	fp,0(sp)
   1ab0c:	dec00104 	addi	sp,sp,4
   1ab10:	f800283a 	ret

0001ab14 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   1ab14:	defffc04 	addi	sp,sp,-16
   1ab18:	df000315 	stw	fp,12(sp)
   1ab1c:	df000304 	addi	fp,sp,12
   1ab20:	e13ffd15 	stw	r4,-12(fp)
   1ab24:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   1ab28:	e0bffd17 	ldw	r2,-12(fp)
   1ab2c:	10800404 	addi	r2,r2,16
   1ab30:	e0fffe17 	ldw	r3,-8(fp)
   1ab34:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   1ab38:	e0bffd17 	ldw	r2,-12(fp)
   1ab3c:	10800404 	addi	r2,r2,16
   1ab40:	10800037 	ldwio	r2,0(r2)
   1ab44:	1007883a 	mov	r3,r2
   1ab48:	e0bffe17 	ldw	r2,-8(fp)
   1ab4c:	1880021e 	bne	r3,r2,1ab58 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   1ab50:	e03fff15 	stw	zero,-4(fp)
   1ab54:	00000206 	br	1ab60 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1ab58:	00bfff44 	movi	r2,-3
   1ab5c:	e0bfff15 	stw	r2,-4(fp)
   1ab60:	e0bfff17 	ldw	r2,-4(fp)
}
   1ab64:	e037883a 	mov	sp,fp
   1ab68:	df000017 	ldw	fp,0(sp)
   1ab6c:	dec00104 	addi	sp,sp,4
   1ab70:	f800283a 	ret

0001ab74 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   1ab74:	defffc04 	addi	sp,sp,-16
   1ab78:	df000315 	stw	fp,12(sp)
   1ab7c:	df000304 	addi	fp,sp,12
   1ab80:	e13ffd15 	stw	r4,-12(fp)
   1ab84:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   1ab88:	e0bffd17 	ldw	r2,-12(fp)
   1ab8c:	10800504 	addi	r2,r2,20
   1ab90:	e0fffe17 	ldw	r3,-8(fp)
   1ab94:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   1ab98:	e0bffd17 	ldw	r2,-12(fp)
   1ab9c:	10800504 	addi	r2,r2,20
   1aba0:	10800037 	ldwio	r2,0(r2)
   1aba4:	1007883a 	mov	r3,r2
   1aba8:	e0bffe17 	ldw	r2,-8(fp)
   1abac:	1880021e 	bne	r3,r2,1abb8 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   1abb0:	e03fff15 	stw	zero,-4(fp)
   1abb4:	00000206 	br	1abc0 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1abb8:	00bfff44 	movi	r2,-3
   1abbc:	e0bfff15 	stw	r2,-4(fp)
   1abc0:	e0bfff17 	ldw	r2,-4(fp)
}
   1abc4:	e037883a 	mov	sp,fp
   1abc8:	df000017 	ldw	fp,0(sp)
   1abcc:	dec00104 	addi	sp,sp,4
   1abd0:	f800283a 	ret

0001abd4 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   1abd4:	defffa04 	addi	sp,sp,-24
   1abd8:	dfc00515 	stw	ra,20(sp)
   1abdc:	df000415 	stw	fp,16(sp)
   1abe0:	df000404 	addi	fp,sp,16
   1abe4:	e13ffc15 	stw	r4,-16(fp)
   1abe8:	e17ffd15 	stw	r5,-12(fp)
   1abec:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   1abf0:	e13ffd17 	ldw	r4,-12(fp)
   1abf4:	01400044 	movi	r5,1
   1abf8:	001a9180 	call	1a918 <altera_avalon_fifo_read_status>
   1abfc:	1004c03a 	cmpne	r2,r2,zero
   1ac00:	1000051e 	bne	r2,zero,1ac18 <altera_avalon_fifo_write_fifo+0x44>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   1ac04:	e0bffc17 	ldw	r2,-16(fp)
   1ac08:	e0fffe17 	ldw	r3,-8(fp)
   1ac0c:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   1ac10:	e03fff15 	stw	zero,-4(fp)
   1ac14:	00000206 	br	1ac20 <altera_avalon_fifo_write_fifo+0x4c>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   1ac18:	00bfff04 	movi	r2,-4
   1ac1c:	e0bfff15 	stw	r2,-4(fp)
   1ac20:	e0bfff17 	ldw	r2,-4(fp)
    }
}
   1ac24:	e037883a 	mov	sp,fp
   1ac28:	dfc00117 	ldw	ra,4(sp)
   1ac2c:	df000017 	ldw	fp,0(sp)
   1ac30:	dec00204 	addi	sp,sp,8
   1ac34:	f800283a 	ret

0001ac38 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   1ac38:	defffa04 	addi	sp,sp,-24
   1ac3c:	dfc00515 	stw	ra,20(sp)
   1ac40:	df000415 	stw	fp,16(sp)
   1ac44:	df000404 	addi	fp,sp,16
   1ac48:	e13ffd15 	stw	r4,-12(fp)
   1ac4c:	e17ffe15 	stw	r5,-8(fp)
   1ac50:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   1ac54:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   1ac58:	e0bfff17 	ldw	r2,-4(fp)
   1ac5c:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1ac60:	e13ffe17 	ldw	r4,-8(fp)
   1ac64:	01400084 	movi	r5,2
   1ac68:	001a9180 	call	1a918 <altera_avalon_fifo_read_status>
   1ac6c:	1004c03a 	cmpne	r2,r2,zero
   1ac70:	1000071e 	bne	r2,zero,1ac90 <altera_avalon_read_fifo+0x58>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   1ac74:	e13ffe17 	ldw	r4,-8(fp)
   1ac78:	001aa240 	call	1aa24 <altera_avalon_fifo_read_level>
   1ac7c:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1ac80:	e0bffd17 	ldw	r2,-12(fp)
   1ac84:	10c00037 	ldwio	r3,0(r2)
   1ac88:	e0bfff17 	ldw	r2,-4(fp)
   1ac8c:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   1ac90:	e0bffc17 	ldw	r2,-16(fp)
}
   1ac94:	e037883a 	mov	sp,fp
   1ac98:	dfc00117 	ldw	ra,4(sp)
   1ac9c:	df000017 	ldw	fp,0(sp)
   1aca0:	dec00204 	addi	sp,sp,8
   1aca4:	f800283a 	ret

0001aca8 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   1aca8:	defffb04 	addi	sp,sp,-20
   1acac:	dfc00415 	stw	ra,16(sp)
   1acb0:	df000315 	stw	fp,12(sp)
   1acb4:	df000304 	addi	fp,sp,12
   1acb8:	e13ffd15 	stw	r4,-12(fp)
   1acbc:	e17ffe15 	stw	r5,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1acc0:	e13ffe17 	ldw	r4,-8(fp)
   1acc4:	01400084 	movi	r5,2
   1acc8:	001a9180 	call	1a918 <altera_avalon_fifo_read_status>
   1accc:	1004c03a 	cmpne	r2,r2,zero
   1acd0:	1000041e 	bne	r2,zero,1ace4 <altera_avalon_fifo_read_fifo+0x3c>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1acd4:	e0bffd17 	ldw	r2,-12(fp)
   1acd8:	10800037 	ldwio	r2,0(r2)
   1acdc:	e0bfff15 	stw	r2,-4(fp)
   1ace0:	00000106 	br	1ace8 <altera_avalon_fifo_read_fifo+0x40>
    }
    return 0;
   1ace4:	e03fff15 	stw	zero,-4(fp)
   1ace8:	e0bfff17 	ldw	r2,-4(fp)
}
   1acec:	e037883a 	mov	sp,fp
   1acf0:	dfc00117 	ldw	ra,4(sp)
   1acf4:	df000017 	ldw	fp,0(sp)
   1acf8:	dec00204 	addi	sp,sp,8
   1acfc:	f800283a 	ret

0001ad00 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   1ad00:	defffa04 	addi	sp,sp,-24
   1ad04:	dfc00515 	stw	ra,20(sp)
   1ad08:	df000415 	stw	fp,16(sp)
   1ad0c:	df000404 	addi	fp,sp,16
   1ad10:	e13ffc15 	stw	r4,-16(fp)
   1ad14:	e17ffd15 	stw	r5,-12(fp)
   1ad18:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   1ad1c:	e13ffd17 	ldw	r4,-12(fp)
   1ad20:	01400044 	movi	r5,1
   1ad24:	001a9180 	call	1a918 <altera_avalon_fifo_read_status>
   1ad28:	1004c03a 	cmpne	r2,r2,zero
   1ad2c:	1000061e 	bne	r2,zero,1ad48 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   1ad30:	e0bffc17 	ldw	r2,-16(fp)
   1ad34:	10800104 	addi	r2,r2,4
   1ad38:	e0fffe17 	ldw	r3,-8(fp)
   1ad3c:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   1ad40:	e03fff15 	stw	zero,-4(fp)
   1ad44:	00000206 	br	1ad50 <altera_avalon_fifo_write_other_info+0x50>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   1ad48:	00bfff04 	movi	r2,-4
   1ad4c:	e0bfff15 	stw	r2,-4(fp)
   1ad50:	e0bfff17 	ldw	r2,-4(fp)
    }
}
   1ad54:	e037883a 	mov	sp,fp
   1ad58:	dfc00117 	ldw	ra,4(sp)
   1ad5c:	df000017 	ldw	fp,0(sp)
   1ad60:	dec00204 	addi	sp,sp,8
   1ad64:	f800283a 	ret

0001ad68 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   1ad68:	defffe04 	addi	sp,sp,-8
   1ad6c:	df000115 	stw	fp,4(sp)
   1ad70:	df000104 	addi	fp,sp,4
   1ad74:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   1ad78:	e0bfff17 	ldw	r2,-4(fp)
   1ad7c:	10800104 	addi	r2,r2,4
   1ad80:	10800037 	ldwio	r2,0(r2)
}
   1ad84:	e037883a 	mov	sp,fp
   1ad88:	df000017 	ldw	fp,0(sp)
   1ad8c:	dec00104 	addi	sp,sp,4
   1ad90:	f800283a 	ret

0001ad94 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   1ad94:	defffe04 	addi	sp,sp,-8
   1ad98:	df000115 	stw	fp,4(sp)
   1ad9c:	df000104 	addi	fp,sp,4
   1ada0:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   1ada4:	e0bfff17 	ldw	r2,-4(fp)
   1ada8:	10800037 	ldwio	r2,0(r2)
}
   1adac:	e037883a 	mov	sp,fp
   1adb0:	df000017 	ldw	fp,0(sp)
   1adb4:	dec00104 	addi	sp,sp,4
   1adb8:	f800283a 	ret

0001adbc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1adbc:	defffa04 	addi	sp,sp,-24
   1adc0:	dfc00515 	stw	ra,20(sp)
   1adc4:	df000415 	stw	fp,16(sp)
   1adc8:	df000404 	addi	fp,sp,16
   1adcc:	e13ffd15 	stw	r4,-12(fp)
   1add0:	e17ffe15 	stw	r5,-8(fp)
   1add4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1add8:	e0bffd17 	ldw	r2,-12(fp)
   1addc:	10800017 	ldw	r2,0(r2)
   1ade0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1ade4:	e0bffc17 	ldw	r2,-16(fp)
   1ade8:	11000a04 	addi	r4,r2,40
   1adec:	e0bffd17 	ldw	r2,-12(fp)
   1adf0:	11c00217 	ldw	r7,8(r2)
   1adf4:	e17ffe17 	ldw	r5,-8(fp)
   1adf8:	e1bfff17 	ldw	r6,-4(fp)
   1adfc:	001b4040 	call	1b404 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1ae00:	e037883a 	mov	sp,fp
   1ae04:	dfc00117 	ldw	ra,4(sp)
   1ae08:	df000017 	ldw	fp,0(sp)
   1ae0c:	dec00204 	addi	sp,sp,8
   1ae10:	f800283a 	ret

0001ae14 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1ae14:	defffa04 	addi	sp,sp,-24
   1ae18:	dfc00515 	stw	ra,20(sp)
   1ae1c:	df000415 	stw	fp,16(sp)
   1ae20:	df000404 	addi	fp,sp,16
   1ae24:	e13ffd15 	stw	r4,-12(fp)
   1ae28:	e17ffe15 	stw	r5,-8(fp)
   1ae2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1ae30:	e0bffd17 	ldw	r2,-12(fp)
   1ae34:	10800017 	ldw	r2,0(r2)
   1ae38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1ae3c:	e0bffc17 	ldw	r2,-16(fp)
   1ae40:	11000a04 	addi	r4,r2,40
   1ae44:	e0bffd17 	ldw	r2,-12(fp)
   1ae48:	11c00217 	ldw	r7,8(r2)
   1ae4c:	e17ffe17 	ldw	r5,-8(fp)
   1ae50:	e1bfff17 	ldw	r6,-4(fp)
   1ae54:	001b6280 	call	1b628 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1ae58:	e037883a 	mov	sp,fp
   1ae5c:	dfc00117 	ldw	ra,4(sp)
   1ae60:	df000017 	ldw	fp,0(sp)
   1ae64:	dec00204 	addi	sp,sp,8
   1ae68:	f800283a 	ret

0001ae6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1ae6c:	defffc04 	addi	sp,sp,-16
   1ae70:	dfc00315 	stw	ra,12(sp)
   1ae74:	df000215 	stw	fp,8(sp)
   1ae78:	df000204 	addi	fp,sp,8
   1ae7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1ae80:	e0bfff17 	ldw	r2,-4(fp)
   1ae84:	10800017 	ldw	r2,0(r2)
   1ae88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1ae8c:	e0bffe17 	ldw	r2,-8(fp)
   1ae90:	11000a04 	addi	r4,r2,40
   1ae94:	e0bfff17 	ldw	r2,-4(fp)
   1ae98:	11400217 	ldw	r5,8(r2)
   1ae9c:	001b29c0 	call	1b29c <altera_avalon_jtag_uart_close>
}
   1aea0:	e037883a 	mov	sp,fp
   1aea4:	dfc00117 	ldw	ra,4(sp)
   1aea8:	df000017 	ldw	fp,0(sp)
   1aeac:	dec00204 	addi	sp,sp,8
   1aeb0:	f800283a 	ret

0001aeb4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1aeb4:	defffa04 	addi	sp,sp,-24
   1aeb8:	dfc00515 	stw	ra,20(sp)
   1aebc:	df000415 	stw	fp,16(sp)
   1aec0:	df000404 	addi	fp,sp,16
   1aec4:	e13ffd15 	stw	r4,-12(fp)
   1aec8:	e17ffe15 	stw	r5,-8(fp)
   1aecc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1aed0:	e0bffd17 	ldw	r2,-12(fp)
   1aed4:	10800017 	ldw	r2,0(r2)
   1aed8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1aedc:	e0bffc17 	ldw	r2,-16(fp)
   1aee0:	11000a04 	addi	r4,r2,40
   1aee4:	e17ffe17 	ldw	r5,-8(fp)
   1aee8:	e1bfff17 	ldw	r6,-4(fp)
   1aeec:	001b3100 	call	1b310 <altera_avalon_jtag_uart_ioctl>
}
   1aef0:	e037883a 	mov	sp,fp
   1aef4:	dfc00117 	ldw	ra,4(sp)
   1aef8:	df000017 	ldw	fp,0(sp)
   1aefc:	dec00204 	addi	sp,sp,8
   1af00:	f800283a 	ret

0001af04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1af04:	defffa04 	addi	sp,sp,-24
   1af08:	dfc00515 	stw	ra,20(sp)
   1af0c:	df000415 	stw	fp,16(sp)
   1af10:	df000404 	addi	fp,sp,16
   1af14:	e13ffd15 	stw	r4,-12(fp)
   1af18:	e17ffe15 	stw	r5,-8(fp)
   1af1c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1af20:	e0fffd17 	ldw	r3,-12(fp)
   1af24:	00800044 	movi	r2,1
   1af28:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1af2c:	e0bffd17 	ldw	r2,-12(fp)
   1af30:	10800017 	ldw	r2,0(r2)
   1af34:	11000104 	addi	r4,r2,4
   1af38:	e0bffd17 	ldw	r2,-12(fp)
   1af3c:	10800817 	ldw	r2,32(r2)
   1af40:	1007883a 	mov	r3,r2
   1af44:	2005883a 	mov	r2,r4
   1af48:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1af4c:	e13ffe17 	ldw	r4,-8(fp)
   1af50:	e17fff17 	ldw	r5,-4(fp)
   1af54:	d8000015 	stw	zero,0(sp)
   1af58:	018000b4 	movhi	r6,2
   1af5c:	31abf104 	addi	r6,r6,-20540
   1af60:	e1fffd17 	ldw	r7,-12(fp)
   1af64:	001be4c0 	call	1be4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1af68:	e0bffd17 	ldw	r2,-12(fp)
   1af6c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1af70:	e0bffd17 	ldw	r2,-12(fp)
   1af74:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1af78:	008000f4 	movhi	r2,3
   1af7c:	10a7c004 	addi	r2,r2,-24832
   1af80:	10800017 	ldw	r2,0(r2)
   1af84:	100b883a 	mov	r5,r2
   1af88:	018000b4 	movhi	r6,2
   1af8c:	31ac7b04 	addi	r6,r6,-19988
   1af90:	e1fffd17 	ldw	r7,-12(fp)
   1af94:	001bad00 	call	1bad0 <alt_alarm_start>
   1af98:	1004403a 	cmpge	r2,r2,zero
   1af9c:	1000041e 	bne	r2,zero,1afb0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1afa0:	e0fffd17 	ldw	r3,-12(fp)
   1afa4:	00a00034 	movhi	r2,32768
   1afa8:	10bfffc4 	addi	r2,r2,-1
   1afac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1afb0:	e037883a 	mov	sp,fp
   1afb4:	dfc00117 	ldw	ra,4(sp)
   1afb8:	df000017 	ldw	fp,0(sp)
   1afbc:	dec00204 	addi	sp,sp,8
   1afc0:	f800283a 	ret

0001afc4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1afc4:	defff804 	addi	sp,sp,-32
   1afc8:	df000715 	stw	fp,28(sp)
   1afcc:	df000704 	addi	fp,sp,28
   1afd0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1afd4:	e0bfff17 	ldw	r2,-4(fp)
   1afd8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   1afdc:	e0bffe17 	ldw	r2,-8(fp)
   1afe0:	10800017 	ldw	r2,0(r2)
   1afe4:	e0bffd15 	stw	r2,-12(fp)
   1afe8:	00000006 	br	1afec <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1afec:	e0bffd17 	ldw	r2,-12(fp)
   1aff0:	10800104 	addi	r2,r2,4
   1aff4:	10800037 	ldwio	r2,0(r2)
   1aff8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1affc:	e0bffc17 	ldw	r2,-16(fp)
   1b000:	1080c00c 	andi	r2,r2,768
   1b004:	1005003a 	cmpeq	r2,r2,zero
   1b008:	1000741e 	bne	r2,zero,1b1dc <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1b00c:	e0bffc17 	ldw	r2,-16(fp)
   1b010:	1080400c 	andi	r2,r2,256
   1b014:	1005003a 	cmpeq	r2,r2,zero
   1b018:	1000351e 	bne	r2,zero,1b0f0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1b01c:	00800074 	movhi	r2,1
   1b020:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b024:	e0bffe17 	ldw	r2,-8(fp)
   1b028:	10800a17 	ldw	r2,40(r2)
   1b02c:	10800044 	addi	r2,r2,1
   1b030:	1081ffcc 	andi	r2,r2,2047
   1b034:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   1b038:	e0bffe17 	ldw	r2,-8(fp)
   1b03c:	10c00b17 	ldw	r3,44(r2)
   1b040:	e0bffa17 	ldw	r2,-24(fp)
   1b044:	18801626 	beq	r3,r2,1b0a0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1b048:	e0bffd17 	ldw	r2,-12(fp)
   1b04c:	10800037 	ldwio	r2,0(r2)
   1b050:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1b054:	e0bffb17 	ldw	r2,-20(fp)
   1b058:	10a0000c 	andi	r2,r2,32768
   1b05c:	1005003a 	cmpeq	r2,r2,zero
   1b060:	10000f1e 	bne	r2,zero,1b0a0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1b064:	e0bffe17 	ldw	r2,-8(fp)
   1b068:	10c00a17 	ldw	r3,40(r2)
   1b06c:	e0bffb17 	ldw	r2,-20(fp)
   1b070:	1009883a 	mov	r4,r2
   1b074:	e0bffe17 	ldw	r2,-8(fp)
   1b078:	1885883a 	add	r2,r3,r2
   1b07c:	10800e04 	addi	r2,r2,56
   1b080:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b084:	e0bffe17 	ldw	r2,-8(fp)
   1b088:	10800a17 	ldw	r2,40(r2)
   1b08c:	10800044 	addi	r2,r2,1
   1b090:	10c1ffcc 	andi	r3,r2,2047
   1b094:	e0bffe17 	ldw	r2,-8(fp)
   1b098:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1b09c:	003fe106 	br	1b024 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1b0a0:	e0bffb17 	ldw	r2,-20(fp)
   1b0a4:	10bfffec 	andhi	r2,r2,65535
   1b0a8:	1005003a 	cmpeq	r2,r2,zero
   1b0ac:	1000101e 	bne	r2,zero,1b0f0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b0b0:	e0bffe17 	ldw	r2,-8(fp)
   1b0b4:	10c00817 	ldw	r3,32(r2)
   1b0b8:	00bfff84 	movi	r2,-2
   1b0bc:	1886703a 	and	r3,r3,r2
   1b0c0:	e0bffe17 	ldw	r2,-8(fp)
   1b0c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1b0c8:	e0bffd17 	ldw	r2,-12(fp)
   1b0cc:	11000104 	addi	r4,r2,4
   1b0d0:	e0bffe17 	ldw	r2,-8(fp)
   1b0d4:	10800817 	ldw	r2,32(r2)
   1b0d8:	1007883a 	mov	r3,r2
   1b0dc:	2005883a 	mov	r2,r4
   1b0e0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b0e4:	e0bffd17 	ldw	r2,-12(fp)
   1b0e8:	10800104 	addi	r2,r2,4
   1b0ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1b0f0:	e0bffc17 	ldw	r2,-16(fp)
   1b0f4:	1080800c 	andi	r2,r2,512
   1b0f8:	1005003a 	cmpeq	r2,r2,zero
   1b0fc:	103fbb1e 	bne	r2,zero,1afec <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1b100:	e0bffc17 	ldw	r2,-16(fp)
   1b104:	10bfffec 	andhi	r2,r2,65535
   1b108:	1004d43a 	srli	r2,r2,16
   1b10c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1b110:	00001506 	br	1b168 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1b114:	e13ffd17 	ldw	r4,-12(fp)
   1b118:	e0bffe17 	ldw	r2,-8(fp)
   1b11c:	10c00d17 	ldw	r3,52(r2)
   1b120:	e0bffe17 	ldw	r2,-8(fp)
   1b124:	1885883a 	add	r2,r3,r2
   1b128:	10820e04 	addi	r2,r2,2104
   1b12c:	10800003 	ldbu	r2,0(r2)
   1b130:	10c03fcc 	andi	r3,r2,255
   1b134:	18c0201c 	xori	r3,r3,128
   1b138:	18ffe004 	addi	r3,r3,-128
   1b13c:	2005883a 	mov	r2,r4
   1b140:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b144:	e0bffe17 	ldw	r2,-8(fp)
   1b148:	10800d17 	ldw	r2,52(r2)
   1b14c:	10800044 	addi	r2,r2,1
   1b150:	10c1ffcc 	andi	r3,r2,2047
   1b154:	e0bffe17 	ldw	r2,-8(fp)
   1b158:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1b15c:	e0bff917 	ldw	r2,-28(fp)
   1b160:	10bfffc4 	addi	r2,r2,-1
   1b164:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1b168:	e0bff917 	ldw	r2,-28(fp)
   1b16c:	1005003a 	cmpeq	r2,r2,zero
   1b170:	1000051e 	bne	r2,zero,1b188 <altera_avalon_jtag_uart_irq+0x1c4>
   1b174:	e0bffe17 	ldw	r2,-8(fp)
   1b178:	10c00d17 	ldw	r3,52(r2)
   1b17c:	e0bffe17 	ldw	r2,-8(fp)
   1b180:	10800c17 	ldw	r2,48(r2)
   1b184:	18bfe31e 	bne	r3,r2,1b114 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1b188:	e0bff917 	ldw	r2,-28(fp)
   1b18c:	1005003a 	cmpeq	r2,r2,zero
   1b190:	103f961e 	bne	r2,zero,1afec <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b194:	e0bffe17 	ldw	r2,-8(fp)
   1b198:	10c00817 	ldw	r3,32(r2)
   1b19c:	00bfff44 	movi	r2,-3
   1b1a0:	1886703a 	and	r3,r3,r2
   1b1a4:	e0bffe17 	ldw	r2,-8(fp)
   1b1a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b1ac:	e0bffe17 	ldw	r2,-8(fp)
   1b1b0:	10800017 	ldw	r2,0(r2)
   1b1b4:	11000104 	addi	r4,r2,4
   1b1b8:	e0bffe17 	ldw	r2,-8(fp)
   1b1bc:	10800817 	ldw	r2,32(r2)
   1b1c0:	1007883a 	mov	r3,r2
   1b1c4:	2005883a 	mov	r2,r4
   1b1c8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1b1cc:	e0bffd17 	ldw	r2,-12(fp)
   1b1d0:	10800104 	addi	r2,r2,4
   1b1d4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1b1d8:	003f8406 	br	1afec <altera_avalon_jtag_uart_irq+0x28>
}
   1b1dc:	e037883a 	mov	sp,fp
   1b1e0:	df000017 	ldw	fp,0(sp)
   1b1e4:	dec00104 	addi	sp,sp,4
   1b1e8:	f800283a 	ret

0001b1ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1b1ec:	defffc04 	addi	sp,sp,-16
   1b1f0:	df000315 	stw	fp,12(sp)
   1b1f4:	df000304 	addi	fp,sp,12
   1b1f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1b1fc:	e0bfff17 	ldw	r2,-4(fp)
   1b200:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1b204:	e0bffe17 	ldw	r2,-8(fp)
   1b208:	10800017 	ldw	r2,0(r2)
   1b20c:	10800104 	addi	r2,r2,4
   1b210:	10800037 	ldwio	r2,0(r2)
   1b214:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1b218:	e0bffd17 	ldw	r2,-12(fp)
   1b21c:	1081000c 	andi	r2,r2,1024
   1b220:	1005003a 	cmpeq	r2,r2,zero
   1b224:	10000c1e 	bne	r2,zero,1b258 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1b228:	e0bffe17 	ldw	r2,-8(fp)
   1b22c:	10800017 	ldw	r2,0(r2)
   1b230:	11000104 	addi	r4,r2,4
   1b234:	e0bffe17 	ldw	r2,-8(fp)
   1b238:	10800817 	ldw	r2,32(r2)
   1b23c:	10810014 	ori	r2,r2,1024
   1b240:	1007883a 	mov	r3,r2
   1b244:	2005883a 	mov	r2,r4
   1b248:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1b24c:	e0bffe17 	ldw	r2,-8(fp)
   1b250:	10000915 	stw	zero,36(r2)
   1b254:	00000a06 	br	1b280 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1b258:	e0bffe17 	ldw	r2,-8(fp)
   1b25c:	10c00917 	ldw	r3,36(r2)
   1b260:	00a00034 	movhi	r2,32768
   1b264:	10bfff04 	addi	r2,r2,-4
   1b268:	10c00536 	bltu	r2,r3,1b280 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   1b26c:	e0bffe17 	ldw	r2,-8(fp)
   1b270:	10800917 	ldw	r2,36(r2)
   1b274:	10c00044 	addi	r3,r2,1
   1b278:	e0bffe17 	ldw	r2,-8(fp)
   1b27c:	10c00915 	stw	r3,36(r2)
   1b280:	008000f4 	movhi	r2,3
   1b284:	10a7c004 	addi	r2,r2,-24832
   1b288:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1b28c:	e037883a 	mov	sp,fp
   1b290:	df000017 	ldw	fp,0(sp)
   1b294:	dec00104 	addi	sp,sp,4
   1b298:	f800283a 	ret

0001b29c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1b29c:	defffc04 	addi	sp,sp,-16
   1b2a0:	df000315 	stw	fp,12(sp)
   1b2a4:	df000304 	addi	fp,sp,12
   1b2a8:	e13ffd15 	stw	r4,-12(fp)
   1b2ac:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b2b0:	00000706 	br	1b2d0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   1b2b4:	e0bffe17 	ldw	r2,-8(fp)
   1b2b8:	1090000c 	andi	r2,r2,16384
   1b2bc:	1005003a 	cmpeq	r2,r2,zero
   1b2c0:	1000031e 	bne	r2,zero,1b2d0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   1b2c4:	00bffd44 	movi	r2,-11
   1b2c8:	e0bfff15 	stw	r2,-4(fp)
   1b2cc:	00000b06 	br	1b2fc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b2d0:	e0bffd17 	ldw	r2,-12(fp)
   1b2d4:	10c00d17 	ldw	r3,52(r2)
   1b2d8:	e0bffd17 	ldw	r2,-12(fp)
   1b2dc:	10800c17 	ldw	r2,48(r2)
   1b2e0:	18800526 	beq	r3,r2,1b2f8 <altera_avalon_jtag_uart_close+0x5c>
   1b2e4:	e0bffd17 	ldw	r2,-12(fp)
   1b2e8:	10c00917 	ldw	r3,36(r2)
   1b2ec:	e0bffd17 	ldw	r2,-12(fp)
   1b2f0:	10800117 	ldw	r2,4(r2)
   1b2f4:	18bfef36 	bltu	r3,r2,1b2b4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1b2f8:	e03fff15 	stw	zero,-4(fp)
   1b2fc:	e0bfff17 	ldw	r2,-4(fp)
}
   1b300:	e037883a 	mov	sp,fp
   1b304:	df000017 	ldw	fp,0(sp)
   1b308:	dec00104 	addi	sp,sp,4
   1b30c:	f800283a 	ret

0001b310 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1b310:	defff804 	addi	sp,sp,-32
   1b314:	df000715 	stw	fp,28(sp)
   1b318:	df000704 	addi	fp,sp,28
   1b31c:	e13ffb15 	stw	r4,-20(fp)
   1b320:	e17ffc15 	stw	r5,-16(fp)
   1b324:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   1b328:	00bff9c4 	movi	r2,-25
   1b32c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   1b330:	e0bffc17 	ldw	r2,-16(fp)
   1b334:	e0bfff15 	stw	r2,-4(fp)
   1b338:	e0ffff17 	ldw	r3,-4(fp)
   1b33c:	189a8060 	cmpeqi	r2,r3,27137
   1b340:	1000041e 	bne	r2,zero,1b354 <altera_avalon_jtag_uart_ioctl+0x44>
   1b344:	e0ffff17 	ldw	r3,-4(fp)
   1b348:	189a80a0 	cmpeqi	r2,r3,27138
   1b34c:	10001b1e 	bne	r2,zero,1b3bc <altera_avalon_jtag_uart_ioctl+0xac>
   1b350:	00002706 	br	1b3f0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1b354:	e0bffb17 	ldw	r2,-20(fp)
   1b358:	10c00117 	ldw	r3,4(r2)
   1b35c:	00a00034 	movhi	r2,32768
   1b360:	10bfffc4 	addi	r2,r2,-1
   1b364:	18802226 	beq	r3,r2,1b3f0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   1b368:	e0bffd17 	ldw	r2,-12(fp)
   1b36c:	10800017 	ldw	r2,0(r2)
   1b370:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1b374:	e0bff917 	ldw	r2,-28(fp)
   1b378:	10800090 	cmplti	r2,r2,2
   1b37c:	1000071e 	bne	r2,zero,1b39c <altera_avalon_jtag_uart_ioctl+0x8c>
   1b380:	e0fff917 	ldw	r3,-28(fp)
   1b384:	00a00034 	movhi	r2,32768
   1b388:	10bfffc4 	addi	r2,r2,-1
   1b38c:	18800326 	beq	r3,r2,1b39c <altera_avalon_jtag_uart_ioctl+0x8c>
   1b390:	e0bff917 	ldw	r2,-28(fp)
   1b394:	e0bffe15 	stw	r2,-8(fp)
   1b398:	00000306 	br	1b3a8 <altera_avalon_jtag_uart_ioctl+0x98>
   1b39c:	00e00034 	movhi	r3,32768
   1b3a0:	18ffff84 	addi	r3,r3,-2
   1b3a4:	e0fffe15 	stw	r3,-8(fp)
   1b3a8:	e0bffb17 	ldw	r2,-20(fp)
   1b3ac:	e0fffe17 	ldw	r3,-8(fp)
   1b3b0:	10c00115 	stw	r3,4(r2)
      rc = 0;
   1b3b4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   1b3b8:	00000d06 	br	1b3f0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1b3bc:	e0bffb17 	ldw	r2,-20(fp)
   1b3c0:	10c00117 	ldw	r3,4(r2)
   1b3c4:	00a00034 	movhi	r2,32768
   1b3c8:	10bfffc4 	addi	r2,r2,-1
   1b3cc:	18800826 	beq	r3,r2,1b3f0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1b3d0:	e13ffd17 	ldw	r4,-12(fp)
   1b3d4:	e0bffb17 	ldw	r2,-20(fp)
   1b3d8:	10c00917 	ldw	r3,36(r2)
   1b3dc:	e0bffb17 	ldw	r2,-20(fp)
   1b3e0:	10800117 	ldw	r2,4(r2)
   1b3e4:	1885803a 	cmpltu	r2,r3,r2
   1b3e8:	20800015 	stw	r2,0(r4)
      rc = 0;
   1b3ec:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   1b3f0:	e0bffa17 	ldw	r2,-24(fp)
}
   1b3f4:	e037883a 	mov	sp,fp
   1b3f8:	df000017 	ldw	fp,0(sp)
   1b3fc:	dec00104 	addi	sp,sp,4
   1b400:	f800283a 	ret

0001b404 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1b404:	defff204 	addi	sp,sp,-56
   1b408:	dfc00d15 	stw	ra,52(sp)
   1b40c:	df000c15 	stw	fp,48(sp)
   1b410:	df000c04 	addi	fp,sp,48
   1b414:	e13ffb15 	stw	r4,-20(fp)
   1b418:	e17ffc15 	stw	r5,-16(fp)
   1b41c:	e1bffd15 	stw	r6,-12(fp)
   1b420:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   1b424:	e0bffc17 	ldw	r2,-16(fp)
   1b428:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b42c:	00004806 	br	1b550 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1b430:	e0bffb17 	ldw	r2,-20(fp)
   1b434:	10800a17 	ldw	r2,40(r2)
   1b438:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1b43c:	e0bffb17 	ldw	r2,-20(fp)
   1b440:	10800b17 	ldw	r2,44(r2)
   1b444:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   1b448:	e0fff717 	ldw	r3,-36(fp)
   1b44c:	e0bff617 	ldw	r2,-40(fp)
   1b450:	18800536 	bltu	r3,r2,1b468 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1b454:	e0bff717 	ldw	r2,-36(fp)
   1b458:	e0fff617 	ldw	r3,-40(fp)
   1b45c:	10c5c83a 	sub	r2,r2,r3
   1b460:	e0bff815 	stw	r2,-32(fp)
   1b464:	00000406 	br	1b478 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1b468:	00820004 	movi	r2,2048
   1b46c:	e0fff617 	ldw	r3,-40(fp)
   1b470:	10c5c83a 	sub	r2,r2,r3
   1b474:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1b478:	e0bff817 	ldw	r2,-32(fp)
   1b47c:	1005003a 	cmpeq	r2,r2,zero
   1b480:	10001f1e 	bne	r2,zero,1b500 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   1b484:	e0fffd17 	ldw	r3,-12(fp)
   1b488:	e0bff817 	ldw	r2,-32(fp)
   1b48c:	1880022e 	bgeu	r3,r2,1b498 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   1b490:	e0bffd17 	ldw	r2,-12(fp)
   1b494:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1b498:	e0bffb17 	ldw	r2,-20(fp)
   1b49c:	10c00e04 	addi	r3,r2,56
   1b4a0:	e0bff617 	ldw	r2,-40(fp)
   1b4a4:	1887883a 	add	r3,r3,r2
   1b4a8:	e0bffa17 	ldw	r2,-24(fp)
   1b4ac:	1009883a 	mov	r4,r2
   1b4b0:	180b883a 	mov	r5,r3
   1b4b4:	e1bff817 	ldw	r6,-32(fp)
   1b4b8:	0015a2c0 	call	15a2c <memcpy>
      ptr   += n;
   1b4bc:	e0fff817 	ldw	r3,-32(fp)
   1b4c0:	e0bffa17 	ldw	r2,-24(fp)
   1b4c4:	10c5883a 	add	r2,r2,r3
   1b4c8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   1b4cc:	e0fffd17 	ldw	r3,-12(fp)
   1b4d0:	e0bff817 	ldw	r2,-32(fp)
   1b4d4:	1885c83a 	sub	r2,r3,r2
   1b4d8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b4dc:	e0fff617 	ldw	r3,-40(fp)
   1b4e0:	e0bff817 	ldw	r2,-32(fp)
   1b4e4:	1885883a 	add	r2,r3,r2
   1b4e8:	10c1ffcc 	andi	r3,r2,2047
   1b4ec:	e0bffb17 	ldw	r2,-20(fp)
   1b4f0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1b4f4:	e0bffd17 	ldw	r2,-12(fp)
   1b4f8:	10800048 	cmpgei	r2,r2,1
   1b4fc:	103fcc1e 	bne	r2,zero,1b430 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   1b500:	e0fffa17 	ldw	r3,-24(fp)
   1b504:	e0bffc17 	ldw	r2,-16(fp)
   1b508:	1880141e 	bne	r3,r2,1b55c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1b50c:	e0bffe17 	ldw	r2,-8(fp)
   1b510:	1090000c 	andi	r2,r2,16384
   1b514:	1004c03a 	cmpne	r2,r2,zero
   1b518:	1000101e 	bne	r2,zero,1b55c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1b51c:	e0bffb17 	ldw	r2,-20(fp)
   1b520:	10c00a17 	ldw	r3,40(r2)
   1b524:	e0bff717 	ldw	r2,-36(fp)
   1b528:	1880051e 	bne	r3,r2,1b540 <altera_avalon_jtag_uart_read+0x13c>
   1b52c:	e0bffb17 	ldw	r2,-20(fp)
   1b530:	10c00917 	ldw	r3,36(r2)
   1b534:	e0bffb17 	ldw	r2,-20(fp)
   1b538:	10800117 	ldw	r2,4(r2)
   1b53c:	18bff736 	bltu	r3,r2,1b51c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1b540:	e0bffb17 	ldw	r2,-20(fp)
   1b544:	10c00a17 	ldw	r3,40(r2)
   1b548:	e0bff717 	ldw	r2,-36(fp)
   1b54c:	18800326 	beq	r3,r2,1b55c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b550:	e0bffd17 	ldw	r2,-12(fp)
   1b554:	10800048 	cmpgei	r2,r2,1
   1b558:	103fb51e 	bne	r2,zero,1b430 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1b55c:	e0fffa17 	ldw	r3,-24(fp)
   1b560:	e0bffc17 	ldw	r2,-16(fp)
   1b564:	18801926 	beq	r3,r2,1b5cc <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b568:	0005303a 	rdctl	r2,status
   1b56c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b570:	e0fff517 	ldw	r3,-44(fp)
   1b574:	00bfff84 	movi	r2,-2
   1b578:	1884703a 	and	r2,r3,r2
   1b57c:	1001703a 	wrctl	status,r2
  
  return context;
   1b580:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1b584:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b588:	e0bffb17 	ldw	r2,-20(fp)
   1b58c:	10800817 	ldw	r2,32(r2)
   1b590:	10c00054 	ori	r3,r2,1
   1b594:	e0bffb17 	ldw	r2,-20(fp)
   1b598:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b59c:	e0bffb17 	ldw	r2,-20(fp)
   1b5a0:	10800017 	ldw	r2,0(r2)
   1b5a4:	11000104 	addi	r4,r2,4
   1b5a8:	e0bffb17 	ldw	r2,-20(fp)
   1b5ac:	10800817 	ldw	r2,32(r2)
   1b5b0:	1007883a 	mov	r3,r2
   1b5b4:	2005883a 	mov	r2,r4
   1b5b8:	10c00035 	stwio	r3,0(r2)
   1b5bc:	e0bff917 	ldw	r2,-28(fp)
   1b5c0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b5c4:	e0bff417 	ldw	r2,-48(fp)
   1b5c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1b5cc:	e0fffa17 	ldw	r3,-24(fp)
   1b5d0:	e0bffc17 	ldw	r2,-16(fp)
   1b5d4:	18800526 	beq	r3,r2,1b5ec <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   1b5d8:	e0fffa17 	ldw	r3,-24(fp)
   1b5dc:	e0bffc17 	ldw	r2,-16(fp)
   1b5e0:	1887c83a 	sub	r3,r3,r2
   1b5e4:	e0ffff15 	stw	r3,-4(fp)
   1b5e8:	00000906 	br	1b610 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   1b5ec:	e0bffe17 	ldw	r2,-8(fp)
   1b5f0:	1090000c 	andi	r2,r2,16384
   1b5f4:	1005003a 	cmpeq	r2,r2,zero
   1b5f8:	1000031e 	bne	r2,zero,1b608 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1b5fc:	00bffd44 	movi	r2,-11
   1b600:	e0bfff15 	stw	r2,-4(fp)
   1b604:	00000206 	br	1b610 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   1b608:	00bffec4 	movi	r2,-5
   1b60c:	e0bfff15 	stw	r2,-4(fp)
   1b610:	e0bfff17 	ldw	r2,-4(fp)
}
   1b614:	e037883a 	mov	sp,fp
   1b618:	dfc00117 	ldw	ra,4(sp)
   1b61c:	df000017 	ldw	fp,0(sp)
   1b620:	dec00204 	addi	sp,sp,8
   1b624:	f800283a 	ret

0001b628 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1b628:	defff204 	addi	sp,sp,-56
   1b62c:	dfc00d15 	stw	ra,52(sp)
   1b630:	df000c15 	stw	fp,48(sp)
   1b634:	df000c04 	addi	fp,sp,48
   1b638:	e13ffb15 	stw	r4,-20(fp)
   1b63c:	e17ffc15 	stw	r5,-16(fp)
   1b640:	e1bffd15 	stw	r6,-12(fp)
   1b644:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1b648:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1b64c:	e0bffc17 	ldw	r2,-16(fp)
   1b650:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b654:	00003a06 	br	1b740 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1b658:	e0bffb17 	ldw	r2,-20(fp)
   1b65c:	10800c17 	ldw	r2,48(r2)
   1b660:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   1b664:	e0bffb17 	ldw	r2,-20(fp)
   1b668:	10800d17 	ldw	r2,52(r2)
   1b66c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   1b670:	e0fffa17 	ldw	r3,-24(fp)
   1b674:	e0bff917 	ldw	r2,-28(fp)
   1b678:	1880062e 	bgeu	r3,r2,1b694 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1b67c:	e0fff917 	ldw	r3,-28(fp)
   1b680:	e0bffa17 	ldw	r2,-24(fp)
   1b684:	1885c83a 	sub	r2,r3,r2
   1b688:	10bfffc4 	addi	r2,r2,-1
   1b68c:	e0bff815 	stw	r2,-32(fp)
   1b690:	00000c06 	br	1b6c4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   1b694:	e0bff917 	ldw	r2,-28(fp)
   1b698:	1005003a 	cmpeq	r2,r2,zero
   1b69c:	1000051e 	bne	r2,zero,1b6b4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1b6a0:	00820004 	movi	r2,2048
   1b6a4:	e0fffa17 	ldw	r3,-24(fp)
   1b6a8:	10c5c83a 	sub	r2,r2,r3
   1b6ac:	e0bff815 	stw	r2,-32(fp)
   1b6b0:	00000406 	br	1b6c4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1b6b4:	0081ffc4 	movi	r2,2047
   1b6b8:	e0fffa17 	ldw	r3,-24(fp)
   1b6bc:	10c5c83a 	sub	r2,r2,r3
   1b6c0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1b6c4:	e0bff817 	ldw	r2,-32(fp)
   1b6c8:	1005003a 	cmpeq	r2,r2,zero
   1b6cc:	10001f1e 	bne	r2,zero,1b74c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   1b6d0:	e0fffd17 	ldw	r3,-12(fp)
   1b6d4:	e0bff817 	ldw	r2,-32(fp)
   1b6d8:	1880022e 	bgeu	r3,r2,1b6e4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   1b6dc:	e0bffd17 	ldw	r2,-12(fp)
   1b6e0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1b6e4:	e0bffb17 	ldw	r2,-20(fp)
   1b6e8:	10c20e04 	addi	r3,r2,2104
   1b6ec:	e0bffa17 	ldw	r2,-24(fp)
   1b6f0:	1885883a 	add	r2,r3,r2
   1b6f4:	e0fffc17 	ldw	r3,-16(fp)
   1b6f8:	1009883a 	mov	r4,r2
   1b6fc:	180b883a 	mov	r5,r3
   1b700:	e1bff817 	ldw	r6,-32(fp)
   1b704:	0015a2c0 	call	15a2c <memcpy>
      ptr   += n;
   1b708:	e0fff817 	ldw	r3,-32(fp)
   1b70c:	e0bffc17 	ldw	r2,-16(fp)
   1b710:	10c5883a 	add	r2,r2,r3
   1b714:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   1b718:	e0fffd17 	ldw	r3,-12(fp)
   1b71c:	e0bff817 	ldw	r2,-32(fp)
   1b720:	1885c83a 	sub	r2,r3,r2
   1b724:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b728:	e0fffa17 	ldw	r3,-24(fp)
   1b72c:	e0bff817 	ldw	r2,-32(fp)
   1b730:	1885883a 	add	r2,r3,r2
   1b734:	10c1ffcc 	andi	r3,r2,2047
   1b738:	e0bffb17 	ldw	r2,-20(fp)
   1b73c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b740:	e0bffd17 	ldw	r2,-12(fp)
   1b744:	10800048 	cmpgei	r2,r2,1
   1b748:	103fc31e 	bne	r2,zero,1b658 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b74c:	0005303a 	rdctl	r2,status
   1b750:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b754:	e0fff517 	ldw	r3,-44(fp)
   1b758:	00bfff84 	movi	r2,-2
   1b75c:	1884703a 	and	r2,r3,r2
   1b760:	1001703a 	wrctl	status,r2
  
  return context;
   1b764:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1b768:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b76c:	e0bffb17 	ldw	r2,-20(fp)
   1b770:	10800817 	ldw	r2,32(r2)
   1b774:	10c00094 	ori	r3,r2,2
   1b778:	e0bffb17 	ldw	r2,-20(fp)
   1b77c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b780:	e0bffb17 	ldw	r2,-20(fp)
   1b784:	10800017 	ldw	r2,0(r2)
   1b788:	11000104 	addi	r4,r2,4
   1b78c:	e0bffb17 	ldw	r2,-20(fp)
   1b790:	10800817 	ldw	r2,32(r2)
   1b794:	1007883a 	mov	r3,r2
   1b798:	2005883a 	mov	r2,r4
   1b79c:	10c00035 	stwio	r3,0(r2)
   1b7a0:	e0bff717 	ldw	r2,-36(fp)
   1b7a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b7a8:	e0bff417 	ldw	r2,-48(fp)
   1b7ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1b7b0:	e0bffd17 	ldw	r2,-12(fp)
   1b7b4:	10800050 	cmplti	r2,r2,1
   1b7b8:	1000111e 	bne	r2,zero,1b800 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   1b7bc:	e0bffe17 	ldw	r2,-8(fp)
   1b7c0:	1090000c 	andi	r2,r2,16384
   1b7c4:	1004c03a 	cmpne	r2,r2,zero
   1b7c8:	1000101e 	bne	r2,zero,1b80c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1b7cc:	e0bffb17 	ldw	r2,-20(fp)
   1b7d0:	10c00d17 	ldw	r3,52(r2)
   1b7d4:	e0bff917 	ldw	r2,-28(fp)
   1b7d8:	1880051e 	bne	r3,r2,1b7f0 <altera_avalon_jtag_uart_write+0x1c8>
   1b7dc:	e0bffb17 	ldw	r2,-20(fp)
   1b7e0:	10c00917 	ldw	r3,36(r2)
   1b7e4:	e0bffb17 	ldw	r2,-20(fp)
   1b7e8:	10800117 	ldw	r2,4(r2)
   1b7ec:	18bff736 	bltu	r3,r2,1b7cc <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1b7f0:	e0bffb17 	ldw	r2,-20(fp)
   1b7f4:	10c00d17 	ldw	r3,52(r2)
   1b7f8:	e0bff917 	ldw	r2,-28(fp)
   1b7fc:	18800326 	beq	r3,r2,1b80c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   1b800:	e0bffd17 	ldw	r2,-12(fp)
   1b804:	10800048 	cmpgei	r2,r2,1
   1b808:	103fcd1e 	bne	r2,zero,1b740 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1b80c:	e0fffc17 	ldw	r3,-16(fp)
   1b810:	e0bff617 	ldw	r2,-40(fp)
   1b814:	18800526 	beq	r3,r2,1b82c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   1b818:	e0fffc17 	ldw	r3,-16(fp)
   1b81c:	e0bff617 	ldw	r2,-40(fp)
   1b820:	1887c83a 	sub	r3,r3,r2
   1b824:	e0ffff15 	stw	r3,-4(fp)
   1b828:	00000906 	br	1b850 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   1b82c:	e0bffe17 	ldw	r2,-8(fp)
   1b830:	1090000c 	andi	r2,r2,16384
   1b834:	1005003a 	cmpeq	r2,r2,zero
   1b838:	1000031e 	bne	r2,zero,1b848 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   1b83c:	00bffd44 	movi	r2,-11
   1b840:	e0bfff15 	stw	r2,-4(fp)
   1b844:	00000206 	br	1b850 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   1b848:	00bffec4 	movi	r2,-5
   1b84c:	e0bfff15 	stw	r2,-4(fp)
   1b850:	e0bfff17 	ldw	r2,-4(fp)
}
   1b854:	e037883a 	mov	sp,fp
   1b858:	dfc00117 	ldw	ra,4(sp)
   1b85c:	df000017 	ldw	fp,0(sp)
   1b860:	dec00204 	addi	sp,sp,8
   1b864:	f800283a 	ret

0001b868 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1b868:	defffa04 	addi	sp,sp,-24
   1b86c:	dfc00515 	stw	ra,20(sp)
   1b870:	df000415 	stw	fp,16(sp)
   1b874:	df000404 	addi	fp,sp,16
   1b878:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1b87c:	e0bfff17 	ldw	r2,-4(fp)
   1b880:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1b884:	e0bfff17 	ldw	r2,-4(fp)
   1b888:	10800104 	addi	r2,r2,4
   1b88c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b890:	0005303a 	rdctl	r2,status
   1b894:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b898:	e0fffd17 	ldw	r3,-12(fp)
   1b89c:	00bfff84 	movi	r2,-2
   1b8a0:	1884703a 	and	r2,r3,r2
   1b8a4:	1001703a 	wrctl	status,r2
  
  return context;
   1b8a8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1b8ac:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   1b8b0:	001c5b00 	call	1c5b0 <alt_tick>
   1b8b4:	e0bffe17 	ldw	r2,-8(fp)
   1b8b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b8bc:	e0bffc17 	ldw	r2,-16(fp)
   1b8c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1b8c4:	e037883a 	mov	sp,fp
   1b8c8:	dfc00117 	ldw	ra,4(sp)
   1b8cc:	df000017 	ldw	fp,0(sp)
   1b8d0:	dec00204 	addi	sp,sp,8
   1b8d4:	f800283a 	ret

0001b8d8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1b8d8:	defff804 	addi	sp,sp,-32
   1b8dc:	dfc00715 	stw	ra,28(sp)
   1b8e0:	df000615 	stw	fp,24(sp)
   1b8e4:	df000604 	addi	fp,sp,24
   1b8e8:	e13ffc15 	stw	r4,-16(fp)
   1b8ec:	e17ffd15 	stw	r5,-12(fp)
   1b8f0:	e1bffe15 	stw	r6,-8(fp)
   1b8f4:	e1ffff15 	stw	r7,-4(fp)
   1b8f8:	e0bfff17 	ldw	r2,-4(fp)
   1b8fc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1b900:	008000f4 	movhi	r2,3
   1b904:	10a7c004 	addi	r2,r2,-24832
   1b908:	10800017 	ldw	r2,0(r2)
   1b90c:	1004c03a 	cmpne	r2,r2,zero
   1b910:	1000041e 	bne	r2,zero,1b924 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   1b914:	00c000f4 	movhi	r3,3
   1b918:	18e7c004 	addi	r3,r3,-24832
   1b91c:	e0bffb17 	ldw	r2,-20(fp)
   1b920:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1b924:	e0bffc17 	ldw	r2,-16(fp)
   1b928:	10800104 	addi	r2,r2,4
   1b92c:	1007883a 	mov	r3,r2
   1b930:	008001c4 	movi	r2,7
   1b934:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1b938:	d8000015 	stw	zero,0(sp)
   1b93c:	e13ffd17 	ldw	r4,-12(fp)
   1b940:	e17ffe17 	ldw	r5,-8(fp)
   1b944:	018000b4 	movhi	r6,2
   1b948:	31ae1a04 	addi	r6,r6,-18328
   1b94c:	e1fffc17 	ldw	r7,-16(fp)
   1b950:	001be4c0 	call	1be4c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1b954:	e037883a 	mov	sp,fp
   1b958:	dfc00117 	ldw	ra,4(sp)
   1b95c:	df000017 	ldw	fp,0(sp)
   1b960:	dec00204 	addi	sp,sp,8
   1b964:	f800283a 	ret

0001b968 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   1b968:	defffd04 	addi	sp,sp,-12
   1b96c:	df000215 	stw	fp,8(sp)
   1b970:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
   1b974:	008000f4 	movhi	r2,3
   1b978:	10a7bd04 	addi	r2,r2,-24844
   1b97c:	10800017 	ldw	r2,0(r2)
   1b980:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   1b984:	008000f4 	movhi	r2,3
   1b988:	10a7be04 	addi	r2,r2,-24840
   1b98c:	10800017 	ldw	r2,0(r2)
   1b990:	1004c03a 	cmpne	r2,r2,zero
   1b994:	1000031e 	bne	r2,zero,1b9a4 <alt_timestamp_start+0x3c>
  {
    return -1;
   1b998:	00bfffc4 	movi	r2,-1
   1b99c:	e0bfff15 	stw	r2,-4(fp)
   1b9a0:	00001506 	br	1b9f8 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   1b9a4:	e0bffe17 	ldw	r2,-8(fp)
   1b9a8:	10800104 	addi	r2,r2,4
   1b9ac:	1007883a 	mov	r3,r2
   1b9b0:	00800204 	movi	r2,8
   1b9b4:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   1b9b8:	e0bffe17 	ldw	r2,-8(fp)
   1b9bc:	10800204 	addi	r2,r2,8
   1b9c0:	1007883a 	mov	r3,r2
   1b9c4:	00bfffd4 	movui	r2,65535
   1b9c8:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   1b9cc:	e0bffe17 	ldw	r2,-8(fp)
   1b9d0:	10800304 	addi	r2,r2,12
   1b9d4:	1007883a 	mov	r3,r2
   1b9d8:	00bfffd4 	movui	r2,65535
   1b9dc:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   1b9e0:	e0bffe17 	ldw	r2,-8(fp)
   1b9e4:	10800104 	addi	r2,r2,4
   1b9e8:	1007883a 	mov	r3,r2
   1b9ec:	00800104 	movi	r2,4
   1b9f0:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
   1b9f4:	e03fff15 	stw	zero,-4(fp)
   1b9f8:	e0bfff17 	ldw	r2,-4(fp)
}
   1b9fc:	e037883a 	mov	sp,fp
   1ba00:	df000017 	ldw	fp,0(sp)
   1ba04:	dec00104 	addi	sp,sp,4
   1ba08:	f800283a 	ret

0001ba0c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   1ba0c:	defffb04 	addi	sp,sp,-20
   1ba10:	df000415 	stw	fp,16(sp)
   1ba14:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
   1ba18:	008000f4 	movhi	r2,3
   1ba1c:	10a7bd04 	addi	r2,r2,-24844
   1ba20:	10800017 	ldw	r2,0(r2)
   1ba24:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   1ba28:	008000f4 	movhi	r2,3
   1ba2c:	10a7be04 	addi	r2,r2,-24840
   1ba30:	10800017 	ldw	r2,0(r2)
   1ba34:	1004c03a 	cmpne	r2,r2,zero
   1ba38:	1000031e 	bne	r2,zero,1ba48 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   1ba3c:	00bfffc4 	movi	r2,-1
   1ba40:	e0bfff15 	stw	r2,-4(fp)
   1ba44:	00001306 	br	1ba94 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1ba48:	e0bffe17 	ldw	r2,-8(fp)
   1ba4c:	10800404 	addi	r2,r2,16
   1ba50:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1ba54:	e0bffe17 	ldw	r2,-8(fp)
   1ba58:	10800404 	addi	r2,r2,16
   1ba5c:	10800037 	ldwio	r2,0(r2)
   1ba60:	10bfffcc 	andi	r2,r2,65535
   1ba64:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   1ba68:	e0bffe17 	ldw	r2,-8(fp)
   1ba6c:	10800504 	addi	r2,r2,20
   1ba70:	10800037 	ldwio	r2,0(r2)
   1ba74:	10bfffcc 	andi	r2,r2,65535
   1ba78:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1ba7c:	e0bffc17 	ldw	r2,-16(fp)
   1ba80:	1006943a 	slli	r3,r2,16
   1ba84:	e0bffd17 	ldw	r2,-12(fp)
   1ba88:	1884b03a 	or	r2,r3,r2
   1ba8c:	0084303a 	nor	r2,zero,r2
   1ba90:	e0bfff15 	stw	r2,-4(fp)
   1ba94:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
   1ba98:	e037883a 	mov	sp,fp
   1ba9c:	df000017 	ldw	fp,0(sp)
   1baa0:	dec00104 	addi	sp,sp,4
   1baa4:	f800283a 	ret

0001baa8 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   1baa8:	deffff04 	addi	sp,sp,-4
   1baac:	df000015 	stw	fp,0(sp)
   1bab0:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1bab4:	008000f4 	movhi	r2,3
   1bab8:	10a7be04 	addi	r2,r2,-24840
   1babc:	10800017 	ldw	r2,0(r2)
}
   1bac0:	e037883a 	mov	sp,fp
   1bac4:	df000017 	ldw	fp,0(sp)
   1bac8:	dec00104 	addi	sp,sp,4
   1bacc:	f800283a 	ret

0001bad0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1bad0:	defff404 	addi	sp,sp,-48
   1bad4:	df000b15 	stw	fp,44(sp)
   1bad8:	df000b04 	addi	fp,sp,44
   1badc:	e13ffb15 	stw	r4,-20(fp)
   1bae0:	e17ffc15 	stw	r5,-16(fp)
   1bae4:	e1bffd15 	stw	r6,-12(fp)
   1bae8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1baec:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1baf0:	008000f4 	movhi	r2,3
   1baf4:	10a7c004 	addi	r2,r2,-24832
   1baf8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1bafc:	1005003a 	cmpeq	r2,r2,zero
   1bb00:	1000411e 	bne	r2,zero,1bc08 <alt_alarm_start+0x138>
  {
    if (alarm)
   1bb04:	e0bffb17 	ldw	r2,-20(fp)
   1bb08:	1005003a 	cmpeq	r2,r2,zero
   1bb0c:	10003b1e 	bne	r2,zero,1bbfc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   1bb10:	e0fffb17 	ldw	r3,-20(fp)
   1bb14:	e0bffd17 	ldw	r2,-12(fp)
   1bb18:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   1bb1c:	e0fffb17 	ldw	r3,-20(fp)
   1bb20:	e0bffe17 	ldw	r2,-8(fp)
   1bb24:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bb28:	0005303a 	rdctl	r2,status
   1bb2c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bb30:	e0fff817 	ldw	r3,-32(fp)
   1bb34:	00bfff84 	movi	r2,-2
   1bb38:	1884703a 	and	r2,r3,r2
   1bb3c:	1001703a 	wrctl	status,r2
  
  return context;
   1bb40:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1bb44:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1bb48:	008000f4 	movhi	r2,3
   1bb4c:	10a7c104 	addi	r2,r2,-24828
   1bb50:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1bb54:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1bb58:	e0fffc17 	ldw	r3,-16(fp)
   1bb5c:	e0bff917 	ldw	r2,-28(fp)
   1bb60:	1885883a 	add	r2,r3,r2
   1bb64:	10c00044 	addi	r3,r2,1
   1bb68:	e0bffb17 	ldw	r2,-20(fp)
   1bb6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1bb70:	e0bffb17 	ldw	r2,-20(fp)
   1bb74:	10c00217 	ldw	r3,8(r2)
   1bb78:	e0bff917 	ldw	r2,-28(fp)
   1bb7c:	1880042e 	bgeu	r3,r2,1bb90 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1bb80:	e0fffb17 	ldw	r3,-20(fp)
   1bb84:	00800044 	movi	r2,1
   1bb88:	18800405 	stb	r2,16(r3)
   1bb8c:	00000206 	br	1bb98 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1bb90:	e0bffb17 	ldw	r2,-20(fp)
   1bb94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1bb98:	e0fffb17 	ldw	r3,-20(fp)
   1bb9c:	008000f4 	movhi	r2,3
   1bba0:	10a7ac04 	addi	r2,r2,-24912
   1bba4:	e0bff615 	stw	r2,-40(fp)
   1bba8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1bbac:	e0fff717 	ldw	r3,-36(fp)
   1bbb0:	e0bff617 	ldw	r2,-40(fp)
   1bbb4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1bbb8:	e0bff617 	ldw	r2,-40(fp)
   1bbbc:	10c00017 	ldw	r3,0(r2)
   1bbc0:	e0bff717 	ldw	r2,-36(fp)
   1bbc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1bbc8:	e0bff617 	ldw	r2,-40(fp)
   1bbcc:	10c00017 	ldw	r3,0(r2)
   1bbd0:	e0bff717 	ldw	r2,-36(fp)
   1bbd4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1bbd8:	e0fff617 	ldw	r3,-40(fp)
   1bbdc:	e0bff717 	ldw	r2,-36(fp)
   1bbe0:	18800015 	stw	r2,0(r3)
   1bbe4:	e0bffa17 	ldw	r2,-24(fp)
   1bbe8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bbec:	e0bff517 	ldw	r2,-44(fp)
   1bbf0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1bbf4:	e03fff15 	stw	zero,-4(fp)
   1bbf8:	00000506 	br	1bc10 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   1bbfc:	00bffa84 	movi	r2,-22
   1bc00:	e0bfff15 	stw	r2,-4(fp)
   1bc04:	00000206 	br	1bc10 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   1bc08:	00bfde84 	movi	r2,-134
   1bc0c:	e0bfff15 	stw	r2,-4(fp)
   1bc10:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   1bc14:	e037883a 	mov	sp,fp
   1bc18:	df000017 	ldw	fp,0(sp)
   1bc1c:	dec00104 	addi	sp,sp,4
   1bc20:	f800283a 	ret

0001bc24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1bc24:	deffff04 	addi	sp,sp,-4
   1bc28:	df000015 	stw	fp,0(sp)
   1bc2c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1bc30:	e037883a 	mov	sp,fp
   1bc34:	df000017 	ldw	fp,0(sp)
   1bc38:	dec00104 	addi	sp,sp,4
   1bc3c:	f800283a 	ret

0001bc40 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1bc40:	defff904 	addi	sp,sp,-28
   1bc44:	dfc00615 	stw	ra,24(sp)
   1bc48:	df000515 	stw	fp,20(sp)
   1bc4c:	df000504 	addi	fp,sp,20
   1bc50:	e13ffd15 	stw	r4,-12(fp)
   1bc54:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1bc58:	e0bffd17 	ldw	r2,-12(fp)
   1bc5c:	1005003a 	cmpeq	r2,r2,zero
   1bc60:	1000041e 	bne	r2,zero,1bc74 <alt_dev_llist_insert+0x34>
   1bc64:	e0bffd17 	ldw	r2,-12(fp)
   1bc68:	10800217 	ldw	r2,8(r2)
   1bc6c:	1004c03a 	cmpne	r2,r2,zero
   1bc70:	1000071e 	bne	r2,zero,1bc90 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   1bc74:	001bcf40 	call	1bcf4 <alt_get_errno>
   1bc78:	1007883a 	mov	r3,r2
   1bc7c:	00800584 	movi	r2,22
   1bc80:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1bc84:	00bffa84 	movi	r2,-22
   1bc88:	e0bfff15 	stw	r2,-4(fp)
   1bc8c:	00001306 	br	1bcdc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1bc90:	e0fffd17 	ldw	r3,-12(fp)
   1bc94:	e0bffe17 	ldw	r2,-8(fp)
   1bc98:	e0bffb15 	stw	r2,-20(fp)
   1bc9c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1bca0:	e0fffc17 	ldw	r3,-16(fp)
   1bca4:	e0bffb17 	ldw	r2,-20(fp)
   1bca8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1bcac:	e0bffb17 	ldw	r2,-20(fp)
   1bcb0:	10c00017 	ldw	r3,0(r2)
   1bcb4:	e0bffc17 	ldw	r2,-16(fp)
   1bcb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1bcbc:	e0bffb17 	ldw	r2,-20(fp)
   1bcc0:	10c00017 	ldw	r3,0(r2)
   1bcc4:	e0bffc17 	ldw	r2,-16(fp)
   1bcc8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1bccc:	e0fffb17 	ldw	r3,-20(fp)
   1bcd0:	e0bffc17 	ldw	r2,-16(fp)
   1bcd4:	18800015 	stw	r2,0(r3)

  return 0;  
   1bcd8:	e03fff15 	stw	zero,-4(fp)
   1bcdc:	e0bfff17 	ldw	r2,-4(fp)
}
   1bce0:	e037883a 	mov	sp,fp
   1bce4:	dfc00117 	ldw	ra,4(sp)
   1bce8:	df000017 	ldw	fp,0(sp)
   1bcec:	dec00204 	addi	sp,sp,8
   1bcf0:	f800283a 	ret

0001bcf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1bcf4:	defffd04 	addi	sp,sp,-12
   1bcf8:	dfc00215 	stw	ra,8(sp)
   1bcfc:	df000115 	stw	fp,4(sp)
   1bd00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1bd04:	008000f4 	movhi	r2,3
   1bd08:	10a7a904 	addi	r2,r2,-24924
   1bd0c:	10800017 	ldw	r2,0(r2)
   1bd10:	1005003a 	cmpeq	r2,r2,zero
   1bd14:	1000061e 	bne	r2,zero,1bd30 <alt_get_errno+0x3c>
   1bd18:	008000f4 	movhi	r2,3
   1bd1c:	10a7a904 	addi	r2,r2,-24924
   1bd20:	10800017 	ldw	r2,0(r2)
   1bd24:	103ee83a 	callr	r2
   1bd28:	e0bfff15 	stw	r2,-4(fp)
   1bd2c:	00000306 	br	1bd3c <alt_get_errno+0x48>
   1bd30:	008000f4 	movhi	r2,3
   1bd34:	10a7b904 	addi	r2,r2,-24860
   1bd38:	e0bfff15 	stw	r2,-4(fp)
   1bd3c:	e0bfff17 	ldw	r2,-4(fp)
}
   1bd40:	e037883a 	mov	sp,fp
   1bd44:	dfc00117 	ldw	ra,4(sp)
   1bd48:	df000017 	ldw	fp,0(sp)
   1bd4c:	dec00204 	addi	sp,sp,8
   1bd50:	f800283a 	ret

0001bd54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1bd54:	defffd04 	addi	sp,sp,-12
   1bd58:	dfc00215 	stw	ra,8(sp)
   1bd5c:	df000115 	stw	fp,4(sp)
   1bd60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1bd64:	00bfff04 	movi	r2,-4
   1bd68:	00c000b4 	movhi	r3,2
   1bd6c:	18f37904 	addi	r3,r3,-12828
   1bd70:	1885883a 	add	r2,r3,r2
   1bd74:	e0bfff15 	stw	r2,-4(fp)
   1bd78:	00000606 	br	1bd94 <_do_ctors+0x40>
        (*ctor) (); 
   1bd7c:	e0bfff17 	ldw	r2,-4(fp)
   1bd80:	10800017 	ldw	r2,0(r2)
   1bd84:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1bd88:	e0bfff17 	ldw	r2,-4(fp)
   1bd8c:	10bfff04 	addi	r2,r2,-4
   1bd90:	e0bfff15 	stw	r2,-4(fp)
   1bd94:	e0ffff17 	ldw	r3,-4(fp)
   1bd98:	008000b4 	movhi	r2,2
   1bd9c:	10b37804 	addi	r2,r2,-12832
   1bda0:	18bff62e 	bgeu	r3,r2,1bd7c <_do_ctors+0x28>
        (*ctor) (); 
}
   1bda4:	e037883a 	mov	sp,fp
   1bda8:	dfc00117 	ldw	ra,4(sp)
   1bdac:	df000017 	ldw	fp,0(sp)
   1bdb0:	dec00204 	addi	sp,sp,8
   1bdb4:	f800283a 	ret

0001bdb8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1bdb8:	defffd04 	addi	sp,sp,-12
   1bdbc:	dfc00215 	stw	ra,8(sp)
   1bdc0:	df000115 	stw	fp,4(sp)
   1bdc4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1bdc8:	00bfff04 	movi	r2,-4
   1bdcc:	00c000b4 	movhi	r3,2
   1bdd0:	18f37904 	addi	r3,r3,-12828
   1bdd4:	1885883a 	add	r2,r3,r2
   1bdd8:	e0bfff15 	stw	r2,-4(fp)
   1bddc:	00000606 	br	1bdf8 <_do_dtors+0x40>
        (*dtor) (); 
   1bde0:	e0bfff17 	ldw	r2,-4(fp)
   1bde4:	10800017 	ldw	r2,0(r2)
   1bde8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1bdec:	e0bfff17 	ldw	r2,-4(fp)
   1bdf0:	10bfff04 	addi	r2,r2,-4
   1bdf4:	e0bfff15 	stw	r2,-4(fp)
   1bdf8:	e0ffff17 	ldw	r3,-4(fp)
   1bdfc:	008000b4 	movhi	r2,2
   1be00:	10b37904 	addi	r2,r2,-12828
   1be04:	18bff62e 	bgeu	r3,r2,1bde0 <_do_dtors+0x28>
        (*dtor) (); 
}
   1be08:	e037883a 	mov	sp,fp
   1be0c:	dfc00117 	ldw	ra,4(sp)
   1be10:	df000017 	ldw	fp,0(sp)
   1be14:	dec00204 	addi	sp,sp,8
   1be18:	f800283a 	ret

0001be1c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1be1c:	defffe04 	addi	sp,sp,-8
   1be20:	dfc00115 	stw	ra,4(sp)
   1be24:	df000015 	stw	fp,0(sp)
   1be28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1be2c:	0009883a 	mov	r4,zero
   1be30:	01440004 	movi	r5,4096
   1be34:	001c9480 	call	1c948 <alt_icache_flush>
#endif
}
   1be38:	e037883a 	mov	sp,fp
   1be3c:	dfc00117 	ldw	ra,4(sp)
   1be40:	df000017 	ldw	fp,0(sp)
   1be44:	dec00204 	addi	sp,sp,8
   1be48:	f800283a 	ret

0001be4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1be4c:	defff904 	addi	sp,sp,-28
   1be50:	dfc00615 	stw	ra,24(sp)
   1be54:	df000515 	stw	fp,20(sp)
   1be58:	df000504 	addi	fp,sp,20
   1be5c:	e13ffc15 	stw	r4,-16(fp)
   1be60:	e17ffd15 	stw	r5,-12(fp)
   1be64:	e1bffe15 	stw	r6,-8(fp)
   1be68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1be6c:	e0800217 	ldw	r2,8(fp)
   1be70:	d8800015 	stw	r2,0(sp)
   1be74:	e13ffc17 	ldw	r4,-16(fp)
   1be78:	e17ffd17 	ldw	r5,-12(fp)
   1be7c:	e1bffe17 	ldw	r6,-8(fp)
   1be80:	e1ffff17 	ldw	r7,-4(fp)
   1be84:	001c0200 	call	1c020 <alt_iic_isr_register>
}  
   1be88:	e037883a 	mov	sp,fp
   1be8c:	dfc00117 	ldw	ra,4(sp)
   1be90:	df000017 	ldw	fp,0(sp)
   1be94:	dec00204 	addi	sp,sp,8
   1be98:	f800283a 	ret

0001be9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1be9c:	defff904 	addi	sp,sp,-28
   1bea0:	df000615 	stw	fp,24(sp)
   1bea4:	df000604 	addi	fp,sp,24
   1bea8:	e13ffe15 	stw	r4,-8(fp)
   1beac:	e17fff15 	stw	r5,-4(fp)
   1beb0:	e0bfff17 	ldw	r2,-4(fp)
   1beb4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1beb8:	0005303a 	rdctl	r2,status
   1bebc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bec0:	e0fffb17 	ldw	r3,-20(fp)
   1bec4:	00bfff84 	movi	r2,-2
   1bec8:	1884703a 	and	r2,r3,r2
   1becc:	1001703a 	wrctl	status,r2
  
  return context;
   1bed0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1bed4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   1bed8:	e0fffc17 	ldw	r3,-16(fp)
   1bedc:	00800044 	movi	r2,1
   1bee0:	10c4983a 	sll	r2,r2,r3
   1bee4:	1007883a 	mov	r3,r2
   1bee8:	008000f4 	movhi	r2,3
   1beec:	10a7bf04 	addi	r2,r2,-24836
   1bef0:	10800017 	ldw	r2,0(r2)
   1bef4:	1886b03a 	or	r3,r3,r2
   1bef8:	008000f4 	movhi	r2,3
   1befc:	10a7bf04 	addi	r2,r2,-24836
   1bf00:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1bf04:	008000f4 	movhi	r2,3
   1bf08:	10a7bf04 	addi	r2,r2,-24836
   1bf0c:	10800017 	ldw	r2,0(r2)
   1bf10:	100170fa 	wrctl	ienable,r2
   1bf14:	e0bffd17 	ldw	r2,-12(fp)
   1bf18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bf1c:	e0bffa17 	ldw	r2,-24(fp)
   1bf20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1bf24:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1bf28:	e037883a 	mov	sp,fp
   1bf2c:	df000017 	ldw	fp,0(sp)
   1bf30:	dec00104 	addi	sp,sp,4
   1bf34:	f800283a 	ret

0001bf38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1bf38:	defff904 	addi	sp,sp,-28
   1bf3c:	df000615 	stw	fp,24(sp)
   1bf40:	df000604 	addi	fp,sp,24
   1bf44:	e13ffe15 	stw	r4,-8(fp)
   1bf48:	e17fff15 	stw	r5,-4(fp)
   1bf4c:	e0bfff17 	ldw	r2,-4(fp)
   1bf50:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bf54:	0005303a 	rdctl	r2,status
   1bf58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bf5c:	e0fffb17 	ldw	r3,-20(fp)
   1bf60:	00bfff84 	movi	r2,-2
   1bf64:	1884703a 	and	r2,r3,r2
   1bf68:	1001703a 	wrctl	status,r2
  
  return context;
   1bf6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1bf70:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   1bf74:	e0fffc17 	ldw	r3,-16(fp)
   1bf78:	00800044 	movi	r2,1
   1bf7c:	10c4983a 	sll	r2,r2,r3
   1bf80:	0084303a 	nor	r2,zero,r2
   1bf84:	1007883a 	mov	r3,r2
   1bf88:	008000f4 	movhi	r2,3
   1bf8c:	10a7bf04 	addi	r2,r2,-24836
   1bf90:	10800017 	ldw	r2,0(r2)
   1bf94:	1886703a 	and	r3,r3,r2
   1bf98:	008000f4 	movhi	r2,3
   1bf9c:	10a7bf04 	addi	r2,r2,-24836
   1bfa0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1bfa4:	008000f4 	movhi	r2,3
   1bfa8:	10a7bf04 	addi	r2,r2,-24836
   1bfac:	10800017 	ldw	r2,0(r2)
   1bfb0:	100170fa 	wrctl	ienable,r2
   1bfb4:	e0bffd17 	ldw	r2,-12(fp)
   1bfb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bfbc:	e0bffa17 	ldw	r2,-24(fp)
   1bfc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1bfc4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1bfc8:	e037883a 	mov	sp,fp
   1bfcc:	df000017 	ldw	fp,0(sp)
   1bfd0:	dec00104 	addi	sp,sp,4
   1bfd4:	f800283a 	ret

0001bfd8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1bfd8:	defffc04 	addi	sp,sp,-16
   1bfdc:	df000315 	stw	fp,12(sp)
   1bfe0:	df000304 	addi	fp,sp,12
   1bfe4:	e13ffe15 	stw	r4,-8(fp)
   1bfe8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1bfec:	000530fa 	rdctl	r2,ienable
   1bff0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1bff4:	e0ffff17 	ldw	r3,-4(fp)
   1bff8:	00800044 	movi	r2,1
   1bffc:	10c4983a 	sll	r2,r2,r3
   1c000:	1007883a 	mov	r3,r2
   1c004:	e0bffd17 	ldw	r2,-12(fp)
   1c008:	1884703a 	and	r2,r3,r2
   1c00c:	1004c03a 	cmpne	r2,r2,zero
}
   1c010:	e037883a 	mov	sp,fp
   1c014:	df000017 	ldw	fp,0(sp)
   1c018:	dec00104 	addi	sp,sp,4
   1c01c:	f800283a 	ret

0001c020 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1c020:	defff404 	addi	sp,sp,-48
   1c024:	dfc00b15 	stw	ra,44(sp)
   1c028:	df000a15 	stw	fp,40(sp)
   1c02c:	df000a04 	addi	fp,sp,40
   1c030:	e13ffb15 	stw	r4,-20(fp)
   1c034:	e17ffc15 	stw	r5,-16(fp)
   1c038:	e1bffd15 	stw	r6,-12(fp)
   1c03c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   1c040:	00bffa84 	movi	r2,-22
   1c044:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1c048:	e0bffc17 	ldw	r2,-16(fp)
   1c04c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1c050:	e0bff917 	ldw	r2,-28(fp)
   1c054:	10800808 	cmpgei	r2,r2,32
   1c058:	1000291e 	bne	r2,zero,1c100 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c05c:	0005303a 	rdctl	r2,status
   1c060:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c064:	e0fff717 	ldw	r3,-36(fp)
   1c068:	00bfff84 	movi	r2,-2
   1c06c:	1884703a 	and	r2,r3,r2
   1c070:	1001703a 	wrctl	status,r2
  
  return context;
   1c074:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1c078:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   1c07c:	e0bff917 	ldw	r2,-28(fp)
   1c080:	00c000f4 	movhi	r3,3
   1c084:	18e7cc04 	addi	r3,r3,-24784
   1c088:	100490fa 	slli	r2,r2,3
   1c08c:	10c7883a 	add	r3,r2,r3
   1c090:	e0bffd17 	ldw	r2,-12(fp)
   1c094:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   1c098:	e0bff917 	ldw	r2,-28(fp)
   1c09c:	00c000f4 	movhi	r3,3
   1c0a0:	18e7cc04 	addi	r3,r3,-24784
   1c0a4:	100490fa 	slli	r2,r2,3
   1c0a8:	10c5883a 	add	r2,r2,r3
   1c0ac:	10c00104 	addi	r3,r2,4
   1c0b0:	e0bffe17 	ldw	r2,-8(fp)
   1c0b4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1c0b8:	e0bffd17 	ldw	r2,-12(fp)
   1c0bc:	1005003a 	cmpeq	r2,r2,zero
   1c0c0:	1000051e 	bne	r2,zero,1c0d8 <alt_iic_isr_register+0xb8>
   1c0c4:	e17ff917 	ldw	r5,-28(fp)
   1c0c8:	e13ffb17 	ldw	r4,-20(fp)
   1c0cc:	001be9c0 	call	1be9c <alt_ic_irq_enable>
   1c0d0:	e0bfff15 	stw	r2,-4(fp)
   1c0d4:	00000406 	br	1c0e8 <alt_iic_isr_register+0xc8>
   1c0d8:	e17ff917 	ldw	r5,-28(fp)
   1c0dc:	e13ffb17 	ldw	r4,-20(fp)
   1c0e0:	001bf380 	call	1bf38 <alt_ic_irq_disable>
   1c0e4:	e0bfff15 	stw	r2,-4(fp)
   1c0e8:	e0bfff17 	ldw	r2,-4(fp)
   1c0ec:	e0bffa15 	stw	r2,-24(fp)
   1c0f0:	e0bff817 	ldw	r2,-32(fp)
   1c0f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c0f8:	e0bff617 	ldw	r2,-40(fp)
   1c0fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1c100:	e0bffa17 	ldw	r2,-24(fp)
}
   1c104:	e037883a 	mov	sp,fp
   1c108:	dfc00117 	ldw	ra,4(sp)
   1c10c:	df000017 	ldw	fp,0(sp)
   1c110:	dec00204 	addi	sp,sp,8
   1c114:	f800283a 	ret

0001c118 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1c118:	defff904 	addi	sp,sp,-28
   1c11c:	dfc00615 	stw	ra,24(sp)
   1c120:	df000515 	stw	fp,20(sp)
   1c124:	df000504 	addi	fp,sp,20
   1c128:	e13ffc15 	stw	r4,-16(fp)
   1c12c:	e17ffd15 	stw	r5,-12(fp)
   1c130:	e1bffe15 	stw	r6,-8(fp)
   1c134:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1c138:	e13ffd17 	ldw	r4,-12(fp)
   1c13c:	e17ffe17 	ldw	r5,-8(fp)
   1c140:	e1bfff17 	ldw	r6,-4(fp)
   1c144:	001c3300 	call	1c330 <open>
   1c148:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1c14c:	e0bffb17 	ldw	r2,-20(fp)
   1c150:	1004803a 	cmplt	r2,r2,zero
   1c154:	10001c1e 	bne	r2,zero,1c1c8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1c158:	e0bffb17 	ldw	r2,-20(fp)
   1c15c:	00c000f4 	movhi	r3,3
   1c160:	18e32604 	addi	r3,r3,-29544
   1c164:	10800324 	muli	r2,r2,12
   1c168:	10c5883a 	add	r2,r2,r3
   1c16c:	10c00017 	ldw	r3,0(r2)
   1c170:	e0bffc17 	ldw	r2,-16(fp)
   1c174:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1c178:	e0bffb17 	ldw	r2,-20(fp)
   1c17c:	00c000f4 	movhi	r3,3
   1c180:	18e32604 	addi	r3,r3,-29544
   1c184:	10800324 	muli	r2,r2,12
   1c188:	10c5883a 	add	r2,r2,r3
   1c18c:	10800104 	addi	r2,r2,4
   1c190:	10c00017 	ldw	r3,0(r2)
   1c194:	e0bffc17 	ldw	r2,-16(fp)
   1c198:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1c19c:	e0bffb17 	ldw	r2,-20(fp)
   1c1a0:	00c000f4 	movhi	r3,3
   1c1a4:	18e32604 	addi	r3,r3,-29544
   1c1a8:	10800324 	muli	r2,r2,12
   1c1ac:	10c5883a 	add	r2,r2,r3
   1c1b0:	10800204 	addi	r2,r2,8
   1c1b4:	10c00017 	ldw	r3,0(r2)
   1c1b8:	e0bffc17 	ldw	r2,-16(fp)
   1c1bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1c1c0:	e13ffb17 	ldw	r4,-20(fp)
   1c1c4:	001a4d00 	call	1a4d0 <alt_release_fd>
  }
} 
   1c1c8:	e037883a 	mov	sp,fp
   1c1cc:	dfc00117 	ldw	ra,4(sp)
   1c1d0:	df000017 	ldw	fp,0(sp)
   1c1d4:	dec00204 	addi	sp,sp,8
   1c1d8:	f800283a 	ret

0001c1dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1c1dc:	defffb04 	addi	sp,sp,-20
   1c1e0:	dfc00415 	stw	ra,16(sp)
   1c1e4:	df000315 	stw	fp,12(sp)
   1c1e8:	df000304 	addi	fp,sp,12
   1c1ec:	e13ffd15 	stw	r4,-12(fp)
   1c1f0:	e17ffe15 	stw	r5,-8(fp)
   1c1f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1c1f8:	010000f4 	movhi	r4,3
   1c1fc:	21232904 	addi	r4,r4,-29532
   1c200:	e17ffd17 	ldw	r5,-12(fp)
   1c204:	01800044 	movi	r6,1
   1c208:	01c07fc4 	movi	r7,511
   1c20c:	001c1180 	call	1c118 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1c210:	010000f4 	movhi	r4,3
   1c214:	21232604 	addi	r4,r4,-29544
   1c218:	e17ffe17 	ldw	r5,-8(fp)
   1c21c:	000d883a 	mov	r6,zero
   1c220:	01c07fc4 	movi	r7,511
   1c224:	001c1180 	call	1c118 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1c228:	010000f4 	movhi	r4,3
   1c22c:	21232c04 	addi	r4,r4,-29520
   1c230:	e17fff17 	ldw	r5,-4(fp)
   1c234:	01800044 	movi	r6,1
   1c238:	01c07fc4 	movi	r7,511
   1c23c:	001c1180 	call	1c118 <alt_open_fd>
}  
   1c240:	e037883a 	mov	sp,fp
   1c244:	dfc00117 	ldw	ra,4(sp)
   1c248:	df000017 	ldw	fp,0(sp)
   1c24c:	dec00204 	addi	sp,sp,8
   1c250:	f800283a 	ret

0001c254 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1c254:	defffc04 	addi	sp,sp,-16
   1c258:	df000315 	stw	fp,12(sp)
   1c25c:	df000304 	addi	fp,sp,12
   1c260:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1c264:	e0bffe17 	ldw	r2,-8(fp)
   1c268:	10800217 	ldw	r2,8(r2)
   1c26c:	10d00034 	orhi	r3,r2,16384
   1c270:	e0bffe17 	ldw	r2,-8(fp)
   1c274:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1c278:	e03ffd15 	stw	zero,-12(fp)
   1c27c:	00002006 	br	1c300 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1c280:	e0bffd17 	ldw	r2,-12(fp)
   1c284:	00c000f4 	movhi	r3,3
   1c288:	18e32604 	addi	r3,r3,-29544
   1c28c:	10800324 	muli	r2,r2,12
   1c290:	10c5883a 	add	r2,r2,r3
   1c294:	10c00017 	ldw	r3,0(r2)
   1c298:	e0bffe17 	ldw	r2,-8(fp)
   1c29c:	10800017 	ldw	r2,0(r2)
   1c2a0:	1880141e 	bne	r3,r2,1c2f4 <alt_file_locked+0xa0>
   1c2a4:	e0bffd17 	ldw	r2,-12(fp)
   1c2a8:	00c000f4 	movhi	r3,3
   1c2ac:	18e32604 	addi	r3,r3,-29544
   1c2b0:	10800324 	muli	r2,r2,12
   1c2b4:	10c5883a 	add	r2,r2,r3
   1c2b8:	10800204 	addi	r2,r2,8
   1c2bc:	10800017 	ldw	r2,0(r2)
   1c2c0:	1004403a 	cmpge	r2,r2,zero
   1c2c4:	10000b1e 	bne	r2,zero,1c2f4 <alt_file_locked+0xa0>
   1c2c8:	e0bffd17 	ldw	r2,-12(fp)
   1c2cc:	10800324 	muli	r2,r2,12
   1c2d0:	1007883a 	mov	r3,r2
   1c2d4:	008000f4 	movhi	r2,3
   1c2d8:	10a32604 	addi	r2,r2,-29544
   1c2dc:	1887883a 	add	r3,r3,r2
   1c2e0:	e0bffe17 	ldw	r2,-8(fp)
   1c2e4:	18800326 	beq	r3,r2,1c2f4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1c2e8:	00bffcc4 	movi	r2,-13
   1c2ec:	e0bfff15 	stw	r2,-4(fp)
   1c2f0:	00000a06 	br	1c31c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1c2f4:	e0bffd17 	ldw	r2,-12(fp)
   1c2f8:	10800044 	addi	r2,r2,1
   1c2fc:	e0bffd15 	stw	r2,-12(fp)
   1c300:	008000f4 	movhi	r2,3
   1c304:	10a7a804 	addi	r2,r2,-24928
   1c308:	10800017 	ldw	r2,0(r2)
   1c30c:	1007883a 	mov	r3,r2
   1c310:	e0bffd17 	ldw	r2,-12(fp)
   1c314:	18bfda2e 	bgeu	r3,r2,1c280 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1c318:	e03fff15 	stw	zero,-4(fp)
   1c31c:	e0bfff17 	ldw	r2,-4(fp)
}
   1c320:	e037883a 	mov	sp,fp
   1c324:	df000017 	ldw	fp,0(sp)
   1c328:	dec00104 	addi	sp,sp,4
   1c32c:	f800283a 	ret

0001c330 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1c330:	defff404 	addi	sp,sp,-48
   1c334:	dfc00b15 	stw	ra,44(sp)
   1c338:	df000a15 	stw	fp,40(sp)
   1c33c:	df000a04 	addi	fp,sp,40
   1c340:	e13ffb15 	stw	r4,-20(fp)
   1c344:	e17ffc15 	stw	r5,-16(fp)
   1c348:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1c34c:	00bfffc4 	movi	r2,-1
   1c350:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   1c354:	00bffb44 	movi	r2,-19
   1c358:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   1c35c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1c360:	e13ffb17 	ldw	r4,-20(fp)
   1c364:	014000f4 	movhi	r5,3
   1c368:	2967a604 	addi	r5,r5,-24936
   1c36c:	001c6dc0 	call	1c6dc <alt_find_dev>
   1c370:	e0bffa15 	stw	r2,-24(fp)
   1c374:	e0bffa17 	ldw	r2,-24(fp)
   1c378:	1004c03a 	cmpne	r2,r2,zero
   1c37c:	1000051e 	bne	r2,zero,1c394 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1c380:	e13ffb17 	ldw	r4,-20(fp)
   1c384:	001c7700 	call	1c770 <alt_find_file>
   1c388:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   1c38c:	00800044 	movi	r2,1
   1c390:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1c394:	e0bffa17 	ldw	r2,-24(fp)
   1c398:	1005003a 	cmpeq	r2,r2,zero
   1c39c:	1000301e 	bne	r2,zero,1c460 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1c3a0:	e13ffa17 	ldw	r4,-24(fp)
   1c3a4:	001c8900 	call	1c890 <alt_get_fd>
   1c3a8:	e0bff815 	stw	r2,-32(fp)
   1c3ac:	e0bff817 	ldw	r2,-32(fp)
   1c3b0:	1004403a 	cmpge	r2,r2,zero
   1c3b4:	1000031e 	bne	r2,zero,1c3c4 <open+0x94>
    {
      status = index;
   1c3b8:	e0bff817 	ldw	r2,-32(fp)
   1c3bc:	e0bff715 	stw	r2,-36(fp)
   1c3c0:	00002906 	br	1c468 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   1c3c4:	e0bff817 	ldw	r2,-32(fp)
   1c3c8:	10800324 	muli	r2,r2,12
   1c3cc:	1007883a 	mov	r3,r2
   1c3d0:	008000f4 	movhi	r2,3
   1c3d4:	10a32604 	addi	r2,r2,-29544
   1c3d8:	1885883a 	add	r2,r3,r2
   1c3dc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1c3e0:	e0fffc17 	ldw	r3,-16(fp)
   1c3e4:	00900034 	movhi	r2,16384
   1c3e8:	10bfffc4 	addi	r2,r2,-1
   1c3ec:	1886703a 	and	r3,r3,r2
   1c3f0:	e0bff917 	ldw	r2,-28(fp)
   1c3f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1c3f8:	e0bff617 	ldw	r2,-40(fp)
   1c3fc:	1004c03a 	cmpne	r2,r2,zero
   1c400:	1000061e 	bne	r2,zero,1c41c <open+0xec>
   1c404:	e13ff917 	ldw	r4,-28(fp)
   1c408:	001c2540 	call	1c254 <alt_file_locked>
   1c40c:	e0bff715 	stw	r2,-36(fp)
   1c410:	e0bff717 	ldw	r2,-36(fp)
   1c414:	1004803a 	cmplt	r2,r2,zero
   1c418:	1000131e 	bne	r2,zero,1c468 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1c41c:	e0bffa17 	ldw	r2,-24(fp)
   1c420:	10800317 	ldw	r2,12(r2)
   1c424:	1005003a 	cmpeq	r2,r2,zero
   1c428:	1000091e 	bne	r2,zero,1c450 <open+0x120>
   1c42c:	e0bffa17 	ldw	r2,-24(fp)
   1c430:	10800317 	ldw	r2,12(r2)
   1c434:	e13ff917 	ldw	r4,-28(fp)
   1c438:	e17ffb17 	ldw	r5,-20(fp)
   1c43c:	e1bffc17 	ldw	r6,-16(fp)
   1c440:	e1fffd17 	ldw	r7,-12(fp)
   1c444:	103ee83a 	callr	r2
   1c448:	e0bfff15 	stw	r2,-4(fp)
   1c44c:	00000106 	br	1c454 <open+0x124>
   1c450:	e03fff15 	stw	zero,-4(fp)
   1c454:	e0bfff17 	ldw	r2,-4(fp)
   1c458:	e0bff715 	stw	r2,-36(fp)
   1c45c:	00000206 	br	1c468 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1c460:	00bffb44 	movi	r2,-19
   1c464:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1c468:	e0bff717 	ldw	r2,-36(fp)
   1c46c:	1004403a 	cmpge	r2,r2,zero
   1c470:	1000091e 	bne	r2,zero,1c498 <open+0x168>
  {
    alt_release_fd (index);  
   1c474:	e13ff817 	ldw	r4,-32(fp)
   1c478:	001a4d00 	call	1a4d0 <alt_release_fd>
    ALT_ERRNO = -status;
   1c47c:	001c4b80 	call	1c4b8 <alt_get_errno>
   1c480:	e0fff717 	ldw	r3,-36(fp)
   1c484:	00c7c83a 	sub	r3,zero,r3
   1c488:	10c00015 	stw	r3,0(r2)
    return -1;
   1c48c:	00bfffc4 	movi	r2,-1
   1c490:	e0bffe15 	stw	r2,-8(fp)
   1c494:	00000206 	br	1c4a0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   1c498:	e0bff817 	ldw	r2,-32(fp)
   1c49c:	e0bffe15 	stw	r2,-8(fp)
   1c4a0:	e0bffe17 	ldw	r2,-8(fp)
}
   1c4a4:	e037883a 	mov	sp,fp
   1c4a8:	dfc00117 	ldw	ra,4(sp)
   1c4ac:	df000017 	ldw	fp,0(sp)
   1c4b0:	dec00204 	addi	sp,sp,8
   1c4b4:	f800283a 	ret

0001c4b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1c4b8:	defffd04 	addi	sp,sp,-12
   1c4bc:	dfc00215 	stw	ra,8(sp)
   1c4c0:	df000115 	stw	fp,4(sp)
   1c4c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1c4c8:	008000f4 	movhi	r2,3
   1c4cc:	10a7a904 	addi	r2,r2,-24924
   1c4d0:	10800017 	ldw	r2,0(r2)
   1c4d4:	1005003a 	cmpeq	r2,r2,zero
   1c4d8:	1000061e 	bne	r2,zero,1c4f4 <alt_get_errno+0x3c>
   1c4dc:	008000f4 	movhi	r2,3
   1c4e0:	10a7a904 	addi	r2,r2,-24924
   1c4e4:	10800017 	ldw	r2,0(r2)
   1c4e8:	103ee83a 	callr	r2
   1c4ec:	e0bfff15 	stw	r2,-4(fp)
   1c4f0:	00000306 	br	1c500 <alt_get_errno+0x48>
   1c4f4:	008000f4 	movhi	r2,3
   1c4f8:	10a7b904 	addi	r2,r2,-24860
   1c4fc:	e0bfff15 	stw	r2,-4(fp)
   1c500:	e0bfff17 	ldw	r2,-4(fp)
}
   1c504:	e037883a 	mov	sp,fp
   1c508:	dfc00117 	ldw	ra,4(sp)
   1c50c:	df000017 	ldw	fp,0(sp)
   1c510:	dec00204 	addi	sp,sp,8
   1c514:	f800283a 	ret

0001c518 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1c518:	defffa04 	addi	sp,sp,-24
   1c51c:	df000515 	stw	fp,20(sp)
   1c520:	df000504 	addi	fp,sp,20
   1c524:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c528:	0005303a 	rdctl	r2,status
   1c52c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c530:	e0fffd17 	ldw	r3,-12(fp)
   1c534:	00bfff84 	movi	r2,-2
   1c538:	1884703a 	and	r2,r3,r2
   1c53c:	1001703a 	wrctl	status,r2
  
  return context;
   1c540:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1c544:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   1c548:	e0bfff17 	ldw	r2,-4(fp)
   1c54c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1c550:	e0bffc17 	ldw	r2,-16(fp)
   1c554:	10c00017 	ldw	r3,0(r2)
   1c558:	e0bffc17 	ldw	r2,-16(fp)
   1c55c:	10800117 	ldw	r2,4(r2)
   1c560:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   1c564:	e0bffc17 	ldw	r2,-16(fp)
   1c568:	10c00117 	ldw	r3,4(r2)
   1c56c:	e0bffc17 	ldw	r2,-16(fp)
   1c570:	10800017 	ldw	r2,0(r2)
   1c574:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1c578:	e0fffc17 	ldw	r3,-16(fp)
   1c57c:	e0bffc17 	ldw	r2,-16(fp)
   1c580:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   1c584:	e0fffc17 	ldw	r3,-16(fp)
   1c588:	e0bffc17 	ldw	r2,-16(fp)
   1c58c:	18800015 	stw	r2,0(r3)
   1c590:	e0bffe17 	ldw	r2,-8(fp)
   1c594:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c598:	e0bffb17 	ldw	r2,-20(fp)
   1c59c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1c5a0:	e037883a 	mov	sp,fp
   1c5a4:	df000017 	ldw	fp,0(sp)
   1c5a8:	dec00104 	addi	sp,sp,4
   1c5ac:	f800283a 	ret

0001c5b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1c5b0:	defffb04 	addi	sp,sp,-20
   1c5b4:	dfc00415 	stw	ra,16(sp)
   1c5b8:	df000315 	stw	fp,12(sp)
   1c5bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1c5c0:	d0a00e17 	ldw	r2,-32712(gp)
   1c5c4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1c5c8:	d0a02317 	ldw	r2,-32628(gp)
   1c5cc:	10800044 	addi	r2,r2,1
   1c5d0:	d0a02315 	stw	r2,-32628(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c5d4:	00003106 	br	1c69c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   1c5d8:	e0bffe17 	ldw	r2,-8(fp)
   1c5dc:	10800017 	ldw	r2,0(r2)
   1c5e0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1c5e4:	e0bffe17 	ldw	r2,-8(fp)
   1c5e8:	10800403 	ldbu	r2,16(r2)
   1c5ec:	10803fcc 	andi	r2,r2,255
   1c5f0:	1005003a 	cmpeq	r2,r2,zero
   1c5f4:	1000051e 	bne	r2,zero,1c60c <alt_tick+0x5c>
   1c5f8:	d0a02317 	ldw	r2,-32628(gp)
   1c5fc:	1004c03a 	cmpne	r2,r2,zero
   1c600:	1000021e 	bne	r2,zero,1c60c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   1c604:	e0bffe17 	ldw	r2,-8(fp)
   1c608:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1c60c:	e0bffe17 	ldw	r2,-8(fp)
   1c610:	10c00217 	ldw	r3,8(r2)
   1c614:	d0a02317 	ldw	r2,-32628(gp)
   1c618:	10c01e36 	bltu	r2,r3,1c694 <alt_tick+0xe4>
   1c61c:	e0bffe17 	ldw	r2,-8(fp)
   1c620:	10800403 	ldbu	r2,16(r2)
   1c624:	10803fcc 	andi	r2,r2,255
   1c628:	1004c03a 	cmpne	r2,r2,zero
   1c62c:	1000191e 	bne	r2,zero,1c694 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   1c630:	e0bffe17 	ldw	r2,-8(fp)
   1c634:	10c00317 	ldw	r3,12(r2)
   1c638:	e0bffe17 	ldw	r2,-8(fp)
   1c63c:	11000517 	ldw	r4,20(r2)
   1c640:	183ee83a 	callr	r3
   1c644:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1c648:	e0bffd17 	ldw	r2,-12(fp)
   1c64c:	1004c03a 	cmpne	r2,r2,zero
   1c650:	1000031e 	bne	r2,zero,1c660 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   1c654:	e13ffe17 	ldw	r4,-8(fp)
   1c658:	001c5180 	call	1c518 <alt_alarm_stop>
   1c65c:	00000d06 	br	1c694 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   1c660:	e0bffe17 	ldw	r2,-8(fp)
   1c664:	10c00217 	ldw	r3,8(r2)
   1c668:	e0bffd17 	ldw	r2,-12(fp)
   1c66c:	1887883a 	add	r3,r3,r2
   1c670:	e0bffe17 	ldw	r2,-8(fp)
   1c674:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1c678:	e0bffe17 	ldw	r2,-8(fp)
   1c67c:	10c00217 	ldw	r3,8(r2)
   1c680:	d0a02317 	ldw	r2,-32628(gp)
   1c684:	1880032e 	bgeu	r3,r2,1c694 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   1c688:	e0fffe17 	ldw	r3,-8(fp)
   1c68c:	00800044 	movi	r2,1
   1c690:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   1c694:	e0bfff17 	ldw	r2,-4(fp)
   1c698:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c69c:	d0e00e04 	addi	r3,gp,-32712
   1c6a0:	e0bffe17 	ldw	r2,-8(fp)
   1c6a4:	10ffcc1e 	bne	r2,r3,1c5d8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1c6a8:	e037883a 	mov	sp,fp
   1c6ac:	dfc00117 	ldw	ra,4(sp)
   1c6b0:	df000017 	ldw	fp,0(sp)
   1c6b4:	dec00204 	addi	sp,sp,8
   1c6b8:	f800283a 	ret

0001c6bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1c6bc:	deffff04 	addi	sp,sp,-4
   1c6c0:	df000015 	stw	fp,0(sp)
   1c6c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1c6c8:	000170fa 	wrctl	ienable,zero
}
   1c6cc:	e037883a 	mov	sp,fp
   1c6d0:	df000017 	ldw	fp,0(sp)
   1c6d4:	dec00104 	addi	sp,sp,4
   1c6d8:	f800283a 	ret

0001c6dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1c6dc:	defff904 	addi	sp,sp,-28
   1c6e0:	dfc00615 	stw	ra,24(sp)
   1c6e4:	df000515 	stw	fp,20(sp)
   1c6e8:	df000504 	addi	fp,sp,20
   1c6ec:	e13ffd15 	stw	r4,-12(fp)
   1c6f0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1c6f4:	e0bffe17 	ldw	r2,-8(fp)
   1c6f8:	10800017 	ldw	r2,0(r2)
   1c6fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1c700:	e13ffd17 	ldw	r4,-12(fp)
   1c704:	00107c00 	call	107c0 <strlen>
   1c708:	10800044 	addi	r2,r2,1
   1c70c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c710:	00000d06 	br	1c748 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1c714:	e0bffc17 	ldw	r2,-16(fp)
   1c718:	11000217 	ldw	r4,8(r2)
   1c71c:	e1bffb17 	ldw	r6,-20(fp)
   1c720:	e17ffd17 	ldw	r5,-12(fp)
   1c724:	001ca240 	call	1ca24 <memcmp>
   1c728:	1004c03a 	cmpne	r2,r2,zero
   1c72c:	1000031e 	bne	r2,zero,1c73c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1c730:	e0bffc17 	ldw	r2,-16(fp)
   1c734:	e0bfff15 	stw	r2,-4(fp)
   1c738:	00000706 	br	1c758 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1c73c:	e0bffc17 	ldw	r2,-16(fp)
   1c740:	10800017 	ldw	r2,0(r2)
   1c744:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c748:	e0fffe17 	ldw	r3,-8(fp)
   1c74c:	e0bffc17 	ldw	r2,-16(fp)
   1c750:	10fff01e 	bne	r2,r3,1c714 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1c754:	e03fff15 	stw	zero,-4(fp)
   1c758:	e0bfff17 	ldw	r2,-4(fp)
}
   1c75c:	e037883a 	mov	sp,fp
   1c760:	dfc00117 	ldw	ra,4(sp)
   1c764:	df000017 	ldw	fp,0(sp)
   1c768:	dec00204 	addi	sp,sp,8
   1c76c:	f800283a 	ret

0001c770 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1c770:	defffa04 	addi	sp,sp,-24
   1c774:	dfc00515 	stw	ra,20(sp)
   1c778:	df000415 	stw	fp,16(sp)
   1c77c:	df000404 	addi	fp,sp,16
   1c780:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1c784:	008000f4 	movhi	r2,3
   1c788:	10a7a404 	addi	r2,r2,-24944
   1c78c:	10800017 	ldw	r2,0(r2)
   1c790:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c794:	00003306 	br	1c864 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   1c798:	e0bffd17 	ldw	r2,-12(fp)
   1c79c:	11000217 	ldw	r4,8(r2)
   1c7a0:	00107c00 	call	107c0 <strlen>
   1c7a4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   1c7a8:	e0bffd17 	ldw	r2,-12(fp)
   1c7ac:	10c00217 	ldw	r3,8(r2)
   1c7b0:	e0bffc17 	ldw	r2,-16(fp)
   1c7b4:	1885883a 	add	r2,r3,r2
   1c7b8:	10bfffc4 	addi	r2,r2,-1
   1c7bc:	10800003 	ldbu	r2,0(r2)
   1c7c0:	10803fcc 	andi	r2,r2,255
   1c7c4:	1080201c 	xori	r2,r2,128
   1c7c8:	10bfe004 	addi	r2,r2,-128
   1c7cc:	10800bd8 	cmpnei	r2,r2,47
   1c7d0:	1000031e 	bne	r2,zero,1c7e0 <alt_find_file+0x70>
    {
      len -= 1;
   1c7d4:	e0bffc17 	ldw	r2,-16(fp)
   1c7d8:	10bfffc4 	addi	r2,r2,-1
   1c7dc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1c7e0:	e0bffc17 	ldw	r2,-16(fp)
   1c7e4:	1007883a 	mov	r3,r2
   1c7e8:	e0bffe17 	ldw	r2,-8(fp)
   1c7ec:	1885883a 	add	r2,r3,r2
   1c7f0:	10800003 	ldbu	r2,0(r2)
   1c7f4:	10803fcc 	andi	r2,r2,255
   1c7f8:	1080201c 	xori	r2,r2,128
   1c7fc:	10bfe004 	addi	r2,r2,-128
   1c800:	10800be0 	cmpeqi	r2,r2,47
   1c804:	10000a1e 	bne	r2,zero,1c830 <alt_find_file+0xc0>
   1c808:	e0bffc17 	ldw	r2,-16(fp)
   1c80c:	1007883a 	mov	r3,r2
   1c810:	e0bffe17 	ldw	r2,-8(fp)
   1c814:	1885883a 	add	r2,r3,r2
   1c818:	10800003 	ldbu	r2,0(r2)
   1c81c:	10803fcc 	andi	r2,r2,255
   1c820:	1080201c 	xori	r2,r2,128
   1c824:	10bfe004 	addi	r2,r2,-128
   1c828:	1004c03a 	cmpne	r2,r2,zero
   1c82c:	10000a1e 	bne	r2,zero,1c858 <alt_find_file+0xe8>
   1c830:	e0bffd17 	ldw	r2,-12(fp)
   1c834:	11000217 	ldw	r4,8(r2)
   1c838:	e1bffc17 	ldw	r6,-16(fp)
   1c83c:	e17ffe17 	ldw	r5,-8(fp)
   1c840:	001ca240 	call	1ca24 <memcmp>
   1c844:	1004c03a 	cmpne	r2,r2,zero
   1c848:	1000031e 	bne	r2,zero,1c858 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1c84c:	e0bffd17 	ldw	r2,-12(fp)
   1c850:	e0bfff15 	stw	r2,-4(fp)
   1c854:	00000806 	br	1c878 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   1c858:	e0bffd17 	ldw	r2,-12(fp)
   1c85c:	10800017 	ldw	r2,0(r2)
   1c860:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c864:	00c000f4 	movhi	r3,3
   1c868:	18e7a404 	addi	r3,r3,-24944
   1c86c:	e0bffd17 	ldw	r2,-12(fp)
   1c870:	10ffc91e 	bne	r2,r3,1c798 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1c874:	e03fff15 	stw	zero,-4(fp)
   1c878:	e0bfff17 	ldw	r2,-4(fp)
}
   1c87c:	e037883a 	mov	sp,fp
   1c880:	dfc00117 	ldw	ra,4(sp)
   1c884:	df000017 	ldw	fp,0(sp)
   1c888:	dec00204 	addi	sp,sp,8
   1c88c:	f800283a 	ret

0001c890 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1c890:	defffc04 	addi	sp,sp,-16
   1c894:	df000315 	stw	fp,12(sp)
   1c898:	df000304 	addi	fp,sp,12
   1c89c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1c8a0:	00bffa04 	movi	r2,-24
   1c8a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c8a8:	e03ffe15 	stw	zero,-8(fp)
   1c8ac:	00001e06 	br	1c928 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   1c8b0:	e0bffe17 	ldw	r2,-8(fp)
   1c8b4:	00c000f4 	movhi	r3,3
   1c8b8:	18e32604 	addi	r3,r3,-29544
   1c8bc:	10800324 	muli	r2,r2,12
   1c8c0:	10c5883a 	add	r2,r2,r3
   1c8c4:	10800017 	ldw	r2,0(r2)
   1c8c8:	1004c03a 	cmpne	r2,r2,zero
   1c8cc:	1000131e 	bne	r2,zero,1c91c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   1c8d0:	e0bffe17 	ldw	r2,-8(fp)
   1c8d4:	00c000f4 	movhi	r3,3
   1c8d8:	18e32604 	addi	r3,r3,-29544
   1c8dc:	10800324 	muli	r2,r2,12
   1c8e0:	10c7883a 	add	r3,r2,r3
   1c8e4:	e0bfff17 	ldw	r2,-4(fp)
   1c8e8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   1c8ec:	008000f4 	movhi	r2,3
   1c8f0:	10a7a804 	addi	r2,r2,-24928
   1c8f4:	10c00017 	ldw	r3,0(r2)
   1c8f8:	e0bffe17 	ldw	r2,-8(fp)
   1c8fc:	1880040e 	bge	r3,r2,1c910 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   1c900:	00c000f4 	movhi	r3,3
   1c904:	18e7a804 	addi	r3,r3,-24928
   1c908:	e0bffe17 	ldw	r2,-8(fp)
   1c90c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   1c910:	e0bffe17 	ldw	r2,-8(fp)
   1c914:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1c918:	00000606 	br	1c934 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c91c:	e0bffe17 	ldw	r2,-8(fp)
   1c920:	10800044 	addi	r2,r2,1
   1c924:	e0bffe15 	stw	r2,-8(fp)
   1c928:	e0bffe17 	ldw	r2,-8(fp)
   1c92c:	10800810 	cmplti	r2,r2,32
   1c930:	103fdf1e 	bne	r2,zero,1c8b0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1c934:	e0bffd17 	ldw	r2,-12(fp)
}
   1c938:	e037883a 	mov	sp,fp
   1c93c:	df000017 	ldw	fp,0(sp)
   1c940:	dec00104 	addi	sp,sp,4
   1c944:	f800283a 	ret

0001c948 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1c948:	defffb04 	addi	sp,sp,-20
   1c94c:	df000415 	stw	fp,16(sp)
   1c950:	df000404 	addi	fp,sp,16
   1c954:	e13ffe15 	stw	r4,-8(fp)
   1c958:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1c95c:	e0bfff17 	ldw	r2,-4(fp)
   1c960:	10840070 	cmpltui	r2,r2,4097
   1c964:	1000021e 	bne	r2,zero,1c970 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1c968:	00840004 	movi	r2,4096
   1c96c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1c970:	e0fffe17 	ldw	r3,-8(fp)
   1c974:	e0bfff17 	ldw	r2,-4(fp)
   1c978:	1885883a 	add	r2,r3,r2
   1c97c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c980:	e0bffe17 	ldw	r2,-8(fp)
   1c984:	e0bffd15 	stw	r2,-12(fp)
   1c988:	00000506 	br	1c9a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1c98c:	e0bffd17 	ldw	r2,-12(fp)
   1c990:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c994:	e0bffd17 	ldw	r2,-12(fp)
   1c998:	10800804 	addi	r2,r2,32
   1c99c:	e0bffd15 	stw	r2,-12(fp)
   1c9a0:	e0fffd17 	ldw	r3,-12(fp)
   1c9a4:	e0bffc17 	ldw	r2,-16(fp)
   1c9a8:	18bff836 	bltu	r3,r2,1c98c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1c9ac:	e0bffe17 	ldw	r2,-8(fp)
   1c9b0:	108007cc 	andi	r2,r2,31
   1c9b4:	1005003a 	cmpeq	r2,r2,zero
   1c9b8:	1000021e 	bne	r2,zero,1c9c4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1c9bc:	e0bffd17 	ldw	r2,-12(fp)
   1c9c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1c9c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1c9c8:	e037883a 	mov	sp,fp
   1c9cc:	df000017 	ldw	fp,0(sp)
   1c9d0:	dec00104 	addi	sp,sp,4
   1c9d4:	f800283a 	ret

0001c9d8 <atexit>:
   1c9d8:	200b883a 	mov	r5,r4
   1c9dc:	000d883a 	mov	r6,zero
   1c9e0:	0009883a 	mov	r4,zero
   1c9e4:	000f883a 	mov	r7,zero
   1c9e8:	001ca981 	jmpi	1ca98 <__register_exitproc>

0001c9ec <exit>:
   1c9ec:	defffe04 	addi	sp,sp,-8
   1c9f0:	000b883a 	mov	r5,zero
   1c9f4:	dc000015 	stw	r16,0(sp)
   1c9f8:	dfc00115 	stw	ra,4(sp)
   1c9fc:	2021883a 	mov	r16,r4
   1ca00:	001cbd00 	call	1cbd0 <__call_exitprocs>
   1ca04:	008000f4 	movhi	r2,3
   1ca08:	10a79f04 	addi	r2,r2,-24964
   1ca0c:	11000017 	ldw	r4,0(r2)
   1ca10:	20800f17 	ldw	r2,60(r4)
   1ca14:	10000126 	beq	r2,zero,1ca1c <exit+0x30>
   1ca18:	103ee83a 	callr	r2
   1ca1c:	8009883a 	mov	r4,r16
   1ca20:	001cdc00 	call	1cdc0 <_exit>

0001ca24 <memcmp>:
   1ca24:	00c000c4 	movi	r3,3
   1ca28:	1980032e 	bgeu	r3,r6,1ca38 <memcmp+0x14>
   1ca2c:	2144b03a 	or	r2,r4,r5
   1ca30:	10c4703a 	and	r2,r2,r3
   1ca34:	10000f26 	beq	r2,zero,1ca74 <memcmp+0x50>
   1ca38:	31ffffc4 	addi	r7,r6,-1
   1ca3c:	3000061e 	bne	r6,zero,1ca58 <memcmp+0x34>
   1ca40:	00000a06 	br	1ca6c <memcmp+0x48>
   1ca44:	39ffffc4 	addi	r7,r7,-1
   1ca48:	00bfffc4 	movi	r2,-1
   1ca4c:	21000044 	addi	r4,r4,1
   1ca50:	29400044 	addi	r5,r5,1
   1ca54:	38800526 	beq	r7,r2,1ca6c <memcmp+0x48>
   1ca58:	20c00003 	ldbu	r3,0(r4)
   1ca5c:	28800003 	ldbu	r2,0(r5)
   1ca60:	18bff826 	beq	r3,r2,1ca44 <memcmp+0x20>
   1ca64:	1885c83a 	sub	r2,r3,r2
   1ca68:	f800283a 	ret
   1ca6c:	0005883a 	mov	r2,zero
   1ca70:	f800283a 	ret
   1ca74:	180f883a 	mov	r7,r3
   1ca78:	20c00017 	ldw	r3,0(r4)
   1ca7c:	28800017 	ldw	r2,0(r5)
   1ca80:	18bfed1e 	bne	r3,r2,1ca38 <memcmp+0x14>
   1ca84:	31bfff04 	addi	r6,r6,-4
   1ca88:	21000104 	addi	r4,r4,4
   1ca8c:	29400104 	addi	r5,r5,4
   1ca90:	39bff936 	bltu	r7,r6,1ca78 <memcmp+0x54>
   1ca94:	003fe806 	br	1ca38 <memcmp+0x14>

0001ca98 <__register_exitproc>:
   1ca98:	defffa04 	addi	sp,sp,-24
   1ca9c:	008000f4 	movhi	r2,3
   1caa0:	10a79f04 	addi	r2,r2,-24964
   1caa4:	dc000015 	stw	r16,0(sp)
   1caa8:	14000017 	ldw	r16,0(r2)
   1caac:	dd000415 	stw	r20,16(sp)
   1cab0:	2829883a 	mov	r20,r5
   1cab4:	81405217 	ldw	r5,328(r16)
   1cab8:	dcc00315 	stw	r19,12(sp)
   1cabc:	dc800215 	stw	r18,8(sp)
   1cac0:	dc400115 	stw	r17,4(sp)
   1cac4:	dfc00515 	stw	ra,20(sp)
   1cac8:	2023883a 	mov	r17,r4
   1cacc:	3027883a 	mov	r19,r6
   1cad0:	3825883a 	mov	r18,r7
   1cad4:	28002526 	beq	r5,zero,1cb6c <__register_exitproc+0xd4>
   1cad8:	29000117 	ldw	r4,4(r5)
   1cadc:	008007c4 	movi	r2,31
   1cae0:	11002716 	blt	r2,r4,1cb80 <__register_exitproc+0xe8>
   1cae4:	8800101e 	bne	r17,zero,1cb28 <__register_exitproc+0x90>
   1cae8:	2105883a 	add	r2,r4,r4
   1caec:	1085883a 	add	r2,r2,r2
   1caf0:	20c00044 	addi	r3,r4,1
   1caf4:	1145883a 	add	r2,r2,r5
   1caf8:	0009883a 	mov	r4,zero
   1cafc:	15000215 	stw	r20,8(r2)
   1cb00:	28c00115 	stw	r3,4(r5)
   1cb04:	2005883a 	mov	r2,r4
   1cb08:	dfc00517 	ldw	ra,20(sp)
   1cb0c:	dd000417 	ldw	r20,16(sp)
   1cb10:	dcc00317 	ldw	r19,12(sp)
   1cb14:	dc800217 	ldw	r18,8(sp)
   1cb18:	dc400117 	ldw	r17,4(sp)
   1cb1c:	dc000017 	ldw	r16,0(sp)
   1cb20:	dec00604 	addi	sp,sp,24
   1cb24:	f800283a 	ret
   1cb28:	29802204 	addi	r6,r5,136
   1cb2c:	00800044 	movi	r2,1
   1cb30:	110e983a 	sll	r7,r2,r4
   1cb34:	30c04017 	ldw	r3,256(r6)
   1cb38:	2105883a 	add	r2,r4,r4
   1cb3c:	1085883a 	add	r2,r2,r2
   1cb40:	1185883a 	add	r2,r2,r6
   1cb44:	19c6b03a 	or	r3,r3,r7
   1cb48:	14802015 	stw	r18,128(r2)
   1cb4c:	14c00015 	stw	r19,0(r2)
   1cb50:	00800084 	movi	r2,2
   1cb54:	30c04015 	stw	r3,256(r6)
   1cb58:	88bfe31e 	bne	r17,r2,1cae8 <__register_exitproc+0x50>
   1cb5c:	30804117 	ldw	r2,260(r6)
   1cb60:	11c4b03a 	or	r2,r2,r7
   1cb64:	30804115 	stw	r2,260(r6)
   1cb68:	003fdf06 	br	1cae8 <__register_exitproc+0x50>
   1cb6c:	008000f4 	movhi	r2,3
   1cb70:	10a80c04 	addi	r2,r2,-24528
   1cb74:	100b883a 	mov	r5,r2
   1cb78:	80805215 	stw	r2,328(r16)
   1cb7c:	003fd606 	br	1cad8 <__register_exitproc+0x40>
   1cb80:	00800034 	movhi	r2,0
   1cb84:	10800004 	addi	r2,r2,0
   1cb88:	1000021e 	bne	r2,zero,1cb94 <__register_exitproc+0xfc>
   1cb8c:	013fffc4 	movi	r4,-1
   1cb90:	003fdc06 	br	1cb04 <__register_exitproc+0x6c>
   1cb94:	01006404 	movi	r4,400
   1cb98:	103ee83a 	callr	r2
   1cb9c:	1007883a 	mov	r3,r2
   1cba0:	103ffa26 	beq	r2,zero,1cb8c <__register_exitproc+0xf4>
   1cba4:	80805217 	ldw	r2,328(r16)
   1cba8:	180b883a 	mov	r5,r3
   1cbac:	18000115 	stw	zero,4(r3)
   1cbb0:	18800015 	stw	r2,0(r3)
   1cbb4:	80c05215 	stw	r3,328(r16)
   1cbb8:	18006215 	stw	zero,392(r3)
   1cbbc:	18006315 	stw	zero,396(r3)
   1cbc0:	0009883a 	mov	r4,zero
   1cbc4:	883fc826 	beq	r17,zero,1cae8 <__register_exitproc+0x50>
   1cbc8:	003fd706 	br	1cb28 <__register_exitproc+0x90>

0001cbcc <register_fini>:
   1cbcc:	f800283a 	ret

0001cbd0 <__call_exitprocs>:
   1cbd0:	008000f4 	movhi	r2,3
   1cbd4:	10a79f04 	addi	r2,r2,-24964
   1cbd8:	10800017 	ldw	r2,0(r2)
   1cbdc:	defff304 	addi	sp,sp,-52
   1cbe0:	df000b15 	stw	fp,44(sp)
   1cbe4:	d8800115 	stw	r2,4(sp)
   1cbe8:	00800034 	movhi	r2,0
   1cbec:	10800004 	addi	r2,r2,0
   1cbf0:	1005003a 	cmpeq	r2,r2,zero
   1cbf4:	d8800215 	stw	r2,8(sp)
   1cbf8:	d8800117 	ldw	r2,4(sp)
   1cbfc:	dd400815 	stw	r21,32(sp)
   1cc00:	dd000715 	stw	r20,28(sp)
   1cc04:	10805204 	addi	r2,r2,328
   1cc08:	dfc00c15 	stw	ra,48(sp)
   1cc0c:	ddc00a15 	stw	r23,40(sp)
   1cc10:	dd800915 	stw	r22,36(sp)
   1cc14:	dcc00615 	stw	r19,24(sp)
   1cc18:	dc800515 	stw	r18,20(sp)
   1cc1c:	dc400415 	stw	r17,16(sp)
   1cc20:	dc000315 	stw	r16,12(sp)
   1cc24:	282b883a 	mov	r21,r5
   1cc28:	2039883a 	mov	fp,r4
   1cc2c:	d8800015 	stw	r2,0(sp)
   1cc30:	2829003a 	cmpeq	r20,r5,zero
   1cc34:	d8800117 	ldw	r2,4(sp)
   1cc38:	14405217 	ldw	r17,328(r2)
   1cc3c:	88001026 	beq	r17,zero,1cc80 <__call_exitprocs+0xb0>
   1cc40:	ddc00017 	ldw	r23,0(sp)
   1cc44:	88800117 	ldw	r2,4(r17)
   1cc48:	8c802204 	addi	r18,r17,136
   1cc4c:	143fffc4 	addi	r16,r2,-1
   1cc50:	80000916 	blt	r16,zero,1cc78 <__call_exitprocs+0xa8>
   1cc54:	05bfffc4 	movi	r22,-1
   1cc58:	a000151e 	bne	r20,zero,1ccb0 <__call_exitprocs+0xe0>
   1cc5c:	8409883a 	add	r4,r16,r16
   1cc60:	2105883a 	add	r2,r4,r4
   1cc64:	1485883a 	add	r2,r2,r18
   1cc68:	10c02017 	ldw	r3,128(r2)
   1cc6c:	a8c01126 	beq	r21,r3,1ccb4 <__call_exitprocs+0xe4>
   1cc70:	843fffc4 	addi	r16,r16,-1
   1cc74:	85bff81e 	bne	r16,r22,1cc58 <__call_exitprocs+0x88>
   1cc78:	d8800217 	ldw	r2,8(sp)
   1cc7c:	10003126 	beq	r2,zero,1cd44 <__call_exitprocs+0x174>
   1cc80:	dfc00c17 	ldw	ra,48(sp)
   1cc84:	df000b17 	ldw	fp,44(sp)
   1cc88:	ddc00a17 	ldw	r23,40(sp)
   1cc8c:	dd800917 	ldw	r22,36(sp)
   1cc90:	dd400817 	ldw	r21,32(sp)
   1cc94:	dd000717 	ldw	r20,28(sp)
   1cc98:	dcc00617 	ldw	r19,24(sp)
   1cc9c:	dc800517 	ldw	r18,20(sp)
   1cca0:	dc400417 	ldw	r17,16(sp)
   1cca4:	dc000317 	ldw	r16,12(sp)
   1cca8:	dec00d04 	addi	sp,sp,52
   1ccac:	f800283a 	ret
   1ccb0:	8409883a 	add	r4,r16,r16
   1ccb4:	88c00117 	ldw	r3,4(r17)
   1ccb8:	2105883a 	add	r2,r4,r4
   1ccbc:	1445883a 	add	r2,r2,r17
   1ccc0:	18ffffc4 	addi	r3,r3,-1
   1ccc4:	11800217 	ldw	r6,8(r2)
   1ccc8:	1c001526 	beq	r3,r16,1cd20 <__call_exitprocs+0x150>
   1cccc:	10000215 	stw	zero,8(r2)
   1ccd0:	303fe726 	beq	r6,zero,1cc70 <__call_exitprocs+0xa0>
   1ccd4:	00c00044 	movi	r3,1
   1ccd8:	1c06983a 	sll	r3,r3,r16
   1ccdc:	90804017 	ldw	r2,256(r18)
   1cce0:	8cc00117 	ldw	r19,4(r17)
   1cce4:	1884703a 	and	r2,r3,r2
   1cce8:	10001426 	beq	r2,zero,1cd3c <__call_exitprocs+0x16c>
   1ccec:	90804117 	ldw	r2,260(r18)
   1ccf0:	1884703a 	and	r2,r3,r2
   1ccf4:	10000c1e 	bne	r2,zero,1cd28 <__call_exitprocs+0x158>
   1ccf8:	2105883a 	add	r2,r4,r4
   1ccfc:	1485883a 	add	r2,r2,r18
   1cd00:	11400017 	ldw	r5,0(r2)
   1cd04:	e009883a 	mov	r4,fp
   1cd08:	303ee83a 	callr	r6
   1cd0c:	88800117 	ldw	r2,4(r17)
   1cd10:	98bfc81e 	bne	r19,r2,1cc34 <__call_exitprocs+0x64>
   1cd14:	b8800017 	ldw	r2,0(r23)
   1cd18:	147fd526 	beq	r2,r17,1cc70 <__call_exitprocs+0xa0>
   1cd1c:	003fc506 	br	1cc34 <__call_exitprocs+0x64>
   1cd20:	8c000115 	stw	r16,4(r17)
   1cd24:	003fea06 	br	1ccd0 <__call_exitprocs+0x100>
   1cd28:	2105883a 	add	r2,r4,r4
   1cd2c:	1485883a 	add	r2,r2,r18
   1cd30:	11000017 	ldw	r4,0(r2)
   1cd34:	303ee83a 	callr	r6
   1cd38:	003ff406 	br	1cd0c <__call_exitprocs+0x13c>
   1cd3c:	303ee83a 	callr	r6
   1cd40:	003ff206 	br	1cd0c <__call_exitprocs+0x13c>
   1cd44:	88800117 	ldw	r2,4(r17)
   1cd48:	1000081e 	bne	r2,zero,1cd6c <__call_exitprocs+0x19c>
   1cd4c:	89000017 	ldw	r4,0(r17)
   1cd50:	20000726 	beq	r4,zero,1cd70 <__call_exitprocs+0x1a0>
   1cd54:	b9000015 	stw	r4,0(r23)
   1cd58:	8809883a 	mov	r4,r17
   1cd5c:	00000000 	call	0 <__alt_mem_ins_mem0-0x10000>
   1cd60:	bc400017 	ldw	r17,0(r23)
   1cd64:	883fb71e 	bne	r17,zero,1cc44 <__call_exitprocs+0x74>
   1cd68:	003fc506 	br	1cc80 <__call_exitprocs+0xb0>
   1cd6c:	89000017 	ldw	r4,0(r17)
   1cd70:	882f883a 	mov	r23,r17
   1cd74:	2023883a 	mov	r17,r4
   1cd78:	883fb21e 	bne	r17,zero,1cc44 <__call_exitprocs+0x74>
   1cd7c:	003fc006 	br	1cc80 <__call_exitprocs+0xb0>

0001cd80 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   1cd80:	defffd04 	addi	sp,sp,-12
   1cd84:	df000215 	stw	fp,8(sp)
   1cd88:	df000204 	addi	fp,sp,8
   1cd8c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   1cd90:	e0bfff17 	ldw	r2,-4(fp)
   1cd94:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1cd98:	e0bffe17 	ldw	r2,-8(fp)
   1cd9c:	1005003a 	cmpeq	r2,r2,zero
   1cda0:	1000021e 	bne	r2,zero,1cdac <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1cda4:	002af070 	cmpltui	zero,zero,43969
   1cda8:	00000106 	br	1cdb0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   1cdac:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   1cdb0:	e037883a 	mov	sp,fp
   1cdb4:	df000017 	ldw	fp,0(sp)
   1cdb8:	dec00104 	addi	sp,sp,4
   1cdbc:	f800283a 	ret

0001cdc0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1cdc0:	defffd04 	addi	sp,sp,-12
   1cdc4:	dfc00215 	stw	ra,8(sp)
   1cdc8:	df000115 	stw	fp,4(sp)
   1cdcc:	df000104 	addi	fp,sp,4
   1cdd0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   1cdd4:	e13fff17 	ldw	r4,-4(fp)
   1cdd8:	001cd800 	call	1cd80 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1cddc:	003fff06 	br	1cddc <_exit+0x1c>
   1cde0:	0001cbcc 	andi	zero,zero,1839
