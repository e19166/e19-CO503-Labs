/*
 * 	FIFO queue for shared memory communication between niosII processors
 *
 *  	DATE		: 19-08-2016
 *      AUTHOR	: Isuru Nawinne
*
*	Structure of the FIFO:
*	___________________________________________________________________________
*	| 	full	| 	empty	| 	count		|	|	|	|	|	|	|	|	|
*	| 	?	| 	?		| 	?		|	|	|	|	|	|	|	|	|
*	___________________________________________________________________________
*/


#include "FIFO_1.h"


void WRITE_FIFO_1(int *buffer)
{
	// Wait if the fifo is full
	while(altera_avalon_fifo_read_status(CTRL,0x1)){}

	// Write the data to FIFO
	altera_avalon_write_fifo(MEM_BASE,CTRL,&buffer);

	// Update the write pointer


	// Update "count" in shared mem


	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry

}


void READ_FIFO_1(int *buffer)
{
	// Wait if the fifo is empty
	while(altera_avalon_fifo_read_status(CTRL,0x2)){}

	// Read the data
	altera_avalon_fifo_read_fifo(MEM_BASE,CTRL)

	// Update the read pointer


	// Update "count" in shared mem


	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity

}

//Initialization
void FIFO_1_INIT()
{
	altera_avalon_fifo_init(MEM_BASE,0x000000,2,59);
	/**
	 *
	 * address葉he base address of the FIFO control slave
	 * ienable葉he value to write to the interruptenable register
	 * emptymark葉he value for the almost empty threshold level
	 * fullmark葉he value for the almost full threshold level
	 *
	 * */



}
