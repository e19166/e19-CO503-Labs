
crc.elf:     file format elf32-littlenios2
crc.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000d938 memsz 0x0000d938 flags r-x
    LOAD off    0x0000e958 vaddr 0x0004d958 paddr 0x0004f3b4 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010e10 vaddr 0x00050e10 paddr 0x00050e10 align 2**12
         filesz 0x00000000 memsz 0x000026f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ce30  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000974  0004cfe4  0004cfe4  0000dfe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0004d958  0004f3b4  0000e958  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000026f4  00050e10  00050e10  00010e10  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cd8  00000000  00000000  000103d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001446  00000000  00000000  000110b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000234e8  00000000  00000000  000124f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007b9e  00000000  00000000  000359de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013c11  00000000  00000000  0003d57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000191c  00000000  00000000  00051190  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002182  00000000  00000000  00052aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be98  00000000  00000000  00054c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00060ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00060ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006451c  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006451f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00064522  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00064523  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00064524  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00064528  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006452c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00064530  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00064539  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00064542  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0006454b  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  0006454e  2**0
                  CONTENTS, READONLY
 29 .jdi          000041bd  00000000  00000000  00064581  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003443c  00000000  00000000  0006873e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
0004cfe4 l    d  .rodata	00000000 .rodata
0004d958 l    d  .rwdata	00000000 .rwdata
00050e10 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ci_crc.c
00000000 l    df *ABS*	00000000 crc.c
000402f0 l     F .text	00000094 reflect
00000000 l    df *ABS*	00000000 crc_main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00040ca8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0004d958 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00040fcc l     F .text	00000058 __sprint_r
0004d692 l     O .rodata	00000010 blanks.3452
0004d682 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00043030 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
000431e4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00044be0 l     F .text	00000058 std
00044cec l     F .text	00000008 __fp_lock
00044cf4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0004f380 l     O .rwdata	00000004 charset
0004d6c4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004d80c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00048e80 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0004a6d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004a734 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0004a760 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0004a894 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004a9b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004aa94 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004abf0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004ae1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004f3a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004b0b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004e314 l     O .rwdata	00001060 jtag_uart
0004b1d0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004b410 l     F .text	00000228 altera_avalon_jtag_uart_irq
0004b638 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004bcb4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004c140 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004c564 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004c6a0 l     F .text	000000dc alt_file_locked
0004c904 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
0004699c g     F .text	00000094 _mprec_log10
00046a88 g     F .text	00000088 __any_on
00048194 g     F .text	00000070 _isatty_r
0004d7e4 g     O .rodata	00000028 __mprec_tinytens
0004ac50 g     F .text	0000006c alt_main
00040ea4 g     F .text	000000a0 _puts_r
00053274 g     O .bss	00000100 alt_irq
00048204 g     F .text	00000078 _lseek_r
0004f3b4 g       *ABS*	00000000 __flash_rwdata_start
000499a0 g     F .text	00000088 __eqdf2
00053504 g       *ABS*	00000000 __alt_heap_start
00040e2c g     F .text	00000044 printf
00047c60 g     F .text	00000068 __sseek
00044c48 g     F .text	000000a4 __sinit
00045920 g     F .text	00000084 _setlocale_r
00044d48 g     F .text	00000068 __sfmoreglue
0004acdc g     F .text	00000020 __malloc_unlock
00050e3c g     O .bss	00000004 altera_avalon_timer_ts_freq
00046418 g     F .text	000000e0 memmove
00044d38 g     F .text	00000010 _cleanup
00046b10 g     F .text	000000bc _Balloc
00049ab0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00048120 g     F .text	00000074 _fstat_r
00050e28 g     O .bss	00000004 errno
00050e30 g     O .bss	00000004 alt_argv
00057374 g       *ABS*	00000000 _gp
0004e194 g     O .rwdata	00000180 alt_fd_list
0004cb28 g     F .text	00000094 alt_find_dev
00046378 g     F .text	000000a0 memcpy
00044d2c g     F .text	0000000c _cleanup_r
00049c48 g     F .text	000000f8 __floatsidf
0004c628 g     F .text	00000078 alt_io_redirect
00049bc0 g     F .text	00000088 __ltdf2
0004cfe4 g       *ABS*	00000000 __DTOR_END__
00040f44 g     F .text	00000014 puts
000468ec g     F .text	000000b0 __ratio
0004b850 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00040e70 g     F .text	00000034 _printf_r
00040de4 g     F .text	00000008 __udivsi3
0004a8f4 g     F .text	000000c0 isatty
0004d6f4 g     O .rodata	000000c8 __mprec_tens
000458fc g     F .text	00000008 __locale_charset
0004cd94 g     F .text	00000090 alt_icache_flush
00050e1c g     O .bss	00000004 __malloc_top_pad
0004f37c g     O .rwdata	00000004 __mb_cur_max
00045904 g     F .text	0000000c _localeconv_r
00047208 g     F .text	0000003c __i2b
000452e0 g     F .text	0000049c __sfvwrite_r
00047be8 g     F .text	00000070 _sbrk_r
0004827c g     F .text	00000078 _read_r
0004dd58 g     O .rwdata	0000000c __lc_ctype
0004f39c g     O .rwdata	00000004 alt_max_fd
0004a3d8 g     F .text	00000138 __unpack_d
00047ffc g     F .text	00000110 _fclose_r
00044bac g     F .text	00000034 fflush
00050e20 g     O .bss	00000004 __malloc_max_sbrked_mem
00049310 g     F .text	00000074 __adddf3
000467cc g     F .text	00000120 __b2d
000488d0 g     F .text	000005b0 __umoddi3
0004ab00 g     F .text	000000f0 lseek
0004f378 g     O .rwdata	00000004 _global_impure_ptr
00047584 g     F .text	000005f4 _realloc_r
00053504 g       *ABS*	00000000 __bss_end
0004c46c g     F .text	000000f8 alt_iic_isr_register
0004c9fc g     F .text	0000010c alt_tick
000482f4 g     F .text	000005dc __udivdi3
0004d7bc g     O .rodata	00000028 __mprec_bigtens
00047464 g     F .text	00000120 __s2b
00049e18 g     F .text	00000194 __floatunsidf
000466ec g     F .text	00000060 __mcmp
00044d14 g     F .text	00000018 __fp_lock_all
0004c424 g     F .text	00000048 alt_ic_irq_enabled
0004c964 g     F .text	00000098 alt_alarm_stop
00050e40 g     O .bss	00000004 alt_irq_active
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400ec g     F .exceptions	000000c8 alt_irq_handler
0004e16c g     O .rwdata	00000028 alt_dev_null
0004c070 g     F .text	0000001c alt_dcache_flush_all
000465b8 g     F .text	00000070 __hi0bits
00049d40 g     F .text	000000d8 __fixdfsi
0004f3b4 g       *ABS*	00000000 __ram_rwdata_end
0004f394 g     O .rwdata	00000008 alt_dev_list
0004af98 g     F .text	00000120 write
00040384 g     F .text	000000f8 crcSlow
0004bef4 g     F .text	00000028 alt_timestamp_freq
0004d958 g       *ABS*	00000000 __ram_rodata_end
0004a7c0 g     F .text	000000d4 fstat
00047344 g     F .text	00000120 __pow5mult
00050e10 g     O .bss	00000004 __nlocale_changed
00040dec g     F .text	00000008 __umodsi3
00053504 g       *ABS*	00000000 end
00051274 g     O .bss	00002000 data_buffer_region
0004b350 g     F .text	000000c0 altera_avalon_jtag_uart_init
0004cfe0 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
0004bd24 g     F .text	00000090 alt_avalon_timer_sc_init
0004a044 g     F .text	00000080 __clzsi2
0004ba74 g     F .text	00000240 altera_avalon_jtag_uart_write
00044c38 g     F .text	00000004 __sfp_lock_acquire
00046294 g     F .text	000000e4 memchr
00041024 g     F .text	00001eac ___vfprintf_internal_r
00044fcc g     F .text	00000314 _free_r
00043034 g     F .text	000001b0 __call_exitprocs
00050e14 g     O .bss	00000004 __mlocale_changed
0004f388 g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000003c _start
00050e44 g     O .bss	00000004 _alt_tick_rate
00046ed4 g     F .text	0000014c __lshift
00050e48 g     O .bss	00000004 _alt_nticks
0004acfc g     F .text	00000120 read
0004b14c g     F .text	00000084 alt_sys_init
0004ceac g     F .text	00000134 __register_exitproc
00047020 g     F .text	000001e8 __multiply
0004b6e8 g     F .text	00000074 altera_avalon_jtag_uart_close
0004d958 g       *ABS*	00000000 __ram_rwdata_start
0004cfe4 g       *ABS*	00000000 __ram_rodata_start
00050e4c g     O .bss	00000028 __malloc_current_mallinfo
00046bcc g     F .text	0000017c __d2b
0004b208 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0004ccdc g     F .text	000000b8 alt_get_fd
0004a510 g     F .text	000000c8 __fpcmp_parts_d
00047f8c g     F .text	00000070 _close_r
0004ce38 g     F .text	00000074 memcmp
0004b2b8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00053504 g       *ABS*	00000000 __alt_stack_base
0004b300 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00042ef4 g     F .text	0000013c __swsetup_r
00049748 g     F .text	00000258 __divdf3
0004047c g     F .text	000000c4 crcInit
00044db0 g     F .text	000000f0 __sfp
00046a30 g     F .text	00000058 __copybits
0004dd64 g     O .rwdata	00000408 __malloc_av_
00044c44 g     F .text	00000004 __sinit_lock_release
00049384 g     F .text	000003c4 __muldf3
00047d44 g     F .text	00000060 __sread
000401f0 g     F .text	00000100 crcCI
0004cbbc g     F .text	00000120 alt_find_file
0004c08c g     F .text	000000b4 alt_dev_llist_insert
0004acbc g     F .text	00000020 __malloc_lock
0004aedc g     F .text	000000bc sbrk
000449b0 g     F .text	000001fc _fflush_r
00047ed8 g     F .text	000000b4 _calloc_r
00050e10 g       *ABS*	00000000 __bss_start
000464f8 g     F .text	00000098 memset
00040604 g     F .text	000006a4 main
00050e34 g     O .bss	00000004 alt_envp
00050e24 g     O .bss	00000004 __malloc_max_total_mem
0004b260 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00047c58 g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_heap_limit
0004810c g     F .text	00000014 fclose
0004bdb4 g     F .text	000000a4 alt_timestamp_start
00053374 g     O .bss	00000190 _atexit0
000433fc g     F .text	000015b4 _dtoa_r
00045b54 g     F .text	00000740 _malloc_r
0004f3a0 g     O .rwdata	00000004 alt_errno
00045844 g     F .text	000000b8 _fwalk
00040d24 g     F .text	00000060 __divsi3
0004d818 g     O .rodata	00000014 __thenan_df
00044ea0 g     F .text	0000012c _malloc_trim_r
0004cfe4 g       *ABS*	00000000 __CTOR_END__
00047da4 g     F .text	000000bc strcmp
0004cfe4 g       *ABS*	00000000 __flash_rodata_start
0004cfe4 g       *ABS*	00000000 __DTOR_LIST__
00049a28 g     F .text	00000088 __nedf2
0004b118 g     F .text	00000034 alt_irq_init
0004ae7c g     F .text	00000060 alt_release_fd
0004d82c g     O .rodata	00000100 __clz_tab
00050e18 g     O .bss	00000004 _PathLocale
0004ce24 g     F .text	00000014 atexit
00047e60 g     F .text	00000078 _write_r
000459a4 g     F .text	0000001c setlocale
0004f374 g     O .rwdata	00000004 _impure_ptr
00050e2c g     O .bss	00000004 alt_argc
00050e38 g     O .bss	00000004 altera_avalon_timer_ts_base
0004c204 g     F .text	00000064 _do_dtors
00040540 g     F .text	000000c4 crcFast
00040020 g       .exceptions	00000000 alt_irq_entry
0004674c g     F .text	00000080 __ulp
00047b78 g     F .text	00000040 __isinfd
00044cfc g     F .text	00000018 __fp_unlock_all
0004f38c g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00045910 g     F .text	00000010 localeconv
0004be58 g     F .text	0000009c alt_timestamp
0004c298 g     F .text	00000050 alt_ic_isr_register
0004f3b4 g       *ABS*	00000000 _edata
00053504 g       *ABS*	00000000 _end
00050e74 g     O .bss	00000400 crcTable
000401b4 g       *ABS*	00000000 __ram_exceptions_end
0004b75c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004c384 g     F .text	000000a0 alt_ic_irq_disable
00047cc8 g     F .text	0000007c __swrite
0004f384 g     O .rwdata	00000004 __malloc_trim_threshold
0004cb08 g     F .text	00000020 altera_nios2_qsys_irq_init
00040df4 g     F .text	00000038 exit
0004577c g     F .text	000000c8 _fwalk_reent
00046d48 g     F .text	0000018c __mdiff
00040d84 g     F .text	00000060 __modsi3
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00044c3c g     F .text	00000004 __sfp_lock_release
00047bb8 g     F .text	00000030 __isnand
0004a7a0 g     F .text	00000020 _exit
0004bf1c g     F .text	00000154 alt_alarm_start
00049fac g     F .text	00000098 __muldi3
000459c0 g     F .text	00000194 __smakebuf_r
00040f58 g     F .text	00000074 strlen
0004c77c g     F .text	00000188 open
00049b38 g     F .text	00000088 __gedf2
0004c268 g     F .text	00000030 alt_icache_flush_all
0004f3a8 g     O .rwdata	00000004 alt_priority_mask
0004c2e8 g     F .text	0000009c alt_ic_irq_enable
00042ed0 g     F .text	00000024 __vfprintf_internal
00049290 g     F .text	00000080 __subdf3
00046628 g     F .text	000000c4 __lo0bits
0004f3ac g     O .rwdata	00000008 alt_alarm_list
0004c1a0 g     F .text	00000064 _do_ctors
0004a5d8 g     F .text	000000fc close
0004aa14 g     F .text	00000080 alt_load
0004a0c4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00044c40 g     F .text	00000004 __sinit_lock_acquire
00047244 g     F .text	00000100 __multadd
00046590 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00c00174 	movhi	r3,5
   40134:	18cc9d04 	addi	r3,r3,12916
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00c00174 	movhi	r3,5
   4014c:	18cc9d04 	addi	r3,r3,12916
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b4:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   401b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401bc:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c0:	d69cdd14 	ori	gp,gp,29556
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c4:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401c8:	10838414 	ori	r2,r2,3600

    movhi r3, %hi(__bss_end)
   401cc:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401d0:	18cd4114 	ori	r3,r3,13572

    beq r2, r3, 1f
   401d4:	10c00326 	beq	r2,r3,401e4 <_start+0x30>

0:
    stw zero, (r2)
   401d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e0:	10fffd36 	bltu	r2,r3,401d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e4:	004aa140 	call	4aa14 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401e8:	004ac500 	call	4ac50 <alt_main>

000401ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401ec:	003fff06 	br	401ec <alt_after_alt_main>

000401f0 <crcCI>:
 * n = 6, Read  96 bits data from the custom instruction
 * n = 7, Read 128 bits data from the custom instruction*/
#define CRC_CI_MACRO(n, A)	ALT_CI_CRC_CUSTOM_0(n,A)

unsigned long crcCI(unsigned char * input_data, unsigned long input_data_length)
{
   401f0:	defffb04 	addi	sp,sp,-20
   401f4:	df000415 	stw	fp,16(sp)
   401f8:	df000404 	addi	fp,sp,16
   401fc:	e13ffe15 	stw	r4,-8(fp)
   40200:	e17fff15 	stw	r5,-4(fp)
  unsigned long index;
  /* copy of the data buffer pointer so that it can advance by different widths */
  void * input_data_copy = (void *)input_data;
   40204:	e0bffe17 	ldw	r2,-8(fp)
   40208:	e0bffc15 	stw	r2,-16(fp)

  /* The custom instruction CRC will initialize to the inital remainder value */    
  CRC_CI_MACRO(0,0);
   4020c:	0005883a 	mov	r2,zero
   40210:	1005c032 	custom	0,r2,r2,zero
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
   40214:	e03ffd15 	stw	zero,-12(fp)
   40218:	00000906 	br	40240 <crcCI+0x50>
  {
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
   4021c:	e0bffc17 	ldw	r2,-16(fp)
   40220:	10800017 	ldw	r2,0(r2)
   40224:	1005c0f2 	custom	3,r2,r2,zero
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
   40228:	e0bffc17 	ldw	r2,-16(fp)
   4022c:	10800104 	addi	r2,r2,4
   40230:	e0bffc15 	stw	r2,-16(fp)
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
   40234:	e0bffd17 	ldw	r2,-12(fp)
   40238:	10800104 	addi	r2,r2,4
   4023c:	e0bffd15 	stw	r2,-12(fp)
   40240:	e0ffff17 	ldw	r3,-4(fp)
   40244:	00bfff04 	movi	r2,-4
   40248:	1886703a 	and	r3,r3,r2
   4024c:	e0bffd17 	ldw	r2,-12(fp)
   40250:	10fff236 	bltu	r2,r3,4021c <crcCI+0x2c>
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
  }

  /* Write the remainder of the buffer if it does not end on a word boundary */  
  if((input_data_length & 0x3) == 0x3)  /* 3 bytes left */
   40254:	e0bfff17 	ldw	r2,-4(fp)
   40258:	108000cc 	andi	r2,r2,3
   4025c:	108000d8 	cmpnei	r2,r2,3
   40260:	10000c1e 	bne	r2,zero,40294 <crcCI+0xa4>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);
   40264:	e0bffc17 	ldw	r2,-16(fp)
   40268:	1080000b 	ldhu	r2,0(r2)
   4026c:	10bfffcc 	andi	r2,r2,65535
   40270:	1005c0b2 	custom	2,r2,r2,zero
    input_data_copy += 2;
   40274:	e0bffc17 	ldw	r2,-16(fp)
   40278:	10800084 	addi	r2,r2,2
   4027c:	e0bffc15 	stw	r2,-16(fp)
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);
   40280:	e0bffc17 	ldw	r2,-16(fp)
   40284:	10800003 	ldbu	r2,0(r2)
   40288:	10803fcc 	andi	r2,r2,255
   4028c:	1005c072 	custom	1,r2,r2,zero
   40290:	00001106 	br	402d8 <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x2) /* 2 bytes left */
   40294:	e0bfff17 	ldw	r2,-4(fp)
   40298:	108000cc 	andi	r2,r2,3
   4029c:	10800098 	cmpnei	r2,r2,2
   402a0:	1000051e 	bne	r2,zero,402b8 <crcCI+0xc8>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);    
   402a4:	e0bffc17 	ldw	r2,-16(fp)
   402a8:	1080000b 	ldhu	r2,0(r2)
   402ac:	10bfffcc 	andi	r2,r2,65535
   402b0:	1005c0b2 	custom	2,r2,r2,zero
   402b4:	00000806 	br	402d8 <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x1) /* 1 byte left */
   402b8:	e0bfff17 	ldw	r2,-4(fp)
   402bc:	108000cc 	andi	r2,r2,3
   402c0:	10800058 	cmpnei	r2,r2,1
   402c4:	1000041e 	bne	r2,zero,402d8 <crcCI+0xe8>
  {
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);    
   402c8:	e0bffc17 	ldw	r2,-16(fp)
   402cc:	10800003 	ldbu	r2,0(r2)
   402d0:	10803fcc 	andi	r2,r2,255
   402d4:	1005c072 	custom	1,r2,r2,zero
  
  /* There are 4 registers in the CRC custom instruction.  Since
   * this example uses CRC-32 only the first register must be read
   * in order to receive the full result.
   */
  return CRC_CI_MACRO(4, 0);
   402d8:	0005883a 	mov	r2,zero
   402dc:	1005c132 	custom	4,r2,r2,zero
}
   402e0:	e037883a 	mov	sp,fp
   402e4:	df000017 	ldw	fp,0(sp)
   402e8:	dec00104 	addi	sp,sp,4
   402ec:	f800283a 	ret

000402f0 <reflect>:
 * Returns:   The reflection of the original data.
 *
 *********************************************************************/
static unsigned long
reflect(unsigned long data, unsigned char nBits)
{
   402f0:	defffb04 	addi	sp,sp,-20
   402f4:	df000415 	stw	fp,16(sp)
   402f8:	df000404 	addi	fp,sp,16
   402fc:	e13ffe15 	stw	r4,-8(fp)
   40300:	e17fff05 	stb	r5,-4(fp)
  unsigned long  reflection = 0x00000000;
   40304:	e03ffd15 	stw	zero,-12(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
   40308:	e03ffc05 	stb	zero,-16(fp)
   4030c:	00001506 	br	40364 <reflect+0x74>
  {
    /*
     * If the LSB bit is set, set the reflection of it.
     */
    if (data & 0x01)
   40310:	e0bffe17 	ldw	r2,-8(fp)
   40314:	1080004c 	andi	r2,r2,1
   40318:	10803fcc 	andi	r2,r2,255
   4031c:	1005003a 	cmpeq	r2,r2,zero
   40320:	10000a1e 	bne	r2,zero,4034c <reflect+0x5c>
    {
      reflection |= (1 << ((nBits - 1) - bit));
   40324:	e0ffff03 	ldbu	r3,-4(fp)
   40328:	e0bffc03 	ldbu	r2,-16(fp)
   4032c:	1885c83a 	sub	r2,r3,r2
   40330:	10ffffc4 	addi	r3,r2,-1
   40334:	00800044 	movi	r2,1
   40338:	10c4983a 	sll	r2,r2,r3
   4033c:	1007883a 	mov	r3,r2
   40340:	e0bffd17 	ldw	r2,-12(fp)
   40344:	10c4b03a 	or	r2,r2,r3
   40348:	e0bffd15 	stw	r2,-12(fp)
    }

    data = (data >> 1);
   4034c:	e0bffe17 	ldw	r2,-8(fp)
   40350:	1004d07a 	srli	r2,r2,1
   40354:	e0bffe15 	stw	r2,-8(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
   40358:	e0bffc03 	ldbu	r2,-16(fp)
   4035c:	10800044 	addi	r2,r2,1
   40360:	e0bffc05 	stb	r2,-16(fp)
   40364:	e0fffc03 	ldbu	r3,-16(fp)
   40368:	e0bfff03 	ldbu	r2,-4(fp)
   4036c:	18bfe836 	bltu	r3,r2,40310 <reflect+0x20>
    }

    data = (data >> 1);
  }

  return (reflection);
   40370:	e0bffd17 	ldw	r2,-12(fp)

} /* reflect() */
   40374:	e037883a 	mov	sp,fp
   40378:	df000017 	ldw	fp,0(sp)
   4037c:	dec00104 	addi	sp,sp,4
   40380:	f800283a 	ret

00040384 <crcSlow>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
   40384:	defff904 	addi	sp,sp,-28
   40388:	dfc00615 	stw	ra,24(sp)
   4038c:	df000515 	stw	fp,20(sp)
   40390:	df000504 	addi	fp,sp,20
   40394:	e13ffe15 	stw	r4,-8(fp)
   40398:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
   4039c:	00bfffc4 	movi	r2,-1
   403a0:	e0bffd15 	stw	r2,-12(fp)


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   403a4:	e03ffc15 	stw	zero,-16(fp)
   403a8:	00002806 	br	4044c <crcSlow+0xc8>
    {
        /*
         * Bring the next byte into the remainder.
         */
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
   403ac:	e0bffc17 	ldw	r2,-16(fp)
   403b0:	1007883a 	mov	r3,r2
   403b4:	e0bffe17 	ldw	r2,-8(fp)
   403b8:	1885883a 	add	r2,r3,r2
   403bc:	10800003 	ldbu	r2,0(r2)
   403c0:	11003fcc 	andi	r4,r2,255
   403c4:	01400204 	movi	r5,8
   403c8:	00402f00 	call	402f0 <reflect>
   403cc:	10803fcc 	andi	r2,r2,255
   403d0:	1004963a 	slli	r2,r2,24
   403d4:	1007883a 	mov	r3,r2
   403d8:	e0bffd17 	ldw	r2,-12(fp)
   403dc:	10c4f03a 	xor	r2,r2,r3
   403e0:	e0bffd15 	stw	r2,-12(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   403e4:	00800204 	movi	r2,8
   403e8:	e0bffb05 	stb	r2,-20(fp)
   403ec:	00001106 	br	40434 <crcSlow+0xb0>
        {
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
   403f0:	e0bffd17 	ldw	r2,-12(fp)
   403f4:	1004403a 	cmpge	r2,r2,zero
   403f8:	1000081e 	bne	r2,zero,4041c <crcSlow+0x98>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
   403fc:	e0bffd17 	ldw	r2,-12(fp)
   40400:	1085883a 	add	r2,r2,r2
   40404:	1007883a 	mov	r3,r2
   40408:	00813074 	movhi	r2,1217
   4040c:	10876dc4 	addi	r2,r2,7607
   40410:	1884f03a 	xor	r2,r3,r2
   40414:	e0bffd15 	stw	r2,-12(fp)
   40418:	00000306 	br	40428 <crcSlow+0xa4>
            }
            else
            {
                remainder = (remainder << 1);
   4041c:	e0bffd17 	ldw	r2,-12(fp)
   40420:	1085883a 	add	r2,r2,r2
   40424:	e0bffd15 	stw	r2,-12(fp)
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   40428:	e0bffb03 	ldbu	r2,-20(fp)
   4042c:	10bfffc4 	addi	r2,r2,-1
   40430:	e0bffb05 	stb	r2,-20(fp)
   40434:	e0bffb03 	ldbu	r2,-20(fp)
   40438:	1004c03a 	cmpne	r2,r2,zero
   4043c:	103fec1e 	bne	r2,zero,403f0 <crcSlow+0x6c>


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   40440:	e0bffc17 	ldw	r2,-16(fp)
   40444:	10800044 	addi	r2,r2,1
   40448:	e0bffc15 	stw	r2,-16(fp)
   4044c:	e0fffc17 	ldw	r3,-16(fp)
   40450:	e0bfff17 	ldw	r2,-4(fp)
   40454:	18bfd516 	blt	r3,r2,403ac <crcSlow+0x28>
    }

    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
   40458:	e13ffd17 	ldw	r4,-12(fp)
   4045c:	01400804 	movi	r5,32
   40460:	00402f00 	call	402f0 <reflect>
   40464:	0084303a 	nor	r2,zero,r2

}   /* crcSlow() */
   40468:	e037883a 	mov	sp,fp
   4046c:	dfc00117 	ldw	ra,4(sp)
   40470:	df000017 	ldw	fp,0(sp)
   40474:	dec00204 	addi	sp,sp,8
   40478:	f800283a 	ret

0004047c <crcInit>:
 * Returns:   None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
   4047c:	defffc04 	addi	sp,sp,-16
   40480:	df000315 	stw	fp,12(sp)
   40484:	df000304 	addi	fp,sp,12


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
   40488:	e03ffe15 	stw	zero,-8(fp)
   4048c:	00002506 	br	40524 <crcInit+0xa8>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
   40490:	e0bffe17 	ldw	r2,-8(fp)
   40494:	1004963a 	slli	r2,r2,24
   40498:	e0bfff15 	stw	r2,-4(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   4049c:	00800204 	movi	r2,8
   404a0:	e0bffd05 	stb	r2,-12(fp)
   404a4:	00001106 	br	404ec <crcInit+0x70>
        {
            /*
             * Try to divide the current data bit.
             */     
            if (remainder & TOPBIT)
   404a8:	e0bfff17 	ldw	r2,-4(fp)
   404ac:	1004403a 	cmpge	r2,r2,zero
   404b0:	1000081e 	bne	r2,zero,404d4 <crcInit+0x58>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
   404b4:	e0bfff17 	ldw	r2,-4(fp)
   404b8:	1085883a 	add	r2,r2,r2
   404bc:	1007883a 	mov	r3,r2
   404c0:	00813074 	movhi	r2,1217
   404c4:	10876dc4 	addi	r2,r2,7607
   404c8:	1884f03a 	xor	r2,r3,r2
   404cc:	e0bfff15 	stw	r2,-4(fp)
   404d0:	00000306 	br	404e0 <crcInit+0x64>
            }
            else
            {
                remainder = (remainder << 1);
   404d4:	e0bfff17 	ldw	r2,-4(fp)
   404d8:	1085883a 	add	r2,r2,r2
   404dc:	e0bfff15 	stw	r2,-4(fp)
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
   404e0:	e0bffd03 	ldbu	r2,-12(fp)
   404e4:	10bfffc4 	addi	r2,r2,-1
   404e8:	e0bffd05 	stb	r2,-12(fp)
   404ec:	e0bffd03 	ldbu	r2,-12(fp)
   404f0:	1004c03a 	cmpne	r2,r2,zero
   404f4:	103fec1e 	bne	r2,zero,404a8 <crcInit+0x2c>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
   404f8:	e0bffe17 	ldw	r2,-8(fp)
   404fc:	00c00174 	movhi	r3,5
   40500:	18c39d04 	addi	r3,r3,3700
   40504:	1085883a 	add	r2,r2,r2
   40508:	1085883a 	add	r2,r2,r2
   4050c:	10c7883a 	add	r3,r2,r3
   40510:	e0bfff17 	ldw	r2,-4(fp)
   40514:	18800015 	stw	r2,0(r3)


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
   40518:	e0bffe17 	ldw	r2,-8(fp)
   4051c:	10800044 	addi	r2,r2,1
   40520:	e0bffe15 	stw	r2,-8(fp)
   40524:	e0bffe17 	ldw	r2,-8(fp)
   40528:	10804010 	cmplti	r2,r2,256
   4052c:	103fd81e 	bne	r2,zero,40490 <crcInit+0x14>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
   40530:	e037883a 	mov	sp,fp
   40534:	df000017 	ldw	fp,0(sp)
   40538:	dec00104 	addi	sp,sp,4
   4053c:	f800283a 	ret

00040540 <crcFast>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
   40540:	defff904 	addi	sp,sp,-28
   40544:	dfc00615 	stw	ra,24(sp)
   40548:	df000515 	stw	fp,20(sp)
   4054c:	df000504 	addi	fp,sp,20
   40550:	e13ffe15 	stw	r4,-8(fp)
   40554:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
   40558:	00bfffc4 	movi	r2,-1
   4055c:	e0bffd15 	stw	r2,-12(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   40560:	e03ffb15 	stw	zero,-20(fp)
   40564:	00001b06 	br	405d4 <crcFast+0x94>
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
   40568:	e0bffb17 	ldw	r2,-20(fp)
   4056c:	1007883a 	mov	r3,r2
   40570:	e0bffe17 	ldw	r2,-8(fp)
   40574:	1885883a 	add	r2,r3,r2
   40578:	10800003 	ldbu	r2,0(r2)
   4057c:	11003fcc 	andi	r4,r2,255
   40580:	01400204 	movi	r5,8
   40584:	00402f00 	call	402f0 <reflect>
   40588:	1007883a 	mov	r3,r2
   4058c:	e0bffd17 	ldw	r2,-12(fp)
   40590:	1004d63a 	srli	r2,r2,24
   40594:	1884f03a 	xor	r2,r3,r2
   40598:	e0bffc05 	stb	r2,-16(fp)
      remainder = crcTable[data] ^ (remainder << 8);
   4059c:	e0bffc03 	ldbu	r2,-16(fp)
   405a0:	00c00174 	movhi	r3,5
   405a4:	18c39d04 	addi	r3,r3,3700
   405a8:	1085883a 	add	r2,r2,r2
   405ac:	1085883a 	add	r2,r2,r2
   405b0:	10c5883a 	add	r2,r2,r3
   405b4:	10c00017 	ldw	r3,0(r2)
   405b8:	e0bffd17 	ldw	r2,-12(fp)
   405bc:	1004923a 	slli	r2,r2,8
   405c0:	1884f03a 	xor	r2,r3,r2
   405c4:	e0bffd15 	stw	r2,-12(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
   405c8:	e0bffb17 	ldw	r2,-20(fp)
   405cc:	10800044 	addi	r2,r2,1
   405d0:	e0bffb15 	stw	r2,-20(fp)
   405d4:	e0fffb17 	ldw	r3,-20(fp)
   405d8:	e0bfff17 	ldw	r2,-4(fp)
   405dc:	18bfe216 	blt	r3,r2,40568 <crcFast+0x28>
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
   405e0:	e13ffd17 	ldw	r4,-12(fp)
   405e4:	01400804 	movi	r5,32
   405e8:	00402f00 	call	402f0 <reflect>
   405ec:	0084303a 	nor	r2,zero,r2

}   /* crcFast() */
   405f0:	e037883a 	mov	sp,fp
   405f4:	dfc00117 	ldw	ra,4(sp)
   405f8:	df000017 	ldw	fp,0(sp)
   405fc:	dec00204 	addi	sp,sp,8
   40600:	f800283a 	ret

00040604 <main>:




int main()
{
   40604:	deff9404 	addi	sp,sp,-432
   40608:	dfc06b15 	stw	ra,428(sp)
   4060c:	df006a15 	stw	fp,424(sp)
   40610:	dc006915 	stw	r16,420(sp)
   40614:	df006904 	addi	fp,sp,420
  unsigned long buffer_counter, data_counter;
  unsigned long sw_slow_results[NUMBER_OF_BUFFERS];
  unsigned long sw_fast_results[NUMBER_OF_BUFFERS];
  unsigned long ci_results[NUMBER_OF_BUFFERS];
  unsigned char random_data = 0x5A;
   40618:	00801684 	movi	r2,90
   4061c:	e0bf9d05 	stb	r2,-396(fp)
  alt_u32 sw_slow_timeA, sw_slow_timeB;
  alt_u32 sw_fast_timeA, sw_fast_timeB;
  alt_u32 ci_timeA, ci_timeB;


  printf("+-----------------------------------------------------------+\n");
   40620:	01000174 	movhi	r4,5
   40624:	2133f904 	addi	r4,r4,-12316
   40628:	0040f440 	call	40f44 <puts>
  printf("| Comparison between software and custom instruction CRC32  |\n");
   4062c:	01000174 	movhi	r4,5
   40630:	21340904 	addi	r4,r4,-12252
   40634:	0040f440 	call	40f44 <puts>
  printf("+-----------------------------------------------------------+\n\n\n");
   40638:	01000174 	movhi	r4,5
   4063c:	21341904 	addi	r4,r4,-12188
   40640:	0040f440 	call	40f44 <puts>
  
  printf("System specification\n");
   40644:	01000174 	movhi	r4,5
   40648:	21342904 	addi	r4,r4,-12124
   4064c:	0040f440 	call	40f44 <puts>
  printf("--------------------\n");
   40650:	01000174 	movhi	r4,5
   40654:	21342f04 	addi	r4,r4,-12100
   40658:	0040f440 	call	40f44 <puts>

  printf("System clock speed = %lu MHz\n", (unsigned long)ALT_CPU_FREQ /(unsigned long)1000000);
   4065c:	01000174 	movhi	r4,5
   40660:	21343504 	addi	r4,r4,-12076
   40664:	01400c84 	movi	r5,50
   40668:	0040e2c0 	call	40e2c <printf>
  printf("Number of buffer locations = %d\n", NUMBER_OF_BUFFERS);
   4066c:	01000174 	movhi	r4,5
   40670:	21343d04 	addi	r4,r4,-12044
   40674:	01400804 	movi	r5,32
   40678:	0040e2c0 	call	40e2c <printf>
  printf("Size of each buffer = %d bytes\n\n\n", BUFFER_SIZE);
   4067c:	01000174 	movhi	r4,5
   40680:	21344604 	addi	r4,r4,-12008
   40684:	01404004 	movi	r5,256
   40688:	0040e2c0 	call	40e2c <printf>


  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
   4068c:	01000174 	movhi	r4,5
   40690:	21344f04 	addi	r4,r4,-11972
   40694:	0040f440 	call	40f44 <puts>
  printf("-------------------------------------------------------\n");
   40698:	01000174 	movhi	r4,5
   4069c:	21345d04 	addi	r4,r4,-11916
   406a0:	0040f440 	call	40f44 <puts>
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   406a4:	e03f9f15 	stw	zero,-388(fp)
   406a8:	00001f06 	br	40728 <main+0x124>
  {
    for(data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
   406ac:	e03f9e15 	stw	zero,-392(fp)
   406b0:	00001706 	br	40710 <main+0x10c>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
   406b4:	e0bf9f17 	ldw	r2,-388(fp)
   406b8:	e13f9e17 	ldw	r4,-392(fp)
   406bc:	00c00174 	movhi	r3,5
   406c0:	18c49d04 	addi	r3,r3,4724
   406c4:	1004923a 	slli	r2,r2,8
   406c8:	10c5883a 	add	r2,r2,r3
   406cc:	1107883a 	add	r3,r2,r4
   406d0:	e0bf9d03 	ldbu	r2,-396(fp)
   406d4:	18800005 	stb	r2,0(r3)
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
   406d8:	e0ff9d03 	ldbu	r3,-396(fp)
   406dc:	18803fcc 	andi	r2,r3,255
   406e0:	1004d13a 	srli	r2,r2,4
   406e4:	1806913a 	slli	r3,r3,4
   406e8:	1009883a 	mov	r4,r2
   406ec:	1805883a 	mov	r2,r3
   406f0:	2084b03a 	or	r2,r4,r2
   406f4:	1007883a 	mov	r3,r2
   406f8:	e0bf9e17 	ldw	r2,-392(fp)
   406fc:	1885883a 	add	r2,r3,r2
   40700:	e0bf9d05 	stb	r2,-396(fp)
  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
  {
    for(data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
   40704:	e0bf9e17 	ldw	r2,-392(fp)
   40708:	10800044 	addi	r2,r2,1
   4070c:	e0bf9e15 	stw	r2,-392(fp)
   40710:	e0bf9e17 	ldw	r2,-392(fp)
   40714:	10804030 	cmpltui	r2,r2,256
   40718:	103fe61e 	bne	r2,zero,406b4 <main+0xb0>


  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   4071c:	e0bf9f17 	ldw	r2,-388(fp)
   40720:	10800044 	addi	r2,r2,1
   40724:	e0bf9f15 	stw	r2,-388(fp)
   40728:	e0bf9f17 	ldw	r2,-388(fp)
   4072c:	10800830 	cmpltui	r2,r2,32
   40730:	103fde1e 	bne	r2,zero,406ac <main+0xa8>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
    }
  }
  printf("Initialization completed\n\n\n");
   40734:	01000174 	movhi	r4,5
   40738:	21346b04 	addi	r4,r4,-11860
   4073c:	0040f440 	call	40f44 <puts>


  if(alt_timestamp_start() < 0) // starts the timestamp timer
   40740:	004bdb40 	call	4bdb4 <alt_timestamp_start>
   40744:	1004403a 	cmpge	r2,r2,zero
   40748:	1000051e 	bne	r2,zero,40760 <main+0x15c>
  {
    printf("Please add the high resolution timer to the timestamp timer setting in the syslib properties page.\n");
   4074c:	01000174 	movhi	r4,5
   40750:	21347204 	addi	r4,r4,-11832
   40754:	0040f440 	call	40f44 <puts>
    exit(1);
   40758:	01000044 	movi	r4,1
   4075c:	0040df40 	call	40df4 <exit>
  }


  /* Slow software CRC based on a modulo 2 division implementation */
  printf("Running the software CRC\n");
   40760:	01000174 	movhi	r4,5
   40764:	21348b04 	addi	r4,r4,-11732
   40768:	0040f440 	call	40f44 <puts>
  printf("------------------------\n");
   4076c:	01000174 	movhi	r4,5
   40770:	21349204 	addi	r4,r4,-11704
   40774:	0040f440 	call	40f44 <puts>
  sw_slow_timeA = alt_timestamp();
   40778:	004be580 	call	4be58 <alt_timestamp>
   4077c:	e0bf9c15 	stw	r2,-400(fp)

  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40780:	e03f9f15 	stw	zero,-388(fp)
   40784:	00001406 	br	407d8 <main+0x1d4>
  {
    sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
   40788:	e43f9f17 	ldw	r16,-388(fp)
   4078c:	e0bf9f17 	ldw	r2,-388(fp)
   40790:	1004923a 	slli	r2,r2,8
   40794:	1007883a 	mov	r3,r2
   40798:	00800174 	movhi	r2,5
   4079c:	10849d04 	addi	r2,r2,4724
   407a0:	1885883a 	add	r2,r3,r2
   407a4:	1009883a 	mov	r4,r2
   407a8:	01404004 	movi	r5,256
   407ac:	00403840 	call	40384 <crcSlow>
   407b0:	1007883a 	mov	r3,r2
   407b4:	8405883a 	add	r2,r16,r16
   407b8:	1085883a 	add	r2,r2,r2
   407bc:	e13f9704 	addi	r4,fp,-420
   407c0:	1105883a 	add	r2,r2,r4
   407c4:	10800904 	addi	r2,r2,36
   407c8:	10c00015 	stw	r3,0(r2)
  /* Slow software CRC based on a modulo 2 division implementation */
  printf("Running the software CRC\n");
  printf("------------------------\n");
  sw_slow_timeA = alt_timestamp();

  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   407cc:	e0bf9f17 	ldw	r2,-388(fp)
   407d0:	10800044 	addi	r2,r2,1
   407d4:	e0bf9f15 	stw	r2,-388(fp)
   407d8:	e0bf9f17 	ldw	r2,-388(fp)
   407dc:	10800830 	cmpltui	r2,r2,32
   407e0:	103fe91e 	bne	r2,zero,40788 <main+0x184>
  {
    sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
 sw_slow_timeB = alt_timestamp();
   407e4:	004be580 	call	4be58 <alt_timestamp>
   407e8:	e0bf9b15 	stw	r2,-404(fp)

  printf("Completed\n\n\n");
   407ec:	01000174 	movhi	r4,5
   407f0:	21349904 	addi	r4,r4,-11676
   407f4:	0040f440 	call	40f44 <puts>


  /* Fast software CRC based on a lookup table implementation */
  crcInit();
   407f8:	004047c0 	call	4047c <crcInit>
  printf("Running the optimized software CRC\n");
   407fc:	01000174 	movhi	r4,5
   40800:	21349c04 	addi	r4,r4,-11664
   40804:	0040f440 	call	40f44 <puts>
  printf("----------------------------------\n");
   40808:	01000174 	movhi	r4,5
   4080c:	2134a504 	addi	r4,r4,-11628
   40810:	0040f440 	call	40f44 <puts>
  sw_fast_timeA = alt_timestamp();
   40814:	004be580 	call	4be58 <alt_timestamp>
   40818:	e0bf9a15 	stw	r2,-408(fp)
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   4081c:	e03f9f15 	stw	zero,-388(fp)
   40820:	00001406 	br	40874 <main+0x270>
  {
    sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
   40824:	e43f9f17 	ldw	r16,-388(fp)
   40828:	e0bf9f17 	ldw	r2,-388(fp)
   4082c:	1004923a 	slli	r2,r2,8
   40830:	1007883a 	mov	r3,r2
   40834:	00800174 	movhi	r2,5
   40838:	10849d04 	addi	r2,r2,4724
   4083c:	1885883a 	add	r2,r3,r2
   40840:	1009883a 	mov	r4,r2
   40844:	01404004 	movi	r5,256
   40848:	00405400 	call	40540 <crcFast>
   4084c:	1007883a 	mov	r3,r2
   40850:	8405883a 	add	r2,r16,r16
   40854:	1085883a 	add	r2,r2,r2
   40858:	e17f9704 	addi	r5,fp,-420
   4085c:	1145883a 	add	r2,r2,r5
   40860:	10802904 	addi	r2,r2,164
   40864:	10c00015 	stw	r3,0(r2)
  /* Fast software CRC based on a lookup table implementation */
  crcInit();
  printf("Running the optimized software CRC\n");
  printf("----------------------------------\n");
  sw_fast_timeA = alt_timestamp();
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40868:	e0bf9f17 	ldw	r2,-388(fp)
   4086c:	10800044 	addi	r2,r2,1
   40870:	e0bf9f15 	stw	r2,-388(fp)
   40874:	e0bf9f17 	ldw	r2,-388(fp)
   40878:	10800830 	cmpltui	r2,r2,32
   4087c:	103fe91e 	bne	r2,zero,40824 <main+0x220>
  {
    sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
 sw_fast_timeB = alt_timestamp();
   40880:	004be580 	call	4be58 <alt_timestamp>
   40884:	e0bf9915 	stw	r2,-412(fp)
  printf("Completed\n\n\n");
   40888:	01000174 	movhi	r4,5
   4088c:	21349904 	addi	r4,r4,-11676
   40890:	0040f440 	call	40f44 <puts>


  /* Custom instruction CRC */
  printf("Running the custom instruction CRC\n");
   40894:	01000174 	movhi	r4,5
   40898:	2134ae04 	addi	r4,r4,-11592
   4089c:	0040f440 	call	40f44 <puts>
  printf("----------------------------------\n");
   408a0:	01000174 	movhi	r4,5
   408a4:	2134a504 	addi	r4,r4,-11628
   408a8:	0040f440 	call	40f44 <puts>
 ci_timeA = alt_timestamp();
   408ac:	004be580 	call	4be58 <alt_timestamp>
   408b0:	e0bf9815 	stw	r2,-416(fp)
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   408b4:	e03f9f15 	stw	zero,-388(fp)
   408b8:	00001406 	br	4090c <main+0x308>
  {
    ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
   408bc:	e43f9f17 	ldw	r16,-388(fp)
   408c0:	e0bf9f17 	ldw	r2,-388(fp)
   408c4:	1004923a 	slli	r2,r2,8
   408c8:	1007883a 	mov	r3,r2
   408cc:	00800174 	movhi	r2,5
   408d0:	10849d04 	addi	r2,r2,4724
   408d4:	1885883a 	add	r2,r3,r2
   408d8:	1009883a 	mov	r4,r2
   408dc:	01404004 	movi	r5,256
   408e0:	00401f00 	call	401f0 <crcCI>
   408e4:	1007883a 	mov	r3,r2
   408e8:	8405883a 	add	r2,r16,r16
   408ec:	1085883a 	add	r2,r2,r2
   408f0:	e13f9704 	addi	r4,fp,-420
   408f4:	1105883a 	add	r2,r2,r4
   408f8:	10804904 	addi	r2,r2,292
   408fc:	10c00015 	stw	r3,0(r2)

  /* Custom instruction CRC */
  printf("Running the custom instruction CRC\n");
  printf("----------------------------------\n");
 ci_timeA = alt_timestamp();
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40900:	e0bf9f17 	ldw	r2,-388(fp)
   40904:	10800044 	addi	r2,r2,1
   40908:	e0bf9f15 	stw	r2,-388(fp)
   4090c:	e0bf9f17 	ldw	r2,-388(fp)
   40910:	10800830 	cmpltui	r2,r2,32
   40914:	103fe91e 	bne	r2,zero,408bc <main+0x2b8>
  {
    ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
  ci_timeB = alt_timestamp();
   40918:	004be580 	call	4be58 <alt_timestamp>
   4091c:	e0bf9715 	stw	r2,-420(fp)
  printf("Completed\n\n\n");
   40920:	01000174 	movhi	r4,5
   40924:	21349904 	addi	r4,r4,-11676
   40928:	0040f440 	call	40f44 <puts>

  /* Validation of results */  
  printf("Validating the CRC results from all implementations\n");
   4092c:	01000174 	movhi	r4,5
   40930:	2134b704 	addi	r4,r4,-11556
   40934:	0040f440 	call	40f44 <puts>
  printf("----------------------------------------------------\n");
   40938:	01000174 	movhi	r4,5
   4093c:	2134c404 	addi	r4,r4,-11504
   40940:	0040f440 	call	40f44 <puts>
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40944:	e03f9f15 	stw	zero,-388(fp)
   40948:	00004006 	br	40a4c <main+0x448>
  {
    /* Test every combination of results to make sure they are consistant */
    if((sw_slow_results[buffer_counter] != ci_results[buffer_counter]) | 
   4094c:	e0bf9f17 	ldw	r2,-388(fp)
   40950:	1085883a 	add	r2,r2,r2
   40954:	1085883a 	add	r2,r2,r2
   40958:	e17f9704 	addi	r5,fp,-420
   4095c:	1145883a 	add	r2,r2,r5
   40960:	10800904 	addi	r2,r2,36
   40964:	10c00017 	ldw	r3,0(r2)
   40968:	e0bf9f17 	ldw	r2,-388(fp)
   4096c:	1085883a 	add	r2,r2,r2
   40970:	1085883a 	add	r2,r2,r2
   40974:	e13f9704 	addi	r4,fp,-420
   40978:	1105883a 	add	r2,r2,r4
   4097c:	10804904 	addi	r2,r2,292
   40980:	10800017 	ldw	r2,0(r2)
   40984:	1884c03a 	cmpne	r2,r3,r2
   40988:	1009883a 	mov	r4,r2
   4098c:	e0bf9f17 	ldw	r2,-388(fp)
   40990:	1085883a 	add	r2,r2,r2
   40994:	1085883a 	add	r2,r2,r2
   40998:	e17f9704 	addi	r5,fp,-420
   4099c:	1145883a 	add	r2,r2,r5
   409a0:	10802904 	addi	r2,r2,164
   409a4:	10c00017 	ldw	r3,0(r2)
   409a8:	e0bf9f17 	ldw	r2,-388(fp)
   409ac:	1085883a 	add	r2,r2,r2
   409b0:	1085883a 	add	r2,r2,r2
   409b4:	e17f9704 	addi	r5,fp,-420
   409b8:	1145883a 	add	r2,r2,r5
   409bc:	10804904 	addi	r2,r2,292
   409c0:	10800017 	ldw	r2,0(r2)
   409c4:	1884c03a 	cmpne	r2,r3,r2
   409c8:	2084b03a 	or	r2,r4,r2
   409cc:	10803fcc 	andi	r2,r2,255
   409d0:	1005003a 	cmpeq	r2,r2,zero
   409d4:	10001a1e 	bne	r2,zero,40a40 <main+0x43c>
       (sw_fast_results[buffer_counter] != ci_results[buffer_counter]))
    {
      printf("FAILURE!  Software CRC = 0x%lx, Optimized Software CRC = 0x%lx, Custom Instruction CRC = 0x%lx,\n",
   409d8:	e0bf9f17 	ldw	r2,-388(fp)
   409dc:	1085883a 	add	r2,r2,r2
   409e0:	1085883a 	add	r2,r2,r2
   409e4:	e0ff9704 	addi	r3,fp,-420
   409e8:	10c5883a 	add	r2,r2,r3
   409ec:	10800904 	addi	r2,r2,36
   409f0:	11400017 	ldw	r5,0(r2)
   409f4:	e0bf9f17 	ldw	r2,-388(fp)
   409f8:	1085883a 	add	r2,r2,r2
   409fc:	1085883a 	add	r2,r2,r2
   40a00:	e13f9704 	addi	r4,fp,-420
   40a04:	1105883a 	add	r2,r2,r4
   40a08:	10802904 	addi	r2,r2,164
   40a0c:	11800017 	ldw	r6,0(r2)
   40a10:	e0bf9f17 	ldw	r2,-388(fp)
   40a14:	1085883a 	add	r2,r2,r2
   40a18:	1085883a 	add	r2,r2,r2
   40a1c:	e0ff9704 	addi	r3,fp,-420
   40a20:	10c5883a 	add	r2,r2,r3
   40a24:	10804904 	addi	r2,r2,292
   40a28:	11c00017 	ldw	r7,0(r2)
   40a2c:	01000174 	movhi	r4,5
   40a30:	2134d204 	addi	r4,r4,-11448
   40a34:	0040e2c0 	call	40e2c <printf>
      sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);       
      exit(1);     
   40a38:	01000044 	movi	r4,1
   40a3c:	0040df40 	call	40df4 <exit>
  printf("Completed\n\n\n");

  /* Validation of results */  
  printf("Validating the CRC results from all implementations\n");
  printf("----------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
   40a40:	e0bf9f17 	ldw	r2,-388(fp)
   40a44:	10800044 	addi	r2,r2,1
   40a48:	e0bf9f15 	stw	r2,-388(fp)
   40a4c:	e0bf9f17 	ldw	r2,-388(fp)
   40a50:	10800830 	cmpltui	r2,r2,32
   40a54:	103fbd1e 	bne	r2,zero,4094c <main+0x348>
      printf("FAILURE!  Software CRC = 0x%lx, Optimized Software CRC = 0x%lx, Custom Instruction CRC = 0x%lx,\n",
      sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);       
      exit(1);     
    }
  }
  printf("All CRC implementations produced the same results\n\n\n");
   40a58:	01000174 	movhi	r4,5
   40a5c:	2134eb04 	addi	r4,r4,-11348
   40a60:	0040f440 	call	40f44 <puts>


  // Report processing times
  printf("Processing time for each implementation\n");
   40a64:	01000174 	movhi	r4,5
   40a68:	2134f804 	addi	r4,r4,-11296
   40a6c:	0040f440 	call	40f44 <puts>
  printf("---------------------------------------\n");
   40a70:	01000174 	movhi	r4,5
   40a74:	21350204 	addi	r4,r4,-11256
   40a78:	0040f440 	call	40f44 <puts>
  printf("Software CRC = %.2lu ms\n", 1000*((unsigned long)(sw_slow_timeB-sw_slow_timeA))/((unsigned long)alt_timestamp_freq()));
   40a7c:	e0ff9b17 	ldw	r3,-404(fp)
   40a80:	e0bf9c17 	ldw	r2,-400(fp)
   40a84:	1885c83a 	sub	r2,r3,r2
   40a88:	1400fa24 	muli	r16,r2,1000
   40a8c:	004bef40 	call	4bef4 <alt_timestamp_freq>
   40a90:	100b883a 	mov	r5,r2
   40a94:	8009883a 	mov	r4,r16
   40a98:	0040de40 	call	40de4 <__udivsi3>
   40a9c:	100b883a 	mov	r5,r2
   40aa0:	01000174 	movhi	r4,5
   40aa4:	21350c04 	addi	r4,r4,-11216
   40aa8:	0040e2c0 	call	40e2c <printf>
  printf("Optimized software CRC = %.2lu ms\n", 1000*((unsigned long)(sw_fast_timeB-sw_fast_timeA))/((unsigned long)alt_timestamp_freq()));
   40aac:	e0ff9917 	ldw	r3,-412(fp)
   40ab0:	e0bf9a17 	ldw	r2,-408(fp)
   40ab4:	1885c83a 	sub	r2,r3,r2
   40ab8:	1400fa24 	muli	r16,r2,1000
   40abc:	004bef40 	call	4bef4 <alt_timestamp_freq>
   40ac0:	100b883a 	mov	r5,r2
   40ac4:	8009883a 	mov	r4,r16
   40ac8:	0040de40 	call	40de4 <__udivsi3>
   40acc:	100b883a 	mov	r5,r2
   40ad0:	01000174 	movhi	r4,5
   40ad4:	21351304 	addi	r4,r4,-11188
   40ad8:	0040e2c0 	call	40e2c <printf>
  printf("Custom instruction CRC = %.2lu ms\n\n\n", 1000*((unsigned long)(ci_timeB-ci_timeA))/((unsigned long)alt_timestamp_freq()));
   40adc:	e0ff9717 	ldw	r3,-420(fp)
   40ae0:	e0bf9817 	ldw	r2,-416(fp)
   40ae4:	1885c83a 	sub	r2,r3,r2
   40ae8:	1400fa24 	muli	r16,r2,1000
   40aec:	004bef40 	call	4bef4 <alt_timestamp_freq>
   40af0:	100b883a 	mov	r5,r2
   40af4:	8009883a 	mov	r4,r16
   40af8:	0040de40 	call	40de4 <__udivsi3>
   40afc:	100b883a 	mov	r5,r2
   40b00:	01000174 	movhi	r4,5
   40b04:	21351c04 	addi	r4,r4,-11152
   40b08:	0040e2c0 	call	40e2c <printf>

  printf("Processing throughput for each implementation\n"); // throughput = total bits / (time(s) * 1000000)
   40b0c:	01000174 	movhi	r4,5
   40b10:	21352604 	addi	r4,r4,-11112
   40b14:	0040f440 	call	40f44 <puts>
  printf("---------------------------------------------\n");
   40b18:	01000174 	movhi	r4,5
   40b1c:	21353204 	addi	r4,r4,-11064
   40b20:	0040f440 	call	40f44 <puts>
  printf("Software CRC = %.2lu Mbps\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE)/(1000000*(unsigned long)(sw_slow_timeB-sw_slow_timeA)/((unsigned long)alt_timestamp_freq())));
   40b24:	e0ff9b17 	ldw	r3,-404(fp)
   40b28:	e0bf9c17 	ldw	r2,-400(fp)
   40b2c:	1887c83a 	sub	r3,r3,r2
   40b30:	008003f4 	movhi	r2,15
   40b34:	10909004 	addi	r2,r2,16960
   40b38:	18a1383a 	mul	r16,r3,r2
   40b3c:	004bef40 	call	4bef4 <alt_timestamp_freq>
   40b40:	100b883a 	mov	r5,r2
   40b44:	8009883a 	mov	r4,r16
   40b48:	0040de40 	call	40de4 <__udivsi3>
   40b4c:	100b883a 	mov	r5,r2
   40b50:	01000074 	movhi	r4,1
   40b54:	0040de40 	call	40de4 <__udivsi3>
   40b58:	100b883a 	mov	r5,r2
   40b5c:	01000174 	movhi	r4,5
   40b60:	21353e04 	addi	r4,r4,-11016
   40b64:	0040e2c0 	call	40e2c <printf>
  printf("Optimized software CRC = %.2lu Mbps\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE)/(1000000*(unsigned long)(sw_fast_timeB-sw_fast_timeA)/((unsigned long)alt_timestamp_freq())));
   40b68:	e0ff9917 	ldw	r3,-412(fp)
   40b6c:	e0bf9a17 	ldw	r2,-408(fp)
   40b70:	1887c83a 	sub	r3,r3,r2
   40b74:	008003f4 	movhi	r2,15
   40b78:	10909004 	addi	r2,r2,16960
   40b7c:	18a1383a 	mul	r16,r3,r2
   40b80:	004bef40 	call	4bef4 <alt_timestamp_freq>
   40b84:	100b883a 	mov	r5,r2
   40b88:	8009883a 	mov	r4,r16
   40b8c:	0040de40 	call	40de4 <__udivsi3>
   40b90:	100b883a 	mov	r5,r2
   40b94:	01000074 	movhi	r4,1
   40b98:	0040de40 	call	40de4 <__udivsi3>
   40b9c:	100b883a 	mov	r5,r2
   40ba0:	01000174 	movhi	r4,5
   40ba4:	21354504 	addi	r4,r4,-10988
   40ba8:	0040e2c0 	call	40e2c <printf>
  printf("Custom instruction CRC = %.2lu Mbps\n\n\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE)/(1000000*(unsigned long)(ci_timeB-ci_timeA)/((unsigned long)alt_timestamp_freq())));
   40bac:	e0ff9717 	ldw	r3,-420(fp)
   40bb0:	e0bf9817 	ldw	r2,-416(fp)
   40bb4:	1887c83a 	sub	r3,r3,r2
   40bb8:	008003f4 	movhi	r2,15
   40bbc:	10909004 	addi	r2,r2,16960
   40bc0:	18a1383a 	mul	r16,r3,r2
   40bc4:	004bef40 	call	4bef4 <alt_timestamp_freq>
   40bc8:	100b883a 	mov	r5,r2
   40bcc:	8009883a 	mov	r4,r16
   40bd0:	0040de40 	call	40de4 <__udivsi3>
   40bd4:	100b883a 	mov	r5,r2
   40bd8:	01000074 	movhi	r4,1
   40bdc:	0040de40 	call	40de4 <__udivsi3>
   40be0:	100b883a 	mov	r5,r2
   40be4:	01000174 	movhi	r4,5
   40be8:	21354f04 	addi	r4,r4,-10948
   40bec:	0040e2c0 	call	40e2c <printf>

  printf("Speedup ratio\n");
   40bf0:	01000174 	movhi	r4,5
   40bf4:	21355904 	addi	r4,r4,-10908
   40bf8:	0040f440 	call	40f44 <puts>
  printf("-------------\n");
   40bfc:	01000174 	movhi	r4,5
   40c00:	21355d04 	addi	r4,r4,-10892
   40c04:	0040f440 	call	40f44 <puts>
  printf("Custom instruction CRC vs software CRC = %lu\n", ((unsigned long)(sw_slow_timeB-sw_slow_timeA))/((unsigned long)(ci_timeB-ci_timeA)));
   40c08:	e0ff9b17 	ldw	r3,-404(fp)
   40c0c:	e0bf9c17 	ldw	r2,-400(fp)
   40c10:	1889c83a 	sub	r4,r3,r2
   40c14:	e0ff9717 	ldw	r3,-420(fp)
   40c18:	e0bf9817 	ldw	r2,-416(fp)
   40c1c:	188bc83a 	sub	r5,r3,r2
   40c20:	0040de40 	call	40de4 <__udivsi3>
   40c24:	100b883a 	mov	r5,r2
   40c28:	01000174 	movhi	r4,5
   40c2c:	21356104 	addi	r4,r4,-10876
   40c30:	0040e2c0 	call	40e2c <printf>
  printf("Custom instruction CRC vs optimized software CRC = %lu\n", ((unsigned long)(sw_fast_timeB-sw_fast_timeA))/((unsigned long)(ci_timeB-ci_timeA)));
   40c34:	e0ff9917 	ldw	r3,-412(fp)
   40c38:	e0bf9a17 	ldw	r2,-408(fp)
   40c3c:	1889c83a 	sub	r4,r3,r2
   40c40:	e0ff9717 	ldw	r3,-420(fp)
   40c44:	e0bf9817 	ldw	r2,-416(fp)
   40c48:	188bc83a 	sub	r5,r3,r2
   40c4c:	0040de40 	call	40de4 <__udivsi3>
   40c50:	100b883a 	mov	r5,r2
   40c54:	01000174 	movhi	r4,5
   40c58:	21356d04 	addi	r4,r4,-10828
   40c5c:	0040e2c0 	call	40e2c <printf>
  printf("Optimized software CRC vs software CRC= %lu\n", ((unsigned long)(sw_slow_timeB-sw_slow_timeA))/((unsigned long)(sw_fast_timeB-sw_fast_timeA)));
   40c60:	e0ff9b17 	ldw	r3,-404(fp)
   40c64:	e0bf9c17 	ldw	r2,-400(fp)
   40c68:	1889c83a 	sub	r4,r3,r2
   40c6c:	e0ff9917 	ldw	r3,-412(fp)
   40c70:	e0bf9a17 	ldw	r2,-408(fp)
   40c74:	188bc83a 	sub	r5,r3,r2
   40c78:	0040de40 	call	40de4 <__udivsi3>
   40c7c:	100b883a 	mov	r5,r2
   40c80:	01000174 	movhi	r4,5
   40c84:	21357b04 	addi	r4,r4,-10772
   40c88:	0040e2c0 	call	40e2c <printf>
  return 0;
   40c8c:	0005883a 	mov	r2,zero
}
   40c90:	e037883a 	mov	sp,fp
   40c94:	dfc00217 	ldw	ra,8(sp)
   40c98:	df000117 	ldw	fp,4(sp)
   40c9c:	dc000017 	ldw	r16,0(sp)
   40ca0:	dec00304 	addi	sp,sp,12
   40ca4:	f800283a 	ret

00040ca8 <udivmodsi4>:
   40ca8:	29001b2e 	bgeu	r5,r4,40d18 <udivmodsi4+0x70>
   40cac:	28001a16 	blt	r5,zero,40d18 <udivmodsi4+0x70>
   40cb0:	00800044 	movi	r2,1
   40cb4:	0007883a 	mov	r3,zero
   40cb8:	01c007c4 	movi	r7,31
   40cbc:	00000306 	br	40ccc <udivmodsi4+0x24>
   40cc0:	19c01326 	beq	r3,r7,40d10 <udivmodsi4+0x68>
   40cc4:	18c00044 	addi	r3,r3,1
   40cc8:	28000416 	blt	r5,zero,40cdc <udivmodsi4+0x34>
   40ccc:	294b883a 	add	r5,r5,r5
   40cd0:	1085883a 	add	r2,r2,r2
   40cd4:	293ffa36 	bltu	r5,r4,40cc0 <udivmodsi4+0x18>
   40cd8:	10000d26 	beq	r2,zero,40d10 <udivmodsi4+0x68>
   40cdc:	0007883a 	mov	r3,zero
   40ce0:	21400236 	bltu	r4,r5,40cec <udivmodsi4+0x44>
   40ce4:	2149c83a 	sub	r4,r4,r5
   40ce8:	1886b03a 	or	r3,r3,r2
   40cec:	1004d07a 	srli	r2,r2,1
   40cf0:	280ad07a 	srli	r5,r5,1
   40cf4:	103ffa1e 	bne	r2,zero,40ce0 <udivmodsi4+0x38>
   40cf8:	30000226 	beq	r6,zero,40d04 <udivmodsi4+0x5c>
   40cfc:	2005883a 	mov	r2,r4
   40d00:	f800283a 	ret
   40d04:	1809883a 	mov	r4,r3
   40d08:	2005883a 	mov	r2,r4
   40d0c:	f800283a 	ret
   40d10:	0007883a 	mov	r3,zero
   40d14:	003ff806 	br	40cf8 <udivmodsi4+0x50>
   40d18:	00800044 	movi	r2,1
   40d1c:	0007883a 	mov	r3,zero
   40d20:	003fef06 	br	40ce0 <udivmodsi4+0x38>

00040d24 <__divsi3>:
   40d24:	defffe04 	addi	sp,sp,-8
   40d28:	dc000015 	stw	r16,0(sp)
   40d2c:	dfc00115 	stw	ra,4(sp)
   40d30:	0021883a 	mov	r16,zero
   40d34:	20000c16 	blt	r4,zero,40d68 <__divsi3+0x44>
   40d38:	000d883a 	mov	r6,zero
   40d3c:	28000e16 	blt	r5,zero,40d78 <__divsi3+0x54>
   40d40:	0040ca80 	call	40ca8 <udivmodsi4>
   40d44:	1007883a 	mov	r3,r2
   40d48:	8005003a 	cmpeq	r2,r16,zero
   40d4c:	1000011e 	bne	r2,zero,40d54 <__divsi3+0x30>
   40d50:	00c7c83a 	sub	r3,zero,r3
   40d54:	1805883a 	mov	r2,r3
   40d58:	dfc00117 	ldw	ra,4(sp)
   40d5c:	dc000017 	ldw	r16,0(sp)
   40d60:	dec00204 	addi	sp,sp,8
   40d64:	f800283a 	ret
   40d68:	0109c83a 	sub	r4,zero,r4
   40d6c:	04000044 	movi	r16,1
   40d70:	000d883a 	mov	r6,zero
   40d74:	283ff20e 	bge	r5,zero,40d40 <__divsi3+0x1c>
   40d78:	014bc83a 	sub	r5,zero,r5
   40d7c:	8021003a 	cmpeq	r16,r16,zero
   40d80:	003fef06 	br	40d40 <__divsi3+0x1c>

00040d84 <__modsi3>:
   40d84:	deffff04 	addi	sp,sp,-4
   40d88:	dfc00015 	stw	ra,0(sp)
   40d8c:	01800044 	movi	r6,1
   40d90:	2807883a 	mov	r3,r5
   40d94:	20000416 	blt	r4,zero,40da8 <__modsi3+0x24>
   40d98:	28000c16 	blt	r5,zero,40dcc <__modsi3+0x48>
   40d9c:	dfc00017 	ldw	ra,0(sp)
   40da0:	dec00104 	addi	sp,sp,4
   40da4:	0040ca81 	jmpi	40ca8 <udivmodsi4>
   40da8:	0109c83a 	sub	r4,zero,r4
   40dac:	28000b16 	blt	r5,zero,40ddc <__modsi3+0x58>
   40db0:	180b883a 	mov	r5,r3
   40db4:	01800044 	movi	r6,1
   40db8:	0040ca80 	call	40ca8 <udivmodsi4>
   40dbc:	0085c83a 	sub	r2,zero,r2
   40dc0:	dfc00017 	ldw	ra,0(sp)
   40dc4:	dec00104 	addi	sp,sp,4
   40dc8:	f800283a 	ret
   40dcc:	014bc83a 	sub	r5,zero,r5
   40dd0:	dfc00017 	ldw	ra,0(sp)
   40dd4:	dec00104 	addi	sp,sp,4
   40dd8:	0040ca81 	jmpi	40ca8 <udivmodsi4>
   40ddc:	0147c83a 	sub	r3,zero,r5
   40de0:	003ff306 	br	40db0 <__modsi3+0x2c>

00040de4 <__udivsi3>:
   40de4:	000d883a 	mov	r6,zero
   40de8:	0040ca81 	jmpi	40ca8 <udivmodsi4>

00040dec <__umodsi3>:
   40dec:	01800044 	movi	r6,1
   40df0:	0040ca81 	jmpi	40ca8 <udivmodsi4>

00040df4 <exit>:
   40df4:	defffe04 	addi	sp,sp,-8
   40df8:	000b883a 	mov	r5,zero
   40dfc:	dc000015 	stw	r16,0(sp)
   40e00:	dfc00115 	stw	ra,4(sp)
   40e04:	2021883a 	mov	r16,r4
   40e08:	00430340 	call	43034 <__call_exitprocs>
   40e0c:	00800174 	movhi	r2,5
   40e10:	10bcde04 	addi	r2,r2,-3208
   40e14:	11000017 	ldw	r4,0(r2)
   40e18:	20800f17 	ldw	r2,60(r4)
   40e1c:	10000126 	beq	r2,zero,40e24 <exit+0x30>
   40e20:	103ee83a 	callr	r2
   40e24:	8009883a 	mov	r4,r16
   40e28:	004a7a00 	call	4a7a0 <_exit>

00040e2c <printf>:
   40e2c:	defffb04 	addi	sp,sp,-20
   40e30:	dfc00115 	stw	ra,4(sp)
   40e34:	d9400215 	stw	r5,8(sp)
   40e38:	d9800315 	stw	r6,12(sp)
   40e3c:	d9c00415 	stw	r7,16(sp)
   40e40:	00800174 	movhi	r2,5
   40e44:	10bcdd04 	addi	r2,r2,-3212
   40e48:	10c00017 	ldw	r3,0(r2)
   40e4c:	200b883a 	mov	r5,r4
   40e50:	d8800204 	addi	r2,sp,8
   40e54:	19000217 	ldw	r4,8(r3)
   40e58:	100d883a 	mov	r6,r2
   40e5c:	d8800015 	stw	r2,0(sp)
   40e60:	0042ed00 	call	42ed0 <__vfprintf_internal>
   40e64:	dfc00117 	ldw	ra,4(sp)
   40e68:	dec00504 	addi	sp,sp,20
   40e6c:	f800283a 	ret

00040e70 <_printf_r>:
   40e70:	defffc04 	addi	sp,sp,-16
   40e74:	dfc00115 	stw	ra,4(sp)
   40e78:	d9800215 	stw	r6,8(sp)
   40e7c:	d9c00315 	stw	r7,12(sp)
   40e80:	280d883a 	mov	r6,r5
   40e84:	21400217 	ldw	r5,8(r4)
   40e88:	d8c00204 	addi	r3,sp,8
   40e8c:	180f883a 	mov	r7,r3
   40e90:	d8c00015 	stw	r3,0(sp)
   40e94:	00410240 	call	41024 <___vfprintf_internal_r>
   40e98:	dfc00117 	ldw	ra,4(sp)
   40e9c:	dec00404 	addi	sp,sp,16
   40ea0:	f800283a 	ret

00040ea4 <_puts_r>:
   40ea4:	defff604 	addi	sp,sp,-40
   40ea8:	dc400715 	stw	r17,28(sp)
   40eac:	2023883a 	mov	r17,r4
   40eb0:	2809883a 	mov	r4,r5
   40eb4:	dfc00915 	stw	ra,36(sp)
   40eb8:	dcc00815 	stw	r19,32(sp)
   40ebc:	2827883a 	mov	r19,r5
   40ec0:	0040f580 	call	40f58 <strlen>
   40ec4:	89400217 	ldw	r5,8(r17)
   40ec8:	00c00174 	movhi	r3,5
   40ecc:	18f58804 	addi	r3,r3,-10720
   40ed0:	01c00044 	movi	r7,1
   40ed4:	12000044 	addi	r8,r2,1
   40ed8:	d8c00515 	stw	r3,20(sp)
   40edc:	d9c00615 	stw	r7,24(sp)
   40ee0:	d8c00304 	addi	r3,sp,12
   40ee4:	01c00084 	movi	r7,2
   40ee8:	8809883a 	mov	r4,r17
   40eec:	d80d883a 	mov	r6,sp
   40ef0:	d8c00015 	stw	r3,0(sp)
   40ef4:	dcc00315 	stw	r19,12(sp)
   40ef8:	da000215 	stw	r8,8(sp)
   40efc:	d9c00115 	stw	r7,4(sp)
   40f00:	d8800415 	stw	r2,16(sp)
   40f04:	00452e00 	call	452e0 <__sfvwrite_r>
   40f08:	00ffffc4 	movi	r3,-1
   40f0c:	10000626 	beq	r2,zero,40f28 <_puts_r+0x84>
   40f10:	1805883a 	mov	r2,r3
   40f14:	dfc00917 	ldw	ra,36(sp)
   40f18:	dcc00817 	ldw	r19,32(sp)
   40f1c:	dc400717 	ldw	r17,28(sp)
   40f20:	dec00a04 	addi	sp,sp,40
   40f24:	f800283a 	ret
   40f28:	00c00284 	movi	r3,10
   40f2c:	1805883a 	mov	r2,r3
   40f30:	dfc00917 	ldw	ra,36(sp)
   40f34:	dcc00817 	ldw	r19,32(sp)
   40f38:	dc400717 	ldw	r17,28(sp)
   40f3c:	dec00a04 	addi	sp,sp,40
   40f40:	f800283a 	ret

00040f44 <puts>:
   40f44:	00800174 	movhi	r2,5
   40f48:	10bcdd04 	addi	r2,r2,-3212
   40f4c:	200b883a 	mov	r5,r4
   40f50:	11000017 	ldw	r4,0(r2)
   40f54:	0040ea41 	jmpi	40ea4 <_puts_r>

00040f58 <strlen>:
   40f58:	208000cc 	andi	r2,r4,3
   40f5c:	2011883a 	mov	r8,r4
   40f60:	1000161e 	bne	r2,zero,40fbc <strlen+0x64>
   40f64:	20c00017 	ldw	r3,0(r4)
   40f68:	017fbff4 	movhi	r5,65279
   40f6c:	297fbfc4 	addi	r5,r5,-257
   40f70:	01e02074 	movhi	r7,32897
   40f74:	39e02004 	addi	r7,r7,-32640
   40f78:	1945883a 	add	r2,r3,r5
   40f7c:	11c4703a 	and	r2,r2,r7
   40f80:	00c6303a 	nor	r3,zero,r3
   40f84:	1886703a 	and	r3,r3,r2
   40f88:	18000c1e 	bne	r3,zero,40fbc <strlen+0x64>
   40f8c:	280d883a 	mov	r6,r5
   40f90:	380b883a 	mov	r5,r7
   40f94:	21000104 	addi	r4,r4,4
   40f98:	20800017 	ldw	r2,0(r4)
   40f9c:	1187883a 	add	r3,r2,r6
   40fa0:	1946703a 	and	r3,r3,r5
   40fa4:	0084303a 	nor	r2,zero,r2
   40fa8:	10c4703a 	and	r2,r2,r3
   40fac:	103ff926 	beq	r2,zero,40f94 <strlen+0x3c>
   40fb0:	20800007 	ldb	r2,0(r4)
   40fb4:	10000326 	beq	r2,zero,40fc4 <strlen+0x6c>
   40fb8:	21000044 	addi	r4,r4,1
   40fbc:	20800007 	ldb	r2,0(r4)
   40fc0:	103ffd1e 	bne	r2,zero,40fb8 <strlen+0x60>
   40fc4:	2205c83a 	sub	r2,r4,r8
   40fc8:	f800283a 	ret

00040fcc <__sprint_r>:
   40fcc:	30800217 	ldw	r2,8(r6)
   40fd0:	defffe04 	addi	sp,sp,-8
   40fd4:	dc000015 	stw	r16,0(sp)
   40fd8:	dfc00115 	stw	ra,4(sp)
   40fdc:	3021883a 	mov	r16,r6
   40fe0:	0007883a 	mov	r3,zero
   40fe4:	1000061e 	bne	r2,zero,41000 <__sprint_r+0x34>
   40fe8:	1805883a 	mov	r2,r3
   40fec:	30000115 	stw	zero,4(r6)
   40ff0:	dfc00117 	ldw	ra,4(sp)
   40ff4:	dc000017 	ldw	r16,0(sp)
   40ff8:	dec00204 	addi	sp,sp,8
   40ffc:	f800283a 	ret
   41000:	00452e00 	call	452e0 <__sfvwrite_r>
   41004:	1007883a 	mov	r3,r2
   41008:	1805883a 	mov	r2,r3
   4100c:	80000115 	stw	zero,4(r16)
   41010:	80000215 	stw	zero,8(r16)
   41014:	dfc00117 	ldw	ra,4(sp)
   41018:	dc000017 	ldw	r16,0(sp)
   4101c:	dec00204 	addi	sp,sp,8
   41020:	f800283a 	ret

00041024 <___vfprintf_internal_r>:
   41024:	defea404 	addi	sp,sp,-1392
   41028:	dd815815 	stw	r22,1376(sp)
   4102c:	dc015215 	stw	r16,1352(sp)
   41030:	d9c15115 	stw	r7,1348(sp)
   41034:	dfc15b15 	stw	ra,1388(sp)
   41038:	df015a15 	stw	fp,1384(sp)
   4103c:	ddc15915 	stw	r23,1380(sp)
   41040:	dd415715 	stw	r21,1372(sp)
   41044:	dd015615 	stw	r20,1368(sp)
   41048:	dcc15515 	stw	r19,1364(sp)
   4104c:	dc815415 	stw	r18,1360(sp)
   41050:	dc415315 	stw	r17,1356(sp)
   41054:	282d883a 	mov	r22,r5
   41058:	3021883a 	mov	r16,r6
   4105c:	d9014f15 	stw	r4,1340(sp)
   41060:	00459040 	call	45904 <_localeconv_r>
   41064:	10800017 	ldw	r2,0(r2)
   41068:	d9c15117 	ldw	r7,1348(sp)
   4106c:	d8814915 	stw	r2,1316(sp)
   41070:	d8814f17 	ldw	r2,1340(sp)
   41074:	10000226 	beq	r2,zero,41080 <___vfprintf_internal_r+0x5c>
   41078:	10800e17 	ldw	r2,56(r2)
   4107c:	10020d26 	beq	r2,zero,418b4 <___vfprintf_internal_r+0x890>
   41080:	b080030b 	ldhu	r2,12(r22)
   41084:	1080020c 	andi	r2,r2,8
   41088:	10020e26 	beq	r2,zero,418c4 <___vfprintf_internal_r+0x8a0>
   4108c:	b0800417 	ldw	r2,16(r22)
   41090:	10020c26 	beq	r2,zero,418c4 <___vfprintf_internal_r+0x8a0>
   41094:	b200030b 	ldhu	r8,12(r22)
   41098:	00800284 	movi	r2,10
   4109c:	40c0068c 	andi	r3,r8,26
   410a0:	18802f1e 	bne	r3,r2,41160 <___vfprintf_internal_r+0x13c>
   410a4:	b080038f 	ldh	r2,14(r22)
   410a8:	10002d16 	blt	r2,zero,41160 <___vfprintf_internal_r+0x13c>
   410ac:	b240038b 	ldhu	r9,14(r22)
   410b0:	b2800717 	ldw	r10,28(r22)
   410b4:	b2c00917 	ldw	r11,36(r22)
   410b8:	d9014f17 	ldw	r4,1340(sp)
   410bc:	dc402904 	addi	r17,sp,164
   410c0:	d8804004 	addi	r2,sp,256
   410c4:	00c10004 	movi	r3,1024
   410c8:	423fff4c 	andi	r8,r8,65533
   410cc:	800d883a 	mov	r6,r16
   410d0:	880b883a 	mov	r5,r17
   410d4:	da002c0d 	sth	r8,176(sp)
   410d8:	da402c8d 	sth	r9,178(sp)
   410dc:	da803015 	stw	r10,192(sp)
   410e0:	dac03215 	stw	r11,200(sp)
   410e4:	d8802d15 	stw	r2,180(sp)
   410e8:	d8c02e15 	stw	r3,184(sp)
   410ec:	d8802915 	stw	r2,164(sp)
   410f0:	d8c02b15 	stw	r3,172(sp)
   410f4:	d8002f15 	stw	zero,188(sp)
   410f8:	00410240 	call	41024 <___vfprintf_internal_r>
   410fc:	d8814b15 	stw	r2,1324(sp)
   41100:	10000416 	blt	r2,zero,41114 <___vfprintf_internal_r+0xf0>
   41104:	d9014f17 	ldw	r4,1340(sp)
   41108:	880b883a 	mov	r5,r17
   4110c:	00449b00 	call	449b0 <_fflush_r>
   41110:	1002321e 	bne	r2,zero,419dc <___vfprintf_internal_r+0x9b8>
   41114:	d8802c0b 	ldhu	r2,176(sp)
   41118:	1080100c 	andi	r2,r2,64
   4111c:	10000326 	beq	r2,zero,4112c <___vfprintf_internal_r+0x108>
   41120:	b080030b 	ldhu	r2,12(r22)
   41124:	10801014 	ori	r2,r2,64
   41128:	b080030d 	sth	r2,12(r22)
   4112c:	d8814b17 	ldw	r2,1324(sp)
   41130:	dfc15b17 	ldw	ra,1388(sp)
   41134:	df015a17 	ldw	fp,1384(sp)
   41138:	ddc15917 	ldw	r23,1380(sp)
   4113c:	dd815817 	ldw	r22,1376(sp)
   41140:	dd415717 	ldw	r21,1372(sp)
   41144:	dd015617 	ldw	r20,1368(sp)
   41148:	dcc15517 	ldw	r19,1364(sp)
   4114c:	dc815417 	ldw	r18,1360(sp)
   41150:	dc415317 	ldw	r17,1356(sp)
   41154:	dc015217 	ldw	r16,1352(sp)
   41158:	dec15c04 	addi	sp,sp,1392
   4115c:	f800283a 	ret
   41160:	0005883a 	mov	r2,zero
   41164:	0007883a 	mov	r3,zero
   41168:	dd401904 	addi	r21,sp,100
   4116c:	d8814215 	stw	r2,1288(sp)
   41170:	802f883a 	mov	r23,r16
   41174:	d8c14315 	stw	r3,1292(sp)
   41178:	d8014b15 	stw	zero,1324(sp)
   4117c:	d8014815 	stw	zero,1312(sp)
   41180:	d8014415 	stw	zero,1296(sp)
   41184:	d8014715 	stw	zero,1308(sp)
   41188:	dd400c15 	stw	r21,48(sp)
   4118c:	d8000e15 	stw	zero,56(sp)
   41190:	d8000d15 	stw	zero,52(sp)
   41194:	b8800007 	ldb	r2,0(r23)
   41198:	10001926 	beq	r2,zero,41200 <___vfprintf_internal_r+0x1dc>
   4119c:	00c00944 	movi	r3,37
   411a0:	10c01726 	beq	r2,r3,41200 <___vfprintf_internal_r+0x1dc>
   411a4:	b821883a 	mov	r16,r23
   411a8:	00000106 	br	411b0 <___vfprintf_internal_r+0x18c>
   411ac:	10c00326 	beq	r2,r3,411bc <___vfprintf_internal_r+0x198>
   411b0:	84000044 	addi	r16,r16,1
   411b4:	80800007 	ldb	r2,0(r16)
   411b8:	103ffc1e 	bne	r2,zero,411ac <___vfprintf_internal_r+0x188>
   411bc:	85e7c83a 	sub	r19,r16,r23
   411c0:	98000e26 	beq	r19,zero,411fc <___vfprintf_internal_r+0x1d8>
   411c4:	dc800e17 	ldw	r18,56(sp)
   411c8:	dc400d17 	ldw	r17,52(sp)
   411cc:	008001c4 	movi	r2,7
   411d0:	94e5883a 	add	r18,r18,r19
   411d4:	8c400044 	addi	r17,r17,1
   411d8:	adc00015 	stw	r23,0(r21)
   411dc:	dc800e15 	stw	r18,56(sp)
   411e0:	acc00115 	stw	r19,4(r21)
   411e4:	dc400d15 	stw	r17,52(sp)
   411e8:	14428b16 	blt	r2,r17,41c18 <___vfprintf_internal_r+0xbf4>
   411ec:	ad400204 	addi	r21,r21,8
   411f0:	d9014b17 	ldw	r4,1324(sp)
   411f4:	24c9883a 	add	r4,r4,r19
   411f8:	d9014b15 	stw	r4,1324(sp)
   411fc:	802f883a 	mov	r23,r16
   41200:	b8800007 	ldb	r2,0(r23)
   41204:	10013c26 	beq	r2,zero,416f8 <___vfprintf_internal_r+0x6d4>
   41208:	bdc00044 	addi	r23,r23,1
   4120c:	d8000405 	stb	zero,16(sp)
   41210:	b8c00007 	ldb	r3,0(r23)
   41214:	04ffffc4 	movi	r19,-1
   41218:	d8014c15 	stw	zero,1328(sp)
   4121c:	d8014a15 	stw	zero,1320(sp)
   41220:	d8c14d15 	stw	r3,1332(sp)
   41224:	bdc00044 	addi	r23,r23,1
   41228:	d9414d17 	ldw	r5,1332(sp)
   4122c:	00801604 	movi	r2,88
   41230:	28fff804 	addi	r3,r5,-32
   41234:	10c06036 	bltu	r2,r3,413b8 <___vfprintf_internal_r+0x394>
   41238:	18c5883a 	add	r2,r3,r3
   4123c:	1085883a 	add	r2,r2,r2
   41240:	00c00134 	movhi	r3,4
   41244:	18c49504 	addi	r3,r3,4692
   41248:	10c5883a 	add	r2,r2,r3
   4124c:	11000017 	ldw	r4,0(r2)
   41250:	2000683a 	jmp	r4
   41254:	000421c8 	cmpgei	zero,zero,4231
   41258:	000413b8 	rdprs	zero,zero,4174
   4125c:	000413b8 	rdprs	zero,zero,4174
   41260:	000421b4 	movhi	zero,4230
   41264:	000413b8 	rdprs	zero,zero,4174
   41268:	000413b8 	rdprs	zero,zero,4174
   4126c:	000413b8 	rdprs	zero,zero,4174
   41270:	000413b8 	rdprs	zero,zero,4174
   41274:	000413b8 	rdprs	zero,zero,4174
   41278:	000413b8 	rdprs	zero,zero,4174
   4127c:	00041f94 	movui	zero,4222
   41280:	000421a4 	muli	zero,zero,4230
   41284:	000413b8 	rdprs	zero,zero,4174
   41288:	00041fac 	andhi	zero,zero,4222
   4128c:	00042240 	call	4224 <__alt_mem_onchip_mem-0x3bddc>
   41290:	000413b8 	rdprs	zero,zero,4174
   41294:	0004222c 	andhi	zero,zero,4232
   41298:	000421f4 	movhi	zero,4231
   4129c:	000421f4 	movhi	zero,4231
   412a0:	000421f4 	movhi	zero,4231
   412a4:	000421f4 	movhi	zero,4231
   412a8:	000421f4 	movhi	zero,4231
   412ac:	000421f4 	movhi	zero,4231
   412b0:	000421f4 	movhi	zero,4231
   412b4:	000421f4 	movhi	zero,4231
   412b8:	000421f4 	movhi	zero,4231
   412bc:	000413b8 	rdprs	zero,zero,4174
   412c0:	000413b8 	rdprs	zero,zero,4174
   412c4:	000413b8 	rdprs	zero,zero,4174
   412c8:	000413b8 	rdprs	zero,zero,4174
   412cc:	000413b8 	rdprs	zero,zero,4174
   412d0:	000413b8 	rdprs	zero,zero,4174
   412d4:	000413b8 	rdprs	zero,zero,4174
   412d8:	000413b8 	rdprs	zero,zero,4174
   412dc:	000413b8 	rdprs	zero,zero,4174
   412e0:	000413b8 	rdprs	zero,zero,4174
   412e4:	00041a10 	cmplti	zero,zero,4200
   412e8:	0004207c 	xorhi	zero,zero,4225
   412ec:	000413b8 	rdprs	zero,zero,4174
   412f0:	0004207c 	xorhi	zero,zero,4225
   412f4:	000413b8 	rdprs	zero,zero,4174
   412f8:	000413b8 	rdprs	zero,zero,4174
   412fc:	000413b8 	rdprs	zero,zero,4174
   41300:	000413b8 	rdprs	zero,zero,4174
   41304:	000421e0 	cmpeqi	zero,zero,4231
   41308:	000413b8 	rdprs	zero,zero,4174
   4130c:	000413b8 	rdprs	zero,zero,4174
   41310:	00041ac4 	movi	zero,4203
   41314:	000413b8 	rdprs	zero,zero,4174
   41318:	000413b8 	rdprs	zero,zero,4174
   4131c:	000413b8 	rdprs	zero,zero,4174
   41320:	000413b8 	rdprs	zero,zero,4174
   41324:	000413b8 	rdprs	zero,zero,4174
   41328:	00041b10 	cmplti	zero,zero,4204
   4132c:	000413b8 	rdprs	zero,zero,4174
   41330:	000413b8 	rdprs	zero,zero,4174
   41334:	00042130 	cmpltui	zero,zero,4228
   41338:	000413b8 	rdprs	zero,zero,4174
   4133c:	000413b8 	rdprs	zero,zero,4174
   41340:	000413b8 	rdprs	zero,zero,4174
   41344:	000413b8 	rdprs	zero,zero,4174
   41348:	000413b8 	rdprs	zero,zero,4174
   4134c:	000413b8 	rdprs	zero,zero,4174
   41350:	000413b8 	rdprs	zero,zero,4174
   41354:	000413b8 	rdprs	zero,zero,4174
   41358:	000413b8 	rdprs	zero,zero,4174
   4135c:	000413b8 	rdprs	zero,zero,4174
   41360:	00042104 	movi	zero,4228
   41364:	00041a1c 	xori	zero,zero,4200
   41368:	0004207c 	xorhi	zero,zero,4225
   4136c:	0004207c 	xorhi	zero,zero,4225
   41370:	0004207c 	xorhi	zero,zero,4225
   41374:	00042068 	cmpgeui	zero,zero,4225
   41378:	00041a1c 	xori	zero,zero,4200
   4137c:	000413b8 	rdprs	zero,zero,4174
   41380:	000413b8 	rdprs	zero,zero,4174
   41384:	00041ff0 	cmpltui	zero,zero,4223
   41388:	000413b8 	rdprs	zero,zero,4174
   4138c:	00041fc0 	call	41fc <__alt_mem_onchip_mem-0x3be04>
   41390:	00041ad0 	cmplti	zero,zero,4203
   41394:	00042020 	cmpeqi	zero,zero,4224
   41398:	0004200c 	andi	zero,zero,4224
   4139c:	000413b8 	rdprs	zero,zero,4174
   413a0:	0004229c 	xori	zero,zero,4234
   413a4:	000413b8 	rdprs	zero,zero,4174
   413a8:	00041b1c 	xori	zero,zero,4204
   413ac:	000413b8 	rdprs	zero,zero,4174
   413b0:	000413b8 	rdprs	zero,zero,4174
   413b4:	00042194 	movui	zero,4230
   413b8:	d9014d17 	ldw	r4,1332(sp)
   413bc:	2000ce26 	beq	r4,zero,416f8 <___vfprintf_internal_r+0x6d4>
   413c0:	01400044 	movi	r5,1
   413c4:	d9800f04 	addi	r6,sp,60
   413c8:	d9c14015 	stw	r7,1280(sp)
   413cc:	d9414515 	stw	r5,1300(sp)
   413d0:	d9814115 	stw	r6,1284(sp)
   413d4:	280f883a 	mov	r7,r5
   413d8:	d9000f05 	stb	r4,60(sp)
   413dc:	d8000405 	stb	zero,16(sp)
   413e0:	d8014615 	stw	zero,1304(sp)
   413e4:	d8c14c17 	ldw	r3,1328(sp)
   413e8:	1880008c 	andi	r2,r3,2
   413ec:	1005003a 	cmpeq	r2,r2,zero
   413f0:	d8815015 	stw	r2,1344(sp)
   413f4:	1000031e 	bne	r2,zero,41404 <___vfprintf_internal_r+0x3e0>
   413f8:	d9014517 	ldw	r4,1300(sp)
   413fc:	21000084 	addi	r4,r4,2
   41400:	d9014515 	stw	r4,1300(sp)
   41404:	d9414c17 	ldw	r5,1328(sp)
   41408:	2940210c 	andi	r5,r5,132
   4140c:	d9414e15 	stw	r5,1336(sp)
   41410:	28002d1e 	bne	r5,zero,414c8 <___vfprintf_internal_r+0x4a4>
   41414:	d9814a17 	ldw	r6,1320(sp)
   41418:	d8814517 	ldw	r2,1300(sp)
   4141c:	30a1c83a 	sub	r16,r6,r2
   41420:	0400290e 	bge	zero,r16,414c8 <___vfprintf_internal_r+0x4a4>
   41424:	00800404 	movi	r2,16
   41428:	1404580e 	bge	r2,r16,4258c <___vfprintf_internal_r+0x1568>
   4142c:	dc800e17 	ldw	r18,56(sp)
   41430:	dc400d17 	ldw	r17,52(sp)
   41434:	1027883a 	mov	r19,r2
   41438:	07000174 	movhi	fp,5
   4143c:	e735a484 	addi	fp,fp,-10606
   41440:	050001c4 	movi	r20,7
   41444:	00000306 	br	41454 <___vfprintf_internal_r+0x430>
   41448:	843ffc04 	addi	r16,r16,-16
   4144c:	ad400204 	addi	r21,r21,8
   41450:	9c00130e 	bge	r19,r16,414a0 <___vfprintf_internal_r+0x47c>
   41454:	94800404 	addi	r18,r18,16
   41458:	8c400044 	addi	r17,r17,1
   4145c:	af000015 	stw	fp,0(r21)
   41460:	acc00115 	stw	r19,4(r21)
   41464:	dc800e15 	stw	r18,56(sp)
   41468:	dc400d15 	stw	r17,52(sp)
   4146c:	a47ff60e 	bge	r20,r17,41448 <___vfprintf_internal_r+0x424>
   41470:	d9014f17 	ldw	r4,1340(sp)
   41474:	b00b883a 	mov	r5,r22
   41478:	d9800c04 	addi	r6,sp,48
   4147c:	d9c15115 	stw	r7,1348(sp)
   41480:	0040fcc0 	call	40fcc <__sprint_r>
   41484:	d9c15117 	ldw	r7,1348(sp)
   41488:	10009e1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   4148c:	843ffc04 	addi	r16,r16,-16
   41490:	dc800e17 	ldw	r18,56(sp)
   41494:	dc400d17 	ldw	r17,52(sp)
   41498:	dd401904 	addi	r21,sp,100
   4149c:	9c3fed16 	blt	r19,r16,41454 <___vfprintf_internal_r+0x430>
   414a0:	9425883a 	add	r18,r18,r16
   414a4:	8c400044 	addi	r17,r17,1
   414a8:	008001c4 	movi	r2,7
   414ac:	af000015 	stw	fp,0(r21)
   414b0:	ac000115 	stw	r16,4(r21)
   414b4:	dc800e15 	stw	r18,56(sp)
   414b8:	dc400d15 	stw	r17,52(sp)
   414bc:	1441f516 	blt	r2,r17,41c94 <___vfprintf_internal_r+0xc70>
   414c0:	ad400204 	addi	r21,r21,8
   414c4:	00000206 	br	414d0 <___vfprintf_internal_r+0x4ac>
   414c8:	dc800e17 	ldw	r18,56(sp)
   414cc:	dc400d17 	ldw	r17,52(sp)
   414d0:	d8800407 	ldb	r2,16(sp)
   414d4:	10000b26 	beq	r2,zero,41504 <___vfprintf_internal_r+0x4e0>
   414d8:	00800044 	movi	r2,1
   414dc:	94800044 	addi	r18,r18,1
   414e0:	8c400044 	addi	r17,r17,1
   414e4:	a8800115 	stw	r2,4(r21)
   414e8:	d8c00404 	addi	r3,sp,16
   414ec:	008001c4 	movi	r2,7
   414f0:	a8c00015 	stw	r3,0(r21)
   414f4:	dc800e15 	stw	r18,56(sp)
   414f8:	dc400d15 	stw	r17,52(sp)
   414fc:	1441da16 	blt	r2,r17,41c68 <___vfprintf_internal_r+0xc44>
   41500:	ad400204 	addi	r21,r21,8
   41504:	d9015017 	ldw	r4,1344(sp)
   41508:	20000b1e 	bne	r4,zero,41538 <___vfprintf_internal_r+0x514>
   4150c:	d8800444 	addi	r2,sp,17
   41510:	94800084 	addi	r18,r18,2
   41514:	8c400044 	addi	r17,r17,1
   41518:	a8800015 	stw	r2,0(r21)
   4151c:	00c00084 	movi	r3,2
   41520:	008001c4 	movi	r2,7
   41524:	a8c00115 	stw	r3,4(r21)
   41528:	dc800e15 	stw	r18,56(sp)
   4152c:	dc400d15 	stw	r17,52(sp)
   41530:	1441c216 	blt	r2,r17,41c3c <___vfprintf_internal_r+0xc18>
   41534:	ad400204 	addi	r21,r21,8
   41538:	d9414e17 	ldw	r5,1336(sp)
   4153c:	00802004 	movi	r2,128
   41540:	2880b126 	beq	r5,r2,41808 <___vfprintf_internal_r+0x7e4>
   41544:	d8c14617 	ldw	r3,1304(sp)
   41548:	19e1c83a 	sub	r16,r3,r7
   4154c:	0400260e 	bge	zero,r16,415e8 <___vfprintf_internal_r+0x5c4>
   41550:	00800404 	movi	r2,16
   41554:	1403c90e 	bge	r2,r16,4247c <___vfprintf_internal_r+0x1458>
   41558:	1027883a 	mov	r19,r2
   4155c:	07000174 	movhi	fp,5
   41560:	e735a084 	addi	fp,fp,-10622
   41564:	050001c4 	movi	r20,7
   41568:	00000306 	br	41578 <___vfprintf_internal_r+0x554>
   4156c:	843ffc04 	addi	r16,r16,-16
   41570:	ad400204 	addi	r21,r21,8
   41574:	9c00130e 	bge	r19,r16,415c4 <___vfprintf_internal_r+0x5a0>
   41578:	94800404 	addi	r18,r18,16
   4157c:	8c400044 	addi	r17,r17,1
   41580:	af000015 	stw	fp,0(r21)
   41584:	acc00115 	stw	r19,4(r21)
   41588:	dc800e15 	stw	r18,56(sp)
   4158c:	dc400d15 	stw	r17,52(sp)
   41590:	a47ff60e 	bge	r20,r17,4156c <___vfprintf_internal_r+0x548>
   41594:	d9014f17 	ldw	r4,1340(sp)
   41598:	b00b883a 	mov	r5,r22
   4159c:	d9800c04 	addi	r6,sp,48
   415a0:	d9c15115 	stw	r7,1348(sp)
   415a4:	0040fcc0 	call	40fcc <__sprint_r>
   415a8:	d9c15117 	ldw	r7,1348(sp)
   415ac:	1000551e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   415b0:	843ffc04 	addi	r16,r16,-16
   415b4:	dc800e17 	ldw	r18,56(sp)
   415b8:	dc400d17 	ldw	r17,52(sp)
   415bc:	dd401904 	addi	r21,sp,100
   415c0:	9c3fed16 	blt	r19,r16,41578 <___vfprintf_internal_r+0x554>
   415c4:	9425883a 	add	r18,r18,r16
   415c8:	8c400044 	addi	r17,r17,1
   415cc:	008001c4 	movi	r2,7
   415d0:	af000015 	stw	fp,0(r21)
   415d4:	ac000115 	stw	r16,4(r21)
   415d8:	dc800e15 	stw	r18,56(sp)
   415dc:	dc400d15 	stw	r17,52(sp)
   415e0:	14418216 	blt	r2,r17,41bec <___vfprintf_internal_r+0xbc8>
   415e4:	ad400204 	addi	r21,r21,8
   415e8:	d9014c17 	ldw	r4,1328(sp)
   415ec:	2080400c 	andi	r2,r4,256
   415f0:	10004a1e 	bne	r2,zero,4171c <___vfprintf_internal_r+0x6f8>
   415f4:	d9414117 	ldw	r5,1284(sp)
   415f8:	91e5883a 	add	r18,r18,r7
   415fc:	8c400044 	addi	r17,r17,1
   41600:	008001c4 	movi	r2,7
   41604:	a9400015 	stw	r5,0(r21)
   41608:	a9c00115 	stw	r7,4(r21)
   4160c:	dc800e15 	stw	r18,56(sp)
   41610:	dc400d15 	stw	r17,52(sp)
   41614:	14416716 	blt	r2,r17,41bb4 <___vfprintf_internal_r+0xb90>
   41618:	a8c00204 	addi	r3,r21,8
   4161c:	d9814c17 	ldw	r6,1328(sp)
   41620:	3080010c 	andi	r2,r6,4
   41624:	10002826 	beq	r2,zero,416c8 <___vfprintf_internal_r+0x6a4>
   41628:	d8814a17 	ldw	r2,1320(sp)
   4162c:	d9014517 	ldw	r4,1300(sp)
   41630:	1121c83a 	sub	r16,r2,r4
   41634:	0400240e 	bge	zero,r16,416c8 <___vfprintf_internal_r+0x6a4>
   41638:	00800404 	movi	r2,16
   4163c:	14044f0e 	bge	r2,r16,4277c <___vfprintf_internal_r+0x1758>
   41640:	dc400d17 	ldw	r17,52(sp)
   41644:	1027883a 	mov	r19,r2
   41648:	07000174 	movhi	fp,5
   4164c:	e735a484 	addi	fp,fp,-10606
   41650:	050001c4 	movi	r20,7
   41654:	00000306 	br	41664 <___vfprintf_internal_r+0x640>
   41658:	843ffc04 	addi	r16,r16,-16
   4165c:	18c00204 	addi	r3,r3,8
   41660:	9c00110e 	bge	r19,r16,416a8 <___vfprintf_internal_r+0x684>
   41664:	94800404 	addi	r18,r18,16
   41668:	8c400044 	addi	r17,r17,1
   4166c:	1f000015 	stw	fp,0(r3)
   41670:	1cc00115 	stw	r19,4(r3)
   41674:	dc800e15 	stw	r18,56(sp)
   41678:	dc400d15 	stw	r17,52(sp)
   4167c:	a47ff60e 	bge	r20,r17,41658 <___vfprintf_internal_r+0x634>
   41680:	d9014f17 	ldw	r4,1340(sp)
   41684:	b00b883a 	mov	r5,r22
   41688:	d9800c04 	addi	r6,sp,48
   4168c:	0040fcc0 	call	40fcc <__sprint_r>
   41690:	10001c1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41694:	843ffc04 	addi	r16,r16,-16
   41698:	dc800e17 	ldw	r18,56(sp)
   4169c:	dc400d17 	ldw	r17,52(sp)
   416a0:	d8c01904 	addi	r3,sp,100
   416a4:	9c3fef16 	blt	r19,r16,41664 <___vfprintf_internal_r+0x640>
   416a8:	9425883a 	add	r18,r18,r16
   416ac:	8c400044 	addi	r17,r17,1
   416b0:	008001c4 	movi	r2,7
   416b4:	1f000015 	stw	fp,0(r3)
   416b8:	1c000115 	stw	r16,4(r3)
   416bc:	dc800e15 	stw	r18,56(sp)
   416c0:	dc400d15 	stw	r17,52(sp)
   416c4:	1440cb16 	blt	r2,r17,419f4 <___vfprintf_internal_r+0x9d0>
   416c8:	d8814a17 	ldw	r2,1320(sp)
   416cc:	d9414517 	ldw	r5,1300(sp)
   416d0:	1140010e 	bge	r2,r5,416d8 <___vfprintf_internal_r+0x6b4>
   416d4:	2805883a 	mov	r2,r5
   416d8:	d9814b17 	ldw	r6,1324(sp)
   416dc:	308d883a 	add	r6,r6,r2
   416e0:	d9814b15 	stw	r6,1324(sp)
   416e4:	90013b1e 	bne	r18,zero,41bd4 <___vfprintf_internal_r+0xbb0>
   416e8:	d9c14017 	ldw	r7,1280(sp)
   416ec:	dd401904 	addi	r21,sp,100
   416f0:	d8000d15 	stw	zero,52(sp)
   416f4:	003ea706 	br	41194 <___vfprintf_internal_r+0x170>
   416f8:	d8800e17 	ldw	r2,56(sp)
   416fc:	10053f1e 	bne	r2,zero,42bfc <___vfprintf_internal_r+0x1bd8>
   41700:	d8000d15 	stw	zero,52(sp)
   41704:	b080030b 	ldhu	r2,12(r22)
   41708:	1080100c 	andi	r2,r2,64
   4170c:	103e8726 	beq	r2,zero,4112c <___vfprintf_internal_r+0x108>
   41710:	00bfffc4 	movi	r2,-1
   41714:	d8814b15 	stw	r2,1324(sp)
   41718:	003e8406 	br	4112c <___vfprintf_internal_r+0x108>
   4171c:	d9814d17 	ldw	r6,1332(sp)
   41720:	00801944 	movi	r2,101
   41724:	11806e16 	blt	r2,r6,418e0 <___vfprintf_internal_r+0x8bc>
   41728:	d9414717 	ldw	r5,1308(sp)
   4172c:	00c00044 	movi	r3,1
   41730:	1943430e 	bge	r3,r5,42440 <___vfprintf_internal_r+0x141c>
   41734:	d8814117 	ldw	r2,1284(sp)
   41738:	94800044 	addi	r18,r18,1
   4173c:	8c400044 	addi	r17,r17,1
   41740:	a8800015 	stw	r2,0(r21)
   41744:	008001c4 	movi	r2,7
   41748:	a8c00115 	stw	r3,4(r21)
   4174c:	dc800e15 	stw	r18,56(sp)
   41750:	dc400d15 	stw	r17,52(sp)
   41754:	1441ca16 	blt	r2,r17,41e80 <___vfprintf_internal_r+0xe5c>
   41758:	a8c00204 	addi	r3,r21,8
   4175c:	d9014917 	ldw	r4,1316(sp)
   41760:	00800044 	movi	r2,1
   41764:	94800044 	addi	r18,r18,1
   41768:	8c400044 	addi	r17,r17,1
   4176c:	18800115 	stw	r2,4(r3)
   41770:	008001c4 	movi	r2,7
   41774:	19000015 	stw	r4,0(r3)
   41778:	dc800e15 	stw	r18,56(sp)
   4177c:	dc400d15 	stw	r17,52(sp)
   41780:	1441b616 	blt	r2,r17,41e5c <___vfprintf_internal_r+0xe38>
   41784:	1cc00204 	addi	r19,r3,8
   41788:	d9014217 	ldw	r4,1288(sp)
   4178c:	d9414317 	ldw	r5,1292(sp)
   41790:	000d883a 	mov	r6,zero
   41794:	000f883a 	mov	r7,zero
   41798:	0049a280 	call	49a28 <__nedf2>
   4179c:	10017426 	beq	r2,zero,41d70 <___vfprintf_internal_r+0xd4c>
   417a0:	d9414717 	ldw	r5,1308(sp)
   417a4:	d9814117 	ldw	r6,1284(sp)
   417a8:	8c400044 	addi	r17,r17,1
   417ac:	2c85883a 	add	r2,r5,r18
   417b0:	14bfffc4 	addi	r18,r2,-1
   417b4:	28bfffc4 	addi	r2,r5,-1
   417b8:	30c00044 	addi	r3,r6,1
   417bc:	98800115 	stw	r2,4(r19)
   417c0:	008001c4 	movi	r2,7
   417c4:	98c00015 	stw	r3,0(r19)
   417c8:	dc800e15 	stw	r18,56(sp)
   417cc:	dc400d15 	stw	r17,52(sp)
   417d0:	14418e16 	blt	r2,r17,41e0c <___vfprintf_internal_r+0xde8>
   417d4:	9cc00204 	addi	r19,r19,8
   417d8:	d9414817 	ldw	r5,1312(sp)
   417dc:	d8800804 	addi	r2,sp,32
   417e0:	8c400044 	addi	r17,r17,1
   417e4:	9165883a 	add	r18,r18,r5
   417e8:	98800015 	stw	r2,0(r19)
   417ec:	008001c4 	movi	r2,7
   417f0:	99400115 	stw	r5,4(r19)
   417f4:	dc800e15 	stw	r18,56(sp)
   417f8:	dc400d15 	stw	r17,52(sp)
   417fc:	1440ed16 	blt	r2,r17,41bb4 <___vfprintf_internal_r+0xb90>
   41800:	98c00204 	addi	r3,r19,8
   41804:	003f8506 	br	4161c <___vfprintf_internal_r+0x5f8>
   41808:	d9814a17 	ldw	r6,1320(sp)
   4180c:	d8814517 	ldw	r2,1300(sp)
   41810:	30a1c83a 	sub	r16,r6,r2
   41814:	043f4b0e 	bge	zero,r16,41544 <___vfprintf_internal_r+0x520>
   41818:	00800404 	movi	r2,16
   4181c:	1404340e 	bge	r2,r16,428f0 <___vfprintf_internal_r+0x18cc>
   41820:	1027883a 	mov	r19,r2
   41824:	07000174 	movhi	fp,5
   41828:	e735a084 	addi	fp,fp,-10622
   4182c:	050001c4 	movi	r20,7
   41830:	00000306 	br	41840 <___vfprintf_internal_r+0x81c>
   41834:	843ffc04 	addi	r16,r16,-16
   41838:	ad400204 	addi	r21,r21,8
   4183c:	9c00130e 	bge	r19,r16,4188c <___vfprintf_internal_r+0x868>
   41840:	94800404 	addi	r18,r18,16
   41844:	8c400044 	addi	r17,r17,1
   41848:	af000015 	stw	fp,0(r21)
   4184c:	acc00115 	stw	r19,4(r21)
   41850:	dc800e15 	stw	r18,56(sp)
   41854:	dc400d15 	stw	r17,52(sp)
   41858:	a47ff60e 	bge	r20,r17,41834 <___vfprintf_internal_r+0x810>
   4185c:	d9014f17 	ldw	r4,1340(sp)
   41860:	b00b883a 	mov	r5,r22
   41864:	d9800c04 	addi	r6,sp,48
   41868:	d9c15115 	stw	r7,1348(sp)
   4186c:	0040fcc0 	call	40fcc <__sprint_r>
   41870:	d9c15117 	ldw	r7,1348(sp)
   41874:	103fa31e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41878:	843ffc04 	addi	r16,r16,-16
   4187c:	dc800e17 	ldw	r18,56(sp)
   41880:	dc400d17 	ldw	r17,52(sp)
   41884:	dd401904 	addi	r21,sp,100
   41888:	9c3fed16 	blt	r19,r16,41840 <___vfprintf_internal_r+0x81c>
   4188c:	9425883a 	add	r18,r18,r16
   41890:	8c400044 	addi	r17,r17,1
   41894:	008001c4 	movi	r2,7
   41898:	af000015 	stw	fp,0(r21)
   4189c:	ac000115 	stw	r16,4(r21)
   418a0:	dc800e15 	stw	r18,56(sp)
   418a4:	dc400d15 	stw	r17,52(sp)
   418a8:	14416116 	blt	r2,r17,41e30 <___vfprintf_internal_r+0xe0c>
   418ac:	ad400204 	addi	r21,r21,8
   418b0:	003f2406 	br	41544 <___vfprintf_internal_r+0x520>
   418b4:	d9014f17 	ldw	r4,1340(sp)
   418b8:	0044c480 	call	44c48 <__sinit>
   418bc:	d9c15117 	ldw	r7,1348(sp)
   418c0:	003def06 	br	41080 <___vfprintf_internal_r+0x5c>
   418c4:	d9014f17 	ldw	r4,1340(sp)
   418c8:	b00b883a 	mov	r5,r22
   418cc:	d9c15115 	stw	r7,1348(sp)
   418d0:	0042ef40 	call	42ef4 <__swsetup_r>
   418d4:	d9c15117 	ldw	r7,1348(sp)
   418d8:	103dee26 	beq	r2,zero,41094 <___vfprintf_internal_r+0x70>
   418dc:	003f8c06 	br	41710 <___vfprintf_internal_r+0x6ec>
   418e0:	d9014217 	ldw	r4,1288(sp)
   418e4:	d9414317 	ldw	r5,1292(sp)
   418e8:	000d883a 	mov	r6,zero
   418ec:	000f883a 	mov	r7,zero
   418f0:	00499a00 	call	499a0 <__eqdf2>
   418f4:	1000f21e 	bne	r2,zero,41cc0 <___vfprintf_internal_r+0xc9c>
   418f8:	00800174 	movhi	r2,5
   418fc:	10b5a004 	addi	r2,r2,-10624
   41900:	94800044 	addi	r18,r18,1
   41904:	8c400044 	addi	r17,r17,1
   41908:	a8800015 	stw	r2,0(r21)
   4190c:	00c00044 	movi	r3,1
   41910:	008001c4 	movi	r2,7
   41914:	a8c00115 	stw	r3,4(r21)
   41918:	dc800e15 	stw	r18,56(sp)
   4191c:	dc400d15 	stw	r17,52(sp)
   41920:	1442fa16 	blt	r2,r17,4250c <___vfprintf_internal_r+0x14e8>
   41924:	a8c00204 	addi	r3,r21,8
   41928:	d8800517 	ldw	r2,20(sp)
   4192c:	d9014717 	ldw	r4,1308(sp)
   41930:	11015c0e 	bge	r2,r4,41ea4 <___vfprintf_internal_r+0xe80>
   41934:	dc400d17 	ldw	r17,52(sp)
   41938:	d9814917 	ldw	r6,1316(sp)
   4193c:	00800044 	movi	r2,1
   41940:	94800044 	addi	r18,r18,1
   41944:	8c400044 	addi	r17,r17,1
   41948:	18800115 	stw	r2,4(r3)
   4194c:	008001c4 	movi	r2,7
   41950:	19800015 	stw	r6,0(r3)
   41954:	dc800e15 	stw	r18,56(sp)
   41958:	dc400d15 	stw	r17,52(sp)
   4195c:	14431016 	blt	r2,r17,425a0 <___vfprintf_internal_r+0x157c>
   41960:	18c00204 	addi	r3,r3,8
   41964:	d8814717 	ldw	r2,1308(sp)
   41968:	143fffc4 	addi	r16,r2,-1
   4196c:	043f2b0e 	bge	zero,r16,4161c <___vfprintf_internal_r+0x5f8>
   41970:	00800404 	movi	r2,16
   41974:	1402a20e 	bge	r2,r16,42400 <___vfprintf_internal_r+0x13dc>
   41978:	dc400d17 	ldw	r17,52(sp)
   4197c:	1027883a 	mov	r19,r2
   41980:	07000174 	movhi	fp,5
   41984:	e735a084 	addi	fp,fp,-10622
   41988:	050001c4 	movi	r20,7
   4198c:	00000306 	br	4199c <___vfprintf_internal_r+0x978>
   41990:	18c00204 	addi	r3,r3,8
   41994:	843ffc04 	addi	r16,r16,-16
   41998:	9c029c0e 	bge	r19,r16,4240c <___vfprintf_internal_r+0x13e8>
   4199c:	94800404 	addi	r18,r18,16
   419a0:	8c400044 	addi	r17,r17,1
   419a4:	1f000015 	stw	fp,0(r3)
   419a8:	1cc00115 	stw	r19,4(r3)
   419ac:	dc800e15 	stw	r18,56(sp)
   419b0:	dc400d15 	stw	r17,52(sp)
   419b4:	a47ff60e 	bge	r20,r17,41990 <___vfprintf_internal_r+0x96c>
   419b8:	d9014f17 	ldw	r4,1340(sp)
   419bc:	b00b883a 	mov	r5,r22
   419c0:	d9800c04 	addi	r6,sp,48
   419c4:	0040fcc0 	call	40fcc <__sprint_r>
   419c8:	103f4e1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   419cc:	dc800e17 	ldw	r18,56(sp)
   419d0:	dc400d17 	ldw	r17,52(sp)
   419d4:	d8c01904 	addi	r3,sp,100
   419d8:	003fee06 	br	41994 <___vfprintf_internal_r+0x970>
   419dc:	d8802c0b 	ldhu	r2,176(sp)
   419e0:	00ffffc4 	movi	r3,-1
   419e4:	d8c14b15 	stw	r3,1324(sp)
   419e8:	1080100c 	andi	r2,r2,64
   419ec:	103dcc1e 	bne	r2,zero,41120 <___vfprintf_internal_r+0xfc>
   419f0:	003dce06 	br	4112c <___vfprintf_internal_r+0x108>
   419f4:	d9014f17 	ldw	r4,1340(sp)
   419f8:	b00b883a 	mov	r5,r22
   419fc:	d9800c04 	addi	r6,sp,48
   41a00:	0040fcc0 	call	40fcc <__sprint_r>
   41a04:	103f3f1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41a08:	dc800e17 	ldw	r18,56(sp)
   41a0c:	003f2e06 	br	416c8 <___vfprintf_internal_r+0x6a4>
   41a10:	d9414c17 	ldw	r5,1328(sp)
   41a14:	29400414 	ori	r5,r5,16
   41a18:	d9414c15 	stw	r5,1328(sp)
   41a1c:	d9814c17 	ldw	r6,1328(sp)
   41a20:	3080080c 	andi	r2,r6,32
   41a24:	10014f1e 	bne	r2,zero,41f64 <___vfprintf_internal_r+0xf40>
   41a28:	d8c14c17 	ldw	r3,1328(sp)
   41a2c:	1880040c 	andi	r2,r3,16
   41a30:	1002ea1e 	bne	r2,zero,425dc <___vfprintf_internal_r+0x15b8>
   41a34:	d9014c17 	ldw	r4,1328(sp)
   41a38:	2080100c 	andi	r2,r4,64
   41a3c:	1002e726 	beq	r2,zero,425dc <___vfprintf_internal_r+0x15b8>
   41a40:	3880000f 	ldh	r2,0(r7)
   41a44:	39c00104 	addi	r7,r7,4
   41a48:	d9c14015 	stw	r7,1280(sp)
   41a4c:	1023d7fa 	srai	r17,r2,31
   41a50:	1021883a 	mov	r16,r2
   41a54:	88037216 	blt	r17,zero,42820 <___vfprintf_internal_r+0x17fc>
   41a58:	01000044 	movi	r4,1
   41a5c:	98000416 	blt	r19,zero,41a70 <___vfprintf_internal_r+0xa4c>
   41a60:	d8c14c17 	ldw	r3,1328(sp)
   41a64:	00bfdfc4 	movi	r2,-129
   41a68:	1886703a 	and	r3,r3,r2
   41a6c:	d8c14c15 	stw	r3,1328(sp)
   41a70:	8444b03a 	or	r2,r16,r17
   41a74:	1002261e 	bne	r2,zero,42310 <___vfprintf_internal_r+0x12ec>
   41a78:	9802251e 	bne	r19,zero,42310 <___vfprintf_internal_r+0x12ec>
   41a7c:	20803fcc 	andi	r2,r4,255
   41a80:	10029b26 	beq	r2,zero,424f0 <___vfprintf_internal_r+0x14cc>
   41a84:	d8c01904 	addi	r3,sp,100
   41a88:	dd000f04 	addi	r20,sp,60
   41a8c:	d8c14115 	stw	r3,1284(sp)
   41a90:	d8c14117 	ldw	r3,1284(sp)
   41a94:	dcc14515 	stw	r19,1300(sp)
   41a98:	a0c5c83a 	sub	r2,r20,r3
   41a9c:	11c00a04 	addi	r7,r2,40
   41aa0:	99c0010e 	bge	r19,r7,41aa8 <___vfprintf_internal_r+0xa84>
   41aa4:	d9c14515 	stw	r7,1300(sp)
   41aa8:	dcc14615 	stw	r19,1304(sp)
   41aac:	d8800407 	ldb	r2,16(sp)
   41ab0:	103e4c26 	beq	r2,zero,413e4 <___vfprintf_internal_r+0x3c0>
   41ab4:	d8814517 	ldw	r2,1300(sp)
   41ab8:	10800044 	addi	r2,r2,1
   41abc:	d8814515 	stw	r2,1300(sp)
   41ac0:	003e4806 	br	413e4 <___vfprintf_internal_r+0x3c0>
   41ac4:	d9814c17 	ldw	r6,1328(sp)
   41ac8:	31800414 	ori	r6,r6,16
   41acc:	d9814c15 	stw	r6,1328(sp)
   41ad0:	d8c14c17 	ldw	r3,1328(sp)
   41ad4:	1880080c 	andi	r2,r3,32
   41ad8:	1001271e 	bne	r2,zero,41f78 <___vfprintf_internal_r+0xf54>
   41adc:	d9414c17 	ldw	r5,1328(sp)
   41ae0:	2880040c 	andi	r2,r5,16
   41ae4:	1002b61e 	bne	r2,zero,425c0 <___vfprintf_internal_r+0x159c>
   41ae8:	d9814c17 	ldw	r6,1328(sp)
   41aec:	3080100c 	andi	r2,r6,64
   41af0:	1002b326 	beq	r2,zero,425c0 <___vfprintf_internal_r+0x159c>
   41af4:	3c00000b 	ldhu	r16,0(r7)
   41af8:	0009883a 	mov	r4,zero
   41afc:	39c00104 	addi	r7,r7,4
   41b00:	0023883a 	mov	r17,zero
   41b04:	d9c14015 	stw	r7,1280(sp)
   41b08:	d8000405 	stb	zero,16(sp)
   41b0c:	003fd306 	br	41a5c <___vfprintf_internal_r+0xa38>
   41b10:	d9014c17 	ldw	r4,1328(sp)
   41b14:	21000414 	ori	r4,r4,16
   41b18:	d9014c15 	stw	r4,1328(sp)
   41b1c:	d9414c17 	ldw	r5,1328(sp)
   41b20:	2880080c 	andi	r2,r5,32
   41b24:	1001081e 	bne	r2,zero,41f48 <___vfprintf_internal_r+0xf24>
   41b28:	d8c14c17 	ldw	r3,1328(sp)
   41b2c:	1880040c 	andi	r2,r3,16
   41b30:	1002b01e 	bne	r2,zero,425f4 <___vfprintf_internal_r+0x15d0>
   41b34:	d9014c17 	ldw	r4,1328(sp)
   41b38:	2080100c 	andi	r2,r4,64
   41b3c:	1002ad26 	beq	r2,zero,425f4 <___vfprintf_internal_r+0x15d0>
   41b40:	3c00000b 	ldhu	r16,0(r7)
   41b44:	01000044 	movi	r4,1
   41b48:	39c00104 	addi	r7,r7,4
   41b4c:	0023883a 	mov	r17,zero
   41b50:	d9c14015 	stw	r7,1280(sp)
   41b54:	d8000405 	stb	zero,16(sp)
   41b58:	003fc006 	br	41a5c <___vfprintf_internal_r+0xa38>
   41b5c:	d9014f17 	ldw	r4,1340(sp)
   41b60:	b00b883a 	mov	r5,r22
   41b64:	d9800c04 	addi	r6,sp,48
   41b68:	0040fcc0 	call	40fcc <__sprint_r>
   41b6c:	103ee51e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41b70:	dc800e17 	ldw	r18,56(sp)
   41b74:	d8c01904 	addi	r3,sp,100
   41b78:	d9814c17 	ldw	r6,1328(sp)
   41b7c:	3080004c 	andi	r2,r6,1
   41b80:	1005003a 	cmpeq	r2,r2,zero
   41b84:	103ea51e 	bne	r2,zero,4161c <___vfprintf_internal_r+0x5f8>
   41b88:	00800044 	movi	r2,1
   41b8c:	dc400d17 	ldw	r17,52(sp)
   41b90:	18800115 	stw	r2,4(r3)
   41b94:	d8814917 	ldw	r2,1316(sp)
   41b98:	94800044 	addi	r18,r18,1
   41b9c:	8c400044 	addi	r17,r17,1
   41ba0:	18800015 	stw	r2,0(r3)
   41ba4:	008001c4 	movi	r2,7
   41ba8:	dc800e15 	stw	r18,56(sp)
   41bac:	dc400d15 	stw	r17,52(sp)
   41bb0:	14421e0e 	bge	r2,r17,4242c <___vfprintf_internal_r+0x1408>
   41bb4:	d9014f17 	ldw	r4,1340(sp)
   41bb8:	b00b883a 	mov	r5,r22
   41bbc:	d9800c04 	addi	r6,sp,48
   41bc0:	0040fcc0 	call	40fcc <__sprint_r>
   41bc4:	103ecf1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41bc8:	dc800e17 	ldw	r18,56(sp)
   41bcc:	d8c01904 	addi	r3,sp,100
   41bd0:	003e9206 	br	4161c <___vfprintf_internal_r+0x5f8>
   41bd4:	d9014f17 	ldw	r4,1340(sp)
   41bd8:	b00b883a 	mov	r5,r22
   41bdc:	d9800c04 	addi	r6,sp,48
   41be0:	0040fcc0 	call	40fcc <__sprint_r>
   41be4:	103ec026 	beq	r2,zero,416e8 <___vfprintf_internal_r+0x6c4>
   41be8:	003ec606 	br	41704 <___vfprintf_internal_r+0x6e0>
   41bec:	d9014f17 	ldw	r4,1340(sp)
   41bf0:	b00b883a 	mov	r5,r22
   41bf4:	d9800c04 	addi	r6,sp,48
   41bf8:	d9c15115 	stw	r7,1348(sp)
   41bfc:	0040fcc0 	call	40fcc <__sprint_r>
   41c00:	d9c15117 	ldw	r7,1348(sp)
   41c04:	103ebf1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41c08:	dc800e17 	ldw	r18,56(sp)
   41c0c:	dc400d17 	ldw	r17,52(sp)
   41c10:	dd401904 	addi	r21,sp,100
   41c14:	003e7406 	br	415e8 <___vfprintf_internal_r+0x5c4>
   41c18:	d9014f17 	ldw	r4,1340(sp)
   41c1c:	b00b883a 	mov	r5,r22
   41c20:	d9800c04 	addi	r6,sp,48
   41c24:	d9c15115 	stw	r7,1348(sp)
   41c28:	0040fcc0 	call	40fcc <__sprint_r>
   41c2c:	d9c15117 	ldw	r7,1348(sp)
   41c30:	103eb41e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41c34:	dd401904 	addi	r21,sp,100
   41c38:	003d6d06 	br	411f0 <___vfprintf_internal_r+0x1cc>
   41c3c:	d9014f17 	ldw	r4,1340(sp)
   41c40:	b00b883a 	mov	r5,r22
   41c44:	d9800c04 	addi	r6,sp,48
   41c48:	d9c15115 	stw	r7,1348(sp)
   41c4c:	0040fcc0 	call	40fcc <__sprint_r>
   41c50:	d9c15117 	ldw	r7,1348(sp)
   41c54:	103eab1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41c58:	dc800e17 	ldw	r18,56(sp)
   41c5c:	dc400d17 	ldw	r17,52(sp)
   41c60:	dd401904 	addi	r21,sp,100
   41c64:	003e3406 	br	41538 <___vfprintf_internal_r+0x514>
   41c68:	d9014f17 	ldw	r4,1340(sp)
   41c6c:	b00b883a 	mov	r5,r22
   41c70:	d9800c04 	addi	r6,sp,48
   41c74:	d9c15115 	stw	r7,1348(sp)
   41c78:	0040fcc0 	call	40fcc <__sprint_r>
   41c7c:	d9c15117 	ldw	r7,1348(sp)
   41c80:	103ea01e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41c84:	dc800e17 	ldw	r18,56(sp)
   41c88:	dc400d17 	ldw	r17,52(sp)
   41c8c:	dd401904 	addi	r21,sp,100
   41c90:	003e1c06 	br	41504 <___vfprintf_internal_r+0x4e0>
   41c94:	d9014f17 	ldw	r4,1340(sp)
   41c98:	b00b883a 	mov	r5,r22
   41c9c:	d9800c04 	addi	r6,sp,48
   41ca0:	d9c15115 	stw	r7,1348(sp)
   41ca4:	0040fcc0 	call	40fcc <__sprint_r>
   41ca8:	d9c15117 	ldw	r7,1348(sp)
   41cac:	103e951e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41cb0:	dc800e17 	ldw	r18,56(sp)
   41cb4:	dc400d17 	ldw	r17,52(sp)
   41cb8:	dd401904 	addi	r21,sp,100
   41cbc:	003e0406 	br	414d0 <___vfprintf_internal_r+0x4ac>
   41cc0:	d9000517 	ldw	r4,20(sp)
   41cc4:	0102520e 	bge	zero,r4,42610 <___vfprintf_internal_r+0x15ec>
   41cc8:	d9814717 	ldw	r6,1308(sp)
   41ccc:	21807a16 	blt	r4,r6,41eb8 <___vfprintf_internal_r+0xe94>
   41cd0:	d8814117 	ldw	r2,1284(sp)
   41cd4:	91a5883a 	add	r18,r18,r6
   41cd8:	8c400044 	addi	r17,r17,1
   41cdc:	a8800015 	stw	r2,0(r21)
   41ce0:	008001c4 	movi	r2,7
   41ce4:	a9800115 	stw	r6,4(r21)
   41ce8:	dc800e15 	stw	r18,56(sp)
   41cec:	dc400d15 	stw	r17,52(sp)
   41cf0:	1442f616 	blt	r2,r17,428cc <___vfprintf_internal_r+0x18a8>
   41cf4:	a8c00204 	addi	r3,r21,8
   41cf8:	d9414717 	ldw	r5,1308(sp)
   41cfc:	2161c83a 	sub	r16,r4,r5
   41d00:	043f9d0e 	bge	zero,r16,41b78 <___vfprintf_internal_r+0xb54>
   41d04:	00800404 	movi	r2,16
   41d08:	1402130e 	bge	r2,r16,42558 <___vfprintf_internal_r+0x1534>
   41d0c:	dc400d17 	ldw	r17,52(sp)
   41d10:	1027883a 	mov	r19,r2
   41d14:	07000174 	movhi	fp,5
   41d18:	e735a084 	addi	fp,fp,-10622
   41d1c:	050001c4 	movi	r20,7
   41d20:	00000306 	br	41d30 <___vfprintf_internal_r+0xd0c>
   41d24:	18c00204 	addi	r3,r3,8
   41d28:	843ffc04 	addi	r16,r16,-16
   41d2c:	9c020d0e 	bge	r19,r16,42564 <___vfprintf_internal_r+0x1540>
   41d30:	94800404 	addi	r18,r18,16
   41d34:	8c400044 	addi	r17,r17,1
   41d38:	1f000015 	stw	fp,0(r3)
   41d3c:	1cc00115 	stw	r19,4(r3)
   41d40:	dc800e15 	stw	r18,56(sp)
   41d44:	dc400d15 	stw	r17,52(sp)
   41d48:	a47ff60e 	bge	r20,r17,41d24 <___vfprintf_internal_r+0xd00>
   41d4c:	d9014f17 	ldw	r4,1340(sp)
   41d50:	b00b883a 	mov	r5,r22
   41d54:	d9800c04 	addi	r6,sp,48
   41d58:	0040fcc0 	call	40fcc <__sprint_r>
   41d5c:	103e691e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41d60:	dc800e17 	ldw	r18,56(sp)
   41d64:	dc400d17 	ldw	r17,52(sp)
   41d68:	d8c01904 	addi	r3,sp,100
   41d6c:	003fee06 	br	41d28 <___vfprintf_internal_r+0xd04>
   41d70:	d8814717 	ldw	r2,1308(sp)
   41d74:	143fffc4 	addi	r16,r2,-1
   41d78:	043e970e 	bge	zero,r16,417d8 <___vfprintf_internal_r+0x7b4>
   41d7c:	00800404 	movi	r2,16
   41d80:	1400180e 	bge	r2,r16,41de4 <___vfprintf_internal_r+0xdc0>
   41d84:	1029883a 	mov	r20,r2
   41d88:	07000174 	movhi	fp,5
   41d8c:	e735a084 	addi	fp,fp,-10622
   41d90:	054001c4 	movi	r21,7
   41d94:	00000306 	br	41da4 <___vfprintf_internal_r+0xd80>
   41d98:	9cc00204 	addi	r19,r19,8
   41d9c:	843ffc04 	addi	r16,r16,-16
   41da0:	a400120e 	bge	r20,r16,41dec <___vfprintf_internal_r+0xdc8>
   41da4:	94800404 	addi	r18,r18,16
   41da8:	8c400044 	addi	r17,r17,1
   41dac:	9f000015 	stw	fp,0(r19)
   41db0:	9d000115 	stw	r20,4(r19)
   41db4:	dc800e15 	stw	r18,56(sp)
   41db8:	dc400d15 	stw	r17,52(sp)
   41dbc:	ac7ff60e 	bge	r21,r17,41d98 <___vfprintf_internal_r+0xd74>
   41dc0:	d9014f17 	ldw	r4,1340(sp)
   41dc4:	b00b883a 	mov	r5,r22
   41dc8:	d9800c04 	addi	r6,sp,48
   41dcc:	0040fcc0 	call	40fcc <__sprint_r>
   41dd0:	103e4c1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41dd4:	dc800e17 	ldw	r18,56(sp)
   41dd8:	dc400d17 	ldw	r17,52(sp)
   41ddc:	dcc01904 	addi	r19,sp,100
   41de0:	003fee06 	br	41d9c <___vfprintf_internal_r+0xd78>
   41de4:	07000174 	movhi	fp,5
   41de8:	e735a084 	addi	fp,fp,-10622
   41dec:	9425883a 	add	r18,r18,r16
   41df0:	8c400044 	addi	r17,r17,1
   41df4:	008001c4 	movi	r2,7
   41df8:	9f000015 	stw	fp,0(r19)
   41dfc:	9c000115 	stw	r16,4(r19)
   41e00:	dc800e15 	stw	r18,56(sp)
   41e04:	dc400d15 	stw	r17,52(sp)
   41e08:	147e720e 	bge	r2,r17,417d4 <___vfprintf_internal_r+0x7b0>
   41e0c:	d9014f17 	ldw	r4,1340(sp)
   41e10:	b00b883a 	mov	r5,r22
   41e14:	d9800c04 	addi	r6,sp,48
   41e18:	0040fcc0 	call	40fcc <__sprint_r>
   41e1c:	103e391e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41e20:	dc800e17 	ldw	r18,56(sp)
   41e24:	dc400d17 	ldw	r17,52(sp)
   41e28:	dcc01904 	addi	r19,sp,100
   41e2c:	003e6a06 	br	417d8 <___vfprintf_internal_r+0x7b4>
   41e30:	d9014f17 	ldw	r4,1340(sp)
   41e34:	b00b883a 	mov	r5,r22
   41e38:	d9800c04 	addi	r6,sp,48
   41e3c:	d9c15115 	stw	r7,1348(sp)
   41e40:	0040fcc0 	call	40fcc <__sprint_r>
   41e44:	d9c15117 	ldw	r7,1348(sp)
   41e48:	103e2e1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41e4c:	dc800e17 	ldw	r18,56(sp)
   41e50:	dc400d17 	ldw	r17,52(sp)
   41e54:	dd401904 	addi	r21,sp,100
   41e58:	003dba06 	br	41544 <___vfprintf_internal_r+0x520>
   41e5c:	d9014f17 	ldw	r4,1340(sp)
   41e60:	b00b883a 	mov	r5,r22
   41e64:	d9800c04 	addi	r6,sp,48
   41e68:	0040fcc0 	call	40fcc <__sprint_r>
   41e6c:	103e251e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41e70:	dc800e17 	ldw	r18,56(sp)
   41e74:	dc400d17 	ldw	r17,52(sp)
   41e78:	dcc01904 	addi	r19,sp,100
   41e7c:	003e4206 	br	41788 <___vfprintf_internal_r+0x764>
   41e80:	d9014f17 	ldw	r4,1340(sp)
   41e84:	b00b883a 	mov	r5,r22
   41e88:	d9800c04 	addi	r6,sp,48
   41e8c:	0040fcc0 	call	40fcc <__sprint_r>
   41e90:	103e1c1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   41e94:	dc800e17 	ldw	r18,56(sp)
   41e98:	dc400d17 	ldw	r17,52(sp)
   41e9c:	d8c01904 	addi	r3,sp,100
   41ea0:	003e2e06 	br	4175c <___vfprintf_internal_r+0x738>
   41ea4:	d9414c17 	ldw	r5,1328(sp)
   41ea8:	2880004c 	andi	r2,r5,1
   41eac:	1005003a 	cmpeq	r2,r2,zero
   41eb0:	103dda1e 	bne	r2,zero,4161c <___vfprintf_internal_r+0x5f8>
   41eb4:	003e9f06 	br	41934 <___vfprintf_internal_r+0x910>
   41eb8:	d8c14117 	ldw	r3,1284(sp)
   41ebc:	9125883a 	add	r18,r18,r4
   41ec0:	8c400044 	addi	r17,r17,1
   41ec4:	008001c4 	movi	r2,7
   41ec8:	a8c00015 	stw	r3,0(r21)
   41ecc:	a9000115 	stw	r4,4(r21)
   41ed0:	dc800e15 	stw	r18,56(sp)
   41ed4:	dc400d15 	stw	r17,52(sp)
   41ed8:	14426616 	blt	r2,r17,42874 <___vfprintf_internal_r+0x1850>
   41edc:	a8c00204 	addi	r3,r21,8
   41ee0:	d9414917 	ldw	r5,1316(sp)
   41ee4:	00800044 	movi	r2,1
   41ee8:	94800044 	addi	r18,r18,1
   41eec:	8c400044 	addi	r17,r17,1
   41ef0:	18800115 	stw	r2,4(r3)
   41ef4:	008001c4 	movi	r2,7
   41ef8:	19400015 	stw	r5,0(r3)
   41efc:	dc800e15 	stw	r18,56(sp)
   41f00:	dc400d15 	stw	r17,52(sp)
   41f04:	2021883a 	mov	r16,r4
   41f08:	14425016 	blt	r2,r17,4284c <___vfprintf_internal_r+0x1828>
   41f0c:	19400204 	addi	r5,r3,8
   41f10:	d9814717 	ldw	r6,1308(sp)
   41f14:	8c400044 	addi	r17,r17,1
   41f18:	dc400d15 	stw	r17,52(sp)
   41f1c:	3107c83a 	sub	r3,r6,r4
   41f20:	d9014117 	ldw	r4,1284(sp)
   41f24:	90e5883a 	add	r18,r18,r3
   41f28:	28c00115 	stw	r3,4(r5)
   41f2c:	8105883a 	add	r2,r16,r4
   41f30:	28800015 	stw	r2,0(r5)
   41f34:	008001c4 	movi	r2,7
   41f38:	dc800e15 	stw	r18,56(sp)
   41f3c:	147f1d16 	blt	r2,r17,41bb4 <___vfprintf_internal_r+0xb90>
   41f40:	28c00204 	addi	r3,r5,8
   41f44:	003db506 	br	4161c <___vfprintf_internal_r+0x5f8>
   41f48:	3c000017 	ldw	r16,0(r7)
   41f4c:	3c400117 	ldw	r17,4(r7)
   41f50:	39800204 	addi	r6,r7,8
   41f54:	01000044 	movi	r4,1
   41f58:	d9814015 	stw	r6,1280(sp)
   41f5c:	d8000405 	stb	zero,16(sp)
   41f60:	003ebe06 	br	41a5c <___vfprintf_internal_r+0xa38>
   41f64:	3c000017 	ldw	r16,0(r7)
   41f68:	3c400117 	ldw	r17,4(r7)
   41f6c:	38800204 	addi	r2,r7,8
   41f70:	d8814015 	stw	r2,1280(sp)
   41f74:	003eb706 	br	41a54 <___vfprintf_internal_r+0xa30>
   41f78:	3c000017 	ldw	r16,0(r7)
   41f7c:	3c400117 	ldw	r17,4(r7)
   41f80:	39000204 	addi	r4,r7,8
   41f84:	d9014015 	stw	r4,1280(sp)
   41f88:	0009883a 	mov	r4,zero
   41f8c:	d8000405 	stb	zero,16(sp)
   41f90:	003eb206 	br	41a5c <___vfprintf_internal_r+0xa38>
   41f94:	38c00017 	ldw	r3,0(r7)
   41f98:	39c00104 	addi	r7,r7,4
   41f9c:	d8c14a15 	stw	r3,1320(sp)
   41fa0:	1800d10e 	bge	r3,zero,422e8 <___vfprintf_internal_r+0x12c4>
   41fa4:	00c7c83a 	sub	r3,zero,r3
   41fa8:	d8c14a15 	stw	r3,1320(sp)
   41fac:	d9014c17 	ldw	r4,1328(sp)
   41fb0:	b8c00007 	ldb	r3,0(r23)
   41fb4:	21000114 	ori	r4,r4,4
   41fb8:	d9014c15 	stw	r4,1328(sp)
   41fbc:	003c9806 	br	41220 <___vfprintf_internal_r+0x1fc>
   41fc0:	d9814c17 	ldw	r6,1328(sp)
   41fc4:	3080080c 	andi	r2,r6,32
   41fc8:	1001f026 	beq	r2,zero,4278c <___vfprintf_internal_r+0x1768>
   41fcc:	d9014b17 	ldw	r4,1324(sp)
   41fd0:	38800017 	ldw	r2,0(r7)
   41fd4:	39c00104 	addi	r7,r7,4
   41fd8:	d9c14015 	stw	r7,1280(sp)
   41fdc:	2007d7fa 	srai	r3,r4,31
   41fe0:	d9c14017 	ldw	r7,1280(sp)
   41fe4:	11000015 	stw	r4,0(r2)
   41fe8:	10c00115 	stw	r3,4(r2)
   41fec:	003c6906 	br	41194 <___vfprintf_internal_r+0x170>
   41ff0:	b8c00007 	ldb	r3,0(r23)
   41ff4:	00801b04 	movi	r2,108
   41ff8:	18824f26 	beq	r3,r2,42938 <___vfprintf_internal_r+0x1914>
   41ffc:	d9414c17 	ldw	r5,1328(sp)
   42000:	29400414 	ori	r5,r5,16
   42004:	d9414c15 	stw	r5,1328(sp)
   42008:	003c8506 	br	41220 <___vfprintf_internal_r+0x1fc>
   4200c:	d9814c17 	ldw	r6,1328(sp)
   42010:	b8c00007 	ldb	r3,0(r23)
   42014:	31800814 	ori	r6,r6,32
   42018:	d9814c15 	stw	r6,1328(sp)
   4201c:	003c8006 	br	41220 <___vfprintf_internal_r+0x1fc>
   42020:	d8814c17 	ldw	r2,1328(sp)
   42024:	3c000017 	ldw	r16,0(r7)
   42028:	00c01e04 	movi	r3,120
   4202c:	10800094 	ori	r2,r2,2
   42030:	d8814c15 	stw	r2,1328(sp)
   42034:	39c00104 	addi	r7,r7,4
   42038:	01400174 	movhi	r5,5
   4203c:	29758904 	addi	r5,r5,-10716
   42040:	00800c04 	movi	r2,48
   42044:	0023883a 	mov	r17,zero
   42048:	01000084 	movi	r4,2
   4204c:	d9c14015 	stw	r7,1280(sp)
   42050:	d8c14d15 	stw	r3,1332(sp)
   42054:	d9414415 	stw	r5,1296(sp)
   42058:	d8800445 	stb	r2,17(sp)
   4205c:	d8c00485 	stb	r3,18(sp)
   42060:	d8000405 	stb	zero,16(sp)
   42064:	003e7d06 	br	41a5c <___vfprintf_internal_r+0xa38>
   42068:	d8814c17 	ldw	r2,1328(sp)
   4206c:	b8c00007 	ldb	r3,0(r23)
   42070:	10801014 	ori	r2,r2,64
   42074:	d8814c15 	stw	r2,1328(sp)
   42078:	003c6906 	br	41220 <___vfprintf_internal_r+0x1fc>
   4207c:	d9414c17 	ldw	r5,1328(sp)
   42080:	2880020c 	andi	r2,r5,8
   42084:	1001df26 	beq	r2,zero,42804 <___vfprintf_internal_r+0x17e0>
   42088:	39800017 	ldw	r6,0(r7)
   4208c:	38800204 	addi	r2,r7,8
   42090:	d8814015 	stw	r2,1280(sp)
   42094:	d9814215 	stw	r6,1288(sp)
   42098:	39c00117 	ldw	r7,4(r7)
   4209c:	d9c14315 	stw	r7,1292(sp)
   420a0:	d9014217 	ldw	r4,1288(sp)
   420a4:	d9414317 	ldw	r5,1292(sp)
   420a8:	0047b780 	call	47b78 <__isinfd>
   420ac:	10021726 	beq	r2,zero,4290c <___vfprintf_internal_r+0x18e8>
   420b0:	d9014217 	ldw	r4,1288(sp)
   420b4:	d9414317 	ldw	r5,1292(sp)
   420b8:	000d883a 	mov	r6,zero
   420bc:	000f883a 	mov	r7,zero
   420c0:	0049bc00 	call	49bc0 <__ltdf2>
   420c4:	1002ca16 	blt	r2,zero,42bf0 <___vfprintf_internal_r+0x1bcc>
   420c8:	d9414d17 	ldw	r5,1332(sp)
   420cc:	008011c4 	movi	r2,71
   420d0:	11420a16 	blt	r2,r5,428fc <___vfprintf_internal_r+0x18d8>
   420d4:	01800174 	movhi	r6,5
   420d8:	31b58e04 	addi	r6,r6,-10696
   420dc:	d9814115 	stw	r6,1284(sp)
   420e0:	d9014c17 	ldw	r4,1328(sp)
   420e4:	00c000c4 	movi	r3,3
   420e8:	00bfdfc4 	movi	r2,-129
   420ec:	2088703a 	and	r4,r4,r2
   420f0:	180f883a 	mov	r7,r3
   420f4:	d8c14515 	stw	r3,1300(sp)
   420f8:	d9014c15 	stw	r4,1328(sp)
   420fc:	d8014615 	stw	zero,1304(sp)
   42100:	003e6a06 	br	41aac <___vfprintf_internal_r+0xa88>
   42104:	38800017 	ldw	r2,0(r7)
   42108:	00c00044 	movi	r3,1
   4210c:	39c00104 	addi	r7,r7,4
   42110:	d9c14015 	stw	r7,1280(sp)
   42114:	d9000f04 	addi	r4,sp,60
   42118:	180f883a 	mov	r7,r3
   4211c:	d8c14515 	stw	r3,1300(sp)
   42120:	d9014115 	stw	r4,1284(sp)
   42124:	d8800f05 	stb	r2,60(sp)
   42128:	d8000405 	stb	zero,16(sp)
   4212c:	003cac06 	br	413e0 <___vfprintf_internal_r+0x3bc>
   42130:	01400174 	movhi	r5,5
   42134:	29759404 	addi	r5,r5,-10672
   42138:	d9414415 	stw	r5,1296(sp)
   4213c:	d9814c17 	ldw	r6,1328(sp)
   42140:	3080080c 	andi	r2,r6,32
   42144:	1000f926 	beq	r2,zero,4252c <___vfprintf_internal_r+0x1508>
   42148:	3c000017 	ldw	r16,0(r7)
   4214c:	3c400117 	ldw	r17,4(r7)
   42150:	38800204 	addi	r2,r7,8
   42154:	d8814015 	stw	r2,1280(sp)
   42158:	d9414c17 	ldw	r5,1328(sp)
   4215c:	2880004c 	andi	r2,r5,1
   42160:	1005003a 	cmpeq	r2,r2,zero
   42164:	1000b31e 	bne	r2,zero,42434 <___vfprintf_internal_r+0x1410>
   42168:	8444b03a 	or	r2,r16,r17
   4216c:	1000b126 	beq	r2,zero,42434 <___vfprintf_internal_r+0x1410>
   42170:	d9814d17 	ldw	r6,1332(sp)
   42174:	29400094 	ori	r5,r5,2
   42178:	00800c04 	movi	r2,48
   4217c:	01000084 	movi	r4,2
   42180:	d9414c15 	stw	r5,1328(sp)
   42184:	d8800445 	stb	r2,17(sp)
   42188:	d9800485 	stb	r6,18(sp)
   4218c:	d8000405 	stb	zero,16(sp)
   42190:	003e3206 	br	41a5c <___vfprintf_internal_r+0xa38>
   42194:	01800174 	movhi	r6,5
   42198:	31b58904 	addi	r6,r6,-10716
   4219c:	d9814415 	stw	r6,1296(sp)
   421a0:	003fe606 	br	4213c <___vfprintf_internal_r+0x1118>
   421a4:	00800ac4 	movi	r2,43
   421a8:	d8800405 	stb	r2,16(sp)
   421ac:	b8c00007 	ldb	r3,0(r23)
   421b0:	003c1b06 	br	41220 <___vfprintf_internal_r+0x1fc>
   421b4:	d8814c17 	ldw	r2,1328(sp)
   421b8:	b8c00007 	ldb	r3,0(r23)
   421bc:	10800054 	ori	r2,r2,1
   421c0:	d8814c15 	stw	r2,1328(sp)
   421c4:	003c1606 	br	41220 <___vfprintf_internal_r+0x1fc>
   421c8:	d8800407 	ldb	r2,16(sp)
   421cc:	1000461e 	bne	r2,zero,422e8 <___vfprintf_internal_r+0x12c4>
   421d0:	00800804 	movi	r2,32
   421d4:	d8800405 	stb	r2,16(sp)
   421d8:	b8c00007 	ldb	r3,0(r23)
   421dc:	003c1006 	br	41220 <___vfprintf_internal_r+0x1fc>
   421e0:	d9814c17 	ldw	r6,1328(sp)
   421e4:	b8c00007 	ldb	r3,0(r23)
   421e8:	31800214 	ori	r6,r6,8
   421ec:	d9814c15 	stw	r6,1328(sp)
   421f0:	003c0b06 	br	41220 <___vfprintf_internal_r+0x1fc>
   421f4:	0007883a 	mov	r3,zero
   421f8:	01000244 	movi	r4,9
   421fc:	188002a4 	muli	r2,r3,10
   42200:	b8c00007 	ldb	r3,0(r23)
   42204:	d9814d17 	ldw	r6,1332(sp)
   42208:	bdc00044 	addi	r23,r23,1
   4220c:	d8c14d15 	stw	r3,1332(sp)
   42210:	d9414d17 	ldw	r5,1332(sp)
   42214:	3085883a 	add	r2,r6,r2
   42218:	10fff404 	addi	r3,r2,-48
   4221c:	28bff404 	addi	r2,r5,-48
   42220:	20bff62e 	bgeu	r4,r2,421fc <___vfprintf_internal_r+0x11d8>
   42224:	d8c14a15 	stw	r3,1320(sp)
   42228:	003bff06 	br	41228 <___vfprintf_internal_r+0x204>
   4222c:	d9414c17 	ldw	r5,1328(sp)
   42230:	b8c00007 	ldb	r3,0(r23)
   42234:	29402014 	ori	r5,r5,128
   42238:	d9414c15 	stw	r5,1328(sp)
   4223c:	003bf806 	br	41220 <___vfprintf_internal_r+0x1fc>
   42240:	b8c00007 	ldb	r3,0(r23)
   42244:	00800a84 	movi	r2,42
   42248:	bdc00044 	addi	r23,r23,1
   4224c:	18831526 	beq	r3,r2,42ea4 <___vfprintf_internal_r+0x1e80>
   42250:	d8c14d15 	stw	r3,1332(sp)
   42254:	18bff404 	addi	r2,r3,-48
   42258:	00c00244 	movi	r3,9
   4225c:	18827836 	bltu	r3,r2,42c40 <___vfprintf_internal_r+0x1c1c>
   42260:	000d883a 	mov	r6,zero
   42264:	308002a4 	muli	r2,r6,10
   42268:	b9800007 	ldb	r6,0(r23)
   4226c:	d9414d17 	ldw	r5,1332(sp)
   42270:	bdc00044 	addi	r23,r23,1
   42274:	d9814d15 	stw	r6,1332(sp)
   42278:	d9014d17 	ldw	r4,1332(sp)
   4227c:	1145883a 	add	r2,r2,r5
   42280:	11bff404 	addi	r6,r2,-48
   42284:	20bff404 	addi	r2,r4,-48
   42288:	18bff62e 	bgeu	r3,r2,42264 <___vfprintf_internal_r+0x1240>
   4228c:	3027883a 	mov	r19,r6
   42290:	303be50e 	bge	r6,zero,41228 <___vfprintf_internal_r+0x204>
   42294:	04ffffc4 	movi	r19,-1
   42298:	003be306 	br	41228 <___vfprintf_internal_r+0x204>
   4229c:	d8000405 	stb	zero,16(sp)
   422a0:	39800017 	ldw	r6,0(r7)
   422a4:	39c00104 	addi	r7,r7,4
   422a8:	d9c14015 	stw	r7,1280(sp)
   422ac:	d9814115 	stw	r6,1284(sp)
   422b0:	3001c926 	beq	r6,zero,429d8 <___vfprintf_internal_r+0x19b4>
   422b4:	98000e16 	blt	r19,zero,422f0 <___vfprintf_internal_r+0x12cc>
   422b8:	d9014117 	ldw	r4,1284(sp)
   422bc:	000b883a 	mov	r5,zero
   422c0:	980d883a 	mov	r6,r19
   422c4:	00462940 	call	46294 <memchr>
   422c8:	10025926 	beq	r2,zero,42c30 <___vfprintf_internal_r+0x1c0c>
   422cc:	d8c14117 	ldw	r3,1284(sp)
   422d0:	10cfc83a 	sub	r7,r2,r3
   422d4:	99c19e16 	blt	r19,r7,42950 <___vfprintf_internal_r+0x192c>
   422d8:	d9c14515 	stw	r7,1300(sp)
   422dc:	38000916 	blt	r7,zero,42304 <___vfprintf_internal_r+0x12e0>
   422e0:	d8014615 	stw	zero,1304(sp)
   422e4:	003df106 	br	41aac <___vfprintf_internal_r+0xa88>
   422e8:	b8c00007 	ldb	r3,0(r23)
   422ec:	003bcc06 	br	41220 <___vfprintf_internal_r+0x1fc>
   422f0:	d9014117 	ldw	r4,1284(sp)
   422f4:	0040f580 	call	40f58 <strlen>
   422f8:	d8814515 	stw	r2,1300(sp)
   422fc:	100f883a 	mov	r7,r2
   42300:	103ff70e 	bge	r2,zero,422e0 <___vfprintf_internal_r+0x12bc>
   42304:	d8014515 	stw	zero,1300(sp)
   42308:	d8014615 	stw	zero,1304(sp)
   4230c:	003de706 	br	41aac <___vfprintf_internal_r+0xa88>
   42310:	20c03fcc 	andi	r3,r4,255
   42314:	00800044 	movi	r2,1
   42318:	18802d26 	beq	r3,r2,423d0 <___vfprintf_internal_r+0x13ac>
   4231c:	18800e36 	bltu	r3,r2,42358 <___vfprintf_internal_r+0x1334>
   42320:	00800084 	movi	r2,2
   42324:	1880fa26 	beq	r3,r2,42710 <___vfprintf_internal_r+0x16ec>
   42328:	01000174 	movhi	r4,5
   4232c:	21359904 	addi	r4,r4,-10652
   42330:	0040f580 	call	40f58 <strlen>
   42334:	100f883a 	mov	r7,r2
   42338:	dcc14515 	stw	r19,1300(sp)
   4233c:	9880010e 	bge	r19,r2,42344 <___vfprintf_internal_r+0x1320>
   42340:	d8814515 	stw	r2,1300(sp)
   42344:	00800174 	movhi	r2,5
   42348:	10b59904 	addi	r2,r2,-10652
   4234c:	dcc14615 	stw	r19,1304(sp)
   42350:	d8814115 	stw	r2,1284(sp)
   42354:	003dd506 	br	41aac <___vfprintf_internal_r+0xa88>
   42358:	d9401904 	addi	r5,sp,100
   4235c:	dd000f04 	addi	r20,sp,60
   42360:	d9414115 	stw	r5,1284(sp)
   42364:	880a977a 	slli	r5,r17,29
   42368:	d9814117 	ldw	r6,1284(sp)
   4236c:	8004d0fa 	srli	r2,r16,3
   42370:	8806d0fa 	srli	r3,r17,3
   42374:	810001cc 	andi	r4,r16,7
   42378:	2884b03a 	or	r2,r5,r2
   4237c:	31bfffc4 	addi	r6,r6,-1
   42380:	21000c04 	addi	r4,r4,48
   42384:	d9814115 	stw	r6,1284(sp)
   42388:	10cab03a 	or	r5,r2,r3
   4238c:	31000005 	stb	r4,0(r6)
   42390:	1021883a 	mov	r16,r2
   42394:	1823883a 	mov	r17,r3
   42398:	283ff21e 	bne	r5,zero,42364 <___vfprintf_internal_r+0x1340>
   4239c:	d8c14c17 	ldw	r3,1328(sp)
   423a0:	1880004c 	andi	r2,r3,1
   423a4:	1005003a 	cmpeq	r2,r2,zero
   423a8:	103db91e 	bne	r2,zero,41a90 <___vfprintf_internal_r+0xa6c>
   423ac:	20803fcc 	andi	r2,r4,255
   423b0:	1080201c 	xori	r2,r2,128
   423b4:	10bfe004 	addi	r2,r2,-128
   423b8:	00c00c04 	movi	r3,48
   423bc:	10fdb426 	beq	r2,r3,41a90 <___vfprintf_internal_r+0xa6c>
   423c0:	31bfffc4 	addi	r6,r6,-1
   423c4:	d9814115 	stw	r6,1284(sp)
   423c8:	30c00005 	stb	r3,0(r6)
   423cc:	003db006 	br	41a90 <___vfprintf_internal_r+0xa6c>
   423d0:	88800068 	cmpgeui	r2,r17,1
   423d4:	10002c1e 	bne	r2,zero,42488 <___vfprintf_internal_r+0x1464>
   423d8:	8800021e 	bne	r17,zero,423e4 <___vfprintf_internal_r+0x13c0>
   423dc:	00800244 	movi	r2,9
   423e0:	14002936 	bltu	r2,r16,42488 <___vfprintf_internal_r+0x1464>
   423e4:	d90018c4 	addi	r4,sp,99
   423e8:	dd000f04 	addi	r20,sp,60
   423ec:	d9014115 	stw	r4,1284(sp)
   423f0:	d9014117 	ldw	r4,1284(sp)
   423f4:	80800c04 	addi	r2,r16,48
   423f8:	20800005 	stb	r2,0(r4)
   423fc:	003da406 	br	41a90 <___vfprintf_internal_r+0xa6c>
   42400:	dc400d17 	ldw	r17,52(sp)
   42404:	07000174 	movhi	fp,5
   42408:	e735a084 	addi	fp,fp,-10622
   4240c:	9425883a 	add	r18,r18,r16
   42410:	8c400044 	addi	r17,r17,1
   42414:	008001c4 	movi	r2,7
   42418:	1f000015 	stw	fp,0(r3)
   4241c:	1c000115 	stw	r16,4(r3)
   42420:	dc800e15 	stw	r18,56(sp)
   42424:	dc400d15 	stw	r17,52(sp)
   42428:	147de216 	blt	r2,r17,41bb4 <___vfprintf_internal_r+0xb90>
   4242c:	18c00204 	addi	r3,r3,8
   42430:	003c7a06 	br	4161c <___vfprintf_internal_r+0x5f8>
   42434:	01000084 	movi	r4,2
   42438:	d8000405 	stb	zero,16(sp)
   4243c:	003d8706 	br	41a5c <___vfprintf_internal_r+0xa38>
   42440:	d9814c17 	ldw	r6,1328(sp)
   42444:	30c4703a 	and	r2,r6,r3
   42448:	1005003a 	cmpeq	r2,r2,zero
   4244c:	103cb926 	beq	r2,zero,41734 <___vfprintf_internal_r+0x710>
   42450:	d9014117 	ldw	r4,1284(sp)
   42454:	94800044 	addi	r18,r18,1
   42458:	8c400044 	addi	r17,r17,1
   4245c:	008001c4 	movi	r2,7
   42460:	a9000015 	stw	r4,0(r21)
   42464:	a8c00115 	stw	r3,4(r21)
   42468:	dc800e15 	stw	r18,56(sp)
   4246c:	dc400d15 	stw	r17,52(sp)
   42470:	147e6616 	blt	r2,r17,41e0c <___vfprintf_internal_r+0xde8>
   42474:	acc00204 	addi	r19,r21,8
   42478:	003cd706 	br	417d8 <___vfprintf_internal_r+0x7b4>
   4247c:	07000174 	movhi	fp,5
   42480:	e735a084 	addi	fp,fp,-10622
   42484:	003c4f06 	br	415c4 <___vfprintf_internal_r+0x5a0>
   42488:	dd000f04 	addi	r20,sp,60
   4248c:	dc801904 	addi	r18,sp,100
   42490:	8009883a 	mov	r4,r16
   42494:	880b883a 	mov	r5,r17
   42498:	01800284 	movi	r6,10
   4249c:	000f883a 	mov	r7,zero
   424a0:	00488d00 	call	488d0 <__umoddi3>
   424a4:	12000c04 	addi	r8,r2,48
   424a8:	94bfffc4 	addi	r18,r18,-1
   424ac:	8009883a 	mov	r4,r16
   424b0:	880b883a 	mov	r5,r17
   424b4:	01800284 	movi	r6,10
   424b8:	000f883a 	mov	r7,zero
   424bc:	92000005 	stb	r8,0(r18)
   424c0:	00482f40 	call	482f4 <__udivdi3>
   424c4:	1009883a 	mov	r4,r2
   424c8:	1021883a 	mov	r16,r2
   424cc:	18800068 	cmpgeui	r2,r3,1
   424d0:	1823883a 	mov	r17,r3
   424d4:	103fee1e 	bne	r2,zero,42490 <___vfprintf_internal_r+0x146c>
   424d8:	1800021e 	bne	r3,zero,424e4 <___vfprintf_internal_r+0x14c0>
   424dc:	00800244 	movi	r2,9
   424e0:	113feb36 	bltu	r2,r4,42490 <___vfprintf_internal_r+0x146c>
   424e4:	94bfffc4 	addi	r18,r18,-1
   424e8:	dc814115 	stw	r18,1284(sp)
   424ec:	003fc006 	br	423f0 <___vfprintf_internal_r+0x13cc>
   424f0:	d9014c17 	ldw	r4,1328(sp)
   424f4:	2080004c 	andi	r2,r4,1
   424f8:	10009a1e 	bne	r2,zero,42764 <___vfprintf_internal_r+0x1740>
   424fc:	d9401904 	addi	r5,sp,100
   42500:	dd000f04 	addi	r20,sp,60
   42504:	d9414115 	stw	r5,1284(sp)
   42508:	003d6106 	br	41a90 <___vfprintf_internal_r+0xa6c>
   4250c:	d9014f17 	ldw	r4,1340(sp)
   42510:	b00b883a 	mov	r5,r22
   42514:	d9800c04 	addi	r6,sp,48
   42518:	0040fcc0 	call	40fcc <__sprint_r>
   4251c:	103c791e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   42520:	dc800e17 	ldw	r18,56(sp)
   42524:	d8c01904 	addi	r3,sp,100
   42528:	003cff06 	br	41928 <___vfprintf_internal_r+0x904>
   4252c:	d8c14c17 	ldw	r3,1328(sp)
   42530:	1880040c 	andi	r2,r3,16
   42534:	1000711e 	bne	r2,zero,426fc <___vfprintf_internal_r+0x16d8>
   42538:	d9014c17 	ldw	r4,1328(sp)
   4253c:	2080100c 	andi	r2,r4,64
   42540:	10006e26 	beq	r2,zero,426fc <___vfprintf_internal_r+0x16d8>
   42544:	3c00000b 	ldhu	r16,0(r7)
   42548:	0023883a 	mov	r17,zero
   4254c:	39c00104 	addi	r7,r7,4
   42550:	d9c14015 	stw	r7,1280(sp)
   42554:	003f0006 	br	42158 <___vfprintf_internal_r+0x1134>
   42558:	dc400d17 	ldw	r17,52(sp)
   4255c:	07000174 	movhi	fp,5
   42560:	e735a084 	addi	fp,fp,-10622
   42564:	9425883a 	add	r18,r18,r16
   42568:	8c400044 	addi	r17,r17,1
   4256c:	008001c4 	movi	r2,7
   42570:	1f000015 	stw	fp,0(r3)
   42574:	1c000115 	stw	r16,4(r3)
   42578:	dc800e15 	stw	r18,56(sp)
   4257c:	dc400d15 	stw	r17,52(sp)
   42580:	147d7616 	blt	r2,r17,41b5c <___vfprintf_internal_r+0xb38>
   42584:	18c00204 	addi	r3,r3,8
   42588:	003d7b06 	br	41b78 <___vfprintf_internal_r+0xb54>
   4258c:	dc800e17 	ldw	r18,56(sp)
   42590:	dc400d17 	ldw	r17,52(sp)
   42594:	07000174 	movhi	fp,5
   42598:	e735a484 	addi	fp,fp,-10606
   4259c:	003bc006 	br	414a0 <___vfprintf_internal_r+0x47c>
   425a0:	d9014f17 	ldw	r4,1340(sp)
   425a4:	b00b883a 	mov	r5,r22
   425a8:	d9800c04 	addi	r6,sp,48
   425ac:	0040fcc0 	call	40fcc <__sprint_r>
   425b0:	103c541e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   425b4:	dc800e17 	ldw	r18,56(sp)
   425b8:	d8c01904 	addi	r3,sp,100
   425bc:	003ce906 	br	41964 <___vfprintf_internal_r+0x940>
   425c0:	3c000017 	ldw	r16,0(r7)
   425c4:	0009883a 	mov	r4,zero
   425c8:	39c00104 	addi	r7,r7,4
   425cc:	0023883a 	mov	r17,zero
   425d0:	d9c14015 	stw	r7,1280(sp)
   425d4:	d8000405 	stb	zero,16(sp)
   425d8:	003d2006 	br	41a5c <___vfprintf_internal_r+0xa38>
   425dc:	38800017 	ldw	r2,0(r7)
   425e0:	39c00104 	addi	r7,r7,4
   425e4:	d9c14015 	stw	r7,1280(sp)
   425e8:	1023d7fa 	srai	r17,r2,31
   425ec:	1021883a 	mov	r16,r2
   425f0:	003d1806 	br	41a54 <___vfprintf_internal_r+0xa30>
   425f4:	3c000017 	ldw	r16,0(r7)
   425f8:	01000044 	movi	r4,1
   425fc:	39c00104 	addi	r7,r7,4
   42600:	0023883a 	mov	r17,zero
   42604:	d9c14015 	stw	r7,1280(sp)
   42608:	d8000405 	stb	zero,16(sp)
   4260c:	003d1306 	br	41a5c <___vfprintf_internal_r+0xa38>
   42610:	00800174 	movhi	r2,5
   42614:	10b5a004 	addi	r2,r2,-10624
   42618:	94800044 	addi	r18,r18,1
   4261c:	8c400044 	addi	r17,r17,1
   42620:	a8800015 	stw	r2,0(r21)
   42624:	00c00044 	movi	r3,1
   42628:	008001c4 	movi	r2,7
   4262c:	a8c00115 	stw	r3,4(r21)
   42630:	dc800e15 	stw	r18,56(sp)
   42634:	dc400d15 	stw	r17,52(sp)
   42638:	1440ca16 	blt	r2,r17,42964 <___vfprintf_internal_r+0x1940>
   4263c:	a8c00204 	addi	r3,r21,8
   42640:	2000061e 	bne	r4,zero,4265c <___vfprintf_internal_r+0x1638>
   42644:	d9414717 	ldw	r5,1308(sp)
   42648:	2800041e 	bne	r5,zero,4265c <___vfprintf_internal_r+0x1638>
   4264c:	d9814c17 	ldw	r6,1328(sp)
   42650:	3080004c 	andi	r2,r6,1
   42654:	1005003a 	cmpeq	r2,r2,zero
   42658:	103bf01e 	bne	r2,zero,4161c <___vfprintf_internal_r+0x5f8>
   4265c:	00800044 	movi	r2,1
   42660:	dc400d17 	ldw	r17,52(sp)
   42664:	18800115 	stw	r2,4(r3)
   42668:	d8814917 	ldw	r2,1316(sp)
   4266c:	94800044 	addi	r18,r18,1
   42670:	8c400044 	addi	r17,r17,1
   42674:	18800015 	stw	r2,0(r3)
   42678:	008001c4 	movi	r2,7
   4267c:	dc800e15 	stw	r18,56(sp)
   42680:	dc400d15 	stw	r17,52(sp)
   42684:	1440ca16 	blt	r2,r17,429b0 <___vfprintf_internal_r+0x198c>
   42688:	18c00204 	addi	r3,r3,8
   4268c:	0121c83a 	sub	r16,zero,r4
   42690:	0400500e 	bge	zero,r16,427d4 <___vfprintf_internal_r+0x17b0>
   42694:	00800404 	movi	r2,16
   42698:	1400800e 	bge	r2,r16,4289c <___vfprintf_internal_r+0x1878>
   4269c:	1027883a 	mov	r19,r2
   426a0:	07000174 	movhi	fp,5
   426a4:	e735a084 	addi	fp,fp,-10622
   426a8:	050001c4 	movi	r20,7
   426ac:	00000306 	br	426bc <___vfprintf_internal_r+0x1698>
   426b0:	18c00204 	addi	r3,r3,8
   426b4:	843ffc04 	addi	r16,r16,-16
   426b8:	9c007a0e 	bge	r19,r16,428a4 <___vfprintf_internal_r+0x1880>
   426bc:	94800404 	addi	r18,r18,16
   426c0:	8c400044 	addi	r17,r17,1
   426c4:	1f000015 	stw	fp,0(r3)
   426c8:	1cc00115 	stw	r19,4(r3)
   426cc:	dc800e15 	stw	r18,56(sp)
   426d0:	dc400d15 	stw	r17,52(sp)
   426d4:	a47ff60e 	bge	r20,r17,426b0 <___vfprintf_internal_r+0x168c>
   426d8:	d9014f17 	ldw	r4,1340(sp)
   426dc:	b00b883a 	mov	r5,r22
   426e0:	d9800c04 	addi	r6,sp,48
   426e4:	0040fcc0 	call	40fcc <__sprint_r>
   426e8:	103c061e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   426ec:	dc800e17 	ldw	r18,56(sp)
   426f0:	dc400d17 	ldw	r17,52(sp)
   426f4:	d8c01904 	addi	r3,sp,100
   426f8:	003fee06 	br	426b4 <___vfprintf_internal_r+0x1690>
   426fc:	3c000017 	ldw	r16,0(r7)
   42700:	0023883a 	mov	r17,zero
   42704:	39c00104 	addi	r7,r7,4
   42708:	d9c14015 	stw	r7,1280(sp)
   4270c:	003e9206 	br	42158 <___vfprintf_internal_r+0x1134>
   42710:	d9401904 	addi	r5,sp,100
   42714:	dd000f04 	addi	r20,sp,60
   42718:	d9414115 	stw	r5,1284(sp)
   4271c:	d9814417 	ldw	r6,1296(sp)
   42720:	880a973a 	slli	r5,r17,28
   42724:	8004d13a 	srli	r2,r16,4
   42728:	810003cc 	andi	r4,r16,15
   4272c:	3109883a 	add	r4,r6,r4
   42730:	2884b03a 	or	r2,r5,r2
   42734:	21400003 	ldbu	r5,0(r4)
   42738:	d9014117 	ldw	r4,1284(sp)
   4273c:	8806d13a 	srli	r3,r17,4
   42740:	1021883a 	mov	r16,r2
   42744:	213fffc4 	addi	r4,r4,-1
   42748:	d9014115 	stw	r4,1284(sp)
   4274c:	d9814117 	ldw	r6,1284(sp)
   42750:	10c8b03a 	or	r4,r2,r3
   42754:	1823883a 	mov	r17,r3
   42758:	31400005 	stb	r5,0(r6)
   4275c:	203fef1e 	bne	r4,zero,4271c <___vfprintf_internal_r+0x16f8>
   42760:	003ccb06 	br	41a90 <___vfprintf_internal_r+0xa6c>
   42764:	00800c04 	movi	r2,48
   42768:	d98018c4 	addi	r6,sp,99
   4276c:	dd000f04 	addi	r20,sp,60
   42770:	d88018c5 	stb	r2,99(sp)
   42774:	d9814115 	stw	r6,1284(sp)
   42778:	003cc506 	br	41a90 <___vfprintf_internal_r+0xa6c>
   4277c:	dc400d17 	ldw	r17,52(sp)
   42780:	07000174 	movhi	fp,5
   42784:	e735a484 	addi	fp,fp,-10606
   42788:	003bc706 	br	416a8 <___vfprintf_internal_r+0x684>
   4278c:	d9414c17 	ldw	r5,1328(sp)
   42790:	2880040c 	andi	r2,r5,16
   42794:	10007c26 	beq	r2,zero,42988 <___vfprintf_internal_r+0x1964>
   42798:	38800017 	ldw	r2,0(r7)
   4279c:	39c00104 	addi	r7,r7,4
   427a0:	d9c14015 	stw	r7,1280(sp)
   427a4:	d9814b17 	ldw	r6,1324(sp)
   427a8:	d9c14017 	ldw	r7,1280(sp)
   427ac:	11800015 	stw	r6,0(r2)
   427b0:	003a7806 	br	41194 <___vfprintf_internal_r+0x170>
   427b4:	d9014f17 	ldw	r4,1340(sp)
   427b8:	b00b883a 	mov	r5,r22
   427bc:	d9800c04 	addi	r6,sp,48
   427c0:	0040fcc0 	call	40fcc <__sprint_r>
   427c4:	103bcf1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   427c8:	dc800e17 	ldw	r18,56(sp)
   427cc:	dc400d17 	ldw	r17,52(sp)
   427d0:	d8c01904 	addi	r3,sp,100
   427d4:	d9014717 	ldw	r4,1308(sp)
   427d8:	d9414117 	ldw	r5,1284(sp)
   427dc:	8c400044 	addi	r17,r17,1
   427e0:	9125883a 	add	r18,r18,r4
   427e4:	008001c4 	movi	r2,7
   427e8:	19400015 	stw	r5,0(r3)
   427ec:	19000115 	stw	r4,4(r3)
   427f0:	dc800e15 	stw	r18,56(sp)
   427f4:	dc400d15 	stw	r17,52(sp)
   427f8:	147cee16 	blt	r2,r17,41bb4 <___vfprintf_internal_r+0xb90>
   427fc:	18c00204 	addi	r3,r3,8
   42800:	003b8606 	br	4161c <___vfprintf_internal_r+0x5f8>
   42804:	38c00017 	ldw	r3,0(r7)
   42808:	39000204 	addi	r4,r7,8
   4280c:	d9014015 	stw	r4,1280(sp)
   42810:	d8c14215 	stw	r3,1288(sp)
   42814:	39c00117 	ldw	r7,4(r7)
   42818:	d9c14315 	stw	r7,1292(sp)
   4281c:	003e2006 	br	420a0 <___vfprintf_internal_r+0x107c>
   42820:	0005883a 	mov	r2,zero
   42824:	1409c83a 	sub	r4,r2,r16
   42828:	1105803a 	cmpltu	r2,r2,r4
   4282c:	044bc83a 	sub	r5,zero,r17
   42830:	2885c83a 	sub	r2,r5,r2
   42834:	2021883a 	mov	r16,r4
   42838:	1023883a 	mov	r17,r2
   4283c:	01000044 	movi	r4,1
   42840:	00800b44 	movi	r2,45
   42844:	d8800405 	stb	r2,16(sp)
   42848:	003c8406 	br	41a5c <___vfprintf_internal_r+0xa38>
   4284c:	d9014f17 	ldw	r4,1340(sp)
   42850:	b00b883a 	mov	r5,r22
   42854:	d9800c04 	addi	r6,sp,48
   42858:	0040fcc0 	call	40fcc <__sprint_r>
   4285c:	103ba91e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   42860:	dc800e17 	ldw	r18,56(sp)
   42864:	dc400d17 	ldw	r17,52(sp)
   42868:	d9000517 	ldw	r4,20(sp)
   4286c:	d9401904 	addi	r5,sp,100
   42870:	003da706 	br	41f10 <___vfprintf_internal_r+0xeec>
   42874:	d9014f17 	ldw	r4,1340(sp)
   42878:	b00b883a 	mov	r5,r22
   4287c:	d9800c04 	addi	r6,sp,48
   42880:	0040fcc0 	call	40fcc <__sprint_r>
   42884:	103b9f1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   42888:	dc800e17 	ldw	r18,56(sp)
   4288c:	dc400d17 	ldw	r17,52(sp)
   42890:	d9000517 	ldw	r4,20(sp)
   42894:	d8c01904 	addi	r3,sp,100
   42898:	003d9106 	br	41ee0 <___vfprintf_internal_r+0xebc>
   4289c:	07000174 	movhi	fp,5
   428a0:	e735a084 	addi	fp,fp,-10622
   428a4:	9425883a 	add	r18,r18,r16
   428a8:	8c400044 	addi	r17,r17,1
   428ac:	008001c4 	movi	r2,7
   428b0:	1f000015 	stw	fp,0(r3)
   428b4:	1c000115 	stw	r16,4(r3)
   428b8:	dc800e15 	stw	r18,56(sp)
   428bc:	dc400d15 	stw	r17,52(sp)
   428c0:	147fbc16 	blt	r2,r17,427b4 <___vfprintf_internal_r+0x1790>
   428c4:	18c00204 	addi	r3,r3,8
   428c8:	003fc206 	br	427d4 <___vfprintf_internal_r+0x17b0>
   428cc:	d9014f17 	ldw	r4,1340(sp)
   428d0:	b00b883a 	mov	r5,r22
   428d4:	d9800c04 	addi	r6,sp,48
   428d8:	0040fcc0 	call	40fcc <__sprint_r>
   428dc:	103b891e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   428e0:	dc800e17 	ldw	r18,56(sp)
   428e4:	d9000517 	ldw	r4,20(sp)
   428e8:	d8c01904 	addi	r3,sp,100
   428ec:	003d0206 	br	41cf8 <___vfprintf_internal_r+0xcd4>
   428f0:	07000174 	movhi	fp,5
   428f4:	e735a084 	addi	fp,fp,-10622
   428f8:	003be406 	br	4188c <___vfprintf_internal_r+0x868>
   428fc:	00800174 	movhi	r2,5
   42900:	10b58f04 	addi	r2,r2,-10692
   42904:	d8814115 	stw	r2,1284(sp)
   42908:	003df506 	br	420e0 <___vfprintf_internal_r+0x10bc>
   4290c:	d9014217 	ldw	r4,1288(sp)
   42910:	d9414317 	ldw	r5,1292(sp)
   42914:	0047bb80 	call	47bb8 <__isnand>
   42918:	10003926 	beq	r2,zero,42a00 <___vfprintf_internal_r+0x19dc>
   4291c:	d9414d17 	ldw	r5,1332(sp)
   42920:	008011c4 	movi	r2,71
   42924:	1140ce16 	blt	r2,r5,42c60 <___vfprintf_internal_r+0x1c3c>
   42928:	01800174 	movhi	r6,5
   4292c:	31b59004 	addi	r6,r6,-10688
   42930:	d9814115 	stw	r6,1284(sp)
   42934:	003dea06 	br	420e0 <___vfprintf_internal_r+0x10bc>
   42938:	d9014c17 	ldw	r4,1328(sp)
   4293c:	bdc00044 	addi	r23,r23,1
   42940:	b8c00007 	ldb	r3,0(r23)
   42944:	21000814 	ori	r4,r4,32
   42948:	d9014c15 	stw	r4,1328(sp)
   4294c:	003a3406 	br	41220 <___vfprintf_internal_r+0x1fc>
   42950:	dcc14515 	stw	r19,1300(sp)
   42954:	98011016 	blt	r19,zero,42d98 <___vfprintf_internal_r+0x1d74>
   42958:	980f883a 	mov	r7,r19
   4295c:	d8014615 	stw	zero,1304(sp)
   42960:	003c5206 	br	41aac <___vfprintf_internal_r+0xa88>
   42964:	d9014f17 	ldw	r4,1340(sp)
   42968:	b00b883a 	mov	r5,r22
   4296c:	d9800c04 	addi	r6,sp,48
   42970:	0040fcc0 	call	40fcc <__sprint_r>
   42974:	103b631e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   42978:	dc800e17 	ldw	r18,56(sp)
   4297c:	d9000517 	ldw	r4,20(sp)
   42980:	d8c01904 	addi	r3,sp,100
   42984:	003f2e06 	br	42640 <___vfprintf_internal_r+0x161c>
   42988:	d8c14c17 	ldw	r3,1328(sp)
   4298c:	1880100c 	andi	r2,r3,64
   42990:	1000a026 	beq	r2,zero,42c14 <___vfprintf_internal_r+0x1bf0>
   42994:	38800017 	ldw	r2,0(r7)
   42998:	39c00104 	addi	r7,r7,4
   4299c:	d9c14015 	stw	r7,1280(sp)
   429a0:	d9014b17 	ldw	r4,1324(sp)
   429a4:	d9c14017 	ldw	r7,1280(sp)
   429a8:	1100000d 	sth	r4,0(r2)
   429ac:	0039f906 	br	41194 <___vfprintf_internal_r+0x170>
   429b0:	d9014f17 	ldw	r4,1340(sp)
   429b4:	b00b883a 	mov	r5,r22
   429b8:	d9800c04 	addi	r6,sp,48
   429bc:	0040fcc0 	call	40fcc <__sprint_r>
   429c0:	103b501e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   429c4:	dc800e17 	ldw	r18,56(sp)
   429c8:	dc400d17 	ldw	r17,52(sp)
   429cc:	d9000517 	ldw	r4,20(sp)
   429d0:	d8c01904 	addi	r3,sp,100
   429d4:	003f2d06 	br	4268c <___vfprintf_internal_r+0x1668>
   429d8:	00800184 	movi	r2,6
   429dc:	14c09a36 	bltu	r2,r19,42c48 <___vfprintf_internal_r+0x1c24>
   429e0:	dcc14515 	stw	r19,1300(sp)
   429e4:	9800010e 	bge	r19,zero,429ec <___vfprintf_internal_r+0x19c8>
   429e8:	d8014515 	stw	zero,1300(sp)
   429ec:	00800174 	movhi	r2,5
   429f0:	10b59204 	addi	r2,r2,-10680
   429f4:	980f883a 	mov	r7,r19
   429f8:	d8814115 	stw	r2,1284(sp)
   429fc:	003a7806 	br	413e0 <___vfprintf_internal_r+0x3bc>
   42a00:	00bfffc4 	movi	r2,-1
   42a04:	9880e226 	beq	r19,r2,42d90 <___vfprintf_internal_r+0x1d6c>
   42a08:	d9414d17 	ldw	r5,1332(sp)
   42a0c:	008019c4 	movi	r2,103
   42a10:	2880dc26 	beq	r5,r2,42d84 <___vfprintf_internal_r+0x1d60>
   42a14:	008011c4 	movi	r2,71
   42a18:	2880da26 	beq	r5,r2,42d84 <___vfprintf_internal_r+0x1d60>
   42a1c:	d9414c17 	ldw	r5,1328(sp)
   42a20:	d9014317 	ldw	r4,1292(sp)
   42a24:	d9814217 	ldw	r6,1288(sp)
   42a28:	29404014 	ori	r5,r5,256
   42a2c:	d9414c15 	stw	r5,1328(sp)
   42a30:	2000cc16 	blt	r4,zero,42d64 <___vfprintf_internal_r+0x1d40>
   42a34:	3021883a 	mov	r16,r6
   42a38:	2023883a 	mov	r17,r4
   42a3c:	0039883a 	mov	fp,zero
   42a40:	d9414d17 	ldw	r5,1332(sp)
   42a44:	00801984 	movi	r2,102
   42a48:	2880b726 	beq	r5,r2,42d28 <___vfprintf_internal_r+0x1d04>
   42a4c:	00801184 	movi	r2,70
   42a50:	2880b526 	beq	r5,r2,42d28 <___vfprintf_internal_r+0x1d04>
   42a54:	00801944 	movi	r2,101
   42a58:	2880c826 	beq	r5,r2,42d7c <___vfprintf_internal_r+0x1d58>
   42a5c:	00801144 	movi	r2,69
   42a60:	2880c626 	beq	r5,r2,42d7c <___vfprintf_internal_r+0x1d58>
   42a64:	9829883a 	mov	r20,r19
   42a68:	d9014f17 	ldw	r4,1340(sp)
   42a6c:	d8800504 	addi	r2,sp,20
   42a70:	880d883a 	mov	r6,r17
   42a74:	d8800115 	stw	r2,4(sp)
   42a78:	d8c00604 	addi	r3,sp,24
   42a7c:	d8800704 	addi	r2,sp,28
   42a80:	800b883a 	mov	r5,r16
   42a84:	01c00084 	movi	r7,2
   42a88:	d8c00215 	stw	r3,8(sp)
   42a8c:	d8800315 	stw	r2,12(sp)
   42a90:	dd000015 	stw	r20,0(sp)
   42a94:	00433fc0 	call	433fc <_dtoa_r>
   42a98:	d9814d17 	ldw	r6,1332(sp)
   42a9c:	d8814115 	stw	r2,1284(sp)
   42aa0:	008019c4 	movi	r2,103
   42aa4:	30809526 	beq	r6,r2,42cfc <___vfprintf_internal_r+0x1cd8>
   42aa8:	d8c14d17 	ldw	r3,1332(sp)
   42aac:	008011c4 	movi	r2,71
   42ab0:	18809226 	beq	r3,r2,42cfc <___vfprintf_internal_r+0x1cd8>
   42ab4:	d9414117 	ldw	r5,1284(sp)
   42ab8:	d9814d17 	ldw	r6,1332(sp)
   42abc:	00801984 	movi	r2,102
   42ac0:	2d25883a 	add	r18,r5,r20
   42ac4:	30808626 	beq	r6,r2,42ce0 <___vfprintf_internal_r+0x1cbc>
   42ac8:	00801184 	movi	r2,70
   42acc:	30808426 	beq	r6,r2,42ce0 <___vfprintf_internal_r+0x1cbc>
   42ad0:	000d883a 	mov	r6,zero
   42ad4:	000f883a 	mov	r7,zero
   42ad8:	880b883a 	mov	r5,r17
   42adc:	8009883a 	mov	r4,r16
   42ae0:	00499a00 	call	499a0 <__eqdf2>
   42ae4:	1000751e 	bne	r2,zero,42cbc <___vfprintf_internal_r+0x1c98>
   42ae8:	9005883a 	mov	r2,r18
   42aec:	dc800715 	stw	r18,28(sp)
   42af0:	d9014117 	ldw	r4,1284(sp)
   42af4:	d9414d17 	ldw	r5,1332(sp)
   42af8:	00c019c4 	movi	r3,103
   42afc:	1125c83a 	sub	r18,r2,r4
   42b00:	28c06826 	beq	r5,r3,42ca4 <___vfprintf_internal_r+0x1c80>
   42b04:	008011c4 	movi	r2,71
   42b08:	28806626 	beq	r5,r2,42ca4 <___vfprintf_internal_r+0x1c80>
   42b0c:	d9000517 	ldw	r4,20(sp)
   42b10:	d8c14d17 	ldw	r3,1332(sp)
   42b14:	00801944 	movi	r2,101
   42b18:	10c05516 	blt	r2,r3,42c70 <___vfprintf_internal_r+0x1c4c>
   42b1c:	213fffc4 	addi	r4,r4,-1
   42b20:	d9000515 	stw	r4,20(sp)
   42b24:	d8c00805 	stb	r3,32(sp)
   42b28:	2021883a 	mov	r16,r4
   42b2c:	2000c116 	blt	r4,zero,42e34 <___vfprintf_internal_r+0x1e10>
   42b30:	00800ac4 	movi	r2,43
   42b34:	d8800845 	stb	r2,33(sp)
   42b38:	00800244 	movi	r2,9
   42b3c:	1400af0e 	bge	r2,r16,42dfc <___vfprintf_internal_r+0x1dd8>
   42b40:	1027883a 	mov	r19,r2
   42b44:	dc400b84 	addi	r17,sp,46
   42b48:	8009883a 	mov	r4,r16
   42b4c:	01400284 	movi	r5,10
   42b50:	0040d840 	call	40d84 <__modsi3>
   42b54:	10800c04 	addi	r2,r2,48
   42b58:	8c7fffc4 	addi	r17,r17,-1
   42b5c:	8009883a 	mov	r4,r16
   42b60:	01400284 	movi	r5,10
   42b64:	88800005 	stb	r2,0(r17)
   42b68:	0040d240 	call	40d24 <__divsi3>
   42b6c:	1021883a 	mov	r16,r2
   42b70:	98bff516 	blt	r19,r2,42b48 <___vfprintf_internal_r+0x1b24>
   42b74:	10c00c04 	addi	r3,r2,48
   42b78:	d88009c4 	addi	r2,sp,39
   42b7c:	108001c4 	addi	r2,r2,7
   42b80:	897fffc4 	addi	r5,r17,-1
   42b84:	88ffffc5 	stb	r3,-1(r17)
   42b88:	2880a72e 	bgeu	r5,r2,42e28 <___vfprintf_internal_r+0x1e04>
   42b8c:	1009883a 	mov	r4,r2
   42b90:	d9800804 	addi	r6,sp,32
   42b94:	d8c00884 	addi	r3,sp,34
   42b98:	28800003 	ldbu	r2,0(r5)
   42b9c:	29400044 	addi	r5,r5,1
   42ba0:	18800005 	stb	r2,0(r3)
   42ba4:	18c00044 	addi	r3,r3,1
   42ba8:	293ffb36 	bltu	r5,r4,42b98 <___vfprintf_internal_r+0x1b74>
   42bac:	1987c83a 	sub	r3,r3,r6
   42bb0:	00800044 	movi	r2,1
   42bb4:	d8c14815 	stw	r3,1312(sp)
   42bb8:	90cf883a 	add	r7,r18,r3
   42bbc:	1480960e 	bge	r2,r18,42e18 <___vfprintf_internal_r+0x1df4>
   42bc0:	39c00044 	addi	r7,r7,1
   42bc4:	d9c14515 	stw	r7,1300(sp)
   42bc8:	38003416 	blt	r7,zero,42c9c <___vfprintf_internal_r+0x1c78>
   42bcc:	e0803fcc 	andi	r2,fp,255
   42bd0:	1080201c 	xori	r2,r2,128
   42bd4:	10bfe004 	addi	r2,r2,-128
   42bd8:	10004e26 	beq	r2,zero,42d14 <___vfprintf_internal_r+0x1cf0>
   42bdc:	00800b44 	movi	r2,45
   42be0:	dc814715 	stw	r18,1308(sp)
   42be4:	d8014615 	stw	zero,1304(sp)
   42be8:	d8800405 	stb	r2,16(sp)
   42bec:	003bb106 	br	41ab4 <___vfprintf_internal_r+0xa90>
   42bf0:	00800b44 	movi	r2,45
   42bf4:	d8800405 	stb	r2,16(sp)
   42bf8:	003d3306 	br	420c8 <___vfprintf_internal_r+0x10a4>
   42bfc:	d9014f17 	ldw	r4,1340(sp)
   42c00:	b00b883a 	mov	r5,r22
   42c04:	d9800c04 	addi	r6,sp,48
   42c08:	0040fcc0 	call	40fcc <__sprint_r>
   42c0c:	103abd1e 	bne	r2,zero,41704 <___vfprintf_internal_r+0x6e0>
   42c10:	003abb06 	br	41700 <___vfprintf_internal_r+0x6dc>
   42c14:	38800017 	ldw	r2,0(r7)
   42c18:	39c00104 	addi	r7,r7,4
   42c1c:	d9c14015 	stw	r7,1280(sp)
   42c20:	d9414b17 	ldw	r5,1324(sp)
   42c24:	d9c14017 	ldw	r7,1280(sp)
   42c28:	11400015 	stw	r5,0(r2)
   42c2c:	00395906 	br	41194 <___vfprintf_internal_r+0x170>
   42c30:	980f883a 	mov	r7,r19
   42c34:	dcc14515 	stw	r19,1300(sp)
   42c38:	d8014615 	stw	zero,1304(sp)
   42c3c:	003b9b06 	br	41aac <___vfprintf_internal_r+0xa88>
   42c40:	0027883a 	mov	r19,zero
   42c44:	00397806 	br	41228 <___vfprintf_internal_r+0x204>
   42c48:	00c00174 	movhi	r3,5
   42c4c:	18f59204 	addi	r3,r3,-10680
   42c50:	100f883a 	mov	r7,r2
   42c54:	d8814515 	stw	r2,1300(sp)
   42c58:	d8c14115 	stw	r3,1284(sp)
   42c5c:	0039e006 	br	413e0 <___vfprintf_internal_r+0x3bc>
   42c60:	00800174 	movhi	r2,5
   42c64:	10b59104 	addi	r2,r2,-10684
   42c68:	d8814115 	stw	r2,1284(sp)
   42c6c:	003d1c06 	br	420e0 <___vfprintf_internal_r+0x10bc>
   42c70:	d9414d17 	ldw	r5,1332(sp)
   42c74:	00801984 	movi	r2,102
   42c78:	28804926 	beq	r5,r2,42da0 <___vfprintf_internal_r+0x1d7c>
   42c7c:	200f883a 	mov	r7,r4
   42c80:	24805716 	blt	r4,r18,42de0 <___vfprintf_internal_r+0x1dbc>
   42c84:	d9414c17 	ldw	r5,1328(sp)
   42c88:	2880004c 	andi	r2,r5,1
   42c8c:	10000126 	beq	r2,zero,42c94 <___vfprintf_internal_r+0x1c70>
   42c90:	21c00044 	addi	r7,r4,1
   42c94:	d9c14515 	stw	r7,1300(sp)
   42c98:	383fcc0e 	bge	r7,zero,42bcc <___vfprintf_internal_r+0x1ba8>
   42c9c:	d8014515 	stw	zero,1300(sp)
   42ca0:	003fca06 	br	42bcc <___vfprintf_internal_r+0x1ba8>
   42ca4:	d9000517 	ldw	r4,20(sp)
   42ca8:	00bfff04 	movi	r2,-4
   42cac:	1100480e 	bge	r2,r4,42dd0 <___vfprintf_internal_r+0x1dac>
   42cb0:	99004716 	blt	r19,r4,42dd0 <___vfprintf_internal_r+0x1dac>
   42cb4:	d8c14d15 	stw	r3,1332(sp)
   42cb8:	003ff006 	br	42c7c <___vfprintf_internal_r+0x1c58>
   42cbc:	d8800717 	ldw	r2,28(sp)
   42cc0:	14bf8b2e 	bgeu	r2,r18,42af0 <___vfprintf_internal_r+0x1acc>
   42cc4:	9007883a 	mov	r3,r18
   42cc8:	01000c04 	movi	r4,48
   42ccc:	11000005 	stb	r4,0(r2)
   42cd0:	10800044 	addi	r2,r2,1
   42cd4:	d8800715 	stw	r2,28(sp)
   42cd8:	18bffc1e 	bne	r3,r2,42ccc <___vfprintf_internal_r+0x1ca8>
   42cdc:	003f8406 	br	42af0 <___vfprintf_internal_r+0x1acc>
   42ce0:	d8814117 	ldw	r2,1284(sp)
   42ce4:	10c00007 	ldb	r3,0(r2)
   42ce8:	00800c04 	movi	r2,48
   42cec:	18805b26 	beq	r3,r2,42e5c <___vfprintf_internal_r+0x1e38>
   42cf0:	d9000517 	ldw	r4,20(sp)
   42cf4:	9125883a 	add	r18,r18,r4
   42cf8:	003f7506 	br	42ad0 <___vfprintf_internal_r+0x1aac>
   42cfc:	d9014c17 	ldw	r4,1328(sp)
   42d00:	2080004c 	andi	r2,r4,1
   42d04:	1005003a 	cmpeq	r2,r2,zero
   42d08:	103f6a26 	beq	r2,zero,42ab4 <___vfprintf_internal_r+0x1a90>
   42d0c:	d8800717 	ldw	r2,28(sp)
   42d10:	003f7706 	br	42af0 <___vfprintf_internal_r+0x1acc>
   42d14:	d9c14515 	stw	r7,1300(sp)
   42d18:	38004d16 	blt	r7,zero,42e50 <___vfprintf_internal_r+0x1e2c>
   42d1c:	dc814715 	stw	r18,1308(sp)
   42d20:	d8014615 	stw	zero,1304(sp)
   42d24:	003b6106 	br	41aac <___vfprintf_internal_r+0xa88>
   42d28:	d9014f17 	ldw	r4,1340(sp)
   42d2c:	d8800504 	addi	r2,sp,20
   42d30:	d8800115 	stw	r2,4(sp)
   42d34:	d8c00604 	addi	r3,sp,24
   42d38:	d8800704 	addi	r2,sp,28
   42d3c:	800b883a 	mov	r5,r16
   42d40:	880d883a 	mov	r6,r17
   42d44:	01c000c4 	movi	r7,3
   42d48:	d8c00215 	stw	r3,8(sp)
   42d4c:	d8800315 	stw	r2,12(sp)
   42d50:	dcc00015 	stw	r19,0(sp)
   42d54:	9829883a 	mov	r20,r19
   42d58:	00433fc0 	call	433fc <_dtoa_r>
   42d5c:	d8814115 	stw	r2,1284(sp)
   42d60:	003f5106 	br	42aa8 <___vfprintf_internal_r+0x1a84>
   42d64:	d8c14217 	ldw	r3,1288(sp)
   42d68:	d9014317 	ldw	r4,1292(sp)
   42d6c:	07000b44 	movi	fp,45
   42d70:	1821883a 	mov	r16,r3
   42d74:	2460003c 	xorhi	r17,r4,32768
   42d78:	003f3106 	br	42a40 <___vfprintf_internal_r+0x1a1c>
   42d7c:	9d000044 	addi	r20,r19,1
   42d80:	003f3906 	br	42a68 <___vfprintf_internal_r+0x1a44>
   42d84:	983f251e 	bne	r19,zero,42a1c <___vfprintf_internal_r+0x19f8>
   42d88:	04c00044 	movi	r19,1
   42d8c:	003f2306 	br	42a1c <___vfprintf_internal_r+0x19f8>
   42d90:	04c00184 	movi	r19,6
   42d94:	003f2106 	br	42a1c <___vfprintf_internal_r+0x19f8>
   42d98:	d8014515 	stw	zero,1300(sp)
   42d9c:	003eee06 	br	42958 <___vfprintf_internal_r+0x1934>
   42da0:	200f883a 	mov	r7,r4
   42da4:	0100370e 	bge	zero,r4,42e84 <___vfprintf_internal_r+0x1e60>
   42da8:	9800031e 	bne	r19,zero,42db8 <___vfprintf_internal_r+0x1d94>
   42dac:	d9814c17 	ldw	r6,1328(sp)
   42db0:	3080004c 	andi	r2,r6,1
   42db4:	103fb726 	beq	r2,zero,42c94 <___vfprintf_internal_r+0x1c70>
   42db8:	20800044 	addi	r2,r4,1
   42dbc:	98a7883a 	add	r19,r19,r2
   42dc0:	dcc14515 	stw	r19,1300(sp)
   42dc4:	980f883a 	mov	r7,r19
   42dc8:	983f800e 	bge	r19,zero,42bcc <___vfprintf_internal_r+0x1ba8>
   42dcc:	003fb306 	br	42c9c <___vfprintf_internal_r+0x1c78>
   42dd0:	d9814d17 	ldw	r6,1332(sp)
   42dd4:	31bfff84 	addi	r6,r6,-2
   42dd8:	d9814d15 	stw	r6,1332(sp)
   42ddc:	003f4c06 	br	42b10 <___vfprintf_internal_r+0x1aec>
   42de0:	0100180e 	bge	zero,r4,42e44 <___vfprintf_internal_r+0x1e20>
   42de4:	00800044 	movi	r2,1
   42de8:	1485883a 	add	r2,r2,r18
   42dec:	d8814515 	stw	r2,1300(sp)
   42df0:	100f883a 	mov	r7,r2
   42df4:	103f750e 	bge	r2,zero,42bcc <___vfprintf_internal_r+0x1ba8>
   42df8:	003fa806 	br	42c9c <___vfprintf_internal_r+0x1c78>
   42dfc:	80c00c04 	addi	r3,r16,48
   42e00:	00800c04 	movi	r2,48
   42e04:	d8c008c5 	stb	r3,35(sp)
   42e08:	d9800804 	addi	r6,sp,32
   42e0c:	d8c00904 	addi	r3,sp,36
   42e10:	d8800885 	stb	r2,34(sp)
   42e14:	003f6506 	br	42bac <___vfprintf_internal_r+0x1b88>
   42e18:	d9014c17 	ldw	r4,1328(sp)
   42e1c:	2084703a 	and	r2,r4,r2
   42e20:	103f9c26 	beq	r2,zero,42c94 <___vfprintf_internal_r+0x1c70>
   42e24:	003f6606 	br	42bc0 <___vfprintf_internal_r+0x1b9c>
   42e28:	d9800804 	addi	r6,sp,32
   42e2c:	d8c00884 	addi	r3,sp,34
   42e30:	003f5e06 	br	42bac <___vfprintf_internal_r+0x1b88>
   42e34:	00800b44 	movi	r2,45
   42e38:	0121c83a 	sub	r16,zero,r4
   42e3c:	d8800845 	stb	r2,33(sp)
   42e40:	003f3d06 	br	42b38 <___vfprintf_internal_r+0x1b14>
   42e44:	00800084 	movi	r2,2
   42e48:	1105c83a 	sub	r2,r2,r4
   42e4c:	003fe606 	br	42de8 <___vfprintf_internal_r+0x1dc4>
   42e50:	d8014515 	stw	zero,1300(sp)
   42e54:	dc814715 	stw	r18,1308(sp)
   42e58:	003fb106 	br	42d20 <___vfprintf_internal_r+0x1cfc>
   42e5c:	000d883a 	mov	r6,zero
   42e60:	000f883a 	mov	r7,zero
   42e64:	8009883a 	mov	r4,r16
   42e68:	880b883a 	mov	r5,r17
   42e6c:	0049a280 	call	49a28 <__nedf2>
   42e70:	103f9f26 	beq	r2,zero,42cf0 <___vfprintf_internal_r+0x1ccc>
   42e74:	00800044 	movi	r2,1
   42e78:	1509c83a 	sub	r4,r2,r20
   42e7c:	d9000515 	stw	r4,20(sp)
   42e80:	003f9b06 	br	42cf0 <___vfprintf_internal_r+0x1ccc>
   42e84:	98000d1e 	bne	r19,zero,42ebc <___vfprintf_internal_r+0x1e98>
   42e88:	d8c14c17 	ldw	r3,1328(sp)
   42e8c:	1880004c 	andi	r2,r3,1
   42e90:	10000a1e 	bne	r2,zero,42ebc <___vfprintf_internal_r+0x1e98>
   42e94:	01000044 	movi	r4,1
   42e98:	200f883a 	mov	r7,r4
   42e9c:	d9014515 	stw	r4,1300(sp)
   42ea0:	003f4a06 	br	42bcc <___vfprintf_internal_r+0x1ba8>
   42ea4:	3cc00017 	ldw	r19,0(r7)
   42ea8:	39c00104 	addi	r7,r7,4
   42eac:	983d0e0e 	bge	r19,zero,422e8 <___vfprintf_internal_r+0x12c4>
   42eb0:	b8c00007 	ldb	r3,0(r23)
   42eb4:	04ffffc4 	movi	r19,-1
   42eb8:	0038d906 	br	41220 <___vfprintf_internal_r+0x1fc>
   42ebc:	9cc00084 	addi	r19,r19,2
   42ec0:	dcc14515 	stw	r19,1300(sp)
   42ec4:	980f883a 	mov	r7,r19
   42ec8:	983f400e 	bge	r19,zero,42bcc <___vfprintf_internal_r+0x1ba8>
   42ecc:	003f7306 	br	42c9c <___vfprintf_internal_r+0x1c78>

00042ed0 <__vfprintf_internal>:
   42ed0:	00800174 	movhi	r2,5
   42ed4:	10bcdd04 	addi	r2,r2,-3212
   42ed8:	2013883a 	mov	r9,r4
   42edc:	11000017 	ldw	r4,0(r2)
   42ee0:	2805883a 	mov	r2,r5
   42ee4:	300f883a 	mov	r7,r6
   42ee8:	480b883a 	mov	r5,r9
   42eec:	100d883a 	mov	r6,r2
   42ef0:	00410241 	jmpi	41024 <___vfprintf_internal_r>

00042ef4 <__swsetup_r>:
   42ef4:	00800174 	movhi	r2,5
   42ef8:	10bcdd04 	addi	r2,r2,-3212
   42efc:	10c00017 	ldw	r3,0(r2)
   42f00:	defffd04 	addi	sp,sp,-12
   42f04:	dc400115 	stw	r17,4(sp)
   42f08:	dc000015 	stw	r16,0(sp)
   42f0c:	dfc00215 	stw	ra,8(sp)
   42f10:	2023883a 	mov	r17,r4
   42f14:	2821883a 	mov	r16,r5
   42f18:	18000226 	beq	r3,zero,42f24 <__swsetup_r+0x30>
   42f1c:	18800e17 	ldw	r2,56(r3)
   42f20:	10001f26 	beq	r2,zero,42fa0 <__swsetup_r+0xac>
   42f24:	8100030b 	ldhu	r4,12(r16)
   42f28:	2080020c 	andi	r2,r4,8
   42f2c:	10002826 	beq	r2,zero,42fd0 <__swsetup_r+0xdc>
   42f30:	81400417 	ldw	r5,16(r16)
   42f34:	28001d26 	beq	r5,zero,42fac <__swsetup_r+0xb8>
   42f38:	2080004c 	andi	r2,r4,1
   42f3c:	1005003a 	cmpeq	r2,r2,zero
   42f40:	10000b26 	beq	r2,zero,42f70 <__swsetup_r+0x7c>
   42f44:	2080008c 	andi	r2,r4,2
   42f48:	10001226 	beq	r2,zero,42f94 <__swsetup_r+0xa0>
   42f4c:	0005883a 	mov	r2,zero
   42f50:	80800215 	stw	r2,8(r16)
   42f54:	28000b26 	beq	r5,zero,42f84 <__swsetup_r+0x90>
   42f58:	0005883a 	mov	r2,zero
   42f5c:	dfc00217 	ldw	ra,8(sp)
   42f60:	dc400117 	ldw	r17,4(sp)
   42f64:	dc000017 	ldw	r16,0(sp)
   42f68:	dec00304 	addi	sp,sp,12
   42f6c:	f800283a 	ret
   42f70:	80800517 	ldw	r2,20(r16)
   42f74:	80000215 	stw	zero,8(r16)
   42f78:	0085c83a 	sub	r2,zero,r2
   42f7c:	80800615 	stw	r2,24(r16)
   42f80:	283ff51e 	bne	r5,zero,42f58 <__swsetup_r+0x64>
   42f84:	2080200c 	andi	r2,r4,128
   42f88:	103ff326 	beq	r2,zero,42f58 <__swsetup_r+0x64>
   42f8c:	00bfffc4 	movi	r2,-1
   42f90:	003ff206 	br	42f5c <__swsetup_r+0x68>
   42f94:	80800517 	ldw	r2,20(r16)
   42f98:	80800215 	stw	r2,8(r16)
   42f9c:	003fed06 	br	42f54 <__swsetup_r+0x60>
   42fa0:	1809883a 	mov	r4,r3
   42fa4:	0044c480 	call	44c48 <__sinit>
   42fa8:	003fde06 	br	42f24 <__swsetup_r+0x30>
   42fac:	20c0a00c 	andi	r3,r4,640
   42fb0:	00808004 	movi	r2,512
   42fb4:	18bfe026 	beq	r3,r2,42f38 <__swsetup_r+0x44>
   42fb8:	8809883a 	mov	r4,r17
   42fbc:	800b883a 	mov	r5,r16
   42fc0:	00459c00 	call	459c0 <__smakebuf_r>
   42fc4:	8100030b 	ldhu	r4,12(r16)
   42fc8:	81400417 	ldw	r5,16(r16)
   42fcc:	003fda06 	br	42f38 <__swsetup_r+0x44>
   42fd0:	2080040c 	andi	r2,r4,16
   42fd4:	103fed26 	beq	r2,zero,42f8c <__swsetup_r+0x98>
   42fd8:	2080010c 	andi	r2,r4,4
   42fdc:	10001226 	beq	r2,zero,43028 <__swsetup_r+0x134>
   42fe0:	81400c17 	ldw	r5,48(r16)
   42fe4:	28000526 	beq	r5,zero,42ffc <__swsetup_r+0x108>
   42fe8:	80801004 	addi	r2,r16,64
   42fec:	28800226 	beq	r5,r2,42ff8 <__swsetup_r+0x104>
   42ff0:	8809883a 	mov	r4,r17
   42ff4:	0044fcc0 	call	44fcc <_free_r>
   42ff8:	80000c15 	stw	zero,48(r16)
   42ffc:	8080030b 	ldhu	r2,12(r16)
   43000:	81400417 	ldw	r5,16(r16)
   43004:	80000115 	stw	zero,4(r16)
   43008:	10bff6cc 	andi	r2,r2,65499
   4300c:	8080030d 	sth	r2,12(r16)
   43010:	81400015 	stw	r5,0(r16)
   43014:	8080030b 	ldhu	r2,12(r16)
   43018:	10800214 	ori	r2,r2,8
   4301c:	113fffcc 	andi	r4,r2,65535
   43020:	8080030d 	sth	r2,12(r16)
   43024:	003fc306 	br	42f34 <__swsetup_r+0x40>
   43028:	81400417 	ldw	r5,16(r16)
   4302c:	003ff906 	br	43014 <__swsetup_r+0x120>

00043030 <register_fini>:
   43030:	f800283a 	ret

00043034 <__call_exitprocs>:
   43034:	00800174 	movhi	r2,5
   43038:	10bcde04 	addi	r2,r2,-3208
   4303c:	10800017 	ldw	r2,0(r2)
   43040:	defff304 	addi	sp,sp,-52
   43044:	df000b15 	stw	fp,44(sp)
   43048:	d8800115 	stw	r2,4(sp)
   4304c:	00800034 	movhi	r2,0
   43050:	10800004 	addi	r2,r2,0
   43054:	1005003a 	cmpeq	r2,r2,zero
   43058:	d8800215 	stw	r2,8(sp)
   4305c:	d8800117 	ldw	r2,4(sp)
   43060:	dd400815 	stw	r21,32(sp)
   43064:	dd000715 	stw	r20,28(sp)
   43068:	10805204 	addi	r2,r2,328
   4306c:	dfc00c15 	stw	ra,48(sp)
   43070:	ddc00a15 	stw	r23,40(sp)
   43074:	dd800915 	stw	r22,36(sp)
   43078:	dcc00615 	stw	r19,24(sp)
   4307c:	dc800515 	stw	r18,20(sp)
   43080:	dc400415 	stw	r17,16(sp)
   43084:	dc000315 	stw	r16,12(sp)
   43088:	282b883a 	mov	r21,r5
   4308c:	2039883a 	mov	fp,r4
   43090:	d8800015 	stw	r2,0(sp)
   43094:	2829003a 	cmpeq	r20,r5,zero
   43098:	d8800117 	ldw	r2,4(sp)
   4309c:	14405217 	ldw	r17,328(r2)
   430a0:	88001026 	beq	r17,zero,430e4 <__call_exitprocs+0xb0>
   430a4:	ddc00017 	ldw	r23,0(sp)
   430a8:	88800117 	ldw	r2,4(r17)
   430ac:	8c802204 	addi	r18,r17,136
   430b0:	143fffc4 	addi	r16,r2,-1
   430b4:	80000916 	blt	r16,zero,430dc <__call_exitprocs+0xa8>
   430b8:	05bfffc4 	movi	r22,-1
   430bc:	a000151e 	bne	r20,zero,43114 <__call_exitprocs+0xe0>
   430c0:	8409883a 	add	r4,r16,r16
   430c4:	2105883a 	add	r2,r4,r4
   430c8:	1485883a 	add	r2,r2,r18
   430cc:	10c02017 	ldw	r3,128(r2)
   430d0:	a8c01126 	beq	r21,r3,43118 <__call_exitprocs+0xe4>
   430d4:	843fffc4 	addi	r16,r16,-1
   430d8:	85bff81e 	bne	r16,r22,430bc <__call_exitprocs+0x88>
   430dc:	d8800217 	ldw	r2,8(sp)
   430e0:	10003126 	beq	r2,zero,431a8 <__call_exitprocs+0x174>
   430e4:	dfc00c17 	ldw	ra,48(sp)
   430e8:	df000b17 	ldw	fp,44(sp)
   430ec:	ddc00a17 	ldw	r23,40(sp)
   430f0:	dd800917 	ldw	r22,36(sp)
   430f4:	dd400817 	ldw	r21,32(sp)
   430f8:	dd000717 	ldw	r20,28(sp)
   430fc:	dcc00617 	ldw	r19,24(sp)
   43100:	dc800517 	ldw	r18,20(sp)
   43104:	dc400417 	ldw	r17,16(sp)
   43108:	dc000317 	ldw	r16,12(sp)
   4310c:	dec00d04 	addi	sp,sp,52
   43110:	f800283a 	ret
   43114:	8409883a 	add	r4,r16,r16
   43118:	88c00117 	ldw	r3,4(r17)
   4311c:	2105883a 	add	r2,r4,r4
   43120:	1445883a 	add	r2,r2,r17
   43124:	18ffffc4 	addi	r3,r3,-1
   43128:	11800217 	ldw	r6,8(r2)
   4312c:	1c001526 	beq	r3,r16,43184 <__call_exitprocs+0x150>
   43130:	10000215 	stw	zero,8(r2)
   43134:	303fe726 	beq	r6,zero,430d4 <__call_exitprocs+0xa0>
   43138:	00c00044 	movi	r3,1
   4313c:	1c06983a 	sll	r3,r3,r16
   43140:	90804017 	ldw	r2,256(r18)
   43144:	8cc00117 	ldw	r19,4(r17)
   43148:	1884703a 	and	r2,r3,r2
   4314c:	10001426 	beq	r2,zero,431a0 <__call_exitprocs+0x16c>
   43150:	90804117 	ldw	r2,260(r18)
   43154:	1884703a 	and	r2,r3,r2
   43158:	10000c1e 	bne	r2,zero,4318c <__call_exitprocs+0x158>
   4315c:	2105883a 	add	r2,r4,r4
   43160:	1485883a 	add	r2,r2,r18
   43164:	11400017 	ldw	r5,0(r2)
   43168:	e009883a 	mov	r4,fp
   4316c:	303ee83a 	callr	r6
   43170:	88800117 	ldw	r2,4(r17)
   43174:	98bfc81e 	bne	r19,r2,43098 <__call_exitprocs+0x64>
   43178:	b8800017 	ldw	r2,0(r23)
   4317c:	147fd526 	beq	r2,r17,430d4 <__call_exitprocs+0xa0>
   43180:	003fc506 	br	43098 <__call_exitprocs+0x64>
   43184:	8c000115 	stw	r16,4(r17)
   43188:	003fea06 	br	43134 <__call_exitprocs+0x100>
   4318c:	2105883a 	add	r2,r4,r4
   43190:	1485883a 	add	r2,r2,r18
   43194:	11000017 	ldw	r4,0(r2)
   43198:	303ee83a 	callr	r6
   4319c:	003ff406 	br	43170 <__call_exitprocs+0x13c>
   431a0:	303ee83a 	callr	r6
   431a4:	003ff206 	br	43170 <__call_exitprocs+0x13c>
   431a8:	88800117 	ldw	r2,4(r17)
   431ac:	1000081e 	bne	r2,zero,431d0 <__call_exitprocs+0x19c>
   431b0:	89000017 	ldw	r4,0(r17)
   431b4:	20000726 	beq	r4,zero,431d4 <__call_exitprocs+0x1a0>
   431b8:	b9000015 	stw	r4,0(r23)
   431bc:	8809883a 	mov	r4,r17
   431c0:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>
   431c4:	bc400017 	ldw	r17,0(r23)
   431c8:	883fb71e 	bne	r17,zero,430a8 <__call_exitprocs+0x74>
   431cc:	003fc506 	br	430e4 <__call_exitprocs+0xb0>
   431d0:	89000017 	ldw	r4,0(r17)
   431d4:	882f883a 	mov	r23,r17
   431d8:	2023883a 	mov	r17,r4
   431dc:	883fb21e 	bne	r17,zero,430a8 <__call_exitprocs+0x74>
   431e0:	003fc006 	br	430e4 <__call_exitprocs+0xb0>

000431e4 <quorem>:
   431e4:	28c00417 	ldw	r3,16(r5)
   431e8:	20800417 	ldw	r2,16(r4)
   431ec:	defff604 	addi	sp,sp,-40
   431f0:	ddc00715 	stw	r23,28(sp)
   431f4:	dd400515 	stw	r21,20(sp)
   431f8:	dfc00915 	stw	ra,36(sp)
   431fc:	df000815 	stw	fp,32(sp)
   43200:	dd800615 	stw	r22,24(sp)
   43204:	dd000415 	stw	r20,16(sp)
   43208:	dcc00315 	stw	r19,12(sp)
   4320c:	dc800215 	stw	r18,8(sp)
   43210:	dc400115 	stw	r17,4(sp)
   43214:	dc000015 	stw	r16,0(sp)
   43218:	202f883a 	mov	r23,r4
   4321c:	282b883a 	mov	r21,r5
   43220:	10c07416 	blt	r2,r3,433f4 <quorem+0x210>
   43224:	1c7fffc4 	addi	r17,r3,-1
   43228:	8c45883a 	add	r2,r17,r17
   4322c:	1085883a 	add	r2,r2,r2
   43230:	2c000504 	addi	r16,r5,20
   43234:	24c00504 	addi	r19,r4,20
   43238:	14ed883a 	add	r22,r2,r19
   4323c:	80a5883a 	add	r18,r16,r2
   43240:	b7000017 	ldw	fp,0(r22)
   43244:	91400017 	ldw	r5,0(r18)
   43248:	e009883a 	mov	r4,fp
   4324c:	29400044 	addi	r5,r5,1
   43250:	0040de40 	call	40de4 <__udivsi3>
   43254:	1029883a 	mov	r20,r2
   43258:	10003c1e 	bne	r2,zero,4334c <quorem+0x168>
   4325c:	a80b883a 	mov	r5,r21
   43260:	b809883a 	mov	r4,r23
   43264:	00466ec0 	call	466ec <__mcmp>
   43268:	10002b16 	blt	r2,zero,43318 <quorem+0x134>
   4326c:	a5000044 	addi	r20,r20,1
   43270:	980f883a 	mov	r7,r19
   43274:	0011883a 	mov	r8,zero
   43278:	0009883a 	mov	r4,zero
   4327c:	81400017 	ldw	r5,0(r16)
   43280:	38c00017 	ldw	r3,0(r7)
   43284:	84000104 	addi	r16,r16,4
   43288:	28bfffcc 	andi	r2,r5,65535
   4328c:	2085883a 	add	r2,r4,r2
   43290:	11bfffcc 	andi	r6,r2,65535
   43294:	193fffcc 	andi	r4,r3,65535
   43298:	1004d43a 	srli	r2,r2,16
   4329c:	280ad43a 	srli	r5,r5,16
   432a0:	2189c83a 	sub	r4,r4,r6
   432a4:	2209883a 	add	r4,r4,r8
   432a8:	1806d43a 	srli	r3,r3,16
   432ac:	288b883a 	add	r5,r5,r2
   432b0:	200dd43a 	srai	r6,r4,16
   432b4:	28bfffcc 	andi	r2,r5,65535
   432b8:	1887c83a 	sub	r3,r3,r2
   432bc:	1987883a 	add	r3,r3,r6
   432c0:	3900000d 	sth	r4,0(r7)
   432c4:	38c0008d 	sth	r3,2(r7)
   432c8:	2808d43a 	srli	r4,r5,16
   432cc:	39c00104 	addi	r7,r7,4
   432d0:	1811d43a 	srai	r8,r3,16
   432d4:	943fe92e 	bgeu	r18,r16,4327c <quorem+0x98>
   432d8:	8c45883a 	add	r2,r17,r17
   432dc:	1085883a 	add	r2,r2,r2
   432e0:	9885883a 	add	r2,r19,r2
   432e4:	10c00017 	ldw	r3,0(r2)
   432e8:	18000b1e 	bne	r3,zero,43318 <quorem+0x134>
   432ec:	113fff04 	addi	r4,r2,-4
   432f0:	9900082e 	bgeu	r19,r4,43314 <quorem+0x130>
   432f4:	10bfff17 	ldw	r2,-4(r2)
   432f8:	10000326 	beq	r2,zero,43308 <quorem+0x124>
   432fc:	00000506 	br	43314 <quorem+0x130>
   43300:	20800017 	ldw	r2,0(r4)
   43304:	1000031e 	bne	r2,zero,43314 <quorem+0x130>
   43308:	213fff04 	addi	r4,r4,-4
   4330c:	8c7fffc4 	addi	r17,r17,-1
   43310:	993ffb36 	bltu	r19,r4,43300 <quorem+0x11c>
   43314:	bc400415 	stw	r17,16(r23)
   43318:	a005883a 	mov	r2,r20
   4331c:	dfc00917 	ldw	ra,36(sp)
   43320:	df000817 	ldw	fp,32(sp)
   43324:	ddc00717 	ldw	r23,28(sp)
   43328:	dd800617 	ldw	r22,24(sp)
   4332c:	dd400517 	ldw	r21,20(sp)
   43330:	dd000417 	ldw	r20,16(sp)
   43334:	dcc00317 	ldw	r19,12(sp)
   43338:	dc800217 	ldw	r18,8(sp)
   4333c:	dc400117 	ldw	r17,4(sp)
   43340:	dc000017 	ldw	r16,0(sp)
   43344:	dec00a04 	addi	sp,sp,40
   43348:	f800283a 	ret
   4334c:	980f883a 	mov	r7,r19
   43350:	8011883a 	mov	r8,r16
   43354:	0013883a 	mov	r9,zero
   43358:	000d883a 	mov	r6,zero
   4335c:	40c00017 	ldw	r3,0(r8)
   43360:	39000017 	ldw	r4,0(r7)
   43364:	42000104 	addi	r8,r8,4
   43368:	18bfffcc 	andi	r2,r3,65535
   4336c:	a085383a 	mul	r2,r20,r2
   43370:	1806d43a 	srli	r3,r3,16
   43374:	217fffcc 	andi	r5,r4,65535
   43378:	3085883a 	add	r2,r6,r2
   4337c:	11bfffcc 	andi	r6,r2,65535
   43380:	a0c7383a 	mul	r3,r20,r3
   43384:	1004d43a 	srli	r2,r2,16
   43388:	298bc83a 	sub	r5,r5,r6
   4338c:	2a4b883a 	add	r5,r5,r9
   43390:	2008d43a 	srli	r4,r4,16
   43394:	1887883a 	add	r3,r3,r2
   43398:	280dd43a 	srai	r6,r5,16
   4339c:	18bfffcc 	andi	r2,r3,65535
   433a0:	2089c83a 	sub	r4,r4,r2
   433a4:	2189883a 	add	r4,r4,r6
   433a8:	3900008d 	sth	r4,2(r7)
   433ac:	3940000d 	sth	r5,0(r7)
   433b0:	180cd43a 	srli	r6,r3,16
   433b4:	39c00104 	addi	r7,r7,4
   433b8:	2013d43a 	srai	r9,r4,16
   433bc:	923fe72e 	bgeu	r18,r8,4335c <quorem+0x178>
   433c0:	e03fa61e 	bne	fp,zero,4325c <quorem+0x78>
   433c4:	b0ffff04 	addi	r3,r22,-4
   433c8:	98c0082e 	bgeu	r19,r3,433ec <quorem+0x208>
   433cc:	b0bfff17 	ldw	r2,-4(r22)
   433d0:	10000326 	beq	r2,zero,433e0 <quorem+0x1fc>
   433d4:	00000506 	br	433ec <quorem+0x208>
   433d8:	18800017 	ldw	r2,0(r3)
   433dc:	1000031e 	bne	r2,zero,433ec <quorem+0x208>
   433e0:	18ffff04 	addi	r3,r3,-4
   433e4:	8c7fffc4 	addi	r17,r17,-1
   433e8:	98fffb36 	bltu	r19,r3,433d8 <quorem+0x1f4>
   433ec:	bc400415 	stw	r17,16(r23)
   433f0:	003f9a06 	br	4325c <quorem+0x78>
   433f4:	0005883a 	mov	r2,zero
   433f8:	003fc806 	br	4331c <quorem+0x138>

000433fc <_dtoa_r>:
   433fc:	22001017 	ldw	r8,64(r4)
   43400:	deffda04 	addi	sp,sp,-152
   43404:	dd402115 	stw	r21,132(sp)
   43408:	dd002015 	stw	r20,128(sp)
   4340c:	dc801e15 	stw	r18,120(sp)
   43410:	dc401d15 	stw	r17,116(sp)
   43414:	dfc02515 	stw	ra,148(sp)
   43418:	df002415 	stw	fp,144(sp)
   4341c:	ddc02315 	stw	r23,140(sp)
   43420:	dd802215 	stw	r22,136(sp)
   43424:	dcc01f15 	stw	r19,124(sp)
   43428:	dc001c15 	stw	r16,112(sp)
   4342c:	d9001615 	stw	r4,88(sp)
   43430:	3023883a 	mov	r17,r6
   43434:	2829883a 	mov	r20,r5
   43438:	d9c01715 	stw	r7,92(sp)
   4343c:	dc802817 	ldw	r18,160(sp)
   43440:	302b883a 	mov	r21,r6
   43444:	40000a26 	beq	r8,zero,43470 <_dtoa_r+0x74>
   43448:	20801117 	ldw	r2,68(r4)
   4344c:	400b883a 	mov	r5,r8
   43450:	40800115 	stw	r2,4(r8)
   43454:	20c01117 	ldw	r3,68(r4)
   43458:	00800044 	movi	r2,1
   4345c:	10c4983a 	sll	r2,r2,r3
   43460:	40800215 	stw	r2,8(r8)
   43464:	00465900 	call	46590 <_Bfree>
   43468:	d8c01617 	ldw	r3,88(sp)
   4346c:	18001015 	stw	zero,64(r3)
   43470:	8800a316 	blt	r17,zero,43700 <_dtoa_r+0x304>
   43474:	90000015 	stw	zero,0(r18)
   43478:	a8dffc2c 	andhi	r3,r21,32752
   4347c:	009ffc34 	movhi	r2,32752
   43480:	18809126 	beq	r3,r2,436c8 <_dtoa_r+0x2cc>
   43484:	000d883a 	mov	r6,zero
   43488:	000f883a 	mov	r7,zero
   4348c:	a009883a 	mov	r4,r20
   43490:	a80b883a 	mov	r5,r21
   43494:	dd001215 	stw	r20,72(sp)
   43498:	dd401315 	stw	r21,76(sp)
   4349c:	0049a280 	call	49a28 <__nedf2>
   434a0:	1000171e 	bne	r2,zero,43500 <_dtoa_r+0x104>
   434a4:	d9802717 	ldw	r6,156(sp)
   434a8:	00800044 	movi	r2,1
   434ac:	30800015 	stw	r2,0(r6)
   434b0:	d8802917 	ldw	r2,164(sp)
   434b4:	10029b26 	beq	r2,zero,43f24 <_dtoa_r+0xb28>
   434b8:	d9002917 	ldw	r4,164(sp)
   434bc:	00800174 	movhi	r2,5
   434c0:	10b5a044 	addi	r2,r2,-10623
   434c4:	10ffffc4 	addi	r3,r2,-1
   434c8:	20800015 	stw	r2,0(r4)
   434cc:	1805883a 	mov	r2,r3
   434d0:	dfc02517 	ldw	ra,148(sp)
   434d4:	df002417 	ldw	fp,144(sp)
   434d8:	ddc02317 	ldw	r23,140(sp)
   434dc:	dd802217 	ldw	r22,136(sp)
   434e0:	dd402117 	ldw	r21,132(sp)
   434e4:	dd002017 	ldw	r20,128(sp)
   434e8:	dcc01f17 	ldw	r19,124(sp)
   434ec:	dc801e17 	ldw	r18,120(sp)
   434f0:	dc401d17 	ldw	r17,116(sp)
   434f4:	dc001c17 	ldw	r16,112(sp)
   434f8:	dec02604 	addi	sp,sp,152
   434fc:	f800283a 	ret
   43500:	d9001617 	ldw	r4,88(sp)
   43504:	d9401217 	ldw	r5,72(sp)
   43508:	d8800104 	addi	r2,sp,4
   4350c:	a80d883a 	mov	r6,r21
   43510:	d9c00204 	addi	r7,sp,8
   43514:	d8800015 	stw	r2,0(sp)
   43518:	0046bcc0 	call	46bcc <__d2b>
   4351c:	d8800715 	stw	r2,28(sp)
   43520:	a804d53a 	srli	r2,r21,20
   43524:	1101ffcc 	andi	r4,r2,2047
   43528:	20008626 	beq	r4,zero,43744 <_dtoa_r+0x348>
   4352c:	d8c01217 	ldw	r3,72(sp)
   43530:	00800434 	movhi	r2,16
   43534:	10bfffc4 	addi	r2,r2,-1
   43538:	ddc00117 	ldw	r23,4(sp)
   4353c:	a884703a 	and	r2,r21,r2
   43540:	1811883a 	mov	r8,r3
   43544:	124ffc34 	orhi	r9,r2,16368
   43548:	25bf0044 	addi	r22,r4,-1023
   4354c:	d8000815 	stw	zero,32(sp)
   43550:	0005883a 	mov	r2,zero
   43554:	00cffe34 	movhi	r3,16376
   43558:	480b883a 	mov	r5,r9
   4355c:	4009883a 	mov	r4,r8
   43560:	180f883a 	mov	r7,r3
   43564:	100d883a 	mov	r6,r2
   43568:	00492900 	call	49290 <__subdf3>
   4356c:	0218dbf4 	movhi	r8,25455
   43570:	4210d844 	addi	r8,r8,17249
   43574:	024ff4f4 	movhi	r9,16339
   43578:	4a61e9c4 	addi	r9,r9,-30809
   4357c:	480f883a 	mov	r7,r9
   43580:	400d883a 	mov	r6,r8
   43584:	180b883a 	mov	r5,r3
   43588:	1009883a 	mov	r4,r2
   4358c:	00493840 	call	49384 <__muldf3>
   43590:	0222d874 	movhi	r8,35681
   43594:	42322cc4 	addi	r8,r8,-14157
   43598:	024ff1f4 	movhi	r9,16327
   4359c:	4a628a04 	addi	r9,r9,-30168
   435a0:	480f883a 	mov	r7,r9
   435a4:	400d883a 	mov	r6,r8
   435a8:	180b883a 	mov	r5,r3
   435ac:	1009883a 	mov	r4,r2
   435b0:	00493100 	call	49310 <__adddf3>
   435b4:	b009883a 	mov	r4,r22
   435b8:	1021883a 	mov	r16,r2
   435bc:	1823883a 	mov	r17,r3
   435c0:	0049c480 	call	49c48 <__floatsidf>
   435c4:	021427f4 	movhi	r8,20639
   435c8:	421e7ec4 	addi	r8,r8,31227
   435cc:	024ff4f4 	movhi	r9,16339
   435d0:	4a5104c4 	addi	r9,r9,17427
   435d4:	480f883a 	mov	r7,r9
   435d8:	400d883a 	mov	r6,r8
   435dc:	180b883a 	mov	r5,r3
   435e0:	1009883a 	mov	r4,r2
   435e4:	00493840 	call	49384 <__muldf3>
   435e8:	180f883a 	mov	r7,r3
   435ec:	880b883a 	mov	r5,r17
   435f0:	100d883a 	mov	r6,r2
   435f4:	8009883a 	mov	r4,r16
   435f8:	00493100 	call	49310 <__adddf3>
   435fc:	1009883a 	mov	r4,r2
   43600:	180b883a 	mov	r5,r3
   43604:	1021883a 	mov	r16,r2
   43608:	1823883a 	mov	r17,r3
   4360c:	0049d400 	call	49d40 <__fixdfsi>
   43610:	000d883a 	mov	r6,zero
   43614:	000f883a 	mov	r7,zero
   43618:	8009883a 	mov	r4,r16
   4361c:	880b883a 	mov	r5,r17
   43620:	d8800d15 	stw	r2,52(sp)
   43624:	0049bc00 	call	49bc0 <__ltdf2>
   43628:	10031716 	blt	r2,zero,44288 <_dtoa_r+0xe8c>
   4362c:	d8c00d17 	ldw	r3,52(sp)
   43630:	00800584 	movi	r2,22
   43634:	10c1482e 	bgeu	r2,r3,43b58 <_dtoa_r+0x75c>
   43638:	01000044 	movi	r4,1
   4363c:	d9000c15 	stw	r4,48(sp)
   43640:	bd85c83a 	sub	r2,r23,r22
   43644:	11bfffc4 	addi	r6,r2,-1
   43648:	30030b16 	blt	r6,zero,44278 <_dtoa_r+0xe7c>
   4364c:	d9800a15 	stw	r6,40(sp)
   43650:	d8001115 	stw	zero,68(sp)
   43654:	d8c00d17 	ldw	r3,52(sp)
   43658:	1802ff16 	blt	r3,zero,44258 <_dtoa_r+0xe5c>
   4365c:	d9000a17 	ldw	r4,40(sp)
   43660:	d8c00915 	stw	r3,36(sp)
   43664:	d8001015 	stw	zero,64(sp)
   43668:	20c9883a 	add	r4,r4,r3
   4366c:	d9000a15 	stw	r4,40(sp)
   43670:	d9001717 	ldw	r4,92(sp)
   43674:	00800244 	movi	r2,9
   43678:	11004636 	bltu	r2,r4,43794 <_dtoa_r+0x398>
   4367c:	00800144 	movi	r2,5
   43680:	11020416 	blt	r2,r4,43e94 <_dtoa_r+0xa98>
   43684:	04400044 	movi	r17,1
   43688:	d8c01717 	ldw	r3,92(sp)
   4368c:	00800144 	movi	r2,5
   43690:	10c1ed36 	bltu	r2,r3,43e48 <_dtoa_r+0xa4c>
   43694:	18c5883a 	add	r2,r3,r3
   43698:	1085883a 	add	r2,r2,r2
   4369c:	00c00134 	movhi	r3,4
   436a0:	18cdac04 	addi	r3,r3,14000
   436a4:	10c5883a 	add	r2,r2,r3
   436a8:	11000017 	ldw	r4,0(r2)
   436ac:	2000683a 	jmp	r4
   436b0:	0004379c 	xori	zero,zero,4318
   436b4:	0004379c 	xori	zero,zero,4318
   436b8:	0004419c 	xori	zero,zero,4358
   436bc:	00044174 	movhi	zero,4357
   436c0:	000441b8 	rdprs	zero,zero,4358
   436c4:	000441c4 	movi	zero,4359
   436c8:	d9002717 	ldw	r4,156(sp)
   436cc:	0089c3c4 	movi	r2,9999
   436d0:	20800015 	stw	r2,0(r4)
   436d4:	a0001026 	beq	r20,zero,43718 <_dtoa_r+0x31c>
   436d8:	00c00174 	movhi	r3,5
   436dc:	18f5ac04 	addi	r3,r3,-10576
   436e0:	d9802917 	ldw	r6,164(sp)
   436e4:	303f7926 	beq	r6,zero,434cc <_dtoa_r+0xd0>
   436e8:	188000c7 	ldb	r2,3(r3)
   436ec:	190000c4 	addi	r4,r3,3
   436f0:	1000101e 	bne	r2,zero,43734 <_dtoa_r+0x338>
   436f4:	d8802917 	ldw	r2,164(sp)
   436f8:	11000015 	stw	r4,0(r2)
   436fc:	003f7306 	br	434cc <_dtoa_r+0xd0>
   43700:	00a00034 	movhi	r2,32768
   43704:	10bfffc4 	addi	r2,r2,-1
   43708:	00c00044 	movi	r3,1
   4370c:	88aa703a 	and	r21,r17,r2
   43710:	90c00015 	stw	r3,0(r18)
   43714:	003f5806 	br	43478 <_dtoa_r+0x7c>
   43718:	00800434 	movhi	r2,16
   4371c:	10bfffc4 	addi	r2,r2,-1
   43720:	a884703a 	and	r2,r21,r2
   43724:	103fec1e 	bne	r2,zero,436d8 <_dtoa_r+0x2dc>
   43728:	00c00174 	movhi	r3,5
   4372c:	18f5a904 	addi	r3,r3,-10588
   43730:	003feb06 	br	436e0 <_dtoa_r+0x2e4>
   43734:	d8802917 	ldw	r2,164(sp)
   43738:	19000204 	addi	r4,r3,8
   4373c:	11000015 	stw	r4,0(r2)
   43740:	003f6206 	br	434cc <_dtoa_r+0xd0>
   43744:	ddc00117 	ldw	r23,4(sp)
   43748:	d8800217 	ldw	r2,8(sp)
   4374c:	01000804 	movi	r4,32
   43750:	b8c10c84 	addi	r3,r23,1074
   43754:	18a3883a 	add	r17,r3,r2
   43758:	2441b80e 	bge	r4,r17,43e3c <_dtoa_r+0xa40>
   4375c:	00c01004 	movi	r3,64
   43760:	1c47c83a 	sub	r3,r3,r17
   43764:	88bff804 	addi	r2,r17,-32
   43768:	a8c6983a 	sll	r3,r21,r3
   4376c:	a084d83a 	srl	r2,r20,r2
   43770:	1888b03a 	or	r4,r3,r2
   43774:	0049e180 	call	49e18 <__floatunsidf>
   43778:	1011883a 	mov	r8,r2
   4377c:	00bf8434 	movhi	r2,65040
   43780:	01000044 	movi	r4,1
   43784:	10d3883a 	add	r9,r2,r3
   43788:	8dbef344 	addi	r22,r17,-1075
   4378c:	d9000815 	stw	r4,32(sp)
   43790:	003f6f06 	br	43550 <_dtoa_r+0x154>
   43794:	d8001715 	stw	zero,92(sp)
   43798:	04400044 	movi	r17,1
   4379c:	00bfffc4 	movi	r2,-1
   437a0:	00c00044 	movi	r3,1
   437a4:	d8800e15 	stw	r2,56(sp)
   437a8:	d8002615 	stw	zero,152(sp)
   437ac:	d8800f15 	stw	r2,60(sp)
   437b0:	d8c00b15 	stw	r3,44(sp)
   437b4:	1021883a 	mov	r16,r2
   437b8:	d8801617 	ldw	r2,88(sp)
   437bc:	10001115 	stw	zero,68(r2)
   437c0:	d8801617 	ldw	r2,88(sp)
   437c4:	11401117 	ldw	r5,68(r2)
   437c8:	1009883a 	mov	r4,r2
   437cc:	0046b100 	call	46b10 <_Balloc>
   437d0:	d8c01617 	ldw	r3,88(sp)
   437d4:	d8800515 	stw	r2,20(sp)
   437d8:	18801015 	stw	r2,64(r3)
   437dc:	00800384 	movi	r2,14
   437e0:	14006836 	bltu	r2,r16,43984 <_dtoa_r+0x588>
   437e4:	8805003a 	cmpeq	r2,r17,zero
   437e8:	1000661e 	bne	r2,zero,43984 <_dtoa_r+0x588>
   437ec:	d9000d17 	ldw	r4,52(sp)
   437f0:	0102300e 	bge	zero,r4,440b4 <_dtoa_r+0xcb8>
   437f4:	208003cc 	andi	r2,r4,15
   437f8:	100490fa 	slli	r2,r2,3
   437fc:	2025d13a 	srai	r18,r4,4
   43800:	00c00174 	movhi	r3,5
   43804:	18f5bd04 	addi	r3,r3,-10508
   43808:	10c5883a 	add	r2,r2,r3
   4380c:	90c0040c 	andi	r3,r18,16
   43810:	14000017 	ldw	r16,0(r2)
   43814:	14400117 	ldw	r17,4(r2)
   43818:	18036a1e 	bne	r3,zero,445c4 <_dtoa_r+0x11c8>
   4381c:	05800084 	movi	r22,2
   43820:	90001026 	beq	r18,zero,43864 <_dtoa_r+0x468>
   43824:	04c00174 	movhi	r19,5
   43828:	9cf5ef04 	addi	r19,r19,-10308
   4382c:	9080004c 	andi	r2,r18,1
   43830:	1005003a 	cmpeq	r2,r2,zero
   43834:	1000081e 	bne	r2,zero,43858 <_dtoa_r+0x45c>
   43838:	99800017 	ldw	r6,0(r19)
   4383c:	99c00117 	ldw	r7,4(r19)
   43840:	880b883a 	mov	r5,r17
   43844:	8009883a 	mov	r4,r16
   43848:	00493840 	call	49384 <__muldf3>
   4384c:	1021883a 	mov	r16,r2
   43850:	b5800044 	addi	r22,r22,1
   43854:	1823883a 	mov	r17,r3
   43858:	9025d07a 	srai	r18,r18,1
   4385c:	9cc00204 	addi	r19,r19,8
   43860:	903ff21e 	bne	r18,zero,4382c <_dtoa_r+0x430>
   43864:	a80b883a 	mov	r5,r21
   43868:	a009883a 	mov	r4,r20
   4386c:	880f883a 	mov	r7,r17
   43870:	800d883a 	mov	r6,r16
   43874:	00497480 	call	49748 <__divdf3>
   43878:	1029883a 	mov	r20,r2
   4387c:	182b883a 	mov	r21,r3
   43880:	d8c00c17 	ldw	r3,48(sp)
   43884:	1805003a 	cmpeq	r2,r3,zero
   43888:	1000081e 	bne	r2,zero,438ac <_dtoa_r+0x4b0>
   4388c:	0005883a 	mov	r2,zero
   43890:	00cffc34 	movhi	r3,16368
   43894:	180f883a 	mov	r7,r3
   43898:	a009883a 	mov	r4,r20
   4389c:	a80b883a 	mov	r5,r21
   438a0:	100d883a 	mov	r6,r2
   438a4:	0049bc00 	call	49bc0 <__ltdf2>
   438a8:	1003fe16 	blt	r2,zero,448a4 <_dtoa_r+0x14a8>
   438ac:	b009883a 	mov	r4,r22
   438b0:	0049c480 	call	49c48 <__floatsidf>
   438b4:	180b883a 	mov	r5,r3
   438b8:	1009883a 	mov	r4,r2
   438bc:	a00d883a 	mov	r6,r20
   438c0:	a80f883a 	mov	r7,r21
   438c4:	00493840 	call	49384 <__muldf3>
   438c8:	0011883a 	mov	r8,zero
   438cc:	02500734 	movhi	r9,16412
   438d0:	1009883a 	mov	r4,r2
   438d4:	180b883a 	mov	r5,r3
   438d8:	480f883a 	mov	r7,r9
   438dc:	400d883a 	mov	r6,r8
   438e0:	00493100 	call	49310 <__adddf3>
   438e4:	d9000f17 	ldw	r4,60(sp)
   438e8:	102d883a 	mov	r22,r2
   438ec:	00bf3034 	movhi	r2,64704
   438f0:	18b9883a 	add	fp,r3,r2
   438f4:	e02f883a 	mov	r23,fp
   438f8:	20028f1e 	bne	r4,zero,44338 <_dtoa_r+0xf3c>
   438fc:	0005883a 	mov	r2,zero
   43900:	00d00534 	movhi	r3,16404
   43904:	a009883a 	mov	r4,r20
   43908:	a80b883a 	mov	r5,r21
   4390c:	180f883a 	mov	r7,r3
   43910:	100d883a 	mov	r6,r2
   43914:	00492900 	call	49290 <__subdf3>
   43918:	1009883a 	mov	r4,r2
   4391c:	e00f883a 	mov	r7,fp
   43920:	180b883a 	mov	r5,r3
   43924:	b00d883a 	mov	r6,r22
   43928:	1025883a 	mov	r18,r2
   4392c:	1827883a 	mov	r19,r3
   43930:	0049ab00 	call	49ab0 <__gtdf2>
   43934:	00834f16 	blt	zero,r2,44674 <_dtoa_r+0x1278>
   43938:	e0e0003c 	xorhi	r3,fp,32768
   4393c:	9009883a 	mov	r4,r18
   43940:	980b883a 	mov	r5,r19
   43944:	180f883a 	mov	r7,r3
   43948:	b00d883a 	mov	r6,r22
   4394c:	0049bc00 	call	49bc0 <__ltdf2>
   43950:	1000080e 	bge	r2,zero,43974 <_dtoa_r+0x578>
   43954:	0027883a 	mov	r19,zero
   43958:	0025883a 	mov	r18,zero
   4395c:	d8802617 	ldw	r2,152(sp)
   43960:	df000517 	ldw	fp,20(sp)
   43964:	d8000615 	stw	zero,24(sp)
   43968:	0084303a 	nor	r2,zero,r2
   4396c:	d8800d15 	stw	r2,52(sp)
   43970:	00019b06 	br	43fe0 <_dtoa_r+0xbe4>
   43974:	d9801217 	ldw	r6,72(sp)
   43978:	d8801317 	ldw	r2,76(sp)
   4397c:	3029883a 	mov	r20,r6
   43980:	102b883a 	mov	r21,r2
   43984:	d8c00217 	ldw	r3,8(sp)
   43988:	18008516 	blt	r3,zero,43ba0 <_dtoa_r+0x7a4>
   4398c:	d9000d17 	ldw	r4,52(sp)
   43990:	00800384 	movi	r2,14
   43994:	11008216 	blt	r2,r4,43ba0 <_dtoa_r+0x7a4>
   43998:	200490fa 	slli	r2,r4,3
   4399c:	d9802617 	ldw	r6,152(sp)
   439a0:	00c00174 	movhi	r3,5
   439a4:	18f5bd04 	addi	r3,r3,-10508
   439a8:	10c5883a 	add	r2,r2,r3
   439ac:	14800017 	ldw	r18,0(r2)
   439b0:	14c00117 	ldw	r19,4(r2)
   439b4:	30031e16 	blt	r6,zero,44630 <_dtoa_r+0x1234>
   439b8:	d9000517 	ldw	r4,20(sp)
   439bc:	d8c00f17 	ldw	r3,60(sp)
   439c0:	a823883a 	mov	r17,r21
   439c4:	a021883a 	mov	r16,r20
   439c8:	192b883a 	add	r21,r3,r4
   439cc:	2039883a 	mov	fp,r4
   439d0:	00000f06 	br	43a10 <_dtoa_r+0x614>
   439d4:	0005883a 	mov	r2,zero
   439d8:	00d00934 	movhi	r3,16420
   439dc:	5009883a 	mov	r4,r10
   439e0:	580b883a 	mov	r5,r11
   439e4:	180f883a 	mov	r7,r3
   439e8:	100d883a 	mov	r6,r2
   439ec:	00493840 	call	49384 <__muldf3>
   439f0:	180b883a 	mov	r5,r3
   439f4:	000d883a 	mov	r6,zero
   439f8:	000f883a 	mov	r7,zero
   439fc:	1009883a 	mov	r4,r2
   43a00:	1021883a 	mov	r16,r2
   43a04:	1823883a 	mov	r17,r3
   43a08:	0049a280 	call	49a28 <__nedf2>
   43a0c:	10004526 	beq	r2,zero,43b24 <_dtoa_r+0x728>
   43a10:	900d883a 	mov	r6,r18
   43a14:	980f883a 	mov	r7,r19
   43a18:	8009883a 	mov	r4,r16
   43a1c:	880b883a 	mov	r5,r17
   43a20:	00497480 	call	49748 <__divdf3>
   43a24:	180b883a 	mov	r5,r3
   43a28:	1009883a 	mov	r4,r2
   43a2c:	0049d400 	call	49d40 <__fixdfsi>
   43a30:	1009883a 	mov	r4,r2
   43a34:	1029883a 	mov	r20,r2
   43a38:	0049c480 	call	49c48 <__floatsidf>
   43a3c:	180f883a 	mov	r7,r3
   43a40:	9009883a 	mov	r4,r18
   43a44:	980b883a 	mov	r5,r19
   43a48:	100d883a 	mov	r6,r2
   43a4c:	00493840 	call	49384 <__muldf3>
   43a50:	180f883a 	mov	r7,r3
   43a54:	880b883a 	mov	r5,r17
   43a58:	8009883a 	mov	r4,r16
   43a5c:	100d883a 	mov	r6,r2
   43a60:	00492900 	call	49290 <__subdf3>
   43a64:	1015883a 	mov	r10,r2
   43a68:	a0800c04 	addi	r2,r20,48
   43a6c:	e0800005 	stb	r2,0(fp)
   43a70:	e7000044 	addi	fp,fp,1
   43a74:	1817883a 	mov	r11,r3
   43a78:	e57fd61e 	bne	fp,r21,439d4 <_dtoa_r+0x5d8>
   43a7c:	500d883a 	mov	r6,r10
   43a80:	180f883a 	mov	r7,r3
   43a84:	5009883a 	mov	r4,r10
   43a88:	180b883a 	mov	r5,r3
   43a8c:	00493100 	call	49310 <__adddf3>
   43a90:	100d883a 	mov	r6,r2
   43a94:	9009883a 	mov	r4,r18
   43a98:	980b883a 	mov	r5,r19
   43a9c:	180f883a 	mov	r7,r3
   43aa0:	1021883a 	mov	r16,r2
   43aa4:	1823883a 	mov	r17,r3
   43aa8:	0049bc00 	call	49bc0 <__ltdf2>
   43aac:	10000816 	blt	r2,zero,43ad0 <_dtoa_r+0x6d4>
   43ab0:	980b883a 	mov	r5,r19
   43ab4:	800d883a 	mov	r6,r16
   43ab8:	880f883a 	mov	r7,r17
   43abc:	9009883a 	mov	r4,r18
   43ac0:	00499a00 	call	499a0 <__eqdf2>
   43ac4:	1000171e 	bne	r2,zero,43b24 <_dtoa_r+0x728>
   43ac8:	a080004c 	andi	r2,r20,1
   43acc:	10001526 	beq	r2,zero,43b24 <_dtoa_r+0x728>
   43ad0:	d8800d17 	ldw	r2,52(sp)
   43ad4:	d8800415 	stw	r2,16(sp)
   43ad8:	e009883a 	mov	r4,fp
   43adc:	213fffc4 	addi	r4,r4,-1
   43ae0:	20c00007 	ldb	r3,0(r4)
   43ae4:	00800e44 	movi	r2,57
   43ae8:	1880081e 	bne	r3,r2,43b0c <_dtoa_r+0x710>
   43aec:	d8800517 	ldw	r2,20(sp)
   43af0:	113ffa1e 	bne	r2,r4,43adc <_dtoa_r+0x6e0>
   43af4:	d8c00417 	ldw	r3,16(sp)
   43af8:	d9800517 	ldw	r6,20(sp)
   43afc:	00800c04 	movi	r2,48
   43b00:	18c00044 	addi	r3,r3,1
   43b04:	d8c00415 	stw	r3,16(sp)
   43b08:	30800005 	stb	r2,0(r6)
   43b0c:	20800003 	ldbu	r2,0(r4)
   43b10:	d8c00417 	ldw	r3,16(sp)
   43b14:	27000044 	addi	fp,r4,1
   43b18:	10800044 	addi	r2,r2,1
   43b1c:	d8c00d15 	stw	r3,52(sp)
   43b20:	20800005 	stb	r2,0(r4)
   43b24:	d9001617 	ldw	r4,88(sp)
   43b28:	d9400717 	ldw	r5,28(sp)
   43b2c:	00465900 	call	46590 <_Bfree>
   43b30:	e0000005 	stb	zero,0(fp)
   43b34:	d9800d17 	ldw	r6,52(sp)
   43b38:	d8c02717 	ldw	r3,156(sp)
   43b3c:	d9002917 	ldw	r4,164(sp)
   43b40:	30800044 	addi	r2,r6,1
   43b44:	18800015 	stw	r2,0(r3)
   43b48:	20029c26 	beq	r4,zero,445bc <_dtoa_r+0x11c0>
   43b4c:	d8c00517 	ldw	r3,20(sp)
   43b50:	27000015 	stw	fp,0(r4)
   43b54:	003e5d06 	br	434cc <_dtoa_r+0xd0>
   43b58:	d9800d17 	ldw	r6,52(sp)
   43b5c:	00c00174 	movhi	r3,5
   43b60:	18f5bd04 	addi	r3,r3,-10508
   43b64:	d9001217 	ldw	r4,72(sp)
   43b68:	300490fa 	slli	r2,r6,3
   43b6c:	d9401317 	ldw	r5,76(sp)
   43b70:	10c5883a 	add	r2,r2,r3
   43b74:	12000017 	ldw	r8,0(r2)
   43b78:	12400117 	ldw	r9,4(r2)
   43b7c:	400d883a 	mov	r6,r8
   43b80:	480f883a 	mov	r7,r9
   43b84:	0049bc00 	call	49bc0 <__ltdf2>
   43b88:	1000030e 	bge	r2,zero,43b98 <_dtoa_r+0x79c>
   43b8c:	d8800d17 	ldw	r2,52(sp)
   43b90:	10bfffc4 	addi	r2,r2,-1
   43b94:	d8800d15 	stw	r2,52(sp)
   43b98:	d8000c15 	stw	zero,48(sp)
   43b9c:	003ea806 	br	43640 <_dtoa_r+0x244>
   43ba0:	d9000b17 	ldw	r4,44(sp)
   43ba4:	202cc03a 	cmpne	r22,r4,zero
   43ba8:	b000c71e 	bne	r22,zero,43ec8 <_dtoa_r+0xacc>
   43bac:	dc001117 	ldw	r16,68(sp)
   43bb0:	dc801017 	ldw	r18,64(sp)
   43bb4:	0027883a 	mov	r19,zero
   43bb8:	04000b0e 	bge	zero,r16,43be8 <_dtoa_r+0x7ec>
   43bbc:	d8c00a17 	ldw	r3,40(sp)
   43bc0:	00c0090e 	bge	zero,r3,43be8 <_dtoa_r+0x7ec>
   43bc4:	8005883a 	mov	r2,r16
   43bc8:	1c011316 	blt	r3,r16,44018 <_dtoa_r+0xc1c>
   43bcc:	d9000a17 	ldw	r4,40(sp)
   43bd0:	d9801117 	ldw	r6,68(sp)
   43bd4:	80a1c83a 	sub	r16,r16,r2
   43bd8:	2089c83a 	sub	r4,r4,r2
   43bdc:	308dc83a 	sub	r6,r6,r2
   43be0:	d9000a15 	stw	r4,40(sp)
   43be4:	d9801115 	stw	r6,68(sp)
   43be8:	d8801017 	ldw	r2,64(sp)
   43bec:	0080150e 	bge	zero,r2,43c44 <_dtoa_r+0x848>
   43bf0:	d8c00b17 	ldw	r3,44(sp)
   43bf4:	1805003a 	cmpeq	r2,r3,zero
   43bf8:	1001c91e 	bne	r2,zero,44320 <_dtoa_r+0xf24>
   43bfc:	04800e0e 	bge	zero,r18,43c38 <_dtoa_r+0x83c>
   43c00:	d9001617 	ldw	r4,88(sp)
   43c04:	980b883a 	mov	r5,r19
   43c08:	900d883a 	mov	r6,r18
   43c0c:	00473440 	call	47344 <__pow5mult>
   43c10:	d9001617 	ldw	r4,88(sp)
   43c14:	d9800717 	ldw	r6,28(sp)
   43c18:	100b883a 	mov	r5,r2
   43c1c:	1027883a 	mov	r19,r2
   43c20:	00470200 	call	47020 <__multiply>
   43c24:	d9001617 	ldw	r4,88(sp)
   43c28:	d9400717 	ldw	r5,28(sp)
   43c2c:	1023883a 	mov	r17,r2
   43c30:	00465900 	call	46590 <_Bfree>
   43c34:	dc400715 	stw	r17,28(sp)
   43c38:	d9001017 	ldw	r4,64(sp)
   43c3c:	248dc83a 	sub	r6,r4,r18
   43c40:	30010e1e 	bne	r6,zero,4407c <_dtoa_r+0xc80>
   43c44:	d9001617 	ldw	r4,88(sp)
   43c48:	04400044 	movi	r17,1
   43c4c:	880b883a 	mov	r5,r17
   43c50:	00472080 	call	47208 <__i2b>
   43c54:	d9800917 	ldw	r6,36(sp)
   43c58:	1025883a 	mov	r18,r2
   43c5c:	0180040e 	bge	zero,r6,43c70 <_dtoa_r+0x874>
   43c60:	d9001617 	ldw	r4,88(sp)
   43c64:	100b883a 	mov	r5,r2
   43c68:	00473440 	call	47344 <__pow5mult>
   43c6c:	1025883a 	mov	r18,r2
   43c70:	d8801717 	ldw	r2,92(sp)
   43c74:	8880f30e 	bge	r17,r2,44044 <_dtoa_r+0xc48>
   43c78:	0023883a 	mov	r17,zero
   43c7c:	d9800917 	ldw	r6,36(sp)
   43c80:	30019e1e 	bne	r6,zero,442fc <_dtoa_r+0xf00>
   43c84:	00c00044 	movi	r3,1
   43c88:	d9000a17 	ldw	r4,40(sp)
   43c8c:	20c5883a 	add	r2,r4,r3
   43c90:	10c007cc 	andi	r3,r2,31
   43c94:	1800841e 	bne	r3,zero,43ea8 <_dtoa_r+0xaac>
   43c98:	00800704 	movi	r2,28
   43c9c:	d9000a17 	ldw	r4,40(sp)
   43ca0:	d9801117 	ldw	r6,68(sp)
   43ca4:	80a1883a 	add	r16,r16,r2
   43ca8:	2089883a 	add	r4,r4,r2
   43cac:	308d883a 	add	r6,r6,r2
   43cb0:	d9000a15 	stw	r4,40(sp)
   43cb4:	d9801115 	stw	r6,68(sp)
   43cb8:	d8801117 	ldw	r2,68(sp)
   43cbc:	0080050e 	bge	zero,r2,43cd4 <_dtoa_r+0x8d8>
   43cc0:	d9400717 	ldw	r5,28(sp)
   43cc4:	d9001617 	ldw	r4,88(sp)
   43cc8:	100d883a 	mov	r6,r2
   43ccc:	0046ed40 	call	46ed4 <__lshift>
   43cd0:	d8800715 	stw	r2,28(sp)
   43cd4:	d8c00a17 	ldw	r3,40(sp)
   43cd8:	00c0050e 	bge	zero,r3,43cf0 <_dtoa_r+0x8f4>
   43cdc:	d9001617 	ldw	r4,88(sp)
   43ce0:	900b883a 	mov	r5,r18
   43ce4:	180d883a 	mov	r6,r3
   43ce8:	0046ed40 	call	46ed4 <__lshift>
   43cec:	1025883a 	mov	r18,r2
   43cf0:	d9000c17 	ldw	r4,48(sp)
   43cf4:	2005003a 	cmpeq	r2,r4,zero
   43cf8:	10016f26 	beq	r2,zero,442b8 <_dtoa_r+0xebc>
   43cfc:	d9000f17 	ldw	r4,60(sp)
   43d00:	0102170e 	bge	zero,r4,44560 <_dtoa_r+0x1164>
   43d04:	d9800b17 	ldw	r6,44(sp)
   43d08:	3005003a 	cmpeq	r2,r6,zero
   43d0c:	1000881e 	bne	r2,zero,43f30 <_dtoa_r+0xb34>
   43d10:	0400050e 	bge	zero,r16,43d28 <_dtoa_r+0x92c>
   43d14:	d9001617 	ldw	r4,88(sp)
   43d18:	980b883a 	mov	r5,r19
   43d1c:	800d883a 	mov	r6,r16
   43d20:	0046ed40 	call	46ed4 <__lshift>
   43d24:	1027883a 	mov	r19,r2
   43d28:	8804c03a 	cmpne	r2,r17,zero
   43d2c:	1002541e 	bne	r2,zero,44680 <_dtoa_r+0x1284>
   43d30:	980b883a 	mov	r5,r19
   43d34:	dd800517 	ldw	r22,20(sp)
   43d38:	dcc00615 	stw	r19,24(sp)
   43d3c:	a700004c 	andi	fp,r20,1
   43d40:	2827883a 	mov	r19,r5
   43d44:	d9000717 	ldw	r4,28(sp)
   43d48:	900b883a 	mov	r5,r18
   43d4c:	00431e40 	call	431e4 <quorem>
   43d50:	d9000717 	ldw	r4,28(sp)
   43d54:	d9400617 	ldw	r5,24(sp)
   43d58:	1023883a 	mov	r17,r2
   43d5c:	8dc00c04 	addi	r23,r17,48
   43d60:	00466ec0 	call	466ec <__mcmp>
   43d64:	d9001617 	ldw	r4,88(sp)
   43d68:	900b883a 	mov	r5,r18
   43d6c:	980d883a 	mov	r6,r19
   43d70:	1029883a 	mov	r20,r2
   43d74:	0046d480 	call	46d48 <__mdiff>
   43d78:	102b883a 	mov	r21,r2
   43d7c:	10800317 	ldw	r2,12(r2)
   43d80:	1001281e 	bne	r2,zero,44224 <_dtoa_r+0xe28>
   43d84:	d9000717 	ldw	r4,28(sp)
   43d88:	a80b883a 	mov	r5,r21
   43d8c:	00466ec0 	call	466ec <__mcmp>
   43d90:	d9001617 	ldw	r4,88(sp)
   43d94:	1021883a 	mov	r16,r2
   43d98:	a80b883a 	mov	r5,r21
   43d9c:	00465900 	call	46590 <_Bfree>
   43da0:	8000041e 	bne	r16,zero,43db4 <_dtoa_r+0x9b8>
   43da4:	d8801717 	ldw	r2,92(sp)
   43da8:	1000021e 	bne	r2,zero,43db4 <_dtoa_r+0x9b8>
   43dac:	e004c03a 	cmpne	r2,fp,zero
   43db0:	10011726 	beq	r2,zero,44210 <_dtoa_r+0xe14>
   43db4:	a0010616 	blt	r20,zero,441d0 <_dtoa_r+0xdd4>
   43db8:	a000041e 	bne	r20,zero,43dcc <_dtoa_r+0x9d0>
   43dbc:	d8c01717 	ldw	r3,92(sp)
   43dc0:	1800021e 	bne	r3,zero,43dcc <_dtoa_r+0x9d0>
   43dc4:	e004c03a 	cmpne	r2,fp,zero
   43dc8:	10010126 	beq	r2,zero,441d0 <_dtoa_r+0xdd4>
   43dcc:	04023d16 	blt	zero,r16,446c4 <_dtoa_r+0x12c8>
   43dd0:	b5c00005 	stb	r23,0(r22)
   43dd4:	d9800517 	ldw	r6,20(sp)
   43dd8:	d9000f17 	ldw	r4,60(sp)
   43ddc:	b5800044 	addi	r22,r22,1
   43de0:	3105883a 	add	r2,r6,r4
   43de4:	b0806526 	beq	r22,r2,43f7c <_dtoa_r+0xb80>
   43de8:	d9400717 	ldw	r5,28(sp)
   43dec:	d9001617 	ldw	r4,88(sp)
   43df0:	01800284 	movi	r6,10
   43df4:	000f883a 	mov	r7,zero
   43df8:	00472440 	call	47244 <__multadd>
   43dfc:	d8800715 	stw	r2,28(sp)
   43e00:	d8800617 	ldw	r2,24(sp)
   43e04:	14c10c26 	beq	r2,r19,44238 <_dtoa_r+0xe3c>
   43e08:	d9400617 	ldw	r5,24(sp)
   43e0c:	d9001617 	ldw	r4,88(sp)
   43e10:	01800284 	movi	r6,10
   43e14:	000f883a 	mov	r7,zero
   43e18:	00472440 	call	47244 <__multadd>
   43e1c:	d9001617 	ldw	r4,88(sp)
   43e20:	980b883a 	mov	r5,r19
   43e24:	01800284 	movi	r6,10
   43e28:	000f883a 	mov	r7,zero
   43e2c:	d8800615 	stw	r2,24(sp)
   43e30:	00472440 	call	47244 <__multadd>
   43e34:	1027883a 	mov	r19,r2
   43e38:	003fc206 	br	43d44 <_dtoa_r+0x948>
   43e3c:	2445c83a 	sub	r2,r4,r17
   43e40:	a088983a 	sll	r4,r20,r2
   43e44:	003e4b06 	br	43774 <_dtoa_r+0x378>
   43e48:	01bfffc4 	movi	r6,-1
   43e4c:	00800044 	movi	r2,1
   43e50:	d9800e15 	stw	r6,56(sp)
   43e54:	d9800f15 	stw	r6,60(sp)
   43e58:	d8800b15 	stw	r2,44(sp)
   43e5c:	d8c01617 	ldw	r3,88(sp)
   43e60:	008005c4 	movi	r2,23
   43e64:	18001115 	stw	zero,68(r3)
   43e68:	1580082e 	bgeu	r2,r22,43e8c <_dtoa_r+0xa90>
   43e6c:	00c00104 	movi	r3,4
   43e70:	0009883a 	mov	r4,zero
   43e74:	18c7883a 	add	r3,r3,r3
   43e78:	18800504 	addi	r2,r3,20
   43e7c:	21000044 	addi	r4,r4,1
   43e80:	b0bffc2e 	bgeu	r22,r2,43e74 <_dtoa_r+0xa78>
   43e84:	d9801617 	ldw	r6,88(sp)
   43e88:	31001115 	stw	r4,68(r6)
   43e8c:	dc000f17 	ldw	r16,60(sp)
   43e90:	003e4b06 	br	437c0 <_dtoa_r+0x3c4>
   43e94:	d9801717 	ldw	r6,92(sp)
   43e98:	0023883a 	mov	r17,zero
   43e9c:	31bfff04 	addi	r6,r6,-4
   43ea0:	d9801715 	stw	r6,92(sp)
   43ea4:	003df806 	br	43688 <_dtoa_r+0x28c>
   43ea8:	00800804 	movi	r2,32
   43eac:	10c9c83a 	sub	r4,r2,r3
   43eb0:	00c00104 	movi	r3,4
   43eb4:	19005a16 	blt	r3,r4,44020 <_dtoa_r+0xc24>
   43eb8:	008000c4 	movi	r2,3
   43ebc:	113f7e16 	blt	r2,r4,43cb8 <_dtoa_r+0x8bc>
   43ec0:	20800704 	addi	r2,r4,28
   43ec4:	003f7506 	br	43c9c <_dtoa_r+0x8a0>
   43ec8:	d9801717 	ldw	r6,92(sp)
   43ecc:	00800044 	movi	r2,1
   43ed0:	1180a10e 	bge	r2,r6,44158 <_dtoa_r+0xd5c>
   43ed4:	d9800f17 	ldw	r6,60(sp)
   43ed8:	d8c01017 	ldw	r3,64(sp)
   43edc:	30bfffc4 	addi	r2,r6,-1
   43ee0:	1881c616 	blt	r3,r2,445fc <_dtoa_r+0x1200>
   43ee4:	18a5c83a 	sub	r18,r3,r2
   43ee8:	d8800f17 	ldw	r2,60(sp)
   43eec:	10026216 	blt	r2,zero,44878 <_dtoa_r+0x147c>
   43ef0:	dc001117 	ldw	r16,68(sp)
   43ef4:	1007883a 	mov	r3,r2
   43ef8:	d9800a17 	ldw	r6,40(sp)
   43efc:	d8801117 	ldw	r2,68(sp)
   43f00:	d9001617 	ldw	r4,88(sp)
   43f04:	30cd883a 	add	r6,r6,r3
   43f08:	10c5883a 	add	r2,r2,r3
   43f0c:	01400044 	movi	r5,1
   43f10:	d9800a15 	stw	r6,40(sp)
   43f14:	d8801115 	stw	r2,68(sp)
   43f18:	00472080 	call	47208 <__i2b>
   43f1c:	1027883a 	mov	r19,r2
   43f20:	003f2506 	br	43bb8 <_dtoa_r+0x7bc>
   43f24:	00c00174 	movhi	r3,5
   43f28:	18f5a004 	addi	r3,r3,-10624
   43f2c:	003d6706 	br	434cc <_dtoa_r+0xd0>
   43f30:	dd800517 	ldw	r22,20(sp)
   43f34:	04000044 	movi	r16,1
   43f38:	00000706 	br	43f58 <_dtoa_r+0xb5c>
   43f3c:	d9400717 	ldw	r5,28(sp)
   43f40:	d9001617 	ldw	r4,88(sp)
   43f44:	01800284 	movi	r6,10
   43f48:	000f883a 	mov	r7,zero
   43f4c:	00472440 	call	47244 <__multadd>
   43f50:	d8800715 	stw	r2,28(sp)
   43f54:	84000044 	addi	r16,r16,1
   43f58:	d9000717 	ldw	r4,28(sp)
   43f5c:	900b883a 	mov	r5,r18
   43f60:	00431e40 	call	431e4 <quorem>
   43f64:	15c00c04 	addi	r23,r2,48
   43f68:	b5c00005 	stb	r23,0(r22)
   43f6c:	d8c00f17 	ldw	r3,60(sp)
   43f70:	b5800044 	addi	r22,r22,1
   43f74:	80fff116 	blt	r16,r3,43f3c <_dtoa_r+0xb40>
   43f78:	d8000615 	stw	zero,24(sp)
   43f7c:	d9400717 	ldw	r5,28(sp)
   43f80:	d9001617 	ldw	r4,88(sp)
   43f84:	01800044 	movi	r6,1
   43f88:	0046ed40 	call	46ed4 <__lshift>
   43f8c:	1009883a 	mov	r4,r2
   43f90:	900b883a 	mov	r5,r18
   43f94:	d8800715 	stw	r2,28(sp)
   43f98:	00466ec0 	call	466ec <__mcmp>
   43f9c:	00803c0e 	bge	zero,r2,44090 <_dtoa_r+0xc94>
   43fa0:	b009883a 	mov	r4,r22
   43fa4:	213fffc4 	addi	r4,r4,-1
   43fa8:	21400003 	ldbu	r5,0(r4)
   43fac:	00800e44 	movi	r2,57
   43fb0:	28c03fcc 	andi	r3,r5,255
   43fb4:	18c0201c 	xori	r3,r3,128
   43fb8:	18ffe004 	addi	r3,r3,-128
   43fbc:	1881981e 	bne	r3,r2,44620 <_dtoa_r+0x1224>
   43fc0:	d9800517 	ldw	r6,20(sp)
   43fc4:	21bff71e 	bne	r4,r6,43fa4 <_dtoa_r+0xba8>
   43fc8:	d8800d17 	ldw	r2,52(sp)
   43fcc:	37000044 	addi	fp,r6,1
   43fd0:	10800044 	addi	r2,r2,1
   43fd4:	d8800d15 	stw	r2,52(sp)
   43fd8:	00800c44 	movi	r2,49
   43fdc:	30800005 	stb	r2,0(r6)
   43fe0:	d9001617 	ldw	r4,88(sp)
   43fe4:	900b883a 	mov	r5,r18
   43fe8:	00465900 	call	46590 <_Bfree>
   43fec:	983ecd26 	beq	r19,zero,43b24 <_dtoa_r+0x728>
   43ff0:	d8c00617 	ldw	r3,24(sp)
   43ff4:	18000426 	beq	r3,zero,44008 <_dtoa_r+0xc0c>
   43ff8:	1cc00326 	beq	r3,r19,44008 <_dtoa_r+0xc0c>
   43ffc:	d9001617 	ldw	r4,88(sp)
   44000:	180b883a 	mov	r5,r3
   44004:	00465900 	call	46590 <_Bfree>
   44008:	d9001617 	ldw	r4,88(sp)
   4400c:	980b883a 	mov	r5,r19
   44010:	00465900 	call	46590 <_Bfree>
   44014:	003ec306 	br	43b24 <_dtoa_r+0x728>
   44018:	1805883a 	mov	r2,r3
   4401c:	003eeb06 	br	43bcc <_dtoa_r+0x7d0>
   44020:	d9800a17 	ldw	r6,40(sp)
   44024:	d8c01117 	ldw	r3,68(sp)
   44028:	20bfff04 	addi	r2,r4,-4
   4402c:	308d883a 	add	r6,r6,r2
   44030:	1887883a 	add	r3,r3,r2
   44034:	80a1883a 	add	r16,r16,r2
   44038:	d9800a15 	stw	r6,40(sp)
   4403c:	d8c01115 	stw	r3,68(sp)
   44040:	003f1d06 	br	43cb8 <_dtoa_r+0x8bc>
   44044:	a03f0c1e 	bne	r20,zero,43c78 <_dtoa_r+0x87c>
   44048:	00800434 	movhi	r2,16
   4404c:	10bfffc4 	addi	r2,r2,-1
   44050:	a884703a 	and	r2,r21,r2
   44054:	103f081e 	bne	r2,zero,43c78 <_dtoa_r+0x87c>
   44058:	a89ffc2c 	andhi	r2,r21,32752
   4405c:	103f0626 	beq	r2,zero,43c78 <_dtoa_r+0x87c>
   44060:	d8c01117 	ldw	r3,68(sp)
   44064:	d9000a17 	ldw	r4,40(sp)
   44068:	18c00044 	addi	r3,r3,1
   4406c:	21000044 	addi	r4,r4,1
   44070:	d8c01115 	stw	r3,68(sp)
   44074:	d9000a15 	stw	r4,40(sp)
   44078:	003f0006 	br	43c7c <_dtoa_r+0x880>
   4407c:	d9400717 	ldw	r5,28(sp)
   44080:	d9001617 	ldw	r4,88(sp)
   44084:	00473440 	call	47344 <__pow5mult>
   44088:	d8800715 	stw	r2,28(sp)
   4408c:	003eed06 	br	43c44 <_dtoa_r+0x848>
   44090:	1000021e 	bne	r2,zero,4409c <_dtoa_r+0xca0>
   44094:	b880004c 	andi	r2,r23,1
   44098:	103fc11e 	bne	r2,zero,43fa0 <_dtoa_r+0xba4>
   4409c:	b5bfffc4 	addi	r22,r22,-1
   440a0:	b0c00007 	ldb	r3,0(r22)
   440a4:	00800c04 	movi	r2,48
   440a8:	18bffc26 	beq	r3,r2,4409c <_dtoa_r+0xca0>
   440ac:	b7000044 	addi	fp,r22,1
   440b0:	003fcb06 	br	43fe0 <_dtoa_r+0xbe4>
   440b4:	d9800d17 	ldw	r6,52(sp)
   440b8:	018fc83a 	sub	r7,zero,r6
   440bc:	3801f726 	beq	r7,zero,4489c <_dtoa_r+0x14a0>
   440c0:	398003cc 	andi	r6,r7,15
   440c4:	300c90fa 	slli	r6,r6,3
   440c8:	01400174 	movhi	r5,5
   440cc:	2975bd04 	addi	r5,r5,-10508
   440d0:	d9001217 	ldw	r4,72(sp)
   440d4:	314d883a 	add	r6,r6,r5
   440d8:	30c00117 	ldw	r3,4(r6)
   440dc:	30800017 	ldw	r2,0(r6)
   440e0:	d9401317 	ldw	r5,76(sp)
   440e4:	3821d13a 	srai	r16,r7,4
   440e8:	100d883a 	mov	r6,r2
   440ec:	180f883a 	mov	r7,r3
   440f0:	00493840 	call	49384 <__muldf3>
   440f4:	1011883a 	mov	r8,r2
   440f8:	1813883a 	mov	r9,r3
   440fc:	1029883a 	mov	r20,r2
   44100:	182b883a 	mov	r21,r3
   44104:	8001e526 	beq	r16,zero,4489c <_dtoa_r+0x14a0>
   44108:	05800084 	movi	r22,2
   4410c:	04400174 	movhi	r17,5
   44110:	8c75ef04 	addi	r17,r17,-10308
   44114:	8080004c 	andi	r2,r16,1
   44118:	1005003a 	cmpeq	r2,r2,zero
   4411c:	1000081e 	bne	r2,zero,44140 <_dtoa_r+0xd44>
   44120:	89800017 	ldw	r6,0(r17)
   44124:	89c00117 	ldw	r7,4(r17)
   44128:	480b883a 	mov	r5,r9
   4412c:	4009883a 	mov	r4,r8
   44130:	00493840 	call	49384 <__muldf3>
   44134:	1011883a 	mov	r8,r2
   44138:	b5800044 	addi	r22,r22,1
   4413c:	1813883a 	mov	r9,r3
   44140:	8021d07a 	srai	r16,r16,1
   44144:	8c400204 	addi	r17,r17,8
   44148:	803ff21e 	bne	r16,zero,44114 <_dtoa_r+0xd18>
   4414c:	4029883a 	mov	r20,r8
   44150:	482b883a 	mov	r21,r9
   44154:	003dca06 	br	43880 <_dtoa_r+0x484>
   44158:	d9000817 	ldw	r4,32(sp)
   4415c:	2005003a 	cmpeq	r2,r4,zero
   44160:	1001f61e 	bne	r2,zero,4493c <_dtoa_r+0x1540>
   44164:	dc001117 	ldw	r16,68(sp)
   44168:	dc801017 	ldw	r18,64(sp)
   4416c:	18c10cc4 	addi	r3,r3,1075
   44170:	003f6106 	br	43ef8 <_dtoa_r+0xafc>
   44174:	d8000b15 	stw	zero,44(sp)
   44178:	d9802617 	ldw	r6,152(sp)
   4417c:	d8c00d17 	ldw	r3,52(sp)
   44180:	30800044 	addi	r2,r6,1
   44184:	18ad883a 	add	r22,r3,r2
   44188:	b13fffc4 	addi	r4,r22,-1
   4418c:	d9000e15 	stw	r4,56(sp)
   44190:	0581f60e 	bge	zero,r22,4496c <_dtoa_r+0x1570>
   44194:	dd800f15 	stw	r22,60(sp)
   44198:	003f3006 	br	43e5c <_dtoa_r+0xa60>
   4419c:	d8000b15 	stw	zero,44(sp)
   441a0:	d9002617 	ldw	r4,152(sp)
   441a4:	0101eb0e 	bge	zero,r4,44954 <_dtoa_r+0x1558>
   441a8:	202d883a 	mov	r22,r4
   441ac:	d9000e15 	stw	r4,56(sp)
   441b0:	d9000f15 	stw	r4,60(sp)
   441b4:	003f2906 	br	43e5c <_dtoa_r+0xa60>
   441b8:	01800044 	movi	r6,1
   441bc:	d9800b15 	stw	r6,44(sp)
   441c0:	003ff706 	br	441a0 <_dtoa_r+0xda4>
   441c4:	01000044 	movi	r4,1
   441c8:	d9000b15 	stw	r4,44(sp)
   441cc:	003fea06 	br	44178 <_dtoa_r+0xd7c>
   441d0:	04000c0e 	bge	zero,r16,44204 <_dtoa_r+0xe08>
   441d4:	d9400717 	ldw	r5,28(sp)
   441d8:	d9001617 	ldw	r4,88(sp)
   441dc:	01800044 	movi	r6,1
   441e0:	0046ed40 	call	46ed4 <__lshift>
   441e4:	1009883a 	mov	r4,r2
   441e8:	900b883a 	mov	r5,r18
   441ec:	d8800715 	stw	r2,28(sp)
   441f0:	00466ec0 	call	466ec <__mcmp>
   441f4:	0081e00e 	bge	zero,r2,44978 <_dtoa_r+0x157c>
   441f8:	bdc00044 	addi	r23,r23,1
   441fc:	00800e84 	movi	r2,58
   44200:	b881a226 	beq	r23,r2,4488c <_dtoa_r+0x1490>
   44204:	b7000044 	addi	fp,r22,1
   44208:	b5c00005 	stb	r23,0(r22)
   4420c:	003f7406 	br	43fe0 <_dtoa_r+0xbe4>
   44210:	00800e44 	movi	r2,57
   44214:	b8819d26 	beq	r23,r2,4488c <_dtoa_r+0x1490>
   44218:	053ffa0e 	bge	zero,r20,44204 <_dtoa_r+0xe08>
   4421c:	8dc00c44 	addi	r23,r17,49
   44220:	003ff806 	br	44204 <_dtoa_r+0xe08>
   44224:	d9001617 	ldw	r4,88(sp)
   44228:	a80b883a 	mov	r5,r21
   4422c:	04000044 	movi	r16,1
   44230:	00465900 	call	46590 <_Bfree>
   44234:	003edf06 	br	43db4 <_dtoa_r+0x9b8>
   44238:	d9001617 	ldw	r4,88(sp)
   4423c:	980b883a 	mov	r5,r19
   44240:	01800284 	movi	r6,10
   44244:	000f883a 	mov	r7,zero
   44248:	00472440 	call	47244 <__multadd>
   4424c:	1027883a 	mov	r19,r2
   44250:	d8800615 	stw	r2,24(sp)
   44254:	003ebb06 	br	43d44 <_dtoa_r+0x948>
   44258:	d9801117 	ldw	r6,68(sp)
   4425c:	d8800d17 	ldw	r2,52(sp)
   44260:	d8000915 	stw	zero,36(sp)
   44264:	308dc83a 	sub	r6,r6,r2
   44268:	0087c83a 	sub	r3,zero,r2
   4426c:	d9801115 	stw	r6,68(sp)
   44270:	d8c01015 	stw	r3,64(sp)
   44274:	003cfe06 	br	43670 <_dtoa_r+0x274>
   44278:	018dc83a 	sub	r6,zero,r6
   4427c:	d9801115 	stw	r6,68(sp)
   44280:	d8000a15 	stw	zero,40(sp)
   44284:	003cf306 	br	43654 <_dtoa_r+0x258>
   44288:	d9000d17 	ldw	r4,52(sp)
   4428c:	0049c480 	call	49c48 <__floatsidf>
   44290:	880b883a 	mov	r5,r17
   44294:	8009883a 	mov	r4,r16
   44298:	180f883a 	mov	r7,r3
   4429c:	100d883a 	mov	r6,r2
   442a0:	0049a280 	call	49a28 <__nedf2>
   442a4:	103ce126 	beq	r2,zero,4362c <_dtoa_r+0x230>
   442a8:	d9800d17 	ldw	r6,52(sp)
   442ac:	31bfffc4 	addi	r6,r6,-1
   442b0:	d9800d15 	stw	r6,52(sp)
   442b4:	003cdd06 	br	4362c <_dtoa_r+0x230>
   442b8:	d9000717 	ldw	r4,28(sp)
   442bc:	900b883a 	mov	r5,r18
   442c0:	00466ec0 	call	466ec <__mcmp>
   442c4:	103e8d0e 	bge	r2,zero,43cfc <_dtoa_r+0x900>
   442c8:	d9400717 	ldw	r5,28(sp)
   442cc:	d9001617 	ldw	r4,88(sp)
   442d0:	01800284 	movi	r6,10
   442d4:	000f883a 	mov	r7,zero
   442d8:	00472440 	call	47244 <__multadd>
   442dc:	d9800d17 	ldw	r6,52(sp)
   442e0:	d8800715 	stw	r2,28(sp)
   442e4:	31bfffc4 	addi	r6,r6,-1
   442e8:	d9800d15 	stw	r6,52(sp)
   442ec:	b001a71e 	bne	r22,zero,4498c <_dtoa_r+0x1590>
   442f0:	d8800e17 	ldw	r2,56(sp)
   442f4:	d8800f15 	stw	r2,60(sp)
   442f8:	003e8006 	br	43cfc <_dtoa_r+0x900>
   442fc:	90800417 	ldw	r2,16(r18)
   44300:	1085883a 	add	r2,r2,r2
   44304:	1085883a 	add	r2,r2,r2
   44308:	1485883a 	add	r2,r2,r18
   4430c:	11000417 	ldw	r4,16(r2)
   44310:	00465b80 	call	465b8 <__hi0bits>
   44314:	00c00804 	movi	r3,32
   44318:	1887c83a 	sub	r3,r3,r2
   4431c:	003e5a06 	br	43c88 <_dtoa_r+0x88c>
   44320:	d9400717 	ldw	r5,28(sp)
   44324:	d9801017 	ldw	r6,64(sp)
   44328:	d9001617 	ldw	r4,88(sp)
   4432c:	00473440 	call	47344 <__pow5mult>
   44330:	d8800715 	stw	r2,28(sp)
   44334:	003e4306 	br	43c44 <_dtoa_r+0x848>
   44338:	d9800f17 	ldw	r6,60(sp)
   4433c:	d8800d17 	ldw	r2,52(sp)
   44340:	d9800315 	stw	r6,12(sp)
   44344:	d8800415 	stw	r2,16(sp)
   44348:	d8c00b17 	ldw	r3,44(sp)
   4434c:	1805003a 	cmpeq	r2,r3,zero
   44350:	1000e21e 	bne	r2,zero,446dc <_dtoa_r+0x12e0>
   44354:	d9000317 	ldw	r4,12(sp)
   44358:	0005883a 	mov	r2,zero
   4435c:	00cff834 	movhi	r3,16352
   44360:	200c90fa 	slli	r6,r4,3
   44364:	01000174 	movhi	r4,5
   44368:	2135bd04 	addi	r4,r4,-10508
   4436c:	180b883a 	mov	r5,r3
   44370:	310d883a 	add	r6,r6,r4
   44374:	327fff17 	ldw	r9,-4(r6)
   44378:	323ffe17 	ldw	r8,-8(r6)
   4437c:	1009883a 	mov	r4,r2
   44380:	480f883a 	mov	r7,r9
   44384:	400d883a 	mov	r6,r8
   44388:	00497480 	call	49748 <__divdf3>
   4438c:	180b883a 	mov	r5,r3
   44390:	b00d883a 	mov	r6,r22
   44394:	b80f883a 	mov	r7,r23
   44398:	1009883a 	mov	r4,r2
   4439c:	00492900 	call	49290 <__subdf3>
   443a0:	a80b883a 	mov	r5,r21
   443a4:	a009883a 	mov	r4,r20
   443a8:	d8c01915 	stw	r3,100(sp)
   443ac:	d8801815 	stw	r2,96(sp)
   443b0:	0049d400 	call	49d40 <__fixdfsi>
   443b4:	1009883a 	mov	r4,r2
   443b8:	1027883a 	mov	r19,r2
   443bc:	0049c480 	call	49c48 <__floatsidf>
   443c0:	a80b883a 	mov	r5,r21
   443c4:	a009883a 	mov	r4,r20
   443c8:	180f883a 	mov	r7,r3
   443cc:	100d883a 	mov	r6,r2
   443d0:	00492900 	call	49290 <__subdf3>
   443d4:	d9801817 	ldw	r6,96(sp)
   443d8:	1823883a 	mov	r17,r3
   443dc:	d8801415 	stw	r2,80(sp)
   443e0:	302d883a 	mov	r22,r6
   443e4:	d9800517 	ldw	r6,20(sp)
   443e8:	9cc00c04 	addi	r19,r19,48
   443ec:	dc401515 	stw	r17,84(sp)
   443f0:	d8c01917 	ldw	r3,100(sp)
   443f4:	34c00005 	stb	r19,0(r6)
   443f8:	d8800517 	ldw	r2,20(sp)
   443fc:	d9401917 	ldw	r5,100(sp)
   44400:	d9801417 	ldw	r6,80(sp)
   44404:	b009883a 	mov	r4,r22
   44408:	880f883a 	mov	r7,r17
   4440c:	182f883a 	mov	r23,r3
   44410:	17000044 	addi	fp,r2,1
   44414:	0049ab00 	call	49ab0 <__gtdf2>
   44418:	00804e16 	blt	zero,r2,44554 <_dtoa_r+0x1158>
   4441c:	d9801417 	ldw	r6,80(sp)
   44420:	0005883a 	mov	r2,zero
   44424:	00cffc34 	movhi	r3,16368
   44428:	180b883a 	mov	r5,r3
   4442c:	880f883a 	mov	r7,r17
   44430:	1009883a 	mov	r4,r2
   44434:	00492900 	call	49290 <__subdf3>
   44438:	d9401917 	ldw	r5,100(sp)
   4443c:	180f883a 	mov	r7,r3
   44440:	b009883a 	mov	r4,r22
   44444:	100d883a 	mov	r6,r2
   44448:	0049ab00 	call	49ab0 <__gtdf2>
   4444c:	00bda216 	blt	zero,r2,43ad8 <_dtoa_r+0x6dc>
   44450:	d8c00317 	ldw	r3,12(sp)
   44454:	00800044 	movi	r2,1
   44458:	10c01216 	blt	r2,r3,444a4 <_dtoa_r+0x10a8>
   4445c:	003d4506 	br	43974 <_dtoa_r+0x578>
   44460:	d9801417 	ldw	r6,80(sp)
   44464:	0005883a 	mov	r2,zero
   44468:	00cffc34 	movhi	r3,16368
   4446c:	180b883a 	mov	r5,r3
   44470:	880f883a 	mov	r7,r17
   44474:	1009883a 	mov	r4,r2
   44478:	00492900 	call	49290 <__subdf3>
   4447c:	d9c01b17 	ldw	r7,108(sp)
   44480:	180b883a 	mov	r5,r3
   44484:	1009883a 	mov	r4,r2
   44488:	b00d883a 	mov	r6,r22
   4448c:	0049bc00 	call	49bc0 <__ltdf2>
   44490:	103d9116 	blt	r2,zero,43ad8 <_dtoa_r+0x6dc>
   44494:	d9800517 	ldw	r6,20(sp)
   44498:	d9000317 	ldw	r4,12(sp)
   4449c:	3105883a 	add	r2,r6,r4
   444a0:	e0bd3426 	beq	fp,r2,43974 <_dtoa_r+0x578>
   444a4:	04500934 	movhi	r17,16420
   444a8:	0021883a 	mov	r16,zero
   444ac:	b80b883a 	mov	r5,r23
   444b0:	b009883a 	mov	r4,r22
   444b4:	800d883a 	mov	r6,r16
   444b8:	880f883a 	mov	r7,r17
   444bc:	00493840 	call	49384 <__muldf3>
   444c0:	d9401517 	ldw	r5,84(sp)
   444c4:	d9001417 	ldw	r4,80(sp)
   444c8:	880f883a 	mov	r7,r17
   444cc:	000d883a 	mov	r6,zero
   444d0:	d8801a15 	stw	r2,104(sp)
   444d4:	d8c01b15 	stw	r3,108(sp)
   444d8:	00493840 	call	49384 <__muldf3>
   444dc:	180b883a 	mov	r5,r3
   444e0:	1009883a 	mov	r4,r2
   444e4:	1823883a 	mov	r17,r3
   444e8:	1021883a 	mov	r16,r2
   444ec:	0049d400 	call	49d40 <__fixdfsi>
   444f0:	1009883a 	mov	r4,r2
   444f4:	102b883a 	mov	r21,r2
   444f8:	0049c480 	call	49c48 <__floatsidf>
   444fc:	880b883a 	mov	r5,r17
   44500:	8009883a 	mov	r4,r16
   44504:	180f883a 	mov	r7,r3
   44508:	100d883a 	mov	r6,r2
   4450c:	00492900 	call	49290 <__subdf3>
   44510:	1021883a 	mov	r16,r2
   44514:	d9001b17 	ldw	r4,108(sp)
   44518:	1823883a 	mov	r17,r3
   4451c:	dc001415 	stw	r16,80(sp)
   44520:	ad400c04 	addi	r21,r21,48
   44524:	dc401515 	stw	r17,84(sp)
   44528:	d8801a17 	ldw	r2,104(sp)
   4452c:	e5400005 	stb	r21,0(fp)
   44530:	202f883a 	mov	r23,r4
   44534:	d9c01b17 	ldw	r7,108(sp)
   44538:	d9001417 	ldw	r4,80(sp)
   4453c:	880b883a 	mov	r5,r17
   44540:	100d883a 	mov	r6,r2
   44544:	102d883a 	mov	r22,r2
   44548:	e7000044 	addi	fp,fp,1
   4454c:	0049bc00 	call	49bc0 <__ltdf2>
   44550:	103fc30e 	bge	r2,zero,44460 <_dtoa_r+0x1064>
   44554:	d9000417 	ldw	r4,16(sp)
   44558:	d9000d15 	stw	r4,52(sp)
   4455c:	003d7106 	br	43b24 <_dtoa_r+0x728>
   44560:	d9801717 	ldw	r6,92(sp)
   44564:	00800084 	movi	r2,2
   44568:	11bde60e 	bge	r2,r6,43d04 <_dtoa_r+0x908>
   4456c:	203cfb1e 	bne	r4,zero,4395c <_dtoa_r+0x560>
   44570:	d9001617 	ldw	r4,88(sp)
   44574:	900b883a 	mov	r5,r18
   44578:	01800144 	movi	r6,5
   4457c:	000f883a 	mov	r7,zero
   44580:	00472440 	call	47244 <__multadd>
   44584:	d9000717 	ldw	r4,28(sp)
   44588:	100b883a 	mov	r5,r2
   4458c:	1025883a 	mov	r18,r2
   44590:	00466ec0 	call	466ec <__mcmp>
   44594:	00bcf10e 	bge	zero,r2,4395c <_dtoa_r+0x560>
   44598:	d8c00d17 	ldw	r3,52(sp)
   4459c:	d9000517 	ldw	r4,20(sp)
   445a0:	d8000615 	stw	zero,24(sp)
   445a4:	18c00044 	addi	r3,r3,1
   445a8:	d8c00d15 	stw	r3,52(sp)
   445ac:	00800c44 	movi	r2,49
   445b0:	27000044 	addi	fp,r4,1
   445b4:	20800005 	stb	r2,0(r4)
   445b8:	003e8906 	br	43fe0 <_dtoa_r+0xbe4>
   445bc:	d8c00517 	ldw	r3,20(sp)
   445c0:	003bc206 	br	434cc <_dtoa_r+0xd0>
   445c4:	01800174 	movhi	r6,5
   445c8:	31b5ef04 	addi	r6,r6,-10308
   445cc:	30c00917 	ldw	r3,36(r6)
   445d0:	30800817 	ldw	r2,32(r6)
   445d4:	d9001217 	ldw	r4,72(sp)
   445d8:	d9401317 	ldw	r5,76(sp)
   445dc:	180f883a 	mov	r7,r3
   445e0:	100d883a 	mov	r6,r2
   445e4:	00497480 	call	49748 <__divdf3>
   445e8:	948003cc 	andi	r18,r18,15
   445ec:	058000c4 	movi	r22,3
   445f0:	1029883a 	mov	r20,r2
   445f4:	182b883a 	mov	r21,r3
   445f8:	003c8906 	br	43820 <_dtoa_r+0x424>
   445fc:	d9001017 	ldw	r4,64(sp)
   44600:	d9800917 	ldw	r6,36(sp)
   44604:	0025883a 	mov	r18,zero
   44608:	1105c83a 	sub	r2,r2,r4
   4460c:	2089883a 	add	r4,r4,r2
   44610:	308d883a 	add	r6,r6,r2
   44614:	d9001015 	stw	r4,64(sp)
   44618:	d9800915 	stw	r6,36(sp)
   4461c:	003e3206 	br	43ee8 <_dtoa_r+0xaec>
   44620:	28800044 	addi	r2,r5,1
   44624:	27000044 	addi	fp,r4,1
   44628:	20800005 	stb	r2,0(r4)
   4462c:	003e6c06 	br	43fe0 <_dtoa_r+0xbe4>
   44630:	d8800f17 	ldw	r2,60(sp)
   44634:	00bce016 	blt	zero,r2,439b8 <_dtoa_r+0x5bc>
   44638:	d9800f17 	ldw	r6,60(sp)
   4463c:	303cc51e 	bne	r6,zero,43954 <_dtoa_r+0x558>
   44640:	0005883a 	mov	r2,zero
   44644:	00d00534 	movhi	r3,16404
   44648:	980b883a 	mov	r5,r19
   4464c:	180f883a 	mov	r7,r3
   44650:	9009883a 	mov	r4,r18
   44654:	100d883a 	mov	r6,r2
   44658:	00493840 	call	49384 <__muldf3>
   4465c:	180b883a 	mov	r5,r3
   44660:	a80f883a 	mov	r7,r21
   44664:	1009883a 	mov	r4,r2
   44668:	a00d883a 	mov	r6,r20
   4466c:	0049b380 	call	49b38 <__gedf2>
   44670:	103cb80e 	bge	r2,zero,43954 <_dtoa_r+0x558>
   44674:	0027883a 	mov	r19,zero
   44678:	0025883a 	mov	r18,zero
   4467c:	003fc606 	br	44598 <_dtoa_r+0x119c>
   44680:	99400117 	ldw	r5,4(r19)
   44684:	d9001617 	ldw	r4,88(sp)
   44688:	0046b100 	call	46b10 <_Balloc>
   4468c:	99800417 	ldw	r6,16(r19)
   44690:	11000304 	addi	r4,r2,12
   44694:	99400304 	addi	r5,r19,12
   44698:	318d883a 	add	r6,r6,r6
   4469c:	318d883a 	add	r6,r6,r6
   446a0:	31800204 	addi	r6,r6,8
   446a4:	1023883a 	mov	r17,r2
   446a8:	00463780 	call	46378 <memcpy>
   446ac:	d9001617 	ldw	r4,88(sp)
   446b0:	880b883a 	mov	r5,r17
   446b4:	01800044 	movi	r6,1
   446b8:	0046ed40 	call	46ed4 <__lshift>
   446bc:	100b883a 	mov	r5,r2
   446c0:	003d9c06 	br	43d34 <_dtoa_r+0x938>
   446c4:	00800e44 	movi	r2,57
   446c8:	b8807026 	beq	r23,r2,4488c <_dtoa_r+0x1490>
   446cc:	b8800044 	addi	r2,r23,1
   446d0:	b7000044 	addi	fp,r22,1
   446d4:	b0800005 	stb	r2,0(r22)
   446d8:	003e4106 	br	43fe0 <_dtoa_r+0xbe4>
   446dc:	d8800317 	ldw	r2,12(sp)
   446e0:	01800174 	movhi	r6,5
   446e4:	31b5bd04 	addi	r6,r6,-10508
   446e8:	b009883a 	mov	r4,r22
   446ec:	100e90fa 	slli	r7,r2,3
   446f0:	b80b883a 	mov	r5,r23
   446f4:	398f883a 	add	r7,r7,r6
   446f8:	38bffe17 	ldw	r2,-8(r7)
   446fc:	d9800517 	ldw	r6,20(sp)
   44700:	38ffff17 	ldw	r3,-4(r7)
   44704:	37000044 	addi	fp,r6,1
   44708:	180f883a 	mov	r7,r3
   4470c:	100d883a 	mov	r6,r2
   44710:	00493840 	call	49384 <__muldf3>
   44714:	a80b883a 	mov	r5,r21
   44718:	a009883a 	mov	r4,r20
   4471c:	182f883a 	mov	r23,r3
   44720:	102d883a 	mov	r22,r2
   44724:	0049d400 	call	49d40 <__fixdfsi>
   44728:	1009883a 	mov	r4,r2
   4472c:	1027883a 	mov	r19,r2
   44730:	0049c480 	call	49c48 <__floatsidf>
   44734:	a80b883a 	mov	r5,r21
   44738:	a009883a 	mov	r4,r20
   4473c:	180f883a 	mov	r7,r3
   44740:	100d883a 	mov	r6,r2
   44744:	00492900 	call	49290 <__subdf3>
   44748:	180b883a 	mov	r5,r3
   4474c:	d8c00517 	ldw	r3,20(sp)
   44750:	9cc00c04 	addi	r19,r19,48
   44754:	1009883a 	mov	r4,r2
   44758:	1cc00005 	stb	r19,0(r3)
   4475c:	2021883a 	mov	r16,r4
   44760:	d9000317 	ldw	r4,12(sp)
   44764:	00800044 	movi	r2,1
   44768:	2823883a 	mov	r17,r5
   4476c:	20802226 	beq	r4,r2,447f8 <_dtoa_r+0x13fc>
   44770:	1029883a 	mov	r20,r2
   44774:	0005883a 	mov	r2,zero
   44778:	00d00934 	movhi	r3,16420
   4477c:	180f883a 	mov	r7,r3
   44780:	100d883a 	mov	r6,r2
   44784:	880b883a 	mov	r5,r17
   44788:	8009883a 	mov	r4,r16
   4478c:	00493840 	call	49384 <__muldf3>
   44790:	180b883a 	mov	r5,r3
   44794:	1009883a 	mov	r4,r2
   44798:	1823883a 	mov	r17,r3
   4479c:	1021883a 	mov	r16,r2
   447a0:	0049d400 	call	49d40 <__fixdfsi>
   447a4:	1009883a 	mov	r4,r2
   447a8:	102b883a 	mov	r21,r2
   447ac:	0049c480 	call	49c48 <__floatsidf>
   447b0:	880b883a 	mov	r5,r17
   447b4:	8009883a 	mov	r4,r16
   447b8:	180f883a 	mov	r7,r3
   447bc:	100d883a 	mov	r6,r2
   447c0:	00492900 	call	49290 <__subdf3>
   447c4:	180b883a 	mov	r5,r3
   447c8:	d8c00517 	ldw	r3,20(sp)
   447cc:	1009883a 	mov	r4,r2
   447d0:	ad400c04 	addi	r21,r21,48
   447d4:	1d05883a 	add	r2,r3,r20
   447d8:	15400005 	stb	r21,0(r2)
   447dc:	2021883a 	mov	r16,r4
   447e0:	d9000317 	ldw	r4,12(sp)
   447e4:	a5000044 	addi	r20,r20,1
   447e8:	2823883a 	mov	r17,r5
   447ec:	a13fe11e 	bne	r20,r4,44774 <_dtoa_r+0x1378>
   447f0:	e505883a 	add	r2,fp,r20
   447f4:	173fffc4 	addi	fp,r2,-1
   447f8:	0025883a 	mov	r18,zero
   447fc:	04cff834 	movhi	r19,16352
   44800:	b009883a 	mov	r4,r22
   44804:	b80b883a 	mov	r5,r23
   44808:	900d883a 	mov	r6,r18
   4480c:	980f883a 	mov	r7,r19
   44810:	00493100 	call	49310 <__adddf3>
   44814:	180b883a 	mov	r5,r3
   44818:	1009883a 	mov	r4,r2
   4481c:	800d883a 	mov	r6,r16
   44820:	880f883a 	mov	r7,r17
   44824:	0049bc00 	call	49bc0 <__ltdf2>
   44828:	103cab16 	blt	r2,zero,43ad8 <_dtoa_r+0x6dc>
   4482c:	0009883a 	mov	r4,zero
   44830:	980b883a 	mov	r5,r19
   44834:	b80f883a 	mov	r7,r23
   44838:	b00d883a 	mov	r6,r22
   4483c:	00492900 	call	49290 <__subdf3>
   44840:	180b883a 	mov	r5,r3
   44844:	880f883a 	mov	r7,r17
   44848:	1009883a 	mov	r4,r2
   4484c:	800d883a 	mov	r6,r16
   44850:	0049ab00 	call	49ab0 <__gtdf2>
   44854:	00bc470e 	bge	zero,r2,43974 <_dtoa_r+0x578>
   44858:	00c00c04 	movi	r3,48
   4485c:	e73fffc4 	addi	fp,fp,-1
   44860:	e0800007 	ldb	r2,0(fp)
   44864:	10fffd26 	beq	r2,r3,4485c <_dtoa_r+0x1460>
   44868:	d9800417 	ldw	r6,16(sp)
   4486c:	e7000044 	addi	fp,fp,1
   44870:	d9800d15 	stw	r6,52(sp)
   44874:	003cab06 	br	43b24 <_dtoa_r+0x728>
   44878:	d8c00f17 	ldw	r3,60(sp)
   4487c:	d9001117 	ldw	r4,68(sp)
   44880:	20e1c83a 	sub	r16,r4,r3
   44884:	0007883a 	mov	r3,zero
   44888:	003d9b06 	br	43ef8 <_dtoa_r+0xafc>
   4488c:	00800e44 	movi	r2,57
   44890:	b0800005 	stb	r2,0(r22)
   44894:	b5800044 	addi	r22,r22,1
   44898:	003dc106 	br	43fa0 <_dtoa_r+0xba4>
   4489c:	05800084 	movi	r22,2
   448a0:	003bf706 	br	43880 <_dtoa_r+0x484>
   448a4:	d9000f17 	ldw	r4,60(sp)
   448a8:	013c000e 	bge	zero,r4,438ac <_dtoa_r+0x4b0>
   448ac:	d9800e17 	ldw	r6,56(sp)
   448b0:	01bc300e 	bge	zero,r6,43974 <_dtoa_r+0x578>
   448b4:	0005883a 	mov	r2,zero
   448b8:	00d00934 	movhi	r3,16420
   448bc:	a80b883a 	mov	r5,r21
   448c0:	180f883a 	mov	r7,r3
   448c4:	a009883a 	mov	r4,r20
   448c8:	100d883a 	mov	r6,r2
   448cc:	00493840 	call	49384 <__muldf3>
   448d0:	b1000044 	addi	r4,r22,1
   448d4:	1021883a 	mov	r16,r2
   448d8:	1823883a 	mov	r17,r3
   448dc:	0049c480 	call	49c48 <__floatsidf>
   448e0:	880b883a 	mov	r5,r17
   448e4:	8009883a 	mov	r4,r16
   448e8:	180f883a 	mov	r7,r3
   448ec:	100d883a 	mov	r6,r2
   448f0:	00493840 	call	49384 <__muldf3>
   448f4:	0011883a 	mov	r8,zero
   448f8:	02500734 	movhi	r9,16412
   448fc:	180b883a 	mov	r5,r3
   44900:	480f883a 	mov	r7,r9
   44904:	1009883a 	mov	r4,r2
   44908:	400d883a 	mov	r6,r8
   4490c:	00493100 	call	49310 <__adddf3>
   44910:	102d883a 	mov	r22,r2
   44914:	00bf3034 	movhi	r2,64704
   44918:	10ef883a 	add	r23,r2,r3
   4491c:	d8800d17 	ldw	r2,52(sp)
   44920:	d8c00e17 	ldw	r3,56(sp)
   44924:	8029883a 	mov	r20,r16
   44928:	10bfffc4 	addi	r2,r2,-1
   4492c:	882b883a 	mov	r21,r17
   44930:	d8800415 	stw	r2,16(sp)
   44934:	d8c00315 	stw	r3,12(sp)
   44938:	003e8306 	br	44348 <_dtoa_r+0xf4c>
   4493c:	d8800117 	ldw	r2,4(sp)
   44940:	dc001117 	ldw	r16,68(sp)
   44944:	dc801017 	ldw	r18,64(sp)
   44948:	00c00d84 	movi	r3,54
   4494c:	1887c83a 	sub	r3,r3,r2
   44950:	003d6906 	br	43ef8 <_dtoa_r+0xafc>
   44954:	01800044 	movi	r6,1
   44958:	3021883a 	mov	r16,r6
   4495c:	d9800f15 	stw	r6,60(sp)
   44960:	d9802615 	stw	r6,152(sp)
   44964:	d9800e15 	stw	r6,56(sp)
   44968:	003b9306 	br	437b8 <_dtoa_r+0x3bc>
   4496c:	b021883a 	mov	r16,r22
   44970:	dd800f15 	stw	r22,60(sp)
   44974:	003b9006 	br	437b8 <_dtoa_r+0x3bc>
   44978:	103e221e 	bne	r2,zero,44204 <_dtoa_r+0xe08>
   4497c:	b880004c 	andi	r2,r23,1
   44980:	1005003a 	cmpeq	r2,r2,zero
   44984:	103e1f1e 	bne	r2,zero,44204 <_dtoa_r+0xe08>
   44988:	003e1b06 	br	441f8 <_dtoa_r+0xdfc>
   4498c:	d9001617 	ldw	r4,88(sp)
   44990:	980b883a 	mov	r5,r19
   44994:	01800284 	movi	r6,10
   44998:	000f883a 	mov	r7,zero
   4499c:	00472440 	call	47244 <__multadd>
   449a0:	d8c00e17 	ldw	r3,56(sp)
   449a4:	1027883a 	mov	r19,r2
   449a8:	d8c00f15 	stw	r3,60(sp)
   449ac:	003cd306 	br	43cfc <_dtoa_r+0x900>

000449b0 <_fflush_r>:
   449b0:	defffb04 	addi	sp,sp,-20
   449b4:	dcc00315 	stw	r19,12(sp)
   449b8:	dc800215 	stw	r18,8(sp)
   449bc:	dfc00415 	stw	ra,16(sp)
   449c0:	dc400115 	stw	r17,4(sp)
   449c4:	dc000015 	stw	r16,0(sp)
   449c8:	2027883a 	mov	r19,r4
   449cc:	2825883a 	mov	r18,r5
   449d0:	20000226 	beq	r4,zero,449dc <_fflush_r+0x2c>
   449d4:	20800e17 	ldw	r2,56(r4)
   449d8:	10005626 	beq	r2,zero,44b34 <_fflush_r+0x184>
   449dc:	9100030b 	ldhu	r4,12(r18)
   449e0:	20ffffcc 	andi	r3,r4,65535
   449e4:	18e0001c 	xori	r3,r3,32768
   449e8:	18e00004 	addi	r3,r3,-32768
   449ec:	1880020c 	andi	r2,r3,8
   449f0:	1000261e 	bne	r2,zero,44a8c <_fflush_r+0xdc>
   449f4:	90c00117 	ldw	r3,4(r18)
   449f8:	20820014 	ori	r2,r4,2048
   449fc:	9080030d 	sth	r2,12(r18)
   44a00:	1009883a 	mov	r4,r2
   44a04:	00c0400e 	bge	zero,r3,44b08 <_fflush_r+0x158>
   44a08:	92000a17 	ldw	r8,40(r18)
   44a0c:	40004026 	beq	r8,zero,44b10 <_fflush_r+0x160>
   44a10:	2084000c 	andi	r2,r4,4096
   44a14:	10005326 	beq	r2,zero,44b64 <_fflush_r+0x1b4>
   44a18:	94001417 	ldw	r16,80(r18)
   44a1c:	9080030b 	ldhu	r2,12(r18)
   44a20:	1080010c 	andi	r2,r2,4
   44a24:	1000481e 	bne	r2,zero,44b48 <_fflush_r+0x198>
   44a28:	91400717 	ldw	r5,28(r18)
   44a2c:	9809883a 	mov	r4,r19
   44a30:	800d883a 	mov	r6,r16
   44a34:	000f883a 	mov	r7,zero
   44a38:	403ee83a 	callr	r8
   44a3c:	8080261e 	bne	r16,r2,44ad8 <_fflush_r+0x128>
   44a40:	9080030b 	ldhu	r2,12(r18)
   44a44:	91000417 	ldw	r4,16(r18)
   44a48:	90000115 	stw	zero,4(r18)
   44a4c:	10bdffcc 	andi	r2,r2,63487
   44a50:	10ffffcc 	andi	r3,r2,65535
   44a54:	18c4000c 	andi	r3,r3,4096
   44a58:	9080030d 	sth	r2,12(r18)
   44a5c:	91000015 	stw	r4,0(r18)
   44a60:	18002b26 	beq	r3,zero,44b10 <_fflush_r+0x160>
   44a64:	0007883a 	mov	r3,zero
   44a68:	1805883a 	mov	r2,r3
   44a6c:	94001415 	stw	r16,80(r18)
   44a70:	dfc00417 	ldw	ra,16(sp)
   44a74:	dcc00317 	ldw	r19,12(sp)
   44a78:	dc800217 	ldw	r18,8(sp)
   44a7c:	dc400117 	ldw	r17,4(sp)
   44a80:	dc000017 	ldw	r16,0(sp)
   44a84:	dec00504 	addi	sp,sp,20
   44a88:	f800283a 	ret
   44a8c:	94400417 	ldw	r17,16(r18)
   44a90:	88001f26 	beq	r17,zero,44b10 <_fflush_r+0x160>
   44a94:	90800017 	ldw	r2,0(r18)
   44a98:	18c000cc 	andi	r3,r3,3
   44a9c:	94400015 	stw	r17,0(r18)
   44aa0:	1461c83a 	sub	r16,r2,r17
   44aa4:	18002526 	beq	r3,zero,44b3c <_fflush_r+0x18c>
   44aa8:	0005883a 	mov	r2,zero
   44aac:	90800215 	stw	r2,8(r18)
   44ab0:	0400170e 	bge	zero,r16,44b10 <_fflush_r+0x160>
   44ab4:	90c00917 	ldw	r3,36(r18)
   44ab8:	91400717 	ldw	r5,28(r18)
   44abc:	880d883a 	mov	r6,r17
   44ac0:	800f883a 	mov	r7,r16
   44ac4:	9809883a 	mov	r4,r19
   44ac8:	183ee83a 	callr	r3
   44acc:	88a3883a 	add	r17,r17,r2
   44ad0:	80a1c83a 	sub	r16,r16,r2
   44ad4:	00bff616 	blt	zero,r2,44ab0 <_fflush_r+0x100>
   44ad8:	9080030b 	ldhu	r2,12(r18)
   44adc:	00ffffc4 	movi	r3,-1
   44ae0:	10801014 	ori	r2,r2,64
   44ae4:	9080030d 	sth	r2,12(r18)
   44ae8:	1805883a 	mov	r2,r3
   44aec:	dfc00417 	ldw	ra,16(sp)
   44af0:	dcc00317 	ldw	r19,12(sp)
   44af4:	dc800217 	ldw	r18,8(sp)
   44af8:	dc400117 	ldw	r17,4(sp)
   44afc:	dc000017 	ldw	r16,0(sp)
   44b00:	dec00504 	addi	sp,sp,20
   44b04:	f800283a 	ret
   44b08:	90800f17 	ldw	r2,60(r18)
   44b0c:	00bfbe16 	blt	zero,r2,44a08 <_fflush_r+0x58>
   44b10:	0007883a 	mov	r3,zero
   44b14:	1805883a 	mov	r2,r3
   44b18:	dfc00417 	ldw	ra,16(sp)
   44b1c:	dcc00317 	ldw	r19,12(sp)
   44b20:	dc800217 	ldw	r18,8(sp)
   44b24:	dc400117 	ldw	r17,4(sp)
   44b28:	dc000017 	ldw	r16,0(sp)
   44b2c:	dec00504 	addi	sp,sp,20
   44b30:	f800283a 	ret
   44b34:	0044c480 	call	44c48 <__sinit>
   44b38:	003fa806 	br	449dc <_fflush_r+0x2c>
   44b3c:	90800517 	ldw	r2,20(r18)
   44b40:	90800215 	stw	r2,8(r18)
   44b44:	003fda06 	br	44ab0 <_fflush_r+0x100>
   44b48:	90800117 	ldw	r2,4(r18)
   44b4c:	90c00c17 	ldw	r3,48(r18)
   44b50:	80a1c83a 	sub	r16,r16,r2
   44b54:	183fb426 	beq	r3,zero,44a28 <_fflush_r+0x78>
   44b58:	90800f17 	ldw	r2,60(r18)
   44b5c:	80a1c83a 	sub	r16,r16,r2
   44b60:	003fb106 	br	44a28 <_fflush_r+0x78>
   44b64:	91400717 	ldw	r5,28(r18)
   44b68:	9809883a 	mov	r4,r19
   44b6c:	000d883a 	mov	r6,zero
   44b70:	01c00044 	movi	r7,1
   44b74:	403ee83a 	callr	r8
   44b78:	1021883a 	mov	r16,r2
   44b7c:	00bfffc4 	movi	r2,-1
   44b80:	80800226 	beq	r16,r2,44b8c <_fflush_r+0x1dc>
   44b84:	92000a17 	ldw	r8,40(r18)
   44b88:	003fa406 	br	44a1c <_fflush_r+0x6c>
   44b8c:	98c00017 	ldw	r3,0(r19)
   44b90:	00800744 	movi	r2,29
   44b94:	18bfde26 	beq	r3,r2,44b10 <_fflush_r+0x160>
   44b98:	9080030b 	ldhu	r2,12(r18)
   44b9c:	8007883a 	mov	r3,r16
   44ba0:	10801014 	ori	r2,r2,64
   44ba4:	9080030d 	sth	r2,12(r18)
   44ba8:	003fcf06 	br	44ae8 <_fflush_r+0x138>

00044bac <fflush>:
   44bac:	01400134 	movhi	r5,4
   44bb0:	29526c04 	addi	r5,r5,18864
   44bb4:	2007883a 	mov	r3,r4
   44bb8:	20000526 	beq	r4,zero,44bd0 <fflush+0x24>
   44bbc:	00800174 	movhi	r2,5
   44bc0:	10bcdd04 	addi	r2,r2,-3212
   44bc4:	11000017 	ldw	r4,0(r2)
   44bc8:	180b883a 	mov	r5,r3
   44bcc:	00449b01 	jmpi	449b0 <_fflush_r>
   44bd0:	00800174 	movhi	r2,5
   44bd4:	10bcde04 	addi	r2,r2,-3208
   44bd8:	11000017 	ldw	r4,0(r2)
   44bdc:	004577c1 	jmpi	4577c <_fwalk_reent>

00044be0 <std>:
   44be0:	00800134 	movhi	r2,4
   44be4:	109f1604 	addi	r2,r2,31832
   44be8:	20800b15 	stw	r2,44(r4)
   44bec:	00800134 	movhi	r2,4
   44bf0:	109f5104 	addi	r2,r2,32068
   44bf4:	20800815 	stw	r2,32(r4)
   44bf8:	00c00134 	movhi	r3,4
   44bfc:	18df3204 	addi	r3,r3,31944
   44c00:	00800134 	movhi	r2,4
   44c04:	109f1804 	addi	r2,r2,31840
   44c08:	2140030d 	sth	r5,12(r4)
   44c0c:	2180038d 	sth	r6,14(r4)
   44c10:	20c00915 	stw	r3,36(r4)
   44c14:	20800a15 	stw	r2,40(r4)
   44c18:	20000015 	stw	zero,0(r4)
   44c1c:	20000115 	stw	zero,4(r4)
   44c20:	20000215 	stw	zero,8(r4)
   44c24:	20000415 	stw	zero,16(r4)
   44c28:	20000515 	stw	zero,20(r4)
   44c2c:	20000615 	stw	zero,24(r4)
   44c30:	21000715 	stw	r4,28(r4)
   44c34:	f800283a 	ret

00044c38 <__sfp_lock_acquire>:
   44c38:	f800283a 	ret

00044c3c <__sfp_lock_release>:
   44c3c:	f800283a 	ret

00044c40 <__sinit_lock_acquire>:
   44c40:	f800283a 	ret

00044c44 <__sinit_lock_release>:
   44c44:	f800283a 	ret

00044c48 <__sinit>:
   44c48:	20800e17 	ldw	r2,56(r4)
   44c4c:	defffd04 	addi	sp,sp,-12
   44c50:	dc400115 	stw	r17,4(sp)
   44c54:	dc000015 	stw	r16,0(sp)
   44c58:	dfc00215 	stw	ra,8(sp)
   44c5c:	04400044 	movi	r17,1
   44c60:	01400104 	movi	r5,4
   44c64:	000d883a 	mov	r6,zero
   44c68:	2021883a 	mov	r16,r4
   44c6c:	2200bb04 	addi	r8,r4,748
   44c70:	200f883a 	mov	r7,r4
   44c74:	10000526 	beq	r2,zero,44c8c <__sinit+0x44>
   44c78:	dfc00217 	ldw	ra,8(sp)
   44c7c:	dc400117 	ldw	r17,4(sp)
   44c80:	dc000017 	ldw	r16,0(sp)
   44c84:	dec00304 	addi	sp,sp,12
   44c88:	f800283a 	ret
   44c8c:	21000117 	ldw	r4,4(r4)
   44c90:	00800134 	movhi	r2,4
   44c94:	10934b04 	addi	r2,r2,19756
   44c98:	00c000c4 	movi	r3,3
   44c9c:	80800f15 	stw	r2,60(r16)
   44ca0:	80c0b915 	stw	r3,740(r16)
   44ca4:	8200ba15 	stw	r8,744(r16)
   44ca8:	84400e15 	stw	r17,56(r16)
   44cac:	8000b815 	stw	zero,736(r16)
   44cb0:	0044be00 	call	44be0 <std>
   44cb4:	81000217 	ldw	r4,8(r16)
   44cb8:	880d883a 	mov	r6,r17
   44cbc:	800f883a 	mov	r7,r16
   44cc0:	01400284 	movi	r5,10
   44cc4:	0044be00 	call	44be0 <std>
   44cc8:	81000317 	ldw	r4,12(r16)
   44ccc:	800f883a 	mov	r7,r16
   44cd0:	01400484 	movi	r5,18
   44cd4:	01800084 	movi	r6,2
   44cd8:	dfc00217 	ldw	ra,8(sp)
   44cdc:	dc400117 	ldw	r17,4(sp)
   44ce0:	dc000017 	ldw	r16,0(sp)
   44ce4:	dec00304 	addi	sp,sp,12
   44ce8:	0044be01 	jmpi	44be0 <std>

00044cec <__fp_lock>:
   44cec:	0005883a 	mov	r2,zero
   44cf0:	f800283a 	ret

00044cf4 <__fp_unlock>:
   44cf4:	0005883a 	mov	r2,zero
   44cf8:	f800283a 	ret

00044cfc <__fp_unlock_all>:
   44cfc:	00800174 	movhi	r2,5
   44d00:	10bcdd04 	addi	r2,r2,-3212
   44d04:	11000017 	ldw	r4,0(r2)
   44d08:	01400134 	movhi	r5,4
   44d0c:	29533d04 	addi	r5,r5,19700
   44d10:	00458441 	jmpi	45844 <_fwalk>

00044d14 <__fp_lock_all>:
   44d14:	00800174 	movhi	r2,5
   44d18:	10bcdd04 	addi	r2,r2,-3212
   44d1c:	11000017 	ldw	r4,0(r2)
   44d20:	01400134 	movhi	r5,4
   44d24:	29533b04 	addi	r5,r5,19692
   44d28:	00458441 	jmpi	45844 <_fwalk>

00044d2c <_cleanup_r>:
   44d2c:	01400174 	movhi	r5,5
   44d30:	29604304 	addi	r5,r5,-32500
   44d34:	00458441 	jmpi	45844 <_fwalk>

00044d38 <_cleanup>:
   44d38:	00800174 	movhi	r2,5
   44d3c:	10bcde04 	addi	r2,r2,-3208
   44d40:	11000017 	ldw	r4,0(r2)
   44d44:	0044d2c1 	jmpi	44d2c <_cleanup_r>

00044d48 <__sfmoreglue>:
   44d48:	defffc04 	addi	sp,sp,-16
   44d4c:	dc400115 	stw	r17,4(sp)
   44d50:	2c401724 	muli	r17,r5,92
   44d54:	dc800215 	stw	r18,8(sp)
   44d58:	2825883a 	mov	r18,r5
   44d5c:	89400304 	addi	r5,r17,12
   44d60:	dc000015 	stw	r16,0(sp)
   44d64:	dfc00315 	stw	ra,12(sp)
   44d68:	0045b540 	call	45b54 <_malloc_r>
   44d6c:	0021883a 	mov	r16,zero
   44d70:	880d883a 	mov	r6,r17
   44d74:	000b883a 	mov	r5,zero
   44d78:	10000626 	beq	r2,zero,44d94 <__sfmoreglue+0x4c>
   44d7c:	11000304 	addi	r4,r2,12
   44d80:	14800115 	stw	r18,4(r2)
   44d84:	10000015 	stw	zero,0(r2)
   44d88:	11000215 	stw	r4,8(r2)
   44d8c:	1021883a 	mov	r16,r2
   44d90:	00464f80 	call	464f8 <memset>
   44d94:	8005883a 	mov	r2,r16
   44d98:	dfc00317 	ldw	ra,12(sp)
   44d9c:	dc800217 	ldw	r18,8(sp)
   44da0:	dc400117 	ldw	r17,4(sp)
   44da4:	dc000017 	ldw	r16,0(sp)
   44da8:	dec00404 	addi	sp,sp,16
   44dac:	f800283a 	ret

00044db0 <__sfp>:
   44db0:	defffd04 	addi	sp,sp,-12
   44db4:	00800174 	movhi	r2,5
   44db8:	10bcde04 	addi	r2,r2,-3208
   44dbc:	dc000015 	stw	r16,0(sp)
   44dc0:	14000017 	ldw	r16,0(r2)
   44dc4:	dc400115 	stw	r17,4(sp)
   44dc8:	dfc00215 	stw	ra,8(sp)
   44dcc:	80800e17 	ldw	r2,56(r16)
   44dd0:	2023883a 	mov	r17,r4
   44dd4:	10002626 	beq	r2,zero,44e70 <__sfp+0xc0>
   44dd8:	8400b804 	addi	r16,r16,736
   44ddc:	80800117 	ldw	r2,4(r16)
   44de0:	81000217 	ldw	r4,8(r16)
   44de4:	10ffffc4 	addi	r3,r2,-1
   44de8:	18000916 	blt	r3,zero,44e10 <__sfp+0x60>
   44dec:	2080030f 	ldh	r2,12(r4)
   44df0:	10000b26 	beq	r2,zero,44e20 <__sfp+0x70>
   44df4:	017fffc4 	movi	r5,-1
   44df8:	00000206 	br	44e04 <__sfp+0x54>
   44dfc:	2080030f 	ldh	r2,12(r4)
   44e00:	10000726 	beq	r2,zero,44e20 <__sfp+0x70>
   44e04:	18ffffc4 	addi	r3,r3,-1
   44e08:	21001704 	addi	r4,r4,92
   44e0c:	197ffb1e 	bne	r3,r5,44dfc <__sfp+0x4c>
   44e10:	80800017 	ldw	r2,0(r16)
   44e14:	10001926 	beq	r2,zero,44e7c <__sfp+0xcc>
   44e18:	1021883a 	mov	r16,r2
   44e1c:	003fef06 	br	44ddc <__sfp+0x2c>
   44e20:	00bfffc4 	movi	r2,-1
   44e24:	00c00044 	movi	r3,1
   44e28:	2080038d 	sth	r2,14(r4)
   44e2c:	20c0030d 	sth	r3,12(r4)
   44e30:	20000015 	stw	zero,0(r4)
   44e34:	20000215 	stw	zero,8(r4)
   44e38:	20000115 	stw	zero,4(r4)
   44e3c:	20000415 	stw	zero,16(r4)
   44e40:	20000515 	stw	zero,20(r4)
   44e44:	20000615 	stw	zero,24(r4)
   44e48:	20000c15 	stw	zero,48(r4)
   44e4c:	20000d15 	stw	zero,52(r4)
   44e50:	20001115 	stw	zero,68(r4)
   44e54:	20001215 	stw	zero,72(r4)
   44e58:	2005883a 	mov	r2,r4
   44e5c:	dfc00217 	ldw	ra,8(sp)
   44e60:	dc400117 	ldw	r17,4(sp)
   44e64:	dc000017 	ldw	r16,0(sp)
   44e68:	dec00304 	addi	sp,sp,12
   44e6c:	f800283a 	ret
   44e70:	8009883a 	mov	r4,r16
   44e74:	0044c480 	call	44c48 <__sinit>
   44e78:	003fd706 	br	44dd8 <__sfp+0x28>
   44e7c:	8809883a 	mov	r4,r17
   44e80:	01400104 	movi	r5,4
   44e84:	0044d480 	call	44d48 <__sfmoreglue>
   44e88:	80800015 	stw	r2,0(r16)
   44e8c:	103fe21e 	bne	r2,zero,44e18 <__sfp+0x68>
   44e90:	00800304 	movi	r2,12
   44e94:	0009883a 	mov	r4,zero
   44e98:	88800015 	stw	r2,0(r17)
   44e9c:	003fee06 	br	44e58 <__sfp+0xa8>

00044ea0 <_malloc_trim_r>:
   44ea0:	defffb04 	addi	sp,sp,-20
   44ea4:	dcc00315 	stw	r19,12(sp)
   44ea8:	04c00174 	movhi	r19,5
   44eac:	9cf75904 	addi	r19,r19,-8860
   44eb0:	dc800215 	stw	r18,8(sp)
   44eb4:	dc400115 	stw	r17,4(sp)
   44eb8:	dc000015 	stw	r16,0(sp)
   44ebc:	2823883a 	mov	r17,r5
   44ec0:	2025883a 	mov	r18,r4
   44ec4:	dfc00415 	stw	ra,16(sp)
   44ec8:	004acbc0 	call	4acbc <__malloc_lock>
   44ecc:	98800217 	ldw	r2,8(r19)
   44ed0:	9009883a 	mov	r4,r18
   44ed4:	000b883a 	mov	r5,zero
   44ed8:	10c00117 	ldw	r3,4(r2)
   44edc:	00bfff04 	movi	r2,-4
   44ee0:	18a0703a 	and	r16,r3,r2
   44ee4:	8463c83a 	sub	r17,r16,r17
   44ee8:	8c43fbc4 	addi	r17,r17,4079
   44eec:	8822d33a 	srli	r17,r17,12
   44ef0:	0083ffc4 	movi	r2,4095
   44ef4:	8c7fffc4 	addi	r17,r17,-1
   44ef8:	8822933a 	slli	r17,r17,12
   44efc:	1440060e 	bge	r2,r17,44f18 <_malloc_trim_r+0x78>
   44f00:	0047be80 	call	47be8 <_sbrk_r>
   44f04:	98c00217 	ldw	r3,8(r19)
   44f08:	9009883a 	mov	r4,r18
   44f0c:	044bc83a 	sub	r5,zero,r17
   44f10:	80c7883a 	add	r3,r16,r3
   44f14:	10c00926 	beq	r2,r3,44f3c <_malloc_trim_r+0x9c>
   44f18:	004acdc0 	call	4acdc <__malloc_unlock>
   44f1c:	0005883a 	mov	r2,zero
   44f20:	dfc00417 	ldw	ra,16(sp)
   44f24:	dcc00317 	ldw	r19,12(sp)
   44f28:	dc800217 	ldw	r18,8(sp)
   44f2c:	dc400117 	ldw	r17,4(sp)
   44f30:	dc000017 	ldw	r16,0(sp)
   44f34:	dec00504 	addi	sp,sp,20
   44f38:	f800283a 	ret
   44f3c:	9009883a 	mov	r4,r18
   44f40:	0047be80 	call	47be8 <_sbrk_r>
   44f44:	844dc83a 	sub	r6,r16,r17
   44f48:	00ffffc4 	movi	r3,-1
   44f4c:	9009883a 	mov	r4,r18
   44f50:	000b883a 	mov	r5,zero
   44f54:	01c00174 	movhi	r7,5
   44f58:	39c39304 	addi	r7,r7,3660
   44f5c:	31800054 	ori	r6,r6,1
   44f60:	10c00926 	beq	r2,r3,44f88 <_malloc_trim_r+0xe8>
   44f64:	38800017 	ldw	r2,0(r7)
   44f68:	98c00217 	ldw	r3,8(r19)
   44f6c:	9009883a 	mov	r4,r18
   44f70:	1445c83a 	sub	r2,r2,r17
   44f74:	38800015 	stw	r2,0(r7)
   44f78:	19800115 	stw	r6,4(r3)
   44f7c:	004acdc0 	call	4acdc <__malloc_unlock>
   44f80:	00800044 	movi	r2,1
   44f84:	003fe606 	br	44f20 <_malloc_trim_r+0x80>
   44f88:	0047be80 	call	47be8 <_sbrk_r>
   44f8c:	99800217 	ldw	r6,8(r19)
   44f90:	100f883a 	mov	r7,r2
   44f94:	9009883a 	mov	r4,r18
   44f98:	1187c83a 	sub	r3,r2,r6
   44f9c:	008003c4 	movi	r2,15
   44fa0:	19400054 	ori	r5,r3,1
   44fa4:	10ffdc0e 	bge	r2,r3,44f18 <_malloc_trim_r+0x78>
   44fa8:	00800174 	movhi	r2,5
   44fac:	10bce204 	addi	r2,r2,-3192
   44fb0:	10c00017 	ldw	r3,0(r2)
   44fb4:	00800174 	movhi	r2,5
   44fb8:	10839304 	addi	r2,r2,3660
   44fbc:	31400115 	stw	r5,4(r6)
   44fc0:	38c7c83a 	sub	r3,r7,r3
   44fc4:	10c00015 	stw	r3,0(r2)
   44fc8:	003fd306 	br	44f18 <_malloc_trim_r+0x78>

00044fcc <_free_r>:
   44fcc:	defffd04 	addi	sp,sp,-12
   44fd0:	dc400115 	stw	r17,4(sp)
   44fd4:	dc000015 	stw	r16,0(sp)
   44fd8:	dfc00215 	stw	ra,8(sp)
   44fdc:	2821883a 	mov	r16,r5
   44fe0:	2023883a 	mov	r17,r4
   44fe4:	28005a26 	beq	r5,zero,45150 <_free_r+0x184>
   44fe8:	004acbc0 	call	4acbc <__malloc_lock>
   44fec:	823ffe04 	addi	r8,r16,-8
   44ff0:	41400117 	ldw	r5,4(r8)
   44ff4:	00bfff84 	movi	r2,-2
   44ff8:	02800174 	movhi	r10,5
   44ffc:	52b75904 	addi	r10,r10,-8860
   45000:	288e703a 	and	r7,r5,r2
   45004:	41cd883a 	add	r6,r8,r7
   45008:	30c00117 	ldw	r3,4(r6)
   4500c:	51000217 	ldw	r4,8(r10)
   45010:	00bfff04 	movi	r2,-4
   45014:	1892703a 	and	r9,r3,r2
   45018:	5017883a 	mov	r11,r10
   4501c:	31006726 	beq	r6,r4,451bc <_free_r+0x1f0>
   45020:	2880004c 	andi	r2,r5,1
   45024:	1005003a 	cmpeq	r2,r2,zero
   45028:	32400115 	stw	r9,4(r6)
   4502c:	10001a1e 	bne	r2,zero,45098 <_free_r+0xcc>
   45030:	000b883a 	mov	r5,zero
   45034:	3247883a 	add	r3,r6,r9
   45038:	18800117 	ldw	r2,4(r3)
   4503c:	1080004c 	andi	r2,r2,1
   45040:	1000231e 	bne	r2,zero,450d0 <_free_r+0x104>
   45044:	280ac03a 	cmpne	r5,r5,zero
   45048:	3a4f883a 	add	r7,r7,r9
   4504c:	2800451e 	bne	r5,zero,45164 <_free_r+0x198>
   45050:	31000217 	ldw	r4,8(r6)
   45054:	00800174 	movhi	r2,5
   45058:	10b75b04 	addi	r2,r2,-8852
   4505c:	20807b26 	beq	r4,r2,4524c <_free_r+0x280>
   45060:	30800317 	ldw	r2,12(r6)
   45064:	3a07883a 	add	r3,r7,r8
   45068:	19c00015 	stw	r7,0(r3)
   4506c:	11000215 	stw	r4,8(r2)
   45070:	20800315 	stw	r2,12(r4)
   45074:	38800054 	ori	r2,r7,1
   45078:	40800115 	stw	r2,4(r8)
   4507c:	28001a26 	beq	r5,zero,450e8 <_free_r+0x11c>
   45080:	8809883a 	mov	r4,r17
   45084:	dfc00217 	ldw	ra,8(sp)
   45088:	dc400117 	ldw	r17,4(sp)
   4508c:	dc000017 	ldw	r16,0(sp)
   45090:	dec00304 	addi	sp,sp,12
   45094:	004acdc1 	jmpi	4acdc <__malloc_unlock>
   45098:	80bffe17 	ldw	r2,-8(r16)
   4509c:	50c00204 	addi	r3,r10,8
   450a0:	4091c83a 	sub	r8,r8,r2
   450a4:	41000217 	ldw	r4,8(r8)
   450a8:	388f883a 	add	r7,r7,r2
   450ac:	20c06126 	beq	r4,r3,45234 <_free_r+0x268>
   450b0:	40800317 	ldw	r2,12(r8)
   450b4:	3247883a 	add	r3,r6,r9
   450b8:	000b883a 	mov	r5,zero
   450bc:	11000215 	stw	r4,8(r2)
   450c0:	20800315 	stw	r2,12(r4)
   450c4:	18800117 	ldw	r2,4(r3)
   450c8:	1080004c 	andi	r2,r2,1
   450cc:	103fdd26 	beq	r2,zero,45044 <_free_r+0x78>
   450d0:	38800054 	ori	r2,r7,1
   450d4:	3a07883a 	add	r3,r7,r8
   450d8:	280ac03a 	cmpne	r5,r5,zero
   450dc:	40800115 	stw	r2,4(r8)
   450e0:	19c00015 	stw	r7,0(r3)
   450e4:	283fe61e 	bne	r5,zero,45080 <_free_r+0xb4>
   450e8:	00807fc4 	movi	r2,511
   450ec:	11c01f2e 	bgeu	r2,r7,4516c <_free_r+0x1a0>
   450f0:	3806d27a 	srli	r3,r7,9
   450f4:	1800481e 	bne	r3,zero,45218 <_free_r+0x24c>
   450f8:	3804d0fa 	srli	r2,r7,3
   450fc:	100690fa 	slli	r3,r2,3
   45100:	1acd883a 	add	r6,r3,r11
   45104:	31400217 	ldw	r5,8(r6)
   45108:	31405926 	beq	r6,r5,45270 <_free_r+0x2a4>
   4510c:	28800117 	ldw	r2,4(r5)
   45110:	00ffff04 	movi	r3,-4
   45114:	10c4703a 	and	r2,r2,r3
   45118:	3880022e 	bgeu	r7,r2,45124 <_free_r+0x158>
   4511c:	29400217 	ldw	r5,8(r5)
   45120:	317ffa1e 	bne	r6,r5,4510c <_free_r+0x140>
   45124:	29800317 	ldw	r6,12(r5)
   45128:	41800315 	stw	r6,12(r8)
   4512c:	41400215 	stw	r5,8(r8)
   45130:	8809883a 	mov	r4,r17
   45134:	2a000315 	stw	r8,12(r5)
   45138:	32000215 	stw	r8,8(r6)
   4513c:	dfc00217 	ldw	ra,8(sp)
   45140:	dc400117 	ldw	r17,4(sp)
   45144:	dc000017 	ldw	r16,0(sp)
   45148:	dec00304 	addi	sp,sp,12
   4514c:	004acdc1 	jmpi	4acdc <__malloc_unlock>
   45150:	dfc00217 	ldw	ra,8(sp)
   45154:	dc400117 	ldw	r17,4(sp)
   45158:	dc000017 	ldw	r16,0(sp)
   4515c:	dec00304 	addi	sp,sp,12
   45160:	f800283a 	ret
   45164:	31000217 	ldw	r4,8(r6)
   45168:	003fbd06 	br	45060 <_free_r+0x94>
   4516c:	3806d0fa 	srli	r3,r7,3
   45170:	00800044 	movi	r2,1
   45174:	51400117 	ldw	r5,4(r10)
   45178:	180890fa 	slli	r4,r3,3
   4517c:	1807d0ba 	srai	r3,r3,2
   45180:	22c9883a 	add	r4,r4,r11
   45184:	21800217 	ldw	r6,8(r4)
   45188:	10c4983a 	sll	r2,r2,r3
   4518c:	41000315 	stw	r4,12(r8)
   45190:	41800215 	stw	r6,8(r8)
   45194:	288ab03a 	or	r5,r5,r2
   45198:	22000215 	stw	r8,8(r4)
   4519c:	8809883a 	mov	r4,r17
   451a0:	51400115 	stw	r5,4(r10)
   451a4:	32000315 	stw	r8,12(r6)
   451a8:	dfc00217 	ldw	ra,8(sp)
   451ac:	dc400117 	ldw	r17,4(sp)
   451b0:	dc000017 	ldw	r16,0(sp)
   451b4:	dec00304 	addi	sp,sp,12
   451b8:	004acdc1 	jmpi	4acdc <__malloc_unlock>
   451bc:	2880004c 	andi	r2,r5,1
   451c0:	3a4d883a 	add	r6,r7,r9
   451c4:	1000071e 	bne	r2,zero,451e4 <_free_r+0x218>
   451c8:	80bffe17 	ldw	r2,-8(r16)
   451cc:	4091c83a 	sub	r8,r8,r2
   451d0:	41000317 	ldw	r4,12(r8)
   451d4:	40c00217 	ldw	r3,8(r8)
   451d8:	308d883a 	add	r6,r6,r2
   451dc:	20c00215 	stw	r3,8(r4)
   451e0:	19000315 	stw	r4,12(r3)
   451e4:	00800174 	movhi	r2,5
   451e8:	10bce104 	addi	r2,r2,-3196
   451ec:	11000017 	ldw	r4,0(r2)
   451f0:	30c00054 	ori	r3,r6,1
   451f4:	52000215 	stw	r8,8(r10)
   451f8:	40c00115 	stw	r3,4(r8)
   451fc:	313fa036 	bltu	r6,r4,45080 <_free_r+0xb4>
   45200:	00800174 	movhi	r2,5
   45204:	10838704 	addi	r2,r2,3612
   45208:	11400017 	ldw	r5,0(r2)
   4520c:	8809883a 	mov	r4,r17
   45210:	0044ea00 	call	44ea0 <_malloc_trim_r>
   45214:	003f9a06 	br	45080 <_free_r+0xb4>
   45218:	00800104 	movi	r2,4
   4521c:	10c0072e 	bgeu	r2,r3,4523c <_free_r+0x270>
   45220:	00800504 	movi	r2,20
   45224:	10c01936 	bltu	r2,r3,4528c <_free_r+0x2c0>
   45228:	188016c4 	addi	r2,r3,91
   4522c:	100690fa 	slli	r3,r2,3
   45230:	003fb306 	br	45100 <_free_r+0x134>
   45234:	01400044 	movi	r5,1
   45238:	003f7e06 	br	45034 <_free_r+0x68>
   4523c:	3804d1ba 	srli	r2,r7,6
   45240:	10800e04 	addi	r2,r2,56
   45244:	100690fa 	slli	r3,r2,3
   45248:	003fad06 	br	45100 <_free_r+0x134>
   4524c:	22000315 	stw	r8,12(r4)
   45250:	22000215 	stw	r8,8(r4)
   45254:	3a05883a 	add	r2,r7,r8
   45258:	38c00054 	ori	r3,r7,1
   4525c:	11c00015 	stw	r7,0(r2)
   45260:	41000215 	stw	r4,8(r8)
   45264:	40c00115 	stw	r3,4(r8)
   45268:	41000315 	stw	r4,12(r8)
   4526c:	003f8406 	br	45080 <_free_r+0xb4>
   45270:	1005d0ba 	srai	r2,r2,2
   45274:	00c00044 	movi	r3,1
   45278:	51000117 	ldw	r4,4(r10)
   4527c:	1886983a 	sll	r3,r3,r2
   45280:	20c8b03a 	or	r4,r4,r3
   45284:	51000115 	stw	r4,4(r10)
   45288:	003fa706 	br	45128 <_free_r+0x15c>
   4528c:	00801504 	movi	r2,84
   45290:	10c00436 	bltu	r2,r3,452a4 <_free_r+0x2d8>
   45294:	3804d33a 	srli	r2,r7,12
   45298:	10801b84 	addi	r2,r2,110
   4529c:	100690fa 	slli	r3,r2,3
   452a0:	003f9706 	br	45100 <_free_r+0x134>
   452a4:	00805504 	movi	r2,340
   452a8:	10c00436 	bltu	r2,r3,452bc <_free_r+0x2f0>
   452ac:	3804d3fa 	srli	r2,r7,15
   452b0:	10801dc4 	addi	r2,r2,119
   452b4:	100690fa 	slli	r3,r2,3
   452b8:	003f9106 	br	45100 <_free_r+0x134>
   452bc:	00815504 	movi	r2,1364
   452c0:	10c0032e 	bgeu	r2,r3,452d0 <_free_r+0x304>
   452c4:	00801f84 	movi	r2,126
   452c8:	00c0fc04 	movi	r3,1008
   452cc:	003f8c06 	br	45100 <_free_r+0x134>
   452d0:	3804d4ba 	srli	r2,r7,18
   452d4:	10801f04 	addi	r2,r2,124
   452d8:	100690fa 	slli	r3,r2,3
   452dc:	003f8806 	br	45100 <_free_r+0x134>

000452e0 <__sfvwrite_r>:
   452e0:	30800217 	ldw	r2,8(r6)
   452e4:	defff504 	addi	sp,sp,-44
   452e8:	df000915 	stw	fp,36(sp)
   452ec:	dd800715 	stw	r22,28(sp)
   452f0:	dc800315 	stw	r18,12(sp)
   452f4:	dfc00a15 	stw	ra,40(sp)
   452f8:	ddc00815 	stw	r23,32(sp)
   452fc:	dd400615 	stw	r21,24(sp)
   45300:	dd000515 	stw	r20,20(sp)
   45304:	dcc00415 	stw	r19,16(sp)
   45308:	dc400215 	stw	r17,8(sp)
   4530c:	dc000115 	stw	r16,4(sp)
   45310:	302d883a 	mov	r22,r6
   45314:	2039883a 	mov	fp,r4
   45318:	2825883a 	mov	r18,r5
   4531c:	10001c26 	beq	r2,zero,45390 <__sfvwrite_r+0xb0>
   45320:	29c0030b 	ldhu	r7,12(r5)
   45324:	3880020c 	andi	r2,r7,8
   45328:	10002726 	beq	r2,zero,453c8 <__sfvwrite_r+0xe8>
   4532c:	28800417 	ldw	r2,16(r5)
   45330:	10002526 	beq	r2,zero,453c8 <__sfvwrite_r+0xe8>
   45334:	3880008c 	andi	r2,r7,2
   45338:	b5400017 	ldw	r21,0(r22)
   4533c:	10002826 	beq	r2,zero,453e0 <__sfvwrite_r+0x100>
   45340:	0021883a 	mov	r16,zero
   45344:	0023883a 	mov	r17,zero
   45348:	880d883a 	mov	r6,r17
   4534c:	e009883a 	mov	r4,fp
   45350:	00810004 	movi	r2,1024
   45354:	80006e26 	beq	r16,zero,45510 <__sfvwrite_r+0x230>
   45358:	800f883a 	mov	r7,r16
   4535c:	91400717 	ldw	r5,28(r18)
   45360:	1400012e 	bgeu	r2,r16,45368 <__sfvwrite_r+0x88>
   45364:	100f883a 	mov	r7,r2
   45368:	90c00917 	ldw	r3,36(r18)
   4536c:	183ee83a 	callr	r3
   45370:	1007883a 	mov	r3,r2
   45374:	80a1c83a 	sub	r16,r16,r2
   45378:	88a3883a 	add	r17,r17,r2
   4537c:	00806d0e 	bge	zero,r2,45534 <__sfvwrite_r+0x254>
   45380:	b0800217 	ldw	r2,8(r22)
   45384:	10c5c83a 	sub	r2,r2,r3
   45388:	b0800215 	stw	r2,8(r22)
   4538c:	103fee1e 	bne	r2,zero,45348 <__sfvwrite_r+0x68>
   45390:	0009883a 	mov	r4,zero
   45394:	2005883a 	mov	r2,r4
   45398:	dfc00a17 	ldw	ra,40(sp)
   4539c:	df000917 	ldw	fp,36(sp)
   453a0:	ddc00817 	ldw	r23,32(sp)
   453a4:	dd800717 	ldw	r22,28(sp)
   453a8:	dd400617 	ldw	r21,24(sp)
   453ac:	dd000517 	ldw	r20,20(sp)
   453b0:	dcc00417 	ldw	r19,16(sp)
   453b4:	dc800317 	ldw	r18,12(sp)
   453b8:	dc400217 	ldw	r17,8(sp)
   453bc:	dc000117 	ldw	r16,4(sp)
   453c0:	dec00b04 	addi	sp,sp,44
   453c4:	f800283a 	ret
   453c8:	0042ef40 	call	42ef4 <__swsetup_r>
   453cc:	1000e41e 	bne	r2,zero,45760 <__sfvwrite_r+0x480>
   453d0:	91c0030b 	ldhu	r7,12(r18)
   453d4:	b5400017 	ldw	r21,0(r22)
   453d8:	3880008c 	andi	r2,r7,2
   453dc:	103fd81e 	bne	r2,zero,45340 <__sfvwrite_r+0x60>
   453e0:	3880004c 	andi	r2,r7,1
   453e4:	1005003a 	cmpeq	r2,r2,zero
   453e8:	10005726 	beq	r2,zero,45548 <__sfvwrite_r+0x268>
   453ec:	0029883a 	mov	r20,zero
   453f0:	002f883a 	mov	r23,zero
   453f4:	a0004226 	beq	r20,zero,45500 <__sfvwrite_r+0x220>
   453f8:	3880800c 	andi	r2,r7,512
   453fc:	94000217 	ldw	r16,8(r18)
   45400:	10008b26 	beq	r2,zero,45630 <__sfvwrite_r+0x350>
   45404:	800d883a 	mov	r6,r16
   45408:	a400a536 	bltu	r20,r16,456a0 <__sfvwrite_r+0x3c0>
   4540c:	3881200c 	andi	r2,r7,1152
   45410:	10002726 	beq	r2,zero,454b0 <__sfvwrite_r+0x1d0>
   45414:	90800517 	ldw	r2,20(r18)
   45418:	92000417 	ldw	r8,16(r18)
   4541c:	91400017 	ldw	r5,0(r18)
   45420:	1087883a 	add	r3,r2,r2
   45424:	1887883a 	add	r3,r3,r2
   45428:	1808d7fa 	srli	r4,r3,31
   4542c:	2a21c83a 	sub	r16,r5,r8
   45430:	80800044 	addi	r2,r16,1
   45434:	20c9883a 	add	r4,r4,r3
   45438:	2027d07a 	srai	r19,r4,1
   4543c:	a085883a 	add	r2,r20,r2
   45440:	980d883a 	mov	r6,r19
   45444:	9880022e 	bgeu	r19,r2,45450 <__sfvwrite_r+0x170>
   45448:	1027883a 	mov	r19,r2
   4544c:	100d883a 	mov	r6,r2
   45450:	3881000c 	andi	r2,r7,1024
   45454:	1000b826 	beq	r2,zero,45738 <__sfvwrite_r+0x458>
   45458:	300b883a 	mov	r5,r6
   4545c:	e009883a 	mov	r4,fp
   45460:	0045b540 	call	45b54 <_malloc_r>
   45464:	10003126 	beq	r2,zero,4552c <__sfvwrite_r+0x24c>
   45468:	91400417 	ldw	r5,16(r18)
   4546c:	1009883a 	mov	r4,r2
   45470:	800d883a 	mov	r6,r16
   45474:	1023883a 	mov	r17,r2
   45478:	00463780 	call	46378 <memcpy>
   4547c:	90c0030b 	ldhu	r3,12(r18)
   45480:	00beffc4 	movi	r2,-1025
   45484:	1886703a 	and	r3,r3,r2
   45488:	18c02014 	ori	r3,r3,128
   4548c:	90c0030d 	sth	r3,12(r18)
   45490:	9c07c83a 	sub	r3,r19,r16
   45494:	8c05883a 	add	r2,r17,r16
   45498:	a00d883a 	mov	r6,r20
   4549c:	a021883a 	mov	r16,r20
   454a0:	90800015 	stw	r2,0(r18)
   454a4:	90c00215 	stw	r3,8(r18)
   454a8:	94400415 	stw	r17,16(r18)
   454ac:	94c00515 	stw	r19,20(r18)
   454b0:	91000017 	ldw	r4,0(r18)
   454b4:	b80b883a 	mov	r5,r23
   454b8:	a023883a 	mov	r17,r20
   454bc:	00464180 	call	46418 <memmove>
   454c0:	90c00217 	ldw	r3,8(r18)
   454c4:	90800017 	ldw	r2,0(r18)
   454c8:	a027883a 	mov	r19,r20
   454cc:	1c07c83a 	sub	r3,r3,r16
   454d0:	1405883a 	add	r2,r2,r16
   454d4:	90c00215 	stw	r3,8(r18)
   454d8:	a021883a 	mov	r16,r20
   454dc:	90800015 	stw	r2,0(r18)
   454e0:	b0800217 	ldw	r2,8(r22)
   454e4:	1405c83a 	sub	r2,r2,r16
   454e8:	b0800215 	stw	r2,8(r22)
   454ec:	103fa826 	beq	r2,zero,45390 <__sfvwrite_r+0xb0>
   454f0:	a469c83a 	sub	r20,r20,r17
   454f4:	91c0030b 	ldhu	r7,12(r18)
   454f8:	bcef883a 	add	r23,r23,r19
   454fc:	a03fbe1e 	bne	r20,zero,453f8 <__sfvwrite_r+0x118>
   45500:	adc00017 	ldw	r23,0(r21)
   45504:	ad000117 	ldw	r20,4(r21)
   45508:	ad400204 	addi	r21,r21,8
   4550c:	003fb906 	br	453f4 <__sfvwrite_r+0x114>
   45510:	ac400017 	ldw	r17,0(r21)
   45514:	ac000117 	ldw	r16,4(r21)
   45518:	ad400204 	addi	r21,r21,8
   4551c:	003f8a06 	br	45348 <__sfvwrite_r+0x68>
   45520:	91400417 	ldw	r5,16(r18)
   45524:	e009883a 	mov	r4,fp
   45528:	0044fcc0 	call	44fcc <_free_r>
   4552c:	00800304 	movi	r2,12
   45530:	e0800015 	stw	r2,0(fp)
   45534:	9080030b 	ldhu	r2,12(r18)
   45538:	013fffc4 	movi	r4,-1
   4553c:	10801014 	ori	r2,r2,64
   45540:	9080030d 	sth	r2,12(r18)
   45544:	003f9306 	br	45394 <__sfvwrite_r+0xb4>
   45548:	0027883a 	mov	r19,zero
   4554c:	002f883a 	mov	r23,zero
   45550:	d8000015 	stw	zero,0(sp)
   45554:	0029883a 	mov	r20,zero
   45558:	98001e26 	beq	r19,zero,455d4 <__sfvwrite_r+0x2f4>
   4555c:	d8c00017 	ldw	r3,0(sp)
   45560:	1804c03a 	cmpne	r2,r3,zero
   45564:	10005e26 	beq	r2,zero,456e0 <__sfvwrite_r+0x400>
   45568:	9821883a 	mov	r16,r19
   4556c:	a4c0012e 	bgeu	r20,r19,45574 <__sfvwrite_r+0x294>
   45570:	a021883a 	mov	r16,r20
   45574:	91000017 	ldw	r4,0(r18)
   45578:	90800417 	ldw	r2,16(r18)
   4557c:	91800217 	ldw	r6,8(r18)
   45580:	91c00517 	ldw	r7,20(r18)
   45584:	1100022e 	bgeu	r2,r4,45590 <__sfvwrite_r+0x2b0>
   45588:	31e3883a 	add	r17,r6,r7
   4558c:	8c001616 	blt	r17,r16,455e8 <__sfvwrite_r+0x308>
   45590:	81c03816 	blt	r16,r7,45674 <__sfvwrite_r+0x394>
   45594:	90c00917 	ldw	r3,36(r18)
   45598:	91400717 	ldw	r5,28(r18)
   4559c:	e009883a 	mov	r4,fp
   455a0:	b80d883a 	mov	r6,r23
   455a4:	183ee83a 	callr	r3
   455a8:	1023883a 	mov	r17,r2
   455ac:	00bfe10e 	bge	zero,r2,45534 <__sfvwrite_r+0x254>
   455b0:	a469c83a 	sub	r20,r20,r17
   455b4:	a0001826 	beq	r20,zero,45618 <__sfvwrite_r+0x338>
   455b8:	b0800217 	ldw	r2,8(r22)
   455bc:	1445c83a 	sub	r2,r2,r17
   455c0:	b0800215 	stw	r2,8(r22)
   455c4:	103f7226 	beq	r2,zero,45390 <__sfvwrite_r+0xb0>
   455c8:	9c67c83a 	sub	r19,r19,r17
   455cc:	bc6f883a 	add	r23,r23,r17
   455d0:	983fe21e 	bne	r19,zero,4555c <__sfvwrite_r+0x27c>
   455d4:	adc00017 	ldw	r23,0(r21)
   455d8:	acc00117 	ldw	r19,4(r21)
   455dc:	ad400204 	addi	r21,r21,8
   455e0:	d8000015 	stw	zero,0(sp)
   455e4:	003fdc06 	br	45558 <__sfvwrite_r+0x278>
   455e8:	b80b883a 	mov	r5,r23
   455ec:	880d883a 	mov	r6,r17
   455f0:	00464180 	call	46418 <memmove>
   455f4:	90c00017 	ldw	r3,0(r18)
   455f8:	e009883a 	mov	r4,fp
   455fc:	900b883a 	mov	r5,r18
   45600:	1c47883a 	add	r3,r3,r17
   45604:	90c00015 	stw	r3,0(r18)
   45608:	00449b00 	call	449b0 <_fflush_r>
   4560c:	103fc91e 	bne	r2,zero,45534 <__sfvwrite_r+0x254>
   45610:	a469c83a 	sub	r20,r20,r17
   45614:	a03fe81e 	bne	r20,zero,455b8 <__sfvwrite_r+0x2d8>
   45618:	e009883a 	mov	r4,fp
   4561c:	900b883a 	mov	r5,r18
   45620:	00449b00 	call	449b0 <_fflush_r>
   45624:	103fc31e 	bne	r2,zero,45534 <__sfvwrite_r+0x254>
   45628:	d8000015 	stw	zero,0(sp)
   4562c:	003fe206 	br	455b8 <__sfvwrite_r+0x2d8>
   45630:	91000017 	ldw	r4,0(r18)
   45634:	90800417 	ldw	r2,16(r18)
   45638:	1100022e 	bgeu	r2,r4,45644 <__sfvwrite_r+0x364>
   4563c:	8023883a 	mov	r17,r16
   45640:	85003136 	bltu	r16,r20,45708 <__sfvwrite_r+0x428>
   45644:	91c00517 	ldw	r7,20(r18)
   45648:	a1c01836 	bltu	r20,r7,456ac <__sfvwrite_r+0x3cc>
   4564c:	90c00917 	ldw	r3,36(r18)
   45650:	91400717 	ldw	r5,28(r18)
   45654:	e009883a 	mov	r4,fp
   45658:	b80d883a 	mov	r6,r23
   4565c:	183ee83a 	callr	r3
   45660:	1021883a 	mov	r16,r2
   45664:	00bfb30e 	bge	zero,r2,45534 <__sfvwrite_r+0x254>
   45668:	1023883a 	mov	r17,r2
   4566c:	1027883a 	mov	r19,r2
   45670:	003f9b06 	br	454e0 <__sfvwrite_r+0x200>
   45674:	b80b883a 	mov	r5,r23
   45678:	800d883a 	mov	r6,r16
   4567c:	00464180 	call	46418 <memmove>
   45680:	90c00217 	ldw	r3,8(r18)
   45684:	90800017 	ldw	r2,0(r18)
   45688:	8023883a 	mov	r17,r16
   4568c:	1c07c83a 	sub	r3,r3,r16
   45690:	1405883a 	add	r2,r2,r16
   45694:	90c00215 	stw	r3,8(r18)
   45698:	90800015 	stw	r2,0(r18)
   4569c:	003fc406 	br	455b0 <__sfvwrite_r+0x2d0>
   456a0:	a00d883a 	mov	r6,r20
   456a4:	a021883a 	mov	r16,r20
   456a8:	003f8106 	br	454b0 <__sfvwrite_r+0x1d0>
   456ac:	b80b883a 	mov	r5,r23
   456b0:	a00d883a 	mov	r6,r20
   456b4:	00464180 	call	46418 <memmove>
   456b8:	90c00217 	ldw	r3,8(r18)
   456bc:	90800017 	ldw	r2,0(r18)
   456c0:	a021883a 	mov	r16,r20
   456c4:	1d07c83a 	sub	r3,r3,r20
   456c8:	1505883a 	add	r2,r2,r20
   456cc:	a023883a 	mov	r17,r20
   456d0:	a027883a 	mov	r19,r20
   456d4:	90c00215 	stw	r3,8(r18)
   456d8:	90800015 	stw	r2,0(r18)
   456dc:	003f8006 	br	454e0 <__sfvwrite_r+0x200>
   456e0:	b809883a 	mov	r4,r23
   456e4:	01400284 	movi	r5,10
   456e8:	980d883a 	mov	r6,r19
   456ec:	00462940 	call	46294 <memchr>
   456f0:	10001726 	beq	r2,zero,45750 <__sfvwrite_r+0x470>
   456f4:	15c5c83a 	sub	r2,r2,r23
   456f8:	15000044 	addi	r20,r2,1
   456fc:	00800044 	movi	r2,1
   45700:	d8800015 	stw	r2,0(sp)
   45704:	003f9806 	br	45568 <__sfvwrite_r+0x288>
   45708:	b80b883a 	mov	r5,r23
   4570c:	800d883a 	mov	r6,r16
   45710:	00464180 	call	46418 <memmove>
   45714:	90c00017 	ldw	r3,0(r18)
   45718:	e009883a 	mov	r4,fp
   4571c:	900b883a 	mov	r5,r18
   45720:	1c07883a 	add	r3,r3,r16
   45724:	90c00015 	stw	r3,0(r18)
   45728:	8027883a 	mov	r19,r16
   4572c:	00449b00 	call	449b0 <_fflush_r>
   45730:	103f6b26 	beq	r2,zero,454e0 <__sfvwrite_r+0x200>
   45734:	003f7f06 	br	45534 <__sfvwrite_r+0x254>
   45738:	400b883a 	mov	r5,r8
   4573c:	e009883a 	mov	r4,fp
   45740:	00475840 	call	47584 <_realloc_r>
   45744:	103f7626 	beq	r2,zero,45520 <__sfvwrite_r+0x240>
   45748:	1023883a 	mov	r17,r2
   4574c:	003f5006 	br	45490 <__sfvwrite_r+0x1b0>
   45750:	00c00044 	movi	r3,1
   45754:	9d000044 	addi	r20,r19,1
   45758:	d8c00015 	stw	r3,0(sp)
   4575c:	003f8206 	br	45568 <__sfvwrite_r+0x288>
   45760:	9080030b 	ldhu	r2,12(r18)
   45764:	00c00244 	movi	r3,9
   45768:	013fffc4 	movi	r4,-1
   4576c:	10801014 	ori	r2,r2,64
   45770:	9080030d 	sth	r2,12(r18)
   45774:	e0c00015 	stw	r3,0(fp)
   45778:	003f0606 	br	45394 <__sfvwrite_r+0xb4>

0004577c <_fwalk_reent>:
   4577c:	defff704 	addi	sp,sp,-36
   45780:	dcc00315 	stw	r19,12(sp)
   45784:	24c0b804 	addi	r19,r4,736
   45788:	dd800615 	stw	r22,24(sp)
   4578c:	dd400515 	stw	r21,20(sp)
   45790:	dfc00815 	stw	ra,32(sp)
   45794:	ddc00715 	stw	r23,28(sp)
   45798:	dd000415 	stw	r20,16(sp)
   4579c:	dc800215 	stw	r18,8(sp)
   457a0:	dc400115 	stw	r17,4(sp)
   457a4:	dc000015 	stw	r16,0(sp)
   457a8:	202b883a 	mov	r21,r4
   457ac:	282d883a 	mov	r22,r5
   457b0:	0044c380 	call	44c38 <__sfp_lock_acquire>
   457b4:	98002126 	beq	r19,zero,4583c <_fwalk_reent+0xc0>
   457b8:	002f883a 	mov	r23,zero
   457bc:	9c800117 	ldw	r18,4(r19)
   457c0:	9c000217 	ldw	r16,8(r19)
   457c4:	90bfffc4 	addi	r2,r18,-1
   457c8:	10000d16 	blt	r2,zero,45800 <_fwalk_reent+0x84>
   457cc:	0023883a 	mov	r17,zero
   457d0:	053fffc4 	movi	r20,-1
   457d4:	8080030f 	ldh	r2,12(r16)
   457d8:	8c400044 	addi	r17,r17,1
   457dc:	10000626 	beq	r2,zero,457f8 <_fwalk_reent+0x7c>
   457e0:	8080038f 	ldh	r2,14(r16)
   457e4:	800b883a 	mov	r5,r16
   457e8:	a809883a 	mov	r4,r21
   457ec:	15000226 	beq	r2,r20,457f8 <_fwalk_reent+0x7c>
   457f0:	b03ee83a 	callr	r22
   457f4:	b8aeb03a 	or	r23,r23,r2
   457f8:	84001704 	addi	r16,r16,92
   457fc:	947ff51e 	bne	r18,r17,457d4 <_fwalk_reent+0x58>
   45800:	9cc00017 	ldw	r19,0(r19)
   45804:	983fed1e 	bne	r19,zero,457bc <_fwalk_reent+0x40>
   45808:	0044c3c0 	call	44c3c <__sfp_lock_release>
   4580c:	b805883a 	mov	r2,r23
   45810:	dfc00817 	ldw	ra,32(sp)
   45814:	ddc00717 	ldw	r23,28(sp)
   45818:	dd800617 	ldw	r22,24(sp)
   4581c:	dd400517 	ldw	r21,20(sp)
   45820:	dd000417 	ldw	r20,16(sp)
   45824:	dcc00317 	ldw	r19,12(sp)
   45828:	dc800217 	ldw	r18,8(sp)
   4582c:	dc400117 	ldw	r17,4(sp)
   45830:	dc000017 	ldw	r16,0(sp)
   45834:	dec00904 	addi	sp,sp,36
   45838:	f800283a 	ret
   4583c:	002f883a 	mov	r23,zero
   45840:	003ff106 	br	45808 <_fwalk_reent+0x8c>

00045844 <_fwalk>:
   45844:	defff804 	addi	sp,sp,-32
   45848:	dcc00315 	stw	r19,12(sp)
   4584c:	24c0b804 	addi	r19,r4,736
   45850:	dd400515 	stw	r21,20(sp)
   45854:	dfc00715 	stw	ra,28(sp)
   45858:	dd800615 	stw	r22,24(sp)
   4585c:	dd000415 	stw	r20,16(sp)
   45860:	dc800215 	stw	r18,8(sp)
   45864:	dc400115 	stw	r17,4(sp)
   45868:	dc000015 	stw	r16,0(sp)
   4586c:	282b883a 	mov	r21,r5
   45870:	0044c380 	call	44c38 <__sfp_lock_acquire>
   45874:	98001f26 	beq	r19,zero,458f4 <_fwalk+0xb0>
   45878:	002d883a 	mov	r22,zero
   4587c:	9c800117 	ldw	r18,4(r19)
   45880:	9c000217 	ldw	r16,8(r19)
   45884:	90bfffc4 	addi	r2,r18,-1
   45888:	10000c16 	blt	r2,zero,458bc <_fwalk+0x78>
   4588c:	0023883a 	mov	r17,zero
   45890:	053fffc4 	movi	r20,-1
   45894:	8080030f 	ldh	r2,12(r16)
   45898:	8c400044 	addi	r17,r17,1
   4589c:	10000526 	beq	r2,zero,458b4 <_fwalk+0x70>
   458a0:	8080038f 	ldh	r2,14(r16)
   458a4:	8009883a 	mov	r4,r16
   458a8:	15000226 	beq	r2,r20,458b4 <_fwalk+0x70>
   458ac:	a83ee83a 	callr	r21
   458b0:	b0acb03a 	or	r22,r22,r2
   458b4:	84001704 	addi	r16,r16,92
   458b8:	947ff61e 	bne	r18,r17,45894 <_fwalk+0x50>
   458bc:	9cc00017 	ldw	r19,0(r19)
   458c0:	983fee1e 	bne	r19,zero,4587c <_fwalk+0x38>
   458c4:	0044c3c0 	call	44c3c <__sfp_lock_release>
   458c8:	b005883a 	mov	r2,r22
   458cc:	dfc00717 	ldw	ra,28(sp)
   458d0:	dd800617 	ldw	r22,24(sp)
   458d4:	dd400517 	ldw	r21,20(sp)
   458d8:	dd000417 	ldw	r20,16(sp)
   458dc:	dcc00317 	ldw	r19,12(sp)
   458e0:	dc800217 	ldw	r18,8(sp)
   458e4:	dc400117 	ldw	r17,4(sp)
   458e8:	dc000017 	ldw	r16,0(sp)
   458ec:	dec00804 	addi	sp,sp,32
   458f0:	f800283a 	ret
   458f4:	002d883a 	mov	r22,zero
   458f8:	003ff206 	br	458c4 <_fwalk+0x80>

000458fc <__locale_charset>:
   458fc:	d0a00317 	ldw	r2,-32756(gp)
   45900:	f800283a 	ret

00045904 <_localeconv_r>:
   45904:	00800174 	movhi	r2,5
   45908:	10b5b104 	addi	r2,r2,-10556
   4590c:	f800283a 	ret

00045910 <localeconv>:
   45910:	00800174 	movhi	r2,5
   45914:	10bcdd04 	addi	r2,r2,-3212
   45918:	11000017 	ldw	r4,0(r2)
   4591c:	00459041 	jmpi	45904 <_localeconv_r>

00045920 <_setlocale_r>:
   45920:	defffc04 	addi	sp,sp,-16
   45924:	00c00174 	movhi	r3,5
   45928:	18f58704 	addi	r3,r3,-10724
   4592c:	dc800215 	stw	r18,8(sp)
   45930:	dc400115 	stw	r17,4(sp)
   45934:	dc000015 	stw	r16,0(sp)
   45938:	2023883a 	mov	r17,r4
   4593c:	2825883a 	mov	r18,r5
   45940:	dfc00315 	stw	ra,12(sp)
   45944:	3021883a 	mov	r16,r6
   45948:	3009883a 	mov	r4,r6
   4594c:	180b883a 	mov	r5,r3
   45950:	30000926 	beq	r6,zero,45978 <_setlocale_r+0x58>
   45954:	0047da40 	call	47da4 <strcmp>
   45958:	8009883a 	mov	r4,r16
   4595c:	01400174 	movhi	r5,5
   45960:	29759804 	addi	r5,r5,-10656
   45964:	10000b1e 	bne	r2,zero,45994 <_setlocale_r+0x74>
   45968:	8c000d15 	stw	r16,52(r17)
   4596c:	8c800c15 	stw	r18,48(r17)
   45970:	00c00174 	movhi	r3,5
   45974:	18f58704 	addi	r3,r3,-10724
   45978:	1805883a 	mov	r2,r3
   4597c:	dfc00317 	ldw	ra,12(sp)
   45980:	dc800217 	ldw	r18,8(sp)
   45984:	dc400117 	ldw	r17,4(sp)
   45988:	dc000017 	ldw	r16,0(sp)
   4598c:	dec00404 	addi	sp,sp,16
   45990:	f800283a 	ret
   45994:	0047da40 	call	47da4 <strcmp>
   45998:	0007883a 	mov	r3,zero
   4599c:	103ff226 	beq	r2,zero,45968 <_setlocale_r+0x48>
   459a0:	003ff506 	br	45978 <_setlocale_r+0x58>

000459a4 <setlocale>:
   459a4:	01800174 	movhi	r6,5
   459a8:	31bcdd04 	addi	r6,r6,-3212
   459ac:	2007883a 	mov	r3,r4
   459b0:	31000017 	ldw	r4,0(r6)
   459b4:	280d883a 	mov	r6,r5
   459b8:	180b883a 	mov	r5,r3
   459bc:	00459201 	jmpi	45920 <_setlocale_r>

000459c0 <__smakebuf_r>:
   459c0:	2880030b 	ldhu	r2,12(r5)
   459c4:	deffed04 	addi	sp,sp,-76
   459c8:	dc401015 	stw	r17,64(sp)
   459cc:	1080008c 	andi	r2,r2,2
   459d0:	dc000f15 	stw	r16,60(sp)
   459d4:	dfc01215 	stw	ra,72(sp)
   459d8:	dc801115 	stw	r18,68(sp)
   459dc:	2821883a 	mov	r16,r5
   459e0:	2023883a 	mov	r17,r4
   459e4:	10000b26 	beq	r2,zero,45a14 <__smakebuf_r+0x54>
   459e8:	28c010c4 	addi	r3,r5,67
   459ec:	00800044 	movi	r2,1
   459f0:	28800515 	stw	r2,20(r5)
   459f4:	28c00415 	stw	r3,16(r5)
   459f8:	28c00015 	stw	r3,0(r5)
   459fc:	dfc01217 	ldw	ra,72(sp)
   45a00:	dc801117 	ldw	r18,68(sp)
   45a04:	dc401017 	ldw	r17,64(sp)
   45a08:	dc000f17 	ldw	r16,60(sp)
   45a0c:	dec01304 	addi	sp,sp,76
   45a10:	f800283a 	ret
   45a14:	2940038f 	ldh	r5,14(r5)
   45a18:	28002116 	blt	r5,zero,45aa0 <__smakebuf_r+0xe0>
   45a1c:	d80d883a 	mov	r6,sp
   45a20:	00481200 	call	48120 <_fstat_r>
   45a24:	10001e16 	blt	r2,zero,45aa0 <__smakebuf_r+0xe0>
   45a28:	d8800117 	ldw	r2,4(sp)
   45a2c:	00e00014 	movui	r3,32768
   45a30:	113c000c 	andi	r4,r2,61440
   45a34:	20c03126 	beq	r4,r3,45afc <__smakebuf_r+0x13c>
   45a38:	8080030b 	ldhu	r2,12(r16)
   45a3c:	00c80004 	movi	r3,8192
   45a40:	10820014 	ori	r2,r2,2048
   45a44:	8080030d 	sth	r2,12(r16)
   45a48:	20c01e26 	beq	r4,r3,45ac4 <__smakebuf_r+0x104>
   45a4c:	04810004 	movi	r18,1024
   45a50:	8809883a 	mov	r4,r17
   45a54:	900b883a 	mov	r5,r18
   45a58:	0045b540 	call	45b54 <_malloc_r>
   45a5c:	1009883a 	mov	r4,r2
   45a60:	10003126 	beq	r2,zero,45b28 <__smakebuf_r+0x168>
   45a64:	80c0030b 	ldhu	r3,12(r16)
   45a68:	00800134 	movhi	r2,4
   45a6c:	10934b04 	addi	r2,r2,19756
   45a70:	88800f15 	stw	r2,60(r17)
   45a74:	18c02014 	ori	r3,r3,128
   45a78:	84800515 	stw	r18,20(r16)
   45a7c:	80c0030d 	sth	r3,12(r16)
   45a80:	81000415 	stw	r4,16(r16)
   45a84:	81000015 	stw	r4,0(r16)
   45a88:	dfc01217 	ldw	ra,72(sp)
   45a8c:	dc801117 	ldw	r18,68(sp)
   45a90:	dc401017 	ldw	r17,64(sp)
   45a94:	dc000f17 	ldw	r16,60(sp)
   45a98:	dec01304 	addi	sp,sp,76
   45a9c:	f800283a 	ret
   45aa0:	80c0030b 	ldhu	r3,12(r16)
   45aa4:	1880200c 	andi	r2,r3,128
   45aa8:	10000426 	beq	r2,zero,45abc <__smakebuf_r+0xfc>
   45aac:	04801004 	movi	r18,64
   45ab0:	18820014 	ori	r2,r3,2048
   45ab4:	8080030d 	sth	r2,12(r16)
   45ab8:	003fe506 	br	45a50 <__smakebuf_r+0x90>
   45abc:	04810004 	movi	r18,1024
   45ac0:	003ffb06 	br	45ab0 <__smakebuf_r+0xf0>
   45ac4:	8140038f 	ldh	r5,14(r16)
   45ac8:	8809883a 	mov	r4,r17
   45acc:	00481940 	call	48194 <_isatty_r>
   45ad0:	103fde26 	beq	r2,zero,45a4c <__smakebuf_r+0x8c>
   45ad4:	8080030b 	ldhu	r2,12(r16)
   45ad8:	80c010c4 	addi	r3,r16,67
   45adc:	04810004 	movi	r18,1024
   45ae0:	10800054 	ori	r2,r2,1
   45ae4:	8080030d 	sth	r2,12(r16)
   45ae8:	00800044 	movi	r2,1
   45aec:	80c00415 	stw	r3,16(r16)
   45af0:	80800515 	stw	r2,20(r16)
   45af4:	80c00015 	stw	r3,0(r16)
   45af8:	003fd506 	br	45a50 <__smakebuf_r+0x90>
   45afc:	80c00a17 	ldw	r3,40(r16)
   45b00:	00800134 	movhi	r2,4
   45b04:	109f1804 	addi	r2,r2,31840
   45b08:	18bfcb1e 	bne	r3,r2,45a38 <__smakebuf_r+0x78>
   45b0c:	8080030b 	ldhu	r2,12(r16)
   45b10:	00c10004 	movi	r3,1024
   45b14:	1825883a 	mov	r18,r3
   45b18:	10c4b03a 	or	r2,r2,r3
   45b1c:	8080030d 	sth	r2,12(r16)
   45b20:	80c01315 	stw	r3,76(r16)
   45b24:	003fca06 	br	45a50 <__smakebuf_r+0x90>
   45b28:	8100030b 	ldhu	r4,12(r16)
   45b2c:	2080800c 	andi	r2,r4,512
   45b30:	103fb21e 	bne	r2,zero,459fc <__smakebuf_r+0x3c>
   45b34:	80c010c4 	addi	r3,r16,67
   45b38:	21000094 	ori	r4,r4,2
   45b3c:	00800044 	movi	r2,1
   45b40:	80800515 	stw	r2,20(r16)
   45b44:	8100030d 	sth	r4,12(r16)
   45b48:	80c00415 	stw	r3,16(r16)
   45b4c:	80c00015 	stw	r3,0(r16)
   45b50:	003faa06 	br	459fc <__smakebuf_r+0x3c>

00045b54 <_malloc_r>:
   45b54:	defff604 	addi	sp,sp,-40
   45b58:	28c002c4 	addi	r3,r5,11
   45b5c:	00800584 	movi	r2,22
   45b60:	dc800215 	stw	r18,8(sp)
   45b64:	dfc00915 	stw	ra,36(sp)
   45b68:	df000815 	stw	fp,32(sp)
   45b6c:	ddc00715 	stw	r23,28(sp)
   45b70:	dd800615 	stw	r22,24(sp)
   45b74:	dd400515 	stw	r21,20(sp)
   45b78:	dd000415 	stw	r20,16(sp)
   45b7c:	dcc00315 	stw	r19,12(sp)
   45b80:	dc400115 	stw	r17,4(sp)
   45b84:	dc000015 	stw	r16,0(sp)
   45b88:	2025883a 	mov	r18,r4
   45b8c:	10c01236 	bltu	r2,r3,45bd8 <_malloc_r+0x84>
   45b90:	04400404 	movi	r17,16
   45b94:	8940142e 	bgeu	r17,r5,45be8 <_malloc_r+0x94>
   45b98:	00800304 	movi	r2,12
   45b9c:	0007883a 	mov	r3,zero
   45ba0:	90800015 	stw	r2,0(r18)
   45ba4:	1805883a 	mov	r2,r3
   45ba8:	dfc00917 	ldw	ra,36(sp)
   45bac:	df000817 	ldw	fp,32(sp)
   45bb0:	ddc00717 	ldw	r23,28(sp)
   45bb4:	dd800617 	ldw	r22,24(sp)
   45bb8:	dd400517 	ldw	r21,20(sp)
   45bbc:	dd000417 	ldw	r20,16(sp)
   45bc0:	dcc00317 	ldw	r19,12(sp)
   45bc4:	dc800217 	ldw	r18,8(sp)
   45bc8:	dc400117 	ldw	r17,4(sp)
   45bcc:	dc000017 	ldw	r16,0(sp)
   45bd0:	dec00a04 	addi	sp,sp,40
   45bd4:	f800283a 	ret
   45bd8:	00bffe04 	movi	r2,-8
   45bdc:	18a2703a 	and	r17,r3,r2
   45be0:	883fed16 	blt	r17,zero,45b98 <_malloc_r+0x44>
   45be4:	897fec36 	bltu	r17,r5,45b98 <_malloc_r+0x44>
   45be8:	9009883a 	mov	r4,r18
   45bec:	004acbc0 	call	4acbc <__malloc_lock>
   45bf0:	00807dc4 	movi	r2,503
   45bf4:	14402b2e 	bgeu	r2,r17,45ca4 <_malloc_r+0x150>
   45bf8:	8806d27a 	srli	r3,r17,9
   45bfc:	18003f1e 	bne	r3,zero,45cfc <_malloc_r+0x1a8>
   45c00:	880cd0fa 	srli	r6,r17,3
   45c04:	300490fa 	slli	r2,r6,3
   45c08:	02c00174 	movhi	r11,5
   45c0c:	5af75904 	addi	r11,r11,-8860
   45c10:	12cb883a 	add	r5,r2,r11
   45c14:	2c000317 	ldw	r16,12(r5)
   45c18:	580f883a 	mov	r7,r11
   45c1c:	2c00041e 	bne	r5,r16,45c30 <_malloc_r+0xdc>
   45c20:	00000a06 	br	45c4c <_malloc_r+0xf8>
   45c24:	1800860e 	bge	r3,zero,45e40 <_malloc_r+0x2ec>
   45c28:	84000317 	ldw	r16,12(r16)
   45c2c:	2c000726 	beq	r5,r16,45c4c <_malloc_r+0xf8>
   45c30:	80800117 	ldw	r2,4(r16)
   45c34:	00ffff04 	movi	r3,-4
   45c38:	10c8703a 	and	r4,r2,r3
   45c3c:	2447c83a 	sub	r3,r4,r17
   45c40:	008003c4 	movi	r2,15
   45c44:	10fff70e 	bge	r2,r3,45c24 <_malloc_r+0xd0>
   45c48:	31bfffc4 	addi	r6,r6,-1
   45c4c:	32400044 	addi	r9,r6,1
   45c50:	02800174 	movhi	r10,5
   45c54:	52b75b04 	addi	r10,r10,-8852
   45c58:	54000217 	ldw	r16,8(r10)
   45c5c:	8280a026 	beq	r16,r10,45ee0 <_malloc_r+0x38c>
   45c60:	80800117 	ldw	r2,4(r16)
   45c64:	00ffff04 	movi	r3,-4
   45c68:	10ca703a 	and	r5,r2,r3
   45c6c:	2c4dc83a 	sub	r6,r5,r17
   45c70:	008003c4 	movi	r2,15
   45c74:	11808316 	blt	r2,r6,45e84 <_malloc_r+0x330>
   45c78:	52800315 	stw	r10,12(r10)
   45c7c:	52800215 	stw	r10,8(r10)
   45c80:	30002916 	blt	r6,zero,45d28 <_malloc_r+0x1d4>
   45c84:	8147883a 	add	r3,r16,r5
   45c88:	18800117 	ldw	r2,4(r3)
   45c8c:	9009883a 	mov	r4,r18
   45c90:	10800054 	ori	r2,r2,1
   45c94:	18800115 	stw	r2,4(r3)
   45c98:	004acdc0 	call	4acdc <__malloc_unlock>
   45c9c:	80c00204 	addi	r3,r16,8
   45ca0:	003fc006 	br	45ba4 <_malloc_r+0x50>
   45ca4:	02c00174 	movhi	r11,5
   45ca8:	5af75904 	addi	r11,r11,-8860
   45cac:	8ac5883a 	add	r2,r17,r11
   45cb0:	14000317 	ldw	r16,12(r2)
   45cb4:	580f883a 	mov	r7,r11
   45cb8:	8806d0fa 	srli	r3,r17,3
   45cbc:	14006c26 	beq	r2,r16,45e70 <_malloc_r+0x31c>
   45cc0:	80c00117 	ldw	r3,4(r16)
   45cc4:	00bfff04 	movi	r2,-4
   45cc8:	81800317 	ldw	r6,12(r16)
   45ccc:	1886703a 	and	r3,r3,r2
   45cd0:	80c7883a 	add	r3,r16,r3
   45cd4:	18800117 	ldw	r2,4(r3)
   45cd8:	81400217 	ldw	r5,8(r16)
   45cdc:	9009883a 	mov	r4,r18
   45ce0:	10800054 	ori	r2,r2,1
   45ce4:	18800115 	stw	r2,4(r3)
   45ce8:	31400215 	stw	r5,8(r6)
   45cec:	29800315 	stw	r6,12(r5)
   45cf0:	004acdc0 	call	4acdc <__malloc_unlock>
   45cf4:	80c00204 	addi	r3,r16,8
   45cf8:	003faa06 	br	45ba4 <_malloc_r+0x50>
   45cfc:	00800104 	movi	r2,4
   45d00:	10c0052e 	bgeu	r2,r3,45d18 <_malloc_r+0x1c4>
   45d04:	00800504 	movi	r2,20
   45d08:	10c07836 	bltu	r2,r3,45eec <_malloc_r+0x398>
   45d0c:	198016c4 	addi	r6,r3,91
   45d10:	300490fa 	slli	r2,r6,3
   45d14:	003fbc06 	br	45c08 <_malloc_r+0xb4>
   45d18:	8804d1ba 	srli	r2,r17,6
   45d1c:	11800e04 	addi	r6,r2,56
   45d20:	300490fa 	slli	r2,r6,3
   45d24:	003fb806 	br	45c08 <_malloc_r+0xb4>
   45d28:	00807fc4 	movi	r2,511
   45d2c:	1140bb36 	bltu	r2,r5,4601c <_malloc_r+0x4c8>
   45d30:	2806d0fa 	srli	r3,r5,3
   45d34:	573ffe04 	addi	fp,r10,-8
   45d38:	00800044 	movi	r2,1
   45d3c:	180890fa 	slli	r4,r3,3
   45d40:	1807d0ba 	srai	r3,r3,2
   45d44:	e1c00117 	ldw	r7,4(fp)
   45d48:	5909883a 	add	r4,r11,r4
   45d4c:	21400217 	ldw	r5,8(r4)
   45d50:	10c4983a 	sll	r2,r2,r3
   45d54:	81000315 	stw	r4,12(r16)
   45d58:	81400215 	stw	r5,8(r16)
   45d5c:	388eb03a 	or	r7,r7,r2
   45d60:	2c000315 	stw	r16,12(r5)
   45d64:	24000215 	stw	r16,8(r4)
   45d68:	e1c00115 	stw	r7,4(fp)
   45d6c:	4807883a 	mov	r3,r9
   45d70:	4800cd16 	blt	r9,zero,460a8 <_malloc_r+0x554>
   45d74:	1807d0ba 	srai	r3,r3,2
   45d78:	00800044 	movi	r2,1
   45d7c:	10c8983a 	sll	r4,r2,r3
   45d80:	39004436 	bltu	r7,r4,45e94 <_malloc_r+0x340>
   45d84:	21c4703a 	and	r2,r4,r7
   45d88:	10000a1e 	bne	r2,zero,45db4 <_malloc_r+0x260>
   45d8c:	2109883a 	add	r4,r4,r4
   45d90:	00bfff04 	movi	r2,-4
   45d94:	4884703a 	and	r2,r9,r2
   45d98:	3906703a 	and	r3,r7,r4
   45d9c:	12400104 	addi	r9,r2,4
   45da0:	1800041e 	bne	r3,zero,45db4 <_malloc_r+0x260>
   45da4:	2109883a 	add	r4,r4,r4
   45da8:	3904703a 	and	r2,r7,r4
   45dac:	4a400104 	addi	r9,r9,4
   45db0:	103ffc26 	beq	r2,zero,45da4 <_malloc_r+0x250>
   45db4:	480490fa 	slli	r2,r9,3
   45db8:	4819883a 	mov	r12,r9
   45dbc:	023fff04 	movi	r8,-4
   45dc0:	589b883a 	add	r13,r11,r2
   45dc4:	6807883a 	mov	r3,r13
   45dc8:	014003c4 	movi	r5,15
   45dcc:	1c000317 	ldw	r16,12(r3)
   45dd0:	1c00041e 	bne	r3,r16,45de4 <_malloc_r+0x290>
   45dd4:	0000a706 	br	46074 <_malloc_r+0x520>
   45dd8:	3000ab0e 	bge	r6,zero,46088 <_malloc_r+0x534>
   45ddc:	84000317 	ldw	r16,12(r16)
   45de0:	1c00a426 	beq	r3,r16,46074 <_malloc_r+0x520>
   45de4:	80800117 	ldw	r2,4(r16)
   45de8:	1204703a 	and	r2,r2,r8
   45dec:	144dc83a 	sub	r6,r2,r17
   45df0:	29bff90e 	bge	r5,r6,45dd8 <_malloc_r+0x284>
   45df4:	81000317 	ldw	r4,12(r16)
   45df8:	80c00217 	ldw	r3,8(r16)
   45dfc:	89400054 	ori	r5,r17,1
   45e00:	8445883a 	add	r2,r16,r17
   45e04:	20c00215 	stw	r3,8(r4)
   45e08:	19000315 	stw	r4,12(r3)
   45e0c:	81400115 	stw	r5,4(r16)
   45e10:	1187883a 	add	r3,r2,r6
   45e14:	31000054 	ori	r4,r6,1
   45e18:	50800315 	stw	r2,12(r10)
   45e1c:	50800215 	stw	r2,8(r10)
   45e20:	19800015 	stw	r6,0(r3)
   45e24:	11000115 	stw	r4,4(r2)
   45e28:	12800215 	stw	r10,8(r2)
   45e2c:	12800315 	stw	r10,12(r2)
   45e30:	9009883a 	mov	r4,r18
   45e34:	004acdc0 	call	4acdc <__malloc_unlock>
   45e38:	80c00204 	addi	r3,r16,8
   45e3c:	003f5906 	br	45ba4 <_malloc_r+0x50>
   45e40:	8109883a 	add	r4,r16,r4
   45e44:	20800117 	ldw	r2,4(r4)
   45e48:	80c00217 	ldw	r3,8(r16)
   45e4c:	81400317 	ldw	r5,12(r16)
   45e50:	10800054 	ori	r2,r2,1
   45e54:	20800115 	stw	r2,4(r4)
   45e58:	28c00215 	stw	r3,8(r5)
   45e5c:	19400315 	stw	r5,12(r3)
   45e60:	9009883a 	mov	r4,r18
   45e64:	004acdc0 	call	4acdc <__malloc_unlock>
   45e68:	80c00204 	addi	r3,r16,8
   45e6c:	003f4d06 	br	45ba4 <_malloc_r+0x50>
   45e70:	80800204 	addi	r2,r16,8
   45e74:	14000317 	ldw	r16,12(r2)
   45e78:	143f911e 	bne	r2,r16,45cc0 <_malloc_r+0x16c>
   45e7c:	1a400084 	addi	r9,r3,2
   45e80:	003f7306 	br	45c50 <_malloc_r+0xfc>
   45e84:	88c00054 	ori	r3,r17,1
   45e88:	8445883a 	add	r2,r16,r17
   45e8c:	80c00115 	stw	r3,4(r16)
   45e90:	003fdf06 	br	45e10 <_malloc_r+0x2bc>
   45e94:	e4000217 	ldw	r16,8(fp)
   45e98:	00bfff04 	movi	r2,-4
   45e9c:	80c00117 	ldw	r3,4(r16)
   45ea0:	802d883a 	mov	r22,r16
   45ea4:	18aa703a 	and	r21,r3,r2
   45ea8:	ac401636 	bltu	r21,r17,45f04 <_malloc_r+0x3b0>
   45eac:	ac49c83a 	sub	r4,r21,r17
   45eb0:	008003c4 	movi	r2,15
   45eb4:	1100130e 	bge	r2,r4,45f04 <_malloc_r+0x3b0>
   45eb8:	88800054 	ori	r2,r17,1
   45ebc:	8447883a 	add	r3,r16,r17
   45ec0:	80800115 	stw	r2,4(r16)
   45ec4:	20800054 	ori	r2,r4,1
   45ec8:	18800115 	stw	r2,4(r3)
   45ecc:	e0c00215 	stw	r3,8(fp)
   45ed0:	9009883a 	mov	r4,r18
   45ed4:	004acdc0 	call	4acdc <__malloc_unlock>
   45ed8:	80c00204 	addi	r3,r16,8
   45edc:	003f3106 	br	45ba4 <_malloc_r+0x50>
   45ee0:	39c00117 	ldw	r7,4(r7)
   45ee4:	573ffe04 	addi	fp,r10,-8
   45ee8:	003fa006 	br	45d6c <_malloc_r+0x218>
   45eec:	00801504 	movi	r2,84
   45ef0:	10c06736 	bltu	r2,r3,46090 <_malloc_r+0x53c>
   45ef4:	8804d33a 	srli	r2,r17,12
   45ef8:	11801b84 	addi	r6,r2,110
   45efc:	300490fa 	slli	r2,r6,3
   45f00:	003f4106 	br	45c08 <_malloc_r+0xb4>
   45f04:	d0a6aa17 	ldw	r2,-25944(gp)
   45f08:	d0e00517 	ldw	r3,-32748(gp)
   45f0c:	053fffc4 	movi	r20,-1
   45f10:	10800404 	addi	r2,r2,16
   45f14:	88a7883a 	add	r19,r17,r2
   45f18:	1d000326 	beq	r3,r20,45f28 <_malloc_r+0x3d4>
   45f1c:	98c3ffc4 	addi	r3,r19,4095
   45f20:	00bc0004 	movi	r2,-4096
   45f24:	18a6703a 	and	r19,r3,r2
   45f28:	9009883a 	mov	r4,r18
   45f2c:	980b883a 	mov	r5,r19
   45f30:	0047be80 	call	47be8 <_sbrk_r>
   45f34:	1009883a 	mov	r4,r2
   45f38:	15000426 	beq	r2,r20,45f4c <_malloc_r+0x3f8>
   45f3c:	854b883a 	add	r5,r16,r21
   45f40:	1029883a 	mov	r20,r2
   45f44:	11405a2e 	bgeu	r2,r5,460b0 <_malloc_r+0x55c>
   45f48:	87000c26 	beq	r16,fp,45f7c <_malloc_r+0x428>
   45f4c:	e4000217 	ldw	r16,8(fp)
   45f50:	80c00117 	ldw	r3,4(r16)
   45f54:	00bfff04 	movi	r2,-4
   45f58:	1884703a 	and	r2,r3,r2
   45f5c:	14400336 	bltu	r2,r17,45f6c <_malloc_r+0x418>
   45f60:	1449c83a 	sub	r4,r2,r17
   45f64:	008003c4 	movi	r2,15
   45f68:	113fd316 	blt	r2,r4,45eb8 <_malloc_r+0x364>
   45f6c:	9009883a 	mov	r4,r18
   45f70:	004acdc0 	call	4acdc <__malloc_unlock>
   45f74:	0007883a 	mov	r3,zero
   45f78:	003f0a06 	br	45ba4 <_malloc_r+0x50>
   45f7c:	05c00174 	movhi	r23,5
   45f80:	bdc39304 	addi	r23,r23,3660
   45f84:	b8800017 	ldw	r2,0(r23)
   45f88:	988d883a 	add	r6,r19,r2
   45f8c:	b9800015 	stw	r6,0(r23)
   45f90:	d0e00517 	ldw	r3,-32748(gp)
   45f94:	00bfffc4 	movi	r2,-1
   45f98:	18808e26 	beq	r3,r2,461d4 <_malloc_r+0x680>
   45f9c:	2145c83a 	sub	r2,r4,r5
   45fa0:	3085883a 	add	r2,r6,r2
   45fa4:	b8800015 	stw	r2,0(r23)
   45fa8:	20c001cc 	andi	r3,r4,7
   45fac:	18005f1e 	bne	r3,zero,4612c <_malloc_r+0x5d8>
   45fb0:	000b883a 	mov	r5,zero
   45fb4:	a4c5883a 	add	r2,r20,r19
   45fb8:	1083ffcc 	andi	r2,r2,4095
   45fbc:	00c40004 	movi	r3,4096
   45fc0:	1887c83a 	sub	r3,r3,r2
   45fc4:	28e7883a 	add	r19,r5,r3
   45fc8:	9009883a 	mov	r4,r18
   45fcc:	980b883a 	mov	r5,r19
   45fd0:	0047be80 	call	47be8 <_sbrk_r>
   45fd4:	1007883a 	mov	r3,r2
   45fd8:	00bfffc4 	movi	r2,-1
   45fdc:	18807a26 	beq	r3,r2,461c8 <_malloc_r+0x674>
   45fe0:	1d05c83a 	sub	r2,r3,r20
   45fe4:	9885883a 	add	r2,r19,r2
   45fe8:	10c00054 	ori	r3,r2,1
   45fec:	b8800017 	ldw	r2,0(r23)
   45ff0:	a021883a 	mov	r16,r20
   45ff4:	a0c00115 	stw	r3,4(r20)
   45ff8:	9885883a 	add	r2,r19,r2
   45ffc:	b8800015 	stw	r2,0(r23)
   46000:	e5000215 	stw	r20,8(fp)
   46004:	b7003626 	beq	r22,fp,460e0 <_malloc_r+0x58c>
   46008:	018003c4 	movi	r6,15
   4600c:	35404b36 	bltu	r6,r21,4613c <_malloc_r+0x5e8>
   46010:	00800044 	movi	r2,1
   46014:	a0800115 	stw	r2,4(r20)
   46018:	003fcd06 	br	45f50 <_malloc_r+0x3fc>
   4601c:	2808d27a 	srli	r4,r5,9
   46020:	2000371e 	bne	r4,zero,46100 <_malloc_r+0x5ac>
   46024:	2808d0fa 	srli	r4,r5,3
   46028:	200690fa 	slli	r3,r4,3
   4602c:	1ad1883a 	add	r8,r3,r11
   46030:	41800217 	ldw	r6,8(r8)
   46034:	41805b26 	beq	r8,r6,461a4 <_malloc_r+0x650>
   46038:	30800117 	ldw	r2,4(r6)
   4603c:	00ffff04 	movi	r3,-4
   46040:	10c4703a 	and	r2,r2,r3
   46044:	2880022e 	bgeu	r5,r2,46050 <_malloc_r+0x4fc>
   46048:	31800217 	ldw	r6,8(r6)
   4604c:	41bffa1e 	bne	r8,r6,46038 <_malloc_r+0x4e4>
   46050:	32000317 	ldw	r8,12(r6)
   46054:	39c00117 	ldw	r7,4(r7)
   46058:	82000315 	stw	r8,12(r16)
   4605c:	81800215 	stw	r6,8(r16)
   46060:	07000174 	movhi	fp,5
   46064:	e7375904 	addi	fp,fp,-8860
   46068:	34000315 	stw	r16,12(r6)
   4606c:	44000215 	stw	r16,8(r8)
   46070:	003f3e06 	br	45d6c <_malloc_r+0x218>
   46074:	63000044 	addi	r12,r12,1
   46078:	608000cc 	andi	r2,r12,3
   4607c:	10005d26 	beq	r2,zero,461f4 <_malloc_r+0x6a0>
   46080:	18c00204 	addi	r3,r3,8
   46084:	003f5106 	br	45dcc <_malloc_r+0x278>
   46088:	8089883a 	add	r4,r16,r2
   4608c:	003f6d06 	br	45e44 <_malloc_r+0x2f0>
   46090:	00805504 	movi	r2,340
   46094:	10c02036 	bltu	r2,r3,46118 <_malloc_r+0x5c4>
   46098:	8804d3fa 	srli	r2,r17,15
   4609c:	11801dc4 	addi	r6,r2,119
   460a0:	300490fa 	slli	r2,r6,3
   460a4:	003ed806 	br	45c08 <_malloc_r+0xb4>
   460a8:	48c000c4 	addi	r3,r9,3
   460ac:	003f3106 	br	45d74 <_malloc_r+0x220>
   460b0:	05c00174 	movhi	r23,5
   460b4:	bdc39304 	addi	r23,r23,3660
   460b8:	b8800017 	ldw	r2,0(r23)
   460bc:	988d883a 	add	r6,r19,r2
   460c0:	b9800015 	stw	r6,0(r23)
   460c4:	293fb21e 	bne	r5,r4,45f90 <_malloc_r+0x43c>
   460c8:	2083ffcc 	andi	r2,r4,4095
   460cc:	103fb01e 	bne	r2,zero,45f90 <_malloc_r+0x43c>
   460d0:	e4000217 	ldw	r16,8(fp)
   460d4:	9d45883a 	add	r2,r19,r21
   460d8:	10800054 	ori	r2,r2,1
   460dc:	80800115 	stw	r2,4(r16)
   460e0:	b8c00017 	ldw	r3,0(r23)
   460e4:	d0a6ab17 	ldw	r2,-25940(gp)
   460e8:	10c0012e 	bgeu	r2,r3,460f0 <_malloc_r+0x59c>
   460ec:	d0e6ab15 	stw	r3,-25940(gp)
   460f0:	d0a6ac17 	ldw	r2,-25936(gp)
   460f4:	10ff962e 	bgeu	r2,r3,45f50 <_malloc_r+0x3fc>
   460f8:	d0e6ac15 	stw	r3,-25936(gp)
   460fc:	003f9406 	br	45f50 <_malloc_r+0x3fc>
   46100:	00800104 	movi	r2,4
   46104:	11001e36 	bltu	r2,r4,46180 <_malloc_r+0x62c>
   46108:	2804d1ba 	srli	r2,r5,6
   4610c:	11000e04 	addi	r4,r2,56
   46110:	200690fa 	slli	r3,r4,3
   46114:	003fc506 	br	4602c <_malloc_r+0x4d8>
   46118:	00815504 	movi	r2,1364
   4611c:	10c01d2e 	bgeu	r2,r3,46194 <_malloc_r+0x640>
   46120:	01801f84 	movi	r6,126
   46124:	0080fc04 	movi	r2,1008
   46128:	003eb706 	br	45c08 <_malloc_r+0xb4>
   4612c:	00800204 	movi	r2,8
   46130:	10cbc83a 	sub	r5,r2,r3
   46134:	2169883a 	add	r20,r4,r5
   46138:	003f9e06 	br	45fb4 <_malloc_r+0x460>
   4613c:	00bffe04 	movi	r2,-8
   46140:	a93ffd04 	addi	r4,r21,-12
   46144:	2088703a 	and	r4,r4,r2
   46148:	b10b883a 	add	r5,r22,r4
   4614c:	00c00144 	movi	r3,5
   46150:	28c00215 	stw	r3,8(r5)
   46154:	28c00115 	stw	r3,4(r5)
   46158:	b0800117 	ldw	r2,4(r22)
   4615c:	1080004c 	andi	r2,r2,1
   46160:	2084b03a 	or	r2,r4,r2
   46164:	b0800115 	stw	r2,4(r22)
   46168:	313fdd2e 	bgeu	r6,r4,460e0 <_malloc_r+0x58c>
   4616c:	b1400204 	addi	r5,r22,8
   46170:	9009883a 	mov	r4,r18
   46174:	0044fcc0 	call	44fcc <_free_r>
   46178:	e4000217 	ldw	r16,8(fp)
   4617c:	003fd806 	br	460e0 <_malloc_r+0x58c>
   46180:	00800504 	movi	r2,20
   46184:	11001536 	bltu	r2,r4,461dc <_malloc_r+0x688>
   46188:	210016c4 	addi	r4,r4,91
   4618c:	200690fa 	slli	r3,r4,3
   46190:	003fa606 	br	4602c <_malloc_r+0x4d8>
   46194:	8804d4ba 	srli	r2,r17,18
   46198:	11801f04 	addi	r6,r2,124
   4619c:	300490fa 	slli	r2,r6,3
   461a0:	003e9906 	br	45c08 <_malloc_r+0xb4>
   461a4:	2009d0ba 	srai	r4,r4,2
   461a8:	01400174 	movhi	r5,5
   461ac:	29775904 	addi	r5,r5,-8860
   461b0:	00c00044 	movi	r3,1
   461b4:	28800117 	ldw	r2,4(r5)
   461b8:	1906983a 	sll	r3,r3,r4
   461bc:	10c4b03a 	or	r2,r2,r3
   461c0:	28800115 	stw	r2,4(r5)
   461c4:	003fa306 	br	46054 <_malloc_r+0x500>
   461c8:	0027883a 	mov	r19,zero
   461cc:	00c00044 	movi	r3,1
   461d0:	003f8606 	br	45fec <_malloc_r+0x498>
   461d4:	d1200515 	stw	r4,-32748(gp)
   461d8:	003f7306 	br	45fa8 <_malloc_r+0x454>
   461dc:	00801504 	movi	r2,84
   461e0:	11001936 	bltu	r2,r4,46248 <_malloc_r+0x6f4>
   461e4:	2804d33a 	srli	r2,r5,12
   461e8:	11001b84 	addi	r4,r2,110
   461ec:	200690fa 	slli	r3,r4,3
   461f0:	003f8e06 	br	4602c <_malloc_r+0x4d8>
   461f4:	480b883a 	mov	r5,r9
   461f8:	6807883a 	mov	r3,r13
   461fc:	288000cc 	andi	r2,r5,3
   46200:	18fffe04 	addi	r3,r3,-8
   46204:	297fffc4 	addi	r5,r5,-1
   46208:	10001526 	beq	r2,zero,46260 <_malloc_r+0x70c>
   4620c:	18800217 	ldw	r2,8(r3)
   46210:	10fffa26 	beq	r2,r3,461fc <_malloc_r+0x6a8>
   46214:	2109883a 	add	r4,r4,r4
   46218:	393f1e36 	bltu	r7,r4,45e94 <_malloc_r+0x340>
   4621c:	203f1d26 	beq	r4,zero,45e94 <_malloc_r+0x340>
   46220:	21c4703a 	and	r2,r4,r7
   46224:	10000226 	beq	r2,zero,46230 <_malloc_r+0x6dc>
   46228:	6013883a 	mov	r9,r12
   4622c:	003ee106 	br	45db4 <_malloc_r+0x260>
   46230:	2109883a 	add	r4,r4,r4
   46234:	3904703a 	and	r2,r7,r4
   46238:	63000104 	addi	r12,r12,4
   4623c:	103ffc26 	beq	r2,zero,46230 <_malloc_r+0x6dc>
   46240:	6013883a 	mov	r9,r12
   46244:	003edb06 	br	45db4 <_malloc_r+0x260>
   46248:	00805504 	movi	r2,340
   4624c:	11000836 	bltu	r2,r4,46270 <_malloc_r+0x71c>
   46250:	2804d3fa 	srli	r2,r5,15
   46254:	11001dc4 	addi	r4,r2,119
   46258:	200690fa 	slli	r3,r4,3
   4625c:	003f7306 	br	4602c <_malloc_r+0x4d8>
   46260:	0104303a 	nor	r2,zero,r4
   46264:	388e703a 	and	r7,r7,r2
   46268:	e1c00115 	stw	r7,4(fp)
   4626c:	003fe906 	br	46214 <_malloc_r+0x6c0>
   46270:	00815504 	movi	r2,1364
   46274:	1100032e 	bgeu	r2,r4,46284 <_malloc_r+0x730>
   46278:	01001f84 	movi	r4,126
   4627c:	00c0fc04 	movi	r3,1008
   46280:	003f6a06 	br	4602c <_malloc_r+0x4d8>
   46284:	2804d4ba 	srli	r2,r5,18
   46288:	11001f04 	addi	r4,r2,124
   4628c:	200690fa 	slli	r3,r4,3
   46290:	003f6606 	br	4602c <_malloc_r+0x4d8>

00046294 <memchr>:
   46294:	008000c4 	movi	r2,3
   46298:	29403fcc 	andi	r5,r5,255
   4629c:	2007883a 	mov	r3,r4
   462a0:	1180022e 	bgeu	r2,r6,462ac <memchr+0x18>
   462a4:	2084703a 	and	r2,r4,r2
   462a8:	10000b26 	beq	r2,zero,462d8 <memchr+0x44>
   462ac:	313fffc4 	addi	r4,r6,-1
   462b0:	3000051e 	bne	r6,zero,462c8 <memchr+0x34>
   462b4:	00002c06 	br	46368 <memchr+0xd4>
   462b8:	213fffc4 	addi	r4,r4,-1
   462bc:	00bfffc4 	movi	r2,-1
   462c0:	18c00044 	addi	r3,r3,1
   462c4:	20802826 	beq	r4,r2,46368 <memchr+0xd4>
   462c8:	18800003 	ldbu	r2,0(r3)
   462cc:	28bffa1e 	bne	r5,r2,462b8 <memchr+0x24>
   462d0:	1805883a 	mov	r2,r3
   462d4:	f800283a 	ret
   462d8:	0011883a 	mov	r8,zero
   462dc:	0007883a 	mov	r3,zero
   462e0:	01c00104 	movi	r7,4
   462e4:	4004923a 	slli	r2,r8,8
   462e8:	18c00044 	addi	r3,r3,1
   462ec:	1151883a 	add	r8,r2,r5
   462f0:	19fffc1e 	bne	r3,r7,462e4 <memchr+0x50>
   462f4:	02bfbff4 	movhi	r10,65279
   462f8:	52bfbfc4 	addi	r10,r10,-257
   462fc:	02602074 	movhi	r9,32897
   46300:	4a602004 	addi	r9,r9,-32640
   46304:	02c000c4 	movi	r11,3
   46308:	20800017 	ldw	r2,0(r4)
   4630c:	31bfff04 	addi	r6,r6,-4
   46310:	200f883a 	mov	r7,r4
   46314:	1204f03a 	xor	r2,r2,r8
   46318:	1287883a 	add	r3,r2,r10
   4631c:	1a46703a 	and	r3,r3,r9
   46320:	0084303a 	nor	r2,zero,r2
   46324:	10c4703a 	and	r2,r2,r3
   46328:	10000b26 	beq	r2,zero,46358 <memchr+0xc4>
   4632c:	20800003 	ldbu	r2,0(r4)
   46330:	28800f26 	beq	r5,r2,46370 <memchr+0xdc>
   46334:	20800043 	ldbu	r2,1(r4)
   46338:	21c00044 	addi	r7,r4,1
   4633c:	28800c26 	beq	r5,r2,46370 <memchr+0xdc>
   46340:	20800083 	ldbu	r2,2(r4)
   46344:	21c00084 	addi	r7,r4,2
   46348:	28800926 	beq	r5,r2,46370 <memchr+0xdc>
   4634c:	208000c3 	ldbu	r2,3(r4)
   46350:	21c000c4 	addi	r7,r4,3
   46354:	28800626 	beq	r5,r2,46370 <memchr+0xdc>
   46358:	21000104 	addi	r4,r4,4
   4635c:	59bfea36 	bltu	r11,r6,46308 <memchr+0x74>
   46360:	2007883a 	mov	r3,r4
   46364:	003fd106 	br	462ac <memchr+0x18>
   46368:	0005883a 	mov	r2,zero
   4636c:	f800283a 	ret
   46370:	3805883a 	mov	r2,r7
   46374:	f800283a 	ret

00046378 <memcpy>:
   46378:	01c003c4 	movi	r7,15
   4637c:	2007883a 	mov	r3,r4
   46380:	3980032e 	bgeu	r7,r6,46390 <memcpy+0x18>
   46384:	2904b03a 	or	r2,r5,r4
   46388:	108000cc 	andi	r2,r2,3
   4638c:	10000926 	beq	r2,zero,463b4 <memcpy+0x3c>
   46390:	30000626 	beq	r6,zero,463ac <memcpy+0x34>
   46394:	30cd883a 	add	r6,r6,r3
   46398:	28800003 	ldbu	r2,0(r5)
   4639c:	29400044 	addi	r5,r5,1
   463a0:	18800005 	stb	r2,0(r3)
   463a4:	18c00044 	addi	r3,r3,1
   463a8:	30fffb1e 	bne	r6,r3,46398 <memcpy+0x20>
   463ac:	2005883a 	mov	r2,r4
   463b0:	f800283a 	ret
   463b4:	3811883a 	mov	r8,r7
   463b8:	200f883a 	mov	r7,r4
   463bc:	28c00017 	ldw	r3,0(r5)
   463c0:	31bffc04 	addi	r6,r6,-16
   463c4:	38c00015 	stw	r3,0(r7)
   463c8:	28800117 	ldw	r2,4(r5)
   463cc:	38800115 	stw	r2,4(r7)
   463d0:	28c00217 	ldw	r3,8(r5)
   463d4:	38c00215 	stw	r3,8(r7)
   463d8:	28800317 	ldw	r2,12(r5)
   463dc:	29400404 	addi	r5,r5,16
   463e0:	38800315 	stw	r2,12(r7)
   463e4:	39c00404 	addi	r7,r7,16
   463e8:	41bff436 	bltu	r8,r6,463bc <memcpy+0x44>
   463ec:	008000c4 	movi	r2,3
   463f0:	1180072e 	bgeu	r2,r6,46410 <memcpy+0x98>
   463f4:	1007883a 	mov	r3,r2
   463f8:	28800017 	ldw	r2,0(r5)
   463fc:	31bfff04 	addi	r6,r6,-4
   46400:	29400104 	addi	r5,r5,4
   46404:	38800015 	stw	r2,0(r7)
   46408:	39c00104 	addi	r7,r7,4
   4640c:	19bffa36 	bltu	r3,r6,463f8 <memcpy+0x80>
   46410:	3807883a 	mov	r3,r7
   46414:	003fde06 	br	46390 <memcpy+0x18>

00046418 <memmove>:
   46418:	2807883a 	mov	r3,r5
   4641c:	2011883a 	mov	r8,r4
   46420:	29000c2e 	bgeu	r5,r4,46454 <memmove+0x3c>
   46424:	298f883a 	add	r7,r5,r6
   46428:	21c00a2e 	bgeu	r4,r7,46454 <memmove+0x3c>
   4642c:	30000726 	beq	r6,zero,4644c <memmove+0x34>
   46430:	2187883a 	add	r3,r4,r6
   46434:	198dc83a 	sub	r6,r3,r6
   46438:	39ffffc4 	addi	r7,r7,-1
   4643c:	38800003 	ldbu	r2,0(r7)
   46440:	18ffffc4 	addi	r3,r3,-1
   46444:	18800005 	stb	r2,0(r3)
   46448:	19bffb1e 	bne	r3,r6,46438 <memmove+0x20>
   4644c:	2005883a 	mov	r2,r4
   46450:	f800283a 	ret
   46454:	01c003c4 	movi	r7,15
   46458:	39800a36 	bltu	r7,r6,46484 <memmove+0x6c>
   4645c:	303ffb26 	beq	r6,zero,4644c <memmove+0x34>
   46460:	400f883a 	mov	r7,r8
   46464:	320d883a 	add	r6,r6,r8
   46468:	28800003 	ldbu	r2,0(r5)
   4646c:	29400044 	addi	r5,r5,1
   46470:	38800005 	stb	r2,0(r7)
   46474:	39c00044 	addi	r7,r7,1
   46478:	39bffb1e 	bne	r7,r6,46468 <memmove+0x50>
   4647c:	2005883a 	mov	r2,r4
   46480:	f800283a 	ret
   46484:	1904b03a 	or	r2,r3,r4
   46488:	108000cc 	andi	r2,r2,3
   4648c:	103ff31e 	bne	r2,zero,4645c <memmove+0x44>
   46490:	3811883a 	mov	r8,r7
   46494:	180b883a 	mov	r5,r3
   46498:	200f883a 	mov	r7,r4
   4649c:	28c00017 	ldw	r3,0(r5)
   464a0:	31bffc04 	addi	r6,r6,-16
   464a4:	38c00015 	stw	r3,0(r7)
   464a8:	28800117 	ldw	r2,4(r5)
   464ac:	38800115 	stw	r2,4(r7)
   464b0:	28c00217 	ldw	r3,8(r5)
   464b4:	38c00215 	stw	r3,8(r7)
   464b8:	28800317 	ldw	r2,12(r5)
   464bc:	29400404 	addi	r5,r5,16
   464c0:	38800315 	stw	r2,12(r7)
   464c4:	39c00404 	addi	r7,r7,16
   464c8:	41bff436 	bltu	r8,r6,4649c <memmove+0x84>
   464cc:	008000c4 	movi	r2,3
   464d0:	1180072e 	bgeu	r2,r6,464f0 <memmove+0xd8>
   464d4:	1007883a 	mov	r3,r2
   464d8:	28800017 	ldw	r2,0(r5)
   464dc:	31bfff04 	addi	r6,r6,-4
   464e0:	29400104 	addi	r5,r5,4
   464e4:	38800015 	stw	r2,0(r7)
   464e8:	39c00104 	addi	r7,r7,4
   464ec:	19bffa36 	bltu	r3,r6,464d8 <memmove+0xc0>
   464f0:	3811883a 	mov	r8,r7
   464f4:	003fd906 	br	4645c <memmove+0x44>

000464f8 <memset>:
   464f8:	008000c4 	movi	r2,3
   464fc:	29403fcc 	andi	r5,r5,255
   46500:	2007883a 	mov	r3,r4
   46504:	1180022e 	bgeu	r2,r6,46510 <memset+0x18>
   46508:	2084703a 	and	r2,r4,r2
   4650c:	10000826 	beq	r2,zero,46530 <memset+0x38>
   46510:	30000526 	beq	r6,zero,46528 <memset+0x30>
   46514:	2805883a 	mov	r2,r5
   46518:	30cd883a 	add	r6,r6,r3
   4651c:	18800005 	stb	r2,0(r3)
   46520:	18c00044 	addi	r3,r3,1
   46524:	19bffd1e 	bne	r3,r6,4651c <memset+0x24>
   46528:	2005883a 	mov	r2,r4
   4652c:	f800283a 	ret
   46530:	2804923a 	slli	r2,r5,8
   46534:	020003c4 	movi	r8,15
   46538:	200f883a 	mov	r7,r4
   4653c:	2884b03a 	or	r2,r5,r2
   46540:	1006943a 	slli	r3,r2,16
   46544:	10c6b03a 	or	r3,r2,r3
   46548:	41800a2e 	bgeu	r8,r6,46574 <memset+0x7c>
   4654c:	4005883a 	mov	r2,r8
   46550:	31bffc04 	addi	r6,r6,-16
   46554:	38c00015 	stw	r3,0(r7)
   46558:	38c00115 	stw	r3,4(r7)
   4655c:	38c00215 	stw	r3,8(r7)
   46560:	38c00315 	stw	r3,12(r7)
   46564:	39c00404 	addi	r7,r7,16
   46568:	11bff936 	bltu	r2,r6,46550 <memset+0x58>
   4656c:	008000c4 	movi	r2,3
   46570:	1180052e 	bgeu	r2,r6,46588 <memset+0x90>
   46574:	31bfff04 	addi	r6,r6,-4
   46578:	008000c4 	movi	r2,3
   4657c:	38c00015 	stw	r3,0(r7)
   46580:	39c00104 	addi	r7,r7,4
   46584:	11bffb36 	bltu	r2,r6,46574 <memset+0x7c>
   46588:	3807883a 	mov	r3,r7
   4658c:	003fe006 	br	46510 <memset+0x18>

00046590 <_Bfree>:
   46590:	28000826 	beq	r5,zero,465b4 <_Bfree+0x24>
   46594:	28800117 	ldw	r2,4(r5)
   46598:	21001317 	ldw	r4,76(r4)
   4659c:	1085883a 	add	r2,r2,r2
   465a0:	1085883a 	add	r2,r2,r2
   465a4:	1105883a 	add	r2,r2,r4
   465a8:	10c00017 	ldw	r3,0(r2)
   465ac:	28c00015 	stw	r3,0(r5)
   465b0:	11400015 	stw	r5,0(r2)
   465b4:	f800283a 	ret

000465b8 <__hi0bits>:
   465b8:	20bfffec 	andhi	r2,r4,65535
   465bc:	10001426 	beq	r2,zero,46610 <__hi0bits+0x58>
   465c0:	0007883a 	mov	r3,zero
   465c4:	20bfc02c 	andhi	r2,r4,65280
   465c8:	1000021e 	bne	r2,zero,465d4 <__hi0bits+0x1c>
   465cc:	2008923a 	slli	r4,r4,8
   465d0:	18c00204 	addi	r3,r3,8
   465d4:	20bc002c 	andhi	r2,r4,61440
   465d8:	1000021e 	bne	r2,zero,465e4 <__hi0bits+0x2c>
   465dc:	2008913a 	slli	r4,r4,4
   465e0:	18c00104 	addi	r3,r3,4
   465e4:	20b0002c 	andhi	r2,r4,49152
   465e8:	1000031e 	bne	r2,zero,465f8 <__hi0bits+0x40>
   465ec:	2105883a 	add	r2,r4,r4
   465f0:	18c00084 	addi	r3,r3,2
   465f4:	1089883a 	add	r4,r2,r2
   465f8:	20000316 	blt	r4,zero,46608 <__hi0bits+0x50>
   465fc:	2090002c 	andhi	r2,r4,16384
   46600:	10000626 	beq	r2,zero,4661c <__hi0bits+0x64>
   46604:	18c00044 	addi	r3,r3,1
   46608:	1805883a 	mov	r2,r3
   4660c:	f800283a 	ret
   46610:	2008943a 	slli	r4,r4,16
   46614:	00c00404 	movi	r3,16
   46618:	003fea06 	br	465c4 <__hi0bits+0xc>
   4661c:	00c00804 	movi	r3,32
   46620:	1805883a 	mov	r2,r3
   46624:	f800283a 	ret

00046628 <__lo0bits>:
   46628:	20c00017 	ldw	r3,0(r4)
   4662c:	188001cc 	andi	r2,r3,7
   46630:	10000a26 	beq	r2,zero,4665c <__lo0bits+0x34>
   46634:	1880004c 	andi	r2,r3,1
   46638:	1005003a 	cmpeq	r2,r2,zero
   4663c:	10002126 	beq	r2,zero,466c4 <__lo0bits+0x9c>
   46640:	1880008c 	andi	r2,r3,2
   46644:	1000251e 	bne	r2,zero,466dc <__lo0bits+0xb4>
   46648:	1804d0ba 	srli	r2,r3,2
   4664c:	01400084 	movi	r5,2
   46650:	20800015 	stw	r2,0(r4)
   46654:	2805883a 	mov	r2,r5
   46658:	f800283a 	ret
   4665c:	18bfffcc 	andi	r2,r3,65535
   46660:	10001526 	beq	r2,zero,466b8 <__lo0bits+0x90>
   46664:	000b883a 	mov	r5,zero
   46668:	18803fcc 	andi	r2,r3,255
   4666c:	1000021e 	bne	r2,zero,46678 <__lo0bits+0x50>
   46670:	1806d23a 	srli	r3,r3,8
   46674:	29400204 	addi	r5,r5,8
   46678:	188003cc 	andi	r2,r3,15
   4667c:	1000021e 	bne	r2,zero,46688 <__lo0bits+0x60>
   46680:	1806d13a 	srli	r3,r3,4
   46684:	29400104 	addi	r5,r5,4
   46688:	188000cc 	andi	r2,r3,3
   4668c:	1000021e 	bne	r2,zero,46698 <__lo0bits+0x70>
   46690:	1806d0ba 	srli	r3,r3,2
   46694:	29400084 	addi	r5,r5,2
   46698:	1880004c 	andi	r2,r3,1
   4669c:	1000031e 	bne	r2,zero,466ac <__lo0bits+0x84>
   466a0:	1806d07a 	srli	r3,r3,1
   466a4:	18000a26 	beq	r3,zero,466d0 <__lo0bits+0xa8>
   466a8:	29400044 	addi	r5,r5,1
   466ac:	2805883a 	mov	r2,r5
   466b0:	20c00015 	stw	r3,0(r4)
   466b4:	f800283a 	ret
   466b8:	1806d43a 	srli	r3,r3,16
   466bc:	01400404 	movi	r5,16
   466c0:	003fe906 	br	46668 <__lo0bits+0x40>
   466c4:	000b883a 	mov	r5,zero
   466c8:	2805883a 	mov	r2,r5
   466cc:	f800283a 	ret
   466d0:	01400804 	movi	r5,32
   466d4:	2805883a 	mov	r2,r5
   466d8:	f800283a 	ret
   466dc:	1804d07a 	srli	r2,r3,1
   466e0:	01400044 	movi	r5,1
   466e4:	20800015 	stw	r2,0(r4)
   466e8:	003fda06 	br	46654 <__lo0bits+0x2c>

000466ec <__mcmp>:
   466ec:	20800417 	ldw	r2,16(r4)
   466f0:	28c00417 	ldw	r3,16(r5)
   466f4:	10cfc83a 	sub	r7,r2,r3
   466f8:	38000c1e 	bne	r7,zero,4672c <__mcmp+0x40>
   466fc:	18c5883a 	add	r2,r3,r3
   46700:	1085883a 	add	r2,r2,r2
   46704:	10c00504 	addi	r3,r2,20
   46708:	21000504 	addi	r4,r4,20
   4670c:	28cb883a 	add	r5,r5,r3
   46710:	2085883a 	add	r2,r4,r2
   46714:	10bfff04 	addi	r2,r2,-4
   46718:	297fff04 	addi	r5,r5,-4
   4671c:	11800017 	ldw	r6,0(r2)
   46720:	28c00017 	ldw	r3,0(r5)
   46724:	30c0031e 	bne	r6,r3,46734 <__mcmp+0x48>
   46728:	20bffa36 	bltu	r4,r2,46714 <__mcmp+0x28>
   4672c:	3805883a 	mov	r2,r7
   46730:	f800283a 	ret
   46734:	30c00336 	bltu	r6,r3,46744 <__mcmp+0x58>
   46738:	01c00044 	movi	r7,1
   4673c:	3805883a 	mov	r2,r7
   46740:	f800283a 	ret
   46744:	01ffffc4 	movi	r7,-1
   46748:	003ff806 	br	4672c <__mcmp+0x40>

0004674c <__ulp>:
   4674c:	295ffc2c 	andhi	r5,r5,32752
   46750:	013f3034 	movhi	r4,64704
   46754:	290b883a 	add	r5,r5,r4
   46758:	0145c83a 	sub	r2,zero,r5
   4675c:	1007d53a 	srai	r3,r2,20
   46760:	000d883a 	mov	r6,zero
   46764:	0140040e 	bge	zero,r5,46778 <__ulp+0x2c>
   46768:	280f883a 	mov	r7,r5
   4676c:	3807883a 	mov	r3,r7
   46770:	3005883a 	mov	r2,r6
   46774:	f800283a 	ret
   46778:	008004c4 	movi	r2,19
   4677c:	193ffb04 	addi	r4,r3,-20
   46780:	10c00c0e 	bge	r2,r3,467b4 <__ulp+0x68>
   46784:	008007c4 	movi	r2,31
   46788:	1107c83a 	sub	r3,r2,r4
   4678c:	00800784 	movi	r2,30
   46790:	01400044 	movi	r5,1
   46794:	11000216 	blt	r2,r4,467a0 <__ulp+0x54>
   46798:	00800044 	movi	r2,1
   4679c:	10ca983a 	sll	r5,r2,r3
   467a0:	000f883a 	mov	r7,zero
   467a4:	280d883a 	mov	r6,r5
   467a8:	3807883a 	mov	r3,r7
   467ac:	3005883a 	mov	r2,r6
   467b0:	f800283a 	ret
   467b4:	00800234 	movhi	r2,8
   467b8:	10cfd83a 	sra	r7,r2,r3
   467bc:	000d883a 	mov	r6,zero
   467c0:	3005883a 	mov	r2,r6
   467c4:	3807883a 	mov	r3,r7
   467c8:	f800283a 	ret

000467cc <__b2d>:
   467cc:	20800417 	ldw	r2,16(r4)
   467d0:	defff904 	addi	sp,sp,-28
   467d4:	dd000415 	stw	r20,16(sp)
   467d8:	1085883a 	add	r2,r2,r2
   467dc:	25000504 	addi	r20,r4,20
   467e0:	1085883a 	add	r2,r2,r2
   467e4:	dc000015 	stw	r16,0(sp)
   467e8:	a0a1883a 	add	r16,r20,r2
   467ec:	dd400515 	stw	r21,20(sp)
   467f0:	857fff17 	ldw	r21,-4(r16)
   467f4:	dc400115 	stw	r17,4(sp)
   467f8:	dfc00615 	stw	ra,24(sp)
   467fc:	a809883a 	mov	r4,r21
   46800:	2823883a 	mov	r17,r5
   46804:	dcc00315 	stw	r19,12(sp)
   46808:	dc800215 	stw	r18,8(sp)
   4680c:	00465b80 	call	465b8 <__hi0bits>
   46810:	100b883a 	mov	r5,r2
   46814:	00800804 	movi	r2,32
   46818:	1145c83a 	sub	r2,r2,r5
   4681c:	88800015 	stw	r2,0(r17)
   46820:	00800284 	movi	r2,10
   46824:	80ffff04 	addi	r3,r16,-4
   46828:	11401416 	blt	r2,r5,4687c <__b2d+0xb0>
   4682c:	008002c4 	movi	r2,11
   46830:	1149c83a 	sub	r4,r2,r5
   46834:	a0c02736 	bltu	r20,r3,468d4 <__b2d+0x108>
   46838:	000d883a 	mov	r6,zero
   4683c:	28800544 	addi	r2,r5,21
   46840:	a906d83a 	srl	r3,r21,r4
   46844:	a884983a 	sll	r2,r21,r2
   46848:	1ccffc34 	orhi	r19,r3,16368
   4684c:	11a4b03a 	or	r18,r2,r6
   46850:	9005883a 	mov	r2,r18
   46854:	9807883a 	mov	r3,r19
   46858:	dfc00617 	ldw	ra,24(sp)
   4685c:	dd400517 	ldw	r21,20(sp)
   46860:	dd000417 	ldw	r20,16(sp)
   46864:	dcc00317 	ldw	r19,12(sp)
   46868:	dc800217 	ldw	r18,8(sp)
   4686c:	dc400117 	ldw	r17,4(sp)
   46870:	dc000017 	ldw	r16,0(sp)
   46874:	dec00704 	addi	sp,sp,28
   46878:	f800283a 	ret
   4687c:	a0c00e36 	bltu	r20,r3,468b8 <__b2d+0xec>
   46880:	293ffd44 	addi	r4,r5,-11
   46884:	000d883a 	mov	r6,zero
   46888:	20000f26 	beq	r4,zero,468c8 <__b2d+0xfc>
   4688c:	00800804 	movi	r2,32
   46890:	110bc83a 	sub	r5,r2,r4
   46894:	a0c01236 	bltu	r20,r3,468e0 <__b2d+0x114>
   46898:	000f883a 	mov	r7,zero
   4689c:	a904983a 	sll	r2,r21,r4
   468a0:	3146d83a 	srl	r3,r6,r5
   468a4:	3108983a 	sll	r4,r6,r4
   468a8:	108ffc34 	orhi	r2,r2,16368
   468ac:	18a6b03a 	or	r19,r3,r2
   468b0:	3924b03a 	or	r18,r7,r4
   468b4:	003fe606 	br	46850 <__b2d+0x84>
   468b8:	293ffd44 	addi	r4,r5,-11
   468bc:	81bffe17 	ldw	r6,-8(r16)
   468c0:	80fffe04 	addi	r3,r16,-8
   468c4:	203ff11e 	bne	r4,zero,4688c <__b2d+0xc0>
   468c8:	accffc34 	orhi	r19,r21,16368
   468cc:	3025883a 	mov	r18,r6
   468d0:	003fdf06 	br	46850 <__b2d+0x84>
   468d4:	18bfff17 	ldw	r2,-4(r3)
   468d8:	110cd83a 	srl	r6,r2,r4
   468dc:	003fd706 	br	4683c <__b2d+0x70>
   468e0:	18bfff17 	ldw	r2,-4(r3)
   468e4:	114ed83a 	srl	r7,r2,r5
   468e8:	003fec06 	br	4689c <__b2d+0xd0>

000468ec <__ratio>:
   468ec:	defff904 	addi	sp,sp,-28
   468f0:	dc400215 	stw	r17,8(sp)
   468f4:	2823883a 	mov	r17,r5
   468f8:	d80b883a 	mov	r5,sp
   468fc:	dfc00615 	stw	ra,24(sp)
   46900:	dd000515 	stw	r20,20(sp)
   46904:	dcc00415 	stw	r19,16(sp)
   46908:	dc800315 	stw	r18,12(sp)
   4690c:	2025883a 	mov	r18,r4
   46910:	00467cc0 	call	467cc <__b2d>
   46914:	8809883a 	mov	r4,r17
   46918:	d9400104 	addi	r5,sp,4
   4691c:	1027883a 	mov	r19,r2
   46920:	1829883a 	mov	r20,r3
   46924:	00467cc0 	call	467cc <__b2d>
   46928:	89000417 	ldw	r4,16(r17)
   4692c:	91c00417 	ldw	r7,16(r18)
   46930:	d9800117 	ldw	r6,4(sp)
   46934:	180b883a 	mov	r5,r3
   46938:	390fc83a 	sub	r7,r7,r4
   4693c:	1009883a 	mov	r4,r2
   46940:	d8800017 	ldw	r2,0(sp)
   46944:	380e917a 	slli	r7,r7,5
   46948:	2011883a 	mov	r8,r4
   4694c:	1185c83a 	sub	r2,r2,r6
   46950:	11c5883a 	add	r2,r2,r7
   46954:	1006953a 	slli	r3,r2,20
   46958:	2813883a 	mov	r9,r5
   4695c:	00800d0e 	bge	zero,r2,46994 <__ratio+0xa8>
   46960:	1d29883a 	add	r20,r3,r20
   46964:	a00b883a 	mov	r5,r20
   46968:	480f883a 	mov	r7,r9
   4696c:	9809883a 	mov	r4,r19
   46970:	400d883a 	mov	r6,r8
   46974:	00497480 	call	49748 <__divdf3>
   46978:	dfc00617 	ldw	ra,24(sp)
   4697c:	dd000517 	ldw	r20,20(sp)
   46980:	dcc00417 	ldw	r19,16(sp)
   46984:	dc800317 	ldw	r18,12(sp)
   46988:	dc400217 	ldw	r17,8(sp)
   4698c:	dec00704 	addi	sp,sp,28
   46990:	f800283a 	ret
   46994:	28d3c83a 	sub	r9,r5,r3
   46998:	003ff206 	br	46964 <__ratio+0x78>

0004699c <_mprec_log10>:
   4699c:	defffe04 	addi	sp,sp,-8
   469a0:	008005c4 	movi	r2,23
   469a4:	dc000015 	stw	r16,0(sp)
   469a8:	dfc00115 	stw	ra,4(sp)
   469ac:	2021883a 	mov	r16,r4
   469b0:	11000c16 	blt	r2,r4,469e4 <_mprec_log10+0x48>
   469b4:	200490fa 	slli	r2,r4,3
   469b8:	00c00174 	movhi	r3,5
   469bc:	18f5bd04 	addi	r3,r3,-10508
   469c0:	10c5883a 	add	r2,r2,r3
   469c4:	12400117 	ldw	r9,4(r2)
   469c8:	12000017 	ldw	r8,0(r2)
   469cc:	4807883a 	mov	r3,r9
   469d0:	4005883a 	mov	r2,r8
   469d4:	dfc00117 	ldw	ra,4(sp)
   469d8:	dc000017 	ldw	r16,0(sp)
   469dc:	dec00204 	addi	sp,sp,8
   469e0:	f800283a 	ret
   469e4:	0011883a 	mov	r8,zero
   469e8:	024ffc34 	movhi	r9,16368
   469ec:	0005883a 	mov	r2,zero
   469f0:	00d00934 	movhi	r3,16420
   469f4:	480b883a 	mov	r5,r9
   469f8:	4009883a 	mov	r4,r8
   469fc:	180f883a 	mov	r7,r3
   46a00:	100d883a 	mov	r6,r2
   46a04:	00493840 	call	49384 <__muldf3>
   46a08:	843fffc4 	addi	r16,r16,-1
   46a0c:	1011883a 	mov	r8,r2
   46a10:	1813883a 	mov	r9,r3
   46a14:	803ff51e 	bne	r16,zero,469ec <_mprec_log10+0x50>
   46a18:	4005883a 	mov	r2,r8
   46a1c:	4807883a 	mov	r3,r9
   46a20:	dfc00117 	ldw	ra,4(sp)
   46a24:	dc000017 	ldw	r16,0(sp)
   46a28:	dec00204 	addi	sp,sp,8
   46a2c:	f800283a 	ret

00046a30 <__copybits>:
   46a30:	297fffc4 	addi	r5,r5,-1
   46a34:	30800417 	ldw	r2,16(r6)
   46a38:	280bd17a 	srai	r5,r5,5
   46a3c:	31800504 	addi	r6,r6,20
   46a40:	1085883a 	add	r2,r2,r2
   46a44:	294b883a 	add	r5,r5,r5
   46a48:	294b883a 	add	r5,r5,r5
   46a4c:	1085883a 	add	r2,r2,r2
   46a50:	290b883a 	add	r5,r5,r4
   46a54:	3087883a 	add	r3,r6,r2
   46a58:	29400104 	addi	r5,r5,4
   46a5c:	30c0052e 	bgeu	r6,r3,46a74 <__copybits+0x44>
   46a60:	30800017 	ldw	r2,0(r6)
   46a64:	31800104 	addi	r6,r6,4
   46a68:	20800015 	stw	r2,0(r4)
   46a6c:	21000104 	addi	r4,r4,4
   46a70:	30fffb36 	bltu	r6,r3,46a60 <__copybits+0x30>
   46a74:	2140032e 	bgeu	r4,r5,46a84 <__copybits+0x54>
   46a78:	20000015 	stw	zero,0(r4)
   46a7c:	21000104 	addi	r4,r4,4
   46a80:	217ffd36 	bltu	r4,r5,46a78 <__copybits+0x48>
   46a84:	f800283a 	ret

00046a88 <__any_on>:
   46a88:	20800417 	ldw	r2,16(r4)
   46a8c:	2807d17a 	srai	r3,r5,5
   46a90:	21000504 	addi	r4,r4,20
   46a94:	10c00d0e 	bge	r2,r3,46acc <__any_on+0x44>
   46a98:	1085883a 	add	r2,r2,r2
   46a9c:	1085883a 	add	r2,r2,r2
   46aa0:	208d883a 	add	r6,r4,r2
   46aa4:	2180182e 	bgeu	r4,r6,46b08 <__any_on+0x80>
   46aa8:	30bfff17 	ldw	r2,-4(r6)
   46aac:	30ffff04 	addi	r3,r6,-4
   46ab0:	1000041e 	bne	r2,zero,46ac4 <__any_on+0x3c>
   46ab4:	20c0142e 	bgeu	r4,r3,46b08 <__any_on+0x80>
   46ab8:	18ffff04 	addi	r3,r3,-4
   46abc:	18800017 	ldw	r2,0(r3)
   46ac0:	103ffc26 	beq	r2,zero,46ab4 <__any_on+0x2c>
   46ac4:	00800044 	movi	r2,1
   46ac8:	f800283a 	ret
   46acc:	18800a0e 	bge	r3,r2,46af8 <__any_on+0x70>
   46ad0:	294007cc 	andi	r5,r5,31
   46ad4:	28000826 	beq	r5,zero,46af8 <__any_on+0x70>
   46ad8:	18c5883a 	add	r2,r3,r3
   46adc:	1085883a 	add	r2,r2,r2
   46ae0:	208d883a 	add	r6,r4,r2
   46ae4:	30c00017 	ldw	r3,0(r6)
   46ae8:	1944d83a 	srl	r2,r3,r5
   46aec:	1144983a 	sll	r2,r2,r5
   46af0:	18bff41e 	bne	r3,r2,46ac4 <__any_on+0x3c>
   46af4:	003feb06 	br	46aa4 <__any_on+0x1c>
   46af8:	18c5883a 	add	r2,r3,r3
   46afc:	1085883a 	add	r2,r2,r2
   46b00:	208d883a 	add	r6,r4,r2
   46b04:	003fe706 	br	46aa4 <__any_on+0x1c>
   46b08:	0005883a 	mov	r2,zero
   46b0c:	f800283a 	ret

00046b10 <_Balloc>:
   46b10:	20c01317 	ldw	r3,76(r4)
   46b14:	defffb04 	addi	sp,sp,-20
   46b18:	dcc00315 	stw	r19,12(sp)
   46b1c:	dc800215 	stw	r18,8(sp)
   46b20:	dfc00415 	stw	ra,16(sp)
   46b24:	2825883a 	mov	r18,r5
   46b28:	dc400115 	stw	r17,4(sp)
   46b2c:	dc000015 	stw	r16,0(sp)
   46b30:	2027883a 	mov	r19,r4
   46b34:	01800404 	movi	r6,16
   46b38:	01400104 	movi	r5,4
   46b3c:	18001726 	beq	r3,zero,46b9c <_Balloc+0x8c>
   46b40:	01400044 	movi	r5,1
   46b44:	9485883a 	add	r2,r18,r18
   46b48:	2ca2983a 	sll	r17,r5,r18
   46b4c:	1085883a 	add	r2,r2,r2
   46b50:	10c7883a 	add	r3,r2,r3
   46b54:	1c000017 	ldw	r16,0(r3)
   46b58:	8c4d883a 	add	r6,r17,r17
   46b5c:	318d883a 	add	r6,r6,r6
   46b60:	9809883a 	mov	r4,r19
   46b64:	31800504 	addi	r6,r6,20
   46b68:	80001226 	beq	r16,zero,46bb4 <_Balloc+0xa4>
   46b6c:	80800017 	ldw	r2,0(r16)
   46b70:	18800015 	stw	r2,0(r3)
   46b74:	80000415 	stw	zero,16(r16)
   46b78:	80000315 	stw	zero,12(r16)
   46b7c:	8005883a 	mov	r2,r16
   46b80:	dfc00417 	ldw	ra,16(sp)
   46b84:	dcc00317 	ldw	r19,12(sp)
   46b88:	dc800217 	ldw	r18,8(sp)
   46b8c:	dc400117 	ldw	r17,4(sp)
   46b90:	dc000017 	ldw	r16,0(sp)
   46b94:	dec00504 	addi	sp,sp,20
   46b98:	f800283a 	ret
   46b9c:	0047ed80 	call	47ed8 <_calloc_r>
   46ba0:	1007883a 	mov	r3,r2
   46ba4:	0021883a 	mov	r16,zero
   46ba8:	98801315 	stw	r2,76(r19)
   46bac:	103fe41e 	bne	r2,zero,46b40 <_Balloc+0x30>
   46bb0:	003ff206 	br	46b7c <_Balloc+0x6c>
   46bb4:	0047ed80 	call	47ed8 <_calloc_r>
   46bb8:	103ff026 	beq	r2,zero,46b7c <_Balloc+0x6c>
   46bbc:	1021883a 	mov	r16,r2
   46bc0:	14800115 	stw	r18,4(r2)
   46bc4:	14400215 	stw	r17,8(r2)
   46bc8:	003fea06 	br	46b74 <_Balloc+0x64>

00046bcc <__d2b>:
   46bcc:	defff504 	addi	sp,sp,-44
   46bd0:	dcc00515 	stw	r19,20(sp)
   46bd4:	04c00044 	movi	r19,1
   46bd8:	dc000215 	stw	r16,8(sp)
   46bdc:	2821883a 	mov	r16,r5
   46be0:	980b883a 	mov	r5,r19
   46be4:	ddc00915 	stw	r23,36(sp)
   46be8:	dd800815 	stw	r22,32(sp)
   46bec:	dd400715 	stw	r21,28(sp)
   46bf0:	dd000615 	stw	r20,24(sp)
   46bf4:	dc800415 	stw	r18,16(sp)
   46bf8:	dc400315 	stw	r17,12(sp)
   46bfc:	dfc00a15 	stw	ra,40(sp)
   46c00:	3023883a 	mov	r17,r6
   46c04:	382d883a 	mov	r22,r7
   46c08:	ddc00b17 	ldw	r23,44(sp)
   46c0c:	0046b100 	call	46b10 <_Balloc>
   46c10:	1025883a 	mov	r18,r2
   46c14:	00a00034 	movhi	r2,32768
   46c18:	10bfffc4 	addi	r2,r2,-1
   46c1c:	8888703a 	and	r4,r17,r2
   46c20:	202ad53a 	srli	r21,r4,20
   46c24:	00800434 	movhi	r2,16
   46c28:	10bfffc4 	addi	r2,r2,-1
   46c2c:	8886703a 	and	r3,r17,r2
   46c30:	a829003a 	cmpeq	r20,r21,zero
   46c34:	800b883a 	mov	r5,r16
   46c38:	d8c00115 	stw	r3,4(sp)
   46c3c:	94000504 	addi	r16,r18,20
   46c40:	a000021e 	bne	r20,zero,46c4c <__d2b+0x80>
   46c44:	18c00434 	orhi	r3,r3,16
   46c48:	d8c00115 	stw	r3,4(sp)
   46c4c:	28002726 	beq	r5,zero,46cec <__d2b+0x120>
   46c50:	d809883a 	mov	r4,sp
   46c54:	d9400015 	stw	r5,0(sp)
   46c58:	00466280 	call	46628 <__lo0bits>
   46c5c:	100d883a 	mov	r6,r2
   46c60:	10003526 	beq	r2,zero,46d38 <__d2b+0x16c>
   46c64:	d8c00117 	ldw	r3,4(sp)
   46c68:	00800804 	movi	r2,32
   46c6c:	1185c83a 	sub	r2,r2,r6
   46c70:	d9000017 	ldw	r4,0(sp)
   46c74:	1886983a 	sll	r3,r3,r2
   46c78:	1906b03a 	or	r3,r3,r4
   46c7c:	90c00515 	stw	r3,20(r18)
   46c80:	d8c00117 	ldw	r3,4(sp)
   46c84:	1986d83a 	srl	r3,r3,r6
   46c88:	d8c00115 	stw	r3,4(sp)
   46c8c:	180b003a 	cmpeq	r5,r3,zero
   46c90:	00800084 	movi	r2,2
   46c94:	114bc83a 	sub	r5,r2,r5
   46c98:	80c00115 	stw	r3,4(r16)
   46c9c:	91400415 	stw	r5,16(r18)
   46ca0:	a0001a1e 	bne	r20,zero,46d0c <__d2b+0x140>
   46ca4:	3545883a 	add	r2,r6,r21
   46ca8:	10bef344 	addi	r2,r2,-1075
   46cac:	00c00d44 	movi	r3,53
   46cb0:	b0800015 	stw	r2,0(r22)
   46cb4:	1987c83a 	sub	r3,r3,r6
   46cb8:	b8c00015 	stw	r3,0(r23)
   46cbc:	9005883a 	mov	r2,r18
   46cc0:	dfc00a17 	ldw	ra,40(sp)
   46cc4:	ddc00917 	ldw	r23,36(sp)
   46cc8:	dd800817 	ldw	r22,32(sp)
   46ccc:	dd400717 	ldw	r21,28(sp)
   46cd0:	dd000617 	ldw	r20,24(sp)
   46cd4:	dcc00517 	ldw	r19,20(sp)
   46cd8:	dc800417 	ldw	r18,16(sp)
   46cdc:	dc400317 	ldw	r17,12(sp)
   46ce0:	dc000217 	ldw	r16,8(sp)
   46ce4:	dec00b04 	addi	sp,sp,44
   46ce8:	f800283a 	ret
   46cec:	d9000104 	addi	r4,sp,4
   46cf0:	00466280 	call	46628 <__lo0bits>
   46cf4:	11800804 	addi	r6,r2,32
   46cf8:	d8800117 	ldw	r2,4(sp)
   46cfc:	94c00415 	stw	r19,16(r18)
   46d00:	980b883a 	mov	r5,r19
   46d04:	90800515 	stw	r2,20(r18)
   46d08:	a03fe626 	beq	r20,zero,46ca4 <__d2b+0xd8>
   46d0c:	2945883a 	add	r2,r5,r5
   46d10:	1085883a 	add	r2,r2,r2
   46d14:	1405883a 	add	r2,r2,r16
   46d18:	113fff17 	ldw	r4,-4(r2)
   46d1c:	30fef384 	addi	r3,r6,-1074
   46d20:	2820917a 	slli	r16,r5,5
   46d24:	b0c00015 	stw	r3,0(r22)
   46d28:	00465b80 	call	465b8 <__hi0bits>
   46d2c:	80a1c83a 	sub	r16,r16,r2
   46d30:	bc000015 	stw	r16,0(r23)
   46d34:	003fe106 	br	46cbc <__d2b+0xf0>
   46d38:	d8800017 	ldw	r2,0(sp)
   46d3c:	90800515 	stw	r2,20(r18)
   46d40:	d8c00117 	ldw	r3,4(sp)
   46d44:	003fd106 	br	46c8c <__d2b+0xc0>

00046d48 <__mdiff>:
   46d48:	defffb04 	addi	sp,sp,-20
   46d4c:	dc000015 	stw	r16,0(sp)
   46d50:	2821883a 	mov	r16,r5
   46d54:	dc800215 	stw	r18,8(sp)
   46d58:	300b883a 	mov	r5,r6
   46d5c:	2025883a 	mov	r18,r4
   46d60:	8009883a 	mov	r4,r16
   46d64:	dc400115 	stw	r17,4(sp)
   46d68:	dfc00415 	stw	ra,16(sp)
   46d6c:	dcc00315 	stw	r19,12(sp)
   46d70:	3023883a 	mov	r17,r6
   46d74:	00466ec0 	call	466ec <__mcmp>
   46d78:	10004226 	beq	r2,zero,46e84 <__mdiff+0x13c>
   46d7c:	10005016 	blt	r2,zero,46ec0 <__mdiff+0x178>
   46d80:	0027883a 	mov	r19,zero
   46d84:	81400117 	ldw	r5,4(r16)
   46d88:	9009883a 	mov	r4,r18
   46d8c:	0046b100 	call	46b10 <_Balloc>
   46d90:	1019883a 	mov	r12,r2
   46d94:	82800417 	ldw	r10,16(r16)
   46d98:	88800417 	ldw	r2,16(r17)
   46d9c:	81800504 	addi	r6,r16,20
   46da0:	5287883a 	add	r3,r10,r10
   46da4:	1085883a 	add	r2,r2,r2
   46da8:	18c7883a 	add	r3,r3,r3
   46dac:	1085883a 	add	r2,r2,r2
   46db0:	8a000504 	addi	r8,r17,20
   46db4:	64c00315 	stw	r19,12(r12)
   46db8:	30db883a 	add	r13,r6,r3
   46dbc:	4097883a 	add	r11,r8,r2
   46dc0:	61c00504 	addi	r7,r12,20
   46dc4:	0013883a 	mov	r9,zero
   46dc8:	31000017 	ldw	r4,0(r6)
   46dcc:	41400017 	ldw	r5,0(r8)
   46dd0:	42000104 	addi	r8,r8,4
   46dd4:	20bfffcc 	andi	r2,r4,65535
   46dd8:	28ffffcc 	andi	r3,r5,65535
   46ddc:	10c5c83a 	sub	r2,r2,r3
   46de0:	1245883a 	add	r2,r2,r9
   46de4:	2008d43a 	srli	r4,r4,16
   46de8:	280ad43a 	srli	r5,r5,16
   46dec:	1007d43a 	srai	r3,r2,16
   46df0:	3880000d 	sth	r2,0(r7)
   46df4:	2149c83a 	sub	r4,r4,r5
   46df8:	20c9883a 	add	r4,r4,r3
   46dfc:	3900008d 	sth	r4,2(r7)
   46e00:	31800104 	addi	r6,r6,4
   46e04:	39c00104 	addi	r7,r7,4
   46e08:	2013d43a 	srai	r9,r4,16
   46e0c:	42ffee36 	bltu	r8,r11,46dc8 <__mdiff+0x80>
   46e10:	33400c2e 	bgeu	r6,r13,46e44 <__mdiff+0xfc>
   46e14:	30800017 	ldw	r2,0(r6)
   46e18:	31800104 	addi	r6,r6,4
   46e1c:	10ffffcc 	andi	r3,r2,65535
   46e20:	1a47883a 	add	r3,r3,r9
   46e24:	1004d43a 	srli	r2,r2,16
   46e28:	1809d43a 	srai	r4,r3,16
   46e2c:	38c0000d 	sth	r3,0(r7)
   46e30:	1105883a 	add	r2,r2,r4
   46e34:	3880008d 	sth	r2,2(r7)
   46e38:	1013d43a 	srai	r9,r2,16
   46e3c:	39c00104 	addi	r7,r7,4
   46e40:	337ff436 	bltu	r6,r13,46e14 <__mdiff+0xcc>
   46e44:	38bfff17 	ldw	r2,-4(r7)
   46e48:	38ffff04 	addi	r3,r7,-4
   46e4c:	1000041e 	bne	r2,zero,46e60 <__mdiff+0x118>
   46e50:	18ffff04 	addi	r3,r3,-4
   46e54:	18800017 	ldw	r2,0(r3)
   46e58:	52bfffc4 	addi	r10,r10,-1
   46e5c:	103ffc26 	beq	r2,zero,46e50 <__mdiff+0x108>
   46e60:	6005883a 	mov	r2,r12
   46e64:	62800415 	stw	r10,16(r12)
   46e68:	dfc00417 	ldw	ra,16(sp)
   46e6c:	dcc00317 	ldw	r19,12(sp)
   46e70:	dc800217 	ldw	r18,8(sp)
   46e74:	dc400117 	ldw	r17,4(sp)
   46e78:	dc000017 	ldw	r16,0(sp)
   46e7c:	dec00504 	addi	sp,sp,20
   46e80:	f800283a 	ret
   46e84:	9009883a 	mov	r4,r18
   46e88:	000b883a 	mov	r5,zero
   46e8c:	0046b100 	call	46b10 <_Balloc>
   46e90:	1019883a 	mov	r12,r2
   46e94:	00800044 	movi	r2,1
   46e98:	60800415 	stw	r2,16(r12)
   46e9c:	6005883a 	mov	r2,r12
   46ea0:	60000515 	stw	zero,20(r12)
   46ea4:	dfc00417 	ldw	ra,16(sp)
   46ea8:	dcc00317 	ldw	r19,12(sp)
   46eac:	dc800217 	ldw	r18,8(sp)
   46eb0:	dc400117 	ldw	r17,4(sp)
   46eb4:	dc000017 	ldw	r16,0(sp)
   46eb8:	dec00504 	addi	sp,sp,20
   46ebc:	f800283a 	ret
   46ec0:	880d883a 	mov	r6,r17
   46ec4:	04c00044 	movi	r19,1
   46ec8:	8023883a 	mov	r17,r16
   46ecc:	3021883a 	mov	r16,r6
   46ed0:	003fac06 	br	46d84 <__mdiff+0x3c>

00046ed4 <__lshift>:
   46ed4:	defff904 	addi	sp,sp,-28
   46ed8:	28800417 	ldw	r2,16(r5)
   46edc:	dc000015 	stw	r16,0(sp)
   46ee0:	3021d17a 	srai	r16,r6,5
   46ee4:	28c00217 	ldw	r3,8(r5)
   46ee8:	10800044 	addi	r2,r2,1
   46eec:	dc400115 	stw	r17,4(sp)
   46ef0:	80a3883a 	add	r17,r16,r2
   46ef4:	dd400515 	stw	r21,20(sp)
   46ef8:	dd000415 	stw	r20,16(sp)
   46efc:	dc800215 	stw	r18,8(sp)
   46f00:	dfc00615 	stw	ra,24(sp)
   46f04:	2825883a 	mov	r18,r5
   46f08:	dcc00315 	stw	r19,12(sp)
   46f0c:	3029883a 	mov	r20,r6
   46f10:	202b883a 	mov	r21,r4
   46f14:	29400117 	ldw	r5,4(r5)
   46f18:	1c40030e 	bge	r3,r17,46f28 <__lshift+0x54>
   46f1c:	18c7883a 	add	r3,r3,r3
   46f20:	29400044 	addi	r5,r5,1
   46f24:	1c7ffd16 	blt	r3,r17,46f1c <__lshift+0x48>
   46f28:	a809883a 	mov	r4,r21
   46f2c:	0046b100 	call	46b10 <_Balloc>
   46f30:	1027883a 	mov	r19,r2
   46f34:	11400504 	addi	r5,r2,20
   46f38:	0400090e 	bge	zero,r16,46f60 <__lshift+0x8c>
   46f3c:	2805883a 	mov	r2,r5
   46f40:	0007883a 	mov	r3,zero
   46f44:	18c00044 	addi	r3,r3,1
   46f48:	10000015 	stw	zero,0(r2)
   46f4c:	10800104 	addi	r2,r2,4
   46f50:	80fffc1e 	bne	r16,r3,46f44 <__lshift+0x70>
   46f54:	8405883a 	add	r2,r16,r16
   46f58:	1085883a 	add	r2,r2,r2
   46f5c:	288b883a 	add	r5,r5,r2
   46f60:	90800417 	ldw	r2,16(r18)
   46f64:	91000504 	addi	r4,r18,20
   46f68:	a18007cc 	andi	r6,r20,31
   46f6c:	1085883a 	add	r2,r2,r2
   46f70:	1085883a 	add	r2,r2,r2
   46f74:	208f883a 	add	r7,r4,r2
   46f78:	30001e26 	beq	r6,zero,46ff4 <__lshift+0x120>
   46f7c:	00800804 	movi	r2,32
   46f80:	1191c83a 	sub	r8,r2,r6
   46f84:	0007883a 	mov	r3,zero
   46f88:	20800017 	ldw	r2,0(r4)
   46f8c:	1184983a 	sll	r2,r2,r6
   46f90:	1884b03a 	or	r2,r3,r2
   46f94:	28800015 	stw	r2,0(r5)
   46f98:	20c00017 	ldw	r3,0(r4)
   46f9c:	21000104 	addi	r4,r4,4
   46fa0:	29400104 	addi	r5,r5,4
   46fa4:	1a06d83a 	srl	r3,r3,r8
   46fa8:	21fff736 	bltu	r4,r7,46f88 <__lshift+0xb4>
   46fac:	28c00015 	stw	r3,0(r5)
   46fb0:	18000126 	beq	r3,zero,46fb8 <__lshift+0xe4>
   46fb4:	8c400044 	addi	r17,r17,1
   46fb8:	88bfffc4 	addi	r2,r17,-1
   46fbc:	98800415 	stw	r2,16(r19)
   46fc0:	a809883a 	mov	r4,r21
   46fc4:	900b883a 	mov	r5,r18
   46fc8:	00465900 	call	46590 <_Bfree>
   46fcc:	9805883a 	mov	r2,r19
   46fd0:	dfc00617 	ldw	ra,24(sp)
   46fd4:	dd400517 	ldw	r21,20(sp)
   46fd8:	dd000417 	ldw	r20,16(sp)
   46fdc:	dcc00317 	ldw	r19,12(sp)
   46fe0:	dc800217 	ldw	r18,8(sp)
   46fe4:	dc400117 	ldw	r17,4(sp)
   46fe8:	dc000017 	ldw	r16,0(sp)
   46fec:	dec00704 	addi	sp,sp,28
   46ff0:	f800283a 	ret
   46ff4:	20800017 	ldw	r2,0(r4)
   46ff8:	21000104 	addi	r4,r4,4
   46ffc:	28800015 	stw	r2,0(r5)
   47000:	29400104 	addi	r5,r5,4
   47004:	21ffec2e 	bgeu	r4,r7,46fb8 <__lshift+0xe4>
   47008:	20800017 	ldw	r2,0(r4)
   4700c:	21000104 	addi	r4,r4,4
   47010:	28800015 	stw	r2,0(r5)
   47014:	29400104 	addi	r5,r5,4
   47018:	21fff636 	bltu	r4,r7,46ff4 <__lshift+0x120>
   4701c:	003fe606 	br	46fb8 <__lshift+0xe4>

00047020 <__multiply>:
   47020:	defff904 	addi	sp,sp,-28
   47024:	dcc00315 	stw	r19,12(sp)
   47028:	dc800215 	stw	r18,8(sp)
   4702c:	2cc00417 	ldw	r19,16(r5)
   47030:	34800417 	ldw	r18,16(r6)
   47034:	dd000415 	stw	r20,16(sp)
   47038:	dc400115 	stw	r17,4(sp)
   4703c:	dfc00615 	stw	ra,24(sp)
   47040:	dd400515 	stw	r21,20(sp)
   47044:	dc000015 	stw	r16,0(sp)
   47048:	2823883a 	mov	r17,r5
   4704c:	3029883a 	mov	r20,r6
   47050:	9c80040e 	bge	r19,r18,47064 <__multiply+0x44>
   47054:	9027883a 	mov	r19,r18
   47058:	2c800417 	ldw	r18,16(r5)
   4705c:	2829883a 	mov	r20,r5
   47060:	3023883a 	mov	r17,r6
   47064:	88800217 	ldw	r2,8(r17)
   47068:	9ca1883a 	add	r16,r19,r18
   4706c:	89400117 	ldw	r5,4(r17)
   47070:	1400010e 	bge	r2,r16,47078 <__multiply+0x58>
   47074:	29400044 	addi	r5,r5,1
   47078:	0046b100 	call	46b10 <_Balloc>
   4707c:	102b883a 	mov	r21,r2
   47080:	8405883a 	add	r2,r16,r16
   47084:	1085883a 	add	r2,r2,r2
   47088:	a9000504 	addi	r4,r21,20
   4708c:	209d883a 	add	r14,r4,r2
   47090:	2380042e 	bgeu	r4,r14,470a4 <__multiply+0x84>
   47094:	2005883a 	mov	r2,r4
   47098:	10000015 	stw	zero,0(r2)
   4709c:	10800104 	addi	r2,r2,4
   470a0:	13bffd36 	bltu	r2,r14,47098 <__multiply+0x78>
   470a4:	9485883a 	add	r2,r18,r18
   470a8:	9cc7883a 	add	r3,r19,r19
   470ac:	a1800504 	addi	r6,r20,20
   470b0:	1085883a 	add	r2,r2,r2
   470b4:	8b400504 	addi	r13,r17,20
   470b8:	18c7883a 	add	r3,r3,r3
   470bc:	309f883a 	add	r15,r6,r2
   470c0:	68d7883a 	add	r11,r13,r3
   470c4:	33c03b2e 	bgeu	r6,r15,471b4 <__multiply+0x194>
   470c8:	2019883a 	mov	r12,r4
   470cc:	30800017 	ldw	r2,0(r6)
   470d0:	127fffcc 	andi	r9,r2,65535
   470d4:	48001826 	beq	r9,zero,47138 <__multiply+0x118>
   470d8:	6811883a 	mov	r8,r13
   470dc:	600f883a 	mov	r7,r12
   470e0:	0015883a 	mov	r10,zero
   470e4:	40c00017 	ldw	r3,0(r8)
   470e8:	39400017 	ldw	r5,0(r7)
   470ec:	42000104 	addi	r8,r8,4
   470f0:	193fffcc 	andi	r4,r3,65535
   470f4:	4909383a 	mul	r4,r9,r4
   470f8:	1806d43a 	srli	r3,r3,16
   470fc:	28bfffcc 	andi	r2,r5,65535
   47100:	5085883a 	add	r2,r10,r2
   47104:	2089883a 	add	r4,r4,r2
   47108:	48c7383a 	mul	r3,r9,r3
   4710c:	280ad43a 	srli	r5,r5,16
   47110:	2004d43a 	srli	r2,r4,16
   47114:	3900000d 	sth	r4,0(r7)
   47118:	1947883a 	add	r3,r3,r5
   4711c:	10c5883a 	add	r2,r2,r3
   47120:	3880008d 	sth	r2,2(r7)
   47124:	1014d43a 	srli	r10,r2,16
   47128:	39c00104 	addi	r7,r7,4
   4712c:	42ffed36 	bltu	r8,r11,470e4 <__multiply+0xc4>
   47130:	3a800015 	stw	r10,0(r7)
   47134:	30800017 	ldw	r2,0(r6)
   47138:	1012d43a 	srli	r9,r2,16
   4713c:	48001926 	beq	r9,zero,471a4 <__multiply+0x184>
   47140:	60800017 	ldw	r2,0(r12)
   47144:	6811883a 	mov	r8,r13
   47148:	600f883a 	mov	r7,r12
   4714c:	0015883a 	mov	r10,zero
   47150:	100b883a 	mov	r5,r2
   47154:	41000017 	ldw	r4,0(r8)
   47158:	2806d43a 	srli	r3,r5,16
   4715c:	3880000d 	sth	r2,0(r7)
   47160:	20bfffcc 	andi	r2,r4,65535
   47164:	4885383a 	mul	r2,r9,r2
   47168:	50c7883a 	add	r3,r10,r3
   4716c:	2008d43a 	srli	r4,r4,16
   47170:	10c5883a 	add	r2,r2,r3
   47174:	3880008d 	sth	r2,2(r7)
   47178:	39c00104 	addi	r7,r7,4
   4717c:	39400017 	ldw	r5,0(r7)
   47180:	4909383a 	mul	r4,r9,r4
   47184:	1004d43a 	srli	r2,r2,16
   47188:	28ffffcc 	andi	r3,r5,65535
   4718c:	20c9883a 	add	r4,r4,r3
   47190:	1105883a 	add	r2,r2,r4
   47194:	42000104 	addi	r8,r8,4
   47198:	1014d43a 	srli	r10,r2,16
   4719c:	42ffed36 	bltu	r8,r11,47154 <__multiply+0x134>
   471a0:	38800015 	stw	r2,0(r7)
   471a4:	31800104 	addi	r6,r6,4
   471a8:	33c0022e 	bgeu	r6,r15,471b4 <__multiply+0x194>
   471ac:	63000104 	addi	r12,r12,4
   471b0:	003fc606 	br	470cc <__multiply+0xac>
   471b4:	0400090e 	bge	zero,r16,471dc <__multiply+0x1bc>
   471b8:	70bfff17 	ldw	r2,-4(r14)
   471bc:	70ffff04 	addi	r3,r14,-4
   471c0:	10000326 	beq	r2,zero,471d0 <__multiply+0x1b0>
   471c4:	00000506 	br	471dc <__multiply+0x1bc>
   471c8:	18800017 	ldw	r2,0(r3)
   471cc:	1000031e 	bne	r2,zero,471dc <__multiply+0x1bc>
   471d0:	843fffc4 	addi	r16,r16,-1
   471d4:	18ffff04 	addi	r3,r3,-4
   471d8:	803ffb1e 	bne	r16,zero,471c8 <__multiply+0x1a8>
   471dc:	a805883a 	mov	r2,r21
   471e0:	ac000415 	stw	r16,16(r21)
   471e4:	dfc00617 	ldw	ra,24(sp)
   471e8:	dd400517 	ldw	r21,20(sp)
   471ec:	dd000417 	ldw	r20,16(sp)
   471f0:	dcc00317 	ldw	r19,12(sp)
   471f4:	dc800217 	ldw	r18,8(sp)
   471f8:	dc400117 	ldw	r17,4(sp)
   471fc:	dc000017 	ldw	r16,0(sp)
   47200:	dec00704 	addi	sp,sp,28
   47204:	f800283a 	ret

00047208 <__i2b>:
   47208:	defffd04 	addi	sp,sp,-12
   4720c:	dc000015 	stw	r16,0(sp)
   47210:	04000044 	movi	r16,1
   47214:	dc800115 	stw	r18,4(sp)
   47218:	2825883a 	mov	r18,r5
   4721c:	800b883a 	mov	r5,r16
   47220:	dfc00215 	stw	ra,8(sp)
   47224:	0046b100 	call	46b10 <_Balloc>
   47228:	14000415 	stw	r16,16(r2)
   4722c:	14800515 	stw	r18,20(r2)
   47230:	dfc00217 	ldw	ra,8(sp)
   47234:	dc800117 	ldw	r18,4(sp)
   47238:	dc000017 	ldw	r16,0(sp)
   4723c:	dec00304 	addi	sp,sp,12
   47240:	f800283a 	ret

00047244 <__multadd>:
   47244:	defffa04 	addi	sp,sp,-24
   47248:	dc800215 	stw	r18,8(sp)
   4724c:	2c800417 	ldw	r18,16(r5)
   47250:	dd000415 	stw	r20,16(sp)
   47254:	dcc00315 	stw	r19,12(sp)
   47258:	dc000015 	stw	r16,0(sp)
   4725c:	dfc00515 	stw	ra,20(sp)
   47260:	3821883a 	mov	r16,r7
   47264:	dc400115 	stw	r17,4(sp)
   47268:	2827883a 	mov	r19,r5
   4726c:	2029883a 	mov	r20,r4
   47270:	2a000504 	addi	r8,r5,20
   47274:	000f883a 	mov	r7,zero
   47278:	40800017 	ldw	r2,0(r8)
   4727c:	39c00044 	addi	r7,r7,1
   47280:	10ffffcc 	andi	r3,r2,65535
   47284:	1987383a 	mul	r3,r3,r6
   47288:	1004d43a 	srli	r2,r2,16
   4728c:	1c07883a 	add	r3,r3,r16
   47290:	180ad43a 	srli	r5,r3,16
   47294:	1185383a 	mul	r2,r2,r6
   47298:	18ffffcc 	andi	r3,r3,65535
   4729c:	1145883a 	add	r2,r2,r5
   472a0:	1008943a 	slli	r4,r2,16
   472a4:	1020d43a 	srli	r16,r2,16
   472a8:	20c9883a 	add	r4,r4,r3
   472ac:	41000015 	stw	r4,0(r8)
   472b0:	42000104 	addi	r8,r8,4
   472b4:	3cbff016 	blt	r7,r18,47278 <__multadd+0x34>
   472b8:	80000826 	beq	r16,zero,472dc <__multadd+0x98>
   472bc:	98800217 	ldw	r2,8(r19)
   472c0:	90800f0e 	bge	r18,r2,47300 <__multadd+0xbc>
   472c4:	9485883a 	add	r2,r18,r18
   472c8:	1085883a 	add	r2,r2,r2
   472cc:	14c5883a 	add	r2,r2,r19
   472d0:	90c00044 	addi	r3,r18,1
   472d4:	14000515 	stw	r16,20(r2)
   472d8:	98c00415 	stw	r3,16(r19)
   472dc:	9805883a 	mov	r2,r19
   472e0:	dfc00517 	ldw	ra,20(sp)
   472e4:	dd000417 	ldw	r20,16(sp)
   472e8:	dcc00317 	ldw	r19,12(sp)
   472ec:	dc800217 	ldw	r18,8(sp)
   472f0:	dc400117 	ldw	r17,4(sp)
   472f4:	dc000017 	ldw	r16,0(sp)
   472f8:	dec00604 	addi	sp,sp,24
   472fc:	f800283a 	ret
   47300:	99400117 	ldw	r5,4(r19)
   47304:	a009883a 	mov	r4,r20
   47308:	29400044 	addi	r5,r5,1
   4730c:	0046b100 	call	46b10 <_Balloc>
   47310:	99800417 	ldw	r6,16(r19)
   47314:	99400304 	addi	r5,r19,12
   47318:	11000304 	addi	r4,r2,12
   4731c:	318d883a 	add	r6,r6,r6
   47320:	318d883a 	add	r6,r6,r6
   47324:	31800204 	addi	r6,r6,8
   47328:	1023883a 	mov	r17,r2
   4732c:	00463780 	call	46378 <memcpy>
   47330:	980b883a 	mov	r5,r19
   47334:	a009883a 	mov	r4,r20
   47338:	00465900 	call	46590 <_Bfree>
   4733c:	8827883a 	mov	r19,r17
   47340:	003fe006 	br	472c4 <__multadd+0x80>

00047344 <__pow5mult>:
   47344:	defffa04 	addi	sp,sp,-24
   47348:	308000cc 	andi	r2,r6,3
   4734c:	dd000415 	stw	r20,16(sp)
   47350:	dcc00315 	stw	r19,12(sp)
   47354:	dc000015 	stw	r16,0(sp)
   47358:	dfc00515 	stw	ra,20(sp)
   4735c:	dc800215 	stw	r18,8(sp)
   47360:	dc400115 	stw	r17,4(sp)
   47364:	3021883a 	mov	r16,r6
   47368:	2027883a 	mov	r19,r4
   4736c:	2829883a 	mov	r20,r5
   47370:	10002b1e 	bne	r2,zero,47420 <__pow5mult+0xdc>
   47374:	8025d0ba 	srai	r18,r16,2
   47378:	90001b26 	beq	r18,zero,473e8 <__pow5mult+0xa4>
   4737c:	9c001217 	ldw	r16,72(r19)
   47380:	8000081e 	bne	r16,zero,473a4 <__pow5mult+0x60>
   47384:	00003006 	br	47448 <__pow5mult+0x104>
   47388:	800b883a 	mov	r5,r16
   4738c:	800d883a 	mov	r6,r16
   47390:	9809883a 	mov	r4,r19
   47394:	90001426 	beq	r18,zero,473e8 <__pow5mult+0xa4>
   47398:	80800017 	ldw	r2,0(r16)
   4739c:	10001b26 	beq	r2,zero,4740c <__pow5mult+0xc8>
   473a0:	1021883a 	mov	r16,r2
   473a4:	9080004c 	andi	r2,r18,1
   473a8:	1005003a 	cmpeq	r2,r2,zero
   473ac:	9025d07a 	srai	r18,r18,1
   473b0:	800d883a 	mov	r6,r16
   473b4:	9809883a 	mov	r4,r19
   473b8:	a00b883a 	mov	r5,r20
   473bc:	103ff21e 	bne	r2,zero,47388 <__pow5mult+0x44>
   473c0:	00470200 	call	47020 <__multiply>
   473c4:	a00b883a 	mov	r5,r20
   473c8:	9809883a 	mov	r4,r19
   473cc:	1023883a 	mov	r17,r2
   473d0:	00465900 	call	46590 <_Bfree>
   473d4:	8829883a 	mov	r20,r17
   473d8:	800b883a 	mov	r5,r16
   473dc:	800d883a 	mov	r6,r16
   473e0:	9809883a 	mov	r4,r19
   473e4:	903fec1e 	bne	r18,zero,47398 <__pow5mult+0x54>
   473e8:	a005883a 	mov	r2,r20
   473ec:	dfc00517 	ldw	ra,20(sp)
   473f0:	dd000417 	ldw	r20,16(sp)
   473f4:	dcc00317 	ldw	r19,12(sp)
   473f8:	dc800217 	ldw	r18,8(sp)
   473fc:	dc400117 	ldw	r17,4(sp)
   47400:	dc000017 	ldw	r16,0(sp)
   47404:	dec00604 	addi	sp,sp,24
   47408:	f800283a 	ret
   4740c:	00470200 	call	47020 <__multiply>
   47410:	80800015 	stw	r2,0(r16)
   47414:	1021883a 	mov	r16,r2
   47418:	10000015 	stw	zero,0(r2)
   4741c:	003fe106 	br	473a4 <__pow5mult+0x60>
   47420:	1085883a 	add	r2,r2,r2
   47424:	00c00174 	movhi	r3,5
   47428:	18f60304 	addi	r3,r3,-10228
   4742c:	1085883a 	add	r2,r2,r2
   47430:	10c5883a 	add	r2,r2,r3
   47434:	11bfff17 	ldw	r6,-4(r2)
   47438:	000f883a 	mov	r7,zero
   4743c:	00472440 	call	47244 <__multadd>
   47440:	1029883a 	mov	r20,r2
   47444:	003fcb06 	br	47374 <__pow5mult+0x30>
   47448:	9809883a 	mov	r4,r19
   4744c:	01409c44 	movi	r5,625
   47450:	00472080 	call	47208 <__i2b>
   47454:	98801215 	stw	r2,72(r19)
   47458:	1021883a 	mov	r16,r2
   4745c:	10000015 	stw	zero,0(r2)
   47460:	003fd006 	br	473a4 <__pow5mult+0x60>

00047464 <__s2b>:
   47464:	defff904 	addi	sp,sp,-28
   47468:	dcc00315 	stw	r19,12(sp)
   4746c:	dc800215 	stw	r18,8(sp)
   47470:	2827883a 	mov	r19,r5
   47474:	2025883a 	mov	r18,r4
   47478:	01400244 	movi	r5,9
   4747c:	39000204 	addi	r4,r7,8
   47480:	dd000415 	stw	r20,16(sp)
   47484:	dc400115 	stw	r17,4(sp)
   47488:	dfc00615 	stw	ra,24(sp)
   4748c:	dd400515 	stw	r21,20(sp)
   47490:	dc000015 	stw	r16,0(sp)
   47494:	3829883a 	mov	r20,r7
   47498:	3023883a 	mov	r17,r6
   4749c:	0040d240 	call	40d24 <__divsi3>
   474a0:	00c00044 	movi	r3,1
   474a4:	1880350e 	bge	r3,r2,4757c <__s2b+0x118>
   474a8:	000b883a 	mov	r5,zero
   474ac:	18c7883a 	add	r3,r3,r3
   474b0:	29400044 	addi	r5,r5,1
   474b4:	18bffd16 	blt	r3,r2,474ac <__s2b+0x48>
   474b8:	9009883a 	mov	r4,r18
   474bc:	0046b100 	call	46b10 <_Balloc>
   474c0:	1011883a 	mov	r8,r2
   474c4:	d8800717 	ldw	r2,28(sp)
   474c8:	00c00044 	movi	r3,1
   474cc:	01800244 	movi	r6,9
   474d0:	40800515 	stw	r2,20(r8)
   474d4:	40c00415 	stw	r3,16(r8)
   474d8:	3440260e 	bge	r6,r17,47574 <__s2b+0x110>
   474dc:	3021883a 	mov	r16,r6
   474e0:	99ab883a 	add	r21,r19,r6
   474e4:	9c05883a 	add	r2,r19,r16
   474e8:	11c00007 	ldb	r7,0(r2)
   474ec:	400b883a 	mov	r5,r8
   474f0:	9009883a 	mov	r4,r18
   474f4:	39fff404 	addi	r7,r7,-48
   474f8:	01800284 	movi	r6,10
   474fc:	00472440 	call	47244 <__multadd>
   47500:	84000044 	addi	r16,r16,1
   47504:	1011883a 	mov	r8,r2
   47508:	8c3ff61e 	bne	r17,r16,474e4 <__s2b+0x80>
   4750c:	ac45883a 	add	r2,r21,r17
   47510:	117ffe04 	addi	r5,r2,-8
   47514:	880d883a 	mov	r6,r17
   47518:	35000c0e 	bge	r6,r20,4754c <__s2b+0xe8>
   4751c:	a185c83a 	sub	r2,r20,r6
   47520:	2821883a 	mov	r16,r5
   47524:	28a3883a 	add	r17,r5,r2
   47528:	81c00007 	ldb	r7,0(r16)
   4752c:	400b883a 	mov	r5,r8
   47530:	9009883a 	mov	r4,r18
   47534:	39fff404 	addi	r7,r7,-48
   47538:	01800284 	movi	r6,10
   4753c:	00472440 	call	47244 <__multadd>
   47540:	84000044 	addi	r16,r16,1
   47544:	1011883a 	mov	r8,r2
   47548:	847ff71e 	bne	r16,r17,47528 <__s2b+0xc4>
   4754c:	4005883a 	mov	r2,r8
   47550:	dfc00617 	ldw	ra,24(sp)
   47554:	dd400517 	ldw	r21,20(sp)
   47558:	dd000417 	ldw	r20,16(sp)
   4755c:	dcc00317 	ldw	r19,12(sp)
   47560:	dc800217 	ldw	r18,8(sp)
   47564:	dc400117 	ldw	r17,4(sp)
   47568:	dc000017 	ldw	r16,0(sp)
   4756c:	dec00704 	addi	sp,sp,28
   47570:	f800283a 	ret
   47574:	99400284 	addi	r5,r19,10
   47578:	003fe706 	br	47518 <__s2b+0xb4>
   4757c:	000b883a 	mov	r5,zero
   47580:	003fcd06 	br	474b8 <__s2b+0x54>

00047584 <_realloc_r>:
   47584:	defff404 	addi	sp,sp,-48
   47588:	dd800815 	stw	r22,32(sp)
   4758c:	dc800415 	stw	r18,16(sp)
   47590:	dc400315 	stw	r17,12(sp)
   47594:	dfc00b15 	stw	ra,44(sp)
   47598:	df000a15 	stw	fp,40(sp)
   4759c:	ddc00915 	stw	r23,36(sp)
   475a0:	dd400715 	stw	r21,28(sp)
   475a4:	dd000615 	stw	r20,24(sp)
   475a8:	dcc00515 	stw	r19,20(sp)
   475ac:	dc000215 	stw	r16,8(sp)
   475b0:	2825883a 	mov	r18,r5
   475b4:	3023883a 	mov	r17,r6
   475b8:	202d883a 	mov	r22,r4
   475bc:	2800c926 	beq	r5,zero,478e4 <_realloc_r+0x360>
   475c0:	004acbc0 	call	4acbc <__malloc_lock>
   475c4:	943ffe04 	addi	r16,r18,-8
   475c8:	88c002c4 	addi	r3,r17,11
   475cc:	00800584 	movi	r2,22
   475d0:	82000117 	ldw	r8,4(r16)
   475d4:	10c01b2e 	bgeu	r2,r3,47644 <_realloc_r+0xc0>
   475d8:	00bffe04 	movi	r2,-8
   475dc:	188e703a 	and	r7,r3,r2
   475e0:	3839883a 	mov	fp,r7
   475e4:	38001a16 	blt	r7,zero,47650 <_realloc_r+0xcc>
   475e8:	e4401936 	bltu	fp,r17,47650 <_realloc_r+0xcc>
   475ec:	013fff04 	movi	r4,-4
   475f0:	4126703a 	and	r19,r8,r4
   475f4:	99c02616 	blt	r19,r7,47690 <_realloc_r+0x10c>
   475f8:	802b883a 	mov	r21,r16
   475fc:	9829883a 	mov	r20,r19
   47600:	84000204 	addi	r16,r16,8
   47604:	a80f883a 	mov	r7,r21
   47608:	a70dc83a 	sub	r6,r20,fp
   4760c:	008003c4 	movi	r2,15
   47610:	1180c136 	bltu	r2,r6,47918 <_realloc_r+0x394>
   47614:	38800117 	ldw	r2,4(r7)
   47618:	a549883a 	add	r4,r20,r21
   4761c:	1080004c 	andi	r2,r2,1
   47620:	a084b03a 	or	r2,r20,r2
   47624:	38800115 	stw	r2,4(r7)
   47628:	20c00117 	ldw	r3,4(r4)
   4762c:	18c00054 	ori	r3,r3,1
   47630:	20c00115 	stw	r3,4(r4)
   47634:	b009883a 	mov	r4,r22
   47638:	004acdc0 	call	4acdc <__malloc_unlock>
   4763c:	8023883a 	mov	r17,r16
   47640:	00000606 	br	4765c <_realloc_r+0xd8>
   47644:	01c00404 	movi	r7,16
   47648:	3839883a 	mov	fp,r7
   4764c:	e47fe72e 	bgeu	fp,r17,475ec <_realloc_r+0x68>
   47650:	00800304 	movi	r2,12
   47654:	0023883a 	mov	r17,zero
   47658:	b0800015 	stw	r2,0(r22)
   4765c:	8805883a 	mov	r2,r17
   47660:	dfc00b17 	ldw	ra,44(sp)
   47664:	df000a17 	ldw	fp,40(sp)
   47668:	ddc00917 	ldw	r23,36(sp)
   4766c:	dd800817 	ldw	r22,32(sp)
   47670:	dd400717 	ldw	r21,28(sp)
   47674:	dd000617 	ldw	r20,24(sp)
   47678:	dcc00517 	ldw	r19,20(sp)
   4767c:	dc800417 	ldw	r18,16(sp)
   47680:	dc400317 	ldw	r17,12(sp)
   47684:	dc000217 	ldw	r16,8(sp)
   47688:	dec00c04 	addi	sp,sp,48
   4768c:	f800283a 	ret
   47690:	00800174 	movhi	r2,5
   47694:	10b75904 	addi	r2,r2,-8860
   47698:	12400217 	ldw	r9,8(r2)
   4769c:	84cd883a 	add	r6,r16,r19
   476a0:	802b883a 	mov	r21,r16
   476a4:	3240b926 	beq	r6,r9,4798c <_realloc_r+0x408>
   476a8:	31400117 	ldw	r5,4(r6)
   476ac:	00bfff84 	movi	r2,-2
   476b0:	2884703a 	and	r2,r5,r2
   476b4:	1185883a 	add	r2,r2,r6
   476b8:	10c00117 	ldw	r3,4(r2)
   476bc:	18c0004c 	andi	r3,r3,1
   476c0:	1807003a 	cmpeq	r3,r3,zero
   476c4:	1800a326 	beq	r3,zero,47954 <_realloc_r+0x3d0>
   476c8:	2908703a 	and	r4,r5,r4
   476cc:	9929883a 	add	r20,r19,r4
   476d0:	a1c0a30e 	bge	r20,r7,47960 <_realloc_r+0x3dc>
   476d4:	4080004c 	andi	r2,r8,1
   476d8:	1000551e 	bne	r2,zero,47830 <_realloc_r+0x2ac>
   476dc:	80800017 	ldw	r2,0(r16)
   476e0:	80afc83a 	sub	r23,r16,r2
   476e4:	b8c00117 	ldw	r3,4(r23)
   476e8:	00bfff04 	movi	r2,-4
   476ec:	1884703a 	and	r2,r3,r2
   476f0:	30002e26 	beq	r6,zero,477ac <_realloc_r+0x228>
   476f4:	3240b926 	beq	r6,r9,479dc <_realloc_r+0x458>
   476f8:	98a9883a 	add	r20,r19,r2
   476fc:	2509883a 	add	r4,r4,r20
   47700:	d9000015 	stw	r4,0(sp)
   47704:	21c02a16 	blt	r4,r7,477b0 <_realloc_r+0x22c>
   47708:	30800317 	ldw	r2,12(r6)
   4770c:	30c00217 	ldw	r3,8(r6)
   47710:	01400904 	movi	r5,36
   47714:	99bfff04 	addi	r6,r19,-4
   47718:	18800315 	stw	r2,12(r3)
   4771c:	10c00215 	stw	r3,8(r2)
   47720:	b9000317 	ldw	r4,12(r23)
   47724:	b8800217 	ldw	r2,8(r23)
   47728:	b82b883a 	mov	r21,r23
   4772c:	bc000204 	addi	r16,r23,8
   47730:	20800215 	stw	r2,8(r4)
   47734:	11000315 	stw	r4,12(r2)
   47738:	2980e436 	bltu	r5,r6,47acc <_realloc_r+0x548>
   4773c:	008004c4 	movi	r2,19
   47740:	9009883a 	mov	r4,r18
   47744:	8011883a 	mov	r8,r16
   47748:	11800f2e 	bgeu	r2,r6,47788 <_realloc_r+0x204>
   4774c:	90800017 	ldw	r2,0(r18)
   47750:	ba000404 	addi	r8,r23,16
   47754:	91000204 	addi	r4,r18,8
   47758:	b8800215 	stw	r2,8(r23)
   4775c:	90c00117 	ldw	r3,4(r18)
   47760:	008006c4 	movi	r2,27
   47764:	b8c00315 	stw	r3,12(r23)
   47768:	1180072e 	bgeu	r2,r6,47788 <_realloc_r+0x204>
   4776c:	90c00217 	ldw	r3,8(r18)
   47770:	ba000604 	addi	r8,r23,24
   47774:	91000404 	addi	r4,r18,16
   47778:	b8c00415 	stw	r3,16(r23)
   4777c:	90800317 	ldw	r2,12(r18)
   47780:	b8800515 	stw	r2,20(r23)
   47784:	3140e726 	beq	r6,r5,47b24 <_realloc_r+0x5a0>
   47788:	20800017 	ldw	r2,0(r4)
   4778c:	dd000017 	ldw	r20,0(sp)
   47790:	b80f883a 	mov	r7,r23
   47794:	40800015 	stw	r2,0(r8)
   47798:	20c00117 	ldw	r3,4(r4)
   4779c:	40c00115 	stw	r3,4(r8)
   477a0:	20800217 	ldw	r2,8(r4)
   477a4:	40800215 	stw	r2,8(r8)
   477a8:	003f9706 	br	47608 <_realloc_r+0x84>
   477ac:	98a9883a 	add	r20,r19,r2
   477b0:	a1c01f16 	blt	r20,r7,47830 <_realloc_r+0x2ac>
   477b4:	b8c00317 	ldw	r3,12(r23)
   477b8:	b8800217 	ldw	r2,8(r23)
   477bc:	99bfff04 	addi	r6,r19,-4
   477c0:	01400904 	movi	r5,36
   477c4:	b82b883a 	mov	r21,r23
   477c8:	18800215 	stw	r2,8(r3)
   477cc:	10c00315 	stw	r3,12(r2)
   477d0:	bc000204 	addi	r16,r23,8
   477d4:	2980c336 	bltu	r5,r6,47ae4 <_realloc_r+0x560>
   477d8:	008004c4 	movi	r2,19
   477dc:	9009883a 	mov	r4,r18
   477e0:	8011883a 	mov	r8,r16
   477e4:	11800f2e 	bgeu	r2,r6,47824 <_realloc_r+0x2a0>
   477e8:	90800017 	ldw	r2,0(r18)
   477ec:	ba000404 	addi	r8,r23,16
   477f0:	91000204 	addi	r4,r18,8
   477f4:	b8800215 	stw	r2,8(r23)
   477f8:	90c00117 	ldw	r3,4(r18)
   477fc:	008006c4 	movi	r2,27
   47800:	b8c00315 	stw	r3,12(r23)
   47804:	1180072e 	bgeu	r2,r6,47824 <_realloc_r+0x2a0>
   47808:	90c00217 	ldw	r3,8(r18)
   4780c:	ba000604 	addi	r8,r23,24
   47810:	91000404 	addi	r4,r18,16
   47814:	b8c00415 	stw	r3,16(r23)
   47818:	90800317 	ldw	r2,12(r18)
   4781c:	b8800515 	stw	r2,20(r23)
   47820:	3140c726 	beq	r6,r5,47b40 <_realloc_r+0x5bc>
   47824:	20800017 	ldw	r2,0(r4)
   47828:	b80f883a 	mov	r7,r23
   4782c:	003fd906 	br	47794 <_realloc_r+0x210>
   47830:	880b883a 	mov	r5,r17
   47834:	b009883a 	mov	r4,r22
   47838:	0045b540 	call	45b54 <_malloc_r>
   4783c:	1023883a 	mov	r17,r2
   47840:	10002526 	beq	r2,zero,478d8 <_realloc_r+0x354>
   47844:	80800117 	ldw	r2,4(r16)
   47848:	00ffff84 	movi	r3,-2
   4784c:	893ffe04 	addi	r4,r17,-8
   47850:	10c4703a 	and	r2,r2,r3
   47854:	8085883a 	add	r2,r16,r2
   47858:	20809526 	beq	r4,r2,47ab0 <_realloc_r+0x52c>
   4785c:	99bfff04 	addi	r6,r19,-4
   47860:	01c00904 	movi	r7,36
   47864:	39804536 	bltu	r7,r6,4797c <_realloc_r+0x3f8>
   47868:	008004c4 	movi	r2,19
   4786c:	9009883a 	mov	r4,r18
   47870:	880b883a 	mov	r5,r17
   47874:	11800f2e 	bgeu	r2,r6,478b4 <_realloc_r+0x330>
   47878:	90800017 	ldw	r2,0(r18)
   4787c:	89400204 	addi	r5,r17,8
   47880:	91000204 	addi	r4,r18,8
   47884:	88800015 	stw	r2,0(r17)
   47888:	90c00117 	ldw	r3,4(r18)
   4788c:	008006c4 	movi	r2,27
   47890:	88c00115 	stw	r3,4(r17)
   47894:	1180072e 	bgeu	r2,r6,478b4 <_realloc_r+0x330>
   47898:	90c00217 	ldw	r3,8(r18)
   4789c:	89400404 	addi	r5,r17,16
   478a0:	91000404 	addi	r4,r18,16
   478a4:	88c00215 	stw	r3,8(r17)
   478a8:	90800317 	ldw	r2,12(r18)
   478ac:	88800315 	stw	r2,12(r17)
   478b0:	31c09126 	beq	r6,r7,47af8 <_realloc_r+0x574>
   478b4:	20800017 	ldw	r2,0(r4)
   478b8:	28800015 	stw	r2,0(r5)
   478bc:	20c00117 	ldw	r3,4(r4)
   478c0:	28c00115 	stw	r3,4(r5)
   478c4:	20800217 	ldw	r2,8(r4)
   478c8:	28800215 	stw	r2,8(r5)
   478cc:	900b883a 	mov	r5,r18
   478d0:	b009883a 	mov	r4,r22
   478d4:	0044fcc0 	call	44fcc <_free_r>
   478d8:	b009883a 	mov	r4,r22
   478dc:	004acdc0 	call	4acdc <__malloc_unlock>
   478e0:	003f5e06 	br	4765c <_realloc_r+0xd8>
   478e4:	300b883a 	mov	r5,r6
   478e8:	dfc00b17 	ldw	ra,44(sp)
   478ec:	df000a17 	ldw	fp,40(sp)
   478f0:	ddc00917 	ldw	r23,36(sp)
   478f4:	dd800817 	ldw	r22,32(sp)
   478f8:	dd400717 	ldw	r21,28(sp)
   478fc:	dd000617 	ldw	r20,24(sp)
   47900:	dcc00517 	ldw	r19,20(sp)
   47904:	dc800417 	ldw	r18,16(sp)
   47908:	dc400317 	ldw	r17,12(sp)
   4790c:	dc000217 	ldw	r16,8(sp)
   47910:	dec00c04 	addi	sp,sp,48
   47914:	0045b541 	jmpi	45b54 <_malloc_r>
   47918:	38800117 	ldw	r2,4(r7)
   4791c:	e54b883a 	add	r5,fp,r21
   47920:	31000054 	ori	r4,r6,1
   47924:	1080004c 	andi	r2,r2,1
   47928:	1704b03a 	or	r2,r2,fp
   4792c:	38800115 	stw	r2,4(r7)
   47930:	29000115 	stw	r4,4(r5)
   47934:	2987883a 	add	r3,r5,r6
   47938:	18800117 	ldw	r2,4(r3)
   4793c:	29400204 	addi	r5,r5,8
   47940:	b009883a 	mov	r4,r22
   47944:	10800054 	ori	r2,r2,1
   47948:	18800115 	stw	r2,4(r3)
   4794c:	0044fcc0 	call	44fcc <_free_r>
   47950:	003f3806 	br	47634 <_realloc_r+0xb0>
   47954:	000d883a 	mov	r6,zero
   47958:	0009883a 	mov	r4,zero
   4795c:	003f5d06 	br	476d4 <_realloc_r+0x150>
   47960:	30c00217 	ldw	r3,8(r6)
   47964:	30800317 	ldw	r2,12(r6)
   47968:	800f883a 	mov	r7,r16
   4796c:	84000204 	addi	r16,r16,8
   47970:	10c00215 	stw	r3,8(r2)
   47974:	18800315 	stw	r2,12(r3)
   47978:	003f2306 	br	47608 <_realloc_r+0x84>
   4797c:	8809883a 	mov	r4,r17
   47980:	900b883a 	mov	r5,r18
   47984:	00464180 	call	46418 <memmove>
   47988:	003fd006 	br	478cc <_realloc_r+0x348>
   4798c:	30800117 	ldw	r2,4(r6)
   47990:	e0c00404 	addi	r3,fp,16
   47994:	1108703a 	and	r4,r2,r4
   47998:	9905883a 	add	r2,r19,r4
   4799c:	10ff4d16 	blt	r2,r3,476d4 <_realloc_r+0x150>
   479a0:	1705c83a 	sub	r2,r2,fp
   479a4:	870b883a 	add	r5,r16,fp
   479a8:	10800054 	ori	r2,r2,1
   479ac:	28800115 	stw	r2,4(r5)
   479b0:	80c00117 	ldw	r3,4(r16)
   479b4:	00800174 	movhi	r2,5
   479b8:	10b75904 	addi	r2,r2,-8860
   479bc:	b009883a 	mov	r4,r22
   479c0:	18c0004c 	andi	r3,r3,1
   479c4:	e0c6b03a 	or	r3,fp,r3
   479c8:	11400215 	stw	r5,8(r2)
   479cc:	80c00115 	stw	r3,4(r16)
   479d0:	004acdc0 	call	4acdc <__malloc_unlock>
   479d4:	84400204 	addi	r17,r16,8
   479d8:	003f2006 	br	4765c <_realloc_r+0xd8>
   479dc:	98a9883a 	add	r20,r19,r2
   479e0:	2509883a 	add	r4,r4,r20
   479e4:	e0800404 	addi	r2,fp,16
   479e8:	d9000115 	stw	r4,4(sp)
   479ec:	20bf7016 	blt	r4,r2,477b0 <_realloc_r+0x22c>
   479f0:	b8c00317 	ldw	r3,12(r23)
   479f4:	b8800217 	ldw	r2,8(r23)
   479f8:	99bfff04 	addi	r6,r19,-4
   479fc:	01400904 	movi	r5,36
   47a00:	18800215 	stw	r2,8(r3)
   47a04:	10c00315 	stw	r3,12(r2)
   47a08:	bc400204 	addi	r17,r23,8
   47a0c:	29804136 	bltu	r5,r6,47b14 <_realloc_r+0x590>
   47a10:	008004c4 	movi	r2,19
   47a14:	9009883a 	mov	r4,r18
   47a18:	880f883a 	mov	r7,r17
   47a1c:	11800f2e 	bgeu	r2,r6,47a5c <_realloc_r+0x4d8>
   47a20:	90800017 	ldw	r2,0(r18)
   47a24:	b9c00404 	addi	r7,r23,16
   47a28:	91000204 	addi	r4,r18,8
   47a2c:	b8800215 	stw	r2,8(r23)
   47a30:	90c00117 	ldw	r3,4(r18)
   47a34:	008006c4 	movi	r2,27
   47a38:	b8c00315 	stw	r3,12(r23)
   47a3c:	1180072e 	bgeu	r2,r6,47a5c <_realloc_r+0x4d8>
   47a40:	90c00217 	ldw	r3,8(r18)
   47a44:	b9c00604 	addi	r7,r23,24
   47a48:	91000404 	addi	r4,r18,16
   47a4c:	b8c00415 	stw	r3,16(r23)
   47a50:	90800317 	ldw	r2,12(r18)
   47a54:	b8800515 	stw	r2,20(r23)
   47a58:	31404026 	beq	r6,r5,47b5c <_realloc_r+0x5d8>
   47a5c:	20800017 	ldw	r2,0(r4)
   47a60:	38800015 	stw	r2,0(r7)
   47a64:	20c00117 	ldw	r3,4(r4)
   47a68:	38c00115 	stw	r3,4(r7)
   47a6c:	20800217 	ldw	r2,8(r4)
   47a70:	38800215 	stw	r2,8(r7)
   47a74:	d8c00117 	ldw	r3,4(sp)
   47a78:	bf0b883a 	add	r5,r23,fp
   47a7c:	b009883a 	mov	r4,r22
   47a80:	1f05c83a 	sub	r2,r3,fp
   47a84:	10800054 	ori	r2,r2,1
   47a88:	28800115 	stw	r2,4(r5)
   47a8c:	b8c00117 	ldw	r3,4(r23)
   47a90:	00800174 	movhi	r2,5
   47a94:	10b75904 	addi	r2,r2,-8860
   47a98:	11400215 	stw	r5,8(r2)
   47a9c:	18c0004c 	andi	r3,r3,1
   47aa0:	e0c6b03a 	or	r3,fp,r3
   47aa4:	b8c00115 	stw	r3,4(r23)
   47aa8:	004acdc0 	call	4acdc <__malloc_unlock>
   47aac:	003eeb06 	br	4765c <_realloc_r+0xd8>
   47ab0:	20800117 	ldw	r2,4(r4)
   47ab4:	00ffff04 	movi	r3,-4
   47ab8:	800f883a 	mov	r7,r16
   47abc:	10c4703a 	and	r2,r2,r3
   47ac0:	98a9883a 	add	r20,r19,r2
   47ac4:	84000204 	addi	r16,r16,8
   47ac8:	003ecf06 	br	47608 <_realloc_r+0x84>
   47acc:	900b883a 	mov	r5,r18
   47ad0:	8009883a 	mov	r4,r16
   47ad4:	00464180 	call	46418 <memmove>
   47ad8:	dd000017 	ldw	r20,0(sp)
   47adc:	b80f883a 	mov	r7,r23
   47ae0:	003ec906 	br	47608 <_realloc_r+0x84>
   47ae4:	900b883a 	mov	r5,r18
   47ae8:	8009883a 	mov	r4,r16
   47aec:	00464180 	call	46418 <memmove>
   47af0:	b80f883a 	mov	r7,r23
   47af4:	003ec406 	br	47608 <_realloc_r+0x84>
   47af8:	90c00417 	ldw	r3,16(r18)
   47afc:	89400604 	addi	r5,r17,24
   47b00:	91000604 	addi	r4,r18,24
   47b04:	88c00415 	stw	r3,16(r17)
   47b08:	90800517 	ldw	r2,20(r18)
   47b0c:	88800515 	stw	r2,20(r17)
   47b10:	003f6806 	br	478b4 <_realloc_r+0x330>
   47b14:	900b883a 	mov	r5,r18
   47b18:	8809883a 	mov	r4,r17
   47b1c:	00464180 	call	46418 <memmove>
   47b20:	003fd406 	br	47a74 <_realloc_r+0x4f0>
   47b24:	90c00417 	ldw	r3,16(r18)
   47b28:	91000604 	addi	r4,r18,24
   47b2c:	ba000804 	addi	r8,r23,32
   47b30:	b8c00615 	stw	r3,24(r23)
   47b34:	90800517 	ldw	r2,20(r18)
   47b38:	b8800715 	stw	r2,28(r23)
   47b3c:	003f1206 	br	47788 <_realloc_r+0x204>
   47b40:	90c00417 	ldw	r3,16(r18)
   47b44:	91000604 	addi	r4,r18,24
   47b48:	ba000804 	addi	r8,r23,32
   47b4c:	b8c00615 	stw	r3,24(r23)
   47b50:	90800517 	ldw	r2,20(r18)
   47b54:	b8800715 	stw	r2,28(r23)
   47b58:	003f3206 	br	47824 <_realloc_r+0x2a0>
   47b5c:	90c00417 	ldw	r3,16(r18)
   47b60:	91000604 	addi	r4,r18,24
   47b64:	b9c00804 	addi	r7,r23,32
   47b68:	b8c00615 	stw	r3,24(r23)
   47b6c:	90800517 	ldw	r2,20(r18)
   47b70:	b8800715 	stw	r2,28(r23)
   47b74:	003fb906 	br	47a5c <_realloc_r+0x4d8>

00047b78 <__isinfd>:
   47b78:	200d883a 	mov	r6,r4
   47b7c:	0109c83a 	sub	r4,zero,r4
   47b80:	2188b03a 	or	r4,r4,r6
   47b84:	2008d7fa 	srli	r4,r4,31
   47b88:	00a00034 	movhi	r2,32768
   47b8c:	10bfffc4 	addi	r2,r2,-1
   47b90:	1144703a 	and	r2,r2,r5
   47b94:	2088b03a 	or	r4,r4,r2
   47b98:	009ffc34 	movhi	r2,32752
   47b9c:	1105c83a 	sub	r2,r2,r4
   47ba0:	0087c83a 	sub	r3,zero,r2
   47ba4:	10c4b03a 	or	r2,r2,r3
   47ba8:	1004d7fa 	srli	r2,r2,31
   47bac:	00c00044 	movi	r3,1
   47bb0:	1885c83a 	sub	r2,r3,r2
   47bb4:	f800283a 	ret

00047bb8 <__isnand>:
   47bb8:	200d883a 	mov	r6,r4
   47bbc:	0109c83a 	sub	r4,zero,r4
   47bc0:	2188b03a 	or	r4,r4,r6
   47bc4:	2008d7fa 	srli	r4,r4,31
   47bc8:	00a00034 	movhi	r2,32768
   47bcc:	10bfffc4 	addi	r2,r2,-1
   47bd0:	1144703a 	and	r2,r2,r5
   47bd4:	2088b03a 	or	r4,r4,r2
   47bd8:	009ffc34 	movhi	r2,32752
   47bdc:	1105c83a 	sub	r2,r2,r4
   47be0:	1004d7fa 	srli	r2,r2,31
   47be4:	f800283a 	ret

00047be8 <_sbrk_r>:
   47be8:	defffd04 	addi	sp,sp,-12
   47bec:	dc000015 	stw	r16,0(sp)
   47bf0:	04000174 	movhi	r16,5
   47bf4:	84038a04 	addi	r16,r16,3624
   47bf8:	dc400115 	stw	r17,4(sp)
   47bfc:	80000015 	stw	zero,0(r16)
   47c00:	2023883a 	mov	r17,r4
   47c04:	2809883a 	mov	r4,r5
   47c08:	dfc00215 	stw	ra,8(sp)
   47c0c:	004aedc0 	call	4aedc <sbrk>
   47c10:	1007883a 	mov	r3,r2
   47c14:	00bfffc4 	movi	r2,-1
   47c18:	18800626 	beq	r3,r2,47c34 <_sbrk_r+0x4c>
   47c1c:	1805883a 	mov	r2,r3
   47c20:	dfc00217 	ldw	ra,8(sp)
   47c24:	dc400117 	ldw	r17,4(sp)
   47c28:	dc000017 	ldw	r16,0(sp)
   47c2c:	dec00304 	addi	sp,sp,12
   47c30:	f800283a 	ret
   47c34:	80800017 	ldw	r2,0(r16)
   47c38:	103ff826 	beq	r2,zero,47c1c <_sbrk_r+0x34>
   47c3c:	88800015 	stw	r2,0(r17)
   47c40:	1805883a 	mov	r2,r3
   47c44:	dfc00217 	ldw	ra,8(sp)
   47c48:	dc400117 	ldw	r17,4(sp)
   47c4c:	dc000017 	ldw	r16,0(sp)
   47c50:	dec00304 	addi	sp,sp,12
   47c54:	f800283a 	ret

00047c58 <__sclose>:
   47c58:	2940038f 	ldh	r5,14(r5)
   47c5c:	0047f8c1 	jmpi	47f8c <_close_r>

00047c60 <__sseek>:
   47c60:	defffe04 	addi	sp,sp,-8
   47c64:	dc000015 	stw	r16,0(sp)
   47c68:	2821883a 	mov	r16,r5
   47c6c:	2940038f 	ldh	r5,14(r5)
   47c70:	dfc00115 	stw	ra,4(sp)
   47c74:	00482040 	call	48204 <_lseek_r>
   47c78:	1007883a 	mov	r3,r2
   47c7c:	00bfffc4 	movi	r2,-1
   47c80:	18800926 	beq	r3,r2,47ca8 <__sseek+0x48>
   47c84:	8080030b 	ldhu	r2,12(r16)
   47c88:	80c01415 	stw	r3,80(r16)
   47c8c:	10840014 	ori	r2,r2,4096
   47c90:	8080030d 	sth	r2,12(r16)
   47c94:	1805883a 	mov	r2,r3
   47c98:	dfc00117 	ldw	ra,4(sp)
   47c9c:	dc000017 	ldw	r16,0(sp)
   47ca0:	dec00204 	addi	sp,sp,8
   47ca4:	f800283a 	ret
   47ca8:	8080030b 	ldhu	r2,12(r16)
   47cac:	10bbffcc 	andi	r2,r2,61439
   47cb0:	8080030d 	sth	r2,12(r16)
   47cb4:	1805883a 	mov	r2,r3
   47cb8:	dfc00117 	ldw	ra,4(sp)
   47cbc:	dc000017 	ldw	r16,0(sp)
   47cc0:	dec00204 	addi	sp,sp,8
   47cc4:	f800283a 	ret

00047cc8 <__swrite>:
   47cc8:	2880030b 	ldhu	r2,12(r5)
   47ccc:	defffb04 	addi	sp,sp,-20
   47cd0:	dcc00315 	stw	r19,12(sp)
   47cd4:	1080400c 	andi	r2,r2,256
   47cd8:	dc800215 	stw	r18,8(sp)
   47cdc:	dc400115 	stw	r17,4(sp)
   47ce0:	dc000015 	stw	r16,0(sp)
   47ce4:	3027883a 	mov	r19,r6
   47ce8:	3825883a 	mov	r18,r7
   47cec:	dfc00415 	stw	ra,16(sp)
   47cf0:	2821883a 	mov	r16,r5
   47cf4:	000d883a 	mov	r6,zero
   47cf8:	01c00084 	movi	r7,2
   47cfc:	2023883a 	mov	r17,r4
   47d00:	10000226 	beq	r2,zero,47d0c <__swrite+0x44>
   47d04:	2940038f 	ldh	r5,14(r5)
   47d08:	00482040 	call	48204 <_lseek_r>
   47d0c:	8080030b 	ldhu	r2,12(r16)
   47d10:	8140038f 	ldh	r5,14(r16)
   47d14:	8809883a 	mov	r4,r17
   47d18:	10bbffcc 	andi	r2,r2,61439
   47d1c:	980d883a 	mov	r6,r19
   47d20:	900f883a 	mov	r7,r18
   47d24:	8080030d 	sth	r2,12(r16)
   47d28:	dfc00417 	ldw	ra,16(sp)
   47d2c:	dcc00317 	ldw	r19,12(sp)
   47d30:	dc800217 	ldw	r18,8(sp)
   47d34:	dc400117 	ldw	r17,4(sp)
   47d38:	dc000017 	ldw	r16,0(sp)
   47d3c:	dec00504 	addi	sp,sp,20
   47d40:	0047e601 	jmpi	47e60 <_write_r>

00047d44 <__sread>:
   47d44:	defffe04 	addi	sp,sp,-8
   47d48:	dc000015 	stw	r16,0(sp)
   47d4c:	2821883a 	mov	r16,r5
   47d50:	2940038f 	ldh	r5,14(r5)
   47d54:	dfc00115 	stw	ra,4(sp)
   47d58:	004827c0 	call	4827c <_read_r>
   47d5c:	1007883a 	mov	r3,r2
   47d60:	10000816 	blt	r2,zero,47d84 <__sread+0x40>
   47d64:	80801417 	ldw	r2,80(r16)
   47d68:	10c5883a 	add	r2,r2,r3
   47d6c:	80801415 	stw	r2,80(r16)
   47d70:	1805883a 	mov	r2,r3
   47d74:	dfc00117 	ldw	ra,4(sp)
   47d78:	dc000017 	ldw	r16,0(sp)
   47d7c:	dec00204 	addi	sp,sp,8
   47d80:	f800283a 	ret
   47d84:	8080030b 	ldhu	r2,12(r16)
   47d88:	10bbffcc 	andi	r2,r2,61439
   47d8c:	8080030d 	sth	r2,12(r16)
   47d90:	1805883a 	mov	r2,r3
   47d94:	dfc00117 	ldw	ra,4(sp)
   47d98:	dc000017 	ldw	r16,0(sp)
   47d9c:	dec00204 	addi	sp,sp,8
   47da0:	f800283a 	ret

00047da4 <strcmp>:
   47da4:	2144b03a 	or	r2,r4,r5
   47da8:	108000cc 	andi	r2,r2,3
   47dac:	10001d1e 	bne	r2,zero,47e24 <strcmp+0x80>
   47db0:	200f883a 	mov	r7,r4
   47db4:	28800017 	ldw	r2,0(r5)
   47db8:	21000017 	ldw	r4,0(r4)
   47dbc:	280d883a 	mov	r6,r5
   47dc0:	2080161e 	bne	r4,r2,47e1c <strcmp+0x78>
   47dc4:	023fbff4 	movhi	r8,65279
   47dc8:	423fbfc4 	addi	r8,r8,-257
   47dcc:	2207883a 	add	r3,r4,r8
   47dd0:	01602074 	movhi	r5,32897
   47dd4:	29602004 	addi	r5,r5,-32640
   47dd8:	1946703a 	and	r3,r3,r5
   47ddc:	0104303a 	nor	r2,zero,r4
   47de0:	10c4703a 	and	r2,r2,r3
   47de4:	10001c1e 	bne	r2,zero,47e58 <strcmp+0xb4>
   47de8:	4013883a 	mov	r9,r8
   47dec:	2811883a 	mov	r8,r5
   47df0:	00000106 	br	47df8 <strcmp+0x54>
   47df4:	1800181e 	bne	r3,zero,47e58 <strcmp+0xb4>
   47df8:	39c00104 	addi	r7,r7,4
   47dfc:	39000017 	ldw	r4,0(r7)
   47e00:	31800104 	addi	r6,r6,4
   47e04:	31400017 	ldw	r5,0(r6)
   47e08:	2245883a 	add	r2,r4,r9
   47e0c:	1204703a 	and	r2,r2,r8
   47e10:	0106303a 	nor	r3,zero,r4
   47e14:	1886703a 	and	r3,r3,r2
   47e18:	217ff626 	beq	r4,r5,47df4 <strcmp+0x50>
   47e1c:	3809883a 	mov	r4,r7
   47e20:	300b883a 	mov	r5,r6
   47e24:	20c00007 	ldb	r3,0(r4)
   47e28:	1800051e 	bne	r3,zero,47e40 <strcmp+0x9c>
   47e2c:	00000606 	br	47e48 <strcmp+0xa4>
   47e30:	21000044 	addi	r4,r4,1
   47e34:	20c00007 	ldb	r3,0(r4)
   47e38:	29400044 	addi	r5,r5,1
   47e3c:	18000226 	beq	r3,zero,47e48 <strcmp+0xa4>
   47e40:	28800007 	ldb	r2,0(r5)
   47e44:	18bffa26 	beq	r3,r2,47e30 <strcmp+0x8c>
   47e48:	20c00003 	ldbu	r3,0(r4)
   47e4c:	28800003 	ldbu	r2,0(r5)
   47e50:	1885c83a 	sub	r2,r3,r2
   47e54:	f800283a 	ret
   47e58:	0005883a 	mov	r2,zero
   47e5c:	f800283a 	ret

00047e60 <_write_r>:
   47e60:	defffd04 	addi	sp,sp,-12
   47e64:	dc000015 	stw	r16,0(sp)
   47e68:	04000174 	movhi	r16,5
   47e6c:	84038a04 	addi	r16,r16,3624
   47e70:	dc400115 	stw	r17,4(sp)
   47e74:	80000015 	stw	zero,0(r16)
   47e78:	2023883a 	mov	r17,r4
   47e7c:	2809883a 	mov	r4,r5
   47e80:	300b883a 	mov	r5,r6
   47e84:	380d883a 	mov	r6,r7
   47e88:	dfc00215 	stw	ra,8(sp)
   47e8c:	004af980 	call	4af98 <write>
   47e90:	1007883a 	mov	r3,r2
   47e94:	00bfffc4 	movi	r2,-1
   47e98:	18800626 	beq	r3,r2,47eb4 <_write_r+0x54>
   47e9c:	1805883a 	mov	r2,r3
   47ea0:	dfc00217 	ldw	ra,8(sp)
   47ea4:	dc400117 	ldw	r17,4(sp)
   47ea8:	dc000017 	ldw	r16,0(sp)
   47eac:	dec00304 	addi	sp,sp,12
   47eb0:	f800283a 	ret
   47eb4:	80800017 	ldw	r2,0(r16)
   47eb8:	103ff826 	beq	r2,zero,47e9c <_write_r+0x3c>
   47ebc:	88800015 	stw	r2,0(r17)
   47ec0:	1805883a 	mov	r2,r3
   47ec4:	dfc00217 	ldw	ra,8(sp)
   47ec8:	dc400117 	ldw	r17,4(sp)
   47ecc:	dc000017 	ldw	r16,0(sp)
   47ed0:	dec00304 	addi	sp,sp,12
   47ed4:	f800283a 	ret

00047ed8 <_calloc_r>:
   47ed8:	298b383a 	mul	r5,r5,r6
   47edc:	defffe04 	addi	sp,sp,-8
   47ee0:	dc000015 	stw	r16,0(sp)
   47ee4:	dfc00115 	stw	ra,4(sp)
   47ee8:	0045b540 	call	45b54 <_malloc_r>
   47eec:	1021883a 	mov	r16,r2
   47ef0:	01c00904 	movi	r7,36
   47ef4:	10000d26 	beq	r2,zero,47f2c <_calloc_r+0x54>
   47ef8:	10ffff17 	ldw	r3,-4(r2)
   47efc:	1009883a 	mov	r4,r2
   47f00:	00bfff04 	movi	r2,-4
   47f04:	1886703a 	and	r3,r3,r2
   47f08:	1887883a 	add	r3,r3,r2
   47f0c:	180d883a 	mov	r6,r3
   47f10:	000b883a 	mov	r5,zero
   47f14:	38c01736 	bltu	r7,r3,47f74 <_calloc_r+0x9c>
   47f18:	008004c4 	movi	r2,19
   47f1c:	10c00836 	bltu	r2,r3,47f40 <_calloc_r+0x68>
   47f20:	20000215 	stw	zero,8(r4)
   47f24:	20000015 	stw	zero,0(r4)
   47f28:	20000115 	stw	zero,4(r4)
   47f2c:	8005883a 	mov	r2,r16
   47f30:	dfc00117 	ldw	ra,4(sp)
   47f34:	dc000017 	ldw	r16,0(sp)
   47f38:	dec00204 	addi	sp,sp,8
   47f3c:	f800283a 	ret
   47f40:	008006c4 	movi	r2,27
   47f44:	80000015 	stw	zero,0(r16)
   47f48:	80000115 	stw	zero,4(r16)
   47f4c:	81000204 	addi	r4,r16,8
   47f50:	10fff32e 	bgeu	r2,r3,47f20 <_calloc_r+0x48>
   47f54:	80000215 	stw	zero,8(r16)
   47f58:	80000315 	stw	zero,12(r16)
   47f5c:	81000404 	addi	r4,r16,16
   47f60:	19ffef1e 	bne	r3,r7,47f20 <_calloc_r+0x48>
   47f64:	81000604 	addi	r4,r16,24
   47f68:	80000415 	stw	zero,16(r16)
   47f6c:	80000515 	stw	zero,20(r16)
   47f70:	003feb06 	br	47f20 <_calloc_r+0x48>
   47f74:	00464f80 	call	464f8 <memset>
   47f78:	8005883a 	mov	r2,r16
   47f7c:	dfc00117 	ldw	ra,4(sp)
   47f80:	dc000017 	ldw	r16,0(sp)
   47f84:	dec00204 	addi	sp,sp,8
   47f88:	f800283a 	ret

00047f8c <_close_r>:
   47f8c:	defffd04 	addi	sp,sp,-12
   47f90:	dc000015 	stw	r16,0(sp)
   47f94:	04000174 	movhi	r16,5
   47f98:	84038a04 	addi	r16,r16,3624
   47f9c:	dc400115 	stw	r17,4(sp)
   47fa0:	80000015 	stw	zero,0(r16)
   47fa4:	2023883a 	mov	r17,r4
   47fa8:	2809883a 	mov	r4,r5
   47fac:	dfc00215 	stw	ra,8(sp)
   47fb0:	004a5d80 	call	4a5d8 <close>
   47fb4:	1007883a 	mov	r3,r2
   47fb8:	00bfffc4 	movi	r2,-1
   47fbc:	18800626 	beq	r3,r2,47fd8 <_close_r+0x4c>
   47fc0:	1805883a 	mov	r2,r3
   47fc4:	dfc00217 	ldw	ra,8(sp)
   47fc8:	dc400117 	ldw	r17,4(sp)
   47fcc:	dc000017 	ldw	r16,0(sp)
   47fd0:	dec00304 	addi	sp,sp,12
   47fd4:	f800283a 	ret
   47fd8:	80800017 	ldw	r2,0(r16)
   47fdc:	103ff826 	beq	r2,zero,47fc0 <_close_r+0x34>
   47fe0:	88800015 	stw	r2,0(r17)
   47fe4:	1805883a 	mov	r2,r3
   47fe8:	dfc00217 	ldw	ra,8(sp)
   47fec:	dc400117 	ldw	r17,4(sp)
   47ff0:	dc000017 	ldw	r16,0(sp)
   47ff4:	dec00304 	addi	sp,sp,12
   47ff8:	f800283a 	ret

00047ffc <_fclose_r>:
   47ffc:	defffc04 	addi	sp,sp,-16
   48000:	dc400115 	stw	r17,4(sp)
   48004:	dc000015 	stw	r16,0(sp)
   48008:	dfc00315 	stw	ra,12(sp)
   4800c:	dc800215 	stw	r18,8(sp)
   48010:	2821883a 	mov	r16,r5
   48014:	2023883a 	mov	r17,r4
   48018:	28002926 	beq	r5,zero,480c0 <_fclose_r+0xc4>
   4801c:	0044c380 	call	44c38 <__sfp_lock_acquire>
   48020:	88000226 	beq	r17,zero,4802c <_fclose_r+0x30>
   48024:	88800e17 	ldw	r2,56(r17)
   48028:	10002d26 	beq	r2,zero,480e0 <_fclose_r+0xe4>
   4802c:	8080030f 	ldh	r2,12(r16)
   48030:	10002226 	beq	r2,zero,480bc <_fclose_r+0xc0>
   48034:	8809883a 	mov	r4,r17
   48038:	800b883a 	mov	r5,r16
   4803c:	00449b00 	call	449b0 <_fflush_r>
   48040:	1025883a 	mov	r18,r2
   48044:	80800b17 	ldw	r2,44(r16)
   48048:	10000426 	beq	r2,zero,4805c <_fclose_r+0x60>
   4804c:	81400717 	ldw	r5,28(r16)
   48050:	8809883a 	mov	r4,r17
   48054:	103ee83a 	callr	r2
   48058:	10002a16 	blt	r2,zero,48104 <_fclose_r+0x108>
   4805c:	8080030b 	ldhu	r2,12(r16)
   48060:	1080200c 	andi	r2,r2,128
   48064:	1000231e 	bne	r2,zero,480f4 <_fclose_r+0xf8>
   48068:	81400c17 	ldw	r5,48(r16)
   4806c:	28000526 	beq	r5,zero,48084 <_fclose_r+0x88>
   48070:	80801004 	addi	r2,r16,64
   48074:	28800226 	beq	r5,r2,48080 <_fclose_r+0x84>
   48078:	8809883a 	mov	r4,r17
   4807c:	0044fcc0 	call	44fcc <_free_r>
   48080:	80000c15 	stw	zero,48(r16)
   48084:	81401117 	ldw	r5,68(r16)
   48088:	28000326 	beq	r5,zero,48098 <_fclose_r+0x9c>
   4808c:	8809883a 	mov	r4,r17
   48090:	0044fcc0 	call	44fcc <_free_r>
   48094:	80001115 	stw	zero,68(r16)
   48098:	8000030d 	sth	zero,12(r16)
   4809c:	0044c3c0 	call	44c3c <__sfp_lock_release>
   480a0:	9005883a 	mov	r2,r18
   480a4:	dfc00317 	ldw	ra,12(sp)
   480a8:	dc800217 	ldw	r18,8(sp)
   480ac:	dc400117 	ldw	r17,4(sp)
   480b0:	dc000017 	ldw	r16,0(sp)
   480b4:	dec00404 	addi	sp,sp,16
   480b8:	f800283a 	ret
   480bc:	0044c3c0 	call	44c3c <__sfp_lock_release>
   480c0:	0025883a 	mov	r18,zero
   480c4:	9005883a 	mov	r2,r18
   480c8:	dfc00317 	ldw	ra,12(sp)
   480cc:	dc800217 	ldw	r18,8(sp)
   480d0:	dc400117 	ldw	r17,4(sp)
   480d4:	dc000017 	ldw	r16,0(sp)
   480d8:	dec00404 	addi	sp,sp,16
   480dc:	f800283a 	ret
   480e0:	8809883a 	mov	r4,r17
   480e4:	0044c480 	call	44c48 <__sinit>
   480e8:	8080030f 	ldh	r2,12(r16)
   480ec:	103fd11e 	bne	r2,zero,48034 <_fclose_r+0x38>
   480f0:	003ff206 	br	480bc <_fclose_r+0xc0>
   480f4:	81400417 	ldw	r5,16(r16)
   480f8:	8809883a 	mov	r4,r17
   480fc:	0044fcc0 	call	44fcc <_free_r>
   48100:	003fd906 	br	48068 <_fclose_r+0x6c>
   48104:	04bfffc4 	movi	r18,-1
   48108:	003fd406 	br	4805c <_fclose_r+0x60>

0004810c <fclose>:
   4810c:	00800174 	movhi	r2,5
   48110:	10bcdd04 	addi	r2,r2,-3212
   48114:	200b883a 	mov	r5,r4
   48118:	11000017 	ldw	r4,0(r2)
   4811c:	0047ffc1 	jmpi	47ffc <_fclose_r>

00048120 <_fstat_r>:
   48120:	defffd04 	addi	sp,sp,-12
   48124:	dc000015 	stw	r16,0(sp)
   48128:	04000174 	movhi	r16,5
   4812c:	84038a04 	addi	r16,r16,3624
   48130:	dc400115 	stw	r17,4(sp)
   48134:	80000015 	stw	zero,0(r16)
   48138:	2023883a 	mov	r17,r4
   4813c:	2809883a 	mov	r4,r5
   48140:	300b883a 	mov	r5,r6
   48144:	dfc00215 	stw	ra,8(sp)
   48148:	004a7c00 	call	4a7c0 <fstat>
   4814c:	1007883a 	mov	r3,r2
   48150:	00bfffc4 	movi	r2,-1
   48154:	18800626 	beq	r3,r2,48170 <_fstat_r+0x50>
   48158:	1805883a 	mov	r2,r3
   4815c:	dfc00217 	ldw	ra,8(sp)
   48160:	dc400117 	ldw	r17,4(sp)
   48164:	dc000017 	ldw	r16,0(sp)
   48168:	dec00304 	addi	sp,sp,12
   4816c:	f800283a 	ret
   48170:	80800017 	ldw	r2,0(r16)
   48174:	103ff826 	beq	r2,zero,48158 <_fstat_r+0x38>
   48178:	88800015 	stw	r2,0(r17)
   4817c:	1805883a 	mov	r2,r3
   48180:	dfc00217 	ldw	ra,8(sp)
   48184:	dc400117 	ldw	r17,4(sp)
   48188:	dc000017 	ldw	r16,0(sp)
   4818c:	dec00304 	addi	sp,sp,12
   48190:	f800283a 	ret

00048194 <_isatty_r>:
   48194:	defffd04 	addi	sp,sp,-12
   48198:	dc000015 	stw	r16,0(sp)
   4819c:	04000174 	movhi	r16,5
   481a0:	84038a04 	addi	r16,r16,3624
   481a4:	dc400115 	stw	r17,4(sp)
   481a8:	80000015 	stw	zero,0(r16)
   481ac:	2023883a 	mov	r17,r4
   481b0:	2809883a 	mov	r4,r5
   481b4:	dfc00215 	stw	ra,8(sp)
   481b8:	004a8f40 	call	4a8f4 <isatty>
   481bc:	1007883a 	mov	r3,r2
   481c0:	00bfffc4 	movi	r2,-1
   481c4:	18800626 	beq	r3,r2,481e0 <_isatty_r+0x4c>
   481c8:	1805883a 	mov	r2,r3
   481cc:	dfc00217 	ldw	ra,8(sp)
   481d0:	dc400117 	ldw	r17,4(sp)
   481d4:	dc000017 	ldw	r16,0(sp)
   481d8:	dec00304 	addi	sp,sp,12
   481dc:	f800283a 	ret
   481e0:	80800017 	ldw	r2,0(r16)
   481e4:	103ff826 	beq	r2,zero,481c8 <_isatty_r+0x34>
   481e8:	88800015 	stw	r2,0(r17)
   481ec:	1805883a 	mov	r2,r3
   481f0:	dfc00217 	ldw	ra,8(sp)
   481f4:	dc400117 	ldw	r17,4(sp)
   481f8:	dc000017 	ldw	r16,0(sp)
   481fc:	dec00304 	addi	sp,sp,12
   48200:	f800283a 	ret

00048204 <_lseek_r>:
   48204:	defffd04 	addi	sp,sp,-12
   48208:	dc000015 	stw	r16,0(sp)
   4820c:	04000174 	movhi	r16,5
   48210:	84038a04 	addi	r16,r16,3624
   48214:	dc400115 	stw	r17,4(sp)
   48218:	80000015 	stw	zero,0(r16)
   4821c:	2023883a 	mov	r17,r4
   48220:	2809883a 	mov	r4,r5
   48224:	300b883a 	mov	r5,r6
   48228:	380d883a 	mov	r6,r7
   4822c:	dfc00215 	stw	ra,8(sp)
   48230:	004ab000 	call	4ab00 <lseek>
   48234:	1007883a 	mov	r3,r2
   48238:	00bfffc4 	movi	r2,-1
   4823c:	18800626 	beq	r3,r2,48258 <_lseek_r+0x54>
   48240:	1805883a 	mov	r2,r3
   48244:	dfc00217 	ldw	ra,8(sp)
   48248:	dc400117 	ldw	r17,4(sp)
   4824c:	dc000017 	ldw	r16,0(sp)
   48250:	dec00304 	addi	sp,sp,12
   48254:	f800283a 	ret
   48258:	80800017 	ldw	r2,0(r16)
   4825c:	103ff826 	beq	r2,zero,48240 <_lseek_r+0x3c>
   48260:	88800015 	stw	r2,0(r17)
   48264:	1805883a 	mov	r2,r3
   48268:	dfc00217 	ldw	ra,8(sp)
   4826c:	dc400117 	ldw	r17,4(sp)
   48270:	dc000017 	ldw	r16,0(sp)
   48274:	dec00304 	addi	sp,sp,12
   48278:	f800283a 	ret

0004827c <_read_r>:
   4827c:	defffd04 	addi	sp,sp,-12
   48280:	dc000015 	stw	r16,0(sp)
   48284:	04000174 	movhi	r16,5
   48288:	84038a04 	addi	r16,r16,3624
   4828c:	dc400115 	stw	r17,4(sp)
   48290:	80000015 	stw	zero,0(r16)
   48294:	2023883a 	mov	r17,r4
   48298:	2809883a 	mov	r4,r5
   4829c:	300b883a 	mov	r5,r6
   482a0:	380d883a 	mov	r6,r7
   482a4:	dfc00215 	stw	ra,8(sp)
   482a8:	004acfc0 	call	4acfc <read>
   482ac:	1007883a 	mov	r3,r2
   482b0:	00bfffc4 	movi	r2,-1
   482b4:	18800626 	beq	r3,r2,482d0 <_read_r+0x54>
   482b8:	1805883a 	mov	r2,r3
   482bc:	dfc00217 	ldw	ra,8(sp)
   482c0:	dc400117 	ldw	r17,4(sp)
   482c4:	dc000017 	ldw	r16,0(sp)
   482c8:	dec00304 	addi	sp,sp,12
   482cc:	f800283a 	ret
   482d0:	80800017 	ldw	r2,0(r16)
   482d4:	103ff826 	beq	r2,zero,482b8 <_read_r+0x3c>
   482d8:	88800015 	stw	r2,0(r17)
   482dc:	1805883a 	mov	r2,r3
   482e0:	dfc00217 	ldw	ra,8(sp)
   482e4:	dc400117 	ldw	r17,4(sp)
   482e8:	dc000017 	ldw	r16,0(sp)
   482ec:	dec00304 	addi	sp,sp,12
   482f0:	f800283a 	ret

000482f4 <__udivdi3>:
   482f4:	defff004 	addi	sp,sp,-64
   482f8:	2005883a 	mov	r2,r4
   482fc:	3011883a 	mov	r8,r6
   48300:	df000e15 	stw	fp,56(sp)
   48304:	dd000a15 	stw	r20,40(sp)
   48308:	dc000615 	stw	r16,24(sp)
   4830c:	dfc00f15 	stw	ra,60(sp)
   48310:	ddc00d15 	stw	r23,52(sp)
   48314:	dd800c15 	stw	r22,48(sp)
   48318:	dd400b15 	stw	r21,44(sp)
   4831c:	dcc00915 	stw	r19,36(sp)
   48320:	dc800815 	stw	r18,32(sp)
   48324:	dc400715 	stw	r17,28(sp)
   48328:	4021883a 	mov	r16,r8
   4832c:	1039883a 	mov	fp,r2
   48330:	2829883a 	mov	r20,r5
   48334:	38003b1e 	bne	r7,zero,48424 <__udivdi3+0x130>
   48338:	2a005c36 	bltu	r5,r8,484ac <__udivdi3+0x1b8>
   4833c:	4000a626 	beq	r8,zero,485d8 <__udivdi3+0x2e4>
   48340:	00bfffd4 	movui	r2,65535
   48344:	14009e36 	bltu	r2,r16,485c0 <__udivdi3+0x2cc>
   48348:	00803fc4 	movi	r2,255
   4834c:	14013d36 	bltu	r2,r16,48844 <__udivdi3+0x550>
   48350:	000b883a 	mov	r5,zero
   48354:	0005883a 	mov	r2,zero
   48358:	8084d83a 	srl	r2,r16,r2
   4835c:	01000174 	movhi	r4,5
   48360:	21360b04 	addi	r4,r4,-10196
   48364:	01800804 	movi	r6,32
   48368:	1105883a 	add	r2,r2,r4
   4836c:	10c00003 	ldbu	r3,0(r2)
   48370:	28c7883a 	add	r3,r5,r3
   48374:	30edc83a 	sub	r22,r6,r3
   48378:	b000ee1e 	bne	r22,zero,48734 <__udivdi3+0x440>
   4837c:	802ad43a 	srli	r21,r16,16
   48380:	00800044 	movi	r2,1
   48384:	a423c83a 	sub	r17,r20,r16
   48388:	85ffffcc 	andi	r23,r16,65535
   4838c:	d8800315 	stw	r2,12(sp)
   48390:	8809883a 	mov	r4,r17
   48394:	a80b883a 	mov	r5,r21
   48398:	0040de40 	call	40de4 <__udivsi3>
   4839c:	8809883a 	mov	r4,r17
   483a0:	a80b883a 	mov	r5,r21
   483a4:	102d883a 	mov	r22,r2
   483a8:	0040dec0 	call	40dec <__umodsi3>
   483ac:	1004943a 	slli	r2,r2,16
   483b0:	e006d43a 	srli	r3,fp,16
   483b4:	bda3383a 	mul	r17,r23,r22
   483b8:	10c4b03a 	or	r2,r2,r3
   483bc:	1440042e 	bgeu	r2,r17,483d0 <__udivdi3+0xdc>
   483c0:	1405883a 	add	r2,r2,r16
   483c4:	b5bfffc4 	addi	r22,r22,-1
   483c8:	14000136 	bltu	r2,r16,483d0 <__udivdi3+0xdc>
   483cc:	14413d36 	bltu	r2,r17,488c4 <__udivdi3+0x5d0>
   483d0:	1463c83a 	sub	r17,r2,r17
   483d4:	8809883a 	mov	r4,r17
   483d8:	a80b883a 	mov	r5,r21
   483dc:	0040de40 	call	40de4 <__udivsi3>
   483e0:	8809883a 	mov	r4,r17
   483e4:	a80b883a 	mov	r5,r21
   483e8:	1029883a 	mov	r20,r2
   483ec:	0040dec0 	call	40dec <__umodsi3>
   483f0:	1004943a 	slli	r2,r2,16
   483f4:	bd09383a 	mul	r4,r23,r20
   483f8:	e0ffffcc 	andi	r3,fp,65535
   483fc:	10c4b03a 	or	r2,r2,r3
   48400:	1100042e 	bgeu	r2,r4,48414 <__udivdi3+0x120>
   48404:	8085883a 	add	r2,r16,r2
   48408:	a53fffc4 	addi	r20,r20,-1
   4840c:	14000136 	bltu	r2,r16,48414 <__udivdi3+0x120>
   48410:	11012036 	bltu	r2,r4,48894 <__udivdi3+0x5a0>
   48414:	b004943a 	slli	r2,r22,16
   48418:	d9000317 	ldw	r4,12(sp)
   4841c:	a084b03a 	or	r2,r20,r2
   48420:	00001506 	br	48478 <__udivdi3+0x184>
   48424:	380d883a 	mov	r6,r7
   48428:	29c06236 	bltu	r5,r7,485b4 <__udivdi3+0x2c0>
   4842c:	00bfffd4 	movui	r2,65535
   48430:	11c05a36 	bltu	r2,r7,4859c <__udivdi3+0x2a8>
   48434:	00803fc4 	movi	r2,255
   48438:	11c0fc36 	bltu	r2,r7,4882c <__udivdi3+0x538>
   4843c:	000b883a 	mov	r5,zero
   48440:	0005883a 	mov	r2,zero
   48444:	3084d83a 	srl	r2,r6,r2
   48448:	01000174 	movhi	r4,5
   4844c:	21360b04 	addi	r4,r4,-10196
   48450:	01c00804 	movi	r7,32
   48454:	1105883a 	add	r2,r2,r4
   48458:	10c00003 	ldbu	r3,0(r2)
   4845c:	28c7883a 	add	r3,r5,r3
   48460:	38efc83a 	sub	r23,r7,r3
   48464:	b800691e 	bne	r23,zero,4860c <__udivdi3+0x318>
   48468:	35000136 	bltu	r6,r20,48470 <__udivdi3+0x17c>
   4846c:	e4005136 	bltu	fp,r16,485b4 <__udivdi3+0x2c0>
   48470:	00800044 	movi	r2,1
   48474:	0009883a 	mov	r4,zero
   48478:	2007883a 	mov	r3,r4
   4847c:	dfc00f17 	ldw	ra,60(sp)
   48480:	df000e17 	ldw	fp,56(sp)
   48484:	ddc00d17 	ldw	r23,52(sp)
   48488:	dd800c17 	ldw	r22,48(sp)
   4848c:	dd400b17 	ldw	r21,44(sp)
   48490:	dd000a17 	ldw	r20,40(sp)
   48494:	dcc00917 	ldw	r19,36(sp)
   48498:	dc800817 	ldw	r18,32(sp)
   4849c:	dc400717 	ldw	r17,28(sp)
   484a0:	dc000617 	ldw	r16,24(sp)
   484a4:	dec01004 	addi	sp,sp,64
   484a8:	f800283a 	ret
   484ac:	00bfffd4 	movui	r2,65535
   484b0:	12005036 	bltu	r2,r8,485f4 <__udivdi3+0x300>
   484b4:	00803fc4 	movi	r2,255
   484b8:	1200e836 	bltu	r2,r8,4885c <__udivdi3+0x568>
   484bc:	000b883a 	mov	r5,zero
   484c0:	0005883a 	mov	r2,zero
   484c4:	8084d83a 	srl	r2,r16,r2
   484c8:	01000174 	movhi	r4,5
   484cc:	21360b04 	addi	r4,r4,-10196
   484d0:	01800804 	movi	r6,32
   484d4:	1105883a 	add	r2,r2,r4
   484d8:	10c00003 	ldbu	r3,0(r2)
   484dc:	28c7883a 	add	r3,r5,r3
   484e0:	30cbc83a 	sub	r5,r6,r3
   484e4:	28000626 	beq	r5,zero,48500 <__udivdi3+0x20c>
   484e8:	3145c83a 	sub	r2,r6,r5
   484ec:	e084d83a 	srl	r2,fp,r2
   484f0:	a146983a 	sll	r3,r20,r5
   484f4:	e178983a 	sll	fp,fp,r5
   484f8:	8160983a 	sll	r16,r16,r5
   484fc:	18a8b03a 	or	r20,r3,r2
   48500:	802ad43a 	srli	r21,r16,16
   48504:	a009883a 	mov	r4,r20
   48508:	85ffffcc 	andi	r23,r16,65535
   4850c:	a80b883a 	mov	r5,r21
   48510:	0040de40 	call	40de4 <__udivsi3>
   48514:	a009883a 	mov	r4,r20
   48518:	a80b883a 	mov	r5,r21
   4851c:	102d883a 	mov	r22,r2
   48520:	0040dec0 	call	40dec <__umodsi3>
   48524:	1004943a 	slli	r2,r2,16
   48528:	e006d43a 	srli	r3,fp,16
   4852c:	bda3383a 	mul	r17,r23,r22
   48530:	10c4b03a 	or	r2,r2,r3
   48534:	1440042e 	bgeu	r2,r17,48548 <__udivdi3+0x254>
   48538:	1405883a 	add	r2,r2,r16
   4853c:	b5bfffc4 	addi	r22,r22,-1
   48540:	14000136 	bltu	r2,r16,48548 <__udivdi3+0x254>
   48544:	1440d536 	bltu	r2,r17,4889c <__udivdi3+0x5a8>
   48548:	1463c83a 	sub	r17,r2,r17
   4854c:	8809883a 	mov	r4,r17
   48550:	a80b883a 	mov	r5,r21
   48554:	0040de40 	call	40de4 <__udivsi3>
   48558:	8809883a 	mov	r4,r17
   4855c:	a80b883a 	mov	r5,r21
   48560:	1029883a 	mov	r20,r2
   48564:	0040dec0 	call	40dec <__umodsi3>
   48568:	1004943a 	slli	r2,r2,16
   4856c:	bd09383a 	mul	r4,r23,r20
   48570:	e0ffffcc 	andi	r3,fp,65535
   48574:	10c4b03a 	or	r2,r2,r3
   48578:	1100042e 	bgeu	r2,r4,4858c <__udivdi3+0x298>
   4857c:	8085883a 	add	r2,r16,r2
   48580:	a53fffc4 	addi	r20,r20,-1
   48584:	14000136 	bltu	r2,r16,4858c <__udivdi3+0x298>
   48588:	1100c736 	bltu	r2,r4,488a8 <__udivdi3+0x5b4>
   4858c:	b004943a 	slli	r2,r22,16
   48590:	0009883a 	mov	r4,zero
   48594:	a084b03a 	or	r2,r20,r2
   48598:	003fb706 	br	48478 <__udivdi3+0x184>
   4859c:	00804034 	movhi	r2,256
   485a0:	10bfffc4 	addi	r2,r2,-1
   485a4:	11c0a436 	bltu	r2,r7,48838 <__udivdi3+0x544>
   485a8:	01400404 	movi	r5,16
   485ac:	2805883a 	mov	r2,r5
   485b0:	003fa406 	br	48444 <__udivdi3+0x150>
   485b4:	0005883a 	mov	r2,zero
   485b8:	0009883a 	mov	r4,zero
   485bc:	003fae06 	br	48478 <__udivdi3+0x184>
   485c0:	00804034 	movhi	r2,256
   485c4:	10bfffc4 	addi	r2,r2,-1
   485c8:	1400a136 	bltu	r2,r16,48850 <__udivdi3+0x55c>
   485cc:	01400404 	movi	r5,16
   485d0:	2805883a 	mov	r2,r5
   485d4:	003f6006 	br	48358 <__udivdi3+0x64>
   485d8:	01000044 	movi	r4,1
   485dc:	000b883a 	mov	r5,zero
   485e0:	0040de40 	call	40de4 <__udivsi3>
   485e4:	1021883a 	mov	r16,r2
   485e8:	00bfffd4 	movui	r2,65535
   485ec:	143ff436 	bltu	r2,r16,485c0 <__udivdi3+0x2cc>
   485f0:	003f5506 	br	48348 <__udivdi3+0x54>
   485f4:	00804034 	movhi	r2,256
   485f8:	10bfffc4 	addi	r2,r2,-1
   485fc:	12009a36 	bltu	r2,r8,48868 <__udivdi3+0x574>
   48600:	01400404 	movi	r5,16
   48604:	2805883a 	mov	r2,r5
   48608:	003fae06 	br	484c4 <__udivdi3+0x1d0>
   4860c:	3dc5c83a 	sub	r2,r7,r23
   48610:	35c8983a 	sll	r4,r6,r23
   48614:	8086d83a 	srl	r3,r16,r2
   48618:	a0a2d83a 	srl	r17,r20,r2
   4861c:	e084d83a 	srl	r2,fp,r2
   48620:	20eab03a 	or	r21,r4,r3
   48624:	a82cd43a 	srli	r22,r21,16
   48628:	a5c6983a 	sll	r3,r20,r23
   4862c:	8809883a 	mov	r4,r17
   48630:	b00b883a 	mov	r5,r22
   48634:	1886b03a 	or	r3,r3,r2
   48638:	d8c00215 	stw	r3,8(sp)
   4863c:	0040de40 	call	40de4 <__udivsi3>
   48640:	8809883a 	mov	r4,r17
   48644:	b00b883a 	mov	r5,r22
   48648:	1029883a 	mov	r20,r2
   4864c:	0040dec0 	call	40dec <__umodsi3>
   48650:	a8ffffcc 	andi	r3,r21,65535
   48654:	d8c00515 	stw	r3,20(sp)
   48658:	d9000217 	ldw	r4,8(sp)
   4865c:	d9400517 	ldw	r5,20(sp)
   48660:	1004943a 	slli	r2,r2,16
   48664:	2006d43a 	srli	r3,r4,16
   48668:	85e0983a 	sll	r16,r16,r23
   4866c:	2d23383a 	mul	r17,r5,r20
   48670:	10c4b03a 	or	r2,r2,r3
   48674:	dc000015 	stw	r16,0(sp)
   48678:	1440032e 	bgeu	r2,r17,48688 <__udivdi3+0x394>
   4867c:	1545883a 	add	r2,r2,r21
   48680:	a53fffc4 	addi	r20,r20,-1
   48684:	15407f2e 	bgeu	r2,r21,48884 <__udivdi3+0x590>
   48688:	1463c83a 	sub	r17,r2,r17
   4868c:	8809883a 	mov	r4,r17
   48690:	b00b883a 	mov	r5,r22
   48694:	0040de40 	call	40de4 <__udivsi3>
   48698:	8809883a 	mov	r4,r17
   4869c:	b00b883a 	mov	r5,r22
   486a0:	1021883a 	mov	r16,r2
   486a4:	0040dec0 	call	40dec <__umodsi3>
   486a8:	d8c00517 	ldw	r3,20(sp)
   486ac:	d9000217 	ldw	r4,8(sp)
   486b0:	1004943a 	slli	r2,r2,16
   486b4:	1c0f383a 	mul	r7,r3,r16
   486b8:	20ffffcc 	andi	r3,r4,65535
   486bc:	10e2b03a 	or	r17,r2,r3
   486c0:	89c0032e 	bgeu	r17,r7,486d0 <__udivdi3+0x3dc>
   486c4:	8d63883a 	add	r17,r17,r21
   486c8:	843fffc4 	addi	r16,r16,-1
   486cc:	8d40692e 	bgeu	r17,r21,48874 <__udivdi3+0x580>
   486d0:	a008943a 	slli	r4,r20,16
   486d4:	d9400017 	ldw	r5,0(sp)
   486d8:	89e3c83a 	sub	r17,r17,r7
   486dc:	8110b03a 	or	r8,r16,r4
   486e0:	280cd43a 	srli	r6,r5,16
   486e4:	28ffffcc 	andi	r3,r5,65535
   486e8:	40bfffcc 	andi	r2,r8,65535
   486ec:	400ad43a 	srli	r5,r8,16
   486f0:	10d3383a 	mul	r9,r2,r3
   486f4:	1185383a 	mul	r2,r2,r6
   486f8:	28c7383a 	mul	r3,r5,r3
   486fc:	4808d43a 	srli	r4,r9,16
   48700:	298b383a 	mul	r5,r5,r6
   48704:	10c5883a 	add	r2,r2,r3
   48708:	2089883a 	add	r4,r4,r2
   4870c:	20c0022e 	bgeu	r4,r3,48718 <__udivdi3+0x424>
   48710:	00800074 	movhi	r2,1
   48714:	288b883a 	add	r5,r5,r2
   48718:	2004d43a 	srli	r2,r4,16
   4871c:	288b883a 	add	r5,r5,r2
   48720:	89403f36 	bltu	r17,r5,48820 <__udivdi3+0x52c>
   48724:	89403926 	beq	r17,r5,4880c <__udivdi3+0x518>
   48728:	4005883a 	mov	r2,r8
   4872c:	0009883a 	mov	r4,zero
   48730:	003f5106 	br	48478 <__udivdi3+0x184>
   48734:	85a0983a 	sll	r16,r16,r22
   48738:	3585c83a 	sub	r2,r6,r22
   4873c:	a0a2d83a 	srl	r17,r20,r2
   48740:	802ad43a 	srli	r21,r16,16
   48744:	e084d83a 	srl	r2,fp,r2
   48748:	a586983a 	sll	r3,r20,r22
   4874c:	8809883a 	mov	r4,r17
   48750:	a80b883a 	mov	r5,r21
   48754:	1886b03a 	or	r3,r3,r2
   48758:	d8c00115 	stw	r3,4(sp)
   4875c:	0040de40 	call	40de4 <__udivsi3>
   48760:	8809883a 	mov	r4,r17
   48764:	a80b883a 	mov	r5,r21
   48768:	d8800415 	stw	r2,16(sp)
   4876c:	0040dec0 	call	40dec <__umodsi3>
   48770:	d9000117 	ldw	r4,4(sp)
   48774:	d9400417 	ldw	r5,16(sp)
   48778:	1004943a 	slli	r2,r2,16
   4877c:	85ffffcc 	andi	r23,r16,65535
   48780:	2006d43a 	srli	r3,r4,16
   48784:	b963383a 	mul	r17,r23,r5
   48788:	10c4b03a 	or	r2,r2,r3
   4878c:	1440042e 	bgeu	r2,r17,487a0 <__udivdi3+0x4ac>
   48790:	297fffc4 	addi	r5,r5,-1
   48794:	1405883a 	add	r2,r2,r16
   48798:	d9400415 	stw	r5,16(sp)
   4879c:	1400442e 	bgeu	r2,r16,488b0 <__udivdi3+0x5bc>
   487a0:	1463c83a 	sub	r17,r2,r17
   487a4:	8809883a 	mov	r4,r17
   487a8:	a80b883a 	mov	r5,r21
   487ac:	0040de40 	call	40de4 <__udivsi3>
   487b0:	8809883a 	mov	r4,r17
   487b4:	a80b883a 	mov	r5,r21
   487b8:	1029883a 	mov	r20,r2
   487bc:	0040dec0 	call	40dec <__umodsi3>
   487c0:	d9400117 	ldw	r5,4(sp)
   487c4:	1004943a 	slli	r2,r2,16
   487c8:	bd09383a 	mul	r4,r23,r20
   487cc:	28ffffcc 	andi	r3,r5,65535
   487d0:	10c6b03a 	or	r3,r2,r3
   487d4:	1900062e 	bgeu	r3,r4,487f0 <__udivdi3+0x4fc>
   487d8:	1c07883a 	add	r3,r3,r16
   487dc:	a53fffc4 	addi	r20,r20,-1
   487e0:	1c000336 	bltu	r3,r16,487f0 <__udivdi3+0x4fc>
   487e4:	1900022e 	bgeu	r3,r4,487f0 <__udivdi3+0x4fc>
   487e8:	a53fffc4 	addi	r20,r20,-1
   487ec:	1c07883a 	add	r3,r3,r16
   487f0:	d9400417 	ldw	r5,16(sp)
   487f4:	e5b8983a 	sll	fp,fp,r22
   487f8:	1923c83a 	sub	r17,r3,r4
   487fc:	2804943a 	slli	r2,r5,16
   48800:	a0a8b03a 	or	r20,r20,r2
   48804:	dd000315 	stw	r20,12(sp)
   48808:	003ee106 	br	48390 <__udivdi3+0x9c>
   4880c:	2004943a 	slli	r2,r4,16
   48810:	e5c8983a 	sll	r4,fp,r23
   48814:	48ffffcc 	andi	r3,r9,65535
   48818:	10c5883a 	add	r2,r2,r3
   4881c:	20bfc22e 	bgeu	r4,r2,48728 <__udivdi3+0x434>
   48820:	40bfffc4 	addi	r2,r8,-1
   48824:	0009883a 	mov	r4,zero
   48828:	003f1306 	br	48478 <__udivdi3+0x184>
   4882c:	01400204 	movi	r5,8
   48830:	2805883a 	mov	r2,r5
   48834:	003f0306 	br	48444 <__udivdi3+0x150>
   48838:	01400604 	movi	r5,24
   4883c:	2805883a 	mov	r2,r5
   48840:	003f0006 	br	48444 <__udivdi3+0x150>
   48844:	01400204 	movi	r5,8
   48848:	2805883a 	mov	r2,r5
   4884c:	003ec206 	br	48358 <__udivdi3+0x64>
   48850:	01400604 	movi	r5,24
   48854:	2805883a 	mov	r2,r5
   48858:	003ebf06 	br	48358 <__udivdi3+0x64>
   4885c:	01400204 	movi	r5,8
   48860:	2805883a 	mov	r2,r5
   48864:	003f1706 	br	484c4 <__udivdi3+0x1d0>
   48868:	01400604 	movi	r5,24
   4886c:	2805883a 	mov	r2,r5
   48870:	003f1406 	br	484c4 <__udivdi3+0x1d0>
   48874:	89ff962e 	bgeu	r17,r7,486d0 <__udivdi3+0x3dc>
   48878:	8d63883a 	add	r17,r17,r21
   4887c:	843fffc4 	addi	r16,r16,-1
   48880:	003f9306 	br	486d0 <__udivdi3+0x3dc>
   48884:	147f802e 	bgeu	r2,r17,48688 <__udivdi3+0x394>
   48888:	a53fffc4 	addi	r20,r20,-1
   4888c:	1545883a 	add	r2,r2,r21
   48890:	003f7d06 	br	48688 <__udivdi3+0x394>
   48894:	a53fffc4 	addi	r20,r20,-1
   48898:	003ede06 	br	48414 <__udivdi3+0x120>
   4889c:	b5bfffc4 	addi	r22,r22,-1
   488a0:	1405883a 	add	r2,r2,r16
   488a4:	003f2806 	br	48548 <__udivdi3+0x254>
   488a8:	a53fffc4 	addi	r20,r20,-1
   488ac:	003f3706 	br	4858c <__udivdi3+0x298>
   488b0:	147fbb2e 	bgeu	r2,r17,487a0 <__udivdi3+0x4ac>
   488b4:	297fffc4 	addi	r5,r5,-1
   488b8:	1405883a 	add	r2,r2,r16
   488bc:	d9400415 	stw	r5,16(sp)
   488c0:	003fb706 	br	487a0 <__udivdi3+0x4ac>
   488c4:	b5bfffc4 	addi	r22,r22,-1
   488c8:	1405883a 	add	r2,r2,r16
   488cc:	003ec006 	br	483d0 <__udivdi3+0xdc>

000488d0 <__umoddi3>:
   488d0:	defff104 	addi	sp,sp,-60
   488d4:	dd800b15 	stw	r22,44(sp)
   488d8:	dd000915 	stw	r20,36(sp)
   488dc:	dc000515 	stw	r16,20(sp)
   488e0:	dfc00e15 	stw	ra,56(sp)
   488e4:	df000d15 	stw	fp,52(sp)
   488e8:	ddc00c15 	stw	r23,48(sp)
   488ec:	dd400a15 	stw	r21,40(sp)
   488f0:	dcc00815 	stw	r19,32(sp)
   488f4:	dc800715 	stw	r18,28(sp)
   488f8:	dc400615 	stw	r17,24(sp)
   488fc:	3021883a 	mov	r16,r6
   48900:	202d883a 	mov	r22,r4
   48904:	2829883a 	mov	r20,r5
   48908:	38002b1e 	bne	r7,zero,489b8 <__umoddi3+0xe8>
   4890c:	29805036 	bltu	r5,r6,48a50 <__umoddi3+0x180>
   48910:	30008a26 	beq	r6,zero,48b3c <__umoddi3+0x26c>
   48914:	00bfffd4 	movui	r2,65535
   48918:	14008236 	bltu	r2,r16,48b24 <__umoddi3+0x254>
   4891c:	00803fc4 	movi	r2,255
   48920:	14013636 	bltu	r2,r16,48dfc <__umoddi3+0x52c>
   48924:	000b883a 	mov	r5,zero
   48928:	0005883a 	mov	r2,zero
   4892c:	8084d83a 	srl	r2,r16,r2
   48930:	01000174 	movhi	r4,5
   48934:	21360b04 	addi	r4,r4,-10196
   48938:	01800804 	movi	r6,32
   4893c:	1105883a 	add	r2,r2,r4
   48940:	10c00003 	ldbu	r3,0(r2)
   48944:	28c7883a 	add	r3,r5,r3
   48948:	30efc83a 	sub	r23,r6,r3
   4894c:	b800941e 	bne	r23,zero,48ba0 <__umoddi3+0x2d0>
   48950:	802ad43a 	srli	r21,r16,16
   48954:	a423c83a 	sub	r17,r20,r16
   48958:	0039883a 	mov	fp,zero
   4895c:	853fffcc 	andi	r20,r16,65535
   48960:	8809883a 	mov	r4,r17
   48964:	a80b883a 	mov	r5,r21
   48968:	0040de40 	call	40de4 <__udivsi3>
   4896c:	8809883a 	mov	r4,r17
   48970:	a80b883a 	mov	r5,r21
   48974:	a0a3383a 	mul	r17,r20,r2
   48978:	0040dec0 	call	40dec <__umodsi3>
   4897c:	1004943a 	slli	r2,r2,16
   48980:	b006d43a 	srli	r3,r22,16
   48984:	10c4b03a 	or	r2,r2,r3
   48988:	1440032e 	bgeu	r2,r17,48998 <__umoddi3+0xc8>
   4898c:	1405883a 	add	r2,r2,r16
   48990:	14000136 	bltu	r2,r16,48998 <__umoddi3+0xc8>
   48994:	14413536 	bltu	r2,r17,48e6c <__umoddi3+0x59c>
   48998:	1463c83a 	sub	r17,r2,r17
   4899c:	8809883a 	mov	r4,r17
   489a0:	a80b883a 	mov	r5,r21
   489a4:	0040de40 	call	40de4 <__udivsi3>
   489a8:	8809883a 	mov	r4,r17
   489ac:	a0a3383a 	mul	r17,r20,r2
   489b0:	a80b883a 	mov	r5,r21
   489b4:	00004d06 	br	48aec <__umoddi3+0x21c>
   489b8:	380d883a 	mov	r6,r7
   489bc:	29c0102e 	bgeu	r5,r7,48a00 <__umoddi3+0x130>
   489c0:	2011883a 	mov	r8,r4
   489c4:	2813883a 	mov	r9,r5
   489c8:	4005883a 	mov	r2,r8
   489cc:	4807883a 	mov	r3,r9
   489d0:	dfc00e17 	ldw	ra,56(sp)
   489d4:	df000d17 	ldw	fp,52(sp)
   489d8:	ddc00c17 	ldw	r23,48(sp)
   489dc:	dd800b17 	ldw	r22,44(sp)
   489e0:	dd400a17 	ldw	r21,40(sp)
   489e4:	dd000917 	ldw	r20,36(sp)
   489e8:	dcc00817 	ldw	r19,32(sp)
   489ec:	dc800717 	ldw	r18,28(sp)
   489f0:	dc400617 	ldw	r17,24(sp)
   489f4:	dc000517 	ldw	r16,20(sp)
   489f8:	dec00f04 	addi	sp,sp,60
   489fc:	f800283a 	ret
   48a00:	00bfffd4 	movui	r2,65535
   48a04:	11c05a36 	bltu	r2,r7,48b70 <__umoddi3+0x2a0>
   48a08:	00803fc4 	movi	r2,255
   48a0c:	11c0fe36 	bltu	r2,r7,48e08 <__umoddi3+0x538>
   48a10:	000b883a 	mov	r5,zero
   48a14:	0005883a 	mov	r2,zero
   48a18:	3084d83a 	srl	r2,r6,r2
   48a1c:	01000174 	movhi	r4,5
   48a20:	21360b04 	addi	r4,r4,-10196
   48a24:	01c00804 	movi	r7,32
   48a28:	1105883a 	add	r2,r2,r4
   48a2c:	10c00003 	ldbu	r3,0(r2)
   48a30:	28c7883a 	add	r3,r5,r3
   48a34:	38ebc83a 	sub	r21,r7,r3
   48a38:	a800851e 	bne	r21,zero,48c50 <__umoddi3+0x380>
   48a3c:	35005236 	bltu	r6,r20,48b88 <__umoddi3+0x2b8>
   48a40:	b400512e 	bgeu	r22,r16,48b88 <__umoddi3+0x2b8>
   48a44:	b011883a 	mov	r8,r22
   48a48:	a013883a 	mov	r9,r20
   48a4c:	003fde06 	br	489c8 <__umoddi3+0xf8>
   48a50:	00bfffd4 	movui	r2,65535
   48a54:	11804036 	bltu	r2,r6,48b58 <__umoddi3+0x288>
   48a58:	00803fc4 	movi	r2,255
   48a5c:	1180ed36 	bltu	r2,r6,48e14 <__umoddi3+0x544>
   48a60:	000b883a 	mov	r5,zero
   48a64:	0005883a 	mov	r2,zero
   48a68:	8084d83a 	srl	r2,r16,r2
   48a6c:	01000174 	movhi	r4,5
   48a70:	21360b04 	addi	r4,r4,-10196
   48a74:	01800804 	movi	r6,32
   48a78:	1105883a 	add	r2,r2,r4
   48a7c:	10c00003 	ldbu	r3,0(r2)
   48a80:	28c7883a 	add	r3,r5,r3
   48a84:	30c7c83a 	sub	r3,r6,r3
   48a88:	1800bf1e 	bne	r3,zero,48d88 <__umoddi3+0x4b8>
   48a8c:	0039883a 	mov	fp,zero
   48a90:	802ad43a 	srli	r21,r16,16
   48a94:	a009883a 	mov	r4,r20
   48a98:	85ffffcc 	andi	r23,r16,65535
   48a9c:	a80b883a 	mov	r5,r21
   48aa0:	0040de40 	call	40de4 <__udivsi3>
   48aa4:	a009883a 	mov	r4,r20
   48aa8:	a80b883a 	mov	r5,r21
   48aac:	b8a3383a 	mul	r17,r23,r2
   48ab0:	0040dec0 	call	40dec <__umodsi3>
   48ab4:	1004943a 	slli	r2,r2,16
   48ab8:	b006d43a 	srli	r3,r22,16
   48abc:	10c4b03a 	or	r2,r2,r3
   48ac0:	1440032e 	bgeu	r2,r17,48ad0 <__umoddi3+0x200>
   48ac4:	1405883a 	add	r2,r2,r16
   48ac8:	14000136 	bltu	r2,r16,48ad0 <__umoddi3+0x200>
   48acc:	1440e536 	bltu	r2,r17,48e64 <__umoddi3+0x594>
   48ad0:	1463c83a 	sub	r17,r2,r17
   48ad4:	8809883a 	mov	r4,r17
   48ad8:	a80b883a 	mov	r5,r21
   48adc:	0040de40 	call	40de4 <__udivsi3>
   48ae0:	8809883a 	mov	r4,r17
   48ae4:	b8a3383a 	mul	r17,r23,r2
   48ae8:	a80b883a 	mov	r5,r21
   48aec:	0040dec0 	call	40dec <__umodsi3>
   48af0:	1004943a 	slli	r2,r2,16
   48af4:	b0ffffcc 	andi	r3,r22,65535
   48af8:	10c4b03a 	or	r2,r2,r3
   48afc:	1440042e 	bgeu	r2,r17,48b10 <__umoddi3+0x240>
   48b00:	1405883a 	add	r2,r2,r16
   48b04:	14000236 	bltu	r2,r16,48b10 <__umoddi3+0x240>
   48b08:	1440012e 	bgeu	r2,r17,48b10 <__umoddi3+0x240>
   48b0c:	1405883a 	add	r2,r2,r16
   48b10:	1445c83a 	sub	r2,r2,r17
   48b14:	1724d83a 	srl	r18,r2,fp
   48b18:	0013883a 	mov	r9,zero
   48b1c:	9011883a 	mov	r8,r18
   48b20:	003fa906 	br	489c8 <__umoddi3+0xf8>
   48b24:	00804034 	movhi	r2,256
   48b28:	10bfffc4 	addi	r2,r2,-1
   48b2c:	1400b036 	bltu	r2,r16,48df0 <__umoddi3+0x520>
   48b30:	01400404 	movi	r5,16
   48b34:	2805883a 	mov	r2,r5
   48b38:	003f7c06 	br	4892c <__umoddi3+0x5c>
   48b3c:	01000044 	movi	r4,1
   48b40:	000b883a 	mov	r5,zero
   48b44:	0040de40 	call	40de4 <__udivsi3>
   48b48:	1021883a 	mov	r16,r2
   48b4c:	00bfffd4 	movui	r2,65535
   48b50:	143ff436 	bltu	r2,r16,48b24 <__umoddi3+0x254>
   48b54:	003f7106 	br	4891c <__umoddi3+0x4c>
   48b58:	00804034 	movhi	r2,256
   48b5c:	10bfffc4 	addi	r2,r2,-1
   48b60:	1180af36 	bltu	r2,r6,48e20 <__umoddi3+0x550>
   48b64:	01400404 	movi	r5,16
   48b68:	2805883a 	mov	r2,r5
   48b6c:	003fbe06 	br	48a68 <__umoddi3+0x198>
   48b70:	00804034 	movhi	r2,256
   48b74:	10bfffc4 	addi	r2,r2,-1
   48b78:	11c0ac36 	bltu	r2,r7,48e2c <__umoddi3+0x55c>
   48b7c:	01400404 	movi	r5,16
   48b80:	2805883a 	mov	r2,r5
   48b84:	003fa406 	br	48a18 <__umoddi3+0x148>
   48b88:	b409c83a 	sub	r4,r22,r16
   48b8c:	b105803a 	cmpltu	r2,r22,r4
   48b90:	a187c83a 	sub	r3,r20,r6
   48b94:	18a9c83a 	sub	r20,r3,r2
   48b98:	202d883a 	mov	r22,r4
   48b9c:	003fa906 	br	48a44 <__umoddi3+0x174>
   48ba0:	85e0983a 	sll	r16,r16,r23
   48ba4:	35c5c83a 	sub	r2,r6,r23
   48ba8:	a0a2d83a 	srl	r17,r20,r2
   48bac:	802ad43a 	srli	r21,r16,16
   48bb0:	b084d83a 	srl	r2,r22,r2
   48bb4:	a5c6983a 	sll	r3,r20,r23
   48bb8:	8809883a 	mov	r4,r17
   48bbc:	a80b883a 	mov	r5,r21
   48bc0:	1886b03a 	or	r3,r3,r2
   48bc4:	d8c00115 	stw	r3,4(sp)
   48bc8:	853fffcc 	andi	r20,r16,65535
   48bcc:	0040de40 	call	40de4 <__udivsi3>
   48bd0:	8809883a 	mov	r4,r17
   48bd4:	a80b883a 	mov	r5,r21
   48bd8:	a0a3383a 	mul	r17,r20,r2
   48bdc:	0040dec0 	call	40dec <__umodsi3>
   48be0:	d9000117 	ldw	r4,4(sp)
   48be4:	1004943a 	slli	r2,r2,16
   48be8:	b839883a 	mov	fp,r23
   48bec:	2006d43a 	srli	r3,r4,16
   48bf0:	10c4b03a 	or	r2,r2,r3
   48bf4:	1440022e 	bgeu	r2,r17,48c00 <__umoddi3+0x330>
   48bf8:	1405883a 	add	r2,r2,r16
   48bfc:	1400962e 	bgeu	r2,r16,48e58 <__umoddi3+0x588>
   48c00:	1463c83a 	sub	r17,r2,r17
   48c04:	8809883a 	mov	r4,r17
   48c08:	a80b883a 	mov	r5,r21
   48c0c:	0040de40 	call	40de4 <__udivsi3>
   48c10:	8809883a 	mov	r4,r17
   48c14:	a80b883a 	mov	r5,r21
   48c18:	a0a3383a 	mul	r17,r20,r2
   48c1c:	0040dec0 	call	40dec <__umodsi3>
   48c20:	d9400117 	ldw	r5,4(sp)
   48c24:	1004943a 	slli	r2,r2,16
   48c28:	28ffffcc 	andi	r3,r5,65535
   48c2c:	10c4b03a 	or	r2,r2,r3
   48c30:	1440042e 	bgeu	r2,r17,48c44 <__umoddi3+0x374>
   48c34:	1405883a 	add	r2,r2,r16
   48c38:	14000236 	bltu	r2,r16,48c44 <__umoddi3+0x374>
   48c3c:	1440012e 	bgeu	r2,r17,48c44 <__umoddi3+0x374>
   48c40:	1405883a 	add	r2,r2,r16
   48c44:	b5ec983a 	sll	r22,r22,r23
   48c48:	1463c83a 	sub	r17,r2,r17
   48c4c:	003f4406 	br	48960 <__umoddi3+0x90>
   48c50:	3d4fc83a 	sub	r7,r7,r21
   48c54:	3546983a 	sll	r3,r6,r21
   48c58:	81c4d83a 	srl	r2,r16,r7
   48c5c:	a1e2d83a 	srl	r17,r20,r7
   48c60:	a54c983a 	sll	r6,r20,r21
   48c64:	18aeb03a 	or	r23,r3,r2
   48c68:	b828d43a 	srli	r20,r23,16
   48c6c:	b1c4d83a 	srl	r2,r22,r7
   48c70:	8809883a 	mov	r4,r17
   48c74:	a00b883a 	mov	r5,r20
   48c78:	308cb03a 	or	r6,r6,r2
   48c7c:	d9c00315 	stw	r7,12(sp)
   48c80:	d9800215 	stw	r6,8(sp)
   48c84:	0040de40 	call	40de4 <__udivsi3>
   48c88:	8809883a 	mov	r4,r17
   48c8c:	a00b883a 	mov	r5,r20
   48c90:	1039883a 	mov	fp,r2
   48c94:	0040dec0 	call	40dec <__umodsi3>
   48c98:	b8ffffcc 	andi	r3,r23,65535
   48c9c:	d8c00415 	stw	r3,16(sp)
   48ca0:	d9000217 	ldw	r4,8(sp)
   48ca4:	d9400417 	ldw	r5,16(sp)
   48ca8:	1004943a 	slli	r2,r2,16
   48cac:	2006d43a 	srli	r3,r4,16
   48cb0:	8560983a 	sll	r16,r16,r21
   48cb4:	2f23383a 	mul	r17,r5,fp
   48cb8:	10c4b03a 	or	r2,r2,r3
   48cbc:	dc000015 	stw	r16,0(sp)
   48cc0:	b56c983a 	sll	r22,r22,r21
   48cc4:	1440032e 	bgeu	r2,r17,48cd4 <__umoddi3+0x404>
   48cc8:	15c5883a 	add	r2,r2,r23
   48ccc:	e73fffc4 	addi	fp,fp,-1
   48cd0:	15c05d2e 	bgeu	r2,r23,48e48 <__umoddi3+0x578>
   48cd4:	1463c83a 	sub	r17,r2,r17
   48cd8:	8809883a 	mov	r4,r17
   48cdc:	a00b883a 	mov	r5,r20
   48ce0:	0040de40 	call	40de4 <__udivsi3>
   48ce4:	8809883a 	mov	r4,r17
   48ce8:	a00b883a 	mov	r5,r20
   48cec:	1021883a 	mov	r16,r2
   48cf0:	0040dec0 	call	40dec <__umodsi3>
   48cf4:	d8c00417 	ldw	r3,16(sp)
   48cf8:	d9000217 	ldw	r4,8(sp)
   48cfc:	1004943a 	slli	r2,r2,16
   48d00:	1c23383a 	mul	r17,r3,r16
   48d04:	20ffffcc 	andi	r3,r4,65535
   48d08:	10ceb03a 	or	r7,r2,r3
   48d0c:	3c40032e 	bgeu	r7,r17,48d1c <__umoddi3+0x44c>
   48d10:	3dcf883a 	add	r7,r7,r23
   48d14:	843fffc4 	addi	r16,r16,-1
   48d18:	3dc0472e 	bgeu	r7,r23,48e38 <__umoddi3+0x568>
   48d1c:	e004943a 	slli	r2,fp,16
   48d20:	d9400017 	ldw	r5,0(sp)
   48d24:	3c4fc83a 	sub	r7,r7,r17
   48d28:	8084b03a 	or	r2,r16,r2
   48d2c:	28ffffcc 	andi	r3,r5,65535
   48d30:	280cd43a 	srli	r6,r5,16
   48d34:	100ad43a 	srli	r5,r2,16
   48d38:	10bfffcc 	andi	r2,r2,65535
   48d3c:	10d1383a 	mul	r8,r2,r3
   48d40:	28c7383a 	mul	r3,r5,r3
   48d44:	1185383a 	mul	r2,r2,r6
   48d48:	4008d43a 	srli	r4,r8,16
   48d4c:	298b383a 	mul	r5,r5,r6
   48d50:	10c5883a 	add	r2,r2,r3
   48d54:	2089883a 	add	r4,r4,r2
   48d58:	20c0022e 	bgeu	r4,r3,48d64 <__umoddi3+0x494>
   48d5c:	00800074 	movhi	r2,1
   48d60:	288b883a 	add	r5,r5,r2
   48d64:	2004d43a 	srli	r2,r4,16
   48d68:	2008943a 	slli	r4,r4,16
   48d6c:	40ffffcc 	andi	r3,r8,65535
   48d70:	288b883a 	add	r5,r5,r2
   48d74:	20c9883a 	add	r4,r4,r3
   48d78:	39400b36 	bltu	r7,r5,48da8 <__umoddi3+0x4d8>
   48d7c:	39403d26 	beq	r7,r5,48e74 <__umoddi3+0x5a4>
   48d80:	394bc83a 	sub	r5,r7,r5
   48d84:	00000f06 	br	48dc4 <__umoddi3+0x4f4>
   48d88:	30c5c83a 	sub	r2,r6,r3
   48d8c:	1839883a 	mov	fp,r3
   48d90:	b084d83a 	srl	r2,r22,r2
   48d94:	a0c6983a 	sll	r3,r20,r3
   48d98:	8720983a 	sll	r16,r16,fp
   48d9c:	b72c983a 	sll	r22,r22,fp
   48da0:	18a8b03a 	or	r20,r3,r2
   48da4:	003f3a06 	br	48a90 <__umoddi3+0x1c0>
   48da8:	d8c00017 	ldw	r3,0(sp)
   48dac:	20c5c83a 	sub	r2,r4,r3
   48db0:	2089803a 	cmpltu	r4,r4,r2
   48db4:	2dc7c83a 	sub	r3,r5,r23
   48db8:	1907c83a 	sub	r3,r3,r4
   48dbc:	38cbc83a 	sub	r5,r7,r3
   48dc0:	1009883a 	mov	r4,r2
   48dc4:	b105c83a 	sub	r2,r22,r4
   48dc8:	b087803a 	cmpltu	r3,r22,r2
   48dcc:	28c7c83a 	sub	r3,r5,r3
   48dd0:	d9400317 	ldw	r5,12(sp)
   48dd4:	1544d83a 	srl	r2,r2,r21
   48dd8:	1948983a 	sll	r4,r3,r5
   48ddc:	1d46d83a 	srl	r3,r3,r21
   48de0:	20a4b03a 	or	r18,r4,r2
   48de4:	9011883a 	mov	r8,r18
   48de8:	1813883a 	mov	r9,r3
   48dec:	003ef606 	br	489c8 <__umoddi3+0xf8>
   48df0:	01400604 	movi	r5,24
   48df4:	2805883a 	mov	r2,r5
   48df8:	003ecc06 	br	4892c <__umoddi3+0x5c>
   48dfc:	01400204 	movi	r5,8
   48e00:	2805883a 	mov	r2,r5
   48e04:	003ec906 	br	4892c <__umoddi3+0x5c>
   48e08:	01400204 	movi	r5,8
   48e0c:	2805883a 	mov	r2,r5
   48e10:	003f0106 	br	48a18 <__umoddi3+0x148>
   48e14:	01400204 	movi	r5,8
   48e18:	2805883a 	mov	r2,r5
   48e1c:	003f1206 	br	48a68 <__umoddi3+0x198>
   48e20:	01400604 	movi	r5,24
   48e24:	2805883a 	mov	r2,r5
   48e28:	003f0f06 	br	48a68 <__umoddi3+0x198>
   48e2c:	01400604 	movi	r5,24
   48e30:	2805883a 	mov	r2,r5
   48e34:	003ef806 	br	48a18 <__umoddi3+0x148>
   48e38:	3c7fb82e 	bgeu	r7,r17,48d1c <__umoddi3+0x44c>
   48e3c:	843fffc4 	addi	r16,r16,-1
   48e40:	3dcf883a 	add	r7,r7,r23
   48e44:	003fb506 	br	48d1c <__umoddi3+0x44c>
   48e48:	147fa22e 	bgeu	r2,r17,48cd4 <__umoddi3+0x404>
   48e4c:	e73fffc4 	addi	fp,fp,-1
   48e50:	15c5883a 	add	r2,r2,r23
   48e54:	003f9f06 	br	48cd4 <__umoddi3+0x404>
   48e58:	147f692e 	bgeu	r2,r17,48c00 <__umoddi3+0x330>
   48e5c:	1405883a 	add	r2,r2,r16
   48e60:	003f6706 	br	48c00 <__umoddi3+0x330>
   48e64:	1405883a 	add	r2,r2,r16
   48e68:	003f1906 	br	48ad0 <__umoddi3+0x200>
   48e6c:	1405883a 	add	r2,r2,r16
   48e70:	003ec906 	br	48998 <__umoddi3+0xc8>
   48e74:	b13fcc36 	bltu	r22,r4,48da8 <__umoddi3+0x4d8>
   48e78:	000b883a 	mov	r5,zero
   48e7c:	003fd106 	br	48dc4 <__umoddi3+0x4f4>

00048e80 <_fpadd_parts>:
   48e80:	defff804 	addi	sp,sp,-32
   48e84:	dcc00315 	stw	r19,12(sp)
   48e88:	2027883a 	mov	r19,r4
   48e8c:	21000017 	ldw	r4,0(r4)
   48e90:	00c00044 	movi	r3,1
   48e94:	dd400515 	stw	r21,20(sp)
   48e98:	dd000415 	stw	r20,16(sp)
   48e9c:	ddc00715 	stw	r23,28(sp)
   48ea0:	dd800615 	stw	r22,24(sp)
   48ea4:	dc800215 	stw	r18,8(sp)
   48ea8:	dc400115 	stw	r17,4(sp)
   48eac:	dc000015 	stw	r16,0(sp)
   48eb0:	282b883a 	mov	r21,r5
   48eb4:	3029883a 	mov	r20,r6
   48eb8:	1900632e 	bgeu	r3,r4,49048 <_fpadd_parts+0x1c8>
   48ebc:	28800017 	ldw	r2,0(r5)
   48ec0:	1880812e 	bgeu	r3,r2,490c8 <_fpadd_parts+0x248>
   48ec4:	00c00104 	movi	r3,4
   48ec8:	20c0dc26 	beq	r4,r3,4923c <_fpadd_parts+0x3bc>
   48ecc:	10c07e26 	beq	r2,r3,490c8 <_fpadd_parts+0x248>
   48ed0:	00c00084 	movi	r3,2
   48ed4:	10c06726 	beq	r2,r3,49074 <_fpadd_parts+0x1f4>
   48ed8:	20c07b26 	beq	r4,r3,490c8 <_fpadd_parts+0x248>
   48edc:	9dc00217 	ldw	r23,8(r19)
   48ee0:	28c00217 	ldw	r3,8(r5)
   48ee4:	9c400317 	ldw	r17,12(r19)
   48ee8:	2bc00317 	ldw	r15,12(r5)
   48eec:	b8cdc83a 	sub	r6,r23,r3
   48ef0:	9c800417 	ldw	r18,16(r19)
   48ef4:	2c000417 	ldw	r16,16(r5)
   48ef8:	3009883a 	mov	r4,r6
   48efc:	30009716 	blt	r6,zero,4915c <_fpadd_parts+0x2dc>
   48f00:	00800fc4 	movi	r2,63
   48f04:	11806b16 	blt	r2,r6,490b4 <_fpadd_parts+0x234>
   48f08:	0100a40e 	bge	zero,r4,4919c <_fpadd_parts+0x31c>
   48f0c:	35bff804 	addi	r22,r6,-32
   48f10:	b000bc16 	blt	r22,zero,49204 <_fpadd_parts+0x384>
   48f14:	8596d83a 	srl	r11,r16,r22
   48f18:	0019883a 	mov	r12,zero
   48f1c:	0013883a 	mov	r9,zero
   48f20:	01000044 	movi	r4,1
   48f24:	0015883a 	mov	r10,zero
   48f28:	b000be16 	blt	r22,zero,49224 <_fpadd_parts+0x3a4>
   48f2c:	2590983a 	sll	r8,r4,r22
   48f30:	000f883a 	mov	r7,zero
   48f34:	00bfffc4 	movi	r2,-1
   48f38:	3889883a 	add	r4,r7,r2
   48f3c:	408b883a 	add	r5,r8,r2
   48f40:	21cd803a 	cmpltu	r6,r4,r7
   48f44:	314b883a 	add	r5,r6,r5
   48f48:	7904703a 	and	r2,r15,r4
   48f4c:	8146703a 	and	r3,r16,r5
   48f50:	10c4b03a 	or	r2,r2,r3
   48f54:	10000226 	beq	r2,zero,48f60 <_fpadd_parts+0xe0>
   48f58:	02400044 	movi	r9,1
   48f5c:	0015883a 	mov	r10,zero
   48f60:	5a5eb03a 	or	r15,r11,r9
   48f64:	62a0b03a 	or	r16,r12,r10
   48f68:	99400117 	ldw	r5,4(r19)
   48f6c:	a8800117 	ldw	r2,4(r21)
   48f70:	28806e26 	beq	r5,r2,4912c <_fpadd_parts+0x2ac>
   48f74:	28006626 	beq	r5,zero,49110 <_fpadd_parts+0x290>
   48f78:	7c45c83a 	sub	r2,r15,r17
   48f7c:	7889803a 	cmpltu	r4,r15,r2
   48f80:	8487c83a 	sub	r3,r16,r18
   48f84:	1909c83a 	sub	r4,r3,r4
   48f88:	100d883a 	mov	r6,r2
   48f8c:	200f883a 	mov	r7,r4
   48f90:	38007716 	blt	r7,zero,49170 <_fpadd_parts+0x2f0>
   48f94:	a5c00215 	stw	r23,8(r20)
   48f98:	a1c00415 	stw	r7,16(r20)
   48f9c:	a0000115 	stw	zero,4(r20)
   48fa0:	a1800315 	stw	r6,12(r20)
   48fa4:	a2000317 	ldw	r8,12(r20)
   48fa8:	a2400417 	ldw	r9,16(r20)
   48fac:	00bfffc4 	movi	r2,-1
   48fb0:	408b883a 	add	r5,r8,r2
   48fb4:	2a09803a 	cmpltu	r4,r5,r8
   48fb8:	488d883a 	add	r6,r9,r2
   48fbc:	01c40034 	movhi	r7,4096
   48fc0:	39ffffc4 	addi	r7,r7,-1
   48fc4:	218d883a 	add	r6,r4,r6
   48fc8:	39801736 	bltu	r7,r6,49028 <_fpadd_parts+0x1a8>
   48fcc:	31c06526 	beq	r6,r7,49164 <_fpadd_parts+0x2e4>
   48fd0:	a3000217 	ldw	r12,8(r20)
   48fd4:	4209883a 	add	r4,r8,r8
   48fd8:	00bfffc4 	movi	r2,-1
   48fdc:	220f803a 	cmpltu	r7,r4,r8
   48fe0:	4a4b883a 	add	r5,r9,r9
   48fe4:	394f883a 	add	r7,r7,r5
   48fe8:	2095883a 	add	r10,r4,r2
   48fec:	3897883a 	add	r11,r7,r2
   48ff0:	510d803a 	cmpltu	r6,r10,r4
   48ff4:	6099883a 	add	r12,r12,r2
   48ff8:	32d7883a 	add	r11,r6,r11
   48ffc:	00840034 	movhi	r2,4096
   49000:	10bfffc4 	addi	r2,r2,-1
   49004:	2011883a 	mov	r8,r4
   49008:	3813883a 	mov	r9,r7
   4900c:	a1000315 	stw	r4,12(r20)
   49010:	a1c00415 	stw	r7,16(r20)
   49014:	a3000215 	stw	r12,8(r20)
   49018:	12c00336 	bltu	r2,r11,49028 <_fpadd_parts+0x1a8>
   4901c:	58bfed1e 	bne	r11,r2,48fd4 <_fpadd_parts+0x154>
   49020:	00bfff84 	movi	r2,-2
   49024:	12bfeb2e 	bgeu	r2,r10,48fd4 <_fpadd_parts+0x154>
   49028:	a2800417 	ldw	r10,16(r20)
   4902c:	008000c4 	movi	r2,3
   49030:	00c80034 	movhi	r3,8192
   49034:	18ffffc4 	addi	r3,r3,-1
   49038:	a2400317 	ldw	r9,12(r20)
   4903c:	a0800015 	stw	r2,0(r20)
   49040:	1a802336 	bltu	r3,r10,490d0 <_fpadd_parts+0x250>
   49044:	a027883a 	mov	r19,r20
   49048:	9805883a 	mov	r2,r19
   4904c:	ddc00717 	ldw	r23,28(sp)
   49050:	dd800617 	ldw	r22,24(sp)
   49054:	dd400517 	ldw	r21,20(sp)
   49058:	dd000417 	ldw	r20,16(sp)
   4905c:	dcc00317 	ldw	r19,12(sp)
   49060:	dc800217 	ldw	r18,8(sp)
   49064:	dc400117 	ldw	r17,4(sp)
   49068:	dc000017 	ldw	r16,0(sp)
   4906c:	dec00804 	addi	sp,sp,32
   49070:	f800283a 	ret
   49074:	20fff41e 	bne	r4,r3,49048 <_fpadd_parts+0x1c8>
   49078:	31000015 	stw	r4,0(r6)
   4907c:	98800117 	ldw	r2,4(r19)
   49080:	30800115 	stw	r2,4(r6)
   49084:	98c00217 	ldw	r3,8(r19)
   49088:	30c00215 	stw	r3,8(r6)
   4908c:	98800317 	ldw	r2,12(r19)
   49090:	30800315 	stw	r2,12(r6)
   49094:	98c00417 	ldw	r3,16(r19)
   49098:	30c00415 	stw	r3,16(r6)
   4909c:	98800117 	ldw	r2,4(r19)
   490a0:	28c00117 	ldw	r3,4(r5)
   490a4:	3027883a 	mov	r19,r6
   490a8:	10c4703a 	and	r2,r2,r3
   490ac:	30800115 	stw	r2,4(r6)
   490b0:	003fe506 	br	49048 <_fpadd_parts+0x1c8>
   490b4:	1dc02616 	blt	r3,r23,49150 <_fpadd_parts+0x2d0>
   490b8:	0023883a 	mov	r17,zero
   490bc:	182f883a 	mov	r23,r3
   490c0:	0025883a 	mov	r18,zero
   490c4:	003fa806 	br	48f68 <_fpadd_parts+0xe8>
   490c8:	a827883a 	mov	r19,r21
   490cc:	003fde06 	br	49048 <_fpadd_parts+0x1c8>
   490d0:	01800044 	movi	r6,1
   490d4:	500497fa 	slli	r2,r10,31
   490d8:	4808d07a 	srli	r4,r9,1
   490dc:	518ad83a 	srl	r5,r10,r6
   490e0:	a2000217 	ldw	r8,8(r20)
   490e4:	1108b03a 	or	r4,r2,r4
   490e8:	0007883a 	mov	r3,zero
   490ec:	4984703a 	and	r2,r9,r6
   490f0:	208cb03a 	or	r6,r4,r2
   490f4:	28ceb03a 	or	r7,r5,r3
   490f8:	42000044 	addi	r8,r8,1
   490fc:	a027883a 	mov	r19,r20
   49100:	a1c00415 	stw	r7,16(r20)
   49104:	a2000215 	stw	r8,8(r20)
   49108:	a1800315 	stw	r6,12(r20)
   4910c:	003fce06 	br	49048 <_fpadd_parts+0x1c8>
   49110:	8bc5c83a 	sub	r2,r17,r15
   49114:	8889803a 	cmpltu	r4,r17,r2
   49118:	9407c83a 	sub	r3,r18,r16
   4911c:	1909c83a 	sub	r4,r3,r4
   49120:	100d883a 	mov	r6,r2
   49124:	200f883a 	mov	r7,r4
   49128:	003f9906 	br	48f90 <_fpadd_parts+0x110>
   4912c:	7c45883a 	add	r2,r15,r17
   49130:	13c9803a 	cmpltu	r4,r2,r15
   49134:	8487883a 	add	r3,r16,r18
   49138:	20c9883a 	add	r4,r4,r3
   4913c:	a1400115 	stw	r5,4(r20)
   49140:	a5c00215 	stw	r23,8(r20)
   49144:	a0800315 	stw	r2,12(r20)
   49148:	a1000415 	stw	r4,16(r20)
   4914c:	003fb606 	br	49028 <_fpadd_parts+0x1a8>
   49150:	001f883a 	mov	r15,zero
   49154:	0021883a 	mov	r16,zero
   49158:	003f8306 	br	48f68 <_fpadd_parts+0xe8>
   4915c:	018dc83a 	sub	r6,zero,r6
   49160:	003f6706 	br	48f00 <_fpadd_parts+0x80>
   49164:	00bfff84 	movi	r2,-2
   49168:	117faf36 	bltu	r2,r5,49028 <_fpadd_parts+0x1a8>
   4916c:	003f9806 	br	48fd0 <_fpadd_parts+0x150>
   49170:	0005883a 	mov	r2,zero
   49174:	1189c83a 	sub	r4,r2,r6
   49178:	1105803a 	cmpltu	r2,r2,r4
   4917c:	01cbc83a 	sub	r5,zero,r7
   49180:	2885c83a 	sub	r2,r5,r2
   49184:	01800044 	movi	r6,1
   49188:	a1800115 	stw	r6,4(r20)
   4918c:	a5c00215 	stw	r23,8(r20)
   49190:	a1000315 	stw	r4,12(r20)
   49194:	a0800415 	stw	r2,16(r20)
   49198:	003f8206 	br	48fa4 <_fpadd_parts+0x124>
   4919c:	203f7226 	beq	r4,zero,48f68 <_fpadd_parts+0xe8>
   491a0:	35bff804 	addi	r22,r6,-32
   491a4:	b9af883a 	add	r23,r23,r6
   491a8:	b0003116 	blt	r22,zero,49270 <_fpadd_parts+0x3f0>
   491ac:	959ad83a 	srl	r13,r18,r22
   491b0:	001d883a 	mov	r14,zero
   491b4:	000f883a 	mov	r7,zero
   491b8:	01000044 	movi	r4,1
   491bc:	0011883a 	mov	r8,zero
   491c0:	b0002516 	blt	r22,zero,49258 <_fpadd_parts+0x3d8>
   491c4:	2594983a 	sll	r10,r4,r22
   491c8:	0013883a 	mov	r9,zero
   491cc:	00bfffc4 	movi	r2,-1
   491d0:	4889883a 	add	r4,r9,r2
   491d4:	508b883a 	add	r5,r10,r2
   491d8:	224d803a 	cmpltu	r6,r4,r9
   491dc:	314b883a 	add	r5,r6,r5
   491e0:	8904703a 	and	r2,r17,r4
   491e4:	9146703a 	and	r3,r18,r5
   491e8:	10c4b03a 	or	r2,r2,r3
   491ec:	10000226 	beq	r2,zero,491f8 <_fpadd_parts+0x378>
   491f0:	01c00044 	movi	r7,1
   491f4:	0011883a 	mov	r8,zero
   491f8:	69e2b03a 	or	r17,r13,r7
   491fc:	7224b03a 	or	r18,r14,r8
   49200:	003f5906 	br	48f68 <_fpadd_parts+0xe8>
   49204:	8407883a 	add	r3,r16,r16
   49208:	008007c4 	movi	r2,31
   4920c:	1185c83a 	sub	r2,r2,r6
   49210:	1886983a 	sll	r3,r3,r2
   49214:	7996d83a 	srl	r11,r15,r6
   49218:	8198d83a 	srl	r12,r16,r6
   4921c:	1ad6b03a 	or	r11,r3,r11
   49220:	003f3e06 	br	48f1c <_fpadd_parts+0x9c>
   49224:	2006d07a 	srli	r3,r4,1
   49228:	008007c4 	movi	r2,31
   4922c:	1185c83a 	sub	r2,r2,r6
   49230:	1890d83a 	srl	r8,r3,r2
   49234:	218e983a 	sll	r7,r4,r6
   49238:	003f3e06 	br	48f34 <_fpadd_parts+0xb4>
   4923c:	113f821e 	bne	r2,r4,49048 <_fpadd_parts+0x1c8>
   49240:	28c00117 	ldw	r3,4(r5)
   49244:	98800117 	ldw	r2,4(r19)
   49248:	10ff7f26 	beq	r2,r3,49048 <_fpadd_parts+0x1c8>
   4924c:	04c00174 	movhi	r19,5
   49250:	9cf60604 	addi	r19,r19,-10216
   49254:	003f7c06 	br	49048 <_fpadd_parts+0x1c8>
   49258:	2006d07a 	srli	r3,r4,1
   4925c:	008007c4 	movi	r2,31
   49260:	1185c83a 	sub	r2,r2,r6
   49264:	1894d83a 	srl	r10,r3,r2
   49268:	2192983a 	sll	r9,r4,r6
   4926c:	003fd706 	br	491cc <_fpadd_parts+0x34c>
   49270:	9487883a 	add	r3,r18,r18
   49274:	008007c4 	movi	r2,31
   49278:	1185c83a 	sub	r2,r2,r6
   4927c:	1886983a 	sll	r3,r3,r2
   49280:	899ad83a 	srl	r13,r17,r6
   49284:	919cd83a 	srl	r14,r18,r6
   49288:	1b5ab03a 	or	r13,r3,r13
   4928c:	003fc906 	br	491b4 <_fpadd_parts+0x334>

00049290 <__subdf3>:
   49290:	deffea04 	addi	sp,sp,-88
   49294:	dcc01415 	stw	r19,80(sp)
   49298:	dcc00404 	addi	r19,sp,16
   4929c:	2011883a 	mov	r8,r4
   492a0:	2813883a 	mov	r9,r5
   492a4:	dc401315 	stw	r17,76(sp)
   492a8:	d809883a 	mov	r4,sp
   492ac:	980b883a 	mov	r5,r19
   492b0:	dc400904 	addi	r17,sp,36
   492b4:	dfc01515 	stw	ra,84(sp)
   492b8:	da400115 	stw	r9,4(sp)
   492bc:	d9c00315 	stw	r7,12(sp)
   492c0:	da000015 	stw	r8,0(sp)
   492c4:	d9800215 	stw	r6,8(sp)
   492c8:	004a3d80 	call	4a3d8 <__unpack_d>
   492cc:	d9000204 	addi	r4,sp,8
   492d0:	880b883a 	mov	r5,r17
   492d4:	004a3d80 	call	4a3d8 <__unpack_d>
   492d8:	d8800a17 	ldw	r2,40(sp)
   492dc:	880b883a 	mov	r5,r17
   492e0:	9809883a 	mov	r4,r19
   492e4:	d9800e04 	addi	r6,sp,56
   492e8:	1080005c 	xori	r2,r2,1
   492ec:	d8800a15 	stw	r2,40(sp)
   492f0:	0048e800 	call	48e80 <_fpadd_parts>
   492f4:	1009883a 	mov	r4,r2
   492f8:	004a0c40 	call	4a0c4 <__pack_d>
   492fc:	dfc01517 	ldw	ra,84(sp)
   49300:	dcc01417 	ldw	r19,80(sp)
   49304:	dc401317 	ldw	r17,76(sp)
   49308:	dec01604 	addi	sp,sp,88
   4930c:	f800283a 	ret

00049310 <__adddf3>:
   49310:	deffea04 	addi	sp,sp,-88
   49314:	dcc01415 	stw	r19,80(sp)
   49318:	dcc00404 	addi	r19,sp,16
   4931c:	2011883a 	mov	r8,r4
   49320:	2813883a 	mov	r9,r5
   49324:	dc401315 	stw	r17,76(sp)
   49328:	d809883a 	mov	r4,sp
   4932c:	980b883a 	mov	r5,r19
   49330:	dc400904 	addi	r17,sp,36
   49334:	dfc01515 	stw	ra,84(sp)
   49338:	da400115 	stw	r9,4(sp)
   4933c:	d9c00315 	stw	r7,12(sp)
   49340:	da000015 	stw	r8,0(sp)
   49344:	d9800215 	stw	r6,8(sp)
   49348:	004a3d80 	call	4a3d8 <__unpack_d>
   4934c:	d9000204 	addi	r4,sp,8
   49350:	880b883a 	mov	r5,r17
   49354:	004a3d80 	call	4a3d8 <__unpack_d>
   49358:	d9800e04 	addi	r6,sp,56
   4935c:	9809883a 	mov	r4,r19
   49360:	880b883a 	mov	r5,r17
   49364:	0048e800 	call	48e80 <_fpadd_parts>
   49368:	1009883a 	mov	r4,r2
   4936c:	004a0c40 	call	4a0c4 <__pack_d>
   49370:	dfc01517 	ldw	ra,84(sp)
   49374:	dcc01417 	ldw	r19,80(sp)
   49378:	dc401317 	ldw	r17,76(sp)
   4937c:	dec01604 	addi	sp,sp,88
   49380:	f800283a 	ret

00049384 <__muldf3>:
   49384:	deffe004 	addi	sp,sp,-128
   49388:	dc401815 	stw	r17,96(sp)
   4938c:	dc400404 	addi	r17,sp,16
   49390:	2011883a 	mov	r8,r4
   49394:	2813883a 	mov	r9,r5
   49398:	dc001715 	stw	r16,92(sp)
   4939c:	d809883a 	mov	r4,sp
   493a0:	880b883a 	mov	r5,r17
   493a4:	dc000904 	addi	r16,sp,36
   493a8:	dfc01f15 	stw	ra,124(sp)
   493ac:	da400115 	stw	r9,4(sp)
   493b0:	d9c00315 	stw	r7,12(sp)
   493b4:	da000015 	stw	r8,0(sp)
   493b8:	d9800215 	stw	r6,8(sp)
   493bc:	ddc01e15 	stw	r23,120(sp)
   493c0:	dd801d15 	stw	r22,116(sp)
   493c4:	dd401c15 	stw	r21,112(sp)
   493c8:	dd001b15 	stw	r20,108(sp)
   493cc:	dcc01a15 	stw	r19,104(sp)
   493d0:	dc801915 	stw	r18,100(sp)
   493d4:	004a3d80 	call	4a3d8 <__unpack_d>
   493d8:	d9000204 	addi	r4,sp,8
   493dc:	800b883a 	mov	r5,r16
   493e0:	004a3d80 	call	4a3d8 <__unpack_d>
   493e4:	d9000417 	ldw	r4,16(sp)
   493e8:	00800044 	movi	r2,1
   493ec:	1100102e 	bgeu	r2,r4,49430 <__muldf3+0xac>
   493f0:	d8c00917 	ldw	r3,36(sp)
   493f4:	10c0062e 	bgeu	r2,r3,49410 <__muldf3+0x8c>
   493f8:	00800104 	movi	r2,4
   493fc:	20800a26 	beq	r4,r2,49428 <__muldf3+0xa4>
   49400:	1880cc26 	beq	r3,r2,49734 <__muldf3+0x3b0>
   49404:	00800084 	movi	r2,2
   49408:	20800926 	beq	r4,r2,49430 <__muldf3+0xac>
   4940c:	1880191e 	bne	r3,r2,49474 <__muldf3+0xf0>
   49410:	d8c00a17 	ldw	r3,40(sp)
   49414:	d8800517 	ldw	r2,20(sp)
   49418:	8009883a 	mov	r4,r16
   4941c:	10c4c03a 	cmpne	r2,r2,r3
   49420:	d8800a15 	stw	r2,40(sp)
   49424:	00000706 	br	49444 <__muldf3+0xc0>
   49428:	00800084 	movi	r2,2
   4942c:	1880c326 	beq	r3,r2,4973c <__muldf3+0x3b8>
   49430:	d8800517 	ldw	r2,20(sp)
   49434:	d8c00a17 	ldw	r3,40(sp)
   49438:	8809883a 	mov	r4,r17
   4943c:	10c4c03a 	cmpne	r2,r2,r3
   49440:	d8800515 	stw	r2,20(sp)
   49444:	004a0c40 	call	4a0c4 <__pack_d>
   49448:	dfc01f17 	ldw	ra,124(sp)
   4944c:	ddc01e17 	ldw	r23,120(sp)
   49450:	dd801d17 	ldw	r22,116(sp)
   49454:	dd401c17 	ldw	r21,112(sp)
   49458:	dd001b17 	ldw	r20,108(sp)
   4945c:	dcc01a17 	ldw	r19,104(sp)
   49460:	dc801917 	ldw	r18,100(sp)
   49464:	dc401817 	ldw	r17,96(sp)
   49468:	dc001717 	ldw	r16,92(sp)
   4946c:	dec02004 	addi	sp,sp,128
   49470:	f800283a 	ret
   49474:	dd800717 	ldw	r22,28(sp)
   49478:	dc800c17 	ldw	r18,48(sp)
   4947c:	002b883a 	mov	r21,zero
   49480:	0023883a 	mov	r17,zero
   49484:	a80b883a 	mov	r5,r21
   49488:	b00d883a 	mov	r6,r22
   4948c:	880f883a 	mov	r7,r17
   49490:	ddc00817 	ldw	r23,32(sp)
   49494:	dcc00d17 	ldw	r19,52(sp)
   49498:	9009883a 	mov	r4,r18
   4949c:	0049fac0 	call	49fac <__muldi3>
   494a0:	001b883a 	mov	r13,zero
   494a4:	680f883a 	mov	r7,r13
   494a8:	b009883a 	mov	r4,r22
   494ac:	000b883a 	mov	r5,zero
   494b0:	980d883a 	mov	r6,r19
   494b4:	b82d883a 	mov	r22,r23
   494b8:	002f883a 	mov	r23,zero
   494bc:	db401615 	stw	r13,88(sp)
   494c0:	d8801315 	stw	r2,76(sp)
   494c4:	d8c01415 	stw	r3,80(sp)
   494c8:	dcc01515 	stw	r19,84(sp)
   494cc:	0049fac0 	call	49fac <__muldi3>
   494d0:	b00d883a 	mov	r6,r22
   494d4:	000b883a 	mov	r5,zero
   494d8:	9009883a 	mov	r4,r18
   494dc:	b80f883a 	mov	r7,r23
   494e0:	1021883a 	mov	r16,r2
   494e4:	1823883a 	mov	r17,r3
   494e8:	0049fac0 	call	49fac <__muldi3>
   494ec:	8085883a 	add	r2,r16,r2
   494f0:	140d803a 	cmpltu	r6,r2,r16
   494f4:	88c7883a 	add	r3,r17,r3
   494f8:	30cd883a 	add	r6,r6,r3
   494fc:	1029883a 	mov	r20,r2
   49500:	302b883a 	mov	r21,r6
   49504:	da801317 	ldw	r10,76(sp)
   49508:	dac01417 	ldw	r11,80(sp)
   4950c:	db001517 	ldw	r12,84(sp)
   49510:	db401617 	ldw	r13,88(sp)
   49514:	3440612e 	bgeu	r6,r17,4969c <__muldf3+0x318>
   49518:	0009883a 	mov	r4,zero
   4951c:	5105883a 	add	r2,r10,r4
   49520:	128d803a 	cmpltu	r6,r2,r10
   49524:	5d07883a 	add	r3,r11,r20
   49528:	30cd883a 	add	r6,r6,r3
   4952c:	0021883a 	mov	r16,zero
   49530:	04400044 	movi	r17,1
   49534:	1025883a 	mov	r18,r2
   49538:	3027883a 	mov	r19,r6
   4953c:	32c06236 	bltu	r6,r11,496c8 <__muldf3+0x344>
   49540:	59807a26 	beq	r11,r6,4972c <__muldf3+0x3a8>
   49544:	680b883a 	mov	r5,r13
   49548:	b80f883a 	mov	r7,r23
   4954c:	6009883a 	mov	r4,r12
   49550:	b00d883a 	mov	r6,r22
   49554:	0049fac0 	call	49fac <__muldi3>
   49558:	1009883a 	mov	r4,r2
   4955c:	000f883a 	mov	r7,zero
   49560:	1545883a 	add	r2,r2,r21
   49564:	1111803a 	cmpltu	r8,r2,r4
   49568:	19c7883a 	add	r3,r3,r7
   4956c:	40c7883a 	add	r3,r8,r3
   49570:	88cb883a 	add	r5,r17,r3
   49574:	d8c00617 	ldw	r3,24(sp)
   49578:	8089883a 	add	r4,r16,r2
   4957c:	d8800b17 	ldw	r2,44(sp)
   49580:	18c00104 	addi	r3,r3,4
   49584:	240d803a 	cmpltu	r6,r4,r16
   49588:	10c7883a 	add	r3,r2,r3
   4958c:	2013883a 	mov	r9,r4
   49590:	d8800a17 	ldw	r2,40(sp)
   49594:	d9000517 	ldw	r4,20(sp)
   49598:	314d883a 	add	r6,r6,r5
   4959c:	3015883a 	mov	r10,r6
   495a0:	2088c03a 	cmpne	r4,r4,r2
   495a4:	00880034 	movhi	r2,8192
   495a8:	10bfffc4 	addi	r2,r2,-1
   495ac:	d9000f15 	stw	r4,60(sp)
   495b0:	d8c01015 	stw	r3,64(sp)
   495b4:	1180162e 	bgeu	r2,r6,49610 <__muldf3+0x28c>
   495b8:	1811883a 	mov	r8,r3
   495bc:	101f883a 	mov	r15,r2
   495c0:	980497fa 	slli	r2,r19,31
   495c4:	9016d07a 	srli	r11,r18,1
   495c8:	500697fa 	slli	r3,r10,31
   495cc:	480cd07a 	srli	r6,r9,1
   495d0:	500ed07a 	srli	r7,r10,1
   495d4:	12d6b03a 	or	r11,r2,r11
   495d8:	00800044 	movi	r2,1
   495dc:	198cb03a 	or	r6,r3,r6
   495e0:	4888703a 	and	r4,r9,r2
   495e4:	9818d07a 	srli	r12,r19,1
   495e8:	001b883a 	mov	r13,zero
   495ec:	03a00034 	movhi	r14,32768
   495f0:	3013883a 	mov	r9,r6
   495f4:	3815883a 	mov	r10,r7
   495f8:	4091883a 	add	r8,r8,r2
   495fc:	20000226 	beq	r4,zero,49608 <__muldf3+0x284>
   49600:	5b64b03a 	or	r18,r11,r13
   49604:	63a6b03a 	or	r19,r12,r14
   49608:	7abfed36 	bltu	r15,r10,495c0 <__muldf3+0x23c>
   4960c:	da001015 	stw	r8,64(sp)
   49610:	00840034 	movhi	r2,4096
   49614:	10bfffc4 	addi	r2,r2,-1
   49618:	12801436 	bltu	r2,r10,4966c <__muldf3+0x2e8>
   4961c:	da001017 	ldw	r8,64(sp)
   49620:	101f883a 	mov	r15,r2
   49624:	4a45883a 	add	r2,r9,r9
   49628:	124d803a 	cmpltu	r6,r2,r9
   4962c:	5287883a 	add	r3,r10,r10
   49630:	9497883a 	add	r11,r18,r18
   49634:	5c8f803a 	cmpltu	r7,r11,r18
   49638:	9cd9883a 	add	r12,r19,r19
   4963c:	01000044 	movi	r4,1
   49640:	30cd883a 	add	r6,r6,r3
   49644:	3b0f883a 	add	r7,r7,r12
   49648:	423fffc4 	addi	r8,r8,-1
   4964c:	1013883a 	mov	r9,r2
   49650:	3015883a 	mov	r10,r6
   49654:	111ab03a 	or	r13,r2,r4
   49658:	98003016 	blt	r19,zero,4971c <__muldf3+0x398>
   4965c:	5825883a 	mov	r18,r11
   49660:	3827883a 	mov	r19,r7
   49664:	7abfef2e 	bgeu	r15,r10,49624 <__muldf3+0x2a0>
   49668:	da001015 	stw	r8,64(sp)
   4966c:	00803fc4 	movi	r2,255
   49670:	488e703a 	and	r7,r9,r2
   49674:	00802004 	movi	r2,128
   49678:	0007883a 	mov	r3,zero
   4967c:	0011883a 	mov	r8,zero
   49680:	38801826 	beq	r7,r2,496e4 <__muldf3+0x360>
   49684:	008000c4 	movi	r2,3
   49688:	d9000e04 	addi	r4,sp,56
   4968c:	da801215 	stw	r10,72(sp)
   49690:	d8800e15 	stw	r2,56(sp)
   49694:	da401115 	stw	r9,68(sp)
   49698:	003f6a06 	br	49444 <__muldf3+0xc0>
   4969c:	89802126 	beq	r17,r6,49724 <__muldf3+0x3a0>
   496a0:	0009883a 	mov	r4,zero
   496a4:	5105883a 	add	r2,r10,r4
   496a8:	128d803a 	cmpltu	r6,r2,r10
   496ac:	5d07883a 	add	r3,r11,r20
   496b0:	30cd883a 	add	r6,r6,r3
   496b4:	0021883a 	mov	r16,zero
   496b8:	0023883a 	mov	r17,zero
   496bc:	1025883a 	mov	r18,r2
   496c0:	3027883a 	mov	r19,r6
   496c4:	32ff9e2e 	bgeu	r6,r11,49540 <__muldf3+0x1bc>
   496c8:	00800044 	movi	r2,1
   496cc:	8089883a 	add	r4,r16,r2
   496d0:	240d803a 	cmpltu	r6,r4,r16
   496d4:	344d883a 	add	r6,r6,r17
   496d8:	2021883a 	mov	r16,r4
   496dc:	3023883a 	mov	r17,r6
   496e0:	003f9806 	br	49544 <__muldf3+0x1c0>
   496e4:	403fe71e 	bne	r8,zero,49684 <__muldf3+0x300>
   496e8:	01004004 	movi	r4,256
   496ec:	4904703a 	and	r2,r9,r4
   496f0:	10c4b03a 	or	r2,r2,r3
   496f4:	103fe31e 	bne	r2,zero,49684 <__muldf3+0x300>
   496f8:	94c4b03a 	or	r2,r18,r19
   496fc:	103fe126 	beq	r2,zero,49684 <__muldf3+0x300>
   49700:	49c5883a 	add	r2,r9,r7
   49704:	1251803a 	cmpltu	r8,r2,r9
   49708:	4291883a 	add	r8,r8,r10
   4970c:	013fc004 	movi	r4,-256
   49710:	1112703a 	and	r9,r2,r4
   49714:	4015883a 	mov	r10,r8
   49718:	003fda06 	br	49684 <__muldf3+0x300>
   4971c:	6813883a 	mov	r9,r13
   49720:	003fce06 	br	4965c <__muldf3+0x2d8>
   49724:	143f7c36 	bltu	r2,r16,49518 <__muldf3+0x194>
   49728:	003fdd06 	br	496a0 <__muldf3+0x31c>
   4972c:	12bf852e 	bgeu	r2,r10,49544 <__muldf3+0x1c0>
   49730:	003fe506 	br	496c8 <__muldf3+0x344>
   49734:	00800084 	movi	r2,2
   49738:	20bf351e 	bne	r4,r2,49410 <__muldf3+0x8c>
   4973c:	01000174 	movhi	r4,5
   49740:	21360604 	addi	r4,r4,-10216
   49744:	003f3f06 	br	49444 <__muldf3+0xc0>

00049748 <__divdf3>:
   49748:	deffed04 	addi	sp,sp,-76
   4974c:	dcc01115 	stw	r19,68(sp)
   49750:	dcc00404 	addi	r19,sp,16
   49754:	2011883a 	mov	r8,r4
   49758:	2813883a 	mov	r9,r5
   4975c:	dc000e15 	stw	r16,56(sp)
   49760:	d809883a 	mov	r4,sp
   49764:	980b883a 	mov	r5,r19
   49768:	dc000904 	addi	r16,sp,36
   4976c:	dfc01215 	stw	ra,72(sp)
   49770:	da400115 	stw	r9,4(sp)
   49774:	d9c00315 	stw	r7,12(sp)
   49778:	da000015 	stw	r8,0(sp)
   4977c:	d9800215 	stw	r6,8(sp)
   49780:	dc801015 	stw	r18,64(sp)
   49784:	dc400f15 	stw	r17,60(sp)
   49788:	004a3d80 	call	4a3d8 <__unpack_d>
   4978c:	d9000204 	addi	r4,sp,8
   49790:	800b883a 	mov	r5,r16
   49794:	004a3d80 	call	4a3d8 <__unpack_d>
   49798:	d9000417 	ldw	r4,16(sp)
   4979c:	00800044 	movi	r2,1
   497a0:	11000b2e 	bgeu	r2,r4,497d0 <__divdf3+0x88>
   497a4:	d9400917 	ldw	r5,36(sp)
   497a8:	1140762e 	bgeu	r2,r5,49984 <__divdf3+0x23c>
   497ac:	d8800517 	ldw	r2,20(sp)
   497b0:	d8c00a17 	ldw	r3,40(sp)
   497b4:	01800104 	movi	r6,4
   497b8:	10c4f03a 	xor	r2,r2,r3
   497bc:	d8800515 	stw	r2,20(sp)
   497c0:	21800226 	beq	r4,r6,497cc <__divdf3+0x84>
   497c4:	00800084 	movi	r2,2
   497c8:	2080141e 	bne	r4,r2,4981c <__divdf3+0xd4>
   497cc:	29000926 	beq	r5,r4,497f4 <__divdf3+0xac>
   497d0:	9809883a 	mov	r4,r19
   497d4:	004a0c40 	call	4a0c4 <__pack_d>
   497d8:	dfc01217 	ldw	ra,72(sp)
   497dc:	dcc01117 	ldw	r19,68(sp)
   497e0:	dc801017 	ldw	r18,64(sp)
   497e4:	dc400f17 	ldw	r17,60(sp)
   497e8:	dc000e17 	ldw	r16,56(sp)
   497ec:	dec01304 	addi	sp,sp,76
   497f0:	f800283a 	ret
   497f4:	01000174 	movhi	r4,5
   497f8:	21360604 	addi	r4,r4,-10216
   497fc:	004a0c40 	call	4a0c4 <__pack_d>
   49800:	dfc01217 	ldw	ra,72(sp)
   49804:	dcc01117 	ldw	r19,68(sp)
   49808:	dc801017 	ldw	r18,64(sp)
   4980c:	dc400f17 	ldw	r17,60(sp)
   49810:	dc000e17 	ldw	r16,56(sp)
   49814:	dec01304 	addi	sp,sp,76
   49818:	f800283a 	ret
   4981c:	29805b26 	beq	r5,r6,4998c <__divdf3+0x244>
   49820:	28802d26 	beq	r5,r2,498d8 <__divdf3+0x190>
   49824:	d8c00617 	ldw	r3,24(sp)
   49828:	d8800b17 	ldw	r2,44(sp)
   4982c:	d9c00817 	ldw	r7,32(sp)
   49830:	dc400d17 	ldw	r17,52(sp)
   49834:	188bc83a 	sub	r5,r3,r2
   49838:	d9800717 	ldw	r6,28(sp)
   4983c:	dc000c17 	ldw	r16,48(sp)
   49840:	d9400615 	stw	r5,24(sp)
   49844:	3c403836 	bltu	r7,r17,49928 <__divdf3+0x1e0>
   49848:	89c03626 	beq	r17,r7,49924 <__divdf3+0x1dc>
   4984c:	0015883a 	mov	r10,zero
   49850:	001d883a 	mov	r14,zero
   49854:	02c40034 	movhi	r11,4096
   49858:	001f883a 	mov	r15,zero
   4985c:	003f883a 	mov	ra,zero
   49860:	04800f44 	movi	r18,61
   49864:	00000f06 	br	498a4 <__divdf3+0x15c>
   49868:	601d883a 	mov	r14,r12
   4986c:	681f883a 	mov	r15,r13
   49870:	400d883a 	mov	r6,r8
   49874:	100f883a 	mov	r7,r2
   49878:	3191883a 	add	r8,r6,r6
   4987c:	5808d07a 	srli	r4,r11,1
   49880:	4185803a 	cmpltu	r2,r8,r6
   49884:	39d3883a 	add	r9,r7,r7
   49888:	28c6b03a 	or	r3,r5,r3
   4988c:	1245883a 	add	r2,r2,r9
   49890:	1815883a 	mov	r10,r3
   49894:	2017883a 	mov	r11,r4
   49898:	400d883a 	mov	r6,r8
   4989c:	100f883a 	mov	r7,r2
   498a0:	fc801726 	beq	ra,r18,49900 <__divdf3+0x1b8>
   498a4:	580a97fa 	slli	r5,r11,31
   498a8:	5006d07a 	srli	r3,r10,1
   498ac:	ffc00044 	addi	ra,ra,1
   498b0:	3c7ff136 	bltu	r7,r17,49878 <__divdf3+0x130>
   498b4:	3411c83a 	sub	r8,r6,r16
   498b8:	3205803a 	cmpltu	r2,r6,r8
   498bc:	3c53c83a 	sub	r9,r7,r17
   498c0:	7298b03a 	or	r12,r14,r10
   498c4:	7adab03a 	or	r13,r15,r11
   498c8:	4885c83a 	sub	r2,r9,r2
   498cc:	89ffe61e 	bne	r17,r7,49868 <__divdf3+0x120>
   498d0:	343fe936 	bltu	r6,r16,49878 <__divdf3+0x130>
   498d4:	003fe406 	br	49868 <__divdf3+0x120>
   498d8:	9809883a 	mov	r4,r19
   498dc:	d9800415 	stw	r6,16(sp)
   498e0:	004a0c40 	call	4a0c4 <__pack_d>
   498e4:	dfc01217 	ldw	ra,72(sp)
   498e8:	dcc01117 	ldw	r19,68(sp)
   498ec:	dc801017 	ldw	r18,64(sp)
   498f0:	dc400f17 	ldw	r17,60(sp)
   498f4:	dc000e17 	ldw	r16,56(sp)
   498f8:	dec01304 	addi	sp,sp,76
   498fc:	f800283a 	ret
   49900:	00803fc4 	movi	r2,255
   49904:	7090703a 	and	r8,r14,r2
   49908:	00802004 	movi	r2,128
   4990c:	0007883a 	mov	r3,zero
   49910:	0013883a 	mov	r9,zero
   49914:	40800d26 	beq	r8,r2,4994c <__divdf3+0x204>
   49918:	dbc00815 	stw	r15,32(sp)
   4991c:	db800715 	stw	r14,28(sp)
   49920:	003fab06 	br	497d0 <__divdf3+0x88>
   49924:	343fc92e 	bgeu	r6,r16,4984c <__divdf3+0x104>
   49928:	3185883a 	add	r2,r6,r6
   4992c:	1189803a 	cmpltu	r4,r2,r6
   49930:	39c7883a 	add	r3,r7,r7
   49934:	20c9883a 	add	r4,r4,r3
   49938:	297fffc4 	addi	r5,r5,-1
   4993c:	100d883a 	mov	r6,r2
   49940:	200f883a 	mov	r7,r4
   49944:	d9400615 	stw	r5,24(sp)
   49948:	003fc006 	br	4984c <__divdf3+0x104>
   4994c:	483ff21e 	bne	r9,zero,49918 <__divdf3+0x1d0>
   49950:	01004004 	movi	r4,256
   49954:	7104703a 	and	r2,r14,r4
   49958:	10c4b03a 	or	r2,r2,r3
   4995c:	103fee1e 	bne	r2,zero,49918 <__divdf3+0x1d0>
   49960:	31c4b03a 	or	r2,r6,r7
   49964:	103fec26 	beq	r2,zero,49918 <__divdf3+0x1d0>
   49968:	7205883a 	add	r2,r14,r8
   4996c:	1391803a 	cmpltu	r8,r2,r14
   49970:	43d1883a 	add	r8,r8,r15
   49974:	013fc004 	movi	r4,-256
   49978:	111c703a 	and	r14,r2,r4
   4997c:	401f883a 	mov	r15,r8
   49980:	003fe506 	br	49918 <__divdf3+0x1d0>
   49984:	8009883a 	mov	r4,r16
   49988:	003f9206 	br	497d4 <__divdf3+0x8c>
   4998c:	9809883a 	mov	r4,r19
   49990:	d8000715 	stw	zero,28(sp)
   49994:	d8000815 	stw	zero,32(sp)
   49998:	d8000615 	stw	zero,24(sp)
   4999c:	003f8d06 	br	497d4 <__divdf3+0x8c>

000499a0 <__eqdf2>:
   499a0:	deffef04 	addi	sp,sp,-68
   499a4:	dc400f15 	stw	r17,60(sp)
   499a8:	dc400404 	addi	r17,sp,16
   499ac:	2005883a 	mov	r2,r4
   499b0:	2807883a 	mov	r3,r5
   499b4:	dc000e15 	stw	r16,56(sp)
   499b8:	d809883a 	mov	r4,sp
   499bc:	880b883a 	mov	r5,r17
   499c0:	dc000904 	addi	r16,sp,36
   499c4:	d8c00115 	stw	r3,4(sp)
   499c8:	d8800015 	stw	r2,0(sp)
   499cc:	d9800215 	stw	r6,8(sp)
   499d0:	dfc01015 	stw	ra,64(sp)
   499d4:	d9c00315 	stw	r7,12(sp)
   499d8:	004a3d80 	call	4a3d8 <__unpack_d>
   499dc:	d9000204 	addi	r4,sp,8
   499e0:	800b883a 	mov	r5,r16
   499e4:	004a3d80 	call	4a3d8 <__unpack_d>
   499e8:	d8800417 	ldw	r2,16(sp)
   499ec:	00c00044 	movi	r3,1
   499f0:	180d883a 	mov	r6,r3
   499f4:	1880062e 	bgeu	r3,r2,49a10 <__eqdf2+0x70>
   499f8:	d8800917 	ldw	r2,36(sp)
   499fc:	8809883a 	mov	r4,r17
   49a00:	800b883a 	mov	r5,r16
   49a04:	1880022e 	bgeu	r3,r2,49a10 <__eqdf2+0x70>
   49a08:	004a5100 	call	4a510 <__fpcmp_parts_d>
   49a0c:	100d883a 	mov	r6,r2
   49a10:	3005883a 	mov	r2,r6
   49a14:	dfc01017 	ldw	ra,64(sp)
   49a18:	dc400f17 	ldw	r17,60(sp)
   49a1c:	dc000e17 	ldw	r16,56(sp)
   49a20:	dec01104 	addi	sp,sp,68
   49a24:	f800283a 	ret

00049a28 <__nedf2>:
   49a28:	deffef04 	addi	sp,sp,-68
   49a2c:	dc400f15 	stw	r17,60(sp)
   49a30:	dc400404 	addi	r17,sp,16
   49a34:	2005883a 	mov	r2,r4
   49a38:	2807883a 	mov	r3,r5
   49a3c:	dc000e15 	stw	r16,56(sp)
   49a40:	d809883a 	mov	r4,sp
   49a44:	880b883a 	mov	r5,r17
   49a48:	dc000904 	addi	r16,sp,36
   49a4c:	d8c00115 	stw	r3,4(sp)
   49a50:	d8800015 	stw	r2,0(sp)
   49a54:	d9800215 	stw	r6,8(sp)
   49a58:	dfc01015 	stw	ra,64(sp)
   49a5c:	d9c00315 	stw	r7,12(sp)
   49a60:	004a3d80 	call	4a3d8 <__unpack_d>
   49a64:	d9000204 	addi	r4,sp,8
   49a68:	800b883a 	mov	r5,r16
   49a6c:	004a3d80 	call	4a3d8 <__unpack_d>
   49a70:	d8800417 	ldw	r2,16(sp)
   49a74:	00c00044 	movi	r3,1
   49a78:	180d883a 	mov	r6,r3
   49a7c:	1880062e 	bgeu	r3,r2,49a98 <__nedf2+0x70>
   49a80:	d8800917 	ldw	r2,36(sp)
   49a84:	8809883a 	mov	r4,r17
   49a88:	800b883a 	mov	r5,r16
   49a8c:	1880022e 	bgeu	r3,r2,49a98 <__nedf2+0x70>
   49a90:	004a5100 	call	4a510 <__fpcmp_parts_d>
   49a94:	100d883a 	mov	r6,r2
   49a98:	3005883a 	mov	r2,r6
   49a9c:	dfc01017 	ldw	ra,64(sp)
   49aa0:	dc400f17 	ldw	r17,60(sp)
   49aa4:	dc000e17 	ldw	r16,56(sp)
   49aa8:	dec01104 	addi	sp,sp,68
   49aac:	f800283a 	ret

00049ab0 <__gtdf2>:
   49ab0:	deffef04 	addi	sp,sp,-68
   49ab4:	dc400f15 	stw	r17,60(sp)
   49ab8:	dc400404 	addi	r17,sp,16
   49abc:	2005883a 	mov	r2,r4
   49ac0:	2807883a 	mov	r3,r5
   49ac4:	dc000e15 	stw	r16,56(sp)
   49ac8:	d809883a 	mov	r4,sp
   49acc:	880b883a 	mov	r5,r17
   49ad0:	dc000904 	addi	r16,sp,36
   49ad4:	d8c00115 	stw	r3,4(sp)
   49ad8:	d8800015 	stw	r2,0(sp)
   49adc:	d9800215 	stw	r6,8(sp)
   49ae0:	dfc01015 	stw	ra,64(sp)
   49ae4:	d9c00315 	stw	r7,12(sp)
   49ae8:	004a3d80 	call	4a3d8 <__unpack_d>
   49aec:	d9000204 	addi	r4,sp,8
   49af0:	800b883a 	mov	r5,r16
   49af4:	004a3d80 	call	4a3d8 <__unpack_d>
   49af8:	d8800417 	ldw	r2,16(sp)
   49afc:	00c00044 	movi	r3,1
   49b00:	01bfffc4 	movi	r6,-1
   49b04:	1880062e 	bgeu	r3,r2,49b20 <__gtdf2+0x70>
   49b08:	d8800917 	ldw	r2,36(sp)
   49b0c:	8809883a 	mov	r4,r17
   49b10:	800b883a 	mov	r5,r16
   49b14:	1880022e 	bgeu	r3,r2,49b20 <__gtdf2+0x70>
   49b18:	004a5100 	call	4a510 <__fpcmp_parts_d>
   49b1c:	100d883a 	mov	r6,r2
   49b20:	3005883a 	mov	r2,r6
   49b24:	dfc01017 	ldw	ra,64(sp)
   49b28:	dc400f17 	ldw	r17,60(sp)
   49b2c:	dc000e17 	ldw	r16,56(sp)
   49b30:	dec01104 	addi	sp,sp,68
   49b34:	f800283a 	ret

00049b38 <__gedf2>:
   49b38:	deffef04 	addi	sp,sp,-68
   49b3c:	dc400f15 	stw	r17,60(sp)
   49b40:	dc400404 	addi	r17,sp,16
   49b44:	2005883a 	mov	r2,r4
   49b48:	2807883a 	mov	r3,r5
   49b4c:	dc000e15 	stw	r16,56(sp)
   49b50:	d809883a 	mov	r4,sp
   49b54:	880b883a 	mov	r5,r17
   49b58:	dc000904 	addi	r16,sp,36
   49b5c:	d8c00115 	stw	r3,4(sp)
   49b60:	d8800015 	stw	r2,0(sp)
   49b64:	d9800215 	stw	r6,8(sp)
   49b68:	dfc01015 	stw	ra,64(sp)
   49b6c:	d9c00315 	stw	r7,12(sp)
   49b70:	004a3d80 	call	4a3d8 <__unpack_d>
   49b74:	d9000204 	addi	r4,sp,8
   49b78:	800b883a 	mov	r5,r16
   49b7c:	004a3d80 	call	4a3d8 <__unpack_d>
   49b80:	d8800417 	ldw	r2,16(sp)
   49b84:	00c00044 	movi	r3,1
   49b88:	01bfffc4 	movi	r6,-1
   49b8c:	1880062e 	bgeu	r3,r2,49ba8 <__gedf2+0x70>
   49b90:	d8800917 	ldw	r2,36(sp)
   49b94:	8809883a 	mov	r4,r17
   49b98:	800b883a 	mov	r5,r16
   49b9c:	1880022e 	bgeu	r3,r2,49ba8 <__gedf2+0x70>
   49ba0:	004a5100 	call	4a510 <__fpcmp_parts_d>
   49ba4:	100d883a 	mov	r6,r2
   49ba8:	3005883a 	mov	r2,r6
   49bac:	dfc01017 	ldw	ra,64(sp)
   49bb0:	dc400f17 	ldw	r17,60(sp)
   49bb4:	dc000e17 	ldw	r16,56(sp)
   49bb8:	dec01104 	addi	sp,sp,68
   49bbc:	f800283a 	ret

00049bc0 <__ltdf2>:
   49bc0:	deffef04 	addi	sp,sp,-68
   49bc4:	dc400f15 	stw	r17,60(sp)
   49bc8:	dc400404 	addi	r17,sp,16
   49bcc:	2005883a 	mov	r2,r4
   49bd0:	2807883a 	mov	r3,r5
   49bd4:	dc000e15 	stw	r16,56(sp)
   49bd8:	d809883a 	mov	r4,sp
   49bdc:	880b883a 	mov	r5,r17
   49be0:	dc000904 	addi	r16,sp,36
   49be4:	d8c00115 	stw	r3,4(sp)
   49be8:	d8800015 	stw	r2,0(sp)
   49bec:	d9800215 	stw	r6,8(sp)
   49bf0:	dfc01015 	stw	ra,64(sp)
   49bf4:	d9c00315 	stw	r7,12(sp)
   49bf8:	004a3d80 	call	4a3d8 <__unpack_d>
   49bfc:	d9000204 	addi	r4,sp,8
   49c00:	800b883a 	mov	r5,r16
   49c04:	004a3d80 	call	4a3d8 <__unpack_d>
   49c08:	d8800417 	ldw	r2,16(sp)
   49c0c:	00c00044 	movi	r3,1
   49c10:	180d883a 	mov	r6,r3
   49c14:	1880062e 	bgeu	r3,r2,49c30 <__ltdf2+0x70>
   49c18:	d8800917 	ldw	r2,36(sp)
   49c1c:	8809883a 	mov	r4,r17
   49c20:	800b883a 	mov	r5,r16
   49c24:	1880022e 	bgeu	r3,r2,49c30 <__ltdf2+0x70>
   49c28:	004a5100 	call	4a510 <__fpcmp_parts_d>
   49c2c:	100d883a 	mov	r6,r2
   49c30:	3005883a 	mov	r2,r6
   49c34:	dfc01017 	ldw	ra,64(sp)
   49c38:	dc400f17 	ldw	r17,60(sp)
   49c3c:	dc000e17 	ldw	r16,56(sp)
   49c40:	dec01104 	addi	sp,sp,68
   49c44:	f800283a 	ret

00049c48 <__floatsidf>:
   49c48:	2006d7fa 	srli	r3,r4,31
   49c4c:	defff604 	addi	sp,sp,-40
   49c50:	008000c4 	movi	r2,3
   49c54:	dfc00915 	stw	ra,36(sp)
   49c58:	dcc00815 	stw	r19,32(sp)
   49c5c:	dc800715 	stw	r18,28(sp)
   49c60:	dc400615 	stw	r17,24(sp)
   49c64:	dc000515 	stw	r16,20(sp)
   49c68:	d8800015 	stw	r2,0(sp)
   49c6c:	d8c00115 	stw	r3,4(sp)
   49c70:	20000f1e 	bne	r4,zero,49cb0 <__floatsidf+0x68>
   49c74:	00800084 	movi	r2,2
   49c78:	d8800015 	stw	r2,0(sp)
   49c7c:	d809883a 	mov	r4,sp
   49c80:	004a0c40 	call	4a0c4 <__pack_d>
   49c84:	1009883a 	mov	r4,r2
   49c88:	180b883a 	mov	r5,r3
   49c8c:	2005883a 	mov	r2,r4
   49c90:	2807883a 	mov	r3,r5
   49c94:	dfc00917 	ldw	ra,36(sp)
   49c98:	dcc00817 	ldw	r19,32(sp)
   49c9c:	dc800717 	ldw	r18,28(sp)
   49ca0:	dc400617 	ldw	r17,24(sp)
   49ca4:	dc000517 	ldw	r16,20(sp)
   49ca8:	dec00a04 	addi	sp,sp,40
   49cac:	f800283a 	ret
   49cb0:	00800f04 	movi	r2,60
   49cb4:	1807003a 	cmpeq	r3,r3,zero
   49cb8:	d8800215 	stw	r2,8(sp)
   49cbc:	18001126 	beq	r3,zero,49d04 <__floatsidf+0xbc>
   49cc0:	0027883a 	mov	r19,zero
   49cc4:	2025883a 	mov	r18,r4
   49cc8:	d9000315 	stw	r4,12(sp)
   49ccc:	dcc00415 	stw	r19,16(sp)
   49cd0:	004a0440 	call	4a044 <__clzsi2>
   49cd4:	11000744 	addi	r4,r2,29
   49cd8:	013fe80e 	bge	zero,r4,49c7c <__floatsidf+0x34>
   49cdc:	10bfff44 	addi	r2,r2,-3
   49ce0:	10000c16 	blt	r2,zero,49d14 <__floatsidf+0xcc>
   49ce4:	90a2983a 	sll	r17,r18,r2
   49ce8:	0021883a 	mov	r16,zero
   49cec:	d8800217 	ldw	r2,8(sp)
   49cf0:	dc400415 	stw	r17,16(sp)
   49cf4:	dc000315 	stw	r16,12(sp)
   49cf8:	1105c83a 	sub	r2,r2,r4
   49cfc:	d8800215 	stw	r2,8(sp)
   49d00:	003fde06 	br	49c7c <__floatsidf+0x34>
   49d04:	00a00034 	movhi	r2,32768
   49d08:	20800a26 	beq	r4,r2,49d34 <__floatsidf+0xec>
   49d0c:	0109c83a 	sub	r4,zero,r4
   49d10:	003feb06 	br	49cc0 <__floatsidf+0x78>
   49d14:	9006d07a 	srli	r3,r18,1
   49d18:	008007c4 	movi	r2,31
   49d1c:	1105c83a 	sub	r2,r2,r4
   49d20:	1886d83a 	srl	r3,r3,r2
   49d24:	9922983a 	sll	r17,r19,r4
   49d28:	9120983a 	sll	r16,r18,r4
   49d2c:	1c62b03a 	or	r17,r3,r17
   49d30:	003fee06 	br	49cec <__floatsidf+0xa4>
   49d34:	0009883a 	mov	r4,zero
   49d38:	01707834 	movhi	r5,49632
   49d3c:	003fd306 	br	49c8c <__floatsidf+0x44>

00049d40 <__fixdfsi>:
   49d40:	defff804 	addi	sp,sp,-32
   49d44:	2005883a 	mov	r2,r4
   49d48:	2807883a 	mov	r3,r5
   49d4c:	d809883a 	mov	r4,sp
   49d50:	d9400204 	addi	r5,sp,8
   49d54:	d8c00115 	stw	r3,4(sp)
   49d58:	d8800015 	stw	r2,0(sp)
   49d5c:	dfc00715 	stw	ra,28(sp)
   49d60:	004a3d80 	call	4a3d8 <__unpack_d>
   49d64:	d8c00217 	ldw	r3,8(sp)
   49d68:	00800084 	movi	r2,2
   49d6c:	1880051e 	bne	r3,r2,49d84 <__fixdfsi+0x44>
   49d70:	0007883a 	mov	r3,zero
   49d74:	1805883a 	mov	r2,r3
   49d78:	dfc00717 	ldw	ra,28(sp)
   49d7c:	dec00804 	addi	sp,sp,32
   49d80:	f800283a 	ret
   49d84:	00800044 	movi	r2,1
   49d88:	10fff92e 	bgeu	r2,r3,49d70 <__fixdfsi+0x30>
   49d8c:	00800104 	movi	r2,4
   49d90:	18800426 	beq	r3,r2,49da4 <__fixdfsi+0x64>
   49d94:	d8c00417 	ldw	r3,16(sp)
   49d98:	183ff516 	blt	r3,zero,49d70 <__fixdfsi+0x30>
   49d9c:	00800784 	movi	r2,30
   49da0:	10c0080e 	bge	r2,r3,49dc4 <__fixdfsi+0x84>
   49da4:	d8800317 	ldw	r2,12(sp)
   49da8:	1000121e 	bne	r2,zero,49df4 <__fixdfsi+0xb4>
   49dac:	00e00034 	movhi	r3,32768
   49db0:	18ffffc4 	addi	r3,r3,-1
   49db4:	1805883a 	mov	r2,r3
   49db8:	dfc00717 	ldw	ra,28(sp)
   49dbc:	dec00804 	addi	sp,sp,32
   49dc0:	f800283a 	ret
   49dc4:	00800f04 	movi	r2,60
   49dc8:	10d1c83a 	sub	r8,r2,r3
   49dcc:	40bff804 	addi	r2,r8,-32
   49dd0:	d9800517 	ldw	r6,20(sp)
   49dd4:	d9c00617 	ldw	r7,24(sp)
   49dd8:	10000816 	blt	r2,zero,49dfc <__fixdfsi+0xbc>
   49ddc:	3888d83a 	srl	r4,r7,r2
   49de0:	d8800317 	ldw	r2,12(sp)
   49de4:	2007883a 	mov	r3,r4
   49de8:	103fe226 	beq	r2,zero,49d74 <__fixdfsi+0x34>
   49dec:	0107c83a 	sub	r3,zero,r4
   49df0:	003fe006 	br	49d74 <__fixdfsi+0x34>
   49df4:	00e00034 	movhi	r3,32768
   49df8:	003fde06 	br	49d74 <__fixdfsi+0x34>
   49dfc:	39c7883a 	add	r3,r7,r7
   49e00:	008007c4 	movi	r2,31
   49e04:	1205c83a 	sub	r2,r2,r8
   49e08:	1886983a 	sll	r3,r3,r2
   49e0c:	3208d83a 	srl	r4,r6,r8
   49e10:	1908b03a 	or	r4,r3,r4
   49e14:	003ff206 	br	49de0 <__fixdfsi+0xa0>

00049e18 <__floatunsidf>:
   49e18:	defff204 	addi	sp,sp,-56
   49e1c:	dfc00d15 	stw	ra,52(sp)
   49e20:	ddc00c15 	stw	r23,48(sp)
   49e24:	dd800b15 	stw	r22,44(sp)
   49e28:	dd400a15 	stw	r21,40(sp)
   49e2c:	dd000915 	stw	r20,36(sp)
   49e30:	dcc00815 	stw	r19,32(sp)
   49e34:	dc800715 	stw	r18,28(sp)
   49e38:	dc400615 	stw	r17,24(sp)
   49e3c:	dc000515 	stw	r16,20(sp)
   49e40:	d8000115 	stw	zero,4(sp)
   49e44:	20000f1e 	bne	r4,zero,49e84 <__floatunsidf+0x6c>
   49e48:	00800084 	movi	r2,2
   49e4c:	d8800015 	stw	r2,0(sp)
   49e50:	d809883a 	mov	r4,sp
   49e54:	004a0c40 	call	4a0c4 <__pack_d>
   49e58:	dfc00d17 	ldw	ra,52(sp)
   49e5c:	ddc00c17 	ldw	r23,48(sp)
   49e60:	dd800b17 	ldw	r22,44(sp)
   49e64:	dd400a17 	ldw	r21,40(sp)
   49e68:	dd000917 	ldw	r20,36(sp)
   49e6c:	dcc00817 	ldw	r19,32(sp)
   49e70:	dc800717 	ldw	r18,28(sp)
   49e74:	dc400617 	ldw	r17,24(sp)
   49e78:	dc000517 	ldw	r16,20(sp)
   49e7c:	dec00e04 	addi	sp,sp,56
   49e80:	f800283a 	ret
   49e84:	008000c4 	movi	r2,3
   49e88:	00c00f04 	movi	r3,60
   49e8c:	002f883a 	mov	r23,zero
   49e90:	202d883a 	mov	r22,r4
   49e94:	d8800015 	stw	r2,0(sp)
   49e98:	d8c00215 	stw	r3,8(sp)
   49e9c:	d9000315 	stw	r4,12(sp)
   49ea0:	ddc00415 	stw	r23,16(sp)
   49ea4:	004a0440 	call	4a044 <__clzsi2>
   49ea8:	12400744 	addi	r9,r2,29
   49eac:	48000b16 	blt	r9,zero,49edc <__floatunsidf+0xc4>
   49eb0:	483fe726 	beq	r9,zero,49e50 <__floatunsidf+0x38>
   49eb4:	10bfff44 	addi	r2,r2,-3
   49eb8:	10002e16 	blt	r2,zero,49f74 <__floatunsidf+0x15c>
   49ebc:	b0a2983a 	sll	r17,r22,r2
   49ec0:	0021883a 	mov	r16,zero
   49ec4:	d8800217 	ldw	r2,8(sp)
   49ec8:	dc400415 	stw	r17,16(sp)
   49ecc:	dc000315 	stw	r16,12(sp)
   49ed0:	1245c83a 	sub	r2,r2,r9
   49ed4:	d8800215 	stw	r2,8(sp)
   49ed8:	003fdd06 	br	49e50 <__floatunsidf+0x38>
   49edc:	0255c83a 	sub	r10,zero,r9
   49ee0:	51bff804 	addi	r6,r10,-32
   49ee4:	30001b16 	blt	r6,zero,49f54 <__floatunsidf+0x13c>
   49ee8:	b9a8d83a 	srl	r20,r23,r6
   49eec:	002b883a 	mov	r21,zero
   49ef0:	000f883a 	mov	r7,zero
   49ef4:	01000044 	movi	r4,1
   49ef8:	0011883a 	mov	r8,zero
   49efc:	30002516 	blt	r6,zero,49f94 <__floatunsidf+0x17c>
   49f00:	21a6983a 	sll	r19,r4,r6
   49f04:	0025883a 	mov	r18,zero
   49f08:	00bfffc4 	movi	r2,-1
   49f0c:	9089883a 	add	r4,r18,r2
   49f10:	988b883a 	add	r5,r19,r2
   49f14:	248d803a 	cmpltu	r6,r4,r18
   49f18:	314b883a 	add	r5,r6,r5
   49f1c:	b104703a 	and	r2,r22,r4
   49f20:	b946703a 	and	r3,r23,r5
   49f24:	10c4b03a 	or	r2,r2,r3
   49f28:	10000226 	beq	r2,zero,49f34 <__floatunsidf+0x11c>
   49f2c:	01c00044 	movi	r7,1
   49f30:	0011883a 	mov	r8,zero
   49f34:	d9000217 	ldw	r4,8(sp)
   49f38:	a1c4b03a 	or	r2,r20,r7
   49f3c:	aa06b03a 	or	r3,r21,r8
   49f40:	2249c83a 	sub	r4,r4,r9
   49f44:	d8c00415 	stw	r3,16(sp)
   49f48:	d9000215 	stw	r4,8(sp)
   49f4c:	d8800315 	stw	r2,12(sp)
   49f50:	003fbf06 	br	49e50 <__floatunsidf+0x38>
   49f54:	bdc7883a 	add	r3,r23,r23
   49f58:	008007c4 	movi	r2,31
   49f5c:	1285c83a 	sub	r2,r2,r10
   49f60:	1886983a 	sll	r3,r3,r2
   49f64:	b2a8d83a 	srl	r20,r22,r10
   49f68:	baaad83a 	srl	r21,r23,r10
   49f6c:	1d28b03a 	or	r20,r3,r20
   49f70:	003fdf06 	br	49ef0 <__floatunsidf+0xd8>
   49f74:	b006d07a 	srli	r3,r22,1
   49f78:	008007c4 	movi	r2,31
   49f7c:	1245c83a 	sub	r2,r2,r9
   49f80:	1886d83a 	srl	r3,r3,r2
   49f84:	ba62983a 	sll	r17,r23,r9
   49f88:	b260983a 	sll	r16,r22,r9
   49f8c:	1c62b03a 	or	r17,r3,r17
   49f90:	003fcc06 	br	49ec4 <__floatunsidf+0xac>
   49f94:	2006d07a 	srli	r3,r4,1
   49f98:	008007c4 	movi	r2,31
   49f9c:	1285c83a 	sub	r2,r2,r10
   49fa0:	18a6d83a 	srl	r19,r3,r2
   49fa4:	22a4983a 	sll	r18,r4,r10
   49fa8:	003fd706 	br	49f08 <__floatunsidf+0xf0>

00049fac <__muldi3>:
   49fac:	2011883a 	mov	r8,r4
   49fb0:	427fffcc 	andi	r9,r8,65535
   49fb4:	4018d43a 	srli	r12,r8,16
   49fb8:	32bfffcc 	andi	r10,r6,65535
   49fbc:	3016d43a 	srli	r11,r6,16
   49fc0:	4a85383a 	mul	r2,r9,r10
   49fc4:	6295383a 	mul	r10,r12,r10
   49fc8:	4ad3383a 	mul	r9,r9,r11
   49fcc:	113fffcc 	andi	r4,r2,65535
   49fd0:	1004d43a 	srli	r2,r2,16
   49fd4:	4a93883a 	add	r9,r9,r10
   49fd8:	3807883a 	mov	r3,r7
   49fdc:	1245883a 	add	r2,r2,r9
   49fe0:	280f883a 	mov	r7,r5
   49fe4:	180b883a 	mov	r5,r3
   49fe8:	1006943a 	slli	r3,r2,16
   49fec:	defffd04 	addi	sp,sp,-12
   49ff0:	dc800215 	stw	r18,8(sp)
   49ff4:	1907883a 	add	r3,r3,r4
   49ff8:	dc400115 	stw	r17,4(sp)
   49ffc:	dc000015 	stw	r16,0(sp)
   4a000:	4165383a 	mul	r18,r8,r5
   4a004:	31e3383a 	mul	r17,r6,r7
   4a008:	1012d43a 	srli	r9,r2,16
   4a00c:	62d9383a 	mul	r12,r12,r11
   4a010:	181f883a 	mov	r15,r3
   4a014:	1280022e 	bgeu	r2,r10,4a020 <__muldi3+0x74>
   4a018:	00800074 	movhi	r2,1
   4a01c:	6099883a 	add	r12,r12,r2
   4a020:	624d883a 	add	r6,r12,r9
   4a024:	9187883a 	add	r3,r18,r6
   4a028:	88c7883a 	add	r3,r17,r3
   4a02c:	7805883a 	mov	r2,r15
   4a030:	dc800217 	ldw	r18,8(sp)
   4a034:	dc400117 	ldw	r17,4(sp)
   4a038:	dc000017 	ldw	r16,0(sp)
   4a03c:	dec00304 	addi	sp,sp,12
   4a040:	f800283a 	ret

0004a044 <__clzsi2>:
   4a044:	00bfffd4 	movui	r2,65535
   4a048:	11000e36 	bltu	r2,r4,4a084 <__clzsi2+0x40>
   4a04c:	00803fc4 	movi	r2,255
   4a050:	01400204 	movi	r5,8
   4a054:	0007883a 	mov	r3,zero
   4a058:	11001036 	bltu	r2,r4,4a09c <__clzsi2+0x58>
   4a05c:	000b883a 	mov	r5,zero
   4a060:	20c6d83a 	srl	r3,r4,r3
   4a064:	00800174 	movhi	r2,5
   4a068:	10b60b04 	addi	r2,r2,-10196
   4a06c:	1887883a 	add	r3,r3,r2
   4a070:	18800003 	ldbu	r2,0(r3)
   4a074:	00c00804 	movi	r3,32
   4a078:	2885883a 	add	r2,r5,r2
   4a07c:	1885c83a 	sub	r2,r3,r2
   4a080:	f800283a 	ret
   4a084:	01400404 	movi	r5,16
   4a088:	00804034 	movhi	r2,256
   4a08c:	10bfffc4 	addi	r2,r2,-1
   4a090:	2807883a 	mov	r3,r5
   4a094:	113ff22e 	bgeu	r2,r4,4a060 <__clzsi2+0x1c>
   4a098:	01400604 	movi	r5,24
   4a09c:	2807883a 	mov	r3,r5
   4a0a0:	20c6d83a 	srl	r3,r4,r3
   4a0a4:	00800174 	movhi	r2,5
   4a0a8:	10b60b04 	addi	r2,r2,-10196
   4a0ac:	1887883a 	add	r3,r3,r2
   4a0b0:	18800003 	ldbu	r2,0(r3)
   4a0b4:	00c00804 	movi	r3,32
   4a0b8:	2885883a 	add	r2,r5,r2
   4a0bc:	1885c83a 	sub	r2,r3,r2
   4a0c0:	f800283a 	ret

0004a0c4 <__pack_d>:
   4a0c4:	20c00017 	ldw	r3,0(r4)
   4a0c8:	defffd04 	addi	sp,sp,-12
   4a0cc:	dc000015 	stw	r16,0(sp)
   4a0d0:	dc800215 	stw	r18,8(sp)
   4a0d4:	dc400115 	stw	r17,4(sp)
   4a0d8:	00800044 	movi	r2,1
   4a0dc:	22000317 	ldw	r8,12(r4)
   4a0e0:	001f883a 	mov	r15,zero
   4a0e4:	22400417 	ldw	r9,16(r4)
   4a0e8:	24000117 	ldw	r16,4(r4)
   4a0ec:	10c0552e 	bgeu	r2,r3,4a244 <__pack_d+0x180>
   4a0f0:	00800104 	movi	r2,4
   4a0f4:	18804f26 	beq	r3,r2,4a234 <__pack_d+0x170>
   4a0f8:	00800084 	movi	r2,2
   4a0fc:	18800226 	beq	r3,r2,4a108 <__pack_d+0x44>
   4a100:	4244b03a 	or	r2,r8,r9
   4a104:	10001a1e 	bne	r2,zero,4a170 <__pack_d+0xac>
   4a108:	000d883a 	mov	r6,zero
   4a10c:	000f883a 	mov	r7,zero
   4a110:	0011883a 	mov	r8,zero
   4a114:	00800434 	movhi	r2,16
   4a118:	10bfffc4 	addi	r2,r2,-1
   4a11c:	301d883a 	mov	r14,r6
   4a120:	3884703a 	and	r2,r7,r2
   4a124:	400a953a 	slli	r5,r8,20
   4a128:	79bffc2c 	andhi	r6,r15,65520
   4a12c:	308cb03a 	or	r6,r6,r2
   4a130:	00e00434 	movhi	r3,32784
   4a134:	18ffffc4 	addi	r3,r3,-1
   4a138:	800497fa 	slli	r2,r16,31
   4a13c:	30c6703a 	and	r3,r6,r3
   4a140:	1946b03a 	or	r3,r3,r5
   4a144:	01600034 	movhi	r5,32768
   4a148:	297fffc4 	addi	r5,r5,-1
   4a14c:	194a703a 	and	r5,r3,r5
   4a150:	288ab03a 	or	r5,r5,r2
   4a154:	2807883a 	mov	r3,r5
   4a158:	7005883a 	mov	r2,r14
   4a15c:	dc800217 	ldw	r18,8(sp)
   4a160:	dc400117 	ldw	r17,4(sp)
   4a164:	dc000017 	ldw	r16,0(sp)
   4a168:	dec00304 	addi	sp,sp,12
   4a16c:	f800283a 	ret
   4a170:	21000217 	ldw	r4,8(r4)
   4a174:	00bf0084 	movi	r2,-1022
   4a178:	20803f16 	blt	r4,r2,4a278 <__pack_d+0x1b4>
   4a17c:	0080ffc4 	movi	r2,1023
   4a180:	11002c16 	blt	r2,r4,4a234 <__pack_d+0x170>
   4a184:	00803fc4 	movi	r2,255
   4a188:	408c703a 	and	r6,r8,r2
   4a18c:	00802004 	movi	r2,128
   4a190:	0007883a 	mov	r3,zero
   4a194:	000f883a 	mov	r7,zero
   4a198:	2280ffc4 	addi	r10,r4,1023
   4a19c:	30801e26 	beq	r6,r2,4a218 <__pack_d+0x154>
   4a1a0:	00801fc4 	movi	r2,127
   4a1a4:	4089883a 	add	r4,r8,r2
   4a1a8:	220d803a 	cmpltu	r6,r4,r8
   4a1ac:	324d883a 	add	r6,r6,r9
   4a1b0:	2011883a 	mov	r8,r4
   4a1b4:	3013883a 	mov	r9,r6
   4a1b8:	00880034 	movhi	r2,8192
   4a1bc:	10bfffc4 	addi	r2,r2,-1
   4a1c0:	12400d36 	bltu	r2,r9,4a1f8 <__pack_d+0x134>
   4a1c4:	4804963a 	slli	r2,r9,24
   4a1c8:	400cd23a 	srli	r6,r8,8
   4a1cc:	480ed23a 	srli	r7,r9,8
   4a1d0:	013fffc4 	movi	r4,-1
   4a1d4:	118cb03a 	or	r6,r2,r6
   4a1d8:	01400434 	movhi	r5,16
   4a1dc:	297fffc4 	addi	r5,r5,-1
   4a1e0:	3104703a 	and	r2,r6,r4
   4a1e4:	3946703a 	and	r3,r7,r5
   4a1e8:	5201ffcc 	andi	r8,r10,2047
   4a1ec:	100d883a 	mov	r6,r2
   4a1f0:	180f883a 	mov	r7,r3
   4a1f4:	003fc706 	br	4a114 <__pack_d+0x50>
   4a1f8:	480897fa 	slli	r4,r9,31
   4a1fc:	4004d07a 	srli	r2,r8,1
   4a200:	4806d07a 	srli	r3,r9,1
   4a204:	52800044 	addi	r10,r10,1
   4a208:	2084b03a 	or	r2,r4,r2
   4a20c:	1011883a 	mov	r8,r2
   4a210:	1813883a 	mov	r9,r3
   4a214:	003feb06 	br	4a1c4 <__pack_d+0x100>
   4a218:	383fe11e 	bne	r7,zero,4a1a0 <__pack_d+0xdc>
   4a21c:	01004004 	movi	r4,256
   4a220:	4104703a 	and	r2,r8,r4
   4a224:	10c4b03a 	or	r2,r2,r3
   4a228:	103fe326 	beq	r2,zero,4a1b8 <__pack_d+0xf4>
   4a22c:	3005883a 	mov	r2,r6
   4a230:	003fdc06 	br	4a1a4 <__pack_d+0xe0>
   4a234:	000d883a 	mov	r6,zero
   4a238:	000f883a 	mov	r7,zero
   4a23c:	0201ffc4 	movi	r8,2047
   4a240:	003fb406 	br	4a114 <__pack_d+0x50>
   4a244:	0005883a 	mov	r2,zero
   4a248:	00c00234 	movhi	r3,8
   4a24c:	408cb03a 	or	r6,r8,r2
   4a250:	48ceb03a 	or	r7,r9,r3
   4a254:	013fffc4 	movi	r4,-1
   4a258:	01400434 	movhi	r5,16
   4a25c:	297fffc4 	addi	r5,r5,-1
   4a260:	3104703a 	and	r2,r6,r4
   4a264:	3946703a 	and	r3,r7,r5
   4a268:	100d883a 	mov	r6,r2
   4a26c:	180f883a 	mov	r7,r3
   4a270:	0201ffc4 	movi	r8,2047
   4a274:	003fa706 	br	4a114 <__pack_d+0x50>
   4a278:	1109c83a 	sub	r4,r2,r4
   4a27c:	00800e04 	movi	r2,56
   4a280:	11004316 	blt	r2,r4,4a390 <__pack_d+0x2cc>
   4a284:	21fff804 	addi	r7,r4,-32
   4a288:	38004516 	blt	r7,zero,4a3a0 <__pack_d+0x2dc>
   4a28c:	49d8d83a 	srl	r12,r9,r7
   4a290:	001b883a 	mov	r13,zero
   4a294:	0023883a 	mov	r17,zero
   4a298:	01400044 	movi	r5,1
   4a29c:	0025883a 	mov	r18,zero
   4a2a0:	38004716 	blt	r7,zero,4a3c0 <__pack_d+0x2fc>
   4a2a4:	29d6983a 	sll	r11,r5,r7
   4a2a8:	0015883a 	mov	r10,zero
   4a2ac:	00bfffc4 	movi	r2,-1
   4a2b0:	5089883a 	add	r4,r10,r2
   4a2b4:	588b883a 	add	r5,r11,r2
   4a2b8:	228d803a 	cmpltu	r6,r4,r10
   4a2bc:	314b883a 	add	r5,r6,r5
   4a2c0:	4104703a 	and	r2,r8,r4
   4a2c4:	4946703a 	and	r3,r9,r5
   4a2c8:	10c4b03a 	or	r2,r2,r3
   4a2cc:	10000226 	beq	r2,zero,4a2d8 <__pack_d+0x214>
   4a2d0:	04400044 	movi	r17,1
   4a2d4:	0025883a 	mov	r18,zero
   4a2d8:	00803fc4 	movi	r2,255
   4a2dc:	644eb03a 	or	r7,r12,r17
   4a2e0:	3892703a 	and	r9,r7,r2
   4a2e4:	00802004 	movi	r2,128
   4a2e8:	6c90b03a 	or	r8,r13,r18
   4a2ec:	0015883a 	mov	r10,zero
   4a2f0:	48801626 	beq	r9,r2,4a34c <__pack_d+0x288>
   4a2f4:	01001fc4 	movi	r4,127
   4a2f8:	3905883a 	add	r2,r7,r4
   4a2fc:	11cd803a 	cmpltu	r6,r2,r7
   4a300:	320d883a 	add	r6,r6,r8
   4a304:	100f883a 	mov	r7,r2
   4a308:	00840034 	movhi	r2,4096
   4a30c:	10bfffc4 	addi	r2,r2,-1
   4a310:	3011883a 	mov	r8,r6
   4a314:	0007883a 	mov	r3,zero
   4a318:	11801b36 	bltu	r2,r6,4a388 <__pack_d+0x2c4>
   4a31c:	4004963a 	slli	r2,r8,24
   4a320:	3808d23a 	srli	r4,r7,8
   4a324:	400ad23a 	srli	r5,r8,8
   4a328:	1813883a 	mov	r9,r3
   4a32c:	1108b03a 	or	r4,r2,r4
   4a330:	00bfffc4 	movi	r2,-1
   4a334:	00c00434 	movhi	r3,16
   4a338:	18ffffc4 	addi	r3,r3,-1
   4a33c:	208c703a 	and	r6,r4,r2
   4a340:	28ce703a 	and	r7,r5,r3
   4a344:	4a01ffcc 	andi	r8,r9,2047
   4a348:	003f7206 	br	4a114 <__pack_d+0x50>
   4a34c:	503fe91e 	bne	r10,zero,4a2f4 <__pack_d+0x230>
   4a350:	01004004 	movi	r4,256
   4a354:	3904703a 	and	r2,r7,r4
   4a358:	0007883a 	mov	r3,zero
   4a35c:	10c4b03a 	or	r2,r2,r3
   4a360:	10000626 	beq	r2,zero,4a37c <__pack_d+0x2b8>
   4a364:	3a45883a 	add	r2,r7,r9
   4a368:	11cd803a 	cmpltu	r6,r2,r7
   4a36c:	320d883a 	add	r6,r6,r8
   4a370:	100f883a 	mov	r7,r2
   4a374:	3011883a 	mov	r8,r6
   4a378:	0007883a 	mov	r3,zero
   4a37c:	00840034 	movhi	r2,4096
   4a380:	10bfffc4 	addi	r2,r2,-1
   4a384:	123fe52e 	bgeu	r2,r8,4a31c <__pack_d+0x258>
   4a388:	00c00044 	movi	r3,1
   4a38c:	003fe306 	br	4a31c <__pack_d+0x258>
   4a390:	0009883a 	mov	r4,zero
   4a394:	0013883a 	mov	r9,zero
   4a398:	000b883a 	mov	r5,zero
   4a39c:	003fe406 	br	4a330 <__pack_d+0x26c>
   4a3a0:	4a47883a 	add	r3,r9,r9
   4a3a4:	008007c4 	movi	r2,31
   4a3a8:	1105c83a 	sub	r2,r2,r4
   4a3ac:	1886983a 	sll	r3,r3,r2
   4a3b0:	4118d83a 	srl	r12,r8,r4
   4a3b4:	491ad83a 	srl	r13,r9,r4
   4a3b8:	1b18b03a 	or	r12,r3,r12
   4a3bc:	003fb506 	br	4a294 <__pack_d+0x1d0>
   4a3c0:	2806d07a 	srli	r3,r5,1
   4a3c4:	008007c4 	movi	r2,31
   4a3c8:	1105c83a 	sub	r2,r2,r4
   4a3cc:	1896d83a 	srl	r11,r3,r2
   4a3d0:	2914983a 	sll	r10,r5,r4
   4a3d4:	003fb506 	br	4a2ac <__pack_d+0x1e8>

0004a3d8 <__unpack_d>:
   4a3d8:	20c00117 	ldw	r3,4(r4)
   4a3dc:	22400017 	ldw	r9,0(r4)
   4a3e0:	00800434 	movhi	r2,16
   4a3e4:	10bfffc4 	addi	r2,r2,-1
   4a3e8:	1808d53a 	srli	r4,r3,20
   4a3ec:	180cd7fa 	srli	r6,r3,31
   4a3f0:	1894703a 	and	r10,r3,r2
   4a3f4:	2201ffcc 	andi	r8,r4,2047
   4a3f8:	281b883a 	mov	r13,r5
   4a3fc:	4817883a 	mov	r11,r9
   4a400:	29800115 	stw	r6,4(r5)
   4a404:	5019883a 	mov	r12,r10
   4a408:	40001e1e 	bne	r8,zero,4a484 <__unpack_d+0xac>
   4a40c:	4a84b03a 	or	r2,r9,r10
   4a410:	10001926 	beq	r2,zero,4a478 <__unpack_d+0xa0>
   4a414:	4804d63a 	srli	r2,r9,24
   4a418:	500c923a 	slli	r6,r10,8
   4a41c:	013f0084 	movi	r4,-1022
   4a420:	00c40034 	movhi	r3,4096
   4a424:	18ffffc4 	addi	r3,r3,-1
   4a428:	118cb03a 	or	r6,r2,r6
   4a42c:	008000c4 	movi	r2,3
   4a430:	480a923a 	slli	r5,r9,8
   4a434:	68800015 	stw	r2,0(r13)
   4a438:	69000215 	stw	r4,8(r13)
   4a43c:	19800b36 	bltu	r3,r6,4a46c <__unpack_d+0x94>
   4a440:	200f883a 	mov	r7,r4
   4a444:	1811883a 	mov	r8,r3
   4a448:	2945883a 	add	r2,r5,r5
   4a44c:	1149803a 	cmpltu	r4,r2,r5
   4a450:	3187883a 	add	r3,r6,r6
   4a454:	20c9883a 	add	r4,r4,r3
   4a458:	100b883a 	mov	r5,r2
   4a45c:	200d883a 	mov	r6,r4
   4a460:	39ffffc4 	addi	r7,r7,-1
   4a464:	413ff82e 	bgeu	r8,r4,4a448 <__unpack_d+0x70>
   4a468:	69c00215 	stw	r7,8(r13)
   4a46c:	69800415 	stw	r6,16(r13)
   4a470:	69400315 	stw	r5,12(r13)
   4a474:	f800283a 	ret
   4a478:	00800084 	movi	r2,2
   4a47c:	28800015 	stw	r2,0(r5)
   4a480:	f800283a 	ret
   4a484:	0081ffc4 	movi	r2,2047
   4a488:	40800f26 	beq	r8,r2,4a4c8 <__unpack_d+0xf0>
   4a48c:	480cd63a 	srli	r6,r9,24
   4a490:	5006923a 	slli	r3,r10,8
   4a494:	4804923a 	slli	r2,r9,8
   4a498:	0009883a 	mov	r4,zero
   4a49c:	30c6b03a 	or	r3,r6,r3
   4a4a0:	01440034 	movhi	r5,4096
   4a4a4:	110cb03a 	or	r6,r2,r4
   4a4a8:	423f0044 	addi	r8,r8,-1023
   4a4ac:	194eb03a 	or	r7,r3,r5
   4a4b0:	008000c4 	movi	r2,3
   4a4b4:	69c00415 	stw	r7,16(r13)
   4a4b8:	6a000215 	stw	r8,8(r13)
   4a4bc:	68800015 	stw	r2,0(r13)
   4a4c0:	69800315 	stw	r6,12(r13)
   4a4c4:	f800283a 	ret
   4a4c8:	4a84b03a 	or	r2,r9,r10
   4a4cc:	1000031e 	bne	r2,zero,4a4dc <__unpack_d+0x104>
   4a4d0:	00800104 	movi	r2,4
   4a4d4:	28800015 	stw	r2,0(r5)
   4a4d8:	f800283a 	ret
   4a4dc:	0009883a 	mov	r4,zero
   4a4e0:	01400234 	movhi	r5,8
   4a4e4:	4904703a 	and	r2,r9,r4
   4a4e8:	5146703a 	and	r3,r10,r5
   4a4ec:	10c4b03a 	or	r2,r2,r3
   4a4f0:	10000526 	beq	r2,zero,4a508 <__unpack_d+0x130>
   4a4f4:	00800044 	movi	r2,1
   4a4f8:	68800015 	stw	r2,0(r13)
   4a4fc:	6b000415 	stw	r12,16(r13)
   4a500:	6ac00315 	stw	r11,12(r13)
   4a504:	f800283a 	ret
   4a508:	68000015 	stw	zero,0(r13)
   4a50c:	003ffb06 	br	4a4fc <__unpack_d+0x124>

0004a510 <__fpcmp_parts_d>:
   4a510:	21800017 	ldw	r6,0(r4)
   4a514:	00c00044 	movi	r3,1
   4a518:	19800a2e 	bgeu	r3,r6,4a544 <__fpcmp_parts_d+0x34>
   4a51c:	28800017 	ldw	r2,0(r5)
   4a520:	1880082e 	bgeu	r3,r2,4a544 <__fpcmp_parts_d+0x34>
   4a524:	00c00104 	movi	r3,4
   4a528:	30c02626 	beq	r6,r3,4a5c4 <__fpcmp_parts_d+0xb4>
   4a52c:	10c02226 	beq	r2,r3,4a5b8 <__fpcmp_parts_d+0xa8>
   4a530:	00c00084 	movi	r3,2
   4a534:	30c00526 	beq	r6,r3,4a54c <__fpcmp_parts_d+0x3c>
   4a538:	10c0071e 	bne	r2,r3,4a558 <__fpcmp_parts_d+0x48>
   4a53c:	20800117 	ldw	r2,4(r4)
   4a540:	1000091e 	bne	r2,zero,4a568 <__fpcmp_parts_d+0x58>
   4a544:	00800044 	movi	r2,1
   4a548:	f800283a 	ret
   4a54c:	10c01a1e 	bne	r2,r3,4a5b8 <__fpcmp_parts_d+0xa8>
   4a550:	0005883a 	mov	r2,zero
   4a554:	f800283a 	ret
   4a558:	22000117 	ldw	r8,4(r4)
   4a55c:	28800117 	ldw	r2,4(r5)
   4a560:	40800326 	beq	r8,r2,4a570 <__fpcmp_parts_d+0x60>
   4a564:	403ff726 	beq	r8,zero,4a544 <__fpcmp_parts_d+0x34>
   4a568:	00bfffc4 	movi	r2,-1
   4a56c:	f800283a 	ret
   4a570:	20c00217 	ldw	r3,8(r4)
   4a574:	28800217 	ldw	r2,8(r5)
   4a578:	10fffa16 	blt	r2,r3,4a564 <__fpcmp_parts_d+0x54>
   4a57c:	18800916 	blt	r3,r2,4a5a4 <__fpcmp_parts_d+0x94>
   4a580:	21c00417 	ldw	r7,16(r4)
   4a584:	28c00417 	ldw	r3,16(r5)
   4a588:	21800317 	ldw	r6,12(r4)
   4a58c:	28800317 	ldw	r2,12(r5)
   4a590:	19fff436 	bltu	r3,r7,4a564 <__fpcmp_parts_d+0x54>
   4a594:	38c00526 	beq	r7,r3,4a5ac <__fpcmp_parts_d+0x9c>
   4a598:	38c00236 	bltu	r7,r3,4a5a4 <__fpcmp_parts_d+0x94>
   4a59c:	19ffec1e 	bne	r3,r7,4a550 <__fpcmp_parts_d+0x40>
   4a5a0:	30bfeb2e 	bgeu	r6,r2,4a550 <__fpcmp_parts_d+0x40>
   4a5a4:	403fe71e 	bne	r8,zero,4a544 <__fpcmp_parts_d+0x34>
   4a5a8:	003fef06 	br	4a568 <__fpcmp_parts_d+0x58>
   4a5ac:	11bffa2e 	bgeu	r2,r6,4a598 <__fpcmp_parts_d+0x88>
   4a5b0:	403fe426 	beq	r8,zero,4a544 <__fpcmp_parts_d+0x34>
   4a5b4:	003fec06 	br	4a568 <__fpcmp_parts_d+0x58>
   4a5b8:	28800117 	ldw	r2,4(r5)
   4a5bc:	103fe11e 	bne	r2,zero,4a544 <__fpcmp_parts_d+0x34>
   4a5c0:	003fe906 	br	4a568 <__fpcmp_parts_d+0x58>
   4a5c4:	11bfdd1e 	bne	r2,r6,4a53c <__fpcmp_parts_d+0x2c>
   4a5c8:	28c00117 	ldw	r3,4(r5)
   4a5cc:	20800117 	ldw	r2,4(r4)
   4a5d0:	1885c83a 	sub	r2,r3,r2
   4a5d4:	f800283a 	ret

0004a5d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4a5d8:	defff804 	addi	sp,sp,-32
   4a5dc:	dfc00715 	stw	ra,28(sp)
   4a5e0:	df000615 	stw	fp,24(sp)
   4a5e4:	df000604 	addi	fp,sp,24
   4a5e8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4a5ec:	e0bffc17 	ldw	r2,-16(fp)
   4a5f0:	1004803a 	cmplt	r2,r2,zero
   4a5f4:	1000081e 	bne	r2,zero,4a618 <close+0x40>
   4a5f8:	e0bffc17 	ldw	r2,-16(fp)
   4a5fc:	10800324 	muli	r2,r2,12
   4a600:	1007883a 	mov	r3,r2
   4a604:	00800174 	movhi	r2,5
   4a608:	10b86504 	addi	r2,r2,-7788
   4a60c:	1887883a 	add	r3,r3,r2
   4a610:	e0ffff15 	stw	r3,-4(fp)
   4a614:	00000106 	br	4a61c <close+0x44>
   4a618:	e03fff15 	stw	zero,-4(fp)
   4a61c:	e0bfff17 	ldw	r2,-4(fp)
   4a620:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   4a624:	e0bffb17 	ldw	r2,-20(fp)
   4a628:	1005003a 	cmpeq	r2,r2,zero
   4a62c:	10001d1e 	bne	r2,zero,4a6a4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4a630:	e0bffb17 	ldw	r2,-20(fp)
   4a634:	10800017 	ldw	r2,0(r2)
   4a638:	10800417 	ldw	r2,16(r2)
   4a63c:	1005003a 	cmpeq	r2,r2,zero
   4a640:	1000071e 	bne	r2,zero,4a660 <close+0x88>
   4a644:	e0bffb17 	ldw	r2,-20(fp)
   4a648:	10800017 	ldw	r2,0(r2)
   4a64c:	10800417 	ldw	r2,16(r2)
   4a650:	e13ffb17 	ldw	r4,-20(fp)
   4a654:	103ee83a 	callr	r2
   4a658:	e0bffe15 	stw	r2,-8(fp)
   4a65c:	00000106 	br	4a664 <close+0x8c>
   4a660:	e03ffe15 	stw	zero,-8(fp)
   4a664:	e0bffe17 	ldw	r2,-8(fp)
   4a668:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4a66c:	e13ffc17 	ldw	r4,-16(fp)
   4a670:	004ae7c0 	call	4ae7c <alt_release_fd>
    if (rval < 0)
   4a674:	e0bffa17 	ldw	r2,-24(fp)
   4a678:	1004403a 	cmpge	r2,r2,zero
   4a67c:	1000071e 	bne	r2,zero,4a69c <close+0xc4>
    {
      ALT_ERRNO = -rval;
   4a680:	004a6d40 	call	4a6d4 <alt_get_errno>
   4a684:	e0fffa17 	ldw	r3,-24(fp)
   4a688:	00c7c83a 	sub	r3,zero,r3
   4a68c:	10c00015 	stw	r3,0(r2)
      return -1;
   4a690:	00bfffc4 	movi	r2,-1
   4a694:	e0bffd15 	stw	r2,-12(fp)
   4a698:	00000806 	br	4a6bc <close+0xe4>
    }
    return 0;
   4a69c:	e03ffd15 	stw	zero,-12(fp)
   4a6a0:	00000606 	br	4a6bc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a6a4:	004a6d40 	call	4a6d4 <alt_get_errno>
   4a6a8:	1007883a 	mov	r3,r2
   4a6ac:	00801444 	movi	r2,81
   4a6b0:	18800015 	stw	r2,0(r3)
    return -1;
   4a6b4:	00bfffc4 	movi	r2,-1
   4a6b8:	e0bffd15 	stw	r2,-12(fp)
   4a6bc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   4a6c0:	e037883a 	mov	sp,fp
   4a6c4:	dfc00117 	ldw	ra,4(sp)
   4a6c8:	df000017 	ldw	fp,0(sp)
   4a6cc:	dec00204 	addi	sp,sp,8
   4a6d0:	f800283a 	ret

0004a6d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a6d4:	defffd04 	addi	sp,sp,-12
   4a6d8:	dfc00215 	stw	ra,8(sp)
   4a6dc:	df000115 	stw	fp,4(sp)
   4a6e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a6e4:	00800174 	movhi	r2,5
   4a6e8:	10bce804 	addi	r2,r2,-3168
   4a6ec:	10800017 	ldw	r2,0(r2)
   4a6f0:	1005003a 	cmpeq	r2,r2,zero
   4a6f4:	1000061e 	bne	r2,zero,4a710 <alt_get_errno+0x3c>
   4a6f8:	00800174 	movhi	r2,5
   4a6fc:	10bce804 	addi	r2,r2,-3168
   4a700:	10800017 	ldw	r2,0(r2)
   4a704:	103ee83a 	callr	r2
   4a708:	e0bfff15 	stw	r2,-4(fp)
   4a70c:	00000306 	br	4a71c <alt_get_errno+0x48>
   4a710:	00800174 	movhi	r2,5
   4a714:	10838a04 	addi	r2,r2,3624
   4a718:	e0bfff15 	stw	r2,-4(fp)
   4a71c:	e0bfff17 	ldw	r2,-4(fp)
}
   4a720:	e037883a 	mov	sp,fp
   4a724:	dfc00117 	ldw	ra,4(sp)
   4a728:	df000017 	ldw	fp,0(sp)
   4a72c:	dec00204 	addi	sp,sp,8
   4a730:	f800283a 	ret

0004a734 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4a734:	defffc04 	addi	sp,sp,-16
   4a738:	df000315 	stw	fp,12(sp)
   4a73c:	df000304 	addi	fp,sp,12
   4a740:	e13ffd15 	stw	r4,-12(fp)
   4a744:	e17ffe15 	stw	r5,-8(fp)
   4a748:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4a74c:	e0bfff17 	ldw	r2,-4(fp)
}
   4a750:	e037883a 	mov	sp,fp
   4a754:	df000017 	ldw	fp,0(sp)
   4a758:	dec00104 	addi	sp,sp,4
   4a75c:	f800283a 	ret

0004a760 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   4a760:	defffd04 	addi	sp,sp,-12
   4a764:	df000215 	stw	fp,8(sp)
   4a768:	df000204 	addi	fp,sp,8
   4a76c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   4a770:	e0bfff17 	ldw	r2,-4(fp)
   4a774:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4a778:	e0bffe17 	ldw	r2,-8(fp)
   4a77c:	1005003a 	cmpeq	r2,r2,zero
   4a780:	1000021e 	bne	r2,zero,4a78c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   4a784:	002af070 	cmpltui	zero,zero,43969
   4a788:	00000106 	br	4a790 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   4a78c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   4a790:	e037883a 	mov	sp,fp
   4a794:	df000017 	ldw	fp,0(sp)
   4a798:	dec00104 	addi	sp,sp,4
   4a79c:	f800283a 	ret

0004a7a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4a7a0:	defffd04 	addi	sp,sp,-12
   4a7a4:	dfc00215 	stw	ra,8(sp)
   4a7a8:	df000115 	stw	fp,4(sp)
   4a7ac:	df000104 	addi	fp,sp,4
   4a7b0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   4a7b4:	e13fff17 	ldw	r4,-4(fp)
   4a7b8:	004a7600 	call	4a760 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4a7bc:	003fff06 	br	4a7bc <_exit+0x1c>

0004a7c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4a7c0:	defff904 	addi	sp,sp,-28
   4a7c4:	dfc00615 	stw	ra,24(sp)
   4a7c8:	df000515 	stw	fp,20(sp)
   4a7cc:	df000504 	addi	fp,sp,20
   4a7d0:	e13ffc15 	stw	r4,-16(fp)
   4a7d4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a7d8:	e0bffc17 	ldw	r2,-16(fp)
   4a7dc:	1004803a 	cmplt	r2,r2,zero
   4a7e0:	1000081e 	bne	r2,zero,4a804 <fstat+0x44>
   4a7e4:	e0bffc17 	ldw	r2,-16(fp)
   4a7e8:	10800324 	muli	r2,r2,12
   4a7ec:	1007883a 	mov	r3,r2
   4a7f0:	00800174 	movhi	r2,5
   4a7f4:	10b86504 	addi	r2,r2,-7788
   4a7f8:	1887883a 	add	r3,r3,r2
   4a7fc:	e0ffff15 	stw	r3,-4(fp)
   4a800:	00000106 	br	4a808 <fstat+0x48>
   4a804:	e03fff15 	stw	zero,-4(fp)
   4a808:	e0bfff17 	ldw	r2,-4(fp)
   4a80c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4a810:	e0bffb17 	ldw	r2,-20(fp)
   4a814:	1005003a 	cmpeq	r2,r2,zero
   4a818:	1000121e 	bne	r2,zero,4a864 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4a81c:	e0bffb17 	ldw	r2,-20(fp)
   4a820:	10800017 	ldw	r2,0(r2)
   4a824:	10800817 	ldw	r2,32(r2)
   4a828:	1005003a 	cmpeq	r2,r2,zero
   4a82c:	1000081e 	bne	r2,zero,4a850 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   4a830:	e0bffb17 	ldw	r2,-20(fp)
   4a834:	10800017 	ldw	r2,0(r2)
   4a838:	10800817 	ldw	r2,32(r2)
   4a83c:	e13ffb17 	ldw	r4,-20(fp)
   4a840:	e17ffd17 	ldw	r5,-12(fp)
   4a844:	103ee83a 	callr	r2
   4a848:	e0bffe15 	stw	r2,-8(fp)
   4a84c:	00000b06 	br	4a87c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4a850:	e0fffd17 	ldw	r3,-12(fp)
   4a854:	00880004 	movi	r2,8192
   4a858:	18800115 	stw	r2,4(r3)
      return 0;
   4a85c:	e03ffe15 	stw	zero,-8(fp)
   4a860:	00000606 	br	4a87c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a864:	004a8940 	call	4a894 <alt_get_errno>
   4a868:	1007883a 	mov	r3,r2
   4a86c:	00801444 	movi	r2,81
   4a870:	18800015 	stw	r2,0(r3)
    return -1;
   4a874:	00bfffc4 	movi	r2,-1
   4a878:	e0bffe15 	stw	r2,-8(fp)
   4a87c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4a880:	e037883a 	mov	sp,fp
   4a884:	dfc00117 	ldw	ra,4(sp)
   4a888:	df000017 	ldw	fp,0(sp)
   4a88c:	dec00204 	addi	sp,sp,8
   4a890:	f800283a 	ret

0004a894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a894:	defffd04 	addi	sp,sp,-12
   4a898:	dfc00215 	stw	ra,8(sp)
   4a89c:	df000115 	stw	fp,4(sp)
   4a8a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a8a4:	00800174 	movhi	r2,5
   4a8a8:	10bce804 	addi	r2,r2,-3168
   4a8ac:	10800017 	ldw	r2,0(r2)
   4a8b0:	1005003a 	cmpeq	r2,r2,zero
   4a8b4:	1000061e 	bne	r2,zero,4a8d0 <alt_get_errno+0x3c>
   4a8b8:	00800174 	movhi	r2,5
   4a8bc:	10bce804 	addi	r2,r2,-3168
   4a8c0:	10800017 	ldw	r2,0(r2)
   4a8c4:	103ee83a 	callr	r2
   4a8c8:	e0bfff15 	stw	r2,-4(fp)
   4a8cc:	00000306 	br	4a8dc <alt_get_errno+0x48>
   4a8d0:	00800174 	movhi	r2,5
   4a8d4:	10838a04 	addi	r2,r2,3624
   4a8d8:	e0bfff15 	stw	r2,-4(fp)
   4a8dc:	e0bfff17 	ldw	r2,-4(fp)
}
   4a8e0:	e037883a 	mov	sp,fp
   4a8e4:	dfc00117 	ldw	ra,4(sp)
   4a8e8:	df000017 	ldw	fp,0(sp)
   4a8ec:	dec00204 	addi	sp,sp,8
   4a8f0:	f800283a 	ret

0004a8f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4a8f4:	deffeb04 	addi	sp,sp,-84
   4a8f8:	dfc01415 	stw	ra,80(sp)
   4a8fc:	df001315 	stw	fp,76(sp)
   4a900:	df001304 	addi	fp,sp,76
   4a904:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a908:	e0bffd17 	ldw	r2,-12(fp)
   4a90c:	1004803a 	cmplt	r2,r2,zero
   4a910:	1000081e 	bne	r2,zero,4a934 <isatty+0x40>
   4a914:	e0bffd17 	ldw	r2,-12(fp)
   4a918:	10800324 	muli	r2,r2,12
   4a91c:	1007883a 	mov	r3,r2
   4a920:	00800174 	movhi	r2,5
   4a924:	10b86504 	addi	r2,r2,-7788
   4a928:	1887883a 	add	r3,r3,r2
   4a92c:	e0ffff15 	stw	r3,-4(fp)
   4a930:	00000106 	br	4a938 <isatty+0x44>
   4a934:	e03fff15 	stw	zero,-4(fp)
   4a938:	e0bfff17 	ldw	r2,-4(fp)
   4a93c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   4a940:	e0bfed17 	ldw	r2,-76(fp)
   4a944:	1005003a 	cmpeq	r2,r2,zero
   4a948:	10000f1e 	bne	r2,zero,4a988 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4a94c:	e0bfed17 	ldw	r2,-76(fp)
   4a950:	10800017 	ldw	r2,0(r2)
   4a954:	10800817 	ldw	r2,32(r2)
   4a958:	1004c03a 	cmpne	r2,r2,zero
   4a95c:	1000031e 	bne	r2,zero,4a96c <isatty+0x78>
    {
      return 1;
   4a960:	00800044 	movi	r2,1
   4a964:	e0bffe15 	stw	r2,-8(fp)
   4a968:	00000c06 	br	4a99c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4a96c:	e17fee04 	addi	r5,fp,-72
   4a970:	e13ffd17 	ldw	r4,-12(fp)
   4a974:	004a7c00 	call	4a7c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4a978:	e0bfef17 	ldw	r2,-68(fp)
   4a97c:	10880020 	cmpeqi	r2,r2,8192
   4a980:	e0bffe15 	stw	r2,-8(fp)
   4a984:	00000506 	br	4a99c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a988:	004a9b40 	call	4a9b4 <alt_get_errno>
   4a98c:	1007883a 	mov	r3,r2
   4a990:	00801444 	movi	r2,81
   4a994:	18800015 	stw	r2,0(r3)
    return 0;
   4a998:	e03ffe15 	stw	zero,-8(fp)
   4a99c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4a9a0:	e037883a 	mov	sp,fp
   4a9a4:	dfc00117 	ldw	ra,4(sp)
   4a9a8:	df000017 	ldw	fp,0(sp)
   4a9ac:	dec00204 	addi	sp,sp,8
   4a9b0:	f800283a 	ret

0004a9b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a9b4:	defffd04 	addi	sp,sp,-12
   4a9b8:	dfc00215 	stw	ra,8(sp)
   4a9bc:	df000115 	stw	fp,4(sp)
   4a9c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a9c4:	00800174 	movhi	r2,5
   4a9c8:	10bce804 	addi	r2,r2,-3168
   4a9cc:	10800017 	ldw	r2,0(r2)
   4a9d0:	1005003a 	cmpeq	r2,r2,zero
   4a9d4:	1000061e 	bne	r2,zero,4a9f0 <alt_get_errno+0x3c>
   4a9d8:	00800174 	movhi	r2,5
   4a9dc:	10bce804 	addi	r2,r2,-3168
   4a9e0:	10800017 	ldw	r2,0(r2)
   4a9e4:	103ee83a 	callr	r2
   4a9e8:	e0bfff15 	stw	r2,-4(fp)
   4a9ec:	00000306 	br	4a9fc <alt_get_errno+0x48>
   4a9f0:	00800174 	movhi	r2,5
   4a9f4:	10838a04 	addi	r2,r2,3624
   4a9f8:	e0bfff15 	stw	r2,-4(fp)
   4a9fc:	e0bfff17 	ldw	r2,-4(fp)
}
   4aa00:	e037883a 	mov	sp,fp
   4aa04:	dfc00117 	ldw	ra,4(sp)
   4aa08:	df000017 	ldw	fp,0(sp)
   4aa0c:	dec00204 	addi	sp,sp,8
   4aa10:	f800283a 	ret

0004aa14 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4aa14:	defffe04 	addi	sp,sp,-8
   4aa18:	dfc00115 	stw	ra,4(sp)
   4aa1c:	df000015 	stw	fp,0(sp)
   4aa20:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4aa24:	01000174 	movhi	r4,5
   4aa28:	213ced04 	addi	r4,r4,-3148
   4aa2c:	01400174 	movhi	r5,5
   4aa30:	29765604 	addi	r5,r5,-9896
   4aa34:	01800174 	movhi	r6,5
   4aa38:	31bced04 	addi	r6,r6,-3148
   4aa3c:	004aa940 	call	4aa94 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4aa40:	01000134 	movhi	r4,4
   4aa44:	21000804 	addi	r4,r4,32
   4aa48:	01400134 	movhi	r5,4
   4aa4c:	29400804 	addi	r5,r5,32
   4aa50:	01800134 	movhi	r6,4
   4aa54:	31806d04 	addi	r6,r6,436
   4aa58:	004aa940 	call	4aa94 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4aa5c:	01000174 	movhi	r4,5
   4aa60:	2133f904 	addi	r4,r4,-12316
   4aa64:	01400174 	movhi	r5,5
   4aa68:	2973f904 	addi	r5,r5,-12316
   4aa6c:	01800174 	movhi	r6,5
   4aa70:	31b65604 	addi	r6,r6,-9896
   4aa74:	004aa940 	call	4aa94 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4aa78:	004c0700 	call	4c070 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4aa7c:	004c2680 	call	4c268 <alt_icache_flush_all>
}
   4aa80:	e037883a 	mov	sp,fp
   4aa84:	dfc00117 	ldw	ra,4(sp)
   4aa88:	df000017 	ldw	fp,0(sp)
   4aa8c:	dec00204 	addi	sp,sp,8
   4aa90:	f800283a 	ret

0004aa94 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4aa94:	defffc04 	addi	sp,sp,-16
   4aa98:	df000315 	stw	fp,12(sp)
   4aa9c:	df000304 	addi	fp,sp,12
   4aaa0:	e13ffd15 	stw	r4,-12(fp)
   4aaa4:	e17ffe15 	stw	r5,-8(fp)
   4aaa8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4aaac:	e0fffe17 	ldw	r3,-8(fp)
   4aab0:	e0bffd17 	ldw	r2,-12(fp)
   4aab4:	18800e26 	beq	r3,r2,4aaf0 <alt_load_section+0x5c>
  {
    while( to != end )
   4aab8:	00000a06 	br	4aae4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4aabc:	e0bffd17 	ldw	r2,-12(fp)
   4aac0:	10c00017 	ldw	r3,0(r2)
   4aac4:	e0bffe17 	ldw	r2,-8(fp)
   4aac8:	10c00015 	stw	r3,0(r2)
   4aacc:	e0bffe17 	ldw	r2,-8(fp)
   4aad0:	10800104 	addi	r2,r2,4
   4aad4:	e0bffe15 	stw	r2,-8(fp)
   4aad8:	e0bffd17 	ldw	r2,-12(fp)
   4aadc:	10800104 	addi	r2,r2,4
   4aae0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4aae4:	e0fffe17 	ldw	r3,-8(fp)
   4aae8:	e0bfff17 	ldw	r2,-4(fp)
   4aaec:	18bff31e 	bne	r3,r2,4aabc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4aaf0:	e037883a 	mov	sp,fp
   4aaf4:	df000017 	ldw	fp,0(sp)
   4aaf8:	dec00104 	addi	sp,sp,4
   4aafc:	f800283a 	ret

0004ab00 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4ab00:	defff804 	addi	sp,sp,-32
   4ab04:	dfc00715 	stw	ra,28(sp)
   4ab08:	df000615 	stw	fp,24(sp)
   4ab0c:	df000604 	addi	fp,sp,24
   4ab10:	e13ffc15 	stw	r4,-16(fp)
   4ab14:	e17ffd15 	stw	r5,-12(fp)
   4ab18:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4ab1c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ab20:	e0bffc17 	ldw	r2,-16(fp)
   4ab24:	1004803a 	cmplt	r2,r2,zero
   4ab28:	1000081e 	bne	r2,zero,4ab4c <lseek+0x4c>
   4ab2c:	e0bffc17 	ldw	r2,-16(fp)
   4ab30:	10800324 	muli	r2,r2,12
   4ab34:	1007883a 	mov	r3,r2
   4ab38:	00800174 	movhi	r2,5
   4ab3c:	10b86504 	addi	r2,r2,-7788
   4ab40:	1887883a 	add	r3,r3,r2
   4ab44:	e0ffff15 	stw	r3,-4(fp)
   4ab48:	00000106 	br	4ab50 <lseek+0x50>
   4ab4c:	e03fff15 	stw	zero,-4(fp)
   4ab50:	e0bfff17 	ldw	r2,-4(fp)
   4ab54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   4ab58:	e0bffb17 	ldw	r2,-20(fp)
   4ab5c:	1005003a 	cmpeq	r2,r2,zero
   4ab60:	1000111e 	bne	r2,zero,4aba8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4ab64:	e0bffb17 	ldw	r2,-20(fp)
   4ab68:	10800017 	ldw	r2,0(r2)
   4ab6c:	10800717 	ldw	r2,28(r2)
   4ab70:	1005003a 	cmpeq	r2,r2,zero
   4ab74:	1000091e 	bne	r2,zero,4ab9c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4ab78:	e0bffb17 	ldw	r2,-20(fp)
   4ab7c:	10800017 	ldw	r2,0(r2)
   4ab80:	10800717 	ldw	r2,28(r2)
   4ab84:	e13ffb17 	ldw	r4,-20(fp)
   4ab88:	e17ffd17 	ldw	r5,-12(fp)
   4ab8c:	e1bffe17 	ldw	r6,-8(fp)
   4ab90:	103ee83a 	callr	r2
   4ab94:	e0bffa15 	stw	r2,-24(fp)
   4ab98:	00000506 	br	4abb0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4ab9c:	00bfde84 	movi	r2,-134
   4aba0:	e0bffa15 	stw	r2,-24(fp)
   4aba4:	00000206 	br	4abb0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4aba8:	00bfebc4 	movi	r2,-81
   4abac:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   4abb0:	e0bffa17 	ldw	r2,-24(fp)
   4abb4:	1004403a 	cmpge	r2,r2,zero
   4abb8:	1000071e 	bne	r2,zero,4abd8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   4abbc:	004abf00 	call	4abf0 <alt_get_errno>
   4abc0:	1007883a 	mov	r3,r2
   4abc4:	e0bffa17 	ldw	r2,-24(fp)
   4abc8:	0085c83a 	sub	r2,zero,r2
   4abcc:	18800015 	stw	r2,0(r3)
    rc = -1;
   4abd0:	00bfffc4 	movi	r2,-1
   4abd4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   4abd8:	e0bffa17 	ldw	r2,-24(fp)
}
   4abdc:	e037883a 	mov	sp,fp
   4abe0:	dfc00117 	ldw	ra,4(sp)
   4abe4:	df000017 	ldw	fp,0(sp)
   4abe8:	dec00204 	addi	sp,sp,8
   4abec:	f800283a 	ret

0004abf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4abf0:	defffd04 	addi	sp,sp,-12
   4abf4:	dfc00215 	stw	ra,8(sp)
   4abf8:	df000115 	stw	fp,4(sp)
   4abfc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4ac00:	00800174 	movhi	r2,5
   4ac04:	10bce804 	addi	r2,r2,-3168
   4ac08:	10800017 	ldw	r2,0(r2)
   4ac0c:	1005003a 	cmpeq	r2,r2,zero
   4ac10:	1000061e 	bne	r2,zero,4ac2c <alt_get_errno+0x3c>
   4ac14:	00800174 	movhi	r2,5
   4ac18:	10bce804 	addi	r2,r2,-3168
   4ac1c:	10800017 	ldw	r2,0(r2)
   4ac20:	103ee83a 	callr	r2
   4ac24:	e0bfff15 	stw	r2,-4(fp)
   4ac28:	00000306 	br	4ac38 <alt_get_errno+0x48>
   4ac2c:	00800174 	movhi	r2,5
   4ac30:	10838a04 	addi	r2,r2,3624
   4ac34:	e0bfff15 	stw	r2,-4(fp)
   4ac38:	e0bfff17 	ldw	r2,-4(fp)
}
   4ac3c:	e037883a 	mov	sp,fp
   4ac40:	dfc00117 	ldw	ra,4(sp)
   4ac44:	df000017 	ldw	fp,0(sp)
   4ac48:	dec00204 	addi	sp,sp,8
   4ac4c:	f800283a 	ret

0004ac50 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4ac50:	defffd04 	addi	sp,sp,-12
   4ac54:	dfc00215 	stw	ra,8(sp)
   4ac58:	df000115 	stw	fp,4(sp)
   4ac5c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4ac60:	0009883a 	mov	r4,zero
   4ac64:	004b1180 	call	4b118 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4ac68:	004b14c0 	call	4b14c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4ac6c:	01000174 	movhi	r4,5
   4ac70:	21364e04 	addi	r4,r4,-9928
   4ac74:	01400174 	movhi	r5,5
   4ac78:	29764e04 	addi	r5,r5,-9928
   4ac7c:	01800174 	movhi	r6,5
   4ac80:	31b64e04 	addi	r6,r6,-9928
   4ac84:	004c6280 	call	4c628 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4ac88:	004c1a00 	call	4c1a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4ac8c:	01000174 	movhi	r4,5
   4ac90:	21308104 	addi	r4,r4,-15868
   4ac94:	004ce240 	call	4ce24 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4ac98:	d126ae17 	ldw	r4,-25928(gp)
   4ac9c:	d166af17 	ldw	r5,-25924(gp)
   4aca0:	d1a6b017 	ldw	r6,-25920(gp)
   4aca4:	00406040 	call	40604 <main>
   4aca8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4acac:	01000044 	movi	r4,1
   4acb0:	004a5d80 	call	4a5d8 <close>
  exit (result);
   4acb4:	e13fff17 	ldw	r4,-4(fp)
   4acb8:	0040df40 	call	40df4 <exit>

0004acbc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4acbc:	defffe04 	addi	sp,sp,-8
   4acc0:	df000115 	stw	fp,4(sp)
   4acc4:	df000104 	addi	fp,sp,4
   4acc8:	e13fff15 	stw	r4,-4(fp)
}
   4accc:	e037883a 	mov	sp,fp
   4acd0:	df000017 	ldw	fp,0(sp)
   4acd4:	dec00104 	addi	sp,sp,4
   4acd8:	f800283a 	ret

0004acdc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4acdc:	defffe04 	addi	sp,sp,-8
   4ace0:	df000115 	stw	fp,4(sp)
   4ace4:	df000104 	addi	fp,sp,4
   4ace8:	e13fff15 	stw	r4,-4(fp)
}
   4acec:	e037883a 	mov	sp,fp
   4acf0:	df000017 	ldw	fp,0(sp)
   4acf4:	dec00104 	addi	sp,sp,4
   4acf8:	f800283a 	ret

0004acfc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4acfc:	defff704 	addi	sp,sp,-36
   4ad00:	dfc00815 	stw	ra,32(sp)
   4ad04:	df000715 	stw	fp,28(sp)
   4ad08:	df000704 	addi	fp,sp,28
   4ad0c:	e13ffb15 	stw	r4,-20(fp)
   4ad10:	e17ffc15 	stw	r5,-16(fp)
   4ad14:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ad18:	e0bffb17 	ldw	r2,-20(fp)
   4ad1c:	1004803a 	cmplt	r2,r2,zero
   4ad20:	1000081e 	bne	r2,zero,4ad44 <read+0x48>
   4ad24:	e0bffb17 	ldw	r2,-20(fp)
   4ad28:	10800324 	muli	r2,r2,12
   4ad2c:	1007883a 	mov	r3,r2
   4ad30:	00800174 	movhi	r2,5
   4ad34:	10b86504 	addi	r2,r2,-7788
   4ad38:	1887883a 	add	r3,r3,r2
   4ad3c:	e0ffff15 	stw	r3,-4(fp)
   4ad40:	00000106 	br	4ad48 <read+0x4c>
   4ad44:	e03fff15 	stw	zero,-4(fp)
   4ad48:	e0bfff17 	ldw	r2,-4(fp)
   4ad4c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4ad50:	e0bffa17 	ldw	r2,-24(fp)
   4ad54:	1005003a 	cmpeq	r2,r2,zero
   4ad58:	1000241e 	bne	r2,zero,4adec <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4ad5c:	e0bffa17 	ldw	r2,-24(fp)
   4ad60:	10800217 	ldw	r2,8(r2)
   4ad64:	108000cc 	andi	r2,r2,3
   4ad68:	10800060 	cmpeqi	r2,r2,1
   4ad6c:	10001a1e 	bne	r2,zero,4add8 <read+0xdc>
   4ad70:	e0bffa17 	ldw	r2,-24(fp)
   4ad74:	10800017 	ldw	r2,0(r2)
   4ad78:	10800517 	ldw	r2,20(r2)
   4ad7c:	1005003a 	cmpeq	r2,r2,zero
   4ad80:	1000151e 	bne	r2,zero,4add8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4ad84:	e0bffa17 	ldw	r2,-24(fp)
   4ad88:	10800017 	ldw	r2,0(r2)
   4ad8c:	10800517 	ldw	r2,20(r2)
   4ad90:	e17ffc17 	ldw	r5,-16(fp)
   4ad94:	e1bffd17 	ldw	r6,-12(fp)
   4ad98:	e13ffa17 	ldw	r4,-24(fp)
   4ad9c:	103ee83a 	callr	r2
   4ada0:	e0bff915 	stw	r2,-28(fp)
   4ada4:	e0bff917 	ldw	r2,-28(fp)
   4ada8:	1004403a 	cmpge	r2,r2,zero
   4adac:	1000071e 	bne	r2,zero,4adcc <read+0xd0>
        {
          ALT_ERRNO = -rval;
   4adb0:	004ae1c0 	call	4ae1c <alt_get_errno>
   4adb4:	e0fff917 	ldw	r3,-28(fp)
   4adb8:	00c7c83a 	sub	r3,zero,r3
   4adbc:	10c00015 	stw	r3,0(r2)
          return -1;
   4adc0:	00bfffc4 	movi	r2,-1
   4adc4:	e0bffe15 	stw	r2,-8(fp)
   4adc8:	00000e06 	br	4ae04 <read+0x108>
        }
        return rval;
   4adcc:	e0bff917 	ldw	r2,-28(fp)
   4add0:	e0bffe15 	stw	r2,-8(fp)
   4add4:	00000b06 	br	4ae04 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4add8:	004ae1c0 	call	4ae1c <alt_get_errno>
   4addc:	1007883a 	mov	r3,r2
   4ade0:	00800344 	movi	r2,13
   4ade4:	18800015 	stw	r2,0(r3)
   4ade8:	00000406 	br	4adfc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4adec:	004ae1c0 	call	4ae1c <alt_get_errno>
   4adf0:	1007883a 	mov	r3,r2
   4adf4:	00801444 	movi	r2,81
   4adf8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4adfc:	00bfffc4 	movi	r2,-1
   4ae00:	e0bffe15 	stw	r2,-8(fp)
   4ae04:	e0bffe17 	ldw	r2,-8(fp)
}
   4ae08:	e037883a 	mov	sp,fp
   4ae0c:	dfc00117 	ldw	ra,4(sp)
   4ae10:	df000017 	ldw	fp,0(sp)
   4ae14:	dec00204 	addi	sp,sp,8
   4ae18:	f800283a 	ret

0004ae1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ae1c:	defffd04 	addi	sp,sp,-12
   4ae20:	dfc00215 	stw	ra,8(sp)
   4ae24:	df000115 	stw	fp,4(sp)
   4ae28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4ae2c:	00800174 	movhi	r2,5
   4ae30:	10bce804 	addi	r2,r2,-3168
   4ae34:	10800017 	ldw	r2,0(r2)
   4ae38:	1005003a 	cmpeq	r2,r2,zero
   4ae3c:	1000061e 	bne	r2,zero,4ae58 <alt_get_errno+0x3c>
   4ae40:	00800174 	movhi	r2,5
   4ae44:	10bce804 	addi	r2,r2,-3168
   4ae48:	10800017 	ldw	r2,0(r2)
   4ae4c:	103ee83a 	callr	r2
   4ae50:	e0bfff15 	stw	r2,-4(fp)
   4ae54:	00000306 	br	4ae64 <alt_get_errno+0x48>
   4ae58:	00800174 	movhi	r2,5
   4ae5c:	10838a04 	addi	r2,r2,3624
   4ae60:	e0bfff15 	stw	r2,-4(fp)
   4ae64:	e0bfff17 	ldw	r2,-4(fp)
}
   4ae68:	e037883a 	mov	sp,fp
   4ae6c:	dfc00117 	ldw	ra,4(sp)
   4ae70:	df000017 	ldw	fp,0(sp)
   4ae74:	dec00204 	addi	sp,sp,8
   4ae78:	f800283a 	ret

0004ae7c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4ae7c:	defffe04 	addi	sp,sp,-8
   4ae80:	df000115 	stw	fp,4(sp)
   4ae84:	df000104 	addi	fp,sp,4
   4ae88:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4ae8c:	e0bfff17 	ldw	r2,-4(fp)
   4ae90:	108000d0 	cmplti	r2,r2,3
   4ae94:	10000d1e 	bne	r2,zero,4aecc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4ae98:	e0bfff17 	ldw	r2,-4(fp)
   4ae9c:	00c00174 	movhi	r3,5
   4aea0:	18f86504 	addi	r3,r3,-7788
   4aea4:	10800324 	muli	r2,r2,12
   4aea8:	10c5883a 	add	r2,r2,r3
   4aeac:	10800204 	addi	r2,r2,8
   4aeb0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4aeb4:	e0bfff17 	ldw	r2,-4(fp)
   4aeb8:	00c00174 	movhi	r3,5
   4aebc:	18f86504 	addi	r3,r3,-7788
   4aec0:	10800324 	muli	r2,r2,12
   4aec4:	10c5883a 	add	r2,r2,r3
   4aec8:	10000015 	stw	zero,0(r2)
  }
}
   4aecc:	e037883a 	mov	sp,fp
   4aed0:	df000017 	ldw	fp,0(sp)
   4aed4:	dec00104 	addi	sp,sp,4
   4aed8:	f800283a 	ret

0004aedc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4aedc:	defff804 	addi	sp,sp,-32
   4aee0:	df000715 	stw	fp,28(sp)
   4aee4:	df000704 	addi	fp,sp,28
   4aee8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4aeec:	0005303a 	rdctl	r2,status
   4aef0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4aef4:	e0fffb17 	ldw	r3,-20(fp)
   4aef8:	00bfff84 	movi	r2,-2
   4aefc:	1884703a 	and	r2,r3,r2
   4af00:	1001703a 	wrctl	status,r2
  
  return context;
   4af04:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4af08:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4af0c:	d0a00c17 	ldw	r2,-32720(gp)
   4af10:	10c000c4 	addi	r3,r2,3
   4af14:	00bfff04 	movi	r2,-4
   4af18:	1884703a 	and	r2,r3,r2
   4af1c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4af20:	d0e00c17 	ldw	r3,-32720(gp)
   4af24:	e0bffe17 	ldw	r2,-8(fp)
   4af28:	1887883a 	add	r3,r3,r2
   4af2c:	00800234 	movhi	r2,8
   4af30:	10800004 	addi	r2,r2,0
   4af34:	10c0072e 	bgeu	r2,r3,4af54 <sbrk+0x78>
   4af38:	e0bffd17 	ldw	r2,-12(fp)
   4af3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4af40:	e0bffa17 	ldw	r2,-24(fp)
   4af44:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4af48:	00bfffc4 	movi	r2,-1
   4af4c:	e0bfff15 	stw	r2,-4(fp)
   4af50:	00000c06 	br	4af84 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   4af54:	d0a00c17 	ldw	r2,-32720(gp)
   4af58:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   4af5c:	d0e00c17 	ldw	r3,-32720(gp)
   4af60:	e0bffe17 	ldw	r2,-8(fp)
   4af64:	1885883a 	add	r2,r3,r2
   4af68:	d0a00c15 	stw	r2,-32720(gp)
   4af6c:	e0bffd17 	ldw	r2,-12(fp)
   4af70:	e0bff915 	stw	r2,-28(fp)
   4af74:	e0bff917 	ldw	r2,-28(fp)
   4af78:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4af7c:	e0bffc17 	ldw	r2,-16(fp)
   4af80:	e0bfff15 	stw	r2,-4(fp)
   4af84:	e0bfff17 	ldw	r2,-4(fp)
} 
   4af88:	e037883a 	mov	sp,fp
   4af8c:	df000017 	ldw	fp,0(sp)
   4af90:	dec00104 	addi	sp,sp,4
   4af94:	f800283a 	ret

0004af98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4af98:	defff704 	addi	sp,sp,-36
   4af9c:	dfc00815 	stw	ra,32(sp)
   4afa0:	df000715 	stw	fp,28(sp)
   4afa4:	df000704 	addi	fp,sp,28
   4afa8:	e13ffb15 	stw	r4,-20(fp)
   4afac:	e17ffc15 	stw	r5,-16(fp)
   4afb0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4afb4:	e0bffb17 	ldw	r2,-20(fp)
   4afb8:	1004803a 	cmplt	r2,r2,zero
   4afbc:	1000081e 	bne	r2,zero,4afe0 <write+0x48>
   4afc0:	e0bffb17 	ldw	r2,-20(fp)
   4afc4:	10800324 	muli	r2,r2,12
   4afc8:	1007883a 	mov	r3,r2
   4afcc:	00800174 	movhi	r2,5
   4afd0:	10b86504 	addi	r2,r2,-7788
   4afd4:	1887883a 	add	r3,r3,r2
   4afd8:	e0ffff15 	stw	r3,-4(fp)
   4afdc:	00000106 	br	4afe4 <write+0x4c>
   4afe0:	e03fff15 	stw	zero,-4(fp)
   4afe4:	e0bfff17 	ldw	r2,-4(fp)
   4afe8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4afec:	e0bffa17 	ldw	r2,-24(fp)
   4aff0:	1005003a 	cmpeq	r2,r2,zero
   4aff4:	1000241e 	bne	r2,zero,4b088 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4aff8:	e0bffa17 	ldw	r2,-24(fp)
   4affc:	10800217 	ldw	r2,8(r2)
   4b000:	108000cc 	andi	r2,r2,3
   4b004:	1005003a 	cmpeq	r2,r2,zero
   4b008:	10001a1e 	bne	r2,zero,4b074 <write+0xdc>
   4b00c:	e0bffa17 	ldw	r2,-24(fp)
   4b010:	10800017 	ldw	r2,0(r2)
   4b014:	10800617 	ldw	r2,24(r2)
   4b018:	1005003a 	cmpeq	r2,r2,zero
   4b01c:	1000151e 	bne	r2,zero,4b074 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4b020:	e0bffa17 	ldw	r2,-24(fp)
   4b024:	10800017 	ldw	r2,0(r2)
   4b028:	10800617 	ldw	r2,24(r2)
   4b02c:	e17ffc17 	ldw	r5,-16(fp)
   4b030:	e1bffd17 	ldw	r6,-12(fp)
   4b034:	e13ffa17 	ldw	r4,-24(fp)
   4b038:	103ee83a 	callr	r2
   4b03c:	e0bff915 	stw	r2,-28(fp)
   4b040:	e0bff917 	ldw	r2,-28(fp)
   4b044:	1004403a 	cmpge	r2,r2,zero
   4b048:	1000071e 	bne	r2,zero,4b068 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   4b04c:	004b0b80 	call	4b0b8 <alt_get_errno>
   4b050:	e0fff917 	ldw	r3,-28(fp)
   4b054:	00c7c83a 	sub	r3,zero,r3
   4b058:	10c00015 	stw	r3,0(r2)
        return -1;
   4b05c:	00bfffc4 	movi	r2,-1
   4b060:	e0bffe15 	stw	r2,-8(fp)
   4b064:	00000e06 	br	4b0a0 <write+0x108>
      }
      return rval;
   4b068:	e0bff917 	ldw	r2,-28(fp)
   4b06c:	e0bffe15 	stw	r2,-8(fp)
   4b070:	00000b06 	br	4b0a0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4b074:	004b0b80 	call	4b0b8 <alt_get_errno>
   4b078:	1007883a 	mov	r3,r2
   4b07c:	00800344 	movi	r2,13
   4b080:	18800015 	stw	r2,0(r3)
   4b084:	00000406 	br	4b098 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4b088:	004b0b80 	call	4b0b8 <alt_get_errno>
   4b08c:	1007883a 	mov	r3,r2
   4b090:	00801444 	movi	r2,81
   4b094:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4b098:	00bfffc4 	movi	r2,-1
   4b09c:	e0bffe15 	stw	r2,-8(fp)
   4b0a0:	e0bffe17 	ldw	r2,-8(fp)
}
   4b0a4:	e037883a 	mov	sp,fp
   4b0a8:	dfc00117 	ldw	ra,4(sp)
   4b0ac:	df000017 	ldw	fp,0(sp)
   4b0b0:	dec00204 	addi	sp,sp,8
   4b0b4:	f800283a 	ret

0004b0b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b0b8:	defffd04 	addi	sp,sp,-12
   4b0bc:	dfc00215 	stw	ra,8(sp)
   4b0c0:	df000115 	stw	fp,4(sp)
   4b0c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4b0c8:	00800174 	movhi	r2,5
   4b0cc:	10bce804 	addi	r2,r2,-3168
   4b0d0:	10800017 	ldw	r2,0(r2)
   4b0d4:	1005003a 	cmpeq	r2,r2,zero
   4b0d8:	1000061e 	bne	r2,zero,4b0f4 <alt_get_errno+0x3c>
   4b0dc:	00800174 	movhi	r2,5
   4b0e0:	10bce804 	addi	r2,r2,-3168
   4b0e4:	10800017 	ldw	r2,0(r2)
   4b0e8:	103ee83a 	callr	r2
   4b0ec:	e0bfff15 	stw	r2,-4(fp)
   4b0f0:	00000306 	br	4b100 <alt_get_errno+0x48>
   4b0f4:	00800174 	movhi	r2,5
   4b0f8:	10838a04 	addi	r2,r2,3624
   4b0fc:	e0bfff15 	stw	r2,-4(fp)
   4b100:	e0bfff17 	ldw	r2,-4(fp)
}
   4b104:	e037883a 	mov	sp,fp
   4b108:	dfc00117 	ldw	ra,4(sp)
   4b10c:	df000017 	ldw	fp,0(sp)
   4b110:	dec00204 	addi	sp,sp,8
   4b114:	f800283a 	ret

0004b118 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4b118:	defffd04 	addi	sp,sp,-12
   4b11c:	dfc00215 	stw	ra,8(sp)
   4b120:	df000115 	stw	fp,4(sp)
   4b124:	df000104 	addi	fp,sp,4
   4b128:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   4b12c:	004cb080 	call	4cb08 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4b130:	00800044 	movi	r2,1
   4b134:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4b138:	e037883a 	mov	sp,fp
   4b13c:	dfc00117 	ldw	ra,4(sp)
   4b140:	df000017 	ldw	fp,0(sp)
   4b144:	dec00204 	addi	sp,sp,8
   4b148:	f800283a 	ret

0004b14c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4b14c:	defffe04 	addi	sp,sp,-8
   4b150:	dfc00115 	stw	ra,4(sp)
   4b154:	df000015 	stw	fp,0(sp)
   4b158:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, high_res_timer);
   4b15c:	00c00174 	movhi	r3,5
   4b160:	18c38e04 	addi	r3,r3,3640
   4b164:	00800234 	movhi	r2,8
   4b168:	10840004 	addi	r2,r2,4096
   4b16c:	18800015 	stw	r2,0(r3)
   4b170:	00c00174 	movhi	r3,5
   4b174:	18c38f04 	addi	r3,r3,3644
   4b178:	0080bef4 	movhi	r2,763
   4b17c:	10bc2004 	addi	r2,r2,-3968
   4b180:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   4b184:	01000234 	movhi	r4,8
   4b188:	21040804 	addi	r4,r4,4128
   4b18c:	000b883a 	mov	r5,zero
   4b190:	01800044 	movi	r6,1
   4b194:	01c0fa04 	movi	r7,1000
   4b198:	004bd240 	call	4bd24 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4b19c:	01000174 	movhi	r4,5
   4b1a0:	2138cf04 	addi	r4,r4,-7364
   4b1a4:	000b883a 	mov	r5,zero
   4b1a8:	01800404 	movi	r6,16
   4b1ac:	004b3500 	call	4b350 <altera_avalon_jtag_uart_init>
   4b1b0:	01000174 	movhi	r4,5
   4b1b4:	2138c504 	addi	r4,r4,-7404
   4b1b8:	004b1d00 	call	4b1d0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   4b1bc:	e037883a 	mov	sp,fp
   4b1c0:	dfc00117 	ldw	ra,4(sp)
   4b1c4:	df000017 	ldw	fp,0(sp)
   4b1c8:	dec00204 	addi	sp,sp,8
   4b1cc:	f800283a 	ret

0004b1d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4b1d0:	defffd04 	addi	sp,sp,-12
   4b1d4:	dfc00215 	stw	ra,8(sp)
   4b1d8:	df000115 	stw	fp,4(sp)
   4b1dc:	df000104 	addi	fp,sp,4
   4b1e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4b1e4:	e13fff17 	ldw	r4,-4(fp)
   4b1e8:	01400174 	movhi	r5,5
   4b1ec:	297ce504 	addi	r5,r5,-3180
   4b1f0:	004c08c0 	call	4c08c <alt_dev_llist_insert>
}
   4b1f4:	e037883a 	mov	sp,fp
   4b1f8:	dfc00117 	ldw	ra,4(sp)
   4b1fc:	df000017 	ldw	fp,0(sp)
   4b200:	dec00204 	addi	sp,sp,8
   4b204:	f800283a 	ret

0004b208 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4b208:	defffa04 	addi	sp,sp,-24
   4b20c:	dfc00515 	stw	ra,20(sp)
   4b210:	df000415 	stw	fp,16(sp)
   4b214:	df000404 	addi	fp,sp,16
   4b218:	e13ffd15 	stw	r4,-12(fp)
   4b21c:	e17ffe15 	stw	r5,-8(fp)
   4b220:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4b224:	e0bffd17 	ldw	r2,-12(fp)
   4b228:	10800017 	ldw	r2,0(r2)
   4b22c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4b230:	e0bffc17 	ldw	r2,-16(fp)
   4b234:	11000a04 	addi	r4,r2,40
   4b238:	e0bffd17 	ldw	r2,-12(fp)
   4b23c:	11c00217 	ldw	r7,8(r2)
   4b240:	e17ffe17 	ldw	r5,-8(fp)
   4b244:	e1bfff17 	ldw	r6,-4(fp)
   4b248:	004b8500 	call	4b850 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4b24c:	e037883a 	mov	sp,fp
   4b250:	dfc00117 	ldw	ra,4(sp)
   4b254:	df000017 	ldw	fp,0(sp)
   4b258:	dec00204 	addi	sp,sp,8
   4b25c:	f800283a 	ret

0004b260 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4b260:	defffa04 	addi	sp,sp,-24
   4b264:	dfc00515 	stw	ra,20(sp)
   4b268:	df000415 	stw	fp,16(sp)
   4b26c:	df000404 	addi	fp,sp,16
   4b270:	e13ffd15 	stw	r4,-12(fp)
   4b274:	e17ffe15 	stw	r5,-8(fp)
   4b278:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4b27c:	e0bffd17 	ldw	r2,-12(fp)
   4b280:	10800017 	ldw	r2,0(r2)
   4b284:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4b288:	e0bffc17 	ldw	r2,-16(fp)
   4b28c:	11000a04 	addi	r4,r2,40
   4b290:	e0bffd17 	ldw	r2,-12(fp)
   4b294:	11c00217 	ldw	r7,8(r2)
   4b298:	e17ffe17 	ldw	r5,-8(fp)
   4b29c:	e1bfff17 	ldw	r6,-4(fp)
   4b2a0:	004ba740 	call	4ba74 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4b2a4:	e037883a 	mov	sp,fp
   4b2a8:	dfc00117 	ldw	ra,4(sp)
   4b2ac:	df000017 	ldw	fp,0(sp)
   4b2b0:	dec00204 	addi	sp,sp,8
   4b2b4:	f800283a 	ret

0004b2b8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4b2b8:	defffc04 	addi	sp,sp,-16
   4b2bc:	dfc00315 	stw	ra,12(sp)
   4b2c0:	df000215 	stw	fp,8(sp)
   4b2c4:	df000204 	addi	fp,sp,8
   4b2c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4b2cc:	e0bfff17 	ldw	r2,-4(fp)
   4b2d0:	10800017 	ldw	r2,0(r2)
   4b2d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4b2d8:	e0bffe17 	ldw	r2,-8(fp)
   4b2dc:	11000a04 	addi	r4,r2,40
   4b2e0:	e0bfff17 	ldw	r2,-4(fp)
   4b2e4:	11400217 	ldw	r5,8(r2)
   4b2e8:	004b6e80 	call	4b6e8 <altera_avalon_jtag_uart_close>
}
   4b2ec:	e037883a 	mov	sp,fp
   4b2f0:	dfc00117 	ldw	ra,4(sp)
   4b2f4:	df000017 	ldw	fp,0(sp)
   4b2f8:	dec00204 	addi	sp,sp,8
   4b2fc:	f800283a 	ret

0004b300 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4b300:	defffa04 	addi	sp,sp,-24
   4b304:	dfc00515 	stw	ra,20(sp)
   4b308:	df000415 	stw	fp,16(sp)
   4b30c:	df000404 	addi	fp,sp,16
   4b310:	e13ffd15 	stw	r4,-12(fp)
   4b314:	e17ffe15 	stw	r5,-8(fp)
   4b318:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4b31c:	e0bffd17 	ldw	r2,-12(fp)
   4b320:	10800017 	ldw	r2,0(r2)
   4b324:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4b328:	e0bffc17 	ldw	r2,-16(fp)
   4b32c:	11000a04 	addi	r4,r2,40
   4b330:	e17ffe17 	ldw	r5,-8(fp)
   4b334:	e1bfff17 	ldw	r6,-4(fp)
   4b338:	004b75c0 	call	4b75c <altera_avalon_jtag_uart_ioctl>
}
   4b33c:	e037883a 	mov	sp,fp
   4b340:	dfc00117 	ldw	ra,4(sp)
   4b344:	df000017 	ldw	fp,0(sp)
   4b348:	dec00204 	addi	sp,sp,8
   4b34c:	f800283a 	ret

0004b350 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4b350:	defffa04 	addi	sp,sp,-24
   4b354:	dfc00515 	stw	ra,20(sp)
   4b358:	df000415 	stw	fp,16(sp)
   4b35c:	df000404 	addi	fp,sp,16
   4b360:	e13ffd15 	stw	r4,-12(fp)
   4b364:	e17ffe15 	stw	r5,-8(fp)
   4b368:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b36c:	e0fffd17 	ldw	r3,-12(fp)
   4b370:	00800044 	movi	r2,1
   4b374:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4b378:	e0bffd17 	ldw	r2,-12(fp)
   4b37c:	10800017 	ldw	r2,0(r2)
   4b380:	11000104 	addi	r4,r2,4
   4b384:	e0bffd17 	ldw	r2,-12(fp)
   4b388:	10800817 	ldw	r2,32(r2)
   4b38c:	1007883a 	mov	r3,r2
   4b390:	2005883a 	mov	r2,r4
   4b394:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4b398:	e13ffe17 	ldw	r4,-8(fp)
   4b39c:	e17fff17 	ldw	r5,-4(fp)
   4b3a0:	d8000015 	stw	zero,0(sp)
   4b3a4:	01800174 	movhi	r6,5
   4b3a8:	31ad0404 	addi	r6,r6,-19440
   4b3ac:	e1fffd17 	ldw	r7,-12(fp)
   4b3b0:	004c2980 	call	4c298 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4b3b4:	e0bffd17 	ldw	r2,-12(fp)
   4b3b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4b3bc:	e0bffd17 	ldw	r2,-12(fp)
   4b3c0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4b3c4:	00800174 	movhi	r2,5
   4b3c8:	10839104 	addi	r2,r2,3652
   4b3cc:	10800017 	ldw	r2,0(r2)
   4b3d0:	100b883a 	mov	r5,r2
   4b3d4:	01800174 	movhi	r6,5
   4b3d8:	31ad8e04 	addi	r6,r6,-18888
   4b3dc:	e1fffd17 	ldw	r7,-12(fp)
   4b3e0:	004bf1c0 	call	4bf1c <alt_alarm_start>
   4b3e4:	1004403a 	cmpge	r2,r2,zero
   4b3e8:	1000041e 	bne	r2,zero,4b3fc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4b3ec:	e0fffd17 	ldw	r3,-12(fp)
   4b3f0:	00a00034 	movhi	r2,32768
   4b3f4:	10bfffc4 	addi	r2,r2,-1
   4b3f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4b3fc:	e037883a 	mov	sp,fp
   4b400:	dfc00117 	ldw	ra,4(sp)
   4b404:	df000017 	ldw	fp,0(sp)
   4b408:	dec00204 	addi	sp,sp,8
   4b40c:	f800283a 	ret

0004b410 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4b410:	defff804 	addi	sp,sp,-32
   4b414:	df000715 	stw	fp,28(sp)
   4b418:	df000704 	addi	fp,sp,28
   4b41c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4b420:	e0bfff17 	ldw	r2,-4(fp)
   4b424:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   4b428:	e0bffe17 	ldw	r2,-8(fp)
   4b42c:	10800017 	ldw	r2,0(r2)
   4b430:	e0bffd15 	stw	r2,-12(fp)
   4b434:	00000006 	br	4b438 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4b438:	e0bffd17 	ldw	r2,-12(fp)
   4b43c:	10800104 	addi	r2,r2,4
   4b440:	10800037 	ldwio	r2,0(r2)
   4b444:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4b448:	e0bffc17 	ldw	r2,-16(fp)
   4b44c:	1080c00c 	andi	r2,r2,768
   4b450:	1005003a 	cmpeq	r2,r2,zero
   4b454:	1000741e 	bne	r2,zero,4b628 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4b458:	e0bffc17 	ldw	r2,-16(fp)
   4b45c:	1080400c 	andi	r2,r2,256
   4b460:	1005003a 	cmpeq	r2,r2,zero
   4b464:	1000351e 	bne	r2,zero,4b53c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4b468:	00800074 	movhi	r2,1
   4b46c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b470:	e0bffe17 	ldw	r2,-8(fp)
   4b474:	10800a17 	ldw	r2,40(r2)
   4b478:	10800044 	addi	r2,r2,1
   4b47c:	1081ffcc 	andi	r2,r2,2047
   4b480:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   4b484:	e0bffe17 	ldw	r2,-8(fp)
   4b488:	10c00b17 	ldw	r3,44(r2)
   4b48c:	e0bffa17 	ldw	r2,-24(fp)
   4b490:	18801626 	beq	r3,r2,4b4ec <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4b494:	e0bffd17 	ldw	r2,-12(fp)
   4b498:	10800037 	ldwio	r2,0(r2)
   4b49c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4b4a0:	e0bffb17 	ldw	r2,-20(fp)
   4b4a4:	10a0000c 	andi	r2,r2,32768
   4b4a8:	1005003a 	cmpeq	r2,r2,zero
   4b4ac:	10000f1e 	bne	r2,zero,4b4ec <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4b4b0:	e0bffe17 	ldw	r2,-8(fp)
   4b4b4:	10c00a17 	ldw	r3,40(r2)
   4b4b8:	e0bffb17 	ldw	r2,-20(fp)
   4b4bc:	1009883a 	mov	r4,r2
   4b4c0:	e0bffe17 	ldw	r2,-8(fp)
   4b4c4:	1885883a 	add	r2,r3,r2
   4b4c8:	10800e04 	addi	r2,r2,56
   4b4cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b4d0:	e0bffe17 	ldw	r2,-8(fp)
   4b4d4:	10800a17 	ldw	r2,40(r2)
   4b4d8:	10800044 	addi	r2,r2,1
   4b4dc:	10c1ffcc 	andi	r3,r2,2047
   4b4e0:	e0bffe17 	ldw	r2,-8(fp)
   4b4e4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4b4e8:	003fe106 	br	4b470 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4b4ec:	e0bffb17 	ldw	r2,-20(fp)
   4b4f0:	10bfffec 	andhi	r2,r2,65535
   4b4f4:	1005003a 	cmpeq	r2,r2,zero
   4b4f8:	1000101e 	bne	r2,zero,4b53c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b4fc:	e0bffe17 	ldw	r2,-8(fp)
   4b500:	10c00817 	ldw	r3,32(r2)
   4b504:	00bfff84 	movi	r2,-2
   4b508:	1886703a 	and	r3,r3,r2
   4b50c:	e0bffe17 	ldw	r2,-8(fp)
   4b510:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4b514:	e0bffd17 	ldw	r2,-12(fp)
   4b518:	11000104 	addi	r4,r2,4
   4b51c:	e0bffe17 	ldw	r2,-8(fp)
   4b520:	10800817 	ldw	r2,32(r2)
   4b524:	1007883a 	mov	r3,r2
   4b528:	2005883a 	mov	r2,r4
   4b52c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4b530:	e0bffd17 	ldw	r2,-12(fp)
   4b534:	10800104 	addi	r2,r2,4
   4b538:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4b53c:	e0bffc17 	ldw	r2,-16(fp)
   4b540:	1080800c 	andi	r2,r2,512
   4b544:	1005003a 	cmpeq	r2,r2,zero
   4b548:	103fbb1e 	bne	r2,zero,4b438 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4b54c:	e0bffc17 	ldw	r2,-16(fp)
   4b550:	10bfffec 	andhi	r2,r2,65535
   4b554:	1004d43a 	srli	r2,r2,16
   4b558:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4b55c:	00001506 	br	4b5b4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4b560:	e13ffd17 	ldw	r4,-12(fp)
   4b564:	e0bffe17 	ldw	r2,-8(fp)
   4b568:	10c00d17 	ldw	r3,52(r2)
   4b56c:	e0bffe17 	ldw	r2,-8(fp)
   4b570:	1885883a 	add	r2,r3,r2
   4b574:	10820e04 	addi	r2,r2,2104
   4b578:	10800003 	ldbu	r2,0(r2)
   4b57c:	10c03fcc 	andi	r3,r2,255
   4b580:	18c0201c 	xori	r3,r3,128
   4b584:	18ffe004 	addi	r3,r3,-128
   4b588:	2005883a 	mov	r2,r4
   4b58c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b590:	e0bffe17 	ldw	r2,-8(fp)
   4b594:	10800d17 	ldw	r2,52(r2)
   4b598:	10800044 	addi	r2,r2,1
   4b59c:	10c1ffcc 	andi	r3,r2,2047
   4b5a0:	e0bffe17 	ldw	r2,-8(fp)
   4b5a4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4b5a8:	e0bff917 	ldw	r2,-28(fp)
   4b5ac:	10bfffc4 	addi	r2,r2,-1
   4b5b0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4b5b4:	e0bff917 	ldw	r2,-28(fp)
   4b5b8:	1005003a 	cmpeq	r2,r2,zero
   4b5bc:	1000051e 	bne	r2,zero,4b5d4 <altera_avalon_jtag_uart_irq+0x1c4>
   4b5c0:	e0bffe17 	ldw	r2,-8(fp)
   4b5c4:	10c00d17 	ldw	r3,52(r2)
   4b5c8:	e0bffe17 	ldw	r2,-8(fp)
   4b5cc:	10800c17 	ldw	r2,48(r2)
   4b5d0:	18bfe31e 	bne	r3,r2,4b560 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4b5d4:	e0bff917 	ldw	r2,-28(fp)
   4b5d8:	1005003a 	cmpeq	r2,r2,zero
   4b5dc:	103f961e 	bne	r2,zero,4b438 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4b5e0:	e0bffe17 	ldw	r2,-8(fp)
   4b5e4:	10c00817 	ldw	r3,32(r2)
   4b5e8:	00bfff44 	movi	r2,-3
   4b5ec:	1886703a 	and	r3,r3,r2
   4b5f0:	e0bffe17 	ldw	r2,-8(fp)
   4b5f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b5f8:	e0bffe17 	ldw	r2,-8(fp)
   4b5fc:	10800017 	ldw	r2,0(r2)
   4b600:	11000104 	addi	r4,r2,4
   4b604:	e0bffe17 	ldw	r2,-8(fp)
   4b608:	10800817 	ldw	r2,32(r2)
   4b60c:	1007883a 	mov	r3,r2
   4b610:	2005883a 	mov	r2,r4
   4b614:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4b618:	e0bffd17 	ldw	r2,-12(fp)
   4b61c:	10800104 	addi	r2,r2,4
   4b620:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4b624:	003f8406 	br	4b438 <altera_avalon_jtag_uart_irq+0x28>
}
   4b628:	e037883a 	mov	sp,fp
   4b62c:	df000017 	ldw	fp,0(sp)
   4b630:	dec00104 	addi	sp,sp,4
   4b634:	f800283a 	ret

0004b638 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4b638:	defffc04 	addi	sp,sp,-16
   4b63c:	df000315 	stw	fp,12(sp)
   4b640:	df000304 	addi	fp,sp,12
   4b644:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4b648:	e0bfff17 	ldw	r2,-4(fp)
   4b64c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4b650:	e0bffe17 	ldw	r2,-8(fp)
   4b654:	10800017 	ldw	r2,0(r2)
   4b658:	10800104 	addi	r2,r2,4
   4b65c:	10800037 	ldwio	r2,0(r2)
   4b660:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4b664:	e0bffd17 	ldw	r2,-12(fp)
   4b668:	1081000c 	andi	r2,r2,1024
   4b66c:	1005003a 	cmpeq	r2,r2,zero
   4b670:	10000c1e 	bne	r2,zero,4b6a4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4b674:	e0bffe17 	ldw	r2,-8(fp)
   4b678:	10800017 	ldw	r2,0(r2)
   4b67c:	11000104 	addi	r4,r2,4
   4b680:	e0bffe17 	ldw	r2,-8(fp)
   4b684:	10800817 	ldw	r2,32(r2)
   4b688:	10810014 	ori	r2,r2,1024
   4b68c:	1007883a 	mov	r3,r2
   4b690:	2005883a 	mov	r2,r4
   4b694:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4b698:	e0bffe17 	ldw	r2,-8(fp)
   4b69c:	10000915 	stw	zero,36(r2)
   4b6a0:	00000a06 	br	4b6cc <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4b6a4:	e0bffe17 	ldw	r2,-8(fp)
   4b6a8:	10c00917 	ldw	r3,36(r2)
   4b6ac:	00a00034 	movhi	r2,32768
   4b6b0:	10bfff04 	addi	r2,r2,-4
   4b6b4:	10c00536 	bltu	r2,r3,4b6cc <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   4b6b8:	e0bffe17 	ldw	r2,-8(fp)
   4b6bc:	10800917 	ldw	r2,36(r2)
   4b6c0:	10c00044 	addi	r3,r2,1
   4b6c4:	e0bffe17 	ldw	r2,-8(fp)
   4b6c8:	10c00915 	stw	r3,36(r2)
   4b6cc:	00800174 	movhi	r2,5
   4b6d0:	10839104 	addi	r2,r2,3652
   4b6d4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4b6d8:	e037883a 	mov	sp,fp
   4b6dc:	df000017 	ldw	fp,0(sp)
   4b6e0:	dec00104 	addi	sp,sp,4
   4b6e4:	f800283a 	ret

0004b6e8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4b6e8:	defffc04 	addi	sp,sp,-16
   4b6ec:	df000315 	stw	fp,12(sp)
   4b6f0:	df000304 	addi	fp,sp,12
   4b6f4:	e13ffd15 	stw	r4,-12(fp)
   4b6f8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4b6fc:	00000706 	br	4b71c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4b700:	e0bffe17 	ldw	r2,-8(fp)
   4b704:	1090000c 	andi	r2,r2,16384
   4b708:	1005003a 	cmpeq	r2,r2,zero
   4b70c:	1000031e 	bne	r2,zero,4b71c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   4b710:	00bffd44 	movi	r2,-11
   4b714:	e0bfff15 	stw	r2,-4(fp)
   4b718:	00000b06 	br	4b748 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4b71c:	e0bffd17 	ldw	r2,-12(fp)
   4b720:	10c00d17 	ldw	r3,52(r2)
   4b724:	e0bffd17 	ldw	r2,-12(fp)
   4b728:	10800c17 	ldw	r2,48(r2)
   4b72c:	18800526 	beq	r3,r2,4b744 <altera_avalon_jtag_uart_close+0x5c>
   4b730:	e0bffd17 	ldw	r2,-12(fp)
   4b734:	10c00917 	ldw	r3,36(r2)
   4b738:	e0bffd17 	ldw	r2,-12(fp)
   4b73c:	10800117 	ldw	r2,4(r2)
   4b740:	18bfef36 	bltu	r3,r2,4b700 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4b744:	e03fff15 	stw	zero,-4(fp)
   4b748:	e0bfff17 	ldw	r2,-4(fp)
}
   4b74c:	e037883a 	mov	sp,fp
   4b750:	df000017 	ldw	fp,0(sp)
   4b754:	dec00104 	addi	sp,sp,4
   4b758:	f800283a 	ret

0004b75c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4b75c:	defff804 	addi	sp,sp,-32
   4b760:	df000715 	stw	fp,28(sp)
   4b764:	df000704 	addi	fp,sp,28
   4b768:	e13ffb15 	stw	r4,-20(fp)
   4b76c:	e17ffc15 	stw	r5,-16(fp)
   4b770:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   4b774:	00bff9c4 	movi	r2,-25
   4b778:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   4b77c:	e0bffc17 	ldw	r2,-16(fp)
   4b780:	e0bfff15 	stw	r2,-4(fp)
   4b784:	e0ffff17 	ldw	r3,-4(fp)
   4b788:	189a8060 	cmpeqi	r2,r3,27137
   4b78c:	1000041e 	bne	r2,zero,4b7a0 <altera_avalon_jtag_uart_ioctl+0x44>
   4b790:	e0ffff17 	ldw	r3,-4(fp)
   4b794:	189a80a0 	cmpeqi	r2,r3,27138
   4b798:	10001b1e 	bne	r2,zero,4b808 <altera_avalon_jtag_uart_ioctl+0xac>
   4b79c:	00002706 	br	4b83c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4b7a0:	e0bffb17 	ldw	r2,-20(fp)
   4b7a4:	10c00117 	ldw	r3,4(r2)
   4b7a8:	00a00034 	movhi	r2,32768
   4b7ac:	10bfffc4 	addi	r2,r2,-1
   4b7b0:	18802226 	beq	r3,r2,4b83c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   4b7b4:	e0bffd17 	ldw	r2,-12(fp)
   4b7b8:	10800017 	ldw	r2,0(r2)
   4b7bc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4b7c0:	e0bff917 	ldw	r2,-28(fp)
   4b7c4:	10800090 	cmplti	r2,r2,2
   4b7c8:	1000071e 	bne	r2,zero,4b7e8 <altera_avalon_jtag_uart_ioctl+0x8c>
   4b7cc:	e0fff917 	ldw	r3,-28(fp)
   4b7d0:	00a00034 	movhi	r2,32768
   4b7d4:	10bfffc4 	addi	r2,r2,-1
   4b7d8:	18800326 	beq	r3,r2,4b7e8 <altera_avalon_jtag_uart_ioctl+0x8c>
   4b7dc:	e0bff917 	ldw	r2,-28(fp)
   4b7e0:	e0bffe15 	stw	r2,-8(fp)
   4b7e4:	00000306 	br	4b7f4 <altera_avalon_jtag_uart_ioctl+0x98>
   4b7e8:	00e00034 	movhi	r3,32768
   4b7ec:	18ffff84 	addi	r3,r3,-2
   4b7f0:	e0fffe15 	stw	r3,-8(fp)
   4b7f4:	e0bffb17 	ldw	r2,-20(fp)
   4b7f8:	e0fffe17 	ldw	r3,-8(fp)
   4b7fc:	10c00115 	stw	r3,4(r2)
      rc = 0;
   4b800:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   4b804:	00000d06 	br	4b83c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4b808:	e0bffb17 	ldw	r2,-20(fp)
   4b80c:	10c00117 	ldw	r3,4(r2)
   4b810:	00a00034 	movhi	r2,32768
   4b814:	10bfffc4 	addi	r2,r2,-1
   4b818:	18800826 	beq	r3,r2,4b83c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4b81c:	e13ffd17 	ldw	r4,-12(fp)
   4b820:	e0bffb17 	ldw	r2,-20(fp)
   4b824:	10c00917 	ldw	r3,36(r2)
   4b828:	e0bffb17 	ldw	r2,-20(fp)
   4b82c:	10800117 	ldw	r2,4(r2)
   4b830:	1885803a 	cmpltu	r2,r3,r2
   4b834:	20800015 	stw	r2,0(r4)
      rc = 0;
   4b838:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   4b83c:	e0bffa17 	ldw	r2,-24(fp)
}
   4b840:	e037883a 	mov	sp,fp
   4b844:	df000017 	ldw	fp,0(sp)
   4b848:	dec00104 	addi	sp,sp,4
   4b84c:	f800283a 	ret

0004b850 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4b850:	defff204 	addi	sp,sp,-56
   4b854:	dfc00d15 	stw	ra,52(sp)
   4b858:	df000c15 	stw	fp,48(sp)
   4b85c:	df000c04 	addi	fp,sp,48
   4b860:	e13ffb15 	stw	r4,-20(fp)
   4b864:	e17ffc15 	stw	r5,-16(fp)
   4b868:	e1bffd15 	stw	r6,-12(fp)
   4b86c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   4b870:	e0bffc17 	ldw	r2,-16(fp)
   4b874:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b878:	00004806 	br	4b99c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4b87c:	e0bffb17 	ldw	r2,-20(fp)
   4b880:	10800a17 	ldw	r2,40(r2)
   4b884:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4b888:	e0bffb17 	ldw	r2,-20(fp)
   4b88c:	10800b17 	ldw	r2,44(r2)
   4b890:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   4b894:	e0fff717 	ldw	r3,-36(fp)
   4b898:	e0bff617 	ldw	r2,-40(fp)
   4b89c:	18800536 	bltu	r3,r2,4b8b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4b8a0:	e0bff717 	ldw	r2,-36(fp)
   4b8a4:	e0fff617 	ldw	r3,-40(fp)
   4b8a8:	10c5c83a 	sub	r2,r2,r3
   4b8ac:	e0bff815 	stw	r2,-32(fp)
   4b8b0:	00000406 	br	4b8c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4b8b4:	00820004 	movi	r2,2048
   4b8b8:	e0fff617 	ldw	r3,-40(fp)
   4b8bc:	10c5c83a 	sub	r2,r2,r3
   4b8c0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4b8c4:	e0bff817 	ldw	r2,-32(fp)
   4b8c8:	1005003a 	cmpeq	r2,r2,zero
   4b8cc:	10001f1e 	bne	r2,zero,4b94c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   4b8d0:	e0fffd17 	ldw	r3,-12(fp)
   4b8d4:	e0bff817 	ldw	r2,-32(fp)
   4b8d8:	1880022e 	bgeu	r3,r2,4b8e4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4b8dc:	e0bffd17 	ldw	r2,-12(fp)
   4b8e0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4b8e4:	e0bffb17 	ldw	r2,-20(fp)
   4b8e8:	10c00e04 	addi	r3,r2,56
   4b8ec:	e0bff617 	ldw	r2,-40(fp)
   4b8f0:	1887883a 	add	r3,r3,r2
   4b8f4:	e0bffa17 	ldw	r2,-24(fp)
   4b8f8:	1009883a 	mov	r4,r2
   4b8fc:	180b883a 	mov	r5,r3
   4b900:	e1bff817 	ldw	r6,-32(fp)
   4b904:	00463780 	call	46378 <memcpy>
      ptr   += n;
   4b908:	e0fff817 	ldw	r3,-32(fp)
   4b90c:	e0bffa17 	ldw	r2,-24(fp)
   4b910:	10c5883a 	add	r2,r2,r3
   4b914:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   4b918:	e0fffd17 	ldw	r3,-12(fp)
   4b91c:	e0bff817 	ldw	r2,-32(fp)
   4b920:	1885c83a 	sub	r2,r3,r2
   4b924:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b928:	e0fff617 	ldw	r3,-40(fp)
   4b92c:	e0bff817 	ldw	r2,-32(fp)
   4b930:	1885883a 	add	r2,r3,r2
   4b934:	10c1ffcc 	andi	r3,r2,2047
   4b938:	e0bffb17 	ldw	r2,-20(fp)
   4b93c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4b940:	e0bffd17 	ldw	r2,-12(fp)
   4b944:	10800048 	cmpgei	r2,r2,1
   4b948:	103fcc1e 	bne	r2,zero,4b87c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   4b94c:	e0fffa17 	ldw	r3,-24(fp)
   4b950:	e0bffc17 	ldw	r2,-16(fp)
   4b954:	1880141e 	bne	r3,r2,4b9a8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4b958:	e0bffe17 	ldw	r2,-8(fp)
   4b95c:	1090000c 	andi	r2,r2,16384
   4b960:	1004c03a 	cmpne	r2,r2,zero
   4b964:	1000101e 	bne	r2,zero,4b9a8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4b968:	e0bffb17 	ldw	r2,-20(fp)
   4b96c:	10c00a17 	ldw	r3,40(r2)
   4b970:	e0bff717 	ldw	r2,-36(fp)
   4b974:	1880051e 	bne	r3,r2,4b98c <altera_avalon_jtag_uart_read+0x13c>
   4b978:	e0bffb17 	ldw	r2,-20(fp)
   4b97c:	10c00917 	ldw	r3,36(r2)
   4b980:	e0bffb17 	ldw	r2,-20(fp)
   4b984:	10800117 	ldw	r2,4(r2)
   4b988:	18bff736 	bltu	r3,r2,4b968 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4b98c:	e0bffb17 	ldw	r2,-20(fp)
   4b990:	10c00a17 	ldw	r3,40(r2)
   4b994:	e0bff717 	ldw	r2,-36(fp)
   4b998:	18800326 	beq	r3,r2,4b9a8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b99c:	e0bffd17 	ldw	r2,-12(fp)
   4b9a0:	10800048 	cmpgei	r2,r2,1
   4b9a4:	103fb51e 	bne	r2,zero,4b87c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4b9a8:	e0fffa17 	ldw	r3,-24(fp)
   4b9ac:	e0bffc17 	ldw	r2,-16(fp)
   4b9b0:	18801926 	beq	r3,r2,4ba18 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b9b4:	0005303a 	rdctl	r2,status
   4b9b8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b9bc:	e0fff517 	ldw	r3,-44(fp)
   4b9c0:	00bfff84 	movi	r2,-2
   4b9c4:	1884703a 	and	r2,r3,r2
   4b9c8:	1001703a 	wrctl	status,r2
  
  return context;
   4b9cc:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4b9d0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b9d4:	e0bffb17 	ldw	r2,-20(fp)
   4b9d8:	10800817 	ldw	r2,32(r2)
   4b9dc:	10c00054 	ori	r3,r2,1
   4b9e0:	e0bffb17 	ldw	r2,-20(fp)
   4b9e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b9e8:	e0bffb17 	ldw	r2,-20(fp)
   4b9ec:	10800017 	ldw	r2,0(r2)
   4b9f0:	11000104 	addi	r4,r2,4
   4b9f4:	e0bffb17 	ldw	r2,-20(fp)
   4b9f8:	10800817 	ldw	r2,32(r2)
   4b9fc:	1007883a 	mov	r3,r2
   4ba00:	2005883a 	mov	r2,r4
   4ba04:	10c00035 	stwio	r3,0(r2)
   4ba08:	e0bff917 	ldw	r2,-28(fp)
   4ba0c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ba10:	e0bff417 	ldw	r2,-48(fp)
   4ba14:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4ba18:	e0fffa17 	ldw	r3,-24(fp)
   4ba1c:	e0bffc17 	ldw	r2,-16(fp)
   4ba20:	18800526 	beq	r3,r2,4ba38 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   4ba24:	e0fffa17 	ldw	r3,-24(fp)
   4ba28:	e0bffc17 	ldw	r2,-16(fp)
   4ba2c:	1887c83a 	sub	r3,r3,r2
   4ba30:	e0ffff15 	stw	r3,-4(fp)
   4ba34:	00000906 	br	4ba5c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   4ba38:	e0bffe17 	ldw	r2,-8(fp)
   4ba3c:	1090000c 	andi	r2,r2,16384
   4ba40:	1005003a 	cmpeq	r2,r2,zero
   4ba44:	1000031e 	bne	r2,zero,4ba54 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4ba48:	00bffd44 	movi	r2,-11
   4ba4c:	e0bfff15 	stw	r2,-4(fp)
   4ba50:	00000206 	br	4ba5c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   4ba54:	00bffec4 	movi	r2,-5
   4ba58:	e0bfff15 	stw	r2,-4(fp)
   4ba5c:	e0bfff17 	ldw	r2,-4(fp)
}
   4ba60:	e037883a 	mov	sp,fp
   4ba64:	dfc00117 	ldw	ra,4(sp)
   4ba68:	df000017 	ldw	fp,0(sp)
   4ba6c:	dec00204 	addi	sp,sp,8
   4ba70:	f800283a 	ret

0004ba74 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4ba74:	defff204 	addi	sp,sp,-56
   4ba78:	dfc00d15 	stw	ra,52(sp)
   4ba7c:	df000c15 	stw	fp,48(sp)
   4ba80:	df000c04 	addi	fp,sp,48
   4ba84:	e13ffb15 	stw	r4,-20(fp)
   4ba88:	e17ffc15 	stw	r5,-16(fp)
   4ba8c:	e1bffd15 	stw	r6,-12(fp)
   4ba90:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4ba94:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4ba98:	e0bffc17 	ldw	r2,-16(fp)
   4ba9c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4baa0:	00003a06 	br	4bb8c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4baa4:	e0bffb17 	ldw	r2,-20(fp)
   4baa8:	10800c17 	ldw	r2,48(r2)
   4baac:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   4bab0:	e0bffb17 	ldw	r2,-20(fp)
   4bab4:	10800d17 	ldw	r2,52(r2)
   4bab8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   4babc:	e0fffa17 	ldw	r3,-24(fp)
   4bac0:	e0bff917 	ldw	r2,-28(fp)
   4bac4:	1880062e 	bgeu	r3,r2,4bae0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4bac8:	e0fff917 	ldw	r3,-28(fp)
   4bacc:	e0bffa17 	ldw	r2,-24(fp)
   4bad0:	1885c83a 	sub	r2,r3,r2
   4bad4:	10bfffc4 	addi	r2,r2,-1
   4bad8:	e0bff815 	stw	r2,-32(fp)
   4badc:	00000c06 	br	4bb10 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   4bae0:	e0bff917 	ldw	r2,-28(fp)
   4bae4:	1005003a 	cmpeq	r2,r2,zero
   4bae8:	1000051e 	bne	r2,zero,4bb00 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4baec:	00820004 	movi	r2,2048
   4baf0:	e0fffa17 	ldw	r3,-24(fp)
   4baf4:	10c5c83a 	sub	r2,r2,r3
   4baf8:	e0bff815 	stw	r2,-32(fp)
   4bafc:	00000406 	br	4bb10 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4bb00:	0081ffc4 	movi	r2,2047
   4bb04:	e0fffa17 	ldw	r3,-24(fp)
   4bb08:	10c5c83a 	sub	r2,r2,r3
   4bb0c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4bb10:	e0bff817 	ldw	r2,-32(fp)
   4bb14:	1005003a 	cmpeq	r2,r2,zero
   4bb18:	10001f1e 	bne	r2,zero,4bb98 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   4bb1c:	e0fffd17 	ldw	r3,-12(fp)
   4bb20:	e0bff817 	ldw	r2,-32(fp)
   4bb24:	1880022e 	bgeu	r3,r2,4bb30 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   4bb28:	e0bffd17 	ldw	r2,-12(fp)
   4bb2c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4bb30:	e0bffb17 	ldw	r2,-20(fp)
   4bb34:	10c20e04 	addi	r3,r2,2104
   4bb38:	e0bffa17 	ldw	r2,-24(fp)
   4bb3c:	1885883a 	add	r2,r3,r2
   4bb40:	e0fffc17 	ldw	r3,-16(fp)
   4bb44:	1009883a 	mov	r4,r2
   4bb48:	180b883a 	mov	r5,r3
   4bb4c:	e1bff817 	ldw	r6,-32(fp)
   4bb50:	00463780 	call	46378 <memcpy>
      ptr   += n;
   4bb54:	e0fff817 	ldw	r3,-32(fp)
   4bb58:	e0bffc17 	ldw	r2,-16(fp)
   4bb5c:	10c5883a 	add	r2,r2,r3
   4bb60:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   4bb64:	e0fffd17 	ldw	r3,-12(fp)
   4bb68:	e0bff817 	ldw	r2,-32(fp)
   4bb6c:	1885c83a 	sub	r2,r3,r2
   4bb70:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4bb74:	e0fffa17 	ldw	r3,-24(fp)
   4bb78:	e0bff817 	ldw	r2,-32(fp)
   4bb7c:	1885883a 	add	r2,r3,r2
   4bb80:	10c1ffcc 	andi	r3,r2,2047
   4bb84:	e0bffb17 	ldw	r2,-20(fp)
   4bb88:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4bb8c:	e0bffd17 	ldw	r2,-12(fp)
   4bb90:	10800048 	cmpgei	r2,r2,1
   4bb94:	103fc31e 	bne	r2,zero,4baa4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bb98:	0005303a 	rdctl	r2,status
   4bb9c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bba0:	e0fff517 	ldw	r3,-44(fp)
   4bba4:	00bfff84 	movi	r2,-2
   4bba8:	1884703a 	and	r2,r3,r2
   4bbac:	1001703a 	wrctl	status,r2
  
  return context;
   4bbb0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4bbb4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4bbb8:	e0bffb17 	ldw	r2,-20(fp)
   4bbbc:	10800817 	ldw	r2,32(r2)
   4bbc0:	10c00094 	ori	r3,r2,2
   4bbc4:	e0bffb17 	ldw	r2,-20(fp)
   4bbc8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4bbcc:	e0bffb17 	ldw	r2,-20(fp)
   4bbd0:	10800017 	ldw	r2,0(r2)
   4bbd4:	11000104 	addi	r4,r2,4
   4bbd8:	e0bffb17 	ldw	r2,-20(fp)
   4bbdc:	10800817 	ldw	r2,32(r2)
   4bbe0:	1007883a 	mov	r3,r2
   4bbe4:	2005883a 	mov	r2,r4
   4bbe8:	10c00035 	stwio	r3,0(r2)
   4bbec:	e0bff717 	ldw	r2,-36(fp)
   4bbf0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bbf4:	e0bff417 	ldw	r2,-48(fp)
   4bbf8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4bbfc:	e0bffd17 	ldw	r2,-12(fp)
   4bc00:	10800050 	cmplti	r2,r2,1
   4bc04:	1000111e 	bne	r2,zero,4bc4c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   4bc08:	e0bffe17 	ldw	r2,-8(fp)
   4bc0c:	1090000c 	andi	r2,r2,16384
   4bc10:	1004c03a 	cmpne	r2,r2,zero
   4bc14:	1000101e 	bne	r2,zero,4bc58 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4bc18:	e0bffb17 	ldw	r2,-20(fp)
   4bc1c:	10c00d17 	ldw	r3,52(r2)
   4bc20:	e0bff917 	ldw	r2,-28(fp)
   4bc24:	1880051e 	bne	r3,r2,4bc3c <altera_avalon_jtag_uart_write+0x1c8>
   4bc28:	e0bffb17 	ldw	r2,-20(fp)
   4bc2c:	10c00917 	ldw	r3,36(r2)
   4bc30:	e0bffb17 	ldw	r2,-20(fp)
   4bc34:	10800117 	ldw	r2,4(r2)
   4bc38:	18bff736 	bltu	r3,r2,4bc18 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4bc3c:	e0bffb17 	ldw	r2,-20(fp)
   4bc40:	10c00d17 	ldw	r3,52(r2)
   4bc44:	e0bff917 	ldw	r2,-28(fp)
   4bc48:	18800326 	beq	r3,r2,4bc58 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   4bc4c:	e0bffd17 	ldw	r2,-12(fp)
   4bc50:	10800048 	cmpgei	r2,r2,1
   4bc54:	103fcd1e 	bne	r2,zero,4bb8c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4bc58:	e0fffc17 	ldw	r3,-16(fp)
   4bc5c:	e0bff617 	ldw	r2,-40(fp)
   4bc60:	18800526 	beq	r3,r2,4bc78 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   4bc64:	e0fffc17 	ldw	r3,-16(fp)
   4bc68:	e0bff617 	ldw	r2,-40(fp)
   4bc6c:	1887c83a 	sub	r3,r3,r2
   4bc70:	e0ffff15 	stw	r3,-4(fp)
   4bc74:	00000906 	br	4bc9c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   4bc78:	e0bffe17 	ldw	r2,-8(fp)
   4bc7c:	1090000c 	andi	r2,r2,16384
   4bc80:	1005003a 	cmpeq	r2,r2,zero
   4bc84:	1000031e 	bne	r2,zero,4bc94 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   4bc88:	00bffd44 	movi	r2,-11
   4bc8c:	e0bfff15 	stw	r2,-4(fp)
   4bc90:	00000206 	br	4bc9c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   4bc94:	00bffec4 	movi	r2,-5
   4bc98:	e0bfff15 	stw	r2,-4(fp)
   4bc9c:	e0bfff17 	ldw	r2,-4(fp)
}
   4bca0:	e037883a 	mov	sp,fp
   4bca4:	dfc00117 	ldw	ra,4(sp)
   4bca8:	df000017 	ldw	fp,0(sp)
   4bcac:	dec00204 	addi	sp,sp,8
   4bcb0:	f800283a 	ret

0004bcb4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4bcb4:	defffa04 	addi	sp,sp,-24
   4bcb8:	dfc00515 	stw	ra,20(sp)
   4bcbc:	df000415 	stw	fp,16(sp)
   4bcc0:	df000404 	addi	fp,sp,16
   4bcc4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4bcc8:	e0bfff17 	ldw	r2,-4(fp)
   4bccc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4bcd0:	e0bfff17 	ldw	r2,-4(fp)
   4bcd4:	10800104 	addi	r2,r2,4
   4bcd8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bcdc:	0005303a 	rdctl	r2,status
   4bce0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bce4:	e0fffd17 	ldw	r3,-12(fp)
   4bce8:	00bfff84 	movi	r2,-2
   4bcec:	1884703a 	and	r2,r3,r2
   4bcf0:	1001703a 	wrctl	status,r2
  
  return context;
   4bcf4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4bcf8:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   4bcfc:	004c9fc0 	call	4c9fc <alt_tick>
   4bd00:	e0bffe17 	ldw	r2,-8(fp)
   4bd04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bd08:	e0bffc17 	ldw	r2,-16(fp)
   4bd0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4bd10:	e037883a 	mov	sp,fp
   4bd14:	dfc00117 	ldw	ra,4(sp)
   4bd18:	df000017 	ldw	fp,0(sp)
   4bd1c:	dec00204 	addi	sp,sp,8
   4bd20:	f800283a 	ret

0004bd24 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4bd24:	defff804 	addi	sp,sp,-32
   4bd28:	dfc00715 	stw	ra,28(sp)
   4bd2c:	df000615 	stw	fp,24(sp)
   4bd30:	df000604 	addi	fp,sp,24
   4bd34:	e13ffc15 	stw	r4,-16(fp)
   4bd38:	e17ffd15 	stw	r5,-12(fp)
   4bd3c:	e1bffe15 	stw	r6,-8(fp)
   4bd40:	e1ffff15 	stw	r7,-4(fp)
   4bd44:	e0bfff17 	ldw	r2,-4(fp)
   4bd48:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4bd4c:	00800174 	movhi	r2,5
   4bd50:	10839104 	addi	r2,r2,3652
   4bd54:	10800017 	ldw	r2,0(r2)
   4bd58:	1004c03a 	cmpne	r2,r2,zero
   4bd5c:	1000041e 	bne	r2,zero,4bd70 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   4bd60:	00c00174 	movhi	r3,5
   4bd64:	18c39104 	addi	r3,r3,3652
   4bd68:	e0bffb17 	ldw	r2,-20(fp)
   4bd6c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4bd70:	e0bffc17 	ldw	r2,-16(fp)
   4bd74:	10800104 	addi	r2,r2,4
   4bd78:	1007883a 	mov	r3,r2
   4bd7c:	008001c4 	movi	r2,7
   4bd80:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4bd84:	d8000015 	stw	zero,0(sp)
   4bd88:	e13ffd17 	ldw	r4,-12(fp)
   4bd8c:	e17ffe17 	ldw	r5,-8(fp)
   4bd90:	01800174 	movhi	r6,5
   4bd94:	31af2d04 	addi	r6,r6,-17228
   4bd98:	e1fffc17 	ldw	r7,-16(fp)
   4bd9c:	004c2980 	call	4c298 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4bda0:	e037883a 	mov	sp,fp
   4bda4:	dfc00117 	ldw	ra,4(sp)
   4bda8:	df000017 	ldw	fp,0(sp)
   4bdac:	dec00204 	addi	sp,sp,8
   4bdb0:	f800283a 	ret

0004bdb4 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   4bdb4:	defffd04 	addi	sp,sp,-12
   4bdb8:	df000215 	stw	fp,8(sp)
   4bdbc:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
   4bdc0:	00800174 	movhi	r2,5
   4bdc4:	10838e04 	addi	r2,r2,3640
   4bdc8:	10800017 	ldw	r2,0(r2)
   4bdcc:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   4bdd0:	00800174 	movhi	r2,5
   4bdd4:	10838f04 	addi	r2,r2,3644
   4bdd8:	10800017 	ldw	r2,0(r2)
   4bddc:	1004c03a 	cmpne	r2,r2,zero
   4bde0:	1000031e 	bne	r2,zero,4bdf0 <alt_timestamp_start+0x3c>
  {
    return -1;
   4bde4:	00bfffc4 	movi	r2,-1
   4bde8:	e0bfff15 	stw	r2,-4(fp)
   4bdec:	00001506 	br	4be44 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   4bdf0:	e0bffe17 	ldw	r2,-8(fp)
   4bdf4:	10800104 	addi	r2,r2,4
   4bdf8:	1007883a 	mov	r3,r2
   4bdfc:	00800204 	movi	r2,8
   4be00:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   4be04:	e0bffe17 	ldw	r2,-8(fp)
   4be08:	10800204 	addi	r2,r2,8
   4be0c:	1007883a 	mov	r3,r2
   4be10:	00bfffd4 	movui	r2,65535
   4be14:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   4be18:	e0bffe17 	ldw	r2,-8(fp)
   4be1c:	10800304 	addi	r2,r2,12
   4be20:	1007883a 	mov	r3,r2
   4be24:	00bfffd4 	movui	r2,65535
   4be28:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   4be2c:	e0bffe17 	ldw	r2,-8(fp)
   4be30:	10800104 	addi	r2,r2,4
   4be34:	1007883a 	mov	r3,r2
   4be38:	00800104 	movi	r2,4
   4be3c:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
   4be40:	e03fff15 	stw	zero,-4(fp)
   4be44:	e0bfff17 	ldw	r2,-4(fp)
}
   4be48:	e037883a 	mov	sp,fp
   4be4c:	df000017 	ldw	fp,0(sp)
   4be50:	dec00104 	addi	sp,sp,4
   4be54:	f800283a 	ret

0004be58 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   4be58:	defffb04 	addi	sp,sp,-20
   4be5c:	df000415 	stw	fp,16(sp)
   4be60:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
   4be64:	00800174 	movhi	r2,5
   4be68:	10838e04 	addi	r2,r2,3640
   4be6c:	10800017 	ldw	r2,0(r2)
   4be70:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   4be74:	00800174 	movhi	r2,5
   4be78:	10838f04 	addi	r2,r2,3644
   4be7c:	10800017 	ldw	r2,0(r2)
   4be80:	1004c03a 	cmpne	r2,r2,zero
   4be84:	1000031e 	bne	r2,zero,4be94 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   4be88:	00bfffc4 	movi	r2,-1
   4be8c:	e0bfff15 	stw	r2,-4(fp)
   4be90:	00001306 	br	4bee0 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   4be94:	e0bffe17 	ldw	r2,-8(fp)
   4be98:	10800404 	addi	r2,r2,16
   4be9c:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   4bea0:	e0bffe17 	ldw	r2,-8(fp)
   4bea4:	10800404 	addi	r2,r2,16
   4bea8:	10800037 	ldwio	r2,0(r2)
   4beac:	10bfffcc 	andi	r2,r2,65535
   4beb0:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   4beb4:	e0bffe17 	ldw	r2,-8(fp)
   4beb8:	10800504 	addi	r2,r2,20
   4bebc:	10800037 	ldwio	r2,0(r2)
   4bec0:	10bfffcc 	andi	r2,r2,65535
   4bec4:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   4bec8:	e0bffc17 	ldw	r2,-16(fp)
   4becc:	1006943a 	slli	r3,r2,16
   4bed0:	e0bffd17 	ldw	r2,-12(fp)
   4bed4:	1884b03a 	or	r2,r3,r2
   4bed8:	0084303a 	nor	r2,zero,r2
   4bedc:	e0bfff15 	stw	r2,-4(fp)
   4bee0:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
   4bee4:	e037883a 	mov	sp,fp
   4bee8:	df000017 	ldw	fp,0(sp)
   4beec:	dec00104 	addi	sp,sp,4
   4bef0:	f800283a 	ret

0004bef4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   4bef4:	deffff04 	addi	sp,sp,-4
   4bef8:	df000015 	stw	fp,0(sp)
   4befc:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   4bf00:	00800174 	movhi	r2,5
   4bf04:	10838f04 	addi	r2,r2,3644
   4bf08:	10800017 	ldw	r2,0(r2)
}
   4bf0c:	e037883a 	mov	sp,fp
   4bf10:	df000017 	ldw	fp,0(sp)
   4bf14:	dec00104 	addi	sp,sp,4
   4bf18:	f800283a 	ret

0004bf1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4bf1c:	defff404 	addi	sp,sp,-48
   4bf20:	df000b15 	stw	fp,44(sp)
   4bf24:	df000b04 	addi	fp,sp,44
   4bf28:	e13ffb15 	stw	r4,-20(fp)
   4bf2c:	e17ffc15 	stw	r5,-16(fp)
   4bf30:	e1bffd15 	stw	r6,-12(fp)
   4bf34:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4bf38:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4bf3c:	00800174 	movhi	r2,5
   4bf40:	10839104 	addi	r2,r2,3652
   4bf44:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4bf48:	1005003a 	cmpeq	r2,r2,zero
   4bf4c:	1000411e 	bne	r2,zero,4c054 <alt_alarm_start+0x138>
  {
    if (alarm)
   4bf50:	e0bffb17 	ldw	r2,-20(fp)
   4bf54:	1005003a 	cmpeq	r2,r2,zero
   4bf58:	10003b1e 	bne	r2,zero,4c048 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   4bf5c:	e0fffb17 	ldw	r3,-20(fp)
   4bf60:	e0bffd17 	ldw	r2,-12(fp)
   4bf64:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   4bf68:	e0fffb17 	ldw	r3,-20(fp)
   4bf6c:	e0bffe17 	ldw	r2,-8(fp)
   4bf70:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bf74:	0005303a 	rdctl	r2,status
   4bf78:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bf7c:	e0fff817 	ldw	r3,-32(fp)
   4bf80:	00bfff84 	movi	r2,-2
   4bf84:	1884703a 	and	r2,r3,r2
   4bf88:	1001703a 	wrctl	status,r2
  
  return context;
   4bf8c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4bf90:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4bf94:	00800174 	movhi	r2,5
   4bf98:	10839204 	addi	r2,r2,3656
   4bf9c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4bfa0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4bfa4:	e0fffc17 	ldw	r3,-16(fp)
   4bfa8:	e0bff917 	ldw	r2,-28(fp)
   4bfac:	1885883a 	add	r2,r3,r2
   4bfb0:	10c00044 	addi	r3,r2,1
   4bfb4:	e0bffb17 	ldw	r2,-20(fp)
   4bfb8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4bfbc:	e0bffb17 	ldw	r2,-20(fp)
   4bfc0:	10c00217 	ldw	r3,8(r2)
   4bfc4:	e0bff917 	ldw	r2,-28(fp)
   4bfc8:	1880042e 	bgeu	r3,r2,4bfdc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   4bfcc:	e0fffb17 	ldw	r3,-20(fp)
   4bfd0:	00800044 	movi	r2,1
   4bfd4:	18800405 	stb	r2,16(r3)
   4bfd8:	00000206 	br	4bfe4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   4bfdc:	e0bffb17 	ldw	r2,-20(fp)
   4bfe0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4bfe4:	e0fffb17 	ldw	r3,-20(fp)
   4bfe8:	00800174 	movhi	r2,5
   4bfec:	10bceb04 	addi	r2,r2,-3156
   4bff0:	e0bff615 	stw	r2,-40(fp)
   4bff4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4bff8:	e0fff717 	ldw	r3,-36(fp)
   4bffc:	e0bff617 	ldw	r2,-40(fp)
   4c000:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4c004:	e0bff617 	ldw	r2,-40(fp)
   4c008:	10c00017 	ldw	r3,0(r2)
   4c00c:	e0bff717 	ldw	r2,-36(fp)
   4c010:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4c014:	e0bff617 	ldw	r2,-40(fp)
   4c018:	10c00017 	ldw	r3,0(r2)
   4c01c:	e0bff717 	ldw	r2,-36(fp)
   4c020:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4c024:	e0fff617 	ldw	r3,-40(fp)
   4c028:	e0bff717 	ldw	r2,-36(fp)
   4c02c:	18800015 	stw	r2,0(r3)
   4c030:	e0bffa17 	ldw	r2,-24(fp)
   4c034:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c038:	e0bff517 	ldw	r2,-44(fp)
   4c03c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4c040:	e03fff15 	stw	zero,-4(fp)
   4c044:	00000506 	br	4c05c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   4c048:	00bffa84 	movi	r2,-22
   4c04c:	e0bfff15 	stw	r2,-4(fp)
   4c050:	00000206 	br	4c05c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   4c054:	00bfde84 	movi	r2,-134
   4c058:	e0bfff15 	stw	r2,-4(fp)
   4c05c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   4c060:	e037883a 	mov	sp,fp
   4c064:	df000017 	ldw	fp,0(sp)
   4c068:	dec00104 	addi	sp,sp,4
   4c06c:	f800283a 	ret

0004c070 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4c070:	deffff04 	addi	sp,sp,-4
   4c074:	df000015 	stw	fp,0(sp)
   4c078:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4c07c:	e037883a 	mov	sp,fp
   4c080:	df000017 	ldw	fp,0(sp)
   4c084:	dec00104 	addi	sp,sp,4
   4c088:	f800283a 	ret

0004c08c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4c08c:	defff904 	addi	sp,sp,-28
   4c090:	dfc00615 	stw	ra,24(sp)
   4c094:	df000515 	stw	fp,20(sp)
   4c098:	df000504 	addi	fp,sp,20
   4c09c:	e13ffd15 	stw	r4,-12(fp)
   4c0a0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4c0a4:	e0bffd17 	ldw	r2,-12(fp)
   4c0a8:	1005003a 	cmpeq	r2,r2,zero
   4c0ac:	1000041e 	bne	r2,zero,4c0c0 <alt_dev_llist_insert+0x34>
   4c0b0:	e0bffd17 	ldw	r2,-12(fp)
   4c0b4:	10800217 	ldw	r2,8(r2)
   4c0b8:	1004c03a 	cmpne	r2,r2,zero
   4c0bc:	1000071e 	bne	r2,zero,4c0dc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   4c0c0:	004c1400 	call	4c140 <alt_get_errno>
   4c0c4:	1007883a 	mov	r3,r2
   4c0c8:	00800584 	movi	r2,22
   4c0cc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4c0d0:	00bffa84 	movi	r2,-22
   4c0d4:	e0bfff15 	stw	r2,-4(fp)
   4c0d8:	00001306 	br	4c128 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4c0dc:	e0fffd17 	ldw	r3,-12(fp)
   4c0e0:	e0bffe17 	ldw	r2,-8(fp)
   4c0e4:	e0bffb15 	stw	r2,-20(fp)
   4c0e8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4c0ec:	e0fffc17 	ldw	r3,-16(fp)
   4c0f0:	e0bffb17 	ldw	r2,-20(fp)
   4c0f4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4c0f8:	e0bffb17 	ldw	r2,-20(fp)
   4c0fc:	10c00017 	ldw	r3,0(r2)
   4c100:	e0bffc17 	ldw	r2,-16(fp)
   4c104:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4c108:	e0bffb17 	ldw	r2,-20(fp)
   4c10c:	10c00017 	ldw	r3,0(r2)
   4c110:	e0bffc17 	ldw	r2,-16(fp)
   4c114:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4c118:	e0fffb17 	ldw	r3,-20(fp)
   4c11c:	e0bffc17 	ldw	r2,-16(fp)
   4c120:	18800015 	stw	r2,0(r3)

  return 0;  
   4c124:	e03fff15 	stw	zero,-4(fp)
   4c128:	e0bfff17 	ldw	r2,-4(fp)
}
   4c12c:	e037883a 	mov	sp,fp
   4c130:	dfc00117 	ldw	ra,4(sp)
   4c134:	df000017 	ldw	fp,0(sp)
   4c138:	dec00204 	addi	sp,sp,8
   4c13c:	f800283a 	ret

0004c140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c140:	defffd04 	addi	sp,sp,-12
   4c144:	dfc00215 	stw	ra,8(sp)
   4c148:	df000115 	stw	fp,4(sp)
   4c14c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4c150:	00800174 	movhi	r2,5
   4c154:	10bce804 	addi	r2,r2,-3168
   4c158:	10800017 	ldw	r2,0(r2)
   4c15c:	1005003a 	cmpeq	r2,r2,zero
   4c160:	1000061e 	bne	r2,zero,4c17c <alt_get_errno+0x3c>
   4c164:	00800174 	movhi	r2,5
   4c168:	10bce804 	addi	r2,r2,-3168
   4c16c:	10800017 	ldw	r2,0(r2)
   4c170:	103ee83a 	callr	r2
   4c174:	e0bfff15 	stw	r2,-4(fp)
   4c178:	00000306 	br	4c188 <alt_get_errno+0x48>
   4c17c:	00800174 	movhi	r2,5
   4c180:	10838a04 	addi	r2,r2,3624
   4c184:	e0bfff15 	stw	r2,-4(fp)
   4c188:	e0bfff17 	ldw	r2,-4(fp)
}
   4c18c:	e037883a 	mov	sp,fp
   4c190:	dfc00117 	ldw	ra,4(sp)
   4c194:	df000017 	ldw	fp,0(sp)
   4c198:	dec00204 	addi	sp,sp,8
   4c19c:	f800283a 	ret

0004c1a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4c1a0:	defffd04 	addi	sp,sp,-12
   4c1a4:	dfc00215 	stw	ra,8(sp)
   4c1a8:	df000115 	stw	fp,4(sp)
   4c1ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4c1b0:	00bfff04 	movi	r2,-4
   4c1b4:	00c00174 	movhi	r3,5
   4c1b8:	18f3f904 	addi	r3,r3,-12316
   4c1bc:	1885883a 	add	r2,r3,r2
   4c1c0:	e0bfff15 	stw	r2,-4(fp)
   4c1c4:	00000606 	br	4c1e0 <_do_ctors+0x40>
        (*ctor) (); 
   4c1c8:	e0bfff17 	ldw	r2,-4(fp)
   4c1cc:	10800017 	ldw	r2,0(r2)
   4c1d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4c1d4:	e0bfff17 	ldw	r2,-4(fp)
   4c1d8:	10bfff04 	addi	r2,r2,-4
   4c1dc:	e0bfff15 	stw	r2,-4(fp)
   4c1e0:	e0ffff17 	ldw	r3,-4(fp)
   4c1e4:	00800174 	movhi	r2,5
   4c1e8:	10b3f804 	addi	r2,r2,-12320
   4c1ec:	18bff62e 	bgeu	r3,r2,4c1c8 <_do_ctors+0x28>
        (*ctor) (); 
}
   4c1f0:	e037883a 	mov	sp,fp
   4c1f4:	dfc00117 	ldw	ra,4(sp)
   4c1f8:	df000017 	ldw	fp,0(sp)
   4c1fc:	dec00204 	addi	sp,sp,8
   4c200:	f800283a 	ret

0004c204 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4c204:	defffd04 	addi	sp,sp,-12
   4c208:	dfc00215 	stw	ra,8(sp)
   4c20c:	df000115 	stw	fp,4(sp)
   4c210:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4c214:	00bfff04 	movi	r2,-4
   4c218:	00c00174 	movhi	r3,5
   4c21c:	18f3f904 	addi	r3,r3,-12316
   4c220:	1885883a 	add	r2,r3,r2
   4c224:	e0bfff15 	stw	r2,-4(fp)
   4c228:	00000606 	br	4c244 <_do_dtors+0x40>
        (*dtor) (); 
   4c22c:	e0bfff17 	ldw	r2,-4(fp)
   4c230:	10800017 	ldw	r2,0(r2)
   4c234:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4c238:	e0bfff17 	ldw	r2,-4(fp)
   4c23c:	10bfff04 	addi	r2,r2,-4
   4c240:	e0bfff15 	stw	r2,-4(fp)
   4c244:	e0ffff17 	ldw	r3,-4(fp)
   4c248:	00800174 	movhi	r2,5
   4c24c:	10b3f904 	addi	r2,r2,-12316
   4c250:	18bff62e 	bgeu	r3,r2,4c22c <_do_dtors+0x28>
        (*dtor) (); 
}
   4c254:	e037883a 	mov	sp,fp
   4c258:	dfc00117 	ldw	ra,4(sp)
   4c25c:	df000017 	ldw	fp,0(sp)
   4c260:	dec00204 	addi	sp,sp,8
   4c264:	f800283a 	ret

0004c268 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4c268:	defffe04 	addi	sp,sp,-8
   4c26c:	dfc00115 	stw	ra,4(sp)
   4c270:	df000015 	stw	fp,0(sp)
   4c274:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4c278:	0009883a 	mov	r4,zero
   4c27c:	01440004 	movi	r5,4096
   4c280:	004cd940 	call	4cd94 <alt_icache_flush>
#endif
}
   4c284:	e037883a 	mov	sp,fp
   4c288:	dfc00117 	ldw	ra,4(sp)
   4c28c:	df000017 	ldw	fp,0(sp)
   4c290:	dec00204 	addi	sp,sp,8
   4c294:	f800283a 	ret

0004c298 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4c298:	defff904 	addi	sp,sp,-28
   4c29c:	dfc00615 	stw	ra,24(sp)
   4c2a0:	df000515 	stw	fp,20(sp)
   4c2a4:	df000504 	addi	fp,sp,20
   4c2a8:	e13ffc15 	stw	r4,-16(fp)
   4c2ac:	e17ffd15 	stw	r5,-12(fp)
   4c2b0:	e1bffe15 	stw	r6,-8(fp)
   4c2b4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4c2b8:	e0800217 	ldw	r2,8(fp)
   4c2bc:	d8800015 	stw	r2,0(sp)
   4c2c0:	e13ffc17 	ldw	r4,-16(fp)
   4c2c4:	e17ffd17 	ldw	r5,-12(fp)
   4c2c8:	e1bffe17 	ldw	r6,-8(fp)
   4c2cc:	e1ffff17 	ldw	r7,-4(fp)
   4c2d0:	004c46c0 	call	4c46c <alt_iic_isr_register>
}  
   4c2d4:	e037883a 	mov	sp,fp
   4c2d8:	dfc00117 	ldw	ra,4(sp)
   4c2dc:	df000017 	ldw	fp,0(sp)
   4c2e0:	dec00204 	addi	sp,sp,8
   4c2e4:	f800283a 	ret

0004c2e8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4c2e8:	defff904 	addi	sp,sp,-28
   4c2ec:	df000615 	stw	fp,24(sp)
   4c2f0:	df000604 	addi	fp,sp,24
   4c2f4:	e13ffe15 	stw	r4,-8(fp)
   4c2f8:	e17fff15 	stw	r5,-4(fp)
   4c2fc:	e0bfff17 	ldw	r2,-4(fp)
   4c300:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c304:	0005303a 	rdctl	r2,status
   4c308:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c30c:	e0fffb17 	ldw	r3,-20(fp)
   4c310:	00bfff84 	movi	r2,-2
   4c314:	1884703a 	and	r2,r3,r2
   4c318:	1001703a 	wrctl	status,r2
  
  return context;
   4c31c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4c320:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   4c324:	e0fffc17 	ldw	r3,-16(fp)
   4c328:	00800044 	movi	r2,1
   4c32c:	10c4983a 	sll	r2,r2,r3
   4c330:	1007883a 	mov	r3,r2
   4c334:	00800174 	movhi	r2,5
   4c338:	10839004 	addi	r2,r2,3648
   4c33c:	10800017 	ldw	r2,0(r2)
   4c340:	1886b03a 	or	r3,r3,r2
   4c344:	00800174 	movhi	r2,5
   4c348:	10839004 	addi	r2,r2,3648
   4c34c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4c350:	00800174 	movhi	r2,5
   4c354:	10839004 	addi	r2,r2,3648
   4c358:	10800017 	ldw	r2,0(r2)
   4c35c:	100170fa 	wrctl	ienable,r2
   4c360:	e0bffd17 	ldw	r2,-12(fp)
   4c364:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c368:	e0bffa17 	ldw	r2,-24(fp)
   4c36c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4c370:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4c374:	e037883a 	mov	sp,fp
   4c378:	df000017 	ldw	fp,0(sp)
   4c37c:	dec00104 	addi	sp,sp,4
   4c380:	f800283a 	ret

0004c384 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4c384:	defff904 	addi	sp,sp,-28
   4c388:	df000615 	stw	fp,24(sp)
   4c38c:	df000604 	addi	fp,sp,24
   4c390:	e13ffe15 	stw	r4,-8(fp)
   4c394:	e17fff15 	stw	r5,-4(fp)
   4c398:	e0bfff17 	ldw	r2,-4(fp)
   4c39c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c3a0:	0005303a 	rdctl	r2,status
   4c3a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c3a8:	e0fffb17 	ldw	r3,-20(fp)
   4c3ac:	00bfff84 	movi	r2,-2
   4c3b0:	1884703a 	and	r2,r3,r2
   4c3b4:	1001703a 	wrctl	status,r2
  
  return context;
   4c3b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4c3bc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   4c3c0:	e0fffc17 	ldw	r3,-16(fp)
   4c3c4:	00800044 	movi	r2,1
   4c3c8:	10c4983a 	sll	r2,r2,r3
   4c3cc:	0084303a 	nor	r2,zero,r2
   4c3d0:	1007883a 	mov	r3,r2
   4c3d4:	00800174 	movhi	r2,5
   4c3d8:	10839004 	addi	r2,r2,3648
   4c3dc:	10800017 	ldw	r2,0(r2)
   4c3e0:	1886703a 	and	r3,r3,r2
   4c3e4:	00800174 	movhi	r2,5
   4c3e8:	10839004 	addi	r2,r2,3648
   4c3ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4c3f0:	00800174 	movhi	r2,5
   4c3f4:	10839004 	addi	r2,r2,3648
   4c3f8:	10800017 	ldw	r2,0(r2)
   4c3fc:	100170fa 	wrctl	ienable,r2
   4c400:	e0bffd17 	ldw	r2,-12(fp)
   4c404:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c408:	e0bffa17 	ldw	r2,-24(fp)
   4c40c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4c410:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4c414:	e037883a 	mov	sp,fp
   4c418:	df000017 	ldw	fp,0(sp)
   4c41c:	dec00104 	addi	sp,sp,4
   4c420:	f800283a 	ret

0004c424 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4c424:	defffc04 	addi	sp,sp,-16
   4c428:	df000315 	stw	fp,12(sp)
   4c42c:	df000304 	addi	fp,sp,12
   4c430:	e13ffe15 	stw	r4,-8(fp)
   4c434:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4c438:	000530fa 	rdctl	r2,ienable
   4c43c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4c440:	e0ffff17 	ldw	r3,-4(fp)
   4c444:	00800044 	movi	r2,1
   4c448:	10c4983a 	sll	r2,r2,r3
   4c44c:	1007883a 	mov	r3,r2
   4c450:	e0bffd17 	ldw	r2,-12(fp)
   4c454:	1884703a 	and	r2,r3,r2
   4c458:	1004c03a 	cmpne	r2,r2,zero
}
   4c45c:	e037883a 	mov	sp,fp
   4c460:	df000017 	ldw	fp,0(sp)
   4c464:	dec00104 	addi	sp,sp,4
   4c468:	f800283a 	ret

0004c46c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4c46c:	defff404 	addi	sp,sp,-48
   4c470:	dfc00b15 	stw	ra,44(sp)
   4c474:	df000a15 	stw	fp,40(sp)
   4c478:	df000a04 	addi	fp,sp,40
   4c47c:	e13ffb15 	stw	r4,-20(fp)
   4c480:	e17ffc15 	stw	r5,-16(fp)
   4c484:	e1bffd15 	stw	r6,-12(fp)
   4c488:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   4c48c:	00bffa84 	movi	r2,-22
   4c490:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4c494:	e0bffc17 	ldw	r2,-16(fp)
   4c498:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4c49c:	e0bff917 	ldw	r2,-28(fp)
   4c4a0:	10800808 	cmpgei	r2,r2,32
   4c4a4:	1000291e 	bne	r2,zero,4c54c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c4a8:	0005303a 	rdctl	r2,status
   4c4ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c4b0:	e0fff717 	ldw	r3,-36(fp)
   4c4b4:	00bfff84 	movi	r2,-2
   4c4b8:	1884703a 	and	r2,r3,r2
   4c4bc:	1001703a 	wrctl	status,r2
  
  return context;
   4c4c0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4c4c4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   4c4c8:	e0bff917 	ldw	r2,-28(fp)
   4c4cc:	00c00174 	movhi	r3,5
   4c4d0:	18cc9d04 	addi	r3,r3,12916
   4c4d4:	100490fa 	slli	r2,r2,3
   4c4d8:	10c7883a 	add	r3,r2,r3
   4c4dc:	e0bffd17 	ldw	r2,-12(fp)
   4c4e0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   4c4e4:	e0bff917 	ldw	r2,-28(fp)
   4c4e8:	00c00174 	movhi	r3,5
   4c4ec:	18cc9d04 	addi	r3,r3,12916
   4c4f0:	100490fa 	slli	r2,r2,3
   4c4f4:	10c5883a 	add	r2,r2,r3
   4c4f8:	10c00104 	addi	r3,r2,4
   4c4fc:	e0bffe17 	ldw	r2,-8(fp)
   4c500:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4c504:	e0bffd17 	ldw	r2,-12(fp)
   4c508:	1005003a 	cmpeq	r2,r2,zero
   4c50c:	1000051e 	bne	r2,zero,4c524 <alt_iic_isr_register+0xb8>
   4c510:	e17ff917 	ldw	r5,-28(fp)
   4c514:	e13ffb17 	ldw	r4,-20(fp)
   4c518:	004c2e80 	call	4c2e8 <alt_ic_irq_enable>
   4c51c:	e0bfff15 	stw	r2,-4(fp)
   4c520:	00000406 	br	4c534 <alt_iic_isr_register+0xc8>
   4c524:	e17ff917 	ldw	r5,-28(fp)
   4c528:	e13ffb17 	ldw	r4,-20(fp)
   4c52c:	004c3840 	call	4c384 <alt_ic_irq_disable>
   4c530:	e0bfff15 	stw	r2,-4(fp)
   4c534:	e0bfff17 	ldw	r2,-4(fp)
   4c538:	e0bffa15 	stw	r2,-24(fp)
   4c53c:	e0bff817 	ldw	r2,-32(fp)
   4c540:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c544:	e0bff617 	ldw	r2,-40(fp)
   4c548:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4c54c:	e0bffa17 	ldw	r2,-24(fp)
}
   4c550:	e037883a 	mov	sp,fp
   4c554:	dfc00117 	ldw	ra,4(sp)
   4c558:	df000017 	ldw	fp,0(sp)
   4c55c:	dec00204 	addi	sp,sp,8
   4c560:	f800283a 	ret

0004c564 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4c564:	defff904 	addi	sp,sp,-28
   4c568:	dfc00615 	stw	ra,24(sp)
   4c56c:	df000515 	stw	fp,20(sp)
   4c570:	df000504 	addi	fp,sp,20
   4c574:	e13ffc15 	stw	r4,-16(fp)
   4c578:	e17ffd15 	stw	r5,-12(fp)
   4c57c:	e1bffe15 	stw	r6,-8(fp)
   4c580:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4c584:	e13ffd17 	ldw	r4,-12(fp)
   4c588:	e17ffe17 	ldw	r5,-8(fp)
   4c58c:	e1bfff17 	ldw	r6,-4(fp)
   4c590:	004c77c0 	call	4c77c <open>
   4c594:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4c598:	e0bffb17 	ldw	r2,-20(fp)
   4c59c:	1004803a 	cmplt	r2,r2,zero
   4c5a0:	10001c1e 	bne	r2,zero,4c614 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   4c5a4:	e0bffb17 	ldw	r2,-20(fp)
   4c5a8:	00c00174 	movhi	r3,5
   4c5ac:	18f86504 	addi	r3,r3,-7788
   4c5b0:	10800324 	muli	r2,r2,12
   4c5b4:	10c5883a 	add	r2,r2,r3
   4c5b8:	10c00017 	ldw	r3,0(r2)
   4c5bc:	e0bffc17 	ldw	r2,-16(fp)
   4c5c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4c5c4:	e0bffb17 	ldw	r2,-20(fp)
   4c5c8:	00c00174 	movhi	r3,5
   4c5cc:	18f86504 	addi	r3,r3,-7788
   4c5d0:	10800324 	muli	r2,r2,12
   4c5d4:	10c5883a 	add	r2,r2,r3
   4c5d8:	10800104 	addi	r2,r2,4
   4c5dc:	10c00017 	ldw	r3,0(r2)
   4c5e0:	e0bffc17 	ldw	r2,-16(fp)
   4c5e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4c5e8:	e0bffb17 	ldw	r2,-20(fp)
   4c5ec:	00c00174 	movhi	r3,5
   4c5f0:	18f86504 	addi	r3,r3,-7788
   4c5f4:	10800324 	muli	r2,r2,12
   4c5f8:	10c5883a 	add	r2,r2,r3
   4c5fc:	10800204 	addi	r2,r2,8
   4c600:	10c00017 	ldw	r3,0(r2)
   4c604:	e0bffc17 	ldw	r2,-16(fp)
   4c608:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4c60c:	e13ffb17 	ldw	r4,-20(fp)
   4c610:	004ae7c0 	call	4ae7c <alt_release_fd>
  }
} 
   4c614:	e037883a 	mov	sp,fp
   4c618:	dfc00117 	ldw	ra,4(sp)
   4c61c:	df000017 	ldw	fp,0(sp)
   4c620:	dec00204 	addi	sp,sp,8
   4c624:	f800283a 	ret

0004c628 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4c628:	defffb04 	addi	sp,sp,-20
   4c62c:	dfc00415 	stw	ra,16(sp)
   4c630:	df000315 	stw	fp,12(sp)
   4c634:	df000304 	addi	fp,sp,12
   4c638:	e13ffd15 	stw	r4,-12(fp)
   4c63c:	e17ffe15 	stw	r5,-8(fp)
   4c640:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4c644:	01000174 	movhi	r4,5
   4c648:	21386804 	addi	r4,r4,-7776
   4c64c:	e17ffd17 	ldw	r5,-12(fp)
   4c650:	01800044 	movi	r6,1
   4c654:	01c07fc4 	movi	r7,511
   4c658:	004c5640 	call	4c564 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4c65c:	01000174 	movhi	r4,5
   4c660:	21386504 	addi	r4,r4,-7788
   4c664:	e17ffe17 	ldw	r5,-8(fp)
   4c668:	000d883a 	mov	r6,zero
   4c66c:	01c07fc4 	movi	r7,511
   4c670:	004c5640 	call	4c564 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4c674:	01000174 	movhi	r4,5
   4c678:	21386b04 	addi	r4,r4,-7764
   4c67c:	e17fff17 	ldw	r5,-4(fp)
   4c680:	01800044 	movi	r6,1
   4c684:	01c07fc4 	movi	r7,511
   4c688:	004c5640 	call	4c564 <alt_open_fd>
}  
   4c68c:	e037883a 	mov	sp,fp
   4c690:	dfc00117 	ldw	ra,4(sp)
   4c694:	df000017 	ldw	fp,0(sp)
   4c698:	dec00204 	addi	sp,sp,8
   4c69c:	f800283a 	ret

0004c6a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4c6a0:	defffc04 	addi	sp,sp,-16
   4c6a4:	df000315 	stw	fp,12(sp)
   4c6a8:	df000304 	addi	fp,sp,12
   4c6ac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4c6b0:	e0bffe17 	ldw	r2,-8(fp)
   4c6b4:	10800217 	ldw	r2,8(r2)
   4c6b8:	10d00034 	orhi	r3,r2,16384
   4c6bc:	e0bffe17 	ldw	r2,-8(fp)
   4c6c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c6c4:	e03ffd15 	stw	zero,-12(fp)
   4c6c8:	00002006 	br	4c74c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4c6cc:	e0bffd17 	ldw	r2,-12(fp)
   4c6d0:	00c00174 	movhi	r3,5
   4c6d4:	18f86504 	addi	r3,r3,-7788
   4c6d8:	10800324 	muli	r2,r2,12
   4c6dc:	10c5883a 	add	r2,r2,r3
   4c6e0:	10c00017 	ldw	r3,0(r2)
   4c6e4:	e0bffe17 	ldw	r2,-8(fp)
   4c6e8:	10800017 	ldw	r2,0(r2)
   4c6ec:	1880141e 	bne	r3,r2,4c740 <alt_file_locked+0xa0>
   4c6f0:	e0bffd17 	ldw	r2,-12(fp)
   4c6f4:	00c00174 	movhi	r3,5
   4c6f8:	18f86504 	addi	r3,r3,-7788
   4c6fc:	10800324 	muli	r2,r2,12
   4c700:	10c5883a 	add	r2,r2,r3
   4c704:	10800204 	addi	r2,r2,8
   4c708:	10800017 	ldw	r2,0(r2)
   4c70c:	1004403a 	cmpge	r2,r2,zero
   4c710:	10000b1e 	bne	r2,zero,4c740 <alt_file_locked+0xa0>
   4c714:	e0bffd17 	ldw	r2,-12(fp)
   4c718:	10800324 	muli	r2,r2,12
   4c71c:	1007883a 	mov	r3,r2
   4c720:	00800174 	movhi	r2,5
   4c724:	10b86504 	addi	r2,r2,-7788
   4c728:	1887883a 	add	r3,r3,r2
   4c72c:	e0bffe17 	ldw	r2,-8(fp)
   4c730:	18800326 	beq	r3,r2,4c740 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4c734:	00bffcc4 	movi	r2,-13
   4c738:	e0bfff15 	stw	r2,-4(fp)
   4c73c:	00000a06 	br	4c768 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c740:	e0bffd17 	ldw	r2,-12(fp)
   4c744:	10800044 	addi	r2,r2,1
   4c748:	e0bffd15 	stw	r2,-12(fp)
   4c74c:	00800174 	movhi	r2,5
   4c750:	10bce704 	addi	r2,r2,-3172
   4c754:	10800017 	ldw	r2,0(r2)
   4c758:	1007883a 	mov	r3,r2
   4c75c:	e0bffd17 	ldw	r2,-12(fp)
   4c760:	18bfda2e 	bgeu	r3,r2,4c6cc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4c764:	e03fff15 	stw	zero,-4(fp)
   4c768:	e0bfff17 	ldw	r2,-4(fp)
}
   4c76c:	e037883a 	mov	sp,fp
   4c770:	df000017 	ldw	fp,0(sp)
   4c774:	dec00104 	addi	sp,sp,4
   4c778:	f800283a 	ret

0004c77c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4c77c:	defff404 	addi	sp,sp,-48
   4c780:	dfc00b15 	stw	ra,44(sp)
   4c784:	df000a15 	stw	fp,40(sp)
   4c788:	df000a04 	addi	fp,sp,40
   4c78c:	e13ffb15 	stw	r4,-20(fp)
   4c790:	e17ffc15 	stw	r5,-16(fp)
   4c794:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4c798:	00bfffc4 	movi	r2,-1
   4c79c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   4c7a0:	00bffb44 	movi	r2,-19
   4c7a4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   4c7a8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4c7ac:	e13ffb17 	ldw	r4,-20(fp)
   4c7b0:	01400174 	movhi	r5,5
   4c7b4:	297ce504 	addi	r5,r5,-3180
   4c7b8:	004cb280 	call	4cb28 <alt_find_dev>
   4c7bc:	e0bffa15 	stw	r2,-24(fp)
   4c7c0:	e0bffa17 	ldw	r2,-24(fp)
   4c7c4:	1004c03a 	cmpne	r2,r2,zero
   4c7c8:	1000051e 	bne	r2,zero,4c7e0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4c7cc:	e13ffb17 	ldw	r4,-20(fp)
   4c7d0:	004cbbc0 	call	4cbbc <alt_find_file>
   4c7d4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   4c7d8:	00800044 	movi	r2,1
   4c7dc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4c7e0:	e0bffa17 	ldw	r2,-24(fp)
   4c7e4:	1005003a 	cmpeq	r2,r2,zero
   4c7e8:	1000301e 	bne	r2,zero,4c8ac <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4c7ec:	e13ffa17 	ldw	r4,-24(fp)
   4c7f0:	004ccdc0 	call	4ccdc <alt_get_fd>
   4c7f4:	e0bff815 	stw	r2,-32(fp)
   4c7f8:	e0bff817 	ldw	r2,-32(fp)
   4c7fc:	1004403a 	cmpge	r2,r2,zero
   4c800:	1000031e 	bne	r2,zero,4c810 <open+0x94>
    {
      status = index;
   4c804:	e0bff817 	ldw	r2,-32(fp)
   4c808:	e0bff715 	stw	r2,-36(fp)
   4c80c:	00002906 	br	4c8b4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   4c810:	e0bff817 	ldw	r2,-32(fp)
   4c814:	10800324 	muli	r2,r2,12
   4c818:	1007883a 	mov	r3,r2
   4c81c:	00800174 	movhi	r2,5
   4c820:	10b86504 	addi	r2,r2,-7788
   4c824:	1885883a 	add	r2,r3,r2
   4c828:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4c82c:	e0fffc17 	ldw	r3,-16(fp)
   4c830:	00900034 	movhi	r2,16384
   4c834:	10bfffc4 	addi	r2,r2,-1
   4c838:	1886703a 	and	r3,r3,r2
   4c83c:	e0bff917 	ldw	r2,-28(fp)
   4c840:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4c844:	e0bff617 	ldw	r2,-40(fp)
   4c848:	1004c03a 	cmpne	r2,r2,zero
   4c84c:	1000061e 	bne	r2,zero,4c868 <open+0xec>
   4c850:	e13ff917 	ldw	r4,-28(fp)
   4c854:	004c6a00 	call	4c6a0 <alt_file_locked>
   4c858:	e0bff715 	stw	r2,-36(fp)
   4c85c:	e0bff717 	ldw	r2,-36(fp)
   4c860:	1004803a 	cmplt	r2,r2,zero
   4c864:	1000131e 	bne	r2,zero,4c8b4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4c868:	e0bffa17 	ldw	r2,-24(fp)
   4c86c:	10800317 	ldw	r2,12(r2)
   4c870:	1005003a 	cmpeq	r2,r2,zero
   4c874:	1000091e 	bne	r2,zero,4c89c <open+0x120>
   4c878:	e0bffa17 	ldw	r2,-24(fp)
   4c87c:	10800317 	ldw	r2,12(r2)
   4c880:	e13ff917 	ldw	r4,-28(fp)
   4c884:	e17ffb17 	ldw	r5,-20(fp)
   4c888:	e1bffc17 	ldw	r6,-16(fp)
   4c88c:	e1fffd17 	ldw	r7,-12(fp)
   4c890:	103ee83a 	callr	r2
   4c894:	e0bfff15 	stw	r2,-4(fp)
   4c898:	00000106 	br	4c8a0 <open+0x124>
   4c89c:	e03fff15 	stw	zero,-4(fp)
   4c8a0:	e0bfff17 	ldw	r2,-4(fp)
   4c8a4:	e0bff715 	stw	r2,-36(fp)
   4c8a8:	00000206 	br	4c8b4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4c8ac:	00bffb44 	movi	r2,-19
   4c8b0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4c8b4:	e0bff717 	ldw	r2,-36(fp)
   4c8b8:	1004403a 	cmpge	r2,r2,zero
   4c8bc:	1000091e 	bne	r2,zero,4c8e4 <open+0x168>
  {
    alt_release_fd (index);  
   4c8c0:	e13ff817 	ldw	r4,-32(fp)
   4c8c4:	004ae7c0 	call	4ae7c <alt_release_fd>
    ALT_ERRNO = -status;
   4c8c8:	004c9040 	call	4c904 <alt_get_errno>
   4c8cc:	e0fff717 	ldw	r3,-36(fp)
   4c8d0:	00c7c83a 	sub	r3,zero,r3
   4c8d4:	10c00015 	stw	r3,0(r2)
    return -1;
   4c8d8:	00bfffc4 	movi	r2,-1
   4c8dc:	e0bffe15 	stw	r2,-8(fp)
   4c8e0:	00000206 	br	4c8ec <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   4c8e4:	e0bff817 	ldw	r2,-32(fp)
   4c8e8:	e0bffe15 	stw	r2,-8(fp)
   4c8ec:	e0bffe17 	ldw	r2,-8(fp)
}
   4c8f0:	e037883a 	mov	sp,fp
   4c8f4:	dfc00117 	ldw	ra,4(sp)
   4c8f8:	df000017 	ldw	fp,0(sp)
   4c8fc:	dec00204 	addi	sp,sp,8
   4c900:	f800283a 	ret

0004c904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c904:	defffd04 	addi	sp,sp,-12
   4c908:	dfc00215 	stw	ra,8(sp)
   4c90c:	df000115 	stw	fp,4(sp)
   4c910:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4c914:	00800174 	movhi	r2,5
   4c918:	10bce804 	addi	r2,r2,-3168
   4c91c:	10800017 	ldw	r2,0(r2)
   4c920:	1005003a 	cmpeq	r2,r2,zero
   4c924:	1000061e 	bne	r2,zero,4c940 <alt_get_errno+0x3c>
   4c928:	00800174 	movhi	r2,5
   4c92c:	10bce804 	addi	r2,r2,-3168
   4c930:	10800017 	ldw	r2,0(r2)
   4c934:	103ee83a 	callr	r2
   4c938:	e0bfff15 	stw	r2,-4(fp)
   4c93c:	00000306 	br	4c94c <alt_get_errno+0x48>
   4c940:	00800174 	movhi	r2,5
   4c944:	10838a04 	addi	r2,r2,3624
   4c948:	e0bfff15 	stw	r2,-4(fp)
   4c94c:	e0bfff17 	ldw	r2,-4(fp)
}
   4c950:	e037883a 	mov	sp,fp
   4c954:	dfc00117 	ldw	ra,4(sp)
   4c958:	df000017 	ldw	fp,0(sp)
   4c95c:	dec00204 	addi	sp,sp,8
   4c960:	f800283a 	ret

0004c964 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4c964:	defffa04 	addi	sp,sp,-24
   4c968:	df000515 	stw	fp,20(sp)
   4c96c:	df000504 	addi	fp,sp,20
   4c970:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c974:	0005303a 	rdctl	r2,status
   4c978:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c97c:	e0fffd17 	ldw	r3,-12(fp)
   4c980:	00bfff84 	movi	r2,-2
   4c984:	1884703a 	and	r2,r3,r2
   4c988:	1001703a 	wrctl	status,r2
  
  return context;
   4c98c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4c990:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   4c994:	e0bfff17 	ldw	r2,-4(fp)
   4c998:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4c99c:	e0bffc17 	ldw	r2,-16(fp)
   4c9a0:	10c00017 	ldw	r3,0(r2)
   4c9a4:	e0bffc17 	ldw	r2,-16(fp)
   4c9a8:	10800117 	ldw	r2,4(r2)
   4c9ac:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   4c9b0:	e0bffc17 	ldw	r2,-16(fp)
   4c9b4:	10c00117 	ldw	r3,4(r2)
   4c9b8:	e0bffc17 	ldw	r2,-16(fp)
   4c9bc:	10800017 	ldw	r2,0(r2)
   4c9c0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4c9c4:	e0fffc17 	ldw	r3,-16(fp)
   4c9c8:	e0bffc17 	ldw	r2,-16(fp)
   4c9cc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   4c9d0:	e0fffc17 	ldw	r3,-16(fp)
   4c9d4:	e0bffc17 	ldw	r2,-16(fp)
   4c9d8:	18800015 	stw	r2,0(r3)
   4c9dc:	e0bffe17 	ldw	r2,-8(fp)
   4c9e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c9e4:	e0bffb17 	ldw	r2,-20(fp)
   4c9e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4c9ec:	e037883a 	mov	sp,fp
   4c9f0:	df000017 	ldw	fp,0(sp)
   4c9f4:	dec00104 	addi	sp,sp,4
   4c9f8:	f800283a 	ret

0004c9fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4c9fc:	defffb04 	addi	sp,sp,-20
   4ca00:	dfc00415 	stw	ra,16(sp)
   4ca04:	df000315 	stw	fp,12(sp)
   4ca08:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4ca0c:	d0a00e17 	ldw	r2,-32712(gp)
   4ca10:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4ca14:	d0a6b517 	ldw	r2,-25900(gp)
   4ca18:	10800044 	addi	r2,r2,1
   4ca1c:	d0a6b515 	stw	r2,-25900(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4ca20:	00003106 	br	4cae8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   4ca24:	e0bffe17 	ldw	r2,-8(fp)
   4ca28:	10800017 	ldw	r2,0(r2)
   4ca2c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4ca30:	e0bffe17 	ldw	r2,-8(fp)
   4ca34:	10800403 	ldbu	r2,16(r2)
   4ca38:	10803fcc 	andi	r2,r2,255
   4ca3c:	1005003a 	cmpeq	r2,r2,zero
   4ca40:	1000051e 	bne	r2,zero,4ca58 <alt_tick+0x5c>
   4ca44:	d0a6b517 	ldw	r2,-25900(gp)
   4ca48:	1004c03a 	cmpne	r2,r2,zero
   4ca4c:	1000021e 	bne	r2,zero,4ca58 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   4ca50:	e0bffe17 	ldw	r2,-8(fp)
   4ca54:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4ca58:	e0bffe17 	ldw	r2,-8(fp)
   4ca5c:	10c00217 	ldw	r3,8(r2)
   4ca60:	d0a6b517 	ldw	r2,-25900(gp)
   4ca64:	10c01e36 	bltu	r2,r3,4cae0 <alt_tick+0xe4>
   4ca68:	e0bffe17 	ldw	r2,-8(fp)
   4ca6c:	10800403 	ldbu	r2,16(r2)
   4ca70:	10803fcc 	andi	r2,r2,255
   4ca74:	1004c03a 	cmpne	r2,r2,zero
   4ca78:	1000191e 	bne	r2,zero,4cae0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   4ca7c:	e0bffe17 	ldw	r2,-8(fp)
   4ca80:	10c00317 	ldw	r3,12(r2)
   4ca84:	e0bffe17 	ldw	r2,-8(fp)
   4ca88:	11000517 	ldw	r4,20(r2)
   4ca8c:	183ee83a 	callr	r3
   4ca90:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4ca94:	e0bffd17 	ldw	r2,-12(fp)
   4ca98:	1004c03a 	cmpne	r2,r2,zero
   4ca9c:	1000031e 	bne	r2,zero,4caac <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   4caa0:	e13ffe17 	ldw	r4,-8(fp)
   4caa4:	004c9640 	call	4c964 <alt_alarm_stop>
   4caa8:	00000d06 	br	4cae0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   4caac:	e0bffe17 	ldw	r2,-8(fp)
   4cab0:	10c00217 	ldw	r3,8(r2)
   4cab4:	e0bffd17 	ldw	r2,-12(fp)
   4cab8:	1887883a 	add	r3,r3,r2
   4cabc:	e0bffe17 	ldw	r2,-8(fp)
   4cac0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4cac4:	e0bffe17 	ldw	r2,-8(fp)
   4cac8:	10c00217 	ldw	r3,8(r2)
   4cacc:	d0a6b517 	ldw	r2,-25900(gp)
   4cad0:	1880032e 	bgeu	r3,r2,4cae0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   4cad4:	e0fffe17 	ldw	r3,-8(fp)
   4cad8:	00800044 	movi	r2,1
   4cadc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   4cae0:	e0bfff17 	ldw	r2,-4(fp)
   4cae4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4cae8:	d0e00e04 	addi	r3,gp,-32712
   4caec:	e0bffe17 	ldw	r2,-8(fp)
   4caf0:	10ffcc1e 	bne	r2,r3,4ca24 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   4caf4:	e037883a 	mov	sp,fp
   4caf8:	dfc00117 	ldw	ra,4(sp)
   4cafc:	df000017 	ldw	fp,0(sp)
   4cb00:	dec00204 	addi	sp,sp,8
   4cb04:	f800283a 	ret

0004cb08 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4cb08:	deffff04 	addi	sp,sp,-4
   4cb0c:	df000015 	stw	fp,0(sp)
   4cb10:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4cb14:	000170fa 	wrctl	ienable,zero
}
   4cb18:	e037883a 	mov	sp,fp
   4cb1c:	df000017 	ldw	fp,0(sp)
   4cb20:	dec00104 	addi	sp,sp,4
   4cb24:	f800283a 	ret

0004cb28 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4cb28:	defff904 	addi	sp,sp,-28
   4cb2c:	dfc00615 	stw	ra,24(sp)
   4cb30:	df000515 	stw	fp,20(sp)
   4cb34:	df000504 	addi	fp,sp,20
   4cb38:	e13ffd15 	stw	r4,-12(fp)
   4cb3c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4cb40:	e0bffe17 	ldw	r2,-8(fp)
   4cb44:	10800017 	ldw	r2,0(r2)
   4cb48:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4cb4c:	e13ffd17 	ldw	r4,-12(fp)
   4cb50:	0040f580 	call	40f58 <strlen>
   4cb54:	10800044 	addi	r2,r2,1
   4cb58:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4cb5c:	00000d06 	br	4cb94 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4cb60:	e0bffc17 	ldw	r2,-16(fp)
   4cb64:	11000217 	ldw	r4,8(r2)
   4cb68:	e1bffb17 	ldw	r6,-20(fp)
   4cb6c:	e17ffd17 	ldw	r5,-12(fp)
   4cb70:	004ce380 	call	4ce38 <memcmp>
   4cb74:	1004c03a 	cmpne	r2,r2,zero
   4cb78:	1000031e 	bne	r2,zero,4cb88 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4cb7c:	e0bffc17 	ldw	r2,-16(fp)
   4cb80:	e0bfff15 	stw	r2,-4(fp)
   4cb84:	00000706 	br	4cba4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4cb88:	e0bffc17 	ldw	r2,-16(fp)
   4cb8c:	10800017 	ldw	r2,0(r2)
   4cb90:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4cb94:	e0fffe17 	ldw	r3,-8(fp)
   4cb98:	e0bffc17 	ldw	r2,-16(fp)
   4cb9c:	10fff01e 	bne	r2,r3,4cb60 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4cba0:	e03fff15 	stw	zero,-4(fp)
   4cba4:	e0bfff17 	ldw	r2,-4(fp)
}
   4cba8:	e037883a 	mov	sp,fp
   4cbac:	dfc00117 	ldw	ra,4(sp)
   4cbb0:	df000017 	ldw	fp,0(sp)
   4cbb4:	dec00204 	addi	sp,sp,8
   4cbb8:	f800283a 	ret

0004cbbc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4cbbc:	defffa04 	addi	sp,sp,-24
   4cbc0:	dfc00515 	stw	ra,20(sp)
   4cbc4:	df000415 	stw	fp,16(sp)
   4cbc8:	df000404 	addi	fp,sp,16
   4cbcc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4cbd0:	00800174 	movhi	r2,5
   4cbd4:	10bce304 	addi	r2,r2,-3188
   4cbd8:	10800017 	ldw	r2,0(r2)
   4cbdc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4cbe0:	00003306 	br	4ccb0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   4cbe4:	e0bffd17 	ldw	r2,-12(fp)
   4cbe8:	11000217 	ldw	r4,8(r2)
   4cbec:	0040f580 	call	40f58 <strlen>
   4cbf0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   4cbf4:	e0bffd17 	ldw	r2,-12(fp)
   4cbf8:	10c00217 	ldw	r3,8(r2)
   4cbfc:	e0bffc17 	ldw	r2,-16(fp)
   4cc00:	1885883a 	add	r2,r3,r2
   4cc04:	10bfffc4 	addi	r2,r2,-1
   4cc08:	10800003 	ldbu	r2,0(r2)
   4cc0c:	10803fcc 	andi	r2,r2,255
   4cc10:	1080201c 	xori	r2,r2,128
   4cc14:	10bfe004 	addi	r2,r2,-128
   4cc18:	10800bd8 	cmpnei	r2,r2,47
   4cc1c:	1000031e 	bne	r2,zero,4cc2c <alt_find_file+0x70>
    {
      len -= 1;
   4cc20:	e0bffc17 	ldw	r2,-16(fp)
   4cc24:	10bfffc4 	addi	r2,r2,-1
   4cc28:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4cc2c:	e0bffc17 	ldw	r2,-16(fp)
   4cc30:	1007883a 	mov	r3,r2
   4cc34:	e0bffe17 	ldw	r2,-8(fp)
   4cc38:	1885883a 	add	r2,r3,r2
   4cc3c:	10800003 	ldbu	r2,0(r2)
   4cc40:	10803fcc 	andi	r2,r2,255
   4cc44:	1080201c 	xori	r2,r2,128
   4cc48:	10bfe004 	addi	r2,r2,-128
   4cc4c:	10800be0 	cmpeqi	r2,r2,47
   4cc50:	10000a1e 	bne	r2,zero,4cc7c <alt_find_file+0xc0>
   4cc54:	e0bffc17 	ldw	r2,-16(fp)
   4cc58:	1007883a 	mov	r3,r2
   4cc5c:	e0bffe17 	ldw	r2,-8(fp)
   4cc60:	1885883a 	add	r2,r3,r2
   4cc64:	10800003 	ldbu	r2,0(r2)
   4cc68:	10803fcc 	andi	r2,r2,255
   4cc6c:	1080201c 	xori	r2,r2,128
   4cc70:	10bfe004 	addi	r2,r2,-128
   4cc74:	1004c03a 	cmpne	r2,r2,zero
   4cc78:	10000a1e 	bne	r2,zero,4cca4 <alt_find_file+0xe8>
   4cc7c:	e0bffd17 	ldw	r2,-12(fp)
   4cc80:	11000217 	ldw	r4,8(r2)
   4cc84:	e1bffc17 	ldw	r6,-16(fp)
   4cc88:	e17ffe17 	ldw	r5,-8(fp)
   4cc8c:	004ce380 	call	4ce38 <memcmp>
   4cc90:	1004c03a 	cmpne	r2,r2,zero
   4cc94:	1000031e 	bne	r2,zero,4cca4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4cc98:	e0bffd17 	ldw	r2,-12(fp)
   4cc9c:	e0bfff15 	stw	r2,-4(fp)
   4cca0:	00000806 	br	4ccc4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   4cca4:	e0bffd17 	ldw	r2,-12(fp)
   4cca8:	10800017 	ldw	r2,0(r2)
   4ccac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4ccb0:	00c00174 	movhi	r3,5
   4ccb4:	18fce304 	addi	r3,r3,-3188
   4ccb8:	e0bffd17 	ldw	r2,-12(fp)
   4ccbc:	10ffc91e 	bne	r2,r3,4cbe4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4ccc0:	e03fff15 	stw	zero,-4(fp)
   4ccc4:	e0bfff17 	ldw	r2,-4(fp)
}
   4ccc8:	e037883a 	mov	sp,fp
   4cccc:	dfc00117 	ldw	ra,4(sp)
   4ccd0:	df000017 	ldw	fp,0(sp)
   4ccd4:	dec00204 	addi	sp,sp,8
   4ccd8:	f800283a 	ret

0004ccdc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4ccdc:	defffc04 	addi	sp,sp,-16
   4cce0:	df000315 	stw	fp,12(sp)
   4cce4:	df000304 	addi	fp,sp,12
   4cce8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4ccec:	00bffa04 	movi	r2,-24
   4ccf0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4ccf4:	e03ffe15 	stw	zero,-8(fp)
   4ccf8:	00001e06 	br	4cd74 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   4ccfc:	e0bffe17 	ldw	r2,-8(fp)
   4cd00:	00c00174 	movhi	r3,5
   4cd04:	18f86504 	addi	r3,r3,-7788
   4cd08:	10800324 	muli	r2,r2,12
   4cd0c:	10c5883a 	add	r2,r2,r3
   4cd10:	10800017 	ldw	r2,0(r2)
   4cd14:	1004c03a 	cmpne	r2,r2,zero
   4cd18:	1000131e 	bne	r2,zero,4cd68 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   4cd1c:	e0bffe17 	ldw	r2,-8(fp)
   4cd20:	00c00174 	movhi	r3,5
   4cd24:	18f86504 	addi	r3,r3,-7788
   4cd28:	10800324 	muli	r2,r2,12
   4cd2c:	10c7883a 	add	r3,r2,r3
   4cd30:	e0bfff17 	ldw	r2,-4(fp)
   4cd34:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   4cd38:	00800174 	movhi	r2,5
   4cd3c:	10bce704 	addi	r2,r2,-3172
   4cd40:	10c00017 	ldw	r3,0(r2)
   4cd44:	e0bffe17 	ldw	r2,-8(fp)
   4cd48:	1880040e 	bge	r3,r2,4cd5c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   4cd4c:	00c00174 	movhi	r3,5
   4cd50:	18fce704 	addi	r3,r3,-3172
   4cd54:	e0bffe17 	ldw	r2,-8(fp)
   4cd58:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   4cd5c:	e0bffe17 	ldw	r2,-8(fp)
   4cd60:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   4cd64:	00000606 	br	4cd80 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4cd68:	e0bffe17 	ldw	r2,-8(fp)
   4cd6c:	10800044 	addi	r2,r2,1
   4cd70:	e0bffe15 	stw	r2,-8(fp)
   4cd74:	e0bffe17 	ldw	r2,-8(fp)
   4cd78:	10800810 	cmplti	r2,r2,32
   4cd7c:	103fdf1e 	bne	r2,zero,4ccfc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4cd80:	e0bffd17 	ldw	r2,-12(fp)
}
   4cd84:	e037883a 	mov	sp,fp
   4cd88:	df000017 	ldw	fp,0(sp)
   4cd8c:	dec00104 	addi	sp,sp,4
   4cd90:	f800283a 	ret

0004cd94 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4cd94:	defffb04 	addi	sp,sp,-20
   4cd98:	df000415 	stw	fp,16(sp)
   4cd9c:	df000404 	addi	fp,sp,16
   4cda0:	e13ffe15 	stw	r4,-8(fp)
   4cda4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4cda8:	e0bfff17 	ldw	r2,-4(fp)
   4cdac:	10840070 	cmpltui	r2,r2,4097
   4cdb0:	1000021e 	bne	r2,zero,4cdbc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4cdb4:	00840004 	movi	r2,4096
   4cdb8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4cdbc:	e0fffe17 	ldw	r3,-8(fp)
   4cdc0:	e0bfff17 	ldw	r2,-4(fp)
   4cdc4:	1885883a 	add	r2,r3,r2
   4cdc8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4cdcc:	e0bffe17 	ldw	r2,-8(fp)
   4cdd0:	e0bffd15 	stw	r2,-12(fp)
   4cdd4:	00000506 	br	4cdec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4cdd8:	e0bffd17 	ldw	r2,-12(fp)
   4cddc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4cde0:	e0bffd17 	ldw	r2,-12(fp)
   4cde4:	10800804 	addi	r2,r2,32
   4cde8:	e0bffd15 	stw	r2,-12(fp)
   4cdec:	e0fffd17 	ldw	r3,-12(fp)
   4cdf0:	e0bffc17 	ldw	r2,-16(fp)
   4cdf4:	18bff836 	bltu	r3,r2,4cdd8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4cdf8:	e0bffe17 	ldw	r2,-8(fp)
   4cdfc:	108007cc 	andi	r2,r2,31
   4ce00:	1005003a 	cmpeq	r2,r2,zero
   4ce04:	1000021e 	bne	r2,zero,4ce10 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4ce08:	e0bffd17 	ldw	r2,-12(fp)
   4ce0c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4ce10:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4ce14:	e037883a 	mov	sp,fp
   4ce18:	df000017 	ldw	fp,0(sp)
   4ce1c:	dec00104 	addi	sp,sp,4
   4ce20:	f800283a 	ret

0004ce24 <atexit>:
   4ce24:	200b883a 	mov	r5,r4
   4ce28:	000d883a 	mov	r6,zero
   4ce2c:	0009883a 	mov	r4,zero
   4ce30:	000f883a 	mov	r7,zero
   4ce34:	004ceac1 	jmpi	4ceac <__register_exitproc>

0004ce38 <memcmp>:
   4ce38:	00c000c4 	movi	r3,3
   4ce3c:	1980032e 	bgeu	r3,r6,4ce4c <memcmp+0x14>
   4ce40:	2144b03a 	or	r2,r4,r5
   4ce44:	10c4703a 	and	r2,r2,r3
   4ce48:	10000f26 	beq	r2,zero,4ce88 <memcmp+0x50>
   4ce4c:	31ffffc4 	addi	r7,r6,-1
   4ce50:	3000061e 	bne	r6,zero,4ce6c <memcmp+0x34>
   4ce54:	00000a06 	br	4ce80 <memcmp+0x48>
   4ce58:	39ffffc4 	addi	r7,r7,-1
   4ce5c:	00bfffc4 	movi	r2,-1
   4ce60:	21000044 	addi	r4,r4,1
   4ce64:	29400044 	addi	r5,r5,1
   4ce68:	38800526 	beq	r7,r2,4ce80 <memcmp+0x48>
   4ce6c:	20c00003 	ldbu	r3,0(r4)
   4ce70:	28800003 	ldbu	r2,0(r5)
   4ce74:	18bff826 	beq	r3,r2,4ce58 <memcmp+0x20>
   4ce78:	1885c83a 	sub	r2,r3,r2
   4ce7c:	f800283a 	ret
   4ce80:	0005883a 	mov	r2,zero
   4ce84:	f800283a 	ret
   4ce88:	180f883a 	mov	r7,r3
   4ce8c:	20c00017 	ldw	r3,0(r4)
   4ce90:	28800017 	ldw	r2,0(r5)
   4ce94:	18bfed1e 	bne	r3,r2,4ce4c <memcmp+0x14>
   4ce98:	31bfff04 	addi	r6,r6,-4
   4ce9c:	21000104 	addi	r4,r4,4
   4cea0:	29400104 	addi	r5,r5,4
   4cea4:	39bff936 	bltu	r7,r6,4ce8c <memcmp+0x54>
   4cea8:	003fe806 	br	4ce4c <memcmp+0x14>

0004ceac <__register_exitproc>:
   4ceac:	defffa04 	addi	sp,sp,-24
   4ceb0:	00800174 	movhi	r2,5
   4ceb4:	10bcde04 	addi	r2,r2,-3208
   4ceb8:	dc000015 	stw	r16,0(sp)
   4cebc:	14000017 	ldw	r16,0(r2)
   4cec0:	dd000415 	stw	r20,16(sp)
   4cec4:	2829883a 	mov	r20,r5
   4cec8:	81405217 	ldw	r5,328(r16)
   4cecc:	dcc00315 	stw	r19,12(sp)
   4ced0:	dc800215 	stw	r18,8(sp)
   4ced4:	dc400115 	stw	r17,4(sp)
   4ced8:	dfc00515 	stw	ra,20(sp)
   4cedc:	2023883a 	mov	r17,r4
   4cee0:	3027883a 	mov	r19,r6
   4cee4:	3825883a 	mov	r18,r7
   4cee8:	28002526 	beq	r5,zero,4cf80 <__register_exitproc+0xd4>
   4ceec:	29000117 	ldw	r4,4(r5)
   4cef0:	008007c4 	movi	r2,31
   4cef4:	11002716 	blt	r2,r4,4cf94 <__register_exitproc+0xe8>
   4cef8:	8800101e 	bne	r17,zero,4cf3c <__register_exitproc+0x90>
   4cefc:	2105883a 	add	r2,r4,r4
   4cf00:	1085883a 	add	r2,r2,r2
   4cf04:	20c00044 	addi	r3,r4,1
   4cf08:	1145883a 	add	r2,r2,r5
   4cf0c:	0009883a 	mov	r4,zero
   4cf10:	15000215 	stw	r20,8(r2)
   4cf14:	28c00115 	stw	r3,4(r5)
   4cf18:	2005883a 	mov	r2,r4
   4cf1c:	dfc00517 	ldw	ra,20(sp)
   4cf20:	dd000417 	ldw	r20,16(sp)
   4cf24:	dcc00317 	ldw	r19,12(sp)
   4cf28:	dc800217 	ldw	r18,8(sp)
   4cf2c:	dc400117 	ldw	r17,4(sp)
   4cf30:	dc000017 	ldw	r16,0(sp)
   4cf34:	dec00604 	addi	sp,sp,24
   4cf38:	f800283a 	ret
   4cf3c:	29802204 	addi	r6,r5,136
   4cf40:	00800044 	movi	r2,1
   4cf44:	110e983a 	sll	r7,r2,r4
   4cf48:	30c04017 	ldw	r3,256(r6)
   4cf4c:	2105883a 	add	r2,r4,r4
   4cf50:	1085883a 	add	r2,r2,r2
   4cf54:	1185883a 	add	r2,r2,r6
   4cf58:	19c6b03a 	or	r3,r3,r7
   4cf5c:	14802015 	stw	r18,128(r2)
   4cf60:	14c00015 	stw	r19,0(r2)
   4cf64:	00800084 	movi	r2,2
   4cf68:	30c04015 	stw	r3,256(r6)
   4cf6c:	88bfe31e 	bne	r17,r2,4cefc <__register_exitproc+0x50>
   4cf70:	30804117 	ldw	r2,260(r6)
   4cf74:	11c4b03a 	or	r2,r2,r7
   4cf78:	30804115 	stw	r2,260(r6)
   4cf7c:	003fdf06 	br	4cefc <__register_exitproc+0x50>
   4cf80:	00800174 	movhi	r2,5
   4cf84:	108cdd04 	addi	r2,r2,13172
   4cf88:	100b883a 	mov	r5,r2
   4cf8c:	80805215 	stw	r2,328(r16)
   4cf90:	003fd606 	br	4ceec <__register_exitproc+0x40>
   4cf94:	00800034 	movhi	r2,0
   4cf98:	10800004 	addi	r2,r2,0
   4cf9c:	1000021e 	bne	r2,zero,4cfa8 <__register_exitproc+0xfc>
   4cfa0:	013fffc4 	movi	r4,-1
   4cfa4:	003fdc06 	br	4cf18 <__register_exitproc+0x6c>
   4cfa8:	01006404 	movi	r4,400
   4cfac:	103ee83a 	callr	r2
   4cfb0:	1007883a 	mov	r3,r2
   4cfb4:	103ffa26 	beq	r2,zero,4cfa0 <__register_exitproc+0xf4>
   4cfb8:	80805217 	ldw	r2,328(r16)
   4cfbc:	180b883a 	mov	r5,r3
   4cfc0:	18000115 	stw	zero,4(r3)
   4cfc4:	18800015 	stw	r2,0(r3)
   4cfc8:	80c05215 	stw	r3,328(r16)
   4cfcc:	18006215 	stw	zero,392(r3)
   4cfd0:	18006315 	stw	zero,396(r3)
   4cfd4:	0009883a 	mov	r4,zero
   4cfd8:	883fc826 	beq	r17,zero,4cefc <__register_exitproc+0x50>
   4cfdc:	003fd706 	br	4cf3c <__register_exitproc+0x90>
   4cfe0:	00043030 	cmpltui	zero,zero,4288
